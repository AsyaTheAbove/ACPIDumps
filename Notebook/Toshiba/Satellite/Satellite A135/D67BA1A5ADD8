
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20150717-64
Copyright (c) 2000 - 2015 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "TOSCPL"
   RSDT   0x00000054     0x01    "TOSCPL"  "TOSCPL00"   0x06040000    " LTP"     0x00000000
   DSDT   0x0000661C     0x01    "TOSCPL"  "CALISTGA"   0x06040000    "INTL"     0x20060608
   FACS   0x00000040
   FACP   0x00000074     0x01    "TOSCPL"  "CALISTGA"   0x06040000    "LOHR"     0x0000005A
   SLIC   0x00000176     0x01    "TOSCPL"  "TOSCPL00"   0x06040000    "LOHR"     0x00000000
   APIC   0x00000068     0x01    "INTEL "  "CALISTGA"   0x06040000    "LOHR"     0x0000005A
   HPET   0x00000038     0x01    "INTEL "  "CALISTGA"   0x06040000    "LOHR"     0x0000005A
   MCFG   0x0000003C     0x01    "INTEL "  "CALISTGA"   0x06040000    "LOHR"     0x0000005A
   BOOT   0x00000028     0x01    "PTLTD "  "$SBFTBL$"   0x06040000    " LTP"     0x00000001
   APIC   0x00000068     0x01    "PTLTD "  "  APIC  "   0x06040000    " LTP"     0x00000000
   SSDT   0x0000064F     0x01    "SataRe"  "SataPri "   0x00001000    "INTL"     0x20050624
   SSDT   0x00000692     0x01    "SataRe"  "SataSec "   0x00001000    "INTL"     0x20050624
   SSDT   0x0000025F     0x01    "PmRef "  "Cpu0Tst "   0x00003000    "INTL"     0x20050624
   SSDT   0x000000A6     0x01    "PmRef "  "Cpu1Tst "   0x00003000    "INTL"     0x20050624
   SSDT   0x000004E6     0x01    "PmRef "  "CpuPm   "   0x00003000    "INTL"     0x20050624
   SSDT   0x00000238     0x01    "PmRef "  "Cpu0Ist "   0x00003000    "INTL"     0x20050624
   SSDT   0x000004C2     0x01    "PmRef "  "Cpu0Cst "   0x00003001    "INTL"     0x20050624
   SSDT   0x000000C8     0x01    "PmRef "  "Cpu1Ist "   0x00003000    "INTL"     0x20050624
   SSDT   0x00000085     0x01    "PmRef "  "Cpu1Cst "   0x00003000    "INTL"     0x20050624

Found 20 ACPI tables

APIC1
-----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000068
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E4
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CALISTGA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005A

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 01 [I/O APIC]
[03Dh 0061   1]                       Length : 0C
[03Eh 0062   1]                  I/O Apic ID : 01
[03Fh 0063   1]                     Reserved : 00
[040h 0064   4]                      Address : FEC00000
[044h 0068   4]                    Interrupt : 00000000

[048h 0072   1]                Subtable Type : 02 [Interrupt Source Override]
[049h 0073   1]                       Length : 0A
[04Ah 0074   1]                          Bus : 00
[04Bh 0075   1]                       Source : 00
[04Ch 0076   4]                    Interrupt : 00000002
[050h 0080   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[052h 0082   1]                Subtable Type : 02 [Interrupt Source Override]
[053h 0083   1]                       Length : 0A
[054h 0084   1]                          Bus : 00
[055h 0085   1]                       Source : 09
[056h 0086   4]                    Interrupt : 00000009
[05Ah 0090   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[05Ch 0092   1]                Subtable Type : 04 [Local APIC NMI]
[05Dh 0093   1]                       Length : 06
[05Eh 0094   1]                 Processor ID : 00
[05Fh 0095   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[061h 0097   1]         Interrupt Input LINT : 01

[062h 0098   1]                Subtable Type : 04 [Local APIC NMI]
[063h 0099   1]                       Length : 06
[064h 0100   1]                 Processor ID : 01
[065h 0101   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[067h 0103   1]         Interrupt Input LINT : 01

Raw Table Data: Length 104 (0x68)

  0000: 41 50 49 43 68 00 00 00 01 E4 49 4E 54 45 4C 20  // APICh.....INTEL 
  0010: 43 41 4C 49 53 54 47 41 00 00 04 06 4C 4F 48 52  // CALISTGA....LOHR
  0020: 5A 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // Z...............
  0030: 01 00 00 00 00 08 01 01 01 00 00 00 01 0C 01 00  // ................
  0040: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
  0050: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 00 05  // ................
  0060: 00 01 04 06 01 05 00 01                          // ........


APIC2
-----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000068
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 13
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "  APIC  "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 01 [I/O APIC]
[03Dh 0061   1]                       Length : 0C
[03Eh 0062   1]                  I/O Apic ID : 02
[03Fh 0063   1]                     Reserved : 00
[040h 0064   4]                      Address : FEC00000
[044h 0068   4]                    Interrupt : 00000000

[048h 0072   1]                Subtable Type : 04 [Local APIC NMI]
[049h 0073   1]                       Length : 06
[04Ah 0074   1]                 Processor ID : 00
[04Bh 0075   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[04Dh 0077   1]         Interrupt Input LINT : 01

[04Eh 0078   1]                Subtable Type : 04 [Local APIC NMI]
[04Fh 0079   1]                       Length : 06
[050h 0080   1]                 Processor ID : 01
[051h 0081   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[053h 0083   1]         Interrupt Input LINT : 01

[054h 0084   1]                Subtable Type : 02 [Interrupt Source Override]
[055h 0085   1]                       Length : 0A
[056h 0086   1]                          Bus : 00
[057h 0087   1]                       Source : 00
[058h 0088   4]                    Interrupt : 00000002
[05Ch 0092   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[05Eh 0094   1]                Subtable Type : 02 [Interrupt Source Override]
[05Fh 0095   1]                       Length : 0A
[060h 0096   1]                          Bus : 00
[061h 0097   1]                       Source : 09
[062h 0098   4]                    Interrupt : 00000009
[066h 0102   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 104 (0x68)

  0000: 41 50 49 43 68 00 00 00 01 13 50 54 4C 54 44 20  // APICh.....PTLTD 
  0010: 09 20 41 50 49 43 20 20 00 00 04 06 20 4C 54 50  // . APIC  .... LTP
  0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
  0030: 01 00 00 00 00 08 01 01 01 00 00 00 01 0C 02 00  // ................
  0040: 00 00 C0 FE 00 00 00 00 04 06 00 05 00 01 04 06  // ................
  0050: 01 05 00 01 02 0A 00 00 02 00 00 00 05 00 02 0A  // ................
  0060: 00 09 09 00 00 00 0D 00                          // ........


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A5
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "$SBFTBL$"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]          Boot Register Index : 36
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

  0000: 42 4F 4F 54 28 00 00 00 01 A5 50 54 4C 54 44 20  // BOOT(.....PTLTD 
  0010: 24 53 42 46 54 42 4C 24 00 00 04 06 20 4C 54 50  // $SBFTBL$.... LTP
  0020: 01 00 00 00 36 00 00 00                          // ....6...


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 1, "TOSCPL", "CALISTGA", 0x06040000)
{

    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)

    Name (Z000, One)
    Name (Z001, 0x02)
    Name (Z002, 0x04)
    Name (Z003, 0x08)
    Name (Z004, Zero)
    Name (Z005, 0x0F)
    Name (Z006, 0x0D)
    Name (Z007, 0x0B)
    Name (Z008, 0x09)
    Name (ECDY, Zero)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    OperationRegion (IO_T, SystemIO, 0x0800, 0x10)
    Field (IO_T, ByteAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        TRP0,   8
    }

    OperationRegion (PMIO, SystemIO, 0x1000, 0x80)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        Offset (0x2A), 
            ,   10, 
        ACPW,   1, 
        Offset (0x30), 
            ,   4, 
        SLPE,   1, 
        Offset (0x34), 
            ,   4, 
        SLPS,   1, 
        Offset (0x42), 
            ,   1, 
        GPEC,   1
    }

    OperationRegion (GPIO, SystemIO, 0x1180, 0x3C)
    Field (GPIO, ByteAcc, NoLock, Preserve)
    {
        GU00,   8, 
        GU01,   8, 
        GU02,   8, 
        GU03,   8, 
        GIO0,   8, 
        GIO1,   8, 
        GIO2,   8, 
        GIO3,   8, 
        Offset (0x0C), 
        GL00,   8, 
            ,   4, 
        GP12,   1, 
        Offset (0x0E), 
        GL02,   8, 
            ,   2, 
        GP26,   1, 
        GL03,   5, 
        Offset (0x18), 
        GB00,   8, 
        GB01,   8, 
        GB02,   8, 
        GB03,   8, 
        Offset (0x2C), 
        GIV0,   8, 
            ,   5, 
        LPOL,   1, 
        Offset (0x2E), 
        GIV2,   8, 
        GIV3,   8, 
        GU04,   8, 
        GU05,   8, 
        GU06,   8, 
        GU07,   8, 
        GIO4,   8, 
        GIO5,   8, 
        GIO6,   8, 
        GIO7,   8, 
            ,   7, 
        GP39,   1, 
        GL05,   8, 
        GL06,   8, 
        GL07,   8
    }

    OperationRegion (GNVS, SystemMemory, 0x9F691DBC, 0x0100)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        LINX,   8, 
        Offset (0x14), 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSM,   1, 
        Offset (0x1E), 
        BNUM,   8, 
        B0SC,   8, 
        B1SC,   8, 
        B2SC,   8, 
        B0SS,   8, 
        B1SS,   8, 
        B2SS,   8, 
        Offset (0x28), 
        APIC,   8, 
        MPEN,   8, 
        Offset (0x2B), 
        PPCM,   8, 
        PCP0,   8, 
        PCP1,   8, 
        Offset (0x2F), 
        ODT1,   8, 
        ODT2,   8, 
        DTSW,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        Offset (0x3C), 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        Offset (0x67), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        Offset (0x6E), 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x74), 
        MEFE,   8, 
        Offset (0x78), 
        TPMP,   8, 
        TPME,   8, 
        Offset (0x82), 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        Offset (0xC6), 
        MARK,   16, 
        BRAD,   8, 
        BTEN,   8, 
        VVEN,   8, 
        BGTL,   8, 
        TMEE,   1, 
        Offset (0xCD), 
        SCU0,   1, 
        SCU1,   1, 
        SCU2,   1, 
        SCU3,   1, 
        Offset (0xCE), 
        XKSP,   1, 
        XKIN,   1, 
        XKID,   1, 
        XKOK,   1, 
        Offset (0xCF), 
        BGU1,   8, 
        BST1,   8, 
        BFC1,   16, 
        WKLN,   8, 
        WAKF,   8, 
        DSMD,   8, 
        BAYS,   8, 
        HAPE,   1, 
        Offset (0xD8), 
        HORZ,   16, 
        VERT,   16, 
        OES1,   8, 
        OES2,   8, 
        BDN1,   8
    }

    OperationRegion (RCRB, SystemMemory, 0xFED1C000, 0x4000)
    Field (RCRB, DWordAcc, Lock, Preserve)
    {
        Offset (0x1000), 
        Offset (0x3000), 
        Offset (0x3404), 
        HPAS,   2, 
            ,   5, 
        HPAE,   1, 
        Offset (0x3418), 
            ,   1, 
        PATD,   1, 
        SATD,   1, 
        SMBD,   1, 
        HDAD,   1, 
        A97D,   1, 
        Offset (0x341A), 
        RP1D,   1, 
        RP2D,   1, 
        RP3D,   1, 
        RP4D,   1, 
        RP5D,   1, 
        RP6D,   1
    }

    Mutex (MUTX, 0x00)
    Name (_S0, Package (0x03)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x03)  // _S3_: S3 System State
    {
        0x05, 
        0x05, 
        Zero
    })
    Name (_S4, Package (0x03)  // _S4_: S4 System State
    {
        0x06, 
        0x06, 
        Zero
    })
    Name (_S5, Package (0x03)  // _S5_: S5 System State
    {
        0x07, 
        0x07, 
        Zero
    })
    Scope (_PR)
    {
        Processor (CPU0, 0x00, 0x00001010, 0x06) {}
        Processor (CPU1, 0x01, 0x00001010, 0x06) {}
    }

    Name (DSEN, One)
    Name (ECON, Zero)
    Name (GPIC, Zero)
    Name (CTYP, Zero)
    Name (L01C, Zero)
    Name (VFN0, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80D = Zero
        P8XH (Zero, Arg0)
        SLPE = Zero
        SLPS = One
        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.LPCB.BCMD = 0x4C
            \_SB.PCI0.LPCB.SMIC = Zero
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.LPCB.PHSS (0x0E)
        }

        If ((Arg0 == 0x05)) {}
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        Notify (\_SB.PCI0.RP01.PXS1, One) // Device Check
        P8XH (Zero, 0xAB)
        If ((Arg0 == 0x03))
        {
            P8XH (Zero, 0x30)
            DTSM = \_SB.PCI0.LPCB.EC0.CLME
            TRAP (0x46)
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((CFGD & 0x01000000))
            {
                If (((CFGD & 0xF0) && ((OSYS == 0x07D1) && !(
                    PDC0 & 0x10))))
                {
                    TRAP (0x3D)
                }
            }
        }

        If ((Arg0 == 0x04))
        {
            P8XH (Zero, 0x40)
            \_SB.PCI0.LPCB.PHSS (0x0F)
            Local0 = WAKF /* \WAKF */
            WAKF = Zero
            Local0 &= 0x05
            If ((Local0 == One))
            {
                P8XH (Zero, 0x41)
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If ((Arg0 == 0x04))
        {
            If (DTSE)
            {
                DTSM = \_SB.PCI0.LPCB.EC0.CLME
                TRAP (0x47)
                If ((\_SB.PCI0.LPCB.ECOK () && (ECDY == Zero)))
                {
                    If ((DTS1 >= DTS2))
                    {
                        \_SB.PCI0.LPCB.EC0.SKTA = DTS1 /* \DTS1 */
                    }
                    Else
                    {
                        \_SB.PCI0.LPCB.EC0.SKTA = DTS2 /* \DTS2 */
                    }
                }
                Else
                {
                    \_SB.PCI0.LPCB.PHSS (0x10)
                }
            }
        }

        \_SB.PCI0.LPCB.EC0.HSWK (Arg0)
        P8XH (One, 0xCD)
        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Scope (_GPE)
    {
        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            Sleep (0x64)
            If (((RP1D == Zero) && \_SB.PCI0.RP01.HPCS))
            {
                If (\_SB.PCI0.RP01.PDC1)
                {
                    \_SB.PCI0.RP01.PDC1 = One
                    \_SB.PCI0.RP01.HPCS = One
                    Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP01.HPCS = One
                }
            }

            If (((RP2D == Zero) && \_SB.PCI0.RP02.HPCS))
            {
                If (\_SB.PCI0.RP02.PDC2)
                {
                    \_SB.PCI0.RP02.PDC2 = One
                    \_SB.PCI0.RP02.HPCS = One
                    Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP02.HPCS = One
                }
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.HPCS))
            {
                If (\_SB.PCI0.RP03.PDC3)
                {
                    \_SB.PCI0.RP03.PDC3 = One
                    \_SB.PCI0.RP03.HPCS = One
                    Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP03.HPCS = One
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            GPEC = Zero
            If ((\_SB.PCI0.LPCB.ECOK () && (ECDY == Zero)))
            {
                If ((DTSW == One))
                {
                    If ((DTS1 >= DTS2))
                    {
                        \_SB.PCI0.LPCB.EC0.SKTA = DTS1 /* \DTS1 */
                    }
                    Else
                    {
                        \_SB.PCI0.LPCB.EC0.SKTA = DTS2 /* \DTS2 */
                    }
                }
                Else
                {
                    If ((ODT1 >= ODT2))
                    {
                        \_SB.PCI0.LPCB.EC0.SKTA = ODT1 /* \ODT1 */
                    }
                    Else
                    {
                        \_SB.PCI0.LPCB.EC0.SKTA = ODT2 /* \ODT2 */
                    }
                }
            }
            Else
            {
                \_SB.PCI0.LPCB.PHSS (0x10)
            }
        }

        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If (HDAD)
            {
                Notify (\_SB.PCI0.MODM, 0x02) // Device Wake
            }
            Else
            {
                Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
            }
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.PCIB, 0x02) // Device Wake
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If (\_SB.PCI0.RP01.PSP1)
            {
                \_SB.PCI0.RP01.PSP1 = One
                \_SB.PCI0.RP01.PMCS = One
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If (\_SB.PCI0.RP02.PSP2)
            {
                \_SB.PCI0.RP02.PSP2 = One
                \_SB.PCI0.RP02.PMCS = One
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If (\_SB.PCI0.RP03.PSP3)
            {
                \_SB.PCI0.RP03.PSP3 = One
                \_SB.PCI0.RP03.PMCS = One
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.PCIB, 0x02) // Device Wake
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB7, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
        }

        Method (_L1D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            LPOL = ~LPOL /* \LPOL */
            Notify (\_SB.LID0, 0x80) // Status Change
        }
    }

    Method (BRTW, 1, Serialized)
    {
        Local1 = Arg0
        If ((ALSE == 0x02))
        {
            Local1 = ((ALAF * Arg0) / 0x64)
            If ((Local1 > 0x64))
            {
                Local1 = 0x64
            }
        }

        Local0 = ((0xFF * Local1) / 0x64)
        PRM0 = Local0
        If ((TRAP (0x12) == Zero))
        {
            P8XH (0x02, Local0)
            BRTL = Arg0
        }
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (HKDS, 1, Serialized)
    {
        If ((Zero == DSEN))
        {
            If ((TRAP (Arg0) == Zero))
            {
                If ((CADL != PADL))
                {
                    PADL = CADL /* \CADL */
                    If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                    {
                        Notify (\_SB.PCI0, Zero) // Bus Check
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.GFX0, Zero) // Bus Check
                    }

                    Sleep (0x02EE)
                }

                Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
            }
        }

        If ((One == DSEN))
        {
            If ((TRAP (Arg0++) == Zero))
            {
                Notify (\_SB.PCI0.GFX0, 0x81) // Information Change
            }
        }
    }

    Method (LSDS, 1, Serialized)
    {
        If (Arg0)
        {
            HKDS (0x0C)
        }
        Else
        {
            HKDS (0x0E)
        }

        If ((DSEN != One))
        {
            Sleep (0x32)
            While ((DSEN == 0x02))
            {
                Sleep (0x32)
            }
        }
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    Method (PNOT, 0, Serialized)
    {
        If (MPEN)
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (TRAP, 1, Serialized)
    {
        SMIF = Arg0
        TRP0 = Zero
        Return (SMIF) /* \SMIF */
    }

    Method (GETP, 1, Serialized)
    {
        If (((Arg0 & 0x09) == Zero))
        {
            Return (Ones)
        }

        If (((Arg0 & 0x09) == 0x08))
        {
            Return (0x0384)
        }

        Local0 = ((Arg0 & 0x0300) >> 0x08)
        Local1 = ((Arg0 & 0x3000) >> 0x0C)
        Return ((0x1E * (0x09 - (Local0 + Local1))))
    }

    Method (GDMA, 5, Serialized)
    {
        If (Arg0)
        {
            If ((Arg1 && Arg4))
            {
                Return (0x14)
            }

            If ((Arg2 && Arg4))
            {
                Return (((0x04 - Arg3) * 0x0F))
            }

            Return (((0x04 - Arg3) * 0x1E))
        }

        Return (Ones)
    }

    Method (GETT, 1, Serialized)
    {
        Return ((0x1E * (0x09 - (((Arg0 >> 0x02) & 0x03
            ) + (Arg0 & 0x03)))))
    }

    Method (GETF, 3, Serialized)
    {
        Name (TMPF, Zero)
        If (Arg0)
        {
            TMPF |= One
        }

        If ((Arg2 & 0x02))
        {
            TMPF |= 0x02
        }

        If (Arg1)
        {
            TMPF |= 0x04
        }

        If ((Arg2 & 0x20))
        {
            TMPF |= 0x08
        }

        If ((Arg2 & 0x4000))
        {
            TMPF |= 0x10
        }

        Return (TMPF) /* \GETF.TMPF */
    }

    Method (SETP, 3, Serialized)
    {
        If ((Arg0 > 0xF0))
        {
            Return (0x08)
        }
        Else
        {
            If ((Arg1 & 0x02))
            {
                If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                {
                    Return (0x2301)
                }

                If (((Arg0 <= 0xB4) && (Arg2 & One)))
                {
                    Return (0x2101)
                }
            }

            Return (0x1001)
        }
    }

    Method (SDMA, 1, Serialized)
    {
        If ((Arg0 <= 0x14))
        {
            Return (One)
        }

        If ((Arg0 <= 0x1E))
        {
            Return (0x02)
        }

        If ((Arg0 <= 0x2D))
        {
            Return (One)
        }

        If ((Arg0 <= 0x3C))
        {
            Return (0x02)
        }

        If ((Arg0 <= 0x5A))
        {
            Return (One)
        }

        Return (Zero)
    }

    Method (SETT, 3, Serialized)
    {
        If ((Arg1 & 0x02))
        {
            If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
            {
                Return (0x0B)
            }

            If (((Arg0 <= 0xB4) && (Arg2 & One)))
            {
                Return (0x09)
            }
        }

        Return (0x04)
    }

    Name (FWSO, "FWSO")
    Name (_PSC, Zero)  // _PSC: Power State Current
    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
    {
        Local0 = _PSC /* \_PSC */
        _PSC = Zero
    }

    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
    {
        _PSC = 0x03
    }

    Scope (_SB)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            MARK = 0x9999
            If (DTSE)
            {
                TRAP (0x47)
                ^PCI0.LPCB.PHSS (0x10)
            }

            OSYS = 0x07D0
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                    ECDY = Zero
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If ((MPEN && (OSYS == 0x07D1)))
                {
                    TRAP (0x3D)
                }
            }

            If ((OSYS >= 0x07D0))
            {
                PRM0 = One
                If ((OSYS >= 0x07D1))
                {
                    PRM0 = 0x03
                }
            }
            Else
            {
                PRM0 = Zero
            }
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Return (LPOL) /* \LPOL */
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (PCI0)
        {
            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            OperationRegion (HBUS, PCI_Config, 0x40, 0xC0)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x50), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x51), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x52), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x53), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x54), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x55), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x56), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x57), 
                    ,   7, 
                HENA,   1, 
                Offset (0x5C), 
                    ,   3, 
                TOUD,   5
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEBFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y00._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y00._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                If (TPMP)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, TPML)  // _LEN: Length
                    TPML = 0x5000
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1MN = (TOUD << 0x1B)
                M1LN = ((M1MX - M1MN) + One)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (GPIC)
                {
                    Return (Package (0x11)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            Zero, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            Zero, 
                            0x17
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            One, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            Zero, 
                            Zero, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            One, 
                            Zero, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            Zero, 
                            0x10
                        }
                    })
                }
                Else
                {
                    Return (Package (0x11)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0007FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            ^LPCB.LNKG, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            ^LPCB.LNKH, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            One, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            Zero, 
                            ^LPCB.LNKG, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001EFFFF, 
                            One, 
                            ^LPCB.LNKE, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            ^LPCB.LNKA, 
                            Zero
                        }
                    })
                }
            }

            Device (PDRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0xFE00,             // Range Minimum
                        0xFE00,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0xFE80,             // Range Minimum
                        0xFE80,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0xFF00,             // Range Minimum
                        0xFF00,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xE0000000,         // Address Base
                        0x10000000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED14000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED18000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED19000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED1C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED40000,         // Address Base
                        0x00005000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED45000,         // Address Base
                        0x0004B000,         // Address Length
                        )
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0xFE00,             // Range Minimum
                        0xFE00,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0xFE80,             // Range Minimum
                        0xFE80,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    IO (Decode16,
                        0xFF00,             // Range Minimum
                        0xFF00,             // Range Maximum
                        0x01,               // Alignment
                        0x80,               // Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xE0000000,         // Address Base
                        0x10000000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED14000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED18000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED19000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED1C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED45000,         // Address Base
                        0x0004B000,         // Address Length
                        )
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    If (!TPMP)
                    {
                        Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
                    }

                    Return (BUF1) /* \_SB_.PCI0.PDRC.BUF1 */
                }
            }

            Device (PEGP)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKD, 
                                Zero
                            }
                        })
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (SWIT, One)
                    Name (CRTA, One)
                    Name (LCDA, One)
                    Name (TVAA, One)
                    Name (DVIA, One)
                    Name (VLDF, One)
                    OperationRegion (VIDS, PCI_Config, Zero, 0xC8)
                    Field (VIDS, DWordAcc, NoLock, Preserve)
                    {
                        VDID,   32
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_PSC, Zero)  // _PSC: Power State Current
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        _PSC = Zero
                    }

                    Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                    {
                        _PSC = One
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        _PSC = 0x03
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        SWIT = (Arg0 & 0x03)
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        If ((VVEN == One))
                        {
                            Return (Package (0x04)
                            {
                                0x00010100, 
                                0x00010110, 
                                0x0200, 
                                0x0210
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                0x00010100, 
                                0x00010110, 
                                0x0200, 
                                0x0120
                            })
                        }
                    }

                    Device (CRT)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0100)
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            ^^^^LPCB.PHSS (0x0C)
                            Local0 = CADL /* \CADL */
                            Local1 = CSTE /* \CSTE */
                            Local0 &= 0x02
                            Local1 &= 0x02
                            If (Local0)
                            {
                                CRTA = One
                            }
                            Else
                            {
                                CRTA = Zero
                            }

                            If (CRTA)
                            {
                                If ((Local1 == 0x02))
                                {
                                    Return (0x1F)
                                }
                                Else
                                {
                                    Return (0x1D)
                                }
                            }
                            Else
                            {
                                If ((Local1 == 0x02))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x0D)
                                }
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (CRTA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                        }
                    }

                    Device (LCD)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0110)
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            ^^^^LPCB.PHSS (0x0C)
                            Local0 = CADL /* \CADL */
                            Local1 = CSTE /* \CSTE */
                            Local0 &= One
                            Local1 &= One
                            If (Local0)
                            {
                                LCDA = One
                            }
                            Else
                            {
                                LCDA = Zero
                            }

                            If (LCDA)
                            {
                                If ((Local1 == One))
                                {
                                    Return (0x1F)
                                }
                                Else
                                {
                                    Return (0x1D)
                                }
                            }
                            Else
                            {
                                If ((Local1 == One))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x0D)
                                }
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (LCDA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            P80H = 0xC0
                            Return (Package (0x0A)
                            {
                                0x46, 
                                0x28, 
                                Zero, 
                                0x0A, 
                                0x14, 
                                0x1E, 
                                0x28, 
                                0x32, 
                                0x3C, 
                                0x46
                            })
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            P80H = 0xC1
                            Divide (Arg0, 0x0A, Local0, Local1)
                            ^^^^LPCB.EC0.BRTS = Local1
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            P80H = 0xC2
                            Local0 = (^^^^LPCB.EC0.BRTS * 0x0A)
                            Return (Local0)
                        }
                    }

                    Device (TV)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0200)
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            ^^^^LPCB.PHSS (0x0C)
                            Local0 = CADL /* \CADL */
                            Local1 = CSTE /* \CSTE */
                            Local0 &= 0x04
                            Local1 &= 0x04
                            If (Local0)
                            {
                                TVAA = One
                            }
                            Else
                            {
                                TVAA = Zero
                            }

                            If (TVAA)
                            {
                                If ((Local1 == 0x04))
                                {
                                    Return (0x1F)
                                }
                                Else
                                {
                                    Return (0x1D)
                                }
                            }
                            Else
                            {
                                If ((Local1 == 0x04))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x0D)
                                }
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (TVAA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                        }
                    }

                    Device (DVI)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            If ((VVEN == One))
                            {
                                Return (0x0210)
                            }
                            Else
                            {
                                Return (0x0120)
                            }
                        }

                        Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                        {
                            ^^^^LPCB.PHSS (0x0C)
                            Local0 = CADL /* \CADL */
                            Local1 = CSTE /* \CSTE */
                            Local0 &= 0x08
                            Local1 &= 0x08
                            If (Local0)
                            {
                                DVIA = One
                            }
                            Else
                            {
                                DVIA = Zero
                            }

                            If (DVIA)
                            {
                                If ((Local1 == 0x08))
                                {
                                    Return (0x1F)
                                }
                                Else
                                {
                                    Return (0x1D)
                                }
                            }
                            Else
                            {
                                If ((Local1 == 0x08))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (0x0D)
                                }
                            }
                        }

                        Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                        {
                            If (DVIA)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                        }
                    }

                    Method (DSSW, 0, NotSerialized)
                    {
                        If ((SWIT == Zero))
                        {
                            ^^^LPCB.PHSS (0x0C)
                            Local0 = CADL /* \CADL */
                            Local1 = CSTE /* \CSTE */
                            If ((Local1 > One))
                            {
                                VLDF = (Local0 & Local1)
                                VLDF &= 0xFE
                            }

                            If (VLDF)
                            {
                                If ((Local0 == 0x09))
                                {
                                    If ((Local1 == 0x08))
                                    {
                                        STBL (0x03)
                                    }

                                    If ((Local1 == One))
                                    {
                                        STBL (One)
                                    }

                                    If ((Local1 == 0x09))
                                    {
                                        STBL (0x02)
                                    }
                                }

                                If ((Local0 == 0x0A))
                                {
                                    If ((Local1 == 0x08))
                                    {
                                        STBL (0x05)
                                    }

                                    If ((Local1 == 0x02))
                                    {
                                        STBL (One)
                                    }

                                    If ((Local1 == 0x0A))
                                    {
                                        STBL (0x04)
                                    }
                                }

                                If ((Local0 == 0x0B))
                                {
                                    If ((Local1 == 0x08))
                                    {
                                        STBL (0x03)
                                    }

                                    If ((Local1 == 0x09))
                                    {
                                        STBL (0x02)
                                    }

                                    If ((Local1 == One))
                                    {
                                        STBL (0x05)
                                    }

                                    If ((Local1 == 0x0A))
                                    {
                                        STBL (0x04)
                                    }

                                    If ((Local1 == 0x02))
                                    {
                                        STBL (One)
                                    }

                                    If ((Local1 == 0x0B))
                                    {
                                        STBL (One)
                                    }
                                }

                                If (((Local0 == 0x0C) || (Local0 == 0x0D)))
                                {
                                    If ((Local1 == 0x08))
                                    {
                                        STBL (0x09)
                                    }

                                    If ((Local1 == 0x0C))
                                    {
                                        STBL (0x08)
                                    }

                                    If ((Local1 == 0x04))
                                    {
                                        STBL (One)
                                    }
                                }

                                If (((Local0 == 0x0E) || (Local0 == 0x0F)))
                                {
                                    If ((Local1 == 0x08))
                                    {
                                        STBL (0x09)
                                    }

                                    If ((Local1 == 0x0C))
                                    {
                                        STBL (0x08)
                                    }

                                    If ((Local1 == 0x04))
                                    {
                                        STBL (0x05)
                                    }

                                    If ((Local1 == 0x0A))
                                    {
                                        STBL (0x04)
                                    }

                                    If ((Local1 == 0x02))
                                    {
                                        STBL (One)
                                    }
                                }
                            }
                            Else
                            {
                                VLDF = One
                                STBL (One)
                            }
                        }
                        Else
                        {
                            If ((SWIT == One))
                            {
                                ^^^LPCB.PHSS (One)
                            }
                        }
                    }

                    Method (STBL, 1, NotSerialized)
                    {
                        If ((Arg0 == One))
                        {
                            CRTA = Zero
                            LCDA = One
                            TVAA = Zero
                            DVIA = Zero
                        }

                        If ((Arg0 == 0x02))
                        {
                            CRTA = One
                            LCDA = Zero
                            TVAA = Zero
                            DVIA = Zero
                        }

                        If ((Arg0 == 0x03))
                        {
                            CRTA = One
                            LCDA = One
                            TVAA = Zero
                            DVIA = Zero
                        }

                        If ((Arg0 == 0x04))
                        {
                            CRTA = Zero
                            LCDA = Zero
                            TVAA = One
                            DVIA = Zero
                        }

                        If ((Arg0 == 0x05))
                        {
                            CRTA = Zero
                            LCDA = One
                            TVAA = One
                            DVIA = Zero
                        }

                        If ((Arg0 == 0x06))
                        {
                            CRTA = One
                            LCDA = Zero
                            TVAA = One
                            DVIA = Zero
                        }

                        If ((Arg0 == 0x07))
                        {
                            CRTA = One
                            LCDA = One
                            TVAA = One
                            DVIA = Zero
                        }

                        If ((Arg0 == 0x08))
                        {
                            CRTA = Zero
                            LCDA = Zero
                            TVAA = Zero
                            DVIA = One
                        }

                        If ((Arg0 == 0x09))
                        {
                            CRTA = Zero
                            LCDA = One
                            TVAA = Zero
                            DVIA = One
                        }

                        Notify (VGA, 0x80) // Status Change
                    }
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DSEN = (Arg0 & 0x03)
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Return (Package (0x03)
                    {
                        0x00010100, 
                        0x00010400, 
                        0x00010200
                    })
                }

                Device (CRT1)
                {
                    Name (_ADR, 0x0100)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        ^^^LPCB.PHSS (0x0C)
                        If ((CSTE & 0x0101))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x0101))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DTV1)
                {
                    Name (_ADR, 0x0200)  // _ADR: Address
                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        ^^^LPCB.PHSS (0x0C)
                        If ((CSTE & 0x0202))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x0202))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (LCD)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x0400)
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        ^^^LPCB.PHSS (0x0C)
                        If ((CSTE & 0x0808))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x0808))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        P80H = 0xC0
                        Return (Package (0x0A)
                        {
                            0x46, 
                            0x28, 
                            Zero, 
                            0x0A, 
                            0x14, 
                            0x1E, 
                            0x28, 
                            0x32, 
                            0x3C, 
                            0x46
                        })
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        P80H = 0xC1
                        Divide (Arg0, 0x0A, Local0, Local1)
                        ^^^LPCB.EC0.BRTS = Local1
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        P80H = 0xC2
                        Local0 = (^^^LPCB.EC0.BRTS * 0x0A)
                        Return (Local0)
                    }
                }

                Method (DSSW, 0, NotSerialized)
                {
                    ^^LPCB.PHSS (0x0C)
                    DSSM ()
                }

                Method (DSSM, 0, NotSerialized)
                {
                    If ((Zero == DSEN))
                    {
                        PADL = CADL /* \CADL */
                        If ((OSYS >= 0x07D1))
                        {
                            Notify (PCI0, Zero) // Bus Check
                        }
                        Else
                        {
                            Notify (GFX0, Zero) // Bus Check
                        }

                        Sleep (0x03E8)
                        Notify (GFX0, 0x80) // Status Change
                    }

                    If ((One == DSEN))
                    {
                        ^^LPCB.PHSS (One)
                        Notify (GFX0, 0x81) // Information Change
                    }
                }

                Method (STBL, 1, NotSerialized)
                {
                    If (((Arg0 & 0x07) == Zero))
                    {
                        NSTE = 0x0800
                    }
                    Else
                    {
                        If ((Arg0 == One))
                        {
                            NSTE = 0x0800
                        }

                        If ((Arg0 == 0x02))
                        {
                            NSTE = One
                        }

                        If ((Arg0 == 0x03))
                        {
                            NSTE = 0x0801
                        }

                        If ((Arg0 == 0x04))
                        {
                            NSTE = 0x02
                        }

                        If ((Arg0 == 0x05))
                        {
                            NSTE = 0x0802
                        }

                        If ((Arg0 == 0x06))
                        {
                            NSTE = 0x03
                        }

                        If ((Arg0 == 0x07))
                        {
                            NSTE = 0x0803
                        }
                    }

                    DSSM ()
                }
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x05, 
                    0x03
                })
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (P1CS, PCI_Config, 0x40, 0x0100)
                Field (P1CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP1,   1, 
                        ,   2, 
                    PDC1,   1, 
                        ,   2, 
                    PDS1,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP1,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (One)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKD, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (P2CS, PCI_Config, 0x40, 0x0100)
                Field (P2CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP2,   1, 
                        ,   2, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP2,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (P2FG, PCI_Config, Zero, 0x08)
                    Field (P2FG, DWordAcc, NoLock, Preserve)
                    {
                        P2ID,   32
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((P2ID == Ones))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKA, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (P3CS, PCI_Config, 0x40, 0x0100)
                Field (P3CS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x1A), 
                    ABP3,   1, 
                        ,   2, 
                    PDC3,   1, 
                        ,   2, 
                    PDS3,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSP3,   1, 
                    Offset (0x9C), 
                        ,   30, 
                    HPCS,   1, 
                    PMCS,   1
                }

                Device (PXS3)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (P1FG, PCI_Config, Zero, 0x08)
                    Field (P1FG, DWordAcc, NoLock, Preserve)
                    {
                        P1ID,   32
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((P1ID == Ones))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (WKLN)
                        {
                            Return (Package (0x02)
                            {
                                0x09, 
                                0x05
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                0x09, 
                                Zero
                            })
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKB, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x03, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = Zero
                        ^^LPCB.EC0.UWAK = Zero
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (U2CS, PCI_Config, 0xC4, 0x04)
                Field (U2CS, DWordAcc, NoLock, Preserve)
                {
                    U2EN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x04, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U2EN = 0x03
                    }
                    Else
                    {
                        U2EN = Zero
                        ^^LPCB.EC0.UWAK = Zero
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (U2CS, PCI_Config, 0xC4, 0x04)
                Field (U2CS, DWordAcc, NoLock, Preserve)
                {
                    U3EN,   2
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0C, 
                    0x03
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U3EN = 0x03
                    }
                    Else
                    {
                        U3EN = Zero
                        ^^LPCB.EC0.UWAK = Zero
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB4)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (U4CS, PCI_Config, 0xC4, 0x04)
                Field (U4CS, DWordAcc, NoLock, Preserve)
                {
                    U4EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U4EN = 0x03
                    }
                    Else
                    {
                        U4EN = Zero
                        ^^LPCB.EC0.UWAK = Zero
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (USB7)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
            }

            Device (PCIB)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Device (LANC)
                {
                    Name (_ADR, 0x00080000)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        If (WKLN)
                        {
                            Return (Package (0x02)
                            {
                                0x0B, 
                                0x05
                            })
                        }
                        Else
                        {
                            Return (Package (0x02)
                            {
                                0x0B, 
                                Zero
                            })
                        }
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x05)
                        {
                            Package (0x04)
                            {
                                0x0004FFFF, 
                                Zero, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                One, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x02, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x03, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0x0008FFFF, 
                                Zero, 
                                Zero, 
                                0x14
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x05)
                        {
                            Package (0x04)
                            {
                                0x0004FFFF, 
                                Zero, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                One, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x02, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x0004FFFF, 
                                0x03, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x0008FFFF, 
                                Zero, 
                                ^^LPCB.LNKE, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (AUD0)
            {
                Name (_ADR, 0x001E0002)  // _ADR: Address
            }

            Device (MODM)
            {
                Name (_ADR, 0x001E0003)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x05, 
                    0x03
                })
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x20), 
                    PARC,   8, 
                    PBRC,   8, 
                    PCRC,   8, 
                    PDRC,   8, 
                    Offset (0x28), 
                    PERC,   8, 
                    PFRC,   8, 
                    PGRC,   8, 
                    PHRC,   8, 
                    Offset (0x40), 
                    CMAR,   3, 
                        ,   1, 
                    CMBR,   3, 
                    Offset (0x41), 
                    LPTR,   2, 
                    Offset (0x42), 
                    CMAD,   1, 
                    CMBD,   1, 
                    LPTD,   1, 
                    FDDD,   1, 
                    Offset (0x48), 
                    IOR2,   16, 
                        ,   2, 
                    LGRM,   6
                }

                Device (ACAD)
                {
                    Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                    Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                    {
                        _SB
                    })
                    Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                    {
                        ACPW = One
                        Return (ACPW) /* \ACPW */
                    }
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PARC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLA, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLA, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PARC & 0x0F))
                        Return (RTLA) /* \_SB_.PCI0.LPCB.LNKA._CRS.RTLA */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PARC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PARC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PBRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLB, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLB, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PBRC & 0x0F))
                        Return (RTLB) /* \_SB_.PCI0.LPCB.LNKB._CRS.RTLB */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PBRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PBRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PCRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLC, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLC, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PCRC & 0x0F))
                        Return (RTLC) /* \_SB_.PCI0.LPCB.LNKC._CRS.RTLC */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PCRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PCRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PDRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLD, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLD, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PDRC & 0x0F))
                        Return (RTLD) /* \_SB_.PCI0.LPCB.LNKD._CRS.RTLD */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PDRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PDRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PERC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLE, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLE, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PERC & 0x0F))
                        Return (RTLE) /* \_SB_.PCI0.LPCB.LNKE._CRS.RTLE */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PERC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PERC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PFRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLF, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLF, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PFRC & 0x0F))
                        Return (RTLF) /* \_SB_.PCI0.LPCB.LNKF._CRS.RTLF */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PFRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PFRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PGRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLG, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLG, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PGRC & 0x0F))
                        Return (RTLG) /* \_SB_.PCI0.LPCB.LNKG._CRS.RTLG */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PGRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PGRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PHRC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLH, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLH, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PHRC & 0x0F))
                        Return (RTLH) /* \_SB_.PCI0.LPCB.LNKH._CRS.RTLH */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PHRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PHRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Method (ECOK, 0, NotSerialized)
                {
                    If ((^EC0.Z009 == One))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_GPE, 0x19)  // _GPE: General Purpose Events
                    Name (Z009, Zero)
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            Z009 = Arg1
                        }
                    }

                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x60), 
                        SMPR,   8, 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMD0,   256, 
                        BCNT,   8, 
                        SMAA,   24, 
                        Offset (0x90), 
                        CHGM,   16, 
                        CHGS,   16, 
                        ENID,   8, 
                        ENIB,   8, 
                        ENDD,   8, 
                        CHGV,   8, 
                        CHGA,   16, 
                        BAL0,   1, 
                        BAL1,   1, 
                        BAL2,   1, 
                        BAL3,   1, 
                        BBC0,   1, 
                        BBC1,   1, 
                        BBC2,   1, 
                        BBC3,   1, 
                        Offset (0x9C), 
                        PHDD,   1, 
                        IFDD,   1, 
                        IODD,   1, 
                        SHDD,   1, 
                        S120,   1, 
                        EFDD,   1, 
                        CRTD,   1, 
                        SPWR,   1, 
                        SBTN,   1, 
                        VIDO,   1, 
                        VOLD,   1, 
                        VOLU,   1, 
                        MUTE,   1, 
                        HKMD,   1, 
                        HKEV,   1, 
                        HKHS,   1, 
                        S4ST,   1, 
                        SKEY,   1, 
                        BKEY,   1, 
                        TOUP,   1, 
                        FNBN,   1, 
                        LIDF,   1, 
                        DIGM,   1, 
                        UWAK,   1, 
                        FNSF,   8, 
                        DKSP,   1, 
                        DKIN,   1, 
                        DKID,   1, 
                        DKOK,   1, 
                        Offset (0xA1), 
                        DKPW,   1, 
                        Offset (0xA2), 
                        BTNS,   8, 
                        S1LD,   1, 
                        S3LD,   1, 
                        VGAQ,   1, 
                        PCMQ,   1, 
                        PCMR,   1, 
                        ADPT,   1, 
                        SLLS,   1, 
                        SYS7,   1, 
                        PWAK,   1, 
                        MWAK,   1, 
                        LWAK,   1, 
                        Offset (0xA5), 
                        Offset (0xAA), 
                        TCNL,   8, 
                        TMPI,   8, 
                        TMSD,   8, 
                        FASN,   4, 
                        FASU,   4, 
                        PCVL,   4, 
                            ,   2, 
                        SWTO,   1, 
                        HWTO,   1, 
                        MODE,   1, 
                        FANS,   2, 
                        INIT,   1, 
                        FAN1,   1, 
                        FAN2,   1, 
                        FANT,   1, 
                        SKNM,   1, 
                        CTMP,   8, 
                        LIDE,   1, 
                        PMEE,   1, 
                        PWBE,   1, 
                        RNGE,   1, 
                        BTWE,   1, 
                        DCKE,   1, 
                        Offset (0xB2), 
                        SKTA,   8, 
                        SKTB,   8, 
                        SKTC,   8, 
                        Offset (0xB7), 
                        HAPL,   2, 
                        HAPR,   1, 
                        Offset (0xB8), 
                        BTDT,   1, 
                        BTPW,   1, 
                        BTDS,   1, 
                        BTPS,   1, 
                        BTSW,   1, 
                        BTWK,   1, 
                        BTLD,   1, 
                        Offset (0xB9), 
                        BRTS,   8, 
                        CNTS,   8, 
                        WLAT,   1, 
                        BTAT,   1, 
                        WLEX,   1, 
                        BTEX,   1, 
                        KLSW,   1, 
                        WLOK,   1, 
                        Offset (0xBC), 
                        PTID,   8, 
                        CPUT,   8, 
                        CLME,   1, 
                        Offset (0xBF), 
                        GHID,   8, 
                            ,   4, 
                        BMF0,   3, 
                        BTY0,   1, 
                        BST0,   8, 
                        BRC0,   16, 
                        BSN0,   16, 
                        BPV0,   16, 
                        BDV0,   16, 
                        BDC0,   16, 
                        BFC0,   16, 
                        GAU0,   8, 
                        CYC0,   8, 
                        BPC0,   16, 
                        BAC0,   16, 
                        BAT0,   8, 
                        BTW0,   16, 
                        BDN0,   8, 
                        Offset (0xE0), 
                            ,   4, 
                        BMF1,   3, 
                        BTY1,   1, 
                        BST1,   8, 
                        BRC1,   16, 
                        BSN1,   16, 
                        BPV1,   16, 
                        BDV1,   16, 
                        BDC1,   16, 
                        BFC1,   16, 
                        GAU1,   8, 
                        CYC1,   8, 
                        BPC1,   16, 
                        BAC1,   16, 
                        BAT1,   8, 
                        BTW1,   16, 
                        Offset (0xFC), 
                        TOHK,   16
                    }

                    Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_19====="
                        Notify (BT, 0x80) // Status Change
                    }

                    Method (_Q1A, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_1A====="
                        Notify (BT, 0x90) // Device-Specific
                    }

                    Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_1C====="
                        If (VIDO)
                        {
                            If (IGDS)
                            {
                                ^^^GFX0.DSSW ()
                            }
                            Else
                            {
                                ^^^PEGP.VGA.DSSW ()
                            }

                            VIDO = Zero
                        }
                    }

                    Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_1D====="
                        PCLK ()
                    }

                    Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_1E====="
                        PCLK ()
                    }

                    Method (_Q1F, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_1F====="
                        HTEV (0x80)
                    }

                    Method (_Q22, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_22====="
                        Sleep (0x03E8)
                        Notify (^^BAT1, 0x80) // Status Change
                    }

                    Method (_Q23, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_23====="
                        Sleep (0x03E8)
                        Notify (^^BAT1, 0x80) // Status Change
                    }

                    Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_25====="
                        Sleep (0x03E8)
                        Notify (^^BAT1, 0x81) // Information Change
                        Sleep (0x03E8)
                        Notify (^^BAT1, 0x80) // Status Change
                    }

                    Method (_Q34, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_34====="
                        If (BKEY)
                        {
                            PHSS (0x71)
                            BKEY = Zero
                        }
                    }

                    Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_37====="
                        PHSS (0x0D)
                        Notify (ACAD, 0x80) // Status Change
                        Sleep (0x03E8)
                        Notify (^^BAT1, 0x80) // Status Change
                    }

                    Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Debug = "=====QUERY_38====="
                        PHSS (0x0D)
                        Notify (ACAD, 0x80) // Status Change
                        Sleep (0x03E8)
                        Notify (^^BAT1, 0x80) // Status Change
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        P80H = 0x87
                        If (IGDS)
                        {
                            Notify (^^^GFX0.LCD, 0x87) // Device-Specific
                        }
                        Else
                        {
                            Notify (^^^PEGP.VGA.LCD, 0x87) // Device-Specific
                        }

                        Notify (VALZ, 0x80) // Status Change
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        P80H = 0x86
                        If (IGDS)
                        {
                            Notify (^^^GFX0.LCD, 0x86) // Device-Specific
                        }
                        Else
                        {
                            Notify (^^^PEGP.VGA.LCD, 0x86) // Device-Specific
                        }

                        Notify (VALZ, 0x80) // Status Change
                    }

                    Method (_Q43, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Notify (VALZ, 0x80) // Status Change
                    }

                    Device (BT)
                    {
                        Name (_HID, "TOS6205")  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (BTEN)
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x08, 
                            0x04
                        })
                        Method (DUSB, 0, NotSerialized)
                        {
                            BTDT = Zero
                        }

                        Method (AUSB, 0, NotSerialized)
                        {
                            BTDT = One
                        }

                        Method (BTPO, 0, NotSerialized)
                        {
                            BTPW = One
                        }

                        Method (BTPF, 0, NotSerialized)
                        {
                            BTPW = Zero
                        }

                        Method (BTST, 0, NotSerialized)
                        {
                            Local3 = BTSW /* \_SB_.PCI0.LPCB.EC0_.BTSW */
                            If (Local3)
                            {
                                Local0 = (BTDT << 0x06)
                                Local1 = (BTPW << 0x07)
                            }
                            Else
                            {
                                BTDT = Zero
                                BTPW = Zero
                                Local0 = Zero
                                Local1 = Zero
                            }

                            Local2 = (Local0 | Local1)
                            Local2 |= Local3
                            Return (Local2)
                        }
                    }

                    OperationRegion (CCLK, SystemIO, 0x1010, 0x04)
                    Field (CCLK, DWordAcc, NoLock, Preserve)
                    {
                            ,   1, 
                        DUTY,   3, 
                        THEN,   1, 
                        Offset (0x01), 
                        FTT,    1, 
                            ,   8, 
                        TSTS,   1
                    }

                    OperationRegion (ECRM, EmbeddedControl, Zero, 0xFF)
                    Field (ECRM, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x94), 
                        ERIB,   16, 
                        ERBD,   8, 
                        Offset (0xAC), 
                        SDTM,   8, 
                        FSSN,   4, 
                        FANU,   4, 
                        PTVL,   3, 
                            ,   4, 
                        TTHR,   1, 
                        Offset (0xBC), 
                        PJID,   8, 
                        Offset (0xBE), 
                        Offset (0xF9), 
                        RFRD,   16
                    }

                    Mutex (FAMX, 0x00)
                    Method (FANG, 1, NotSerialized)
                    {
                        Acquire (FAMX, 0xFFFF)
                        ERIB = Arg0
                        Local0 = ERBD /* \_SB_.PCI0.LPCB.EC0_.ERBD */
                        Release (FAMX)
                        Return (Local0)
                    }

                    Method (FANW, 2, NotSerialized)
                    {
                        Acquire (FAMX, 0xFFFF)
                        ERIB = Arg0
                        ERBD = Arg1
                        Release (FAMX)
                        Return (Arg1)
                    }

                    Method (TUVR, 1, NotSerialized)
                    {
                        Return (0x03)
                    }

                    Method (THRO, 1, NotSerialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (THEN) /* \_SB_.PCI0.LPCB.EC0_.THEN */
                        }
                        Else
                        {
                            If ((Arg0 == One))
                            {
                                Return (DUTY) /* \_SB_.PCI0.LPCB.EC0_.DUTY */
                            }
                            Else
                            {
                                If ((Arg0 == 0x02))
                                {
                                    Return (TTHR) /* \_SB_.PCI0.LPCB.EC0_.TTHR */
                                }
                                Else
                                {
                                    Return (0xFF)
                                }
                            }
                        }
                    }

                    Method (CLCK, 1, NotSerialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            THEN = Zero
                            FTT = Zero
                        }
                        Else
                        {
                            DUTY = Arg0
                            THEN = One
                        }

                        Return (THEN) /* \_SB_.PCI0.LPCB.EC0_.THEN */
                    }

                    Method (PCLK, 0, NotSerialized)
                    {
                        Local0 = PTVL /* \_SB_.PCI0.LPCB.EC0_.PTVL */
                        If ((Local0 == Zero))
                        {
                            THEN = Zero
                            FTT = Zero
                        }
                        Else
                        {
                            Local0--
                            Local1 = ~Local0
                            Local1 &= 0x07
                            DUTY = Local1
                            THEN = One
                        }
                    }

                    Method (NTFY, 0, NotSerialized)
                    {
                        ^^^^VALZ.TECF = One
                        Notify (VALZ, 0x80) // Status Change
                        Return (0xAA)
                    }

                    Scope (\_SB)
                    {
                        Device (VALZ)
                        {
                            Name (_HID, EisaId ("TOS1900"))  // _HID: Hardware ID
                            Name (_DDN, "VALZeneral")  // _DDN: DOS Device Name
                            Name (TECF, Zero)
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0B)
                            }

                            Method (ENAB, 0, NotSerialized)
                            {
                            }

                            Method (INFO, 0, NotSerialized)
                            {
                                If (TECF)
                                {
                                    TECF = Zero
                                    Local0 = ^^PCI0.LPCB.EC0.TOHK /* \_SB_.PCI0.LPCB.EC0_.TOHK */
                                    ^^PCI0.LPCB.EC0.TOHK = Zero
                                }
                                Else
                                {
                                    Local0 = Zero
                                }

                                Return (Local0)
                            }

                            Method (SPFC, 6, NotSerialized)
                            {
                                Name (TSFR, Package (0x06) {})
                                Index (TSFR, Zero) = Zero
                                Index (TSFR, One) = Zero
                                Index (TSFR, 0x02) = Zero
                                Index (TSFR, 0x03) = Zero
                                Index (TSFR, 0x04) = Zero
                                Index (TSFR, 0x05) = Zero
                                CreateDWordField (Arg0, Zero, TOI0)
                                CreateDWordField (Arg1, Zero, TOI1)
                                CreateDWordField (Arg2, Zero, TOI2)
                                CreateDWordField (Arg3, Zero, TOI3)
                                CreateDWordField (Arg4, Zero, TOI4)
                                CreateDWordField (Arg5, Zero, TOI5)
                                If ((((TOI0 == 0xFE00) && (TOI1 == 0x56)) && (TOI3 == One)))
                                {
                                    Local2 = ((Local0 = (^^PCI0.LPCB.EC0.WLAT << 0x09)) | ^^PCI0.LPCB.EC0.KLSW) /* \_SB_.PCI0.LPCB.EC0_.KLSW */
                                    Index (TSFR, 0x02) = Local2
                                }
                                Else
                                {
                                    If ((((TOI0 == 0xFF00) && (TOI1 == 0x56)) && (TOI3 == 0x0200)))
                                    {
                                        If ((TOI2 == Zero))
                                        {
                                            ^^PCI0.LPCB.EC0.WLAT = Zero
                                        }
                                        Else
                                        {
                                            ^^PCI0.LPCB.EC0.WLAT = One
                                        }
                                    }
                                    Else
                                    {
                                        If (((TOI0 == 0xF300) && (TOI1 == 0x050E)))
                                        {
                                            If (^^PCI0.LPCB.EC0.TOUP)
                                            {
                                                Index (TSFR, 0x02) = Zero
                                            }
                                            Else
                                            {
                                                Index (TSFR, 0x02) = One
                                            }
                                        }
                                        Else
                                        {
                                            If (((TOI0 == 0xF400) && (TOI1 == 0x050E)))
                                            {
                                                If ((TOI2 == Zero))
                                                {
                                                    ^^PCI0.LPCB.EC0.TOUP = One
                                                }
                                                Else
                                                {
                                                    ^^PCI0.LPCB.EC0.TOUP = Zero
                                                }
                                            }
                                            Else
                                            {
                                                If ((((TOI0 == 0xFF00) && (TOI1 == 0x5A)) && (TOI3 == One)))
                                                {
                                                    ^^PCI0.LPCB.EC0.FNSF = TOI2 /* \_SB_.VALZ.SPFC.TOI2 */
                                                }
                                                Else
                                                {
                                                    If (((TOI0 == 0xFE00) && (TOI1 == 0x7F)))
                                                    {
                                                        Index (TSFR, 0x02) = ^^PCI0.LPCB.EC0.CLME /* \_SB_.PCI0.LPCB.EC0_.CLME */
                                                        Index (TSFR, 0x03) = One
                                                    }
                                                    Else
                                                    {
                                                        If (((TOI0 == 0xFF00) && (TOI1 == 0x7F)))
                                                        {
                                                            ^^PCI0.LPCB.EC0.CLME = TOI2 /* \_SB_.VALZ.SPFC.TOI2 */
                                                            If (DTSE)
                                                            {
                                                                DTSM = TOI2 /* \_SB_.VALZ.SPFC.TOI2 */
                                                                TRAP (0x46)
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If (((TOI0 == 0xFE00) && (TOI1 == 0x62)))
                                                            {
                                                                If ((OES1 == 0x55))
                                                                {
                                                                    If ((OES2 == 0x30))
                                                                    {
                                                                        Index (TSFR, 0x03) = Zero
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((OES2 == 0x31))
                                                                        {
                                                                            Index (TSFR, 0x03) = Zero
                                                                        }
                                                                        Else
                                                                        {
                                                                            Index (TSFR, 0x03) = 0x21
                                                                        }
                                                                    }
                                                                }
                                                                Else
                                                                {
                                                                    Index (TSFR, 0x03) = 0x21
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                If (((TOI0 == 0xFE00) && (TOI1 == 0x11)))
                                                                {
                                                                    If ((HORZ == 0x0280))
                                                                    {
                                                                        If ((VERT == 0x01E0))
                                                                        {
                                                                            Index (TSFR, 0x02) = Zero
                                                                        }
                                                                        Else
                                                                        {
                                                                            Index (TSFR, 0x02) = 0xFFFF
                                                                        }
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((HORZ == 0x0320))
                                                                        {
                                                                            If ((VERT == 0x0258))
                                                                            {
                                                                                Index (TSFR, 0x02) = 0x0100
                                                                            }
                                                                            Else
                                                                            {
                                                                                If ((VERT == 0x01E0))
                                                                                {
                                                                                    Index (TSFR, 0x02) = 0x0400
                                                                                }
                                                                                Else
                                                                                {
                                                                                    Index (TSFR, 0x02) = 0xFFFF
                                                                                }
                                                                            }
                                                                        }
                                                                        Else
                                                                        {
                                                                            If ((HORZ == 0x0400))
                                                                            {
                                                                                If ((VERT == 0x0300))
                                                                                {
                                                                                    Index (TSFR, 0x02) = 0x0200
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If ((VERT == 0x0258))
                                                                                    {
                                                                                        Index (TSFR, 0x02) = 0x0300
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        Index (TSFR, 0x02) = 0xFFFF
                                                                                    }
                                                                                }
                                                                            }
                                                                            Else
                                                                            {
                                                                                If ((HORZ == 0x0500))
                                                                                {
                                                                                    If ((VERT == 0x0400))
                                                                                    {
                                                                                        Index (TSFR, 0x02) = 0x0500
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If ((VERT == 0x0258))
                                                                                        {
                                                                                            Index (TSFR, 0x02) = 0x0800
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If ((VERT == 0x0320))
                                                                                            {
                                                                                                Index (TSFR, 0x02) = 0x0900
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If ((VERT == 0x0300))
                                                                                                {
                                                                                                    Index (TSFR, 0x02) = 0x0D00
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    Index (TSFR, 0x02) = 0xFFFF
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If ((HORZ == 0x0578))
                                                                                    {
                                                                                        If ((VERT == 0x041A))
                                                                                        {
                                                                                            Index (TSFR, 0x02) = 0x0600
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            Index (TSFR, 0x02) = 0xFFFF
                                                                                        }
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If ((HORZ == 0x0640))
                                                                                        {
                                                                                            If ((VERT == 0x04B0))
                                                                                            {
                                                                                                Index (TSFR, 0x02) = 0x0700
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                Index (TSFR, 0x02) = 0xFFFF
                                                                                            }
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If ((HORZ == 0x05A0))
                                                                                            {
                                                                                                If ((VERT == 0x0384))
                                                                                                {
                                                                                                    Index (TSFR, 0x02) = 0x0A00
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    Index (TSFR, 0x02) = 0xFFFF
                                                                                                }
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                If ((HORZ == 0x0690))
                                                                                                {
                                                                                                    If ((VERT == 0x041A))
                                                                                                    {
                                                                                                        Index (TSFR, 0x02) = 0x0B00
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        Index (TSFR, 0x02) = 0xFFFF
                                                                                                    }
                                                                                                }
                                                                                                Else
                                                                                                {
                                                                                                    If ((HORZ == 0x0780))
                                                                                                    {
                                                                                                        If ((VERT == 0x04B0))
                                                                                                        {
                                                                                                            Index (TSFR, 0x02) = 0x0C00
                                                                                                        }
                                                                                                        Else
                                                                                                        {
                                                                                                            Index (TSFR, 0x02) = 0xFFFF
                                                                                                        }
                                                                                                    }
                                                                                                    Else
                                                                                                    {
                                                                                                        Index (TSFR, 0x02) = 0xFFFF
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                Else
                                                                {
                                                                    If ((((TOI0 == 0xFF00) && (TOI1 == 0xC000)) && (TOI2 == Zero))) {}
                                                                    Else
                                                                    {
                                                                        If ((((TOI0 == 0xFE00) && (TOI1 == 0xC000)) && (TOI2 == 0x03))) {}
                                                                        Else
                                                                        {
                                                                            If (((TOI0 == 0xFF00) && (TOI1 == 0x1E)))
                                                                            {
                                                                                Local0 = (TOI2 & 0x02)
                                                                                If ((Local0 == 0x02))
                                                                                {
                                                                                    ^^PCI0.LPCB.EC0.HKEV = Zero
                                                                                }
                                                                                Else
                                                                                {
                                                                                    ^^PCI0.LPCB.EC0.HKEV = One
                                                                                }

                                                                                Local1 = (TOI2 & 0x08)
                                                                                If ((Local1 == 0x08))
                                                                                {
                                                                                    ^^PCI0.LPCB.EC0.HKHS = Zero
                                                                                }
                                                                                Else
                                                                                {
                                                                                    ^^PCI0.LPCB.EC0.HKHS = One
                                                                                }
                                                                            }
                                                                            Else
                                                                            {
                                                                                If (((TOI0 == 0xFE00) && (TOI1 == 0x1E)))
                                                                                {
                                                                                    If (((^^PCI0.LPCB.EC0.HKEV == One) && (^^PCI0.LPCB.EC0.HKHS == One)))
                                                                                    {
                                                                                        Index (TSFR, 0x02) = One
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If (((^^PCI0.LPCB.EC0.HKEV == One) && (^^PCI0.LPCB.EC0.HKHS == Zero)))
                                                                                        {
                                                                                            Index (TSFR, 0x02) = 0x09
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If (((^^PCI0.LPCB.EC0.HKEV == Zero) && (^^PCI0.LPCB.EC0.HKHS == One)))
                                                                                            {
                                                                                                Index (TSFR, 0x02) = 0x03
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                Index (TSFR, 0x02) = 0x0B
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                                Else
                                                                                {
                                                                                    Index (TSFR, Zero) = 0x8000
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                Return (TSFR) /* \_SB_.VALZ.SPFC.TSFR */
                            }
                        }
                    }

                    Method (HSWK, 1, NotSerialized)
                    {
                        If ((Arg0 >= 0x03))
                        {
                            HTEV (0x02)
                        }
                    }

                    Method (HTEV, 1, NotSerialized)
                    {
                        Local0 = GHID /* \_SB_.PCI0.LPCB.EC0_.GHID */
                        If ((Local0 == 0x13))
                        {
                            GHID = Zero
                            Notify (HKFA, Arg0)
                        }

                        If ((Local0 == 0x14))
                        {
                            GHID = Zero
                            Notify (HKFB, Arg0)
                        }

                        If ((Local0 == 0x09))
                        {
                            GHID = Zero
                            Notify (HKFC, Arg0)
                        }
                    }

                    Device (HKFA)
                    {
                        Name (_HID, "PNP0C32")  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((OSYS >= 0x07D6))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (GHID, 0, NotSerialized)
                        {
                            HTEV (0x02)
                            Return (Buffer (One)
                            {
                                 0x01                                             /* . */
                            })
                        }
                    }

                    Device (HKFB)
                    {
                        Name (_HID, "PNP0C32")  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((OSYS >= 0x07D6))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (GHID, 0, NotSerialized)
                        {
                            HTEV (0x02)
                            Return (Buffer (One)
                            {
                                 0x02                                             /* . */
                            })
                        }
                    }

                    Device (HKFC)
                    {
                        Name (_HID, "PNP0C32")  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((OSYS >= 0x07D6))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (GHID, 0, NotSerialized)
                        {
                            HTEV (0x02)
                            Return (Buffer (One)
                            {
                                 0x22                                             /* " */
                            })
                        }
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y0F)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        Else
                        {
                            If (HPAE)
                            {
                                Return (0x0B)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y0F._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == One))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x1000,             // Range Minimum
                            0x1000,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x1180,             // Range Minimum
                            0x1180,             // Range Maximum
                            0x01,               // Alignment
                            0x40,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                OperationRegion (SMI0, SystemIO, 0x0000FE00, 0x00000002)
                Field (SMI0, AnyAcc, NoLock, Preserve)
                {
                    SMIC,   8
                }

                OperationRegion (SMI1, SystemMemory, 0x9F691EBC, 0x00000090)
                Field (SMI1, AnyAcc, NoLock, Preserve)
                {
                    BCMD,   8, 
                    DID,    32, 
                    INFO,   1024
                }

                Field (SMI1, AnyAcc, NoLock, Preserve)
                {
                    AccessAs (ByteAcc, 0x00), 
                    Offset (0x05), 
                    INF,    8, 
                    INF1,   32
                }

                Mutex (PSMX, 0x00)
                Method (PHSS, 1, NotSerialized)
                {
                    Acquire (PSMX, 0xFFFF)
                    BCMD = 0x80
                    DID = Arg0
                    SMIC = Zero
                    Release (PSMX)
                }

                Device (SIO)
                {
                    Name (_HID, EisaId ("PNP0A05") /* Generic Container Device */)  // _HID: Hardware ID
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                    }

                    OperationRegion (SIIO, SystemIO, 0x2E, 0x02)
                    Field (SIIO, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    Mutex (S227, 0x00)
                    Method (ENTR, 0, NotSerialized)
                    {
                        INDX = 0x55
                    }

                    Method (EXIT, 0, NotSerialized)
                    {
                        INDX = 0xAA
                    }

                    Method (RDRG, 1, NotSerialized)
                    {
                        ENTR ()
                        INDX = Arg0
                        Local0 = DATA /* \_SB_.PCI0.LPCB.SIO_.DATA */
                        EXIT ()
                        Return (Local0)
                    }

                    Method (WRRG, 2, NotSerialized)
                    {
                        ENTR ()
                        INDX = Arg0
                        DATA = Arg1
                        EXIT ()
                    }

                    Method (READ, 3, NotSerialized)
                    {
                        Acquire (S227, 0xFFFF)
                        If ((Arg0 == Zero))
                        {
                            Local1 = RDRG (Arg1)
                        }

                        Local1 &= Arg2
                        Release (S227)
                        Return (Local1)
                    }

                    Method (WRIT, 3, NotSerialized)
                    {
                        Acquire (S227, 0xFFFF)
                        If ((Arg0 == Zero))
                        {
                            WRRG (Arg1, Arg2)
                        }

                        Release (S227)
                    }

                    Device (COMA)
                    {
                        Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (RSRC, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x00,               // Alignment
                                0x00,               // Length
                                )
                            IRQNoFlags ()
                                {}
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((CMAP == Zero))
                            {
                                CMAD = Zero
                                Return (Zero)
                            }

                            Local0 = READ (Zero, 0x24, 0xFF)
                            If ((Local0 == Zero))
                            {
                                CMAD = Zero
                                Return (0x0D)
                            }
                            Else
                            {
                                Local0 = READ (Zero, 0x02, 0x08)
                                If ((Local0 == Zero))
                                {
                                    CMAD = Zero
                                    Return (0x0D)
                                }
                                Else
                                {
                                    Return (0x0F)
                                }
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IOLO)
                            CreateByteField (Arg0, 0x03, IOHI)
                            CreateByteField (Arg0, 0x09, IRQL)
                            WRIT (Zero, 0x24, Zero)
                            FindSetRightBit (IRQL, Local0)
                            Local0--
                            Local0 <<= 0x04
                            Local1 = READ (Zero, 0x28, 0x0F)
                            Local0 |= Local1
                            WRIT (Zero, 0x28, Local0)
                            Local0 = IOLO /* \_SB_.PCI0.LPCB.SIO_.COMA._SRS.IOLO */
                            Local0 >>= 0x02
                            Local0 &= 0xFE
                            Local1 = IOHI /* \_SB_.PCI0.LPCB.SIO_.COMA._SRS.IOHI */
                            Local1 <<= 0x06
                            Local0 |= Local1
                            WRIT (Zero, 0x24, Local0)
                            If ((Local0 == 0xFE))
                            {
                                CMAR = Zero
                            }

                            If ((Local0 == 0xBE))
                            {
                                CMAR = One
                            }

                            If ((Local0 == 0xBA))
                            {
                                CMAR = 0x05
                            }

                            If ((Local0 == 0xFA))
                            {
                                CMAR = 0x07
                            }

                            CMAD = One
                            Local0 = READ (Zero, 0x02, 0xFF)
                            Local0 |= 0x08
                            WRIT (Zero, 0x02, Local0)
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local1 = ~0x40
                            Local0 &= Local1
                            WRIT (Zero, 0x07, Local0)
                            CMAD = One
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Local0 = (_STA () & 0x02)
                            If ((Local0 == Zero))
                            {
                                Return (RSRC) /* \_SB_.PCI0.LPCB.SIO_.COMA.RSRC */
                            }

                            Name (BUF0, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    _Y10)
                                IRQNoFlags (_Y11)
                                    {4}
                            })
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.COMA._CRS._Y10._MIN, IOLO)  // _MIN: Minimum Base Address
                            CreateByteField (BUF0, 0x03, IOHI)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.COMA._CRS._Y10._MAX, IORL)  // _MAX: Maximum Base Address
                            CreateByteField (BUF0, 0x05, IORH)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.COMA._CRS._Y11._INT, IRQL)  // _INT: Interrupts
                            Local0 = READ (Zero, 0x24, 0xFF)
                            Local1 = Local0
                            Local1 &= 0xC0
                            Local1 >>= 0x06
                            Local0 <<= 0x02
                            IOLO = Local0
                            IOHI = Local1
                            IORL = IOLO /* \_SB_.PCI0.LPCB.SIO_.COMA._CRS.IOLO */
                            IORH = IOHI /* \_SB_.PCI0.LPCB.SIO_.COMA._CRS.IOHI */
                            Local0 = READ (Zero, 0x28, 0xF0)
                            Local0 >>= 0x04
                            Local1 = One
                            IRQL = (Local1 << Local0)
                            Return (BUF0) /* \_SB_.PCI0.LPCB.SIO_.COMA._CRS.BUF0 */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x01)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x00, 0x01)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            StartDependentFn (0x00, 0x01)
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            StartDependentFn (0x00, 0x01)
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x08,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3}
                            }
                            EndDependentFn ()
                        })
                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            WRIT (Zero, 0x24, Zero)
                            Local0 = READ (Zero, 0x28, 0x0F)
                            WRIT (Zero, 0x28, Local0)
                            Local0 = READ (Zero, 0x02, 0xFF)
                            Local1 = ~0x08
                            Local0 &= Local1
                            WRIT (Zero, 0x02, Local0)
                            CMAD = Zero
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            Local0 = READ (Zero, 0x02, 0xFF)
                            Local0 |= 0x08
                            WRIT (Zero, 0x02, Local0)
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local1 = ~0x40
                            Local0 &= Local1
                            WRIT (Zero, 0x07, Local0)
                        }

                        Method (_PS2, 0, NotSerialized)  // _PS2: Power State 2
                        {
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local0 |= 0x40
                            WRIT (Zero, 0x07, Local0)
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            Local0 = READ (Zero, 0x02, 0xFF)
                            Local1 = ~0x08
                            Local0 &= Local1
                            WRIT (Zero, 0x02, Local0)
                        }
                    }

                    Device (FIR)
                    {
                        Name (_HID, EisaId ("SMCF010"))  // _HID: Hardware ID
                        Name (FENA, One)
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                _Y12)
                            IO (Decode16,
                                0x06F8,             // Range Minimum
                                0x06F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                _Y13)
                            IRQNoFlags (_Y14)
                                {1,3}
                            DMA (Compatibility, NotBusMaster, Transfer8, _Y15)
                                {1,3}
                        })
                        Name (RSRC, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x00,               // Alignment
                                0x00,               // Length
                                )
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x00,               // Alignment
                                0x00,               // Length
                                )
                            IRQNoFlags ()
                                {0}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {1,3}
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((CMBP == Zero))
                            {
                                CMBD = Zero
                                Return (Zero)
                            }

                            Local0 = READ (Zero, 0x2B, 0xFF)
                            If ((Local0 == Zero))
                            {
                                CMBD = Zero
                                Return (Zero)
                            }

                            Local0 = READ (Zero, 0x25, 0xFF)
                            If ((Local0 == Zero))
                            {
                                CMBD = Zero
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IOLO)
                            CreateByteField (Arg0, 0x03, IOHI)
                            CreateByteField (Arg0, 0x0A, I2LO)
                            CreateByteField (Arg0, 0x0B, I2HI)
                            CreateByteField (Arg0, 0x11, IRQL)
                            CreateByteField (Arg0, 0x14, DMAC)
                            WRIT (Zero, 0x25, Zero)
                            FindSetRightBit (IRQL, Local0)
                            Local0--
                            Local1 = READ (Zero, 0x28, 0xF0)
                            Local0 |= Local1
                            WRIT (Zero, 0x28, Local0)
                            Local0 = IOLO /* \_SB_.PCI0.LPCB.SIO_.FIR_._SRS.IOLO */
                            Local0 >>= 0x02
                            Local0 &= 0xFE
                            Local1 = IOHI /* \_SB_.PCI0.LPCB.SIO_.FIR_._SRS.IOHI */
                            Local1 <<= 0x06
                            Local0 |= Local1
                            WRIT (Zero, 0x25, Local0)
                            If ((Local0 == 0xFE))
                            {
                                CMBR = Zero
                            }

                            If ((Local0 == 0xBE))
                            {
                                CMBR = One
                            }

                            If ((Local0 == 0xBA))
                            {
                                CMBR = 0x05
                            }

                            If ((Local0 == 0xFA))
                            {
                                CMBR = 0x07
                            }

                            CMBD = One
                            Local0 = I2LO /* \_SB_.PCI0.LPCB.SIO_.FIR_._SRS.I2LO */
                            Local0 >>= 0x03
                            Local1 = I2HI /* \_SB_.PCI0.LPCB.SIO_.FIR_._SRS.I2HI */
                            Local1 <<= 0x05
                            Local0 |= Local1
                            WRIT (Zero, 0x2B, Local0)
                            Local3 = Local0
                            IOR2 = Zero
                            LGRM |= One
                            Local3 <<= 0x03
                            Local3 |= One
                            IOR2 = Local3
                            FindSetRightBit (DMAC, Local0)
                            Local0--
                            WRIT (Zero, 0x2C, Local0)
                            Local0 = READ (Zero, 0x0A, 0xFF)
                            Local1 = ~0xC0
                            Local0 &= Local1
                            Local0 |= 0x40
                            WRIT (Zero, 0x0A, Local0)
                            Local0 = READ (Zero, 0x0C, 0xFF)
                            Local1 = ~0x38
                            Local0 &= Local1
                            Local0 |= 0x08
                            WRIT (Zero, 0x0C, Local0)
                            Local0 = READ (Zero, 0x02, 0xFF)
                            Local0 |= 0x80
                            WRIT (Zero, 0x02, Local0)
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local1 = ~0x20
                            Local0 &= Local1
                            WRIT (Zero, 0x07, Local0)
                            FENA = One
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Local0 = (_STA () & 0x02)
                            If ((Local0 == Zero))
                            {
                                Return (RSRC) /* \_SB_.PCI0.LPCB.SIO_.FIR_.RSRC */
                            }

                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.FIR._Y12._MIN, IOLO)  // _MIN: Minimum Base Address
                            CreateByteField (BUF0, 0x03, IOHI)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.FIR._Y12._MAX, IORL)  // _MAX: Maximum Base Address
                            CreateByteField (BUF0, 0x05, IORH)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.FIR._Y13._MIN, I2LO)  // _MIN: Minimum Base Address
                            CreateByteField (BUF0, 0x0B, I2HI)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.FIR._Y13._MAX, I2RL)  // _MAX: Maximum Base Address
                            CreateByteField (BUF0, 0x0D, I2RH)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.FIR._Y14._INT, IRQL)  // _INT: Interrupts
                            CreateByteField (BUF0, 0x12, IRQH)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.FIR._Y15._DMA, DMAC)  // _DMA: Direct Memory Access
                            Local0 = READ (Zero, 0x25, 0xFF)
                            Local1 = Local0
                            Local1 &= 0xC0
                            Local1 >>= 0x06
                            Local0 <<= 0x02
                            Local0 &= 0xFF
                            IOLO = Local0
                            IOHI = Local1
                            IORL = IOLO /* \_SB_.PCI0.LPCB.SIO_.FIR_._CRS.IOLO */
                            IORH = IOHI /* \_SB_.PCI0.LPCB.SIO_.FIR_._CRS.IOHI */
                            Local0 = IOHI /* \_SB_.PCI0.LPCB.SIO_.FIR_._CRS.IOHI */
                            Local0 += 0x04
                            I2HI = Local0
                            I2RH = Local0
                            Local0 = IOLO /* \_SB_.PCI0.LPCB.SIO_.FIR_._CRS.IOLO */
                            I2LO = Local0
                            I2RL = Local0
                            Local0 = READ (Zero, 0x28, 0x0F)
                            Local1 = One
                            IRQL = (Local1 << Local0)
                            IRQH = Zero
                            Local0 = READ (Zero, 0x2C, 0x0F)
                            Local1 = One
                            DMAC = (Local1 << Local0)
                            Return (BUF0) /* \_SB_.PCI0.LPCB.SIO_.FIR_.BUF0 */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x01)
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x06F8,             // Range Minimum
                                    0x06F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3,4}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1,3}
                            }
                            StartDependentFn (0x00, 0x01)
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x07F8,             // Range Minimum
                                    0x07F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3,4}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1,3}
                            }
                            StartDependentFn (0x00, 0x01)
                            {
                                IO (Decode16,
                                    0x03E8,             // Range Minimum
                                    0x03E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x07E8,             // Range Minimum
                                    0x07E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3,4}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1,3}
                            }
                            StartDependentFn (0x00, 0x01)
                            {
                                IO (Decode16,
                                    0x02E8,             // Range Minimum
                                    0x02E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x06E8,             // Range Minimum
                                    0x06E8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {3,4}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1,3}
                            }
                            EndDependentFn ()
                        })
                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            Local0 = READ (Zero, 0x25, 0xFF)
                            CMBD = Zero
                            FENA = Zero
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            Local0 = READ (Zero, 0x02, 0xFF)
                            Local0 |= 0x80
                            WRIT (Zero, 0x02, Local0)
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local1 = ~0x20
                            Local0 &= Local1
                            WRIT (Zero, 0x07, Local0)
                        }

                        Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                        {
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local0 |= 0x20
                            WRIT (Zero, 0x07, Local0)
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            Local0 = READ (Zero, 0x02, 0xFF)
                            Local1 = ~0x80
                            Local0 &= Local1
                            WRIT (Zero, 0x02, Local0)
                        }
                    }

                    Device (LPT)
                    {
                        Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (Z00A, One)
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((LPTP == Zero))
                            {
                                Return (Zero)
                            }

                            If ((Z00A == One))
                            {
                                Local0 = READ (Zero, One, 0x04)
                                If ((Local0 == Zero))
                                {
                                    Return (Zero)
                                }
                            }

                            Local0 = READ (Zero, One, 0x08)
                            If ((Local0 == Zero))
                            {
                                Return (Zero)
                            }

                            Local0 = READ (Zero, 0x23, 0xC0)
                            If ((Local0 == Zero))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IOLO)
                            CreateByteField (Arg0, 0x03, IOHI)
                            CreateByteField (Arg0, 0x09, IRQL)
                            WRIT (Zero, 0x23, Zero)
                            FindSetRightBit (IRQL, Local0)
                            If (Local0)
                            {
                                Local0--
                                Local1 = READ (Zero, 0x27, 0xF0)
                                Local0 |= Local1
                                WRIT (Zero, 0x27, Local0)
                            }
                            Else
                            {
                                Local0 = READ (Zero, 0x27, 0xF0)
                                WRIT (Zero, 0x27, Local0)
                            }

                            Local0 = IOLO /* \_SB_.PCI0.LPCB.SIO_.LPT_._SRS.IOLO */
                            Local0 >>= 0x02
                            Local1 = IOHI /* \_SB_.PCI0.LPCB.SIO_.LPT_._SRS.IOHI */
                            Local1 <<= 0x06
                            Local0 |= Local1
                            WRIT (Zero, 0x23, Local0)
                            If ((Local0 == 0xDE))
                            {
                                LPTR = Zero
                            }

                            If ((Local0 == 0x9E))
                            {
                                LPTR = One
                            }

                            If ((Local0 == 0xEF))
                            {
                                LPTR = 0x02
                            }

                            LPTD = One
                            Local0 = READ (Zero, One, 0xFF)
                            Local0 |= 0x0C
                            WRIT (Zero, One, Local0)
                            Z00A = One
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (BUF0, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    _Y16)
                                IRQNoFlags (_Y17)
                                    {}
                            })
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.LPT._CRS._Y16._MIN, IOLO)  // _MIN: Minimum Base Address
                            CreateByteField (BUF0, 0x03, IOHI)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.LPT._CRS._Y16._MAX, IORL)  // _MAX: Maximum Base Address
                            CreateByteField (BUF0, 0x05, IORH)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.LPT._CRS._Y16._LEN, LNA1)  // _LEN: Length
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.LPT._CRS._Y17._INT, IRQL)  // _INT: Interrupts
                            Local0 = READ (Zero, 0x23, 0xFF)
                            Local1 = Local0
                            Local1 &= 0xC0
                            Local1 >>= 0x06
                            Local0 &= 0x3F
                            Local0 <<= 0x02
                            IOLO = Local0
                            IOHI = Local1
                            IORL = IOLO /* \_SB_.PCI0.LPCB.SIO_.LPT_._CRS.IOLO */
                            IORH = IOHI /* \_SB_.PCI0.LPCB.SIO_.LPT_._CRS.IOHI */
                            If (Local0)
                            {
                                If ((Local0 == 0xBC))
                                {
                                    LNA1 = 0x04
                                }
                                Else
                                {
                                    LNA1 = 0x08
                                }
                            }
                            Else
                            {
                                LNA1 = Zero
                            }

                            If (Local0)
                            {
                                Local0 = READ (Zero, 0x27, 0xFF)
                                Local0 &= 0x0F
                                Local1 = One
                                IRQL = (Local1 << Local0)
                            }

                            Return (BUF0) /* \_SB_.PCI0.LPCB.SIO_.LPT_._CRS.BUF0 */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                            }
                            StartDependentFn (0x01, 0x01)
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                            }
                            EndDependentFn ()
                        })
                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            WRIT (Zero, 0x23, Zero)
                            Local0 = READ (Zero, 0x27, 0xFF)
                            Local0 &= 0xF0
                            WRIT (Zero, 0x27, Local0)
                            Local0 = READ (Zero, One, 0xFF)
                            Local0 &= 0xFB
                            WRIT (Zero, One, Local0)
                            Z00A = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            Local0 = READ (Zero, One, 0xFF)
                            Local1 = ~0x04
                            Local0 &= Local1
                            WRIT (Zero, One, Local0)
                            Z00A = Zero
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            Local0 = READ (Zero, One, 0xFF)
                            Local1 = ~0x04
                            Local0 &= Local1
                            Local0 |= 0x04
                            WRIT (Zero, One, Local0)
                            Z00A = One
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local1 = ~0x10
                            Local0 &= Local1
                            WRIT (Zero, 0x07, Local0)
                        }

                        Method (_PS2, 0, NotSerialized)  // _PS2: Power State 2
                        {
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local1 = ~0x10
                            Local0 &= Local1
                            Local0 |= 0x10
                            WRIT (Zero, 0x07, Local0)
                        }
                    }

                    Device (LPBI)
                    {
                        Name (_HID, EisaId ("PNP0400") /* Standard LPT Parallel Port */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Name (Z00B, One)
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((Z00B == One))
                            {
                                Local0 = READ (Zero, One, 0x04)
                                If ((Local0 == Zero))
                                {
                                    Return (Zero)
                                }
                            }

                            Local0 = READ (Zero, One, 0x08)
                            If ((Local0 != Zero))
                            {
                                Return (Zero)
                            }

                            Local0 = READ (Zero, 0x04, 0x03)
                            If ((Local0 != Zero))
                            {
                                Return (Zero)
                            }

                            Local0 = READ (Zero, 0x23, 0xC0)
                            If ((Local0 == Zero))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IOLO)
                            CreateByteField (Arg0, 0x03, IOHI)
                            CreateByteField (Arg0, 0x09, IRQL)
                            WRIT (Zero, 0x23, Zero)
                            FindSetRightBit (IRQL, Local0)
                            If (Local0)
                            {
                                Local0--
                                Local1 = READ (Zero, 0x27, 0xF0)
                                Local0 |= Local1
                                WRIT (Zero, 0x27, Local0)
                            }
                            Else
                            {
                                Local0 = READ (Zero, 0x27, 0xF0)
                                WRIT (Zero, 0x27, Local0)
                            }

                            Local0 = IOLO /* \_SB_.PCI0.LPCB.SIO_.LPBI._SRS.IOLO */
                            Local0 >>= 0x02
                            Local1 = IOHI /* \_SB_.PCI0.LPCB.SIO_.LPBI._SRS.IOHI */
                            Local1 <<= 0x06
                            Local0 |= Local1
                            WRIT (Zero, 0x23, Local0)
                            If ((Local0 == 0xDE))
                            {
                                LPTR = Zero
                            }

                            If ((Local0 == 0x9E))
                            {
                                LPTR = One
                            }

                            If ((Local0 == 0xEF))
                            {
                                LPTR = 0x02
                            }

                            LPTD = One
                            Local0 = READ (Zero, 0x04, 0xFC)
                            WRIT (Zero, 0x04, Local0)
                            Local0 = READ (Zero, One, 0xFF)
                            Local0 |= 0x04
                            Local0 &= 0xF7
                            WRIT (Zero, One, Local0)
                            Z00B = One
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (BUF0, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    _Y18)
                                IRQNoFlags (_Y19)
                                    {}
                            })
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.LPBI._CRS._Y18._MIN, IOLO)  // _MIN: Minimum Base Address
                            CreateByteField (BUF0, 0x03, IOHI)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.LPBI._CRS._Y18._MAX, IORL)  // _MAX: Maximum Base Address
                            CreateByteField (BUF0, 0x05, IORH)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.LPBI._CRS._Y18._LEN, LNA1)  // _LEN: Length
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.LPBI._CRS._Y19._INT, IRQL)  // _INT: Interrupts
                            Local0 = READ (Zero, 0x23, 0xFF)
                            Local1 = Local0
                            Local1 &= 0xC0
                            Local1 >>= 0x06
                            Local0 &= 0x3F
                            Local0 <<= 0x02
                            IOLO = Local0
                            IOHI = Local1
                            IORL = IOLO /* \_SB_.PCI0.LPCB.SIO_.LPBI._CRS.IOLO */
                            IORH = IOHI /* \_SB_.PCI0.LPCB.SIO_.LPBI._CRS.IOHI */
                            If (Local0)
                            {
                                If ((Local0 == 0xBC))
                                {
                                    LNA1 = 0x04
                                }
                                Else
                                {
                                    LNA1 = 0x08
                                }
                            }
                            Else
                            {
                                LNA1 = Zero
                            }

                            If (Local0)
                            {
                                Local0 = READ (Zero, 0x27, 0xFF)
                                Local0 &= 0x0F
                                Local1 = One
                                IRQL = (Local1 << Local0)
                            }

                            Return (BUF0) /* \_SB_.PCI0.LPCB.SIO_.LPBI._CRS.BUF0 */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                            }
                            StartDependentFn (0x01, 0x01)
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                            }
                            EndDependentFn ()
                        })
                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            WRIT (Zero, 0x23, Zero)
                            Local0 = READ (Zero, 0x27, 0xFF)
                            Local0 &= 0xF0
                            WRIT (Zero, 0x27, Local0)
                            Local0 = READ (Zero, One, 0xFF)
                            Local0 &= 0xFB
                            WRIT (Zero, One, Local0)
                            Z00B = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            Local0 = READ (Zero, One, 0xFF)
                            Local1 = ~0x04
                            Local0 &= Local1
                            WRIT (Zero, One, Local0)
                            Z00B = Zero
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            Local0 = READ (Zero, One, 0xFF)
                            Local1 = ~0x04
                            Local0 &= Local1
                            Local0 |= 0x04
                            WRIT (Zero, One, Local0)
                            Z00B = One
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local1 = ~0x10
                            Local0 &= Local1
                            WRIT (Zero, 0x07, Local0)
                        }

                        Method (_PS2, 0, NotSerialized)  // _PS2: Power State 2
                        {
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local1 = ~0x10
                            Local0 &= Local1
                            Local0 |= 0x10
                            WRIT (Zero, 0x07, Local0)
                        }
                    }

                    Device (ECP)
                    {
                        Name (_HID, EisaId ("PNP0401") /* ECP Parallel Port */)  // _HID: Hardware ID
                        Name (Z00C, One)
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((Z00C == One))
                            {
                                Local0 = READ (Zero, One, 0x04)
                                If ((Local0 == Zero))
                                {
                                    Return (Zero)
                                }
                            }

                            Local0 = READ (Zero, One, 0x08)
                            If ((Local0 != Zero))
                            {
                                Return (Zero)
                            }

                            Local0 = READ (Zero, 0x04, 0x03)
                            If ((Local0 != 0x02))
                            {
                                Return (Zero)
                            }

                            Local0 = READ (Zero, 0x23, 0xC0)
                            If ((Local0 == Zero))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IOLO)
                            CreateByteField (Arg0, 0x03, IOHI)
                            CreateByteField (Arg0, 0x11, IRQL)
                            CreateByteField (Arg0, 0x14, DMAC)
                            WRIT (Zero, 0x23, Zero)
                            FindSetRightBit (IRQL, Local0)
                            If (Local0)
                            {
                                Local0--
                                Local1 = READ (Zero, 0x27, 0xF0)
                                Local0 |= Local1
                                WRIT (Zero, 0x27, Local0)
                            }
                            Else
                            {
                                Local0 = READ (Zero, 0x27, 0xF0)
                                WRIT (Zero, 0x27, Local0)
                            }

                            Local0 = IOLO /* \_SB_.PCI0.LPCB.SIO_.ECP_._SRS.IOLO */
                            Local0 >>= 0x02
                            Local1 = IOHI /* \_SB_.PCI0.LPCB.SIO_.ECP_._SRS.IOHI */
                            Local1 <<= 0x06
                            Local0 |= Local1
                            WRIT (Zero, 0x23, Local0)
                            If ((Local0 == 0xDE))
                            {
                                LPTR = Zero
                            }

                            If ((Local0 == 0x9E))
                            {
                                LPTR = One
                            }

                            If ((Local0 == 0xEF))
                            {
                                LPTR = 0x02
                            }

                            LPTD = One
                            FindSetRightBit (DMAC, Local0)
                            If (Local0)
                            {
                                Local0--
                                Local1 = READ (Zero, 0x26, 0xF0)
                                Local0 |= Local1
                                WRIT (Zero, 0x26, Local0)
                            }
                            Else
                            {
                                Local0 = READ (Zero, 0x26, 0xF0)
                                WRIT (Zero, 0x26, Local0)
                            }

                            Local0 = READ (Zero, 0x04, 0xFC)
                            Local0 |= 0x02
                            WRIT (Zero, 0x04, Local0)
                            Local0 = READ (Zero, One, 0xFF)
                            Local0 |= 0x04
                            Local0 &= 0xF7
                            WRIT (Zero, One, Local0)
                            Z00C = One
                        }

                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            Name (BUF0, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x04,               // Length
                                    _Y1A)
                                IO (Decode16,
                                    0x0000,             // Range Minimum
                                    0x0000,             // Range Maximum
                                    0x08,               // Alignment
                                    0x04,               // Length
                                    _Y1B)
                                IRQNoFlags (_Y1C)
                                    {}
                                DMA (Compatibility, NotBusMaster, Transfer8, _Y1D)
                                    {}
                            })
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.ECP._CRS._Y1A._MIN, IOLO)  // _MIN: Minimum Base Address
                            CreateByteField (BUF0, 0x03, IOHI)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.ECP._CRS._Y1A._MAX, IORL)  // _MAX: Maximum Base Address
                            CreateByteField (BUF0, 0x05, IORH)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.ECP._CRS._Y1A._LEN, LNA1)  // _LEN: Length
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.ECP._CRS._Y1B._MIN, DALO)  // _MIN: Minimum Base Address
                            CreateByteField (BUF0, 0x0B, DAHI)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.ECP._CRS._Y1B._MAX, DRLO)  // _MAX: Maximum Base Address
                            CreateByteField (BUF0, 0x0D, DRHI)
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.ECP._CRS._Y1B._LEN, LNA2)  // _LEN: Length
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.ECP._CRS._Y1C._INT, IRQL)  // _INT: Interrupts
                            CreateByteField (BUF0, \_SB.PCI0.LPCB.SIO.ECP._CRS._Y1D._DMA, DMAC)  // _DMA: Direct Memory Access
                            Local0 = READ (Zero, 0x23, 0xFF)
                            Local1 = Local0
                            Local1 &= 0xC0
                            Local1 >>= 0x06
                            Local0 &= 0x3F
                            Local0 <<= 0x02
                            IOLO = Local0
                            IOHI = Local1
                            IORL = IOLO /* \_SB_.PCI0.LPCB.SIO_.ECP_._CRS.IOLO */
                            IORH = IOHI /* \_SB_.PCI0.LPCB.SIO_.ECP_._CRS.IOHI */
                            Local1 += 0x04
                            DALO = IOLO /* \_SB_.PCI0.LPCB.SIO_.ECP_._CRS.IOLO */
                            DAHI = Local1
                            DRLO = DALO /* \_SB_.PCI0.LPCB.SIO_.ECP_._CRS.DALO */
                            DRHI = DAHI /* \_SB_.PCI0.LPCB.SIO_.ECP_._CRS.DAHI */
                            If ((Local0 == Zero))
                            {
                                LNA1 = Zero
                                LNA2 = Zero
                            }

                            If (Local0)
                            {
                                Local0 = READ (Zero, 0x27, 0xFF)
                                Local0 &= 0x0F
                                Local1 = One
                                IRQL = (Local1 << Local0)
                            }

                            If (Local0)
                            {
                                Local0 = READ (Zero, 0x26, 0xFF)
                                Local0 &= 0x0F
                                Local1 = One
                                DMAC = (Local1 << Local0)
                            }

                            Return (BUF0) /* \_SB_.PCI0.LPCB.SIO_.ECP_._CRS.BUF0 */
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                IO (Decode16,
                                    0x0378,             // Range Minimum
                                    0x0378,             // Range Maximum
                                    0x08,               // Alignment
                                    0x04,               // Length
                                    )
                                IO (Decode16,
                                    0x0778,             // Range Minimum
                                    0x0778,             // Range Maximum
                                    0x08,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1,3}
                            }
                            StartDependentFn (0x01, 0x01)
                            {
                                IO (Decode16,
                                    0x0278,             // Range Minimum
                                    0x0278,             // Range Maximum
                                    0x08,               // Alignment
                                    0x04,               // Length
                                    )
                                IO (Decode16,
                                    0x0678,             // Range Minimum
                                    0x0678,             // Range Maximum
                                    0x08,               // Alignment
                                    0x04,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1,3}
                            }
                            StartDependentFn (0x02, 0x02)
                            {
                                IO (Decode16,
                                    0x03BC,             // Range Minimum
                                    0x03BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x03,               // Length
                                    )
                                IO (Decode16,
                                    0x07BC,             // Range Minimum
                                    0x07BC,             // Range Maximum
                                    0x01,               // Alignment
                                    0x03,               // Length
                                    )
                                IRQNoFlags ()
                                    {5,7}
                                DMA (Compatibility, NotBusMaster, Transfer8, )
                                    {1,3}
                            }
                            EndDependentFn ()
                        })
                        Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                        {
                            WRIT (Zero, 0x23, Zero)
                            Local0 = READ (Zero, 0x27, 0xFF)
                            Local0 &= 0xF0
                            WRIT (Zero, 0x27, Local0)
                            Local0 = READ (Zero, One, 0xFF)
                            Local0 &= 0xFB
                            WRIT (Zero, One, Local0)
                            Z00C = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            Local0 = READ (Zero, One, 0xFF)
                            Local1 = ~0x04
                            Local0 &= Local1
                            WRIT (Zero, One, Local0)
                            Z00C = Zero
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            Local0 = READ (Zero, One, 0xFF)
                            Local1 = ~0x04
                            Local0 &= Local1
                            Local0 |= 0x04
                            WRIT (Zero, One, Local0)
                            Z00C = One
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local1 = ~0x10
                            Local0 &= Local1
                            WRIT (Zero, 0x07, Local0)
                        }

                        Method (_PS2, 0, NotSerialized)  // _PS2: Power State 2
                        {
                            Local0 = READ (Zero, 0x07, 0xFF)
                            Local1 = ~0x10
                            Local0 &= Local1
                            Local0 |= 0x10
                            WRIT (Zero, 0x07, Local0)
                        }
                    }
                }

                Device (BAT1)
                {
                    Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                    {
                        _SB
                    })
                    Name (BMDL, Zero)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((ECOK () && (ECDY == Zero)))
                        {
                            If (^^EC0.BAL0)
                            {
                                Sleep (0x14)
                                Return (0x1F)
                            }
                            Else
                            {
                                Sleep (0x14)
                                Return (0x0F)
                            }
                        }
                        Else
                        {
                            Sleep (0x14)
                            Return (0x1F)
                        }
                    }

                    Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                    {
                        Name (STAT, Package (0x0D)
                        {
                            One, 
                            0x0FA0, 
                            0x0FA0, 
                            One, 
                            0x39D0, 
                            0x01A4, 
                            0x9C, 
                            0x0108, 
                            0x0EC4, 
                            "PA3457U ", 
                            "3658Q", 
                            "Li-Ion", 
                            "TOSHIBA"
                        })
                        If ((ECOK () && (ECDY == Zero)))
                        {
                            Local0 = ^^EC0.BDN0 /* \_SB_.PCI0.LPCB.EC0_.BDN0 */
                            BMDL = Local0
                            If (((BRAD == One) || (BRAD == 0x02)))
                            {
                                If ((Local0 == 0x02))
                                {
                                    Index (STAT, 0x09) = "PA3451U "
                                }

                                If ((Local0 == 0x04))
                                {
                                    Index (STAT, 0x09) = "PA3465U "
                                }

                                If ((Local0 == 0x08))
                                {
                                    Index (STAT, 0x09) = "PA3457U "
                                }
                            }
                            Else
                            {
                                If ((Local0 == 0x02))
                                {
                                    Index (STAT, 0x09) = "PA3451U "
                                }

                                If ((Local0 == 0x04))
                                {
                                    Index (STAT, 0x09) = "PA3465U "
                                }

                                If ((Local0 == 0x08))
                                {
                                    Index (STAT, 0x09) = "PA3457U "
                                }
                            }

                            Sleep (0x14)
                            BFC1 = ^^EC0.BDC0 /* \_SB_.PCI0.LPCB.EC0_.BDC0 */
                            Sleep (0x14)
                        }
                        Else
                        {
                            Index (STAT, 0x0B) = "Li-Ion"
                            Local0 = BDN1 /* \BDN1 */
                            If ((BRAD == One))
                            {
                                If ((Local0 == 0x02))
                                {
                                    Index (STAT, 0x09) = "PA3451U "
                                }

                                If ((Local0 == 0x04))
                                {
                                    Index (STAT, 0x09) = "PA3465U "
                                }

                                If ((Local0 == 0x08))
                                {
                                    Index (STAT, 0x09) = "PA3457U "
                                }
                            }
                            Else
                            {
                                If ((Local0 == 0x02))
                                {
                                    Index (STAT, 0x09) = "PA3451U "
                                }

                                If ((Local0 == 0x04))
                                {
                                    Index (STAT, 0x09) = "PA3465U "
                                }

                                If ((Local0 == 0x08))
                                {
                                    Index (STAT, 0x09) = "PA3457U "
                                }
                            }

                            Sleep (0x14)
                        }

                        If (BFC1)
                        {
                            Divide (BFC1, 0x64, Local0, Local1)
                            Local1 *= 0x0A
                            Index (STAT, 0x05) = Local1
                            Divide (BFC1, 0x64, Local0, Local1)
                            Local1 *= 0x03
                            Index (STAT, 0x06) = Local1
                            Divide (BFC1, 0x64, Local0, Local1)
                            Local1 *= 0x64
                            BFC1 = Local1
                            Index (STAT, One) = Local1
                            Index (STAT, 0x02) = Local1
                        }

                        Return (STAT) /* \_SB_.PCI0.LPCB.BAT1._BIF.STAT */
                    }

                    Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                    {
                        Name (PBST, Package (0x04)
                        {
                            Zero, 
                            Ones, 
                            Ones, 
                            0x39D0
                        })
                        Local3 = 0x39D0
                        If ((ECOK () && (ECDY == Zero)))
                        {
                            Sleep (0x14)
                            BST1 = ^^EC0.BST0 /* \_SB_.PCI0.LPCB.EC0_.BST0 */
                            Sleep (0x14)
                            BGU1 = ^^EC0.GAU0 /* \_SB_.PCI0.LPCB.EC0_.GAU0 */
                            Sleep (0x14)
                        }

                        If (BFC1)
                        {
                            Local2 = (BGU1 * BFC1) /* \BFC1 */
                            Divide (Local2, 0x64, Local4, Local2)
                        }
                        Else
                        {
                            Local2 = (BGU1 * 0x28)
                        }

                        Index (PBST, Zero) = BST1 /* \BST1 */
                        Index (PBST, One) = Zero
                        Index (PBST, 0x02) = Local2
                        Index (PBST, 0x03) = Local3
                        If ((ECOK () && (ECDY == Zero)))
                        {
                            If ((^^EC0.BDN0 != BMDL))
                            {
                                Notify (BAT1, 0x81) // Information Change
                            }
                        }

                        If ((ECDY > Zero))
                        {
                            ECDY--
                            If ((ECDY == Zero))
                            {
                                Notify (BAT1, 0x81) // Information Change
                            }
                        }

                        Return (PBST) /* \_SB_.PCI0.LPCB.BAT1._BST.PBST */
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("SYN0704"))  // _HID: Hardware ID
                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN0700"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                }
            }

            Device (PATA)
            {
                Name (_ADR, 0x001F0001)  // _ADR: Address
                OperationRegion (PACS, PCI_Config, 0x40, 0xC0)
                Field (PACS, DWordAcc, NoLock, Preserve)
                {
                    PRIT,   16, 
                    Offset (0x04), 
                    PSIT,   4, 
                    Offset (0x08), 
                    SYNC,   4, 
                    Offset (0x0A), 
                    SDT0,   2, 
                        ,   2, 
                    SDT1,   2, 
                    Offset (0x14), 
                    ICR0,   4, 
                    ICR1,   4, 
                    ICR2,   4, 
                    ICR3,   4, 
                    ICR4,   4, 
                    ICR5,   4
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           /* .... */
                        })
                        CreateDWordField (PBUF, Zero, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GETP (PRIT)
                        DMA0 = GDMA ((SYNC & One), (ICR3 & One), (
                            ICR0 & One), SDT0, (ICR1 & One))
                        If ((DMA0 == Ones))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.PATA.PRID._GTM.PIO0 */
                        }

                        If ((PRIT & 0x4000))
                        {
                            If (((PRIT & 0x90) == 0x80))
                            {
                                PIO1 = 0x0384
                            }
                            Else
                            {
                                PIO1 = GETT (PSIT)
                            }
                        }
                        Else
                        {
                            PIO1 = Ones
                        }

                        DMA1 = GDMA ((SYNC & 0x02), (ICR3 & 0x02), (
                            ICR0 & 0x02), SDT1, (ICR1 & 0x02))
                        If ((DMA1 == Ones))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.PATA.PRID._GTM.PIO1 */
                        }

                        FLAG = GETF ((SYNC & One), (SYNC & 0x02), PRIT)
                        If (((PIO0 == Ones) & (DMA0 == Ones)))
                        {
                            PIO0 = 0x78
                            DMA0 = 0x14
                            FLAG = 0x03
                        }

                        Return (PBUF) /* \_SB_.PCI0.PATA.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, Zero, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        If ((SizeOf (Arg1) == 0x0200))
                        {
                            PRIT &= 0xC0F0
                            SYNC &= 0x02
                            SDT0 = Zero
                            ICR0 &= 0x02
                            ICR1 &= 0x02
                            ICR3 &= 0x02
                            ICR5 &= 0x02
                            CreateWordField (Arg1, 0x62, W490)
                            CreateWordField (Arg1, 0x6A, W530)
                            CreateWordField (Arg1, 0x7E, W630)
                            CreateWordField (Arg1, 0x80, W640)
                            CreateWordField (Arg1, 0xB0, W880)
                            CreateWordField (Arg1, 0xBA, W930)
                            PRIT |= 0x8004
                            If (((FLAG & 0x02) && (W490 & 0x0800)))
                            {
                                PRIT |= 0x02
                            }

                            PRIT |= SETP (PIO0, W530, W640)
                            If ((FLAG & One))
                            {
                                SYNC |= One
                                SDT0 = SDMA (DMA0)
                                If ((DMA0 < 0x1E))
                                {
                                    ICR3 |= One
                                }

                                If ((DMA0 < 0x3C))
                                {
                                    ICR0 |= One
                                }

                                If ((W930 & 0x2000))
                                {
                                    ICR1 |= One
                                }
                            }
                        }

                        If ((SizeOf (Arg2) == 0x0200))
                        {
                            PRIT &= 0xBF0F
                            PSIT = Zero
                            SYNC &= One
                            SDT1 = Zero
                            ICR0 &= One
                            ICR1 &= One
                            ICR3 &= One
                            ICR5 &= One
                            CreateWordField (Arg2, 0x62, W491)
                            CreateWordField (Arg2, 0x6A, W531)
                            CreateWordField (Arg2, 0x7E, W631)
                            CreateWordField (Arg2, 0x80, W641)
                            CreateWordField (Arg2, 0xB0, W881)
                            CreateWordField (Arg2, 0xBA, W931)
                            PRIT |= 0x8040
                            If (((FLAG & 0x08) && (W491 & 0x0800)))
                            {
                                PRIT |= 0x20
                            }

                            If ((FLAG & 0x10))
                            {
                                PRIT |= 0x4000
                                If ((PIO1 > 0xF0))
                                {
                                    PRIT |= 0x80
                                }
                                Else
                                {
                                    PRIT |= 0x10
                                    PSIT = SETT (PIO1, W531, W641)
                                }
                            }

                            If ((FLAG & 0x04))
                            {
                                SYNC |= 0x02
                                SDT1 = SDMA (DMA1)
                                If ((DMA1 < 0x1E))
                                {
                                    ICR3 |= 0x02
                                }

                                If ((DMA1 < 0x3C))
                                {
                                    ICR0 |= 0x02
                                }

                                If ((W931 & 0x2000))
                                {
                                    ICR1 |= 0x02
                                }
                            }
                        }
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  /* ........ */
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               /* ...... */
                            })
                            CreateByteField (PIB0, One, PMD0)
                            CreateByteField (PIB0, 0x08, DMD0)
                            If ((PRIT & 0x02))
                            {
                                If (((PRIT & 0x09) == 0x08))
                                {
                                    PMD0 = 0x08
                                }
                                Else
                                {
                                    PMD0 = 0x0A
                                    Local0 = ((PRIT & 0x0300) >> 0x08)
                                    Local1 = ((PRIT & 0x3000) >> 0x0C)
                                    Local2 = (Local0 + Local1)
                                    If ((0x03 == Local2))
                                    {
                                        PMD0 = 0x0B
                                    }

                                    If ((0x05 == Local2))
                                    {
                                        PMD0 = 0x0C
                                    }
                                }
                            }
                            Else
                            {
                                PMD0 = One
                            }

                            If ((SYNC & One))
                            {
                                DMD0 = (SDT0 | 0x40)
                                If ((ICR1 & One))
                                {
                                    If ((ICR0 & One))
                                    {
                                        DMD0 += 0x02
                                    }

                                    If ((ICR3 & One))
                                    {
                                        DMD0 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB0) /* \_SB_.PCI0.PATA.PRID.P_D0._GTF.PIB0 */
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (PIB1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  /* ........ */
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               /* ...... */
                            })
                            CreateByteField (PIB1, One, PMD1)
                            CreateByteField (PIB1, 0x08, DMD1)
                            If ((PRIT & 0x20))
                            {
                                If (((PRIT & 0x90) == 0x80))
                                {
                                    PMD1 = 0x08
                                }
                                Else
                                {
                                    Local0 = ((PSIT & 0x03) + ((PSIT & 0x0C) >> 0x02
                                        ))
                                    If ((0x05 == Local0))
                                    {
                                        PMD1 = 0x0C
                                    }
                                    Else
                                    {
                                        If ((0x03 == Local0))
                                        {
                                            PMD1 = 0x0B
                                        }
                                        Else
                                        {
                                            PMD1 = 0x0A
                                        }
                                    }
                                }
                            }
                            Else
                            {
                                PMD1 = One
                            }

                            If ((SYNC & 0x02))
                            {
                                DMD1 = (SDT1 | 0x40)
                                If ((ICR1 & 0x02))
                                {
                                    If ((ICR0 & 0x02))
                                    {
                                        DMD1 += 0x02
                                    }

                                    If ((ICR3 & 0x02))
                                    {
                                        DMD1 = 0x45
                                    }
                                }
                            }
                            Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            }

                            Return (PIB1) /* \_SB_.PCI0.PATA.PRID.P_D1._GTF.PIB1 */
                        }
                    }
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                OperationRegion (SACS, PCI_Config, 0x40, 0xC0)
                Field (SACS, DWordAcc, NoLock, Preserve)
                {
                    PRIT,   16, 
                    SECT,   16, 
                    PSIT,   4, 
                    SSIT,   4, 
                    Offset (0x08), 
                    SYNC,   4, 
                    Offset (0x0A), 
                    SDT0,   2, 
                        ,   2, 
                    SDT1,   2, 
                    Offset (0x0B), 
                    SDT2,   2, 
                        ,   2, 
                    SDT3,   2, 
                    Offset (0x14), 
                    ICR0,   4, 
                    ICR1,   4, 
                    ICR2,   4, 
                    ICR3,   4, 
                    ICR4,   4, 
                    ICR5,   4, 
                    Offset (0x50), 
                    MAPV,   2, 
                    Offset (0x53), 
                    PCSR,   8
                }
            }

            Device (SBUS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
                Field (SMBP, DWordAcc, NoLock, Preserve)
                {
                        ,   2, 
                    I2CE,   1
                }

                OperationRegion (SMBI, SystemIO, 0x18C0, 0x10)
                Field (SMBI, ByteAcc, NoLock, Preserve)
                {
                    HSTS,   8, 
                    Offset (0x02), 
                    HCON,   8, 
                    HCOM,   8, 
                    TXSA,   8, 
                    DAT0,   8, 
                    DAT1,   8, 
                    HBDR,   8, 
                    PECR,   8, 
                    RXSA,   8, 
                    SDAT,   16
                }

                Method (SSXB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SRXB, 1, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCON = 0x44
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRB, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = Arg2
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SRDB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SBLW, 4, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Arg3
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = SizeOf (Arg2)
                    Local1 = Zero
                    HBDR = DerefOf (Index (Arg2, Zero))
                    HCON = 0x54
                    While ((SizeOf (Arg2) > Local1))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (Zero)
                        }

                        HSTS = 0x80
                        Local1++
                        If ((SizeOf (Arg2) > Local1))
                        {
                            HBDR = DerefOf (Index (Arg2, Local1))
                        }
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SBLR, 3, Serialized)
                {
                    Name (TBUF, Buffer (0x0100) {})
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Arg2
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCOM = Arg1
                    HCON = 0x54
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    Index (TBUF, Zero) = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                    HSTS = 0x80
                    Local1 = One
                    While ((Local1 < DerefOf (Index (TBUF, Zero))))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (Zero)
                        }

                        Index (TBUF, Local1) = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                        HSTS = 0x80
                        Local1++
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                    }

                    Return (Zero)
                }

                Method (STRT, 0, Serialized)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        If ((HSTS & 0x40))
                        {
                            Local0--
                            Sleep (One)
                            If ((Local0 == Zero))
                            {
                                Return (One)
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & One))
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == Zero))
                            {
                                KILL ()
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (One)
                }

                Method (COMP, 0, Serialized)
                {
                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x02))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == Zero))
                            {
                                KILL ()
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (KILL, 0, Serialized)
                {
                    HCON |= 0x02
                    HSTS |= 0xFF
                }
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000074
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E2
[00Ah 0010   6]                       Oem ID : "TOSCPL"
[010h 0016   8]                 Oem Table ID : "CALISTGA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005A

[024h 0036   4]                 FACS Address : 9F691FC0
[028h 0040   4]                 DSDT Address : 9F68A65C
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 00 [Unspecified]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : F0
[035h 0053   1]           ACPI Disable Value : F1
[036h 0054   1]               S4BIOS Command : F2
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00001000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001004
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001020
[04Ch 0076   4]       PM Timer Block Address : 00001008
[050h 0080   4]           GPE0 Block Address : 00001028
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 85
[060h 0096   2]                   C2 Latency : 0001
[062h 0098   2]                   C3 Latency : 0039
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000080A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

Raw Table Data: Length 116 (0x74)

  0000: 46 41 43 50 74 00 00 00 01 E2 54 4F 53 43 50 4C  // FACPt.....TOSCPL
  0010: 43 41 4C 49 53 54 47 41 00 00 04 06 4C 4F 48 52  // CALISTGA....LOHR
  0020: 5A 00 00 00 C0 1F 69 9F 5C A6 68 9F 00 00 09 00  // Z.....i.\.h.....
  0030: B2 00 00 00 F0 F1 F2 80 00 10 00 00 00 00 00 00  // ................
  0040: 04 10 00 00 00 00 00 00 20 10 00 00 08 10 00 00  // ........ .......
  0050: 28 10 00 00 00 00 00 00 04 02 01 04 08 00 00 85  // (...............
  0060: 01 00 39 00 00 00 00 00 01 00 0D 00 32 00 00 00  // ..9.........2...
  0070: A5 80 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 0000172E
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 00
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 2E 17 00 00 00 00 00 00  // FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 22
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CALISTGA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005A

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 22 49 4E 54 45 4C 20  // HPET8...."INTEL 
  0010: 43 41 4C 49 53 54 47 41 00 00 04 06 4C 4F 48 52  // CALISTGA....LOHR
  0020: 5A 00 00 00 01 A2 86 80 00 00 00 00 00 00 D0 FE  // Z...............
  0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4A
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CALISTGA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005A

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 4A 49 4E 54 45 4C 20  // MCFG<....JINTEL 
  0010: 43 41 4C 49 53 54 47 41 00 00 04 06 4C 4F 48 52  // CALISTGA....LOHR
  0020: 5A 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // Z...............
  0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000054
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 15
[00Ah 0010   6]                       Oem ID : "TOSCPL"
[010h 0016   8]                 Oem Table ID : "TOSCPL00"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]       ACPI Table Address   0 : 9F690C78
[028h 0040   4]       ACPI Table Address   1 : 9F690CEC
[02Ch 0044   4]       ACPI Table Address   2 : 9F690E62
[030h 0048   4]       ACPI Table Address   3 : 9F690ECA
[034h 0052   4]       ACPI Table Address   4 : 9F690F02
[038h 0056   4]       ACPI Table Address   5 : 9F690FD8
[03Ch 0060   4]       ACPI Table Address   6 : 9F690F70
[040h 0064   4]       ACPI Table Address   7 : 9F68A009
[044h 0068   4]       ACPI Table Address   8 : 9F689977
[048h 0072   4]       ACPI Table Address   9 : 9F688ED1
[04Ch 0076   4]       ACPI Table Address  10 : 9F688E2B
[050h 0080   4]       ACPI Table Address  11 : 9F688945

Raw Table Data: Length 84 (0x54)

  0000: 52 53 44 54 54 00 00 00 01 15 54 4F 53 43 50 4C  // RSDTT.....TOSCPL
  0010: 54 4F 53 43 50 4C 30 30 00 00 04 06 20 4C 54 50  // TOSCPL00.... LTP
  0020: 00 00 00 00 78 0C 69 9F EC 0C 69 9F 62 0E 69 9F  // ....x.i...i.b.i.
  0030: CA 0E 69 9F 02 0F 69 9F D8 0F 69 9F 70 0F 69 9F  // ..i...i...i.p.i.
  0040: 09 A0 68 9F 77 99 68 9F D1 8E 68 9F 2B 8E 68 9F  // ..h.w.h...h.+.h.
  0050: 45 89 68 9F                                      // E.h.


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AF
[00Ah 0010   6]                       Oem ID : "TOSCPL"
[010h 0016   8]                 Oem Table ID : "TOSCPL00"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 01 D1 F8 E2 \
    2E 9E 56 65 20 B2 3C D6 8C A8 AB EE E9 1D D7 45 \
    EB 6B 72 AD 45 B9 29 86 AE AA 8C 53 39 F4 25 BE \
    B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60 A0 72 47 E6 \
    F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC 1A 6E AF D4 \
    7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90 F5 B0 34 F2 \
    03 C2 9A 7D DD E7 52 4C E8 63 04 6B 00 A7 B5 AB \
    C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A 56 9B D7 45 \
    81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5 01 00 00 00 \
    B6 00 00 00 00 00 02 00 54 4F 53 43 50 4C 54 4F \
    53 43 50 4C 30 30 57 49 4E 44 4F 57 53 20 00 00 \
    00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 29 0E 2B 8A 14 A9 04 6F D0 00 F9 E0 62 8F \
    77 E0 BB D5 CE 89 DA 72 5D 69 5D E7 CF 0E C6 83 \
    6B 38 5B 74 F6 E9 5C F2 B3 77 2B AD 5D 91 D5 92 \
    85 5A 1F E1 31 27 4F 22 7B 11 AC 97 CB 6A BD F5 \
    16 41 66 8D BF 1B 07 65 55 1D 9E 68 D4 B8 EF 8E \
    21 17 EB C5 AA 98 E9 23 33 1B 1B 95 7B 12 65 B3 \
    90 FE 54 4B 64 61 C4 35 D1 3A 51 AF A1 EF 2A FC \
    8F C9 9D F1 A8 FC C3 10 9F 06 AD 50 9E 7B EE 8A \
    9F 98 

Raw Table Data: Length 374 (0x176)

  0000: 53 4C 49 43 76 01 00 00 01 AF 54 4F 53 43 50 4C  // SLICv.....TOSCPL
  0010: 54 4F 53 43 50 4C 30 30 00 00 04 06 4C 4F 48 52  // TOSCPL00....LOHR
  0020: 00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
  0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
  0040: 01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE  // ......Ve .<.....
  0050: E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53  // ...E.kr.E.)....S
  0060: 39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60  // 9.%............`
  0070: A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC  // .rG....?`.......
  0080: 1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90  // .n..}.._ZQ.h..=.
  0090: F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B  // ..4....}..RL.c.k
  00A0: 00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A  // .....o5.z...O).j
  00B0: 56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5  // V..E..7..K.S[<..
  00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 43  // ............TOSC
  00D0: 50 4C 54 4F 53 43 50 4C 30 30 57 49 4E 44 4F 57  // PLTOSCPL00WINDOW
  00E0: 53 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // S ..............
  00F0: 00 00 00 00 00 00 29 0E 2B 8A 14 A9 04 6F D0 00  // ......).+....o..
  0100: F9 E0 62 8F 77 E0 BB D5 CE 89 DA 72 5D 69 5D E7  // ..b.w......r]i].
  0110: CF 0E C6 83 6B 38 5B 74 F6 E9 5C F2 B3 77 2B AD  // ....k8[t..\..w+.
  0120: 5D 91 D5 92 85 5A 1F E1 31 27 4F 22 7B 11 AC 97  // ]....Z..1'O"{...
  0130: CB 6A BD F5 16 41 66 8D BF 1B 07 65 55 1D 9E 68  // .j...Af....eU..h
  0140: D4 B8 EF 8E 21 17 EB C5 AA 98 E9 23 33 1B 1B 95  // ....!......#3...
  0150: 7B 12 65 B3 90 FE 54 4B 64 61 C4 35 D1 3A 51 AF  // {.e...TKda.5.:Q.
  0160: A1 EF 2A FC 8F C9 9D F1 A8 FC C3 10 9F 06 AD 50  // ..*............P
  0170: 9E 7B EE 8A 9F 98                                // .{....


SSDT1
-----
DefinitionBlock ("ssdt1.aml", "SSDT", 1, "SataRe", "SataPri", 0x00001000)
{
    /*
     * iASL Warning: There were 7 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (GDMA, MethodObj)    // Warning: Unresolved method, guessing 5 arguments
    External (GETF, MethodObj)    // Warning: Unresolved method, guessing 3 arguments
    External (PRIT, MethodObj)    // Warning: Unresolved method, guessing 1 arguments
    External (PSIT, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (SDT0, MethodObj)    // Warning: Unresolved method, guessing 2 arguments
    External (SDT1, MethodObj)    // Warning: Unresolved method, guessing 2 arguments
    External (SETT, MethodObj)    // Warning: Unresolved method, guessing 3 arguments

    External (_SB_.PCI0.SATA, DeviceObj)
    External (GETP, IntObj)
    External (GETT, IntObj)
    External (ICR0, UnknownObj)
    External (ICR1, UnknownObj)
    External (ICR3, UnknownObj)
    External (ICR5, UnknownObj)
    External (SDMA, IntObj)
    External (SETP, UnknownObj)
    External (SYNC, UnknownObj)

    Scope (\_SB.PCI0.SATA)
    {
        Device (PRID)
        {
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
            {
                Name (PBUF, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           /* .... */
                })
                CreateDWordField (PBUF, 0x00, PIO0)
                CreateDWordField (PBUF, 0x04, DMA0)
                CreateDWordField (PBUF, 0x08, PIO1)
                CreateDWordField (PBUF, 0x0C, DMA1)
                CreateDWordField (PBUF, 0x10, FLAG)
                PRIT = GETP /* External reference */
                PIO0
                If (If (((0x80 = (PRIT (0x90) & Zero)) == PIO1 = 
                    0x0384)) {} = (PRIT (0x4000) & Zero))
                    {
                        Else
                        {
                            PSIT = GETT /* External reference */
                            PIO1
                        }
                    } = GDMA ((SYNC & 0x01), (ICR3 & 0x01), (ICR0 & 
                                0x01), SDT0 ((ICR1 & 0x01), DMA0), If ((DMA0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SATA.PRID._GTM.PIO0 */
                        })
                Else
                {
                    PIO1 = 0xFFFFFFFF
                }

                Return (PBUF) /* \_SB_.PCI0.SATA.PRID._GTM.PBUF */ = GETF ((SYNC & 0x01), (SYNC & 0x02
                    ), PRIT (FLAG)) = GDMA ((SYNC & 0x02), (ICR3 & 0x02), (
                    ICR0 & 0x02), SDT1 ((ICR1 & 0x02), DMA1), If ((DMA1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SATA.PRID._GTM.PIO1 */
                        })
            }

            Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
            {
                CreateDWordField (Arg0, 0x00, PIO0)
                CreateDWordField (Arg0, 0x04, DMA0)
                CreateDWordField (Arg0, 0x08, PIO1)
                CreateDWordField (Arg0, 0x0C, DMA1)
                CreateDWordField (Arg0, 0x10, FLAG)
                If ((SizeOf (Arg1) == 0x0200))
                {
                    SDT0 = 0x00 = (PRIT (0xC0F0) & PRIT (SYNC &= 0x0E))
                    ICR0 &= 0x0E
                    ICR1 &= 0x0E
                    ICR3 &= 0x0E
                    ICR5 &= 0x0E
                    CreateWordField (Arg1, 0x62, W490)
                    CreateWordField (Arg1, 0x6A, W530)
                    CreateWordField (Arg1, 0x7E, W630)
                    CreateWordField (Arg1, 0x80, W640)
                    CreateWordField (Arg1, 0xB0, W880)
                    CreateWordField (Arg1, 0xBA, W930)
                    PRIT = (PRIT (0x8004) | PRIT (If (((FLAG & 0x02) && (
                        W490 & 0x0800)))
                            {
                                W640 = (PRIT (0x02) | PRIT (W530 = (PRIT (SETP) | PIO0) /* \_SB_.PCI0.SATA.PRID._STM.PIO0 */))
                            }))
                    If ((FLAG & 0x01))
                    {
                        SYNC |= 0x01
                        DMA0 = SDMA /* External reference */
                        SDT0 (If ((DMA0 < 0x1E))
                            {
                                ICR3 |= 0x01
                            }, If ((DMA0 < 0x3C))
                            {
                                ICR0 |= 0x01
                            })
                        ICR1 |= 0x01
                    }
                }

                If ((SizeOf (Arg2) == 0x0200))
                {
                    SYNC &= 0x0D = (PRIT (0xBF0F) & PRIT (PSIT = 0x00))
                    SDT1 = 0x00
                    ICR0 &= 0x0D
                    ICR1 &= 0x0D
                    ICR3 &= 0x0D
                    ICR5 &= 0x0D
                    CreateWordField (Arg2, 0x62, W491)
                    CreateWordField (Arg2, 0x6A, W531)
                    CreateWordField (Arg2, 0x7E, W631)
                    CreateWordField (Arg2, 0x80, W641)
                    CreateWordField (Arg2, 0xB0, W881)
                    CreateWordField (Arg2, 0xBA, W931)
                    Or (PRIT (0x8040) | PRIT (If (((FLAG & 0x08) && (W491 & 
                        0x0800)))
                            {
                                Or (PRIT (0x20) | PRIT (If ((FLAG & 0x10))
                                        {
                                            Or (PRIT (0x4000) | PRIT (If ((PIO1 > 0xF0))
                                                    {
                                                        Or (PRIT (0x80) | PRIT (Else
                                                                {
                                                                    If ((FLAG & 0x04))
                                                                        {
                                                                            SYNC |= 0x02
                                                                            DMA1 = SDMA /* External reference */
                                                                            SDT1 (If ((DMA1 < 0x1E))
                                                                                {
                                                                                    ICR3 |= 0x02
                                                                                }, If ((DMA1 < 0x3C))
                                                                                {
                                                                                    ICR0 |= 0x02
                                                                                })
                                                                            ICR1 |= 0x02
                                                                        } = (PRIT (0x10) | PRIT (PSIT = SETT (PIO1, W531, W641)))
                                                                }))
                                                    }))
                                        }))
                            }))
                }
            }

            Device (P_D0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Name (PIB0, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  /* ........ */
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               /* ...... */
                    })
                    CreateByteField (PIB0, 0x01, PMD0)
                    CreateByteField (PIB0, 0x08, DMD0)
                    If (If (((0x08 = (PRIT (0x09) & Zero)) == PMD0 = 0x08)) {} = (
                        PRIT (0x02) & Zero))
                    {
                        Else
                        {
                            PMD0 = 0x0A
                            ((Local2 = (Local0 + Local1)) = ((0x0C = (PRIT (0x3000) & Zero)) >> Local1)) = (
                                (0x08 = (PRIT (0x0300) & Zero)) >> Local0)
                            If ((0x03 == Local2))
                            {
                                PMD0 = 0x0B
                            }

                            If ((0x05 == Local2))
                            {
                                PMD0 = 0x0C
                            }
                        }
                    }
                    Else
                    {
                        PMD0 = 0x01
                    }

                    If ((SYNC & 0x01))
                    {
                        Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            } = If (
                                    (ICR1 & 0x01))
                                {
                                    If ((ICR0 & 0x01))
                                    {
                                        DMD0 += 0x02
                                    }

                                    If ((ICR3 & 0x01))
                                    {
                                        DMD0 = 0x45
                                    }
                                } = (SDT0 (0x40, Zero) | DMD0) /* \_SB_.PCI0.SATA.PRID.P_D0._GTF.DMD0 */
                    }

                    Return (PIB0) /* \_SB_.PCI0.SATA.PRID.P_D0._GTF.PIB0 */
                }
            }

            Device (P_D1)
            {
                Name (_ADR, 0x01)  // _ADR: Address
                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Name (PIB1, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  /* ........ */
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               /* ...... */
                    })
                    CreateByteField (PIB1, 0x01, PMD1)
                    CreateByteField (PIB1, 0x08, DMD1)
                    If (If (((0x80 = (PRIT (0x90) & Zero)) == PMD1 = 0x08)) {} = (
                        PRIT (0x20) & Zero))
                    {
                        Else
                        {
                            Local0 = ((PSIT () & 0x03) + ((PSIT () & 0x0C) >> 0x02
                                ))
                            If ((0x05 == Local0))
                            {
                                PMD1 = 0x0C
                            }
                            Else
                            {
                                If ((0x03 == Local0))
                                {
                                    PMD1 = 0x0B
                                }
                                Else
                                {
                                    PMD1 = 0x0A
                                }
                            }
                        }
                    }
                    Else
                    {
                        PMD1 = 0x01
                    }

                    If ((SYNC & 0x02))
                    {
                        Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            } = If (
                                    (ICR1 & 0x02))
                                {
                                    If ((ICR0 & 0x02))
                                    {
                                        DMD1 += 0x02
                                    }

                                    If ((ICR3 & 0x02))
                                    {
                                        DMD1 = 0x45
                                    }
                                } = (SDT1 (0x40, Zero) | DMD1) /* \_SB_.PCI0.SATA.PRID.P_D1._GTF.DMD1 */
                    }

                    Return (PIB1) /* \_SB_.PCI0.SATA.PRID.P_D1._GTF.PIB1 */
                }
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("ssdt2.aml", "SSDT", 1, "SataRe", "SataSec", 0x00001000)
{
    /*
     * iASL Warning: There were 7 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (GDMA, MethodObj)    // Warning: Unresolved method, guessing 5 arguments
    External (GETF, MethodObj)    // Warning: Unresolved method, guessing 3 arguments
    External (SDT2, MethodObj)    // Warning: Unresolved method, guessing 2 arguments
    External (SDT3, MethodObj)    // Warning: Unresolved method, guessing 2 arguments
    External (SECT, MethodObj)    // Warning: Unresolved method, guessing 1 arguments
    External (SETT, MethodObj)    // Warning: Unresolved method, guessing 3 arguments
    External (SSIT, MethodObj)    // Warning: Unresolved method, guessing 0 arguments

    External (_SB_.PCI0.SATA, DeviceObj)
    External (GETP, IntObj)
    External (GETT, IntObj)
    External (ICR0, UnknownObj)
    External (ICR1, UnknownObj)
    External (ICR3, UnknownObj)
    External (ICR5, UnknownObj)
    External (SDMA, IntObj)
    External (SETP, UnknownObj)
    External (SYNC, UnknownObj)

    Scope (\_SB.PCI0.SATA)
    {
        Device (SECD)
        {
            Name (_ADR, 0x01)  // _ADR: Address
            Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
            {
                Name (SBUF, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           /* .... */
                })
                CreateDWordField (SBUF, 0x00, PIO0)
                CreateDWordField (SBUF, 0x04, DMA0)
                CreateDWordField (SBUF, 0x08, PIO1)
                CreateDWordField (SBUF, 0x0C, DMA1)
                CreateDWordField (SBUF, 0x10, FLAG)
                SECT = GETP /* External reference */
                PIO0
                If (If (((0x80 = (SECT (0x90) & Zero)) == PIO1 = 
                    0x0384)) {} = (SECT (0x4000) & Zero))
                    {
                        Else
                        {
                            SSIT = GETT /* External reference */
                            PIO1
                        }
                    } = GDMA ((SYNC & 0x04), (ICR3 & 0x04), (ICR0 & 
                                0x04), SDT2 ((ICR1 & 0x04), DMA0), If ((DMA0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SATA.SECD._GTM.PIO0 */
                        })
                Else
                {
                    PIO1 = 0xFFFFFFFF
                }

                If (((PIO0 == 0xFFFFFFFF) & (DMA0 == 0xFFFFFFFF)))
                        {
                            PIO0 = 0x78
                            DMA0 = 0x14
                            FLAG = 0x03
                        } = GETF ((SYNC & 0x04), (SYNC & 0x08), 
                                SECT (FLAG)) = GDMA ((SYNC & 0x08), (ICR3 & 0x08), (ICR0 & 
                                0x08), SDT3 ((ICR1 & 0x08), DMA1), If ((DMA1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SATA.SECD._GTM.PIO1 */
                        })
                Return (SBUF) /* \_SB_.PCI0.SATA.SECD._GTM.SBUF */
            }

            Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
            {
                CreateDWordField (Arg0, 0x00, PIO0)
                CreateDWordField (Arg0, 0x04, DMA0)
                CreateDWordField (Arg0, 0x08, PIO1)
                CreateDWordField (Arg0, 0x0C, DMA1)
                CreateDWordField (Arg0, 0x10, FLAG)
                If ((SizeOf (Arg1) == 0x0200))
                {
                    SDT2 = 0x00 = (SECT (0xC0F0) & SECT (SYNC &= 0x0B))
                    ICR0 &= 0x0B
                    ICR1 &= 0x0B
                    ICR3 &= 0x0B
                    ICR5 &= 0x0B
                    CreateWordField (Arg1, 0x62, W490)
                    CreateWordField (Arg1, 0x6A, W530)
                    CreateWordField (Arg1, 0x7E, W630)
                    CreateWordField (Arg1, 0x80, W640)
                    CreateWordField (Arg1, 0xB0, W880)
                    CreateWordField (Arg1, 0xBA, W930)
                    SECT = (SECT (0x8004) | SECT (If (((FLAG & 0x02) && (
                        W490 & 0x0800)))
                            {
                                W640 = (SECT (0x02) | SECT (W530 = (SECT (SETP) | PIO0) /* \_SB_.PCI0.SATA.SECD._STM.PIO0 */))
                            }))
                    If ((FLAG & 0x01))
                    {
                        SYNC |= 0x04
                        DMA0 = SDMA /* External reference */
                        SDT2 (If ((DMA0 < 0x1E))
                            {
                                ICR3 |= 0x04
                            }, If ((DMA0 < 0x3C))
                            {
                                ICR0 |= 0x04
                            })
                        If ((W930 & 0x2000))
                        {
                            ICR1 |= 0x04
                        }
                    }
                }

                If ((SizeOf (Arg2) == 0x0200))
                {
                    SYNC &= 0x07 = (SECT (0xBF0F) & SECT (SSIT = 0x00))
                    SDT3 = 0x00
                    ICR0 &= 0x07
                    ICR1 &= 0x07
                    ICR3 &= 0x07
                    ICR5 &= 0x07
                    CreateWordField (Arg2, 0x62, W491)
                    CreateWordField (Arg2, 0x6A, W531)
                    CreateWordField (Arg2, 0x7E, W631)
                    CreateWordField (Arg2, 0x80, W641)
                    CreateWordField (Arg2, 0xB0, W881)
                    CreateWordField (Arg2, 0xBA, W931)
                    Or (SECT (0x8040) | SECT (If (((FLAG & 0x08) && (W491 & 
                        0x0800)))
                            {
                                Or (SECT (0x20) | SECT (If ((FLAG & 0x10))
                                        {
                                            Or (SECT (0x4000) | SECT (If ((PIO1 > 0xF0))
                                                    {
                                                        Or (SECT (0x80) | SECT (Else
                                                                {
                                                                    If ((FLAG & 0x04))
                                                                        {
                                                                            SYNC |= 0x08
                                                                            DMA1 = SDMA /* External reference */
                                                                            SDT3 (If ((DMA1 < 0x1E))
                                                                                {
                                                                                    ICR3 |= 0x08
                                                                                }, If ((DMA1 < 0x3C))
                                                                                {
                                                                                    ICR0 |= 0x08
                                                                                })
                                                                            If ((W931 & 0x2000))
                                                                            {
                                                                                ICR1 |= 0x08
                                                                            }
                                                                        } = (SECT (0x10) | SECT (SSIT = SETT (PIO1, W531, W641)))
                                                                }))
                                                    }))
                                        }))
                            }))
                }
            }

            Device (S_D0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Name (SIB0, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  /* ........ */
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               /* ...... */
                    })
                    CreateByteField (SIB0, 0x01, PMD0)
                    CreateByteField (SIB0, 0x08, DMD0)
                    If (If (((0x08 = (SECT (0x09) & Zero)) == PMD0 = 0x08)) {} = (
                        SECT (0x02) & Zero))
                    {
                        Else
                        {
                            PMD0 = 0x0A
                            ((Local2 = (Local0 + Local1)) = ((0x0C = (SECT (0x3000) & Zero)) >> Local1)) = (
                                (0x08 = (SECT (0x0300) & Zero)) >> Local0)
                            If ((0x03 == Local2))
                            {
                                PMD0 = 0x0B
                            }

                            If ((0x05 == Local2))
                            {
                                PMD0 = 0x0C
                            }
                        }
                    }
                    Else
                    {
                        PMD0 = 0x01
                    }

                    If ((SYNC & 0x04))
                    {
                        Else
                            {
                                DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                            } = If (
                                    (ICR1 & 0x04))
                                {
                                    If ((ICR0 & 0x04))
                                    {
                                        DMD0 += 0x02
                                    }

                                    If ((ICR3 & 0x04))
                                    {
                                        DMD0 = 0x45
                                    }
                                } = (SDT2 (0x40, Zero) | DMD0) /* \_SB_.PCI0.SATA.SECD.S_D0._GTF.DMD0 */
                    }

                    Return (SIB0) /* \_SB_.PCI0.SATA.SECD.S_D0._GTF.SIB0 */
                }
            }

            Device (S_D1)
            {
                Name (_ADR, 0x01)  // _ADR: Address
                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Name (SIB1, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  /* ........ */
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               /* ...... */
                    })
                    CreateByteField (SIB1, 0x01, PMD1)
                    CreateByteField (SIB1, 0x08, DMD1)
                    If (If (((0x80 = (SECT (0x90) & Zero)) == PMD1 = 0x08)) {} = (
                        SECT (0x20) & Zero))
                    {
                        Else
                        {
                            Local0 = ((SSIT () & 0x03) + ((SSIT () & 0x0C) >> 0x02
                                ))
                            If ((0x05 == Local0))
                            {
                                PMD1 = 0x0C
                            }
                            Else
                            {
                                If ((0x03 == Local0))
                                {
                                    PMD1 = 0x0B
                                }
                                Else
                                {
                                    PMD1 = 0x0A
                                }
                            }
                        }
                    }
                    Else
                    {
                        PMD1 = 0x01
                    }

                    If ((SYNC & 0x08))
                    {
                        Else
                            {
                                DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                            } = If (
                                    (ICR1 & 0x08))
                                {
                                    If ((ICR0 & 0x08))
                                    {
                                        DMD1 += 0x02
                                    }

                                    If ((ICR3 & 0x08))
                                    {
                                        DMD1 = 0x45
                                    }
                                } = (SDT3 (0x40, Zero) | DMD1) /* \_SB_.PCI0.SATA.SECD.S_D1._GTF.DMD1 */
                    }

                    Return (SIB1) /* \_SB_.PCI0.SATA.SECD.S_D1._GTF.SIB1 */
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("ssdt3.aml", "SSDT", 1, "PmRef", "Cpu0Tst", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (_PSS, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDC0 & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000001010, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x04,               // Bit Width
                        0x01,               // Bit Offset
                        0x0000000000001010, // Address
                        ,)
                }
            })
        }

        Name (TSSI, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                0x00, 
                0x0F, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                0x00, 
                0x0E, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                0x00, 
                0x0D, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                0x00, 
                0x0C, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                0x00, 
                0x0B, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                0x00, 
                0x0A, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                0x00, 
                0x09, 
                0x00
            }
        })
        Name (TSSM, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                0x00, 
                0x00, 
                0x00
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                0x00, 
                0x1E, 
                0x00
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                0x00, 
                0x1C, 
                0x00
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                0x00, 
                0x1A, 
                0x00
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                0x00, 
                0x18, 
                0x00
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                0x00, 
                0x16, 
                0x00
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                0x00, 
                0x14, 
                0x00
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                0x00, 
                0x12, 
                0x00
            }
        })
        Name (TSSF, 0x00)
        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If ((!TSSF && CondRefOf (_PSS)))
            {
                Local0 = _PSS /* External reference */
                Local1 = SizeOf (Local0)
                Local1--
                Local2 = DerefOf (Index (DerefOf (Index (Local0, Local1)), 0x01))
                Local3 = 0x00
                While ((Local3 < SizeOf (TSSI)))
                {
                    Local4 = ((Local2 * (0x08 - Local3)) / 0x08)
                    Index (DerefOf (Index (TSSI, Local3)), 0x01) = Local4
                    Index (DerefOf (Index (TSSM, Local3)), 0x01) = Local4
                    Local3++
                }

                TSSF = Ones
            }

            If ((PDC0 & 0x04))
            {
                Return (TSSM) /* \_PR_.CPU0.TSSM */
            }

            Return (TSSI) /* \_PR_.CPU0.TSSI */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT4
-----
DefinitionBlock ("ssdt4.aml", "SSDT", 1, "PmRef", "Cpu1Tst", 0x00003000)
{

    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Name (_TPC, 0x00)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x04)))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFD, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x01, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("ssdt5.aml", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (PCP0, UnknownObj)
    External (PCP1, UnknownObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x9F689677, 
            0x00000238, 
            "CPU1IST ", 
            0x9F6898AF, 
            0x000000C8, 
            "CPU0CST ", 
            0x9F689130, 
            0x000004C2, 
            "CPU1CST ", 
            0x9F6895F2, 
            0x00000085
        })
        Name (CFGD, 0x113369F1)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\SDTL, 0x00)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, 0x00)
        Name (HC0, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Concatenate (STS0, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, 0x00, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0._OSC.CAP0 */
            PCP0 = (PDC0 & 0xFF)
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & 0x01)))
                {
                    SDTL |= 0x01
                    OperationRegion (IST0, SystemMemory, DerefOf (Index (SSDT, 0x01)), DerefOf (Index (SSDT, 0x02)))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (Index (SSDT, 0x07)), DerefOf (Index (SSDT, 0x08)))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Arg3)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, 0x00)
        Name (HC1, 0x00)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            CreateDWordField (Arg0, 0x00, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS1, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Concatenate (STS1, TEMP, Local2)
            _OSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, 0x00, STS1)
            CreateDWordField (Arg3, 0x04, CAP1)
            CreateDWordField (Arg0, 0x00, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID1, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID1, 0x00, EID0)
            CreateDWordField (UID1, 0x04, EID1)
            CreateDWordField (UID1, 0x08, EID2)
            CreateDWordField (UID1, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS1 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != 0x01))
            {
                STS1 = 0x0A
                Return (Arg3)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1._OSC.CAP1 */
            PCP1 = (PDC1 & 0xFF)
            If ((CFGD & 0x01))
            {
                If ((((CFGD & 0x01000000) && ((PDC1 & 0x09) == 
                    0x09)) && !(SDTL & 0x10)))
                {
                    SDTL |= 0x10
                    OperationRegion (IST1, SystemMemory, DerefOf (Index (SSDT, 0x04)), DerefOf (Index (SSDT, 0x05)))
                    Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC1 & 0x18)) && !
                    (SDTL & 0x20)))
                {
                    SDTL |= 0x20
                    OperationRegion (CST1, SystemMemory, DerefOf (Index (SSDT, 0x0A)), DerefOf (Index (SSDT, 0x0B)))
                    Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
                }
            }

            Return (Arg3)
        }
    }
}



SSDT6
-----
DefinitionBlock ("ssdt6.aml", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & 0x01) && (PDC0 & 0x01)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B2, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & 0x01))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x04)
        {
            Package (0x06)
            {
                0x00000640, 
                0x00007918, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x000061A8, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x0000042B, 
                0x00004A38, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000032C8, 
                0x0000006E, 
                0x0000000A, 
                0x00000383, 
                0x00000003
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000640, 
                0x00007918, 
                0x0000000A, 
                0x0000000A, 
                0x00000C25, 
                0x00000C25
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x000061A8, 
                0x0000000A, 
                0x0000000A, 
                0x00000A1F, 
                0x00000A1F
            }, 

            Package (0x06)
            {
                0x0000042B, 
                0x00004A38, 
                0x0000000A, 
                0x0000000A, 
                0x00000819, 
                0x00000819
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000032C8, 
                0x0000000A, 
                0x0000000A, 
                0x00000613, 
                0x00000613
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((CFGD & 0x01000000))
            {
                If ((PDC0 & 0x0800))
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            0x05, 
                            0x00, 
                            0x00, 
                            0xFE, 
                            0x02
                        }
                    })
                }

                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFC, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x01
                }
            })
        }
    }
}



SSDT7
-----
DefinitionBlock ("ssdt7.aml", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{

    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC0 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If ((CFGD & 0x80))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000030, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x39, 
                            0x64
                        }
                    })
                }

                If ((!(CFGD & 0x80) && (CFGD & 0x40)))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0x11, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If ((CFGD & 0x80))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001016, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x39, 
                            0x64
                        }
                    })
                }

                If ((!(CFGD & 0x80) && (CFGD & 0x40)))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001015, // Address
                                    ,)
                            }, 

                            0x03, 
                            0x11, 
                            0xFA
                        }
                    })
                }

                If ((CFGD & 0x20))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            0x01, 
                            0x01, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000001014, // Address
                                    ,)
                            }, 

                            0x02, 
                            0x01, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x80) && !PWRS))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001016, // Address
                                ,)
                        }, 

                        0x03, 
                        0x39, 
                        0x64
                    }
                })
            }

            If (((!(CFGD & 0x80) && (CFGD & 0x40)) && 
                !PWRS))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01, 
                        0x01F4
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001015, // Address
                                ,)
                        }, 

                        0x03, 
                        0x11, 
                        0xFA
                    }
                })
            }

            If ((CFGD & 0x20))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x01, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001014, // Address
                                ,)
                        }, 

                        0x02, 
                        0x01, 
                        0x01F4
                    }
                })
            }

            Return (Package (0x02)
            {
                0x01, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    0x01, 
                    0x01, 
                    0x03E8
                }
            })
        }
    }
}



SSDT8
-----
DefinitionBlock ("ssdt8.aml", "SSDT", 1, "PmRef", "Cpu1Ist", 0x00003000)
{

    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((PDC1 & 0x0800))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        0x00, 
                        0x00, 
                        0xFE, 
                        0x02
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    0x00, 
                    0x00, 
                    0xFC, 
                    0x02
                }
            })
        }
    }
}



SSDT9
-----
DefinitionBlock ("ssdt9.aml", "SSDT", 1, "PmRef", "Cpu1Cst", 0x00003000)
{

    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC1, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x01000000) && !(PDC1 & 0x10)))
            {
                Return (Package (0x02)
                {
                    0x01, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        0x01, 
                        0x9D, 
                        0x03E8
                    }
                })
            }

            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



