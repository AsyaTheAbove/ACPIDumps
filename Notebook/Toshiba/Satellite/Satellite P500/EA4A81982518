
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20190509
Copyright (c) 2000 - 2019 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000009F1  0x01  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20060912
 02)  MCFG  0x0000003C  0x01  "INTEL "  "CALPELLA"  0x06040000  "PTEC"   0x00000001
 03)  APIC  0x000000BC  0x01  "PTLTD "  "  APIC  "  0x06040000  " LTP"   0x00000000
 04)  SLIC  0x00000176  0x01  "TOSQCI"  "TOSQCI00"  0x06040000  " LTP"   0x00000000
 05)  BOOT  0x00000028  0x01  "PTLTD "  "$SBFTBL$"  0x06040000  " LTP"   0x00000001
 06)  DSDT  0x00010579  0x02  "TOSQCI"  "CALPELLA"  0x06040000  "INTL"   0x20060912
 07)  DMAR  0x00000068  0x01  "INTEL "  "CP_FIELD"  0x00000001  "INTL"   0x00000001
 08)  FACP  0x000000F4  0x03  "INTEL "  "CALPELLA"  0x06040000  "PTEC"   0x00000001
 09)  HPET  0x00000038  0x01  "INTEL "  "CALPELLA"  0x06040000  "PTEC"   0x00000001
 10)  FACS  0x00000040  0x01
 11)  SSDT  0x00000303  0x01  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20060912
 12)  SSDT  0x000002E8  0x01  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20060912
 13)  SSDT  0x00000119  0x01  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20060912
 14)  SSDT  0x00000891  0x01  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20060912

Found 14 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 000000BC
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D2
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "  APIC  "
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 06
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 01
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 03
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 05
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 01 [I/O APIC]
[06Dh 0109   1]                       Length : 0C
[06Eh 0110   1]                  I/O Apic ID : 08
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]                      Address : FEC00000
[074h 0116   4]                    Interrupt : 00000000

[078h 0120   1]                Subtable Type : 04 [Local APIC NMI]
[079h 0121   1]                       Length : 06
[07Ah 0122   1]                 Processor ID : 00
[07Bh 0123   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[07Dh 0125   1]         Interrupt Input LINT : 01

[07Eh 0126   1]                Subtable Type : 04 [Local APIC NMI]
[07Fh 0127   1]                       Length : 06
[080h 0128   1]                 Processor ID : 01
[081h 0129   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[083h 0131   1]         Interrupt Input LINT : 01

[084h 0132   1]                Subtable Type : 04 [Local APIC NMI]
[085h 0133   1]                       Length : 06
[086h 0134   1]                 Processor ID : 02
[087h 0135   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[089h 0137   1]         Interrupt Input LINT : 01

[08Ah 0138   1]                Subtable Type : 04 [Local APIC NMI]
[08Bh 0139   1]                       Length : 06
[08Ch 0140   1]                 Processor ID : 03
[08Dh 0141   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[08Fh 0143   1]         Interrupt Input LINT : 01

[090h 0144   1]                Subtable Type : 04 [Local APIC NMI]
[091h 0145   1]                       Length : 06
[092h 0146   1]                 Processor ID : 04
[093h 0147   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[095h 0149   1]         Interrupt Input LINT : 01

[096h 0150   1]                Subtable Type : 04 [Local APIC NMI]
[097h 0151   1]                       Length : 06
[098h 0152   1]                 Processor ID : 05
[099h 0153   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[09Bh 0155   1]         Interrupt Input LINT : 01

[09Ch 0156   1]                Subtable Type : 04 [Local APIC NMI]
[09Dh 0157   1]                       Length : 06
[09Eh 0158   1]                 Processor ID : 06
[09Fh 0159   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A1h 0161   1]         Interrupt Input LINT : 01

[0A2h 0162   1]                Subtable Type : 04 [Local APIC NMI]
[0A3h 0163   1]                       Length : 06
[0A4h 0164   1]                 Processor ID : 07
[0A5h 0165   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A7h 0167   1]         Interrupt Input LINT : 01

[0A8h 0168   1]                Subtable Type : 02 [Interrupt Source Override]
[0A9h 0169   1]                       Length : 0A
[0AAh 0170   1]                          Bus : 00
[0ABh 0171   1]                       Source : 00
[0ACh 0172   4]                    Interrupt : 00000002
[0B0h 0176   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1

[0B2h 0178   1]                Subtable Type : 02 [Interrupt Source Override]
[0B3h 0179   1]                       Length : 0A
[0B4h 0180   1]                          Bus : 00
[0B5h 0181   1]                       Source : 09
[0B6h 0182   4]                    Interrupt : 00000009
[0BAh 0186   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 188 (0xBC)

    0000: 41 50 49 43 BC 00 00 00 01 D2 50 54 4C 54 44 20  // APIC......PTLTD 
    0010: 09 20 41 50 49 43 20 20 00 00 04 06 20 4C 54 50  // . APIC  .... LTP
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 02 01 00 00 00 00 08 02 04  // ................
    0040: 01 00 00 00 00 08 03 06 01 00 00 00 00 08 04 01  // ................
    0050: 01 00 00 00 00 08 05 03 01 00 00 00 00 08 06 05  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 01 0C 08 00  // ................
    0070: 00 00 C0 FE 00 00 00 00 04 06 00 05 00 01 04 06  // ................
    0080: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  // ................
    0090: 04 06 04 05 00 01 04 06 05 05 00 01 04 06 06 05  // ................
    00A0: 00 01 04 06 07 05 00 01 02 0A 00 00 02 00 00 00  // ................
    00B0: 05 00 02 0A 00 09 09 00 00 00 0D 00              // ............


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : A5
[00Ah 0010   6]                       Oem ID : "PTLTD "
[010h 0016   8]                 Oem Table ID : "$SBFTBL$"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]          Boot Register Index : 36
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 A5 50 54 4C 54 44 20  // BOOT(.....PTLTD 
    0010: 24 53 42 46 54 42 4C 24 00 00 04 06 20 4C 54 50  // $SBFTBL$.... LTP
    0020: 01 00 00 00 36 00 00 00                          // ....6...


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 00000068
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : FA
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CP_FIELD"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]           Host Address Width : 23
[025h 0037   1]                        Flags : 00
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0010

[034h 0052   1]                        Flags : 01
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FED90000

[040h 0064   2]                Subtable Type : 0001 [Reserved Memory Region]
[042h 0066   2]                       Length : 0028

[044h 0068   2]                     Reserved : 0000
[046h 0070   2]           PCI Segment Number : 0000
[048h 0072   8]                 Base Address : 00000000BBEE9000
[050h 0080   8]          End Address (limit) : 00000000BBEFEFFF

[058h 0088   1]            Device Scope Type : 01 [PCI Endpoint Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 00
[05Dh 0093   1]               PCI Bus Number : 00

[05Eh 0094   2]                     PCI Path : 1A,00


[060h 0096   1]            Device Scope Type : 01 [PCI Endpoint Device]
[061h 0097   1]                 Entry Length : 08
[062h 0098   2]                     Reserved : 0000
[064h 0100   1]               Enumeration ID : 00
[065h 0101   1]               PCI Bus Number : 00

[066h 0102   2]                     PCI Path : 1D,00


Raw Table Data: Length 104 (0x68)

    0000: 44 4D 41 52 68 00 00 00 01 FA 49 4E 54 45 4C 20  // DMARh.....INTEL 
    0010: 43 50 5F 46 49 45 4C 44 01 00 00 00 49 4E 54 4C  // CP_FIELD....INTL
    0020: 01 00 00 00 23 00 00 00 00 00 00 00 00 00 00 00  // ....#...........
    0030: 00 00 10 00 01 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 00 28 00 00 00 00 00 00 90 EE BB 00 00 00 00  // ..(.............
    0050: FF EF EF BB 00 00 00 00 01 08 00 00 00 00 1A 00  // ................
    0060: 01 08 00 00 00 00 1D 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "TOSQCI", "CALPELLA", 0x06040000)
{
    /*
     * iASL Warning: There were 5 external control methods found during
     * disassembly, but only 0 were resolved (5 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CPU0._PPC, UnknownObj)
    External (_SB_.PCI0.IEIT.EITV, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (CFGD, UnknownObj)
    External (ECST, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (FPED, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (GP52, UnknownObj)
    External (IDAB, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (NNAB, IntObj)
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)
    External (TNOT, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Name (SP2O, 0x4E)
    Name (SP1O, 0x164E)
    Name (IO1B, 0x0600)
    Name (IO1L, 0x70)
    Name (IO2B, 0x0680)
    Name (IO2L, 0x20)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP3O, 0x2E)
    Name (IO4B, 0x0A20)
    Name (IO4L, 0x20)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x4000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (IFPB, 0xFED14000)
    Name (IFPL, 0x1000)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (TTTB, 0xFED20000)
    Name (TTTL, 0x00020000)
    Name (SMBS, 0xEFA0)
    Name (PBLK, 0x0410)
    Name (PMBS, 0x0400)
    Name (PMLN, 0x80)
    Name (LVL2, 0x0414)
    Name (LVL3, 0x0415)
    Name (LVL4, 0x0416)
    Name (SMIP, 0xB2)
    Name (GPBS, 0x1180)
    Name (GPLN, 0x80)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PM30, 0x0430)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1F404)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, Zero)
    Name (SHPC, One)
    Name (PEPM, Zero)
    Name (PEER, Zero)
    Name (PECS, Zero)
    Name (ITKE, Zero)
    Name (DSSP, Zero)
    Name (FHPP, One)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (BRF, One)
    Name (BPH, 0x02)
    Name (BLC, 0x03)
    Name (BRFS, 0x04)
    Name (BPHS, 0x05)
    Name (BLCT, 0x06)
    Name (BRF4, 0x07)
    Name (BEP, 0x08)
    Name (BBF, 0x09)
    Name (BOF, 0x0A)
    Name (BPT, 0x0B)
    Name (SRAF, 0x0C)
    Name (WWP, 0x0D)
    Name (SDOE, 0x0E)
    Name (TRTP, One)
    Name (TRTD, 0x02)
    Name (TRTI, 0x03)
    Name (GCDD, One)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x0C)
    Name (DSLC, 0x0E)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (SOOT, 0x35)
    Name (PDBR, 0x4D)
    Name (SMBL, 0x10)
    Name (ECOK, Zero)
    OperationRegion (GNVS, SystemMemory, 0xBBF9B8F4, 0x0200)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x28), 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        Offset (0x32), 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        KSV0,   32, 
        KSV1,   8, 
        Offset (0x67), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        Offset (0x6E), 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x74), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x78), 
        Offset (0x82), 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        BID,    8, 
        Offset (0xAA), 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        I409,   8, 
        I509,   8, 
        I609,   8, 
        I709,   8, 
        IPCF,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        Offset (0xE1), 
        OSCC,   8, 
        NEXP,   8, 
        SDGV,   8, 
        SDDV,   8, 
        Offset (0xEB), 
        DSEN,   8, 
        ECON,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        Offset (0x100), 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        EBAS,   32, 
        CPSP,   32, 
        EECP,   32, 
        EVCP,   32, 
        XBAS,   32, 
        OBS1,   32, 
        OBS2,   32, 
        OBS3,   32, 
        OBS4,   32, 
        OBS5,   32, 
        OBS6,   32, 
        OBS7,   32, 
        OBS8,   32, 
        Offset (0x15B), 
        PNHM,   32, 
        TBAB,   32, 
        TBAH,   32, 
        IPSE,   8, 
        Offset (0x16B), 
        PFLV,   8, 
        BREV,   8, 
        DPBM,   8, 
        DPCM,   8, 
        DPDM,   8, 
        ALFP,   8, 
        KBBT,   8, 
        KBBF,   8
    }

    Scope (_SB)
    {
        Device (QWMI)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (PHSR, 2, NotSerialized)
            {
                Acquire (PSMX, 0xFFFF)
                BCMD = 0x91
                DID = Arg0
                INF = Arg1
                SMIC = Zero
                Local0 = DID /* \_SB_.DID_ */
                Release (PSMX)
                Return (Local0)
            }

            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0x69, 0xA4, 0x2B, 0xC6, 0x2C, 0x69, 0x4C, 0x4A,  // i.+.,iLJ
                /* 0008 */  0x98, 0x69, 0x31, 0xB8, 0x3E, 0x0C, 0x76, 0x71,  // .i1.>.vq
                /* 0010 */  0x41, 0x41, 0x01, 0x00, 0x76, 0xF0, 0x58, 0x15,  // AA..v.X.
                /* 0018 */  0x69, 0x3C, 0xDB, 0x4C, 0x80, 0xA5, 0xD2, 0xF3,  // i<.L....
                /* 0020 */  0x9C, 0x62, 0x94, 0x9B, 0x41, 0x42, 0x01, 0x00,  // .b..AB..
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x42, 0x41, 0x01, 0x00                           // BA..
            })
            Name (FCOD, Zero)
            Name (RCOD, Zero)
            Name (SFAI, Zero)
            Name (SFLG, Zero)
            Name (UFAI, Zero)
            Name (UFLG, Zero)
            Name (VERB, Buffer (0x0201)
            {
                 0x00                                             // .
            })
            CreateField (VERB, Zero, 0x08, QMJV)
            CreateField (VERB, 0x08, 0x08, QMNV)
            Name (FBUF, Buffer (0x0201)
            {
                 0x00                                             // .
            })
            CreateField (FBUF, Zero, 0x08, F000)
            CreateField (FBUF, 0x08, 0x08, F001)
            Name (RBUF, Buffer (0x0201)
            {
                 0x00                                             // .
            })
            Name (QBUF, Buffer (0x0201)
            {
                 0x00                                             // .
            })
            CreateField (QBUF, Zero, 0x08, Q000)
            CreateField (QBUF, 0x08, 0x08, Q001)
            CreateField (QBUF, 0x10, 0x08, Q002)
            CreateField (QBUF, 0x18, 0x08, Q003)
            CreateField (QBUF, 0x20, 0x08, Q004)
            CreateField (QBUF, 0x28, 0x08, Q005)
            CreateField (QBUF, 0x30, 0x08, Q006)
            CreateField (QBUF, 0x38, 0x08, Q007)
            CreateField (QBUF, 0x40, 0x08, Q008)
            CreateField (QBUF, 0x48, 0x08, Q009)
            CreateField (QBUF, 0x50, 0x08, Q010)
            CreateField (QBUF, 0x58, 0x08, Q011)
            CreateField (QBUF, 0x60, 0x08, Q012)
            CreateField (QBUF, 0x68, 0x08, Q013)
            CreateField (QBUF, 0x70, 0x08, Q014)
            CreateField (QBUF, 0x78, 0x08, Q015)
            CreateField (QBUF, 0x80, 0x08, Q016)
            CreateField (QBUF, 0x88, 0x08, Q017)
            CreateField (QBUF, 0x90, 0x08, Q018)
            CreateField (QBUF, Zero, 0xA0, QL20)
            CreateField (QBUF, Zero, 0x1000, Q512)
            CreateField (QBUF, 0x1000, 0x08, QZZZ)
            Method (WQAA, 1, NotSerialized)
            {
                QMJV = One
                QMNV = One
                Return (VERB) /* \_SB_.QWMI.VERB */
            }

            Method (WSAA, 2, NotSerialized)
            {
                FBUF = Arg1
                FCOD = F000 /* \_SB_.QWMI.F000 */
                RCOD = F001 /* \_SB_.QWMI.F001 */
                If ((RCOD == One))
                {
                    RQ01 (Arg0)
                }

                If ((RCOD == 0x02))
                {
                    RQ02 (Arg0)
                }

                If ((RCOD == 0x03))
                {
                    RQ03 (Arg0)
                }

                If ((RCOD == 0x04))
                {
                    RQ04 (Arg0)
                }

                If ((RCOD == 0x05))
                {
                    RQ05 (Arg0)
                }

                If ((RCOD == 0x06))
                {
                    RQ06 (Arg0)
                }

                If ((RCOD == 0x07))
                {
                    RQ07 (Arg0)
                }

                If ((RCOD == 0x08))
                {
                    RQ08 (Arg0)
                }

                If ((RCOD == 0x09))
                {
                    RQ09 (Arg0)
                }

                If ((RCOD == 0x0A))
                {
                    RQ0A (Arg0)
                }

                If ((RCOD == 0x0B))
                {
                    RQ0B (Arg0)
                }

                If ((RCOD == 0x0C))
                {
                    RQ0C (Arg0)
                }

                If ((RCOD == 0x0D))
                {
                    RQ0D (Arg0)
                }

                If ((RCOD == 0x0E))
                {
                    RQ0E (Arg0)
                }

                If ((RCOD == 0x0F))
                {
                    RQ0F (Arg0)
                }

                If ((RCOD == 0x10))
                {
                    RQ10 (Arg0)
                }

                If ((RCOD == 0x11))
                {
                    RQ11 (Arg0)
                }

                If ((RCOD == 0x12))
                {
                    RQ12 (Arg0)
                }

                If ((RCOD == 0x13))
                {
                    RQ13 (Arg0)
                }

                If ((RCOD == 0x14))
                {
                    RQ14 (Arg0)
                }

                If ((RCOD == 0x15))
                {
                    RQ15 (Arg0)
                }

                If ((RCOD == 0x16))
                {
                    RQ16 (Arg0)
                }

                If ((RCOD == 0x17))
                {
                    RQ17 (Arg0)
                }

                If ((RCOD == 0x20))
                {
                    RQ20 (Arg0)
                }

                If ((RCOD == 0x21))
                {
                    RQ21 (Arg0)
                }

                If ((RCOD == 0x22))
                {
                    RQ22 (Arg0)
                }

                If ((RCOD == 0xF0))
                {
                    RQF0 (Arg0)
                }

                RBUF = QBUF /* \_SB_.QWMI.QBUF */
            }

            Method (WQAB, 1, NotSerialized)
            {
                Return (RBUF) /* \_SB_.QWMI.RBUF */
            }

            Method (WSAB, 2, NotSerialized)
            {
                If ((RCOD == One))
                {
                    RS01 (Arg0, Arg1)
                }

                If ((RCOD == 0x02))
                {
                    RS02 (Arg0, Arg1)
                }

                If ((RCOD == 0x03))
                {
                    RS03 (Arg0, Arg1)
                }

                If ((RCOD == 0x04))
                {
                    RS04 (Arg0, Arg1)
                }

                If ((RCOD == 0x05))
                {
                    RS05 (Arg0, Arg1)
                }

                If ((RCOD == 0x06))
                {
                    RS06 (Arg0, Arg1)
                }

                If ((RCOD == 0x07))
                {
                    RS07 (Arg0, Arg1)
                }

                If ((RCOD == 0x08))
                {
                    RS08 (Arg0, Arg1)
                }

                If ((RCOD == 0x09))
                {
                    RS09 (Arg0, Arg1)
                }

                If ((RCOD == 0x0A))
                {
                    RS0A (Arg0, Arg1)
                }

                If ((RCOD == 0x0B))
                {
                    RS0B (Arg0, Arg1)
                }

                If ((RCOD == 0x0C))
                {
                    RS0C (Arg0, Arg1)
                }

                If ((RCOD == 0x0D))
                {
                    RS0D (Arg0, Arg1)
                }

                If ((RCOD == 0x0E))
                {
                    RS0E (Arg0, Arg1)
                }

                If ((RCOD == 0x0F))
                {
                    RS0F (Arg0, Arg1)
                }

                If ((RCOD == 0x10))
                {
                    RS10 (Arg0, Arg1)
                }

                If ((RCOD == 0x11))
                {
                    RS11 (Arg0, Arg1)
                }

                If ((RCOD == 0x12))
                {
                    RS12 (Arg0, Arg1)
                }

                If ((RCOD == 0x13))
                {
                    RS13 (Arg0, Arg1)
                }

                If ((RCOD == 0x14))
                {
                    RS14 (Arg0, Arg1)
                }

                If ((RCOD == 0x15))
                {
                    RS15 (Arg0, Arg1)
                }

                If ((RCOD == 0x16))
                {
                    RS16 (Arg0, Arg1)
                }

                If ((RCOD == 0x17))
                {
                    RS17 (Arg0, Arg1)
                }

                If ((RCOD == 0x20))
                {
                    RS20 (Arg0, Arg1)
                }

                If ((RCOD == 0x21))
                {
                    RS21 (Arg0, Arg1)
                }

                If ((RCOD == 0x22))
                {
                    RS22 (Arg0, Arg1)
                }

                If ((RCOD == 0xF0))
                {
                    RSF0 (Arg0, Arg1)
                }

                RBUF = QBUF /* \_SB_.QWMI.QBUF */
            }

            Method (RQ01, 1, NotSerialized)
            {
                If ((FCOD == 0x02))
                {
                    PHSR (One, Zero)
                    Q512 = OWNS /* \_SB_.OWNS */
                }

                If ((FCOD == 0x05))
                {
                    Q000 = SFAI /* \_SB_.QWMI.SFAI */
                }

                If ((FCOD == 0x04))
                {
                    If ((SFLG == Zero))
                    {
                        Q000 = One
                    }
                    Else
                    {
                        Q000 = Zero
                    }
                }
            }

            Method (RS01, 2, NotSerialized)
            {
                Q512 = Arg1
                OWNS = Q512 /* \_SB_.QWMI.Q512 */
                If ((FCOD == 0x04))
                {
                    SFLG = Zero
                    PHSR (One, 0x04)
                    Q512 = OWNS /* \_SB_.OWNS */
                    SFLG = Q000 /* \_SB_.QWMI.Q000 */
                    If ((SFLG == Zero))
                    {
                        Q000 = One
                    }
                    Else
                    {
                        Q000 = Zero
                    }
                }

                If ((FCOD == One))
                {
                    PHSR (One, 0x02)
                }

                If ((FCOD == 0x03))
                {
                    PHSR (One, 0x03)
                }

                If ((FCOD == 0x05))
                {
                    Q512 = OWNS /* \_SB_.OWNS */
                    SFAI = Q000 /* \_SB_.QWMI.Q000 */
                }
            }

            Method (RQ02, 1, NotSerialized)
            {
                If ((FCOD == 0x02))
                {
                    PHSR (0x02, Zero)
                    Q512 = OWNS /* \_SB_.OWNS */
                }

                If ((FCOD == 0x05))
                {
                    Q000 = UFAI /* \_SB_.QWMI.UFAI */
                }

                If ((FCOD == 0x04))
                {
                    If ((UFLG == Zero))
                    {
                        Q000 = One
                    }
                    Else
                    {
                        Q000 = Zero
                    }
                }
            }

            Method (RS02, 2, NotSerialized)
            {
                OWNS = Arg1
                If ((FCOD == 0x04))
                {
                    UFLG = Zero
                    PHSR (0x02, 0x04)
                    Q512 = OWNS /* \_SB_.OWNS */
                    UFLG = Q000 /* \_SB_.QWMI.Q000 */
                }

                If ((FCOD == One))
                {
                    PHSR (0x02, 0x02)
                }

                If ((FCOD == 0x03))
                {
                    PHSR (0x02, 0x03)
                }

                If ((FCOD == 0x05))
                {
                    Q512 = OWNS /* \_SB_.OWNS */
                    UFAI = Q000 /* \_SB_.QWMI.Q000 */
                }
            }

            Method (RQ03, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x03, 0x02)
                }
                Else
                {
                    PHSR (0x03, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS03, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x03, One)
            }

            Method (RQ04, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x04, 0x02)
                }
                Else
                {
                    PHSR (0x04, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS04, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x04, One)
            }

            Method (RQ05, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x05, 0x02)
                }
                Else
                {
                    PHSR (0x05, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS05, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x05, One)
            }

            Method (RQ06, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x06, 0x02)
                }
                Else
                {
                    PHSR (0x06, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS06, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x06, One)
            }

            Method (RQ07, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x07, 0x02)
                }
                Else
                {
                    PHSR (0x07, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS07, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x07, One)
            }

            Method (RQ08, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x08, 0x02)
                }
                Else
                {
                    PHSR (0x08, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS08, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x08, One)
            }

            Method (RQ09, 1, NotSerialized)
            {
                PHSR (Zero, Zero)
                Q512 = OWNS /* \_SB_.OWNS */
                QZZZ = Zero
            }

            Method (RS09, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (Zero, One)
            }

            Method (RQ0A, 1, NotSerialized)
            {
                PHSR (0x09, Zero)
                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS0A, 2, NotSerialized)
            {
            }

            Method (RQ0B, 1, NotSerialized)
            {
                PHSR (0x0A, Zero)
                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS0B, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x0A, One)
            }

            Method (RQ0C, 1, NotSerialized)
            {
                PHSR (0x0B, Zero)
                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS0C, 2, NotSerialized)
            {
            }

            Method (RQ0D, 1, NotSerialized)
            {
            }

            Method (RS0D, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x0C, One)
            }

            Method (RQ0E, 1, NotSerialized)
            {
                If ((FCOD == 0x06))
                {
                    Q000 = Zero
                    Q001 = Zero
                    Q002 = Zero
                    Q003 = Zero
                    Q004 = One
                    Q005 = WLAN /* \_SB_.WLAN */
                    Q006 = Zero
                    Q007 = One
                    Q008 = One
                    Q009 = BTEN /* \_SB_.BTEN */
                    Q010 = Zero
                    Q011 = One
                    Q012 = Zero
                    Q013 = One
                    Q014 = Zero
                    Q015 = One
                    Q016 = Zero
                    Q017 = Zero
                }

                If ((FCOD == 0x02))
                {
                    PHSR (0x0D, Zero)
                    Q512 = OWNS /* \_SB_.OWNS */
                }
            }

            Method (RS0E, 2, NotSerialized)
            {
                If ((FCOD == One))
                {
                    OWNS = Arg1
                    PHSR (0x0D, One)
                }
            }

            Method (RQ0F, 1, NotSerialized)
            {
                If ((FCOD == 0x06))
                {
                    Q000 = Zero
                    Q001 = One
                    Q002 = One
                    Q003 = One
                    Q004 = Zero
                    Q005 = One
                }
            }

            Method (RS0F, 2, NotSerialized)
            {
            }

            Method (RQ10, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x0E, 0x02)
                }
                Else
                {
                    PHSR (0x0E, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS10, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x0E, One)
            }

            Method (RQ11, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x0F, 0x02)
                }
                Else
                {
                    PHSR (0x0F, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS11, 2, NotSerialized)
            {
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                ^^PCI0.LPCB.EC0.ILDF = One
                Release (^^PCI0.LPCB.EC0.MUT1)
                OWNS = Arg1
                PHSR (0x0F, One)
            }

            Method (RQ12, 1, NotSerialized)
            {
                PHSR (0x10, Zero)
                Q512 = OWNS /* \_SB_.OWNS */
                Local0 = OWN1 /* \_SB_.OWN1 */
                Q001 = One
                Q002 = 0x08
                Q003 = Zero
                Q004 = Zero
                Q005 = Zero
                If ((MID4 == One))
                {
                    Q005 = One
                }

                Q006 = Zero
                If ((MID1 == Zero))
                {
                    Q006 = One
                }

                Q007 = Zero
                If ((MID0 == Zero))
                {
                    Q007 = One
                }

                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                Q008 = ^^PCI0.LPCB.EC0.PLID /* \_SB_.PCI0.LPCB.EC0_.PLID */
                Release (^^PCI0.LPCB.EC0.MUT1)
                Q009 = Zero
                If ((MID5 == Zero))
                {
                    Q009 = One
                }
            }

            Method (RS12, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x10, One)
            }

            Method (RQ13, 1, NotSerialized)
            {
                PHSR (0x12, Zero)
                QL20 = DVDI /* \_SB_.DVDI */
            }

            Method (RS13, 2, NotSerialized)
            {
            }

            Method (RQ14, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x13, 0x02)
                }
                Else
                {
                    PHSR (0x13, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS14, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x13, One)
            }

            Method (RQ15, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x14, 0x02)
                }
                Else
                {
                    PHSR (0x14, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS15, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x14, One)
            }

            Method (RQ16, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x15, 0x02)
                }
                Else
                {
                    PHSR (0x15, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS16, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x15, One)
            }

            Method (RQ17, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x16, 0x02)
                }
                Else
                {
                    PHSR (0x16, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS17, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x16, One)
            }

            Name (BLVL, Zero)
            Method (RQ20, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x18, 0x02)
                }
                Else
                {
                    PHSR (0x18, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS20, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x18, One)
            }

            Method (RQ21, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x19, 0x02)
                }
                Else
                {
                    PHSR (0x19, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS21, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x19, One)
            }

            Method (RQ22, 1, NotSerialized)
            {
                If ((FCOD == One))
                {
                    PHSR (0x1A, 0x02)
                }
                Else
                {
                    PHSR (0x1A, Zero)
                }

                Q512 = OWNS /* \_SB_.OWNS */
            }

            Method (RS22, 2, NotSerialized)
            {
                OWNS = Arg1
                PHSR (0x1A, One)
            }

            Method (RQF0, 1, NotSerialized)
            {
            }

            Method (RSF0, 2, NotSerialized)
            {
                Q512 = Arg1
                If ((ToInteger (Q000) == One))
                {
                    PHSR (0x17, One)
                }
            }

            Name (WQBA, Buffer (0x02C0)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xB0, 0x02, 0x00, 0x00, 0xC0, 0x08, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x5F, 0x84, 0x00, 0x01, 0x06, 0x18, 0x42,  // (_.....B
                /* 0020 */  0x10, 0x05, 0x10, 0x92, 0x28, 0x81, 0x42, 0x04,  // ....(.B.
                /* 0028 */  0x12, 0x4F, 0x24, 0x51, 0x30, 0x28, 0x0D, 0x20,  // .O$Q0(. 
                /* 0030 */  0x92, 0x04, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x10,  // ..!.LL..
                /* 0038 */  0x58, 0x0B, 0x30, 0x2F, 0x40, 0xB7, 0x00, 0xC3,  // X.0/@...
                /* 0040 */  0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31, 0x90,  // .l.0-.1.
                /* 0048 */  0xFA, 0xF7, 0x87, 0x28, 0x0D, 0x44, 0x9B, 0x10,  // ...(.D..
                /* 0050 */  0x01, 0x91, 0x02, 0x21, 0xA1, 0x02, 0x94, 0x0B,  // ...!....
                /* 0058 */  0xF0, 0x2D, 0x40, 0x3B, 0xA2, 0x24, 0x0B, 0xB0,  // .-@;.$..
                /* 0060 */  0x0C, 0x23, 0x02, 0x7B, 0x15, 0x60, 0x53, 0x80,  // .#.{.`S.
                /* 0068 */  0x49, 0x34, 0x04, 0x41, 0x39, 0xC3, 0x40, 0xC1,  // I4.A9.@.
                /* 0070 */  0x1B, 0x90, 0x0D, 0x82, 0xC9, 0x1D, 0x04, 0x4A,  // .......J
                /* 0078 */  0xCC, 0x68, 0xC8, 0x0C, 0x3A, 0x9F, 0x8B, 0xE0,  // .h..:...
                /* 0080 */  0x4F, 0xA2, 0x70, 0x01, 0xD2, 0x31, 0x34, 0x82,  // O.p..14.
                /* 0088 */  0x23, 0x4A, 0xD0, 0xA3, 0x00, 0xD9, 0x28, 0x52,  // #J....(R
                /* 0090 */  0x3C, 0x27, 0x81, 0x14, 0x24, 0xC0, 0x21, 0x16,  // <'..$.!.
                /* 0098 */  0xC1, 0x3B, 0x11, 0x03, 0x79, 0x0E, 0x71, 0x3C,  // .;..y.q<
                /* 00A0 */  0x20, 0x6B, 0x46, 0x14, 0x7E, 0x94, 0x04, 0x46,  //  kF.~..F
                /* 00A8 */  0x3B, 0x0E, 0x8C, 0x8C, 0x11, 0x10, 0xAB, 0xA8,  // ;.......
                /* 00B0 */  0x9A, 0x48, 0x02, 0xBB, 0x1F, 0x81, 0xB4, 0x09,  // .H......
                /* 00B8 */  0x50, 0x26, 0x40, 0xA1, 0x00, 0x83, 0xA3, 0x14,  // P&@.....
                /* 00C0 */  0x4A, 0x73, 0x02, 0x6C, 0x61, 0x10, 0xA4, 0x60,  // Js.la..`
                /* 00C8 */  0x51, 0x22, 0x9D, 0x41, 0x88, 0x43, 0x88, 0x12,  // Q".A.C..
                /* 00D0 */  0xA9, 0x38, 0x3C, 0xEA, 0x4C, 0x80, 0x31, 0x5C,  // .8<.L.1\
                /* 00D8 */  0xE1, 0x04, 0x69, 0x51, 0x80, 0x30, 0x4C, 0x79,  // ..iQ.0Ly
                /* 00E0 */  0x03, 0x13, 0x44, 0xA8, 0xF6, 0x07, 0x41, 0x86,  // ..D...A.
                /* 00E8 */  0x8D, 0x1B, 0xBF, 0xE7, 0xE6, 0x01, 0x9C, 0x9B,  // ........
                /* 00F0 */  0xC7, 0xC4, 0x26, 0xDB, 0xE9, 0x58, 0x05, 0x5E,  // ..&..X.^
                /* 00F8 */  0x3C, 0xAA, 0x30, 0x0E, 0x22, 0x81, 0x83, 0x3D,  // <.0."..=
                /* 0100 */  0x0A, 0x64, 0x01, 0x44, 0x91, 0xE0, 0x51, 0xA3,  // .d.D..Q.
                /* 0108 */  0x4E, 0x70, 0xF0, 0x9E, 0xA4, 0x87, 0x7C, 0x94,  // Np....|.
                /* 0110 */  0x27, 0x10, 0xE4, 0x20, 0xAD, 0xF3, 0x48, 0x40,  // '.. ..H@
                /* 0118 */  0xC6, 0xC0, 0xB0, 0x12, 0x74, 0x70, 0x0C, 0x80,  // ....tp..
                /* 0120 */  0xE2, 0x1A, 0x50, 0x97, 0x83, 0xC7, 0x00, 0x36,  // ..P....6
                /* 0128 */  0xEA, 0x04, 0xFF, 0xFF, 0x70, 0x7C, 0xBC, 0xF6,  // ....p|..
                /* 0130 */  0x7E, 0x09, 0x20, 0x23, 0x37, 0x20, 0x1B, 0xD1,  // ~. #7 ..
                /* 0138 */  0xC1, 0x61, 0x07, 0x79, 0x32, 0x47, 0x56, 0xAA,  // .a.y2GV.
                /* 0140 */  0x00, 0xB3, 0xC7, 0x03, 0x0D, 0x34, 0xC1, 0xF1,  // .....4..
                /* 0148 */  0x18, 0xD9, 0xF3, 0xE9, 0x19, 0x92, 0x1C, 0x0D,  // ........
                /* 0150 */  0x3C, 0x08, 0x3E, 0x32, 0x43, 0x7B, 0xFA, 0xA7,  // <.>2C{..
                /* 0158 */  0xF5, 0x62, 0xE0, 0x93, 0xC2, 0x61, 0xB1, 0x71,  // .b...a.q
                /* 0160 */  0x3F, 0x4A, 0xB0, 0x71, 0xC0, 0xBF, 0x01, 0x1C,  // ?J.q....
                /* 0168 */  0xF7, 0xE3, 0x81, 0xB1, 0xCF, 0xD3, 0xC7, 0x05,  // ........
                /* 0170 */  0x51, 0xCB, 0xC8, 0xE2, 0x3C, 0x0E, 0xD4, 0x45,  // Q...<..E
                /* 0178 */  0xC1, 0x83, 0x8D, 0x10, 0xD1, 0xD7, 0x88, 0x04,  // ........
                /* 0180 */  0xA3, 0x43, 0x68, 0xEC, 0x16, 0x35, 0x5E, 0x7A,  // .Ch..5^z
                /* 0188 */  0xA0, 0xE0, 0x67, 0x88, 0xF7, 0x0A, 0x9F, 0x12,  // ..g.....
                /* 0190 */  0x82, 0x1E, 0xBB, 0x87, 0x12, 0xD6, 0x23, 0xF2,  // ......#.
                /* 0198 */  0x31, 0x02, 0xB8, 0x9D, 0x03, 0xE0, 0x1F, 0x0B,  // 1.......
                /* 01A0 */  0x3C, 0x32, 0x3E, 0x22, 0x8F, 0xF7, 0xD4, 0x8B,  // <2>"....
                /* 01A8 */  0xA5, 0xF1, 0x61, 0x41, 0xB2, 0xC6, 0x0D, 0xDD,  // ..aA....
                /* 01B0 */  0xFA, 0x69, 0x80, 0x8C, 0xE1, 0x19, 0xC0, 0x22,  // .i....."
                /* 01B8 */  0x61, 0xD1, 0xE3, 0xB6, 0x5F, 0x01, 0x08, 0xA1,  // a..._...
                /* 01C0 */  0xCB, 0x9C, 0x84, 0x0E, 0x11, 0x11, 0x12, 0x44,  // .......D
                /* 01C8 */  0x0F, 0x74, 0x84, 0xB8, 0xC9, 0xE1, 0xFE, 0xFF,  // .t......
                /* 01D0 */  0x93, 0xE3, 0x43, 0xC0, 0x8D, 0xD9, 0x43, 0xE0,  // ..C...C.
                /* 01D8 */  0xA7, 0x88, 0x33, 0x38, 0x9E, 0xB3, 0x39, 0x84,  // ..38..9.
                /* 01E0 */  0xE3, 0x89, 0x72, 0x16, 0x07, 0xE4, 0xE9, 0x1A,  // ..r.....
                /* 01E8 */  0xE1, 0x04, 0x1E, 0x00, 0x1E, 0x52, 0x3C, 0x02,  // .....R<.
                /* 01F0 */  0x4F, 0xEA, 0x2C, 0x5E, 0x26, 0x3C, 0x02, 0x8C,  // O.,^&<..
                /* 01F8 */  0xA4, 0xE3, 0x0B, 0x95, 0xFD, 0x14, 0x90, 0x08,  // ........
                /* 0200 */  0x18, 0xD4, 0x09, 0x06, 0x78, 0x63, 0x3E, 0x2B,  // ....xc>+
                /* 0208 */  0x80, 0x65, 0xA8, 0xC7, 0x18, 0xE8, 0x44, 0x3C,  // .e....D<
                /* 0210 */  0x16, 0x23, 0xC6, 0x8A, 0xF2, 0x8C, 0x10, 0xFF,  // .#......
                /* 0218 */  0xBC, 0xC2, 0x44, 0x78, 0x43, 0x08, 0xE4, 0x03,  // ..DxC...
                /* 0220 */  0x84, 0x8F, 0x2F, 0xB0, 0x2F, 0x2B, 0xAD, 0x21,  // .././+.!
                /* 0228 */  0xE8, 0x60, 0x50, 0xE3, 0x51, 0x43, 0x27, 0x16,  // .`P.QC'.
                /* 0230 */  0x5F, 0x5B, 0x7C, 0x86, 0xF1, 0xC9, 0xC5, 0xA7,  // _[|.....
                /* 0238 */  0x17, 0x4F, 0xE0, 0x95, 0x20, 0x4A, 0xC0, 0x78,  // .O.. J.x
                /* 0240 */  0x4F, 0x01, 0x41, 0xA3, 0x04, 0x7F, 0x8A, 0x09,  // O.A.....
                /* 0248 */  0x1B, 0x32, 0xE0, 0xCB, 0x0C, 0x03, 0x89, 0x19,  // .2......
                /* 0250 */  0xE2, 0x89, 0xE3, 0xF1, 0x05, 0xCC, 0x71, 0x8E,  // ......q.
                /* 0258 */  0x2F, 0xA0, 0xF9, 0xFF, 0x1F, 0x5F, 0x00, 0xBF,  // /...._..
                /* 0260 */  0x22, 0x8E, 0x2F, 0xE8, 0xC1, 0x59, 0xEB, 0xF8,  // "./..Y..
                /* 0268 */  0xC9, 0x51, 0xE1, 0x34, 0x1C, 0xFA, 0xF4, 0x02,  // .Q.4....
                /* 0270 */  0xBA, 0x23, 0x04, 0xF0, 0x39, 0xBA, 0x00, 0xCF,  // .#..9...
                /* 0278 */  0x6B, 0x85, 0x8F, 0x2E, 0x70, 0xFE, 0xFF, 0x47,  // k...p..G
                /* 0280 */  0x17, 0xBC, 0xD2, 0x69, 0x09, 0xFC, 0x10, 0x8D,  // ...i....
                /* 0288 */  0x7E, 0x44, 0x67, 0xF0, 0xAA, 0xC3, 0xAE, 0x0B,  // ~Dg.....
                /* 0290 */  0x3E, 0xB9, 0x00, 0x23, 0x85, 0x36, 0x7D, 0x6A,  // >..#.6}j
                /* 0298 */  0x34, 0x6A, 0xD5, 0xA0, 0x4C, 0x8D, 0x32, 0x0D,  // 4j..L.2.
                /* 02A0 */  0x6A, 0xF5, 0xA9, 0xD4, 0x98, 0xB1, 0x73, 0x8B,  // j.....s.
                /* 02A8 */  0xE5, 0x0C, 0x53, 0x83, 0xB5, 0x78, 0x10, 0x1A,  // ..S..x..
                /* 02B0 */  0x85, 0x42, 0x20, 0x96, 0x4A, 0x27, 0x10, 0x07,  // .B .J'..
                /* 02B8 */  0x03, 0xA1, 0xF1, 0x3C, 0x80, 0xB0, 0xFF, 0x3F   // ...<...?
            })
        }
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x2B)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x2B)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR01, Package (0x14)
        {
            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR01, Package (0x14)
        {
            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x15
            }
        })
        Name (PR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR80, Package (0x2A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR80, Package (0x2A)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR82, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR82, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR8A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR8A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR8C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR8C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR84, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR84, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR85, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR85, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR86, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR86, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR87, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR87, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR88, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR88, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR8E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR8E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR8F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR8F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR81, Package (0x14)
        {
            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR81, Package (0x14)
        {
            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x15
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00 ())
                }

                Return (PR00 ())
            }

            OperationRegion (HBUS, PCI_Config, 0x40, 0xC0)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x08), 
                MHEN,   1, 
                    ,   13, 
                MHBR,   18, 
                Offset (0x10), 
                IIEN,   1, 
                    ,   11, 
                DIBI,   20, 
                Offset (0x28), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x30), 
                IPEN,   1, 
                    ,   11, 
                IPBR,   20, 
                Offset (0x62), 
                TUUD,   16, 
                Offset (0x70), 
                    ,   4, 
                TLUD,   12, 
                Offset (0x89), 
                    ,   3, 
                GTSE,   1, 
                Offset (0x8A), 
                Offset (0xA5), 
                    ,   2, 
                CCIR,   3, 
                Offset (0xA6)
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
            Field (MCHT, ByteAcc, NoLock, Preserve)
            {
                Offset (0xD40), 
                ADVE,   1, 
                    ,   11, 
                ADVT,   20, 
                Offset (0x101E), 
                T0IS,   16, 
                Offset (0x105E), 
                T1IS,   16, 
                Offset (0x10EF), 
                ESCS,   8
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEBFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (^^CPBG.IMCH.PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y00._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((^^CPBG.IMCH.PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y00._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (^^CPBG.IMCH.PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((^^CPBG.IMCH.PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (^^CPBG.IMCH.PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((^^CPBG.IMCH.PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (^^CPBG.IMCH.PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((^^CPBG.IMCH.PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (^^CPBG.IMCH.PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((^^CPBG.IMCH.PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (^^CPBG.IMCH.PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((^^CPBG.IMCH.PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (^^CPBG.IMCH.PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((^^CPBG.IMCH.PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (^^CPBG.IMCH.PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((^^CPBG.IMCH.PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (^^CPBG.IMCH.PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((^^CPBG.IMCH.PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (^^CPBG.IMCH.PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((^^CPBG.IMCH.PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (^^CPBG.IMCH.PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((^^CPBG.IMCH.PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (^^CPBG.IMCH.PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((^^CPBG.IMCH.PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (^^CPBG.IMCH.PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((^^CPBG.IMCH.PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0D._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0D._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, M1LN)  // _LEN: Length
                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    If ((PNHM >= 0x000106E1))
                    {
                        Local0 = ^IO10.TOLM /* \_SB_.PCI0.IO10.TOLM */
                        M1MN = (Local0++ << 0x1A)
                    }
                    Else
                    {
                        Local0 = ^IIO0.TOLM /* \_SB_.PCI0.IIO0.TOLM */
                        M1MN = (Local0++ << 0x1A)
                    }
                }
                Else
                {
                    M1MN = (TLUD << 0x14)
                }

                M1LN = ((M1MX - M1MN) + One)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (((Arg0 == GUID) && NEXP))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & 0x02))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Scope (\_SB.PCI0)
            {
                Method (AR00, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (AR80) /* \_SB_.AR80 */
                    }
                    Else
                    {
                        Return (^^AR00) /* \_SB_.AR00 */
                    }
                }

                Method (PR00, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (PR80) /* \_SB_.PR80 */
                    }
                    Else
                    {
                        Return (^^PR00) /* \_SB_.PR00 */
                    }
                }

                Method (AR01, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (AR81) /* \_SB_.AR81 */
                    }
                    Else
                    {
                        Return (^^AR01) /* \_SB_.AR01 */
                    }
                }

                Method (PR01, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (PR81) /* \_SB_.PR81 */
                    }
                    Else
                    {
                        Return (^^PR01) /* \_SB_.PR01 */
                    }
                }

                Method (AR02, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (AR82) /* \_SB_.AR82 */
                    }
                    Else
                    {
                        Return (^^AR02) /* \_SB_.AR02 */
                    }
                }

                Method (PR02, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (PR82) /* \_SB_.PR82 */
                    }
                    Else
                    {
                        Return (^^PR02) /* \_SB_.PR02 */
                    }
                }

                Method (AR04, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (AR84) /* \_SB_.AR84 */
                    }
                    Else
                    {
                        Return (^^AR04) /* \_SB_.AR04 */
                    }
                }

                Method (PR04, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (PR84) /* \_SB_.PR84 */
                    }
                    Else
                    {
                        Return (^^PR04) /* \_SB_.PR04 */
                    }
                }

                Method (AR05, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (AR85) /* \_SB_.AR85 */
                    }
                    Else
                    {
                        Return (^^AR05) /* \_SB_.AR05 */
                    }
                }

                Method (PR05, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (PR85) /* \_SB_.PR85 */
                    }
                    Else
                    {
                        Return (^^PR05) /* \_SB_.PR05 */
                    }
                }

                Method (AR06, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (AR86) /* \_SB_.AR86 */
                    }
                    Else
                    {
                        Return (^^AR06) /* \_SB_.AR06 */
                    }
                }

                Method (PR06, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (PR86) /* \_SB_.PR86 */
                    }
                    Else
                    {
                        Return (^^PR06) /* \_SB_.PR06 */
                    }
                }

                Method (AR07, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (AR87) /* \_SB_.AR87 */
                    }
                    Else
                    {
                        Return (^^AR07) /* \_SB_.AR07 */
                    }
                }

                Method (PR07, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (PR87) /* \_SB_.PR87 */
                    }
                    Else
                    {
                        Return (^^PR07) /* \_SB_.PR07 */
                    }
                }

                Method (AR08, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (AR88) /* \_SB_.AR88 */
                    }
                    Else
                    {
                        Return (^^AR08) /* \_SB_.AR08 */
                    }
                }

                Method (PR08, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (PR88) /* \_SB_.PR88 */
                    }
                    Else
                    {
                        Return (^^PR08) /* \_SB_.PR08 */
                    }
                }

                Method (AR0A, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (AR8A) /* \_SB_.AR8A */
                    }
                    Else
                    {
                        Return (^^AR0A) /* \_SB_.AR0A */
                    }
                }

                Method (PR0A, 0, NotSerialized)
                {
                    If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                        ) == 0x000106A0)))
                    {
                        Return (PR8A) /* \_SB_.PR8A */
                    }
                    Else
                    {
                        Return (^^PR0A) /* \_SB_.PR0A */
                    }
                }
            }

            Name (PNLA, Buffer (0x08)
            {
                 0x65, 0x7B, 0x91, 0xA7, 0xBD, 0xD3, 0xE9, 0xFF   // e{......
            })
            Name (PNLL, Buffer (0x08)
            {
                 0x50, 0x69, 0x82, 0x9B, 0xB4, 0xCD, 0xE6, 0xFF   // Pi......
            })
            Method (CRBL, 0, NotSerialized)
            {
                Local0 = IPAT /* \IPAT */
                If (((Local0 == Zero) || (Local0 == One)))
                {
                    ^GFX0.BLM0 = (DerefOf (PNLA [Zero]) | ((DerefOf (
                        OBCL [0x02]) | 0x80) << 0x08))
                    ^GFX0.BLM1 = (DerefOf (PNLA [One]) | ((DerefOf (
                        OBCL [0x03]) | 0x80) << 0x08))
                    ^GFX0.BLM2 = (DerefOf (PNLA [0x02]) | ((DerefOf (
                        OBCL [0x04]) | 0x80) << 0x08))
                    ^GFX0.BLM3 = (DerefOf (PNLA [0x03]) | ((DerefOf (
                        OBCL [0x05]) | 0x80) << 0x08))
                    ^GFX0.BLM4 = (DerefOf (PNLA [0x04]) | ((DerefOf (
                        OBCL [0x06]) | 0x80) << 0x08))
                    ^GFX0.BLM5 = (DerefOf (PNLA [0x05]) | ((DerefOf (
                        OBCL [0x07]) | 0x80) << 0x08))
                    ^GFX0.BLM6 = (DerefOf (PNLA [0x06]) | ((DerefOf (
                        OBCL [0x08]) | 0x80) << 0x08))
                    ^GFX0.BLM7 = (DerefOf (PNLA [0x07]) | ((DerefOf (
                        OBCL [0x09]) | 0x80) << 0x08))
                }
                Else
                {
                    ^GFX0.BLM0 = (DerefOf (PNLL [Zero]) | ((DerefOf (
                        OBCL [0x02]) | 0x80) << 0x08))
                    ^GFX0.BLM1 = (DerefOf (PNLL [One]) | ((DerefOf (
                        OBCL [0x03]) | 0x80) << 0x08))
                    ^GFX0.BLM2 = (DerefOf (PNLL [0x02]) | ((DerefOf (
                        OBCL [0x04]) | 0x80) << 0x08))
                    ^GFX0.BLM3 = (DerefOf (PNLL [0x03]) | ((DerefOf (
                        OBCL [0x05]) | 0x80) << 0x08))
                    ^GFX0.BLM4 = (DerefOf (PNLL [0x04]) | ((DerefOf (
                        OBCL [0x06]) | 0x80) << 0x08))
                    ^GFX0.BLM5 = (DerefOf (PNLL [0x05]) | ((DerefOf (
                        OBCL [0x07]) | 0x80) << 0x08))
                    ^GFX0.BLM6 = (DerefOf (PNLL [0x06]) | ((DerefOf (
                        OBCL [0x08]) | 0x80) << 0x08))
                    ^GFX0.BLM7 = (DerefOf (PNLL [0x07]) | ((DerefOf (
                        OBCL [0x09]) | 0x80) << 0x08))
                }

                ^GFX0.BLMX = Zero
            }

            Name (OBCL, Package (0x0A)
            {
                0x64, 
                0x2A, 
                Zero, 
                0x0E, 
                0x1C, 
                0x2A, 
                0x38, 
                0x46, 
                0x54, 
                0x64
            })
            Method (CBRL, 0, NotSerialized)
            {
                Local0 = (^GFX0.BCLP & 0xFF)
                Local1 = Zero
                Local2 = IPAT /* \IPAT */
                If (((Local2 == Zero) || (Local2 == One)))
                {
                    While ((Local0 > DerefOf (PNLA [Local1])))
                    {
                        Local1++
                    }
                }
                Else
                {
                    While ((Local0 > DerefOf (PNLL [Local1])))
                    {
                        Local1++
                    }
                }

                Return (Local1)
            }

            Method (SBRL, 0, NotSerialized)
            {
                Local1 = ^^QWMI.BLVL /* \_SB_.QWMI.BLVL */
                ^GFX0.PARD ()
                Local0 = IPAT /* \IPAT */
                If (((Local0 == Zero) || (Local0 == One)))
                {
                    ^GFX0.BCLP = DerefOf (PNLA [Local1])
                }
                Else
                {
                    ^GFX0.BCLP = DerefOf (PNLL [Local1])
                }

                ^GFX0.BCLP |= 0x80000000
                ^GFX0.ASLC = 0x02
                Local2 = 0x05
                While ((^GFX0.ASLC && Local2))
                {
                    ^GFX0.LBPC = Zero
                    Local2--
                }
            }

            Device (P0P3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A ())
                    }

                    Return (PR0A ())
                }

                OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
                Field (HBUS, DWordAcc, NoLock, Preserve)
                {
                    VIDE,   16, 
                    Offset (0x3E), 
                        ,   3, 
                    VGAE,   1
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    OperationRegion (VGAM, SystemMemory, 0xE0100000, 0x1000)
                    Field (VGAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x488), 
                            ,   25, 
                        HVGA,   1
                    }

                    Name (_PSC, Zero)  // _PSC: Power State Current
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        If ((MID4 == Zero))
                        {
                            ^^^P0P2.VGA.HVGA = Zero
                            HVGA = Zero
                        }

                        _PSC = Zero
                    }

                    Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                    {
                        _PSC = One
                    }

                    Method (_PS2, 0, NotSerialized)  // _PS2: Power State 2
                    {
                        _PSC = 0x02
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        _PSC = 0x03
                    }

                    Name (DISW, One)
                    Name (NDSP, Zero)
                    Name (VRSM, Zero)
                    Name (PDSP, Zero)
                    Name (CDSP, Zero)
                    Name (TGLT, Package (0x06)
                    {
                        Package (0x0A)
                        {
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One
                        }, 

                        Package (0x0A)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One
                        }, 

                        Package (0x0A)
                        {
                            One, 
                            0x04, 
                            One, 
                            One, 
                            0x05, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One
                        }, 

                        Package (0x0A)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            0x05, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One
                        }, 

                        Package (0x0A)
                        {
                            One, 
                            0x08, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            0x09, 
                            One
                        }, 

                        Package (0x0A)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            0x09, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One
                        }
                    })
                    Name (TGLP, Zero)
                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (_PSC, Zero)  // _PSC: Power State Current
                        Name (_S3D, 0x03)  // _S3D: S3 Device State
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            _PSC = Zero
                        }

                        Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                        {
                            _PSC = One
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }

                        Name (_DCS, 0x1B)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Local0 = Arg0
                            If ((Local0 & One))
                            {
                                Debug = "LCD._DSS(1) called"
                                NDSP |= One
                            }
                            Else
                            {
                                Debug = "LCD._DSS(0) called"
                                NDSP &= 0xFE
                            }

                            Local0 &= 0xC0000000
                            Local0 &= 0x80000000
                            If ((Local0 != Zero))
                            {
                                Debug = "LCD._DSS, update next _DGS"
                                _DCS = ((_DCS & 0xFD) | ((NDSP & One) << One
                                    ))
                                ^^CRT._DCS = ((^^CRT._DCS & 0xFD) | (NDSP & 0x02))
                                ^^TV._DCS = ((^^TV._DCS & 0xFD) | ((NDSP & 0x04) >> One
                                    ))
                                UDGS ()
                            }
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (Package (0x0A)
                            {
                                0x64, 
                                0x2A, 
                                Zero, 
                                0x0E, 
                                0x1C, 
                                0x2A, 
                                0x38, 
                                0x46, 
                                0x54, 
                                0x64
                            })
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                            _T_0 = ToInteger (Arg0)
                            If ((_T_0 == Zero))
                            {
                                Local1 = Zero
                            }
                            ElseIf ((_T_0 == 0x0E))
                            {
                                Local1 = One
                            }
                            ElseIf ((_T_0 == 0x1C))
                            {
                                Local1 = 0x02
                            }
                            ElseIf ((_T_0 == 0x2A))
                            {
                                Local1 = 0x03
                            }
                            ElseIf ((_T_0 == 0x38))
                            {
                                Local1 = 0x04
                            }
                            ElseIf ((_T_0 == 0x46))
                            {
                                Local1 = 0x05
                            }
                            ElseIf ((_T_0 == 0x54))
                            {
                                Local1 = 0x06
                            }
                            ElseIf ((_T_0 == 0x64))
                            {
                                Local1 = 0x07
                            }

                            If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                            {
                                BLVL = Local1
                            }
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                            If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                            {
                                Local0 = BLVL /* \_SB_.BLVL */
                            }

                            _T_0 = ToInteger (Local0)
                            If ((_T_0 == Zero))
                            {
                                Local1 = Zero
                            }
                            ElseIf ((_T_0 == One))
                            {
                                Local1 = 0x0E
                            }
                            ElseIf ((_T_0 == 0x02))
                            {
                                Local1 = 0x1C
                            }
                            ElseIf ((_T_0 == 0x03))
                            {
                                Local1 = 0x2A
                            }
                            ElseIf ((_T_0 == 0x04))
                            {
                                Local1 = 0x38
                            }
                            ElseIf ((_T_0 == 0x05))
                            {
                                Local1 = 0x46
                            }
                            ElseIf ((_T_0 == 0x06))
                            {
                                Local1 = 0x54
                            }
                            ElseIf ((_T_0 == 0x07))
                            {
                                Local1 = 0x64
                            }

                            Return (Local1)
                        }
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Name (_PSC, Zero)  // _PSC: Power State Current
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            _PSC = Zero
                        }

                        Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                        {
                            _PSC = One
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }

                        Name (_DCS, 0x1B)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Local0 = Arg0
                            If ((Local0 & One))
                            {
                                Debug = "CRT._DSS(1) called"
                                NDSP |= 0x02
                            }
                            Else
                            {
                                Debug = "CRT._DSS(0) called"
                                NDSP &= 0xFD
                            }

                            Local0 &= 0xC0000000
                            Local0 &= 0x80000000
                            If ((Local0 != Zero))
                            {
                                Debug = "CRT._DSS, update next _DGS"
                                ^^LCD._DCS = ((^^LCD._DCS & 0xFD) | ((NDSP & One) << One
                                    ))
                                _DCS = ((_DCS & 0xFD) | (NDSP & 0x02))
                                ^^TV._DCS = ((^^TV._DCS & 0xFD) | ((NDSP & 0x04) >> One
                                    ))
                                UDGS ()
                            }
                        }
                    }

                    Device (TV)
                    {
                        Name (_ADR, 0x80006342)  // _ADR: Address
                        Name (_PSC, Zero)  // _PSC: Power State Current
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            _PSC = Zero
                        }

                        Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                        {
                            _PSC = One
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }

                        Name (_DCS, 0x1B)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Local0 = Arg0
                            If ((Local0 & One))
                            {
                                Debug = "TV_._DSS(1) called"
                                NDSP |= 0x04
                            }
                            Else
                            {
                                Debug = "TV_._DSS(0) called"
                                NDSP &= 0xFB
                            }

                            Local0 &= 0xC0000000
                            Local0 &= 0x80000000
                            If ((Local0 != Zero))
                            {
                                Debug = "TV_._DSS, update next _DGS"
                                ^^LCD._DCS = ((^^LCD._DCS & 0xFD) | ((NDSP & One) << One
                                    ))
                                ^^CRT._DCS = ((^^CRT._DCS & 0xFD) | (NDSP & 0x02))
                                _DCS = ((_DCS & 0xFD) | ((NDSP & 0x04) >> One
                                    ))
                                UDGS ()
                            }
                        }
                    }

                    Device (DFP)
                    {
                        Name (_ADR, 0x80007330)  // _ADR: Address
                        Name (_PSC, Zero)  // _PSC: Power State Current
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            _PSC = Zero
                        }

                        Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                        {
                            _PSC = One
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }

                        Name (_DCS, 0x1B)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Local0 = Arg0
                            If ((Local0 & One))
                            {
                                Debug = "DFP._DSS(1) called"
                                NDSP |= 0x04
                            }
                            Else
                            {
                                Debug = "DFP._DSS(0) called"
                                NDSP &= 0xFB
                            }

                            Local0 &= 0xC0000000
                            Local0 &= 0x80000000
                            If ((Local0 != Zero))
                            {
                                Debug = "DFP._DSS, update next _DGS"
                                ^^LCD._DCS = ((^^LCD._DCS & 0xFD) | ((NDSP & One) << One
                                    ))
                                ^^CRT._DCS = ((^^CRT._DCS & 0xFD) | (NDSP & 0x02))
                                ^^TV._DCS = ((^^TV._DCS & 0xFD) | ((NDSP & 0x04) >> One
                                    ))
                                _DCS = ((_DCS & 0xFD) | ((NDSP & 0x08) >> One
                                    ))
                                UDGS ()
                            }
                        }
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DISW = Arg0
                        Local0 = ((DISW & 0x04) >> 0x02)
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x04)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x80006342, 
                            0x80007330
                        })
                    }

                    Method (DRUL, 1, NotSerialized)
                    {
                        USTA ()
                        UDGS ()
                        PDSP = CDSP /* \_SB_.PCI0.P0P3.VGA_.CDSP */
                        Local2 = CDSP /* \_SB_.PCI0.P0P3.VGA_.CDSP */
                        Local1 = ^CRT._DCS /* \_SB_.PCI0.P0P3.VGA_.CRT_._DCS */
                        ^CRT._DCS = ((((Local2 & 0x02) << 0x03) | ((
                            Local2 & 0x20) >> 0x04)) | (Local1 & 0x0D))
                        Local3 = ^TV._DCS /* \_SB_.PCI0.P0P3.VGA_.TV__._DCS */
                        ^TV._DCS = ((((Local2 & 0x04) << 0x02) | ((
                            Local2 & 0x40) >> 0x05)) | (Local3 & 0x0D))
                        Local4 = ^DFP._DCS /* \_SB_.PCI0.P0P3.VGA_.DFP_._DCS */
                        ^DFP._DCS = ((((Local2 & 0x08) << One) | ((
                            Local2 & 0x80) >> 0x06)) | (Local4 & 0x0D))
                        If ((Arg0 == One))
                        {
                            If (((^CRT._DGS && !(^CRT._DCS & 0x10)) || (^TV._DGS && !
                                (^TV._DCS & 0x10))))
                            {
                                UDGS ()
                                Return (Zero)
                            }
                            Else
                            {
                                Notify (^^^P0P2.VGA, 0x80) // Status Change
                                Notify (VGA, 0x80) // Status Change
                                Return (Zero)
                            }
                        }
                    }

                    Method (USTA, 0, NotSerialized)
                    {
                        CDSP = PHSR (0x04, Zero)
                        Local1 = (CDSP & 0x0F)
                        If (((Local1 & 0x0C) == 0x0C))
                        {
                            Local1 &= 0x77
                        }

                        If ((Local1 == 0x03))
                        {
                            TGLP = One
                        }
                        ElseIf ((Local1 == 0x05))
                        {
                            TGLP = 0x02
                        }
                        ElseIf ((Local1 == 0x07))
                        {
                            TGLP = 0x03
                        }
                        ElseIf ((Local1 == 0x09))
                        {
                            TGLP = 0x04
                        }
                        ElseIf ((Local1 == 0x0B))
                        {
                            TGLP = 0x05
                        }
                        Else
                        {
                            TGLP = Zero
                        }
                    }

                    Method (UDGS, 0, NotSerialized)
                    {
                        Local0 = (^LCD._DGS & One)
                        Local0 |= ((^CRT._DGS & One) << One)
                        Local0 |= ((^TV._DGS & One) << 0x02)
                        Local0 |= ((^DFP._DGS & One) << 0x03)
                        Local1 = DerefOf (DerefOf (TGLT [TGLP]) [Local0])
                        ^LCD._DGS = (Local1 & One)
                        ^CRT._DGS = ((Local1 & 0x02) >> One)
                        ^TV._DGS = ((Local1 & 0x04) >> 0x02)
                        ^DFP._DGS = ((Local1 & 0x08) >> 0x03)
                    }
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    CLID = One
                    IBIA = 0x05
                    CRBL ()
                }

                Method (PCPC, 0, NotSerialized)
                {
                    ECST (0x6F)
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DSEN = (Arg0 & 0x07)
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    NDID = Zero
                    If (CondRefOf (IDAB))
                    {
                        IDAB ()
                    }
                    Else
                    {
                        If ((DIDL != Zero))
                        {
                            DID1 = SDDL (DID1)
                        }

                        If ((DDL2 != Zero))
                        {
                            DID2 = SDDL (DID2)
                        }

                        If ((DDL3 != Zero))
                        {
                            DID3 = SDDL (DID3)
                        }

                        If ((DDL4 != Zero))
                        {
                            DID4 = SDDL (DID4)
                        }

                        If ((DDL5 != Zero))
                        {
                            DID5 = SDDL (DID5)
                        }
                    }

                    If ((NDID == One))
                    {
                        Name (TMP1, Package (0x01)
                        {
                            0xFFFFFFFF
                        })
                        TMP1 [Zero] = (0x00010000 | DID1)
                        Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
                    }

                    If ((NDID == 0x02))
                    {
                        Name (TMP2, Package (0x02)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP2 [Zero] = (0x00010000 | DID1)
                        TMP2 [One] = (0x00010000 | DID2)
                        Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
                    }

                    If ((NDID == 0x03))
                    {
                        Name (TMP3, Package (0x03)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP3 [Zero] = (0x00010000 | DID1)
                        TMP3 [One] = (0x00010000 | DID2)
                        TMP3 [0x02] = (0x00010000 | DID3)
                        Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
                    }

                    If ((NDID == 0x04))
                    {
                        Name (TMP4, Package (0x04)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP4 [Zero] = (0x00010000 | DID1)
                        TMP4 [One] = (0x00010000 | DID2)
                        TMP4 [0x02] = (0x00010000 | DID3)
                        TMP4 [0x03] = (0x00010000 | DID4)
                        Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
                    }

                    If (CondRefOf (NNAB))
                    {
                        Return (NNAB) /* External reference */
                    }
                    ElseIf ((NDID > 0x04))
                    {
                        Name (TMP5, Package (0x05)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP5 [Zero] = (0x00010000 | DID1)
                        TMP5 [One] = (0x00010000 | DID2)
                        TMP5 [0x02] = (0x00010000 | DID3)
                        TMP5 [0x03] = (0x00010000 | DID4)
                        TMP5 [0x04] = (0x00010000 | DID5)
                        Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
                    }

                    Return (Package (0x01)
                    {
                        0x0400
                    })
                }

                Device (DD01)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID1 == Zero))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID1))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDDS (DID1))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID1))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD02)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID2 == Zero))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID2))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDDS (DID2))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID2))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Return (Package (0x0A)
                        {
                            0x64, 
                            0x2A, 
                            Zero, 
                            0x0E, 
                            0x1C, 
                            0x2A, 
                            0x38, 
                            0x46, 
                            0x54, 
                            0x64
                        })
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = ToInteger (Arg0)
                        If ((_T_0 == Zero))
                        {
                            Local1 = Zero
                        }
                        ElseIf ((_T_0 == 0x0E))
                        {
                            Local1 = One
                        }
                        ElseIf ((_T_0 == 0x1C))
                        {
                            Local1 = 0x02
                        }
                        ElseIf ((_T_0 == 0x2A))
                        {
                            Local1 = 0x03
                        }
                        ElseIf ((_T_0 == 0x38))
                        {
                            Local1 = 0x04
                        }
                        ElseIf ((_T_0 == 0x46))
                        {
                            Local1 = 0x05
                        }
                        ElseIf ((_T_0 == 0x54))
                        {
                            Local1 = 0x06
                        }
                        ElseIf ((_T_0 == 0x64))
                        {
                            Local1 = 0x07
                        }

                        If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                        {
                            BLVL = Local1
                        }
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                        {
                            Local0 = BLVL /* \_SB_.BLVL */
                        }

                        _T_0 = ToInteger (Local0)
                        If ((_T_0 == Zero))
                        {
                            Local1 = Zero
                        }
                        ElseIf ((_T_0 == One))
                        {
                            Local1 = 0x0E
                        }
                        ElseIf ((_T_0 == 0x02))
                        {
                            Local1 = 0x1C
                        }
                        ElseIf ((_T_0 == 0x03))
                        {
                            Local1 = 0x2A
                        }
                        ElseIf ((_T_0 == 0x04))
                        {
                            Local1 = 0x38
                        }
                        ElseIf ((_T_0 == 0x05))
                        {
                            Local1 = 0x46
                        }
                        ElseIf ((_T_0 == 0x06))
                        {
                            Local1 = 0x54
                        }
                        ElseIf ((_T_0 == 0x07))
                        {
                            Local1 = 0x64
                        }

                        Return (Local1)
                    }
                }

                Device (DD03)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID3 == Zero))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID3))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID3 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID3))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID3))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD04)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID4 == Zero))
                        {
                            Return (0x04)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID4))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID4 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID4))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID4))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD05)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID5 == Zero))
                        {
                            Return (0x05)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID5))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID5 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID5))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID5))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD06)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID6 == Zero))
                        {
                            Return (0x06)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID6))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID6 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID6))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID6))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD07)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID7 == Zero))
                        {
                            Return (0x07)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID7))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID7 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID7))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID7))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD08)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID8 == Zero))
                        {
                            Return (0x08)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID8))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID8 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID8))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID8))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Method (SDDL, 1, NotSerialized)
                {
                    NDID++
                    Local0 = (Arg0 & 0x0F0F)
                    Local1 = (0x80000000 | Local0)
                    If ((DIDL == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL2 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL3 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL4 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL5 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL6 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL7 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL8 == Local0))
                    {
                        Return (Local1)
                    }

                    Return (Zero)
                }

                Method (CDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((Zero == Local0))
                    {
                        Return (0x1D)
                    }

                    If ((CADL == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL2 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL3 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL4 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL5 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL6 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL7 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL8 == Local0))
                    {
                        Return (0x1F)
                    }

                    Return (0x1D)
                }

                Method (NDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((Zero == Local0))
                    {
                        Return (Zero)
                    }

                    If ((NADL == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL2 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL3 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL4 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL5 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL6 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL7 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL8 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (MXMX, 1, Serialized)
                {
                    If ((Arg0 == Zero))
                    {
                        GP52 = One
                        P8XH (One, 0x77)
                        P8XH (Zero, One)
                    }

                    If ((Arg0 == One))
                    {
                        GP52 = Zero
                        P8XH (One, 0x77)
                        P8XH (Zero, Zero)
                    }

                    Return (One)
                }

                Scope (^^PCI0)
                {
                    OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                    Field (MCHP, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x60), 
                        TASM,   10, 
                        Offset (0x62)
                    }
                }

                OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x12), 
                        ,   1, 
                    GIVD,   1, 
                        ,   2, 
                    GUMA,   3, 
                    Offset (0x14), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x18), 
                    Offset (0xA4), 
                    ASLE,   8, 
                    Offset (0xA8), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xB0), 
                        ,   12, 
                    CDVL,   1, 
                    Offset (0xB2), 
                    Offset (0xB5), 
                    LBPC,   8, 
                    Offset (0xBC), 
                    ASLS,   32
                }

                OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
                Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    DMOD,   32, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   32, 
                    DDL2,   32, 
                    DDL3,   32, 
                    DDL4,   32, 
                    DDL5,   32, 
                    DDL6,   32, 
                    DDL7,   32, 
                    DDL8,   32, 
                    CPDL,   32, 
                    CPL2,   32, 
                    CPL3,   32, 
                    CPL4,   32, 
                    CPL5,   32, 
                    CPL6,   32, 
                    CPL7,   32, 
                    CPL8,   32, 
                    CADL,   32, 
                    CAL2,   32, 
                    CAL3,   32, 
                    CAL4,   32, 
                    CAL5,   32, 
                    CAL6,   32, 
                    CAL7,   32, 
                    CAL8,   32, 
                    NADL,   32, 
                    NDL2,   32, 
                    NDL3,   32, 
                    NDL4,   32, 
                    NDL5,   32, 
                    NDL6,   32, 
                    NDL7,   32, 
                    NDL8,   32, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    CBLV,   32, 
                    BLM0,   16, 
                    BLM1,   16, 
                    BLM2,   16, 
                    BLM3,   16, 
                    BLM4,   16, 
                    BLM5,   16, 
                    BLM6,   16, 
                    BLM7,   16, 
                    BLMX,   192, 
                    CPFM,   32, 
                    EPFM,   32, 
                    PLUT,   592, 
                    PFMB,   32, 
                    CCDV,   32, 
                    PCFT,   32, 
                    Offset (0x400), 
                    GVD1,   49152, 
                    PHED,   32, 
                    BDDC,   2048
                }

                If (CondRefOf (FPED))
                {
                    FPED ()
                }

                Name (DBTB, Package (0x15)
                {
                    Zero, 
                    0x07, 
                    0x38, 
                    0x01C0, 
                    0x0E00, 
                    0x3F, 
                    0x01C7, 
                    0x0E07, 
                    0x01F8, 
                    0x0E38, 
                    0x0FC0, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x7000, 
                    0x7007, 
                    0x7038, 
                    0x71C0, 
                    0x7E00
                })
                Name (CDCT, Package (0x05)
                {
                    Package (0x02)
                    {
                        0xE4, 
                        0x0140
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }
                })
                Name (SUCC, One)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GSCI, 0, Serialized)
                {
                    Method (GBDA, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = 0x0679
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            PARM = 0x0240
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            PARM &= 0xEFFF0000
                            PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                            PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            PARM = IPSC /* \IPSC */
                            PARM |= (IPAT << 0x08)
                            PARM += 0x0100
                            PARM |= (LIDS << 0x10)
                            PARM += 0x00010000
                            PARM |= (IBIA << 0x14)
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            PARM = ITVF /* \ITVF */
                            PARM |= (ITVM << 0x04)
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                            PARM ^= One
                            PARM |= (GMFN << One)
                            PARM |= 0x1800
                            PARM |= (IDMS << 0x11)
                            PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                0x15) /* \_SB_.PCI0.GFX0.PARM */
                            GESF = One
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            PARM = Zero
                            If (ISSC)
                            {
                                PARM |= 0x03
                            }

                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            PARM = KSV0 /* \KSV0 */
                            GESF = KSV1 /* \KSV1 */
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                    }

                    Method (SBCB, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = Zero
                            PARM = 0x000F87FD
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x03))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            ITVF = (PARM & 0x0F)
                            ITVM = ((PARM & 0xF0) >> 0x04)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            If ((PARM == Zero))
                            {
                                Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x08))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x09))
                        {
                            IBTT = (PARM & 0xFF)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            IPSC = (PARM & 0xFF)
                            If (((PARM >> 0x08) & 0xFF))
                            {
                                IPAT = ((PARM >> 0x08) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((PARM >> 0x14) & 0x07)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            IF1E = ((PARM >> One) & One)
                            If ((PARM & 0x0001E000))
                            {
                                IDMS = ((PARM >> 0x0D) & 0x0F)
                            }
                            Else
                            {
                                IDMS = ((PARM >> 0x11) & 0x0F)
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x10))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x11))
                        {
                            PARM = (LIDS << 0x08)
                            PARM += 0x0100
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x12))
                        {
                            If ((PARM & One))
                            {
                                If (((PARM >> One) == One))
                                {
                                    ISSC = One
                                }
                                Else
                                {
                                    GESF = Zero
                                    Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                                }
                            }
                            Else
                            {
                                ISSC = Zero
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x13))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x14))
                        {
                            PAVP = (PARM & 0x0F)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GEFC == 0x04))
                    {
                        GXFC = GBDA ()
                    }

                    If ((GEFC == 0x06))
                    {
                        GXFC = SBCB ()
                    }

                    GEFC = Zero
                    SCIS = One
                    GSSE = Zero
                    SCIE = Zero
                    Return (Zero)
                }

                Method (PDRD, 0, NotSerialized)
                {
                    If (!DRDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!DRDY)
                }

                Method (PSTS, 0, NotSerialized)
                {
                    If ((CSTS > 0x02))
                    {
                        Sleep (ASLP)
                    }

                    Return ((CSTS == 0x03))
                }

                Method (GNOT, 2, NotSerialized)
                {
                    If (PDRD ())
                    {
                        Return (One)
                    }

                    CEVT = Arg0
                    CSTS = 0x03
                    If (((CHPD == Zero) && (Arg1 == Zero)))
                    {
                        If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                        {
                            Notify (PCI0, Arg1)
                        }
                        Else
                        {
                            Notify (GFX0, Arg1)
                        }
                    }

                    Notify (GFX0, 0x80) // Status Change
                    Return (Zero)
                }

                Method (GHDS, 1, NotSerialized)
                {
                    TIDX = Arg0
                    Return (GNOT (One, Zero))
                }

                Method (GLID, 1, NotSerialized)
                {
                    CLID = Arg0
                    Return (GNOT (0x02, Zero))
                }

                Method (GDCK, 1, NotSerialized)
                {
                    CDCK = Arg0
                    Return (GNOT (0x04, Zero))
                }

                Method (PARD, 0, NotSerialized)
                {
                    If (!ARDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!ARDY)
                }

                Method (AINT, 2, NotSerialized)
                {
                    If (!(TCHE & (One << Arg0)))
                    {
                        Return (One)
                    }

                    If (PARD ())
                    {
                        Return (One)
                    }

                    If ((Arg0 == 0x02))
                    {
                        If (CPFM)
                        {
                            Local0 = (CPFM & 0x0F)
                            Local1 = (EPFM & 0x0F)
                            If ((Local0 == One))
                            {
                                If ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                ElseIf ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                Else
                                {
                                    PFIT = One
                                }
                            }

                            If ((Local0 == 0x06))
                            {
                                If ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                ElseIf ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                Else
                                {
                                    PFIT = 0x06
                                }
                            }

                            If ((Local0 == 0x08))
                            {
                                If ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                ElseIf ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                Else
                                {
                                    PFIT = 0x08
                                }
                            }
                        }
                        Else
                        {
                            PFIT ^= 0x07
                        }

                        PFIT |= 0x80000000
                        ASLC = 0x04
                    }
                    ElseIf ((Arg0 == One))
                    {
                        BCLP = ((Arg1 * 0xFF) / 0x64)
                        BCLP |= 0x80000000
                        ASLC = 0x02
                    }
                    ElseIf ((Arg0 == Zero))
                    {
                        ALSI = Arg1
                        ASLC = One
                    }
                    Else
                    {
                        Return (One)
                    }

                    ASLE = One
                    Return (Zero)
                }

                Method (SCIP, 0, NotSerialized)
                {
                    If ((OVER != Zero))
                    {
                        Return (!GSMI)
                    }

                    Return (Zero)
                }
            }

            Device (P0P2)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02 ())
                    }

                    Return (PR02 ())
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    OperationRegion (VGAM, SystemMemory, 0xE0100000, 0x1000)
                    Field (VGAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x488), 
                            ,   25, 
                        HVGA,   1
                    }

                    Name (_PSC, Zero)  // _PSC: Power State Current
                    Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                    {
                        If ((MID4 == Zero))
                        {
                            HVGA = Zero
                            ^^^P0P3.VGA.HVGA = Zero
                        }

                        _PSC = Zero
                    }

                    Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                    {
                        _PSC = One
                    }

                    Method (_PS2, 0, NotSerialized)  // _PS2: Power State 2
                    {
                        _PSC = 0x02
                    }

                    Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                    {
                        _PSC = 0x03
                    }

                    Name (DISW, One)
                    Name (NDSP, Zero)
                    Name (VRSM, Zero)
                    Name (PDSP, Zero)
                    Name (CDSP, Zero)
                    Name (TGLT, Package (0x06)
                    {
                        Package (0x0A)
                        {
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One
                        }, 

                        Package (0x0A)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One
                        }, 

                        Package (0x0A)
                        {
                            One, 
                            0x04, 
                            One, 
                            One, 
                            0x05, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One
                        }, 

                        Package (0x0A)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            0x05, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One
                        }, 

                        Package (0x0A)
                        {
                            One, 
                            0x08, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            0x09, 
                            One
                        }, 

                        Package (0x0A)
                        {
                            One, 
                            0x02, 
                            0x03, 
                            0x09, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One, 
                            One
                        }
                    })
                    Name (TGLP, Zero)
                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Name (_PSC, Zero)  // _PSC: Power State Current
                        Name (_S3D, 0x03)  // _S3D: S3 Device State
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            _PSC = Zero
                        }

                        Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                        {
                            _PSC = One
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }

                        Name (_DCS, 0x1B)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Local0 = Arg0
                            If ((Local0 & One))
                            {
                                Debug = "LCD._DSS(1) called"
                                NDSP |= One
                            }
                            Else
                            {
                                Debug = "LCD._DSS(0) called"
                                NDSP &= 0xFE
                            }

                            Local0 &= 0xC0000000
                            Local0 &= 0x80000000
                            If ((Local0 != Zero))
                            {
                                Debug = "LCD._DSS, update next _DGS"
                                _DCS = ((_DCS & 0xFD) | ((NDSP & One) << One
                                    ))
                                ^^CRT._DCS = ((^^CRT._DCS & 0xFD) | (NDSP & 0x02))
                                ^^TV._DCS = ((^^TV._DCS & 0xFD) | ((NDSP & 0x04) >> One
                                    ))
                                UDGS ()
                            }
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (Package (0x0A)
                            {
                                0x64, 
                                0x2A, 
                                Zero, 
                                0x0E, 
                                0x1C, 
                                0x2A, 
                                0x38, 
                                0x46, 
                                0x54, 
                                0x64
                            })
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                            _T_0 = ToInteger (Arg0)
                            If ((_T_0 == Zero))
                            {
                                Local1 = Zero
                            }
                            ElseIf ((_T_0 == 0x0E))
                            {
                                Local1 = One
                            }
                            ElseIf ((_T_0 == 0x1C))
                            {
                                Local1 = 0x02
                            }
                            ElseIf ((_T_0 == 0x2A))
                            {
                                Local1 = 0x03
                            }
                            ElseIf ((_T_0 == 0x38))
                            {
                                Local1 = 0x04
                            }
                            ElseIf ((_T_0 == 0x46))
                            {
                                Local1 = 0x05
                            }
                            ElseIf ((_T_0 == 0x54))
                            {
                                Local1 = 0x06
                            }
                            ElseIf ((_T_0 == 0x64))
                            {
                                Local1 = 0x07
                            }

                            If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                            {
                                BLVL = Local1
                            }
                        }

                        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                            If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                            {
                                Local0 = BLVL /* \_SB_.BLVL */
                            }

                            _T_0 = ToInteger (Local0)
                            If ((_T_0 == Zero))
                            {
                                Local1 = Zero
                            }
                            ElseIf ((_T_0 == One))
                            {
                                Local1 = 0x0E
                            }
                            ElseIf ((_T_0 == 0x02))
                            {
                                Local1 = 0x1C
                            }
                            ElseIf ((_T_0 == 0x03))
                            {
                                Local1 = 0x2A
                            }
                            ElseIf ((_T_0 == 0x04))
                            {
                                Local1 = 0x38
                            }
                            ElseIf ((_T_0 == 0x05))
                            {
                                Local1 = 0x46
                            }
                            ElseIf ((_T_0 == 0x06))
                            {
                                Local1 = 0x54
                            }
                            ElseIf ((_T_0 == 0x07))
                            {
                                Local1 = 0x64
                            }

                            Return (Local1)
                        }
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Name (_PSC, Zero)  // _PSC: Power State Current
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            _PSC = Zero
                        }

                        Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                        {
                            _PSC = One
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }

                        Name (_DCS, 0x1B)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Local0 = Arg0
                            If ((Local0 & One))
                            {
                                Debug = "CRT._DSS(1) called"
                                NDSP |= 0x02
                            }
                            Else
                            {
                                Debug = "CRT._DSS(0) called"
                                NDSP &= 0xFD
                            }

                            Local0 &= 0xC0000000
                            Local0 &= 0x80000000
                            If ((Local0 != Zero))
                            {
                                Debug = "CRT._DSS, update next _DGS"
                                ^^LCD._DCS = ((^^LCD._DCS & 0xFD) | ((NDSP & One) << One
                                    ))
                                _DCS = ((_DCS & 0xFD) | (NDSP & 0x02))
                                ^^TV._DCS = ((^^TV._DCS & 0xFD) | ((NDSP & 0x04) >> One
                                    ))
                                UDGS ()
                            }
                        }
                    }

                    Device (TV)
                    {
                        Name (_ADR, 0x80006342)  // _ADR: Address
                        Name (_PSC, Zero)  // _PSC: Power State Current
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            _PSC = Zero
                        }

                        Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                        {
                            _PSC = One
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }

                        Name (_DCS, 0x1B)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Local0 = Arg0
                            If ((Local0 & One))
                            {
                                Debug = "TV_._DSS(1) called"
                                NDSP |= 0x04
                            }
                            Else
                            {
                                Debug = "TV_._DSS(0) called"
                                NDSP &= 0xFB
                            }

                            Local0 &= 0xC0000000
                            Local0 &= 0x80000000
                            If ((Local0 != Zero))
                            {
                                Debug = "TV_._DSS, update next _DGS"
                                ^^LCD._DCS = ((^^LCD._DCS & 0xFD) | ((NDSP & One) << One
                                    ))
                                ^^CRT._DCS = ((^^CRT._DCS & 0xFD) | (NDSP & 0x02))
                                _DCS = ((_DCS & 0xFD) | ((NDSP & 0x04) >> One
                                    ))
                                UDGS ()
                            }
                        }
                    }

                    Device (DFP)
                    {
                        Name (_ADR, 0x80007330)  // _ADR: Address
                        Name (_PSC, Zero)  // _PSC: Power State Current
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            _PSC = Zero
                        }

                        Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
                        {
                            _PSC = One
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            _PSC = 0x03
                        }

                        Name (_DCS, 0x1B)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            Local0 = Arg0
                            If ((Local0 & One))
                            {
                                Debug = "DFP._DSS(1) called"
                                NDSP |= 0x04
                            }
                            Else
                            {
                                Debug = "DFP._DSS(0) called"
                                NDSP &= 0xFB
                            }

                            Local0 &= 0xC0000000
                            Local0 &= 0x80000000
                            If ((Local0 != Zero))
                            {
                                Debug = "DFP._DSS, update next _DGS"
                                ^^LCD._DCS = ((^^LCD._DCS & 0xFD) | ((NDSP & One) << One
                                    ))
                                ^^CRT._DCS = ((^^CRT._DCS & 0xFD) | (NDSP & 0x02))
                                ^^TV._DCS = ((^^TV._DCS & 0xFD) | ((NDSP & 0x04) >> One
                                    ))
                                _DCS = ((_DCS & 0xFD) | ((NDSP & 0x08) >> One
                                    ))
                                UDGS ()
                            }
                        }
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DISW = Arg0
                        Local0 = ((DISW & 0x04) >> 0x02)
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x04)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x80006342, 
                            0x80007330
                        })
                    }

                    Method (DRUL, 1, NotSerialized)
                    {
                        USTA ()
                        UDGS ()
                        PDSP = CDSP /* \_SB_.PCI0.P0P2.VGA_.CDSP */
                        Local2 = CDSP /* \_SB_.PCI0.P0P2.VGA_.CDSP */
                        Local1 = ^CRT._DCS /* \_SB_.PCI0.P0P2.VGA_.CRT_._DCS */
                        ^CRT._DCS = ((((Local2 & 0x02) << 0x03) | ((
                            Local2 & 0x20) >> 0x04)) | (Local1 & 0x0D))
                        Local3 = ^TV._DCS /* \_SB_.PCI0.P0P2.VGA_.TV__._DCS */
                        ^TV._DCS = ((((Local2 & 0x04) << 0x02) | ((
                            Local2 & 0x40) >> 0x05)) | (Local3 & 0x0D))
                        Local4 = ^DFP._DCS /* \_SB_.PCI0.P0P2.VGA_.DFP_._DCS */
                        ^DFP._DCS = ((((Local2 & 0x08) << One) | ((
                            Local2 & 0x80) >> 0x06)) | (Local4 & 0x0D))
                        If ((Arg0 == One))
                        {
                            If (((^CRT._DGS && !(^CRT._DCS & 0x10)) || (^TV._DGS && !
                                (^TV._DCS & 0x10))))
                            {
                                UDGS ()
                                Return (Zero)
                            }
                            Else
                            {
                                Notify (VGA, 0x80) // Status Change
                                Notify (^^^P0P3.VGA, 0x80) // Status Change
                                Return (Zero)
                            }
                        }
                    }

                    Method (USTA, 0, NotSerialized)
                    {
                        CDSP = PHSR (0x04, Zero)
                        Local1 = (CDSP & 0x0F)
                        If (((Local1 & 0x0C) == 0x0C))
                        {
                            Local1 &= 0x77
                        }

                        If ((Local1 == 0x03))
                        {
                            TGLP = One
                        }
                        ElseIf ((Local1 == 0x05))
                        {
                            TGLP = 0x02
                        }
                        ElseIf ((Local1 == 0x07))
                        {
                            TGLP = 0x03
                        }
                        ElseIf ((Local1 == 0x09))
                        {
                            TGLP = 0x04
                        }
                        ElseIf ((Local1 == 0x0B))
                        {
                            TGLP = 0x05
                        }
                        Else
                        {
                            TGLP = Zero
                        }
                    }

                    Method (UDGS, 0, NotSerialized)
                    {
                        Local0 = (^LCD._DGS & One)
                        Local0 |= ((^CRT._DGS & One) << One)
                        Local0 |= ((^TV._DGS & One) << 0x02)
                        Local0 |= ((^DFP._DGS & One) << 0x03)
                        Local1 = DerefOf (DerefOf (TGLT [TGLP]) [Local0])
                        ^LCD._DGS = (Local1 & One)
                        ^CRT._DGS = ((Local1 & 0x02) >> One)
                        ^TV._DGS = ((Local1 & 0x04) >> 0x02)
                        ^DFP._DGS = ((Local1 & 0x08) >> 0x03)
                    }
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01 ())
                    }

                    Return (PR01 ())
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (PCI0.LPCB.LPC1, PCI_Config, 0x40, 0xC0)
                    Field (PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x20), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        Offset (0x28), 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PARC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLA, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PARC & 0x0F))
                            Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PARC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PARC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PBRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLB, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PBRC & 0x0F))
                            Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PBRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PBRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PCRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLC, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PCRC & 0x0F))
                            Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PCRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PCRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PDRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLD, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PDRC & 0x0F))
                            Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PDRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PDRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PERC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLE, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PERC & 0x0F))
                            Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PERC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PERC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PFRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLF, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PFRC & 0x0F))
                            Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PFRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PFRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PGRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLG, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PGRC & 0x0F))
                            Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PGRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PGRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PHRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLH, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PHRC & 0x0F))
                            Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PHRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PHRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0x48), 
                    Z000,   1, 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Scope (\_SB)
                {
                    OperationRegion (EMEM, SystemMemory, 0xFF808001, 0xFF)
                    Field (EMEM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        CMCM,   8, 
                        CMD1,   8, 
                        CMD2,   8, 
                        CMD3,   8, 
                        Offset (0x18), 
                        Offset (0x19), 
                        SMST,   8, 
                        MBMN,   48, 
                        Offset (0x24), 
                        MBPN,   96, 
                        GPB1,   8, 
                        GPB2,   8, 
                        GPB3,   8, 
                        GPB4,   8, 
                        GPB5,   8, 
                        GPB6,   8, 
                        GPB7,   8, 
                        GPB8,   8, 
                        Offset (0x3D), 
                        SMAA,   8, 
                        Offset (0x40), 
                        ACDF,   1, 
                            ,   1, 
                        PFLG,   1, 
                        Offset (0x41), 
                            ,   4, 
                        FPR1,   1, 
                        FLS4,   1, 
                        S5LW,   1, 
                        Offset (0x42), 
                        Offset (0x43), 
                        TMSS,   2, 
                            ,   2, 
                            ,   3, 
                        WLID,   1, 
                            ,   2, 
                        HPCF,   1, 
                        SCFE,   1, 
                            ,   2, 
                        PWBT,   1, 
                        Offset (0x45), 
                        VFAN,   1, 
                        Offset (0x46), 
                        RL01,   1, 
                        RD01,   1, 
                        RF01,   1, 
                        RP01,   1, 
                        RB01,   1, 
                        RC01,   1, 
                            ,   1, 
                        R701,   1, 
                        R801,   1, 
                        RM01,   1, 
                        RI01,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        RA01,   1, 
                        RR01,   1, 
                        RL10,   1, 
                        RD10,   1, 
                        RF10,   1, 
                        RP10,   1, 
                        RB10,   1, 
                        RC10,   1, 
                            ,   1, 
                        R710,   1, 
                        LEDS,   1, 
                        RM10,   1, 
                        RI10,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        FBES,   1, 
                        ECOF,   1, 
                            ,   1, 
                        BAYE,   1, 
                        PRDE,   1, 
                        WP01,   1, 
                        WB01,   1, 
                        WC01,   1, 
                            ,   1, 
                        W701,   1, 
                        W801,   1, 
                        WM01,   1, 
                        WI01,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        WA01,   1, 
                        WR01,   1, 
                        CCBC,   1, 
                        BAYI,   1, 
                        PRCT,   1, 
                        WP10,   1, 
                        WB10,   1, 
                        DSPL,   1, 
                            ,   1, 
                        W710,   1, 
                        W810,   1, 
                        WM10,   1, 
                        WI10,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        WA10,   1, 
                        WR10,   1, 
                        Offset (0x50), 
                        SLPM,   3, 
                            ,   2, 
                        POLG,   1, 
                        ILDF,   1, 
                        Offset (0x51), 
                        BLVL,   8, 
                        SLPL,   8, 
                        DOFF,   8, 
                        Offset (0x57), 
                        RG57,   8, 
                        CTMP,   8, 
                        RG59,   8, 
                        FSP2,   16, 
                        FSPD,   16, 
                        Offset (0x60), 
                            ,   2, 
                        CPLE,   1, 
                        KSWH,   1, 
                            ,   2, 
                        RFST,   1, 
                        BTHE,   1, 
                        TPAD,   1, 
                            ,   1, 
                        FELI,   1, 
                        USBP,   1, 
                            ,   1, 
                        W3GE,   1, 
                            ,   1, 
                        TJ85,   1, 
                        Offset (0x63), 
                            ,   1, 
                            ,   1, 
                            ,   5, 
                        VGAF,   1, 
                        Offset (0x70), 
                        BTMD,   8, 
                        MBTS,   1, 
                        MBTF,   1, 
                        Offset (0x72), 
                        MBTC,   1, 
                            ,   2, 
                        LION,   1, 
                        Offset (0x74), 
                            ,   3, 
                            ,   1, 
                        BLTH,   1, 
                        Offset (0x75), 
                        BATS,   16, 
                        BA1C,   8, 
                        MCLC,   8, 
                        Offset (0x7A), 
                        MTEM,   16, 
                        MBMD,   16, 
                        MCUR,   16, 
                        MBRM,   16, 
                        MBVG,   16, 
                        Offset (0x87), 
                        BA2C,   8, 
                        LFCC,   16, 
                        BTSN,   16, 
                        BTDC,   16, 
                        BTDV,   16, 
                        BTMN,   8, 
                        Offset (0x93), 
                        BTST,   8, 
                        Offset (0xA0), 
                        HDX1,   16, 
                        HDY1,   16, 
                        HDZ1,   16, 
                        HDX2,   16, 
                        HDY2,   16, 
                        HDZ2,   16, 
                        HDX3,   16, 
                        HDY3,   16, 
                        HDZ3,   16, 
                        HDX4,   16, 
                        HDY4,   16, 
                        HDZ4,   16, 
                        Offset (0xB9), 
                        EXCC,   8, 
                        PPBC,   8, 
                        RFSC,   8, 
                        ACAC,   8, 
                        BTCC,   8, 
                        PAOC,   8, 
                        FPOC,   8, 
                        VOLC,   8, 
                        Offset (0xC3), 
                        EPFE,   8, 
                        EPFF,   8, 
                        PWM1,   8, 
                        PWM2,   8, 
                        ACVO,   8, 
                        ACCU,   16, 
                        ACCA,   8, 
                        REFT,   8, 
                        Offset (0xCE), 
                        PECL,   1, 
                        PECB,   1, 
                        PECC,   1, 
                        Offset (0xD0), 
                        EBPL,   1, 
                        CIRE,   1, 
                        USF1,   1, 
                            ,   2, 
                        USF2,   1, 
                        DQ7X,   1, 
                        Offset (0xD1), 
                        PWRE,   1, 
                        Offset (0xD2), 
                            ,   6, 
                        VAUX,   1, 
                        Offset (0xD4), 
                        S3WT,   1, 
                            ,   3, 
                        WS3W,   1, 
                        Offset (0xD6), 
                        DBPL,   8, 
                        Offset (0xDE), 
                        PLID,   8, 
                        Offset (0xE0), 
                        CSV1,   16, 
                        CSV2,   16, 
                        CSV3,   16, 
                        CSV4,   16, 
                        CTTO,   8, 
                        CTTB,   8, 
                        Offset (0xEF), 
                        DALB,   8, 
                        OSTP,   1, 
                        CIRF,   1, 
                            ,   4, 
                        HEUE,   1, 
                        BEUE,   1, 
                        Offset (0xF2), 
                        VEVT,   16, 
                        FEVT,   16, 
                        NEVT,   16
                    }
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                    Name (_GPE, 0x1E)  // _GPE: General Purpose Events
                    Name (SEL0, 0xF0)
                    Name (BFLG, Zero)
                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            Local0 = Arg1
                            If (Local0)
                            {
                                ECOK = One
                                Acquire (MUT1, 0xFFFF)
                                TMOD = \TMOD
                                Release (MUT1)
                            }
                            Else
                            {
                                ECOK = Zero
                            }
                        }

                        If (ECOK)
                        {
                            Acquire (MUT1, 0xFFFF)
                            If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                            {
                                OSTP = One
                            }
                            Else
                            {
                                OSTP = Zero
                            }

                            RG59 = 0x03
                            BLTH = BTEN /* \_SB_.BTEN */
                            WLAN = ^^^^WLAN /* \_SB_.WLAN */
                            CPLE = One
                            DOFF = PHSR (0x03, Zero)
                            FBES = FBBS /* \_SB_.FBBS */
                            PHSR (0x0E, Zero)
                            Release (MUT1)
                            ALMF = Zero
                        }
                    }

                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x04), 
                        CMCM,   8, 
                        CMD1,   8, 
                        CMD2,   8, 
                        CMD3,   8, 
                        Offset (0x18), 
                        Offset (0x19), 
                        SMST,   8, 
                        MBMN,   48, 
                        Offset (0x24), 
                        MBPN,   96, 
                        GPB1,   8, 
                        GPB2,   8, 
                        GPB3,   8, 
                        GPB4,   8, 
                        GPB5,   8, 
                        GPB6,   8, 
                        GPB7,   8, 
                        GPB8,   8, 
                        Offset (0x3D), 
                        SMAA,   8, 
                        Offset (0x40), 
                        ACDF,   1, 
                            ,   1, 
                        PFLG,   1, 
                        Offset (0x41), 
                            ,   4, 
                        FPR1,   1, 
                        FLS4,   1, 
                        S5LW,   1, 
                        Offset (0x42), 
                        Offset (0x43), 
                        TMSS,   2, 
                            ,   2, 
                            ,   3, 
                        WLID,   1, 
                            ,   2, 
                        HPCF,   1, 
                        SCFE,   1, 
                            ,   2, 
                        PWBT,   1, 
                        Offset (0x45), 
                        VFAN,   1, 
                        Offset (0x46), 
                        RL01,   1, 
                        RD01,   1, 
                        RF01,   1, 
                        RP01,   1, 
                        RB01,   1, 
                        RC01,   1, 
                            ,   1, 
                        R701,   1, 
                        R801,   1, 
                        RM01,   1, 
                        RI01,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        RA01,   1, 
                        RR01,   1, 
                        RL10,   1, 
                        RD10,   1, 
                        RF10,   1, 
                        RP10,   1, 
                        RB10,   1, 
                        RC10,   1, 
                            ,   1, 
                        R710,   1, 
                        LEDS,   1, 
                        RM10,   1, 
                        RI10,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        FBES,   1, 
                        ECOF,   1, 
                            ,   1, 
                        BAYE,   1, 
                        PRDE,   1, 
                        WP01,   1, 
                        WB01,   1, 
                        WC01,   1, 
                            ,   1, 
                        W701,   1, 
                        W801,   1, 
                        WM01,   1, 
                        WI01,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        WA01,   1, 
                        WR01,   1, 
                        CCBC,   1, 
                        BAYI,   1, 
                        PRCT,   1, 
                        WP10,   1, 
                        WB10,   1, 
                        DSPL,   1, 
                        LIDS,   1, 
                        W710,   1, 
                        W810,   1, 
                        WM10,   1, 
                        WI10,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        WA10,   1, 
                        WR10,   1, 
                        Offset (0x50), 
                        SLPM,   3, 
                            ,   2, 
                        POLG,   1, 
                        ILDF,   1, 
                        Offset (0x51), 
                        BLVL,   8, 
                        SLPL,   8, 
                        DOFF,   8, 
                        Offset (0x57), 
                        RG57,   8, 
                        CTMP,   8, 
                        RG59,   8, 
                        FSP2,   16, 
                        FSPD,   16, 
                        Offset (0x60), 
                            ,   2, 
                        CPLE,   1, 
                        KSWH,   1, 
                            ,   2, 
                        RFST,   1, 
                        BTHE,   1, 
                        TPAD,   1, 
                            ,   1, 
                        FELI,   1, 
                        USBP,   1, 
                            ,   1, 
                        W3GE,   1, 
                            ,   1, 
                        TJ85,   1, 
                        Offset (0x63), 
                            ,   1, 
                        TMOD,   1, 
                            ,   5, 
                        VGAF,   1, 
                        Offset (0x70), 
                        BTMD,   8, 
                        MBTS,   1, 
                        MBTF,   1, 
                        Offset (0x72), 
                        MBTC,   1, 
                            ,   2, 
                        LION,   1, 
                        Offset (0x74), 
                            ,   3, 
                        WLAN,   1, 
                        BLTH,   1, 
                        Offset (0x75), 
                        BATS,   16, 
                        BA1C,   8, 
                        MCLC,   8, 
                        Offset (0x7A), 
                        MTEM,   16, 
                        MBMD,   16, 
                        MCUR,   16, 
                        MBRM,   16, 
                        MBVG,   16, 
                        Offset (0x87), 
                        BA2C,   8, 
                        LFCC,   16, 
                        BTSN,   16, 
                        BTDC,   16, 
                        BTDV,   16, 
                        BTMN,   8, 
                        Offset (0x93), 
                        BTST,   8, 
                        Offset (0xA0), 
                        HDX1,   16, 
                        HDY1,   16, 
                        HDZ1,   16, 
                        HDX2,   16, 
                        HDY2,   16, 
                        HDZ2,   16, 
                        HDX3,   16, 
                        HDY3,   16, 
                        HDZ3,   16, 
                        HDX4,   16, 
                        HDY4,   16, 
                        HDZ4,   16, 
                        Offset (0xB9), 
                        EXCC,   8, 
                        PPBC,   8, 
                        RFSC,   8, 
                        ACAC,   8, 
                        BTCC,   8, 
                        PAOC,   8, 
                        FPOC,   8, 
                        VOLC,   8, 
                        Offset (0xC3), 
                        EPFE,   8, 
                        EPFF,   8, 
                        PWM1,   8, 
                        PWM2,   8, 
                        ACVO,   8, 
                        ACCU,   16, 
                        ACCA,   8, 
                        REFT,   8, 
                        Offset (0xCE), 
                        PECL,   1, 
                        PECB,   1, 
                        PECC,   1, 
                        Offset (0xD0), 
                        EBPL,   1, 
                        CIRE,   1, 
                        USF1,   1, 
                            ,   2, 
                        USF2,   1, 
                        DQ7X,   1, 
                        Offset (0xD1), 
                        PWRE,   1, 
                            ,   1, 
                        EDTS,   1, 
                        Offset (0xD2), 
                            ,   6, 
                        VAUX,   1, 
                        Offset (0xD4), 
                        S3WT,   1, 
                            ,   3, 
                        WS3W,   1, 
                        Offset (0xD6), 
                        DBPL,   8, 
                        Offset (0xDE), 
                        PLID,   8, 
                        Offset (0xE0), 
                        CSV1,   16, 
                        CSV2,   16, 
                        CSV3,   16, 
                        CSV4,   16, 
                        CTTO,   8, 
                        CTTB,   8, 
                        Offset (0xEF), 
                        DALB,   8, 
                        OSTP,   1, 
                        CIRF,   1, 
                            ,   4, 
                        HEUE,   1, 
                        BEUE,   1, 
                        Offset (0xF2), 
                        VEVT,   16, 
                        FEVT,   16, 
                        NEVT,   16
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        SMW0,   16
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        SMB0,   8
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        FLD0,   64
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        FLD1,   128
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        FLD2,   192
                    }

                    Field (ERAM, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x1C), 
                        FLD3,   256
                    }

                    Mutex (MUT1, 0x00)
                    Mutex (MUT0, 0x00)
                    Method (APOL, 1, NotSerialized)
                    {
                        DBPL = Arg0
                        EBPL = One
                    }

                    Name (PSTA, Zero)
                    Method (CPOL, 1, NotSerialized)
                    {
                        If ((PSTA == Zero))
                        {
                            If ((ECOK != Zero))
                            {
                                APOL (Arg0)
                                PSTA = One
                            }
                        }
                    }

                    Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x20
                        If (ECOK)
                        {
                            Acquire (MUT1, 0xFFFF)
                            If ((SMST & 0x40))
                            {
                                Local0 = SMAA /* \_SB_.PCI0.LPCB.EC0_.SMAA */
                                If ((Local0 == 0x14))
                                {
                                    SMST &= 0xBF
                                    Local1 = PWRE /* \_SB_.PCI0.LPCB.EC0_.PWRE */
                                    If (Local1)
                                    {
                                        PWRE = Zero
                                        BFLG = 0x12
                                        CPOL (One)
                                    }
                                }

                                If ((Local0 == 0x16))
                                {
                                    SMST &= 0xBF
                                    ^^^^BAT1.BCRI = 0x04
                                    Notify (BAT1, 0x80) // Status Change
                                }
                                Else
                                {
                                    ^^^^BAT1.BCRI = Zero
                                }
                            }

                            Release (MUT1)
                        }
                    }

                    Name (CONT, Zero)
                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x09
                        If (ECOK)
                        {
                            Acquire (MUT1, 0xFFFF)
                            PSTA = Zero
                            Release (MUT1)
                            ^^^^BAT1.BSTA ()
                            Notify (ACAD, 0x80) // Status Change
                            Sleep (0x01F4)
                            Notify (BAT1, 0x80) // Status Change
                            If (^^^^BAT1.BTCH)
                            {
                                ^^^^BAT1.UBIF ()
                                Notify (BAT1, 0x81) // Information Change
                                ^^^^BAT1.BTCH = Zero
                            }
                        }

                        PHSR (0x08, Zero)
                        If (SATT)
                        {
                            SATT = Zero
                            ^^^SAT0.P4EN = Zero
                            Sleep (0x01F4)
                            ^^^SAT0.P4EN = One
                            Sleep (0x64)
                            Notify (SAT0, Zero) // Bus Check
                        }

                        If (MID9)
                        {
                            If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                            {
                                PHSR (0x0E, HS4S)
                            }
                        }

                        Acquire (MUT1, 0xFFFF)
                        ^^^^TVAP.MBPN = MBPN /* \_SB_.PCI0.LPCB.EC0_.MBPN */
                        ^^^^TVAP.MBMN = MBMN /* \_SB_.PCI0.LPCB.EC0_.MBMN */
                        ^^^^TVAP.MBMD = MBMD /* \_SB_.PCI0.LPCB.EC0_.MBMD */
                        ^^^^TVAP.BTSN = BTSN /* \_SB_.PCI0.LPCB.EC0_.BTSN */
                        ^^^^TVAP.MCLC = MCLC /* \_SB_.PCI0.LPCB.EC0_.MCLC */
                        ^^^^TVAP.CTTB = CTTB /* \_SB_.PCI0.LPCB.EC0_.CTTB */
                        ^^^^TVAP.CTTO = CTTO /* \_SB_.PCI0.LPCB.EC0_.CTTO */
                        ^^^^TVAP.BTDV = BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                        ^^^^TVAP.BTDC = BTDC /* \_SB_.PCI0.LPCB.EC0_.BTDC */
                        ^^^^TVAP.LFCC = LFCC /* \_SB_.PCI0.LPCB.EC0_.LFCC */
                        ^^^^TVAP.ACCA = ACCA /* \_SB_.PCI0.LPCB.EC0_.ACCA */
                        Release (MUT1)
                        P80H = 0xB0
                    }

                    Name (GSCT, Zero)
                    Name (GSFA, Zero)
                    Name (GSFB, Zero)
                    Name (GSFC, Zero)
                    Name (Q70F, One)
                    Method (_Q70, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        If ((Q70F == One))
                        {
                            Q70F = Zero
                            ^^^^TVAP.GSRT ()
                            ^^^^TVAP.DSPL = ^^^^DSPL /* \_SB_.DSPL */
                            If (^^^^TVAP.GPCL)
                            {
                                ^^^^GPB1 = Zero
                                ^^^^GPB2 = Zero
                                ^^^^GPB3 = Zero
                                ^^^^GPB4 = Zero
                                ^^^^GPB5 = Zero
                                ^^^^GPB6 = Zero
                                ^^^^GPB7 = Zero
                                ^^^^GPB8 = Zero
                                ^^^^TVAP.GPCL = Zero
                            }

                            If (^^^^TVAP.PHCL)
                            {
                                ^^^^EXCC = Zero
                                ^^^^RFSC = Zero
                                ^^^^VOLC = Zero
                                ^^^^PAOC = Zero
                                ^^^^ACAC = Zero
                                ^^^^FPOC = Zero
                                ^^^^PPBC = Zero
                                ^^^^TVAP.PHCL = Zero
                            }

                            If (^^^^TVAP.BTCL)
                            {
                                ^^^^BTCC = Zero
                                ^^^^TVAP.BTCL = Zero
                            }

                            If ((GSCT == Zero))
                            {
                                Local0 = ^^^^GPB1 /* \_SB_.GPB1 */
                                Local1 = ^^^^GPB2 /* \_SB_.GPB2 */
                                Local2 = ^^^^GPB3 /* \_SB_.GPB3 */
                                Local3 = ^^^^GPB4 /* \_SB_.GPB4 */
                                ^^^^TVAP.GPBA = ((((((Local3 << 0x08) | Local2) << 
                                    0x08) | Local1) << 0x08) | Local0)
                                GSCT++
                            }
                            ElseIf ((GSCT == One))
                            {
                                Local4 = ^^^^GPB5 /* \_SB_.GPB5 */
                                Local5 = ^^^^GPB6 /* \_SB_.GPB6 */
                                Local6 = ^^^^GPB7 /* \_SB_.GPB7 */
                                Local7 = ^^^^GPB8 /* \_SB_.GPB8 */
                                ^^^^TVAP.GPBB = ((((((Local7 << 0x08) | Local6) << 
                                    0x08) | Local5) << 0x08) | Local4)
                                GSCT++
                            }
                            ElseIf ((GSCT == 0x02))
                            {
                                ^^^^TVAP.EXCC = ^^^^EXCC /* \_SB_.EXCC */
                                ^^^^TVAP.VOLC = ^^^^VOLC /* \_SB_.VOLC */
                                ^^^^TVAP.PAOC = ^^^^PAOC /* \_SB_.PAOC */
                                GSCT++
                            }
                            ElseIf ((GSCT == 0x03))
                            {
                                ^^^^TVAP.BTCC = ^^^^BTCC /* \_SB_.BTCC */
                                ^^^^TVAP.DSPL = ^^^^DSPL /* \_SB_.DSPL */
                                ^^^^TVAP.MBTS = ^^^^MBTS /* \_SB_.MBTS */
                                _T_0 = ToInteger (^^^^TVAP.HCWR)
                                If ((_T_0 == One))
                                {
                                    ^^^^HPCF = ^^^^TVAP.HPCF /* \_SB_.TVAP.HPCF */
                                    ^^^^TVAP.HCWR = Zero
                                }
                                ElseIf ((_T_0 == Zero))
                                {
                                    ^^^^TVAP.HPCF = ^^^^HPCF /* \_SB_.HPCF */
                                }

                                GSCT++
                            }
                            ElseIf ((GSCT == 0x04))
                            {
                                ^^^^TVAP.RFSC = ^^^^RFSC /* \_SB_.RFSC */
                                ^^^^TVAP.ACAC = ^^^^ACAC /* \_SB_.ACAC */
                                ^^^^TVAP.FPOC = ^^^^FPOC /* \_SB_.FPOC */
                                ^^^^TVAP.PPBC = ^^^^PPBC /* \_SB_.PPBC */
                                GSCT++
                            }
                            ElseIf ((GSCT == 0x05))
                            {
                                If ((GSFA == Zero))
                                {
                                    ^^^^TVAP.PWM1 = ^^^^PWM1 /* \_SB_.PWM1 */
                                    ^^^^TVAP.PWM2 = ^^^^PWM2 /* \_SB_.PWM2 */
                                    ^^^^TVAP.FSPD = ^^^^FSPD /* \_SB_.FSPD */
                                    GSFA++
                                }
                                ElseIf ((GSFA == One))
                                {
                                    ^^^^TVAP.ACCU = ^^^^ACCU /* \_SB_.ACCU */
                                    ^^^^TVAP.RG59 = ^^^^RG59 /* \_SB_.RG59 */
                                    ^^^^TVAP.CTMP = ^^^^CTMP /* \_SB_.CTMP */
                                    ^^^^TVAP.ACDF = ^^^^ACDF /* \_SB_.ACDF */
                                    ^^^^TVAP.ACVO = ^^^^ACVO /* \_SB_.ACVO */
                                    GSFA++
                                }
                                ElseIf ((GSFA == 0x02))
                                {
                                    ^^^^TVAP.MBVG = ^^^^MBVG /* \_SB_.MBVG */
                                    If (^^^^TVAP.ECWR)
                                    {
                                        Local1 = ^^^^TVAP.PECT /* \_SB_.TVAP.PECT */
                                        ^^^^TVAP.PECB = (Local1 & One)
                                        ^^^^TVAP.PECL = ((Local1 >> One) & One)
                                        ^^^^TVAP.PECC = ((Local1 >> 0x03) & One)
                                        ^^^^PECB = ^^^^TVAP.PECB /* \_SB_.TVAP.PECB */
                                        ^^^^PECL = ^^^^TVAP.PECL /* \_SB_.TVAP.PECL */
                                        ^^^^PECC = ^^^^TVAP.PECC /* \_SB_.TVAP.PECC */
                                        If (^^^^TVAP.PECL)
                                        {
                                            If (^^^^TVAP.DSPL)
                                            {
                                                ^^^^TVAP.EVNT (0xB2)
                                            }
                                            Else
                                            {
                                                ^^^^TVAP.EVNT (0xB3)
                                            }
                                        }

                                        ^^^^TVAP.ECWR = Zero
                                    }
                                    Else
                                    {
                                        ^^^^TVAP.PECB = ^^^^PECB /* \_SB_.PECB */
                                        ^^^^TVAP.PECL = ^^^^PECL /* \_SB_.PECL */
                                        ^^^^TVAP.PECC = ^^^^PECC /* \_SB_.PECC */
                                    }

                                    GSFA = Zero
                                }

                                GSCT++
                            }
                            ElseIf ((GSCT == 0x06))
                            {
                                If ((GSFB == Zero))
                                {
                                    ^^^^TVAP.HMX1 = ^^^^HDX1 /* \_SB_.HDX1 */
                                    ^^^^TVAP.HMY1 = ^^^^HDY1 /* \_SB_.HDY1 */
                                    GSFB++
                                }
                                ElseIf ((GSFB == One))
                                {
                                    ^^^^TVAP.HMX3 = ^^^^HDX3 /* \_SB_.HDX3 */
                                    ^^^^TVAP.HMY3 = ^^^^HDY3 /* \_SB_.HDY3 */
                                    GSFB++
                                }
                                ElseIf ((GSFB == 0x02))
                                {
                                    ^^^^TVAP.HMX4 = ^^^^HDX4 /* \_SB_.HDX4 */
                                    ^^^^TVAP.HMY4 = ^^^^HDY4 /* \_SB_.HDY4 */
                                    ^^^^HAPS.HPNA = One
                                    GSFB = Zero
                                }

                                GSCT++
                            }
                            ElseIf ((GSCT == 0x07))
                            {
                                If ((GSFC == Zero))
                                {
                                    ^^^^TVAP.ACDF = ^^^^ACDF /* \_SB_.ACDF */
                                    ^^^^TVAP.ACVO = ^^^^ACVO /* \_SB_.ACVO */
                                    ^^^^TVAP.MCUR = ^^^^MCUR /* \_SB_.MCUR */
                                    ^^^^TVAP.HMZ1 = ^^^^HDZ1 /* \_SB_.HDZ1 */
                                    GSFC++
                                }
                                ElseIf ((GSFC == One))
                                {
                                    ^^^^TVAP.HMZ3 = ^^^^HDZ3 /* \_SB_.HDZ3 */
                                    ^^^^TVAP.FSP2 = ^^^^FSP2 /* \_SB_.FSP2 */
                                    GSFC++
                                }
                                ElseIf ((GSFC == 0x02))
                                {
                                    ^^^^TVAP.HMZ4 = ^^^^HDZ4 /* \_SB_.HDZ4 */
                                    PHSR (0x1A, Zero)
                                    ^^^^TVAP.INTC = INF /* \_SB_.INF_ */
                                    If (^^^^TVAP.PHIF)
                                    {
                                        ^^^^EPFE = ^^^^TVAP.EPFE /* \_SB_.TVAP.EPFE */
                                        ^^^^EPFF = ^^^^TVAP.EPFF /* \_SB_.TVAP.EPFF */
                                        ^^^^TVAP.PHIF = Zero
                                    }
                                    Else
                                    {
                                        ^^^^TVAP.EPFE = ^^^^EPFE /* \_SB_.EPFE */
                                        ^^^^TVAP.EPFF = ^^^^EPFF /* \_SB_.EPFF */
                                    }

                                    GSFC = Zero
                                }

                                GSCT = Zero
                            }

                            Q70F = One
                        }
                    }

                    Method (_Q71, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        ^^^^TVAP.MBTS = ^^^^MBTS /* \_SB_.MBTS */
                        If (^^^^TVAP.MBTS)
                        {
                            ^^^^TVAP.BATS = ^^^^BATS /* \_SB_.BATS */
                            ^^^^TVAP.MBRM = ^^^^MBRM /* \_SB_.MBRM */
                            ^^^^TVAP.CSV2 = ^^^^CSV2 /* \_SB_.CSV2 */
                            ^^^^TVAP.CSV3 = ^^^^CSV3 /* \_SB_.CSV3 */
                            ^^^^TVAP.CSV4 = ^^^^CSV4 /* \_SB_.CSV4 */
                            ^^^^TVAP.MTEM = ^^^^MTEM /* \_SB_.MTEM */
                        }
                    }

                    Method (_Q9B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x9B
                        LDSS = One
                        Notify (LID, 0x80) // Status Change
                    }

                    Method (_Q9C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x9C
                        LDSS = Zero
                        Notify (LID, 0x80) // Status Change
                    }

                    Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xA0
                        PHSR (0x07, 0x18)
                    }

                    Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xA1
                        PHSR (0x07, 0x19)
                    }

                    Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xF5
                        If ((^^^P0P3.VIDE == 0x8086))
                        {
                            ^^^P0P3.VGA.DRUL (One)
                        }
                        Else
                        {
                            ^^^GFX0.GHDS (Zero)
                            ^^^P0P2.VGA.DRUL (One)
                        }
                    }

                    Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (MUT1, 0xFFFF)
                        Local0 = BLVL /* \_SB_.PCI0.LPCB.EC0_.BLVL */
                        If (Local0)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }

                        BLVL = Local0
                        Release (MUT1)
                        Notify (^^^GFX0.DD02, 0x87) // Device-Specific
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Acquire (MUT1, 0xFFFF)
                        Local0 = BLVL /* \_SB_.PCI0.LPCB.EC0_.BLVL */
                        If ((Local0 < 0x07))
                        {
                            Local0++
                        }
                        Else
                        {
                            Local0 = 0x07
                        }

                        BLVL = Local0
                        Release (MUT1)
                        Notify (^^^GFX0.DD02, 0x86) // Device-Specific
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x11
                        BRTU (One)
                        Notify (^^^GFX0.DD04, 0x86) // Device-Specific
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x12
                        BRTD (One)
                        Notify (^^^GFX0.DD04, 0x87) // Device-Specific
                    }

                    Method (_Q8D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x8D
                        FOTL = One
                    }

                    Method (_Q8E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        FOTL = Zero
                    }

                    Method (BRTU, 1, NotSerialized)
                    {
                        Acquire (MUT1, 0xFFFF)
                        Local0 = BLVL /* \_SB_.PCI0.LPCB.EC0_.BLVL */
                        Local0 += Arg0
                        If ((Local0 > 0x07))
                        {
                            Local0 = 0x07
                        }

                        BLVL = Local0
                        Release (MUT1)
                    }

                    Method (BRTD, 1, NotSerialized)
                    {
                        Acquire (MUT1, 0xFFFF)
                        Local0 = BLVL /* \_SB_.PCI0.LPCB.EC0_.BLVL */
                        If ((Local0 > Arg0))
                        {
                            Local0 -= Arg0
                        }
                        Else
                        {
                            Local0 = Zero
                        }

                        BLVL = Local0
                        Release (MUT1)
                    }

                    Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P8XH (Zero, One)
                        Notify (BT, 0x90) // Device-Specific
                    }

                    Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P8XH (Zero, 0x02)
                        Notify (BT, 0x90) // Device-Specific
                    }

                    Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        P8XH (Zero, 0x03)
                        Acquire (MUT1, 0xFFFF)
                        Local0 = (DALB & 0x0F)
                        Release (MUT1)
                        _T_0 = ToInteger (Local0)
                        If ((_T_0 == One))
                        {
                            Notify (DAL1, 0x80) // Status Change
                        }
                        ElseIf ((_T_0 == 0x02))
                        {
                            Notify (DAL2, 0x80) // Status Change
                        }
                        ElseIf ((_T_0 == 0x04))
                        {
                            Notify (DAL3, 0x80) // Status Change
                        }
                        ElseIf ((_T_0 == 0x08))
                        {
                            Notify (DAL4, 0x80) // Status Change
                        }
                    }

                    Method (_Q90, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P8XH (Zero, 0x90)
                        ^^^^TVAP.EVNT (0x02)
                    }

                    Method (_Q91, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P8XH (Zero, 0x91)
                        ^^^^TVAP.EVNT (0x03)
                        Sleep (0x05)
                        ^^^^TVAP.EVNT (0x04)
                    }

                    Method (_Q92, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P8XH (Zero, 0x92)
                        ^^^^TVAP.EVNT (0x02)
                        Sleep (0x05)
                        ^^^^TVAP.EVNT (0x03)
                        Sleep (0x05)
                        ^^^^TVAP.EVNT (0x04)
                    }

                    Method (_QA2, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x40
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            While (One)
                            {
                                If ((^^^^TVAP.VZOK == One))
                                {
                                    Break
                                }

                                Sleep (0x64)
                            }

                            ^^^^TVAP.EVNT (0xA2)
                        }

                        P80H = 0x41
                    }

                    Method (_QA3, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            While (One)
                            {
                                If ((^^^^TVAP.VZOK == One))
                                {
                                    Break
                                }

                                Sleep (0x64)
                            }

                            ^^^^TVAP.EVNT (0xA3)
                        }
                    }

                    Method (_QA4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            While (One)
                            {
                                If ((^^^^TVAP.VZOK == One))
                                {
                                    Break
                                }

                                Sleep (0x64)
                            }

                            ^^^^TVAP.EVNT (0xA4)
                        }
                    }

                    Method (_QA5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            While (One)
                            {
                                If ((^^^^TVAP.VZOK == One))
                                {
                                    Break
                                }

                                Sleep (0x64)
                            }

                            ^^^^TVAP.EVNT (0xA5)
                        }
                    }

                    Method (_QA6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            While (One)
                            {
                                If ((^^^^TVAP.VZOK == One))
                                {
                                    Break
                                }

                                Sleep (0x64)
                            }

                            ^^^^TVAP.EVNT (0xA6)
                        }
                    }

                    Method (_QA7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            While (One)
                            {
                                If ((^^^^TVAP.VZOK == One))
                                {
                                    Break
                                }

                                Sleep (0x64)
                            }

                            ^^^^TVAP.EVNT (0xA7)
                        }
                    }

                    Method (_QA8, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            While (One)
                            {
                                If ((^^^^TVAP.VZOK == One))
                                {
                                    Break
                                }

                                Sleep (0x64)
                            }

                            ^^^^TVAP.EVNT (0xA8)
                        }
                    }

                    Method (_QB0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xB2
                        P80H = 0xB2
                        ^^^^TVAP.EVNT (0xB2)
                    }

                    Method (_QB1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xB3
                        ^^^^TVAP.EVNT (0xB3)
                    }

                    Method (_QB6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            Acquire (MUT1, 0xFFFF)
                            Local0 = PECC /* \_SB_.PCI0.LPCB.EC0_.PECC */
                            Release (MUT1)
                            If (Local0)
                            {
                                ^^^^TVAP.EVNT (0xB6)
                                P80H = 0xB6
                            }
                        }
                    }

                    Method (_QB7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            Acquire (MUT1, 0xFFFF)
                            Local0 = PECC /* \_SB_.PCI0.LPCB.EC0_.PECC */
                            Release (MUT1)
                            If (Local0)
                            {
                                ^^^^TVAP.EVNT (0xB7)
                                P80H = 0xB7
                            }
                        }
                    }

                    Method (_QB4, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            While (One)
                            {
                                If ((^^^^TVAP.VZOK == One))
                                {
                                    Break
                                }

                                Sleep (0x64)
                            }

                            ^^^^TVAP.EVNT (0xB4)
                        }
                    }

                    Method (_QB5, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^^TVAP.VZOK >= One))
                        {
                            While (One)
                            {
                                If ((^^^^TVAP.VZOK == One))
                                {
                                    Break
                                }

                                Sleep (0x64)
                            }

                            ^^^^TVAP.EVNT (0xB5)
                        }
                    }

                    Device (DAL1)
                    {
                        Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (GHID, 0, NotSerialized)
                        {
                            Acquire (MUT1, 0xFFFF)
                            Local0 = (DALB & One)
                            Release (MUT1)
                            If (Local0)
                            {
                                Notify (DAL1, 0x02) // Device Wake
                            }

                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    Device (DAL2)
                    {
                        Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (GHID, 0, NotSerialized)
                        {
                            Acquire (MUT1, 0xFFFF)
                            Local0 = (DALB & 0x02)
                            Release (MUT1)
                            If (Local0)
                            {
                                Notify (DAL2, 0x02) // Device Wake
                            }

                            Return (Buffer (One)
                            {
                                 0x02                                             // .
                            })
                        }
                    }

                    Device (DAL3)
                    {
                        Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (GHID, 0, NotSerialized)
                        {
                            Acquire (MUT1, 0xFFFF)
                            Local0 = (DALB & 0x04)
                            Release (MUT1)
                            If (Local0)
                            {
                                Notify (DAL3, 0x02) // Device Wake
                            }

                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    Device (DAL4)
                    {
                        Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (((OSYS == 0x07D6) | (OSYS == 0x07D9)))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Method (GHID, 0, NotSerialized)
                        {
                            Acquire (MUT1, 0xFFFF)
                            Local0 = (DALB & 0x08)
                            Release (MUT1)
                            If (Local0)
                            {
                                Notify (DAL4, 0x02) // Device Wake
                            }

                            Return (Buffer (One)
                            {
                                 0x04                                             // .
                            })
                        }
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y0E)
                    })
                    Name (BUF1, Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        ElseIf (HPAE)
                        {
                            Return (0x0B)
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y0E._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == One))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }

                            Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                        }
                        Else
                        {
                            Return (BUF1) /* \_SB_.PCI0.LPCB.HPET.BUF1 */
                        }
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0068,             // Range Minimum
                            0x0068,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x006C,             // Range Minimum
                            0x006C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x03E0,             // Range Minimum
                            0x03E0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0600,             // Range Minimum
                            0x0600,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x1180,             // Range Minimum
                            0x1180,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x164E,             // Range Minimum
                            0x164E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (BUF1) /* \_SB_.PCI0.LPCB.RTC_.BUF1 */
                            }
                            Else
                            {
                                Return (BUF0) /* \_SB_.PCI0.LPCB.RTC_.BUF0 */
                            }
                        }
                        Else
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPCB.RTC_.BUF0 */
                        }
                    }
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (BUF1) /* \_SB_.PCI0.LPCB.TIMR.BUF1 */
                            }
                            Else
                            {
                                Return (BUF0) /* \_SB_.PCI0.LPCB.TIMR.BUF0 */
                            }
                        }
                        Else
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPCB.TIMR.BUF0 */
                        }
                    }
                }

                Device (CIR)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If ((OSYS >= 0x07D6))
                        {
                            Return (0x2010A35C)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    OperationRegion (WBIO, SystemIO, 0x2E, 0x02)
                    Field (WBIO, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    Mutex (WBMX, 0x00)
                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x26), 
                        TCIR,   8, 
                        Offset (0x30), 
                        ACTR,   1, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        EWAH,   8, 
                        EWAL,   8, 
                        Offset (0x70), 
                        INTR,   8
                    }

                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (WBMX, 0xFFFF)
                        INDX = 0x07
                        DATA = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        Release (WBMX)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((MID0 == One))
                        {
                            If (FCIR)
                            {
                                Local0 = 0x0F
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                            _DIS ()
                        }

                        Return (Local0)
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ENFG (0x03)
                        ACTR = Zero
                        IOAH = Zero
                        IOAL = Zero
                        INTR = Zero
                        EXFG ()
                        ENFG (0x15)
                        ACTR = Zero
                        EWAH = Zero
                        EWAL = Zero
                        EXFG ()
                    }

                    Method (DCIR, 0, NotSerialized)
                    {
                        ENFG (0x03)
                        ACTR = Zero
                        EXFG ()
                        ENFG (0x15)
                        ACTR = Zero
                        EXFG ()
                    }

                    Method (ECIR, 0, NotSerialized)
                    {
                        ENFG (0x03)
                        ACTR = One
                        EXFG ()
                        ENFG (0x15)
                        ACTR = One
                        EXFG ()
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Name (PRS1, ResourceTemplate ()
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0608,             // Range Minimum
                                    0x0608,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    )
                                IO (Decode16,
                                    0x0610,             // Range Minimum
                                    0x0610,             // Range Maximum
                                    0x01,               // Alignment
                                    0x10,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            EndDependentFn ()
                        })
                        Return (PRS1) /* \_SB_.PCI0.LPCB.CIR_._PRS.PRS1 */
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (CRS1, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0608,             // Range Minimum
                                0x0608,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IO (Decode16,
                                0x0610,             // Range Minimum
                                0x0610,             // Range Maximum
                                0x01,               // Alignment
                                0x10,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                        })
                        Return (CRS1) /* \_SB_.PCI0.LPCB.CIR_._CRS.CRS1 */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ENFG (0x03)
                        INTR = 0x04
                        IOAH = 0x06
                        IOAL = 0x08
                        ACTR = One
                        EXFG ()
                        ENFG (0x15)
                        INTR = Zero
                        EWAH = 0x06
                        EWAL = 0x10
                        ACTR = One
                        EXFG ()
                        Z000 = One
                    }
                }

                Device (CIR2)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (0x2310A35C)
                    }

                    OperationRegion (WBIO, SystemIO, 0x2E, 0x02)
                    Field (WBIO, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    Mutex (WBMX, 0x00)
                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x26), 
                        TCIR,   8, 
                        Offset (0x30), 
                        ACTR,   1, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        EWAH,   8, 
                        EWAL,   8, 
                        Offset (0x70), 
                        INTR,   8
                    }

                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (WBMX, 0xFFFF)
                        INDX = 0x07
                        DATA = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        Release (WBMX)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((MID0 == One))
                        {
                            If (FCIR)
                            {
                                Local0 = 0x0F
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                            _DIS ()
                        }

                        Return (Local0)
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ENFG (0x04)
                        ACTR = Zero
                        IOAH = Zero
                        IOAL = Zero
                        INTR = Zero
                        EXFG ()
                    }

                    Method (DCIR, 0, NotSerialized)
                    {
                        ENFG (0x04)
                        ACTR = Zero
                        EXFG ()
                    }

                    Method (ECIR, 0, NotSerialized)
                    {
                        ENFG (0x04)
                        ACTR = One
                        EXFG ()
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Name (PRS2, ResourceTemplate ()
                        {
                            StartDependentFnNoPri ()
                            {
                                IO (Decode16,
                                    0x0620,             // Range Minimum
                                    0x0620,             // Range Maximum
                                    0x01,               // Alignment
                                    0x20,               // Length
                                    )
                                IRQNoFlags ()
                                    {7}
                            }
                            EndDependentFn ()
                        })
                        Return (PRS2) /* \_SB_.PCI0.LPCB.CIR2._PRS.PRS2 */
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (CRS2, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0620,             // Range Minimum
                                0x0620,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            IRQNoFlags ()
                                {7}
                        })
                        Return (CRS2) /* \_SB_.PCI0.LPCB.CIR2._CRS.CRS2 */
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ENFG (0x04)
                        INTR = 0x07
                        IOAH = 0x06
                        IOAL = 0x20
                        ACTR = One
                        EXFG ()
                        Z000 = One
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("SYN103F"))  // _HID: Hardware ID
                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN1000"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (PS2A)
                {
                    Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = Zero
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
                Device (HUB0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Device (DTVT)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (DTV1)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (DBTH)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (DFEL)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (DFGP)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (DWIF)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }
                    }
                }
            }

            Device (USB1)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
            }

            Device (USB2)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
            }

            Device (USB3)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
            }

            Device (USB4)
            {
                Name (_ADR, 0x001D0004)  // _ADR: Address
            }

            Device (EHC2)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = Zero
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
                Device (HUB0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Device (DCCD)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }
                    }
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x001A0001)  // _ADR: Address
            }

            Device (USB6)
            {
                Name (_ADR, 0x001A0002)  // _ADR: Address
            }

            Device (USB7)
            {
                Name (_ADR, 0x001A0003)  // _ADR: Address
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
                Field (HDAR, WordAcc, NoLock, Preserve)
                {
                    DCKA,   1, 
                    Offset (0x01), 
                    DCKM,   1, 
                        ,   6, 
                    DCKS,   1, 
                    Offset (0x08), 
                        ,   15, 
                    PMES,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCR, PCI_Config, Zero, 0x40)
                Field (PXCR, AnyAcc, NoLock, WriteAsZeros)
                {
                    XVID,   16, 
                    Offset (0x18), 
                    PBN,    8, 
                    SCBN,   8, 
                    SBBN,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04 ())
                    }

                    Return (PR04 ())
                }

                Device (PXS1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                    Name (_RMV, One)  // _RMV: Removal Status
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCR, PCI_Config, Zero, 0x40)
                Field (PXCR, AnyAcc, NoLock, WriteAsZeros)
                {
                    XVID,   16, 
                    Offset (0x18), 
                    PBN,    8, 
                    SCBN,   8, 
                    SBBN,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }

                    Return (PR05 ())
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCR, PCI_Config, Zero, 0x40)
                Field (PXCR, AnyAcc, NoLock, WriteAsZeros)
                {
                    XVID,   16, 
                    Offset (0x18), 
                    PBN,    8, 
                    SCBN,   8, 
                    SBBN,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06 ())
                    }

                    Return (PR06 ())
                }

                Device (TMAD)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (TMAR, PCI_Config, 0x74, 0x04)
                    Field (TMAR, AnyAcc, NoLock, Preserve)
                    {
                        PWSS,   8
                    }
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCR, PCI_Config, Zero, 0x40)
                Field (PXCR, AnyAcc, NoLock, WriteAsZeros)
                {
                    XVID,   16, 
                    Offset (0x18), 
                    PBN,    8, 
                    SCBN,   8, 
                    SBBN,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07 ())
                    }

                    Return (PR07 ())
                }

                Device (OZSD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (O2SR, PCI_Config, 0x10, 0x04)
                    Field (O2SR, AnyAcc, NoLock, Preserve)
                    {
                        OZBA,   32
                    }
                }

                Device (OZWA)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000300,         // Address Length
                            _Y0F)
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (BUF0, \_SB.PCI0.RP04.OZWA._Y0F._BAS, OBAR)  // _BAS: Base Address
                        OBAR = (^^OZSD.OZBA + 0x0100)
                        Return (BUF0) /* \_SB_.PCI0.RP04.OZWA.BUF0 */
                    }
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXCR, PCI_Config, Zero, 0x40)
                Field (PXCR, AnyAcc, NoLock, WriteAsZeros)
                {
                    XVID,   16, 
                    Offset (0x18), 
                    PBN,    8, 
                    SCBN,   8, 
                    SBBN,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x05
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08 ())
                    }

                    Return (PR08 ())
                }

                Device (PXS5)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x05
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If (Arg0)
                        {
                            WLWF = One
                        }
                        Else
                        {
                            WLWF = Zero
                        }
                    }
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (PXCR, PCI_Config, Zero, 0x40)
                Field (PXCR, AnyAcc, NoLock, WriteAsZeros)
                {
                    XVID,   16, 
                    Offset (0x18), 
                    PBN,    8, 
                    SCBN,   8, 
                    SBBN,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x05
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05 ())
                    }

                    Return (PR05 ())
                }

                Device (PXS6)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (DLAN, PCI_Config, Zero, 0x0100)
                    Field (DLAN, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0x44), 
                        Offset (0x45), 
                        LPME,   1
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x05
                    })
                }
            }

            Device (GLAN)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x04
                })
            }

            Device (IO10)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                OperationRegion (IBUS, PCI_Config, 0xD0, 0xE0)
                Field (IBUS, DWordAcc, NoLock, Preserve)
                {
                        ,   26, 
                    TOLM,   6, 
                        ,   26, 
                    TOHM,   38, 
                    Offset (0xB0), 
                    VTEN,   1, 
                        ,   11, 
                    VTBA,   20
                }
            }

            Device (IO1X)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                OperationRegion (PBIC, PCI_Config, Zero, 0xF0)
                Field (PBIC, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x7C), 
                    SR0,    32, 
                    SR1,    32, 
                    SR2,    32, 
                    SR3,    32, 
                    SR4,    32, 
                    SR5,    32, 
                    SR6,    32, 
                    SR7,    32, 
                    SR8,    32, 
                    SR9,    32
                }
            }

            Device (IIO0)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (IBUS, PCI_Config, 0xD0, 0xE0)
                Field (IBUS, DWordAcc, NoLock, Preserve)
                {
                        ,   26, 
                    TOLM,   6, 
                        ,   26, 
                    TOHM,   38, 
                    Offset (0xB0), 
                    VTEN,   1, 
                        ,   11, 
                    VTBA,   20
                }
            }

            Device (IIOX)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                OperationRegion (PBIC, PCI_Config, Zero, 0xF0)
                Field (PBIC, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x7C), 
                    SR0,    32, 
                    SR1,    32, 
                    SR2,    32, 
                    SR3,    32, 
                    SR4,    32, 
                    SR5,    32, 
                    SR6,    32, 
                    SR7,    32, 
                    SR8,    32, 
                    SR9,    32
                }
            }

            Device (PEG4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
            }

            Device (PEG5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PR0C) /* \_SB_.PR0C */
                }
            }

            Device (PEG6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
            }
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x00, 0x00000410, 0x06){}
        Processor (CPU1, 0x01, 0x00000410, 0x06){}
        Processor (CPU2, 0x02, 0x00000410, 0x06){}
        Processor (CPU3, 0x03, 0x00000410, 0x06){}
        Processor (CPU4, 0x04, 0x00000410, 0x06){}
        Processor (CPU5, 0x05, 0x00000410, 0x06){}
        Processor (CPU6, 0x06, 0x00000410, 0x06){}
        Processor (CPU7, 0x07, 0x00000410, 0x06){}
    }

    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80D = Zero
        P8XH (Zero, Arg0)
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
            If (\_SB.SSTS)
            {
                \_SB.PCI0.LPCB.EC0.WLID = Zero
            }
            Else
            {
                \_SB.PCI0.LPCB.EC0.WLID = One
            }

            If (\_SB.WLWF)
            {
                \_SB.PCI0.LPCB.EC0.WS3W = One
            }

            Release (\_SB.PCI0.LPCB.EC0.MUT1)
        }

        If ((Arg0 == 0x03))
        {
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x1E)
            }
        }

        If ((Arg0 == 0x04))
        {
            INS4 = One
            Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
            \_SB.PCI0.LPCB.EC0.FLS4 = One
            Release (\_SB.PCI0.LPCB.EC0.MUT1)
        }

        If ((Arg0 == 0x05))
        {
            \_SB.PHSR (0x15, Zero)
        }
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        P8XH (One, 0xAB)
        INS4 = Zero
        If (NEXP)
        {
            If ((OSCC & 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If ((OSCC & 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If ((Arg0 == 0x03)){}
        If ((Arg0 == 0x04))
        {
            If (\_SB.ECOK)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                Local0 = (\_SB.PCI0.LPCB.EC0.PWBT & One)
                Release (\_SB.PCI0.LPCB.EC0.MUT1)
                If (Local0)
                {
                    Notify (\_SB.PWRB, 0x02) // Device Wake
                }
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.LPCB.EC0.EDTS = One
            \_SB.INS3 = 0x55
            \_SB.PCI0.RP03.TMAD.PWSS = 0x0B
            \_SB.PCI0.RP01.HPEX = One
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x14)
            }

            If ((OSYS == 0x07D2))
            {
                If ((CFGD & One))
                {
                    If ((\_PR.CPU0._PPC > Zero))
                    {
                        \_PR.CPU0._PPC -= One
                        PNOT ()
                        \_PR.CPU0._PPC += One
                        PNOT ()
                    }
                    Else
                    {
                        \_PR.CPU0._PPC += One
                        PNOT ()
                        \_PR.CPU0._PPC -= One
                        PNOT ()
                    }
                }
            }

            If ((PFLV == FMBL)){}
            If (\_SB.ECOK)
            {
                Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                Local1 = (\_SB.PCI0.LPCB.EC0.DALB & 0x0F)
                Release (\_SB.PCI0.LPCB.EC0.MUT1)
                If ((Local1 == 0x02))
                {
                    Notify (\_SB.PCI0.LPCB.EC0.DAL2, 0x02) // Device Wake
                }
            }

            If ((Arg0 == 0x05))
            {
                If (ALMF)
                {
                    ToBCD (DALM, \_SB.ALMD)
                }
            }

            If ((RP1D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                    Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                }
            }

            If ((RP2D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                }
            }

            If ((RP3D == Zero))
            {
                Notify (\_SB.PCI0.RP03, Zero) // Bus Check
            }

            If ((RP4D == Zero))
            {
                Notify (\_SB.PCI0.RP04, Zero) // Bus Check
            }

            If ((RP5D == Zero))
            {
                Notify (\_SB.PCI0.RP05, Zero) // Bus Check
            }
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                If ((PDC4 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU4, 0x81) // C-State Change
                }
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                If ((PDC5 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU5, 0x81) // C-State Change
                }
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                If ((PDC6 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU6, 0x81) // C-State Change
                }
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                If ((PDC7 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU7, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == TRTP))
        {
            TRP0 = Zero
        }

        If ((Arg0 == TRTD))
        {
            DTSF = Arg1
            TRPD = Zero
            Return (DTSF) /* \DTSF */
        }

        If ((Arg0 == TRTI))
        {
            TRPH = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            PWRS = One
            OSYS = 0x07D0
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }
            }
        }

        Method (NHPG, 0, Serialized)
        {
            ^RP01.HPEX = Zero
            ^RP02.HPEX = Zero
            ^RP03.HPEX = Zero
            ^RP04.HPEX = Zero
            ^RP01.HPSX = One
            ^RP02.HPSX = One
            ^RP03.HPSX = One
            ^RP04.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            ^RP01.PMEX = Zero
            ^RP02.PMEX = Zero
            ^RP03.PMEX = Zero
            ^RP04.PMEX = Zero
            ^RP05.PMEX = Zero
            ^RP01.PMSX = One
            ^RP02.PMSX = One
            ^RP03.PMSX = One
            ^RP04.PMSX = One
            ^RP05.PMSX = One
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y10)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y13)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y14)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y15)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y16)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y11)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y12)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    _Y17)
                Memory32Fixed (ReadWrite,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFF808000,         // Address Base
                    0x00000100,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y10._BAS, RBR0)  // _BAS: Base Address
                RBR0 = (^^LPCB.RCBA << 0x0E)
                If ((^^TMRP.TRID == 0x3B32))
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._LEN, TMRL)  // _LEN: Length
                    TMRL = Zero
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, TMB0)  // _BAS: Base Address
                    TMB0 = (^^TMRP.TARB << 0x0C)
                }
                Else
                {
                    TTDR = Zero
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._BAS, TMR1)  // _BAS: Base Address
                    TMR1 = (^^TMRP.TBAR << 0x0C)
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, TMB1)  // _BAS: Base Address
                    TMB1 = (^^TMRP.TARB << 0x0C)
                    TTDR = One
                }

                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._LEN, MBLN)  // _LEN: Length
                    MBLN = Zero
                }
                Else
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._BAS, MBR0)  // _BAS: Base Address
                    MBR0 = (MHBR << 0x0E)
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._BAS, DBR0)  // _BAS: Base Address
                DBR0 = (DIBR << 0x0C)
                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    DBR0 = (DIBI << 0x0C)
                }

                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._LEN, EBLN)  // _LEN: Length
                    EBLN = Zero
                }
                Else
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._BAS, EBR0)  // _BAS: Base Address
                    EBR0 = (EPBR << 0x0C)
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y16._BAS, XBR0)  // _BAS: Base Address
                XBR0 = (^^^CPBG.IMCH.PXBR << 0x14)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y16._LEN, XSZ0)  // _LEN: Length
                XSZ0 = (0x10000000 >> ^^^CPBG.IMCH.PXSZ) /* \_SB_.CPBG.IMCH.PXSZ */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y17._BAS, VTB0)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y17._LEN, VTLN)  // _LEN: Length
                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    If ((PNHM >= 0x000106E1))
                    {
                        If (^^IO10.VTEN)
                        {
                            VTB0 = (^^IO10.VTBA << 0x0C)
                        }
                        Else
                        {
                            VTLN = Zero
                        }
                    }
                    ElseIf (^^IIO0.VTEN)
                    {
                        VTB0 = (^^IIO0.VTBA << 0x0C)
                    }
                    Else
                    {
                        VTLN = Zero
                    }
                }
                ElseIf (ADVE)
                {
                    VTB0 = (ADVT << 0x0C)
                }
                Else
                {
                    VTLN = Zero
                }

                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Scope (\)
    {
        OperationRegion (IO_T, SystemIO, 0x0500, 0x10)
        Field (IO_T, ByteAcc, NoLock, Preserve)
        {
            TRPI,   16, 
            Offset (0x04), 
            Offset (0x06), 
            Offset (0x08), 
            TRP0,   8, 
            Offset (0x0A), 
            Offset (0x0B), 
            Offset (0x0C), 
            Offset (0x0D), 
            Offset (0x0E), 
            Offset (0x0F), 
            Offset (0x10)
        }

        OperationRegion (IO_D, SystemIO, 0x0600, 0x04)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
                ,   14, 
            PEWS,   1, 
            Offset (0x02), 
                ,   14, 
            PEWD,   1, 
            Offset (0x10), 
                ,   1, 
            TDTY,   3, 
            THTE,   1, 
            Offset (0x11), 
            FOTL,   1, 
            Offset (0x20), 
                ,   2, 
            SPST,   1, 
                ,   6, 
            PEEN,   1, 
            Offset (0x28), 
                ,   13, 
            PMEB,   1, 
            Offset (0x42), 
                ,   1, 
            GPEC,   1, 
            Offset (0x64), 
                ,   9, 
            SCIS,   1, 
            Offset (0x66)
        }

        OperationRegion (GPIO, SystemIO, GPBS, 0x64)
        Field (GPIO, ByteAcc, NoLock, Preserve)
        {
            GU00,   8, 
            GU01,   8, 
            GU02,   8, 
            GU03,   8, 
            GIO0,   8, 
            GIO1,   8, 
            GIO2,   8, 
            GIO3,   8, 
            Offset (0x0C), 
            MID1,   1, 
            MID9,   1, 
            Offset (0x0D), 
                ,   4, 
            HDPA,   1, 
            HDPL,   1, 
            Offset (0x0E), 
                ,   6, 
            MID0,   1, 
            Offset (0x0F), 
                ,   3, 
            GP27,   1, 
            MID2,   1, 
            Offset (0x10), 
            Offset (0x18), 
            GB00,   8, 
            GB01,   8, 
            GB02,   8, 
            GB03,   8, 
            Offset (0x2C), 
            GIV0,   8, 
                ,   4, 
            PAHL,   1, 
            PLHL,   1, 
            Offset (0x2E), 
            GIV2,   8, 
            GIV3,   8, 
            GU04,   8, 
            GU05,   8, 
            GU06,   8, 
            GU07,   8, 
            GIO4,   8, 
            GIO5,   8, 
            GIO6,   8, 
            GIO7,   8, 
                ,   2, 
            MID3,   1, 
            MID4,   1, 
                ,   1, 
            MID6,   1, 
            MID7,   1, 
            MID8,   1, 
            GL05,   8, 
            HDPI,   1, 
            Offset (0x3B), 
                ,   1, 
            MID5,   1, 
            Offset (0x40), 
            GU08,   8, 
            GU09,   8, 
            GU0A,   8, 
            GU0B,   8, 
            GIO8,   8, 
            GIO9,   8, 
            GIOA,   8, 
            GIOB,   8, 
            GL08,   8, 
            GL09,   8, 
            GL0A,   8, 
            GL0B,   8
        }

        OperationRegion (RCRB, SystemMemory, SRCB, 0x4000)
        Field (RCRB, DWordAcc, Lock, Preserve)
        {
            Offset (0x1000), 
            Offset (0x3000), 
            Offset (0x3404), 
            HPAS,   2, 
                ,   5, 
            HPAE,   1, 
            Offset (0x3418), 
                ,   1, 
                ,   1, 
            SATD,   1, 
            SMBD,   1, 
            HDAD,   1, 
            Offset (0x341A), 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1, 
            RP7D,   1, 
            RP8D,   1, 
            TTDR,   1
        }

        OperationRegion (PTBA, SystemMemory, TBAB, 0x1000)
        Field (PTBA, AnyAcc, NoLock, Preserve)
        {
            Offset (0x12), 
            PCTA,   16, 
            Offset (0x1A), 
            PTRC,   16, 
            Offset (0x30), 
            CTV1,   16, 
            CTV2,   16, 
            Offset (0x60), 
            PMCP,   16
        }

        Method (GETP, 1, Serialized)
        {
            If (((Arg0 & 0x09) == Zero))
            {
                Return (0xFFFFFFFF)
            }

            If (((Arg0 & 0x09) == 0x08))
            {
                Return (0x0384)
            }

            Local0 = ((Arg0 & 0x0300) >> 0x08)
            Local1 = ((Arg0 & 0x3000) >> 0x0C)
            Return ((0x1E * (0x09 - (Local0 + Local1))))
        }

        Method (GDMA, 5, Serialized)
        {
            If (Arg0)
            {
                If ((Arg1 && Arg4))
                {
                    Return (0x14)
                }

                If ((Arg2 && Arg4))
                {
                    Return (((0x04 - Arg3) * 0x0F))
                }

                Return (((0x04 - Arg3) * 0x1E))
            }

            Return (0xFFFFFFFF)
        }

        Method (GETT, 1, Serialized)
        {
            Return ((0x1E * (0x09 - (((Arg0 >> 0x02) & 0x03
                ) + (Arg0 & 0x03)))))
        }

        Method (GETF, 3, Serialized)
        {
            Name (TMPF, Zero)
            If (Arg0)
            {
                TMPF |= One
            }

            If ((Arg2 & 0x02))
            {
                TMPF |= 0x02
            }

            If (Arg1)
            {
                TMPF |= 0x04
            }

            If ((Arg2 & 0x20))
            {
                TMPF |= 0x08
            }

            If ((Arg2 & 0x4000))
            {
                TMPF |= 0x10
            }

            Return (TMPF) /* \GETF.TMPF */
        }

        Method (SETP, 3, Serialized)
        {
            If ((Arg0 > 0xF0))
            {
                Return (0x08)
            }
            Else
            {
                If ((Arg1 & 0x02))
                {
                    If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                    {
                        Return (0x2301)
                    }

                    If (((Arg0 <= 0xB4) && (Arg2 & One)))
                    {
                        Return (0x2101)
                    }
                }

                Return (0x1001)
            }
        }

        Method (SDMA, 1, Serialized)
        {
            If ((Arg0 <= 0x14))
            {
                Return (One)
            }

            If ((Arg0 <= 0x1E))
            {
                Return (0x02)
            }

            If ((Arg0 <= 0x2D))
            {
                Return (One)
            }

            If ((Arg0 <= 0x3C))
            {
                Return (0x02)
            }

            If ((Arg0 <= 0x5A))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (SETT, 3, Serialized)
        {
            If ((Arg1 & 0x02))
            {
                If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                {
                    Return (0x0B)
                }

                If (((Arg0 <= 0xB4) && (Arg2 & One)))
                {
                    Return (0x09)
                }
            }

            Return (0x04)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SAT0)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
            OperationRegion (SACS, PCI_Config, Zero, 0xC0)
            Field (SACS, DWordAcc, NoLock, Preserve)
            {
                VEID,   16, 
                DEID,   16, 
                Offset (0x08), 
                REID,   8, 
                Offset (0x2C), 
                SVID,   16, 
                SSID,   16, 
                Offset (0x40), 
                PRIT,   16, 
                SECT,   16, 
                PSIT,   4, 
                SSIT,   4, 
                Offset (0x48), 
                SYNC,   4, 
                Offset (0x4A), 
                SDT0,   2, 
                    ,   2, 
                SDT1,   2, 
                Offset (0x4B), 
                SDT2,   2, 
                    ,   2, 
                SDT3,   2, 
                Offset (0x54), 
                ICR0,   4, 
                ICR1,   4, 
                ICR2,   4, 
                ICR3,   4, 
                ICR4,   4, 
                ICR5,   4, 
                Offset (0x90), 
                MAPV,   2, 
                Offset (0x92), 
                    ,   4, 
                P4EN,   1, 
                P5EN,   1, 
                Offset (0x93), 
                P0PR,   1, 
                P1PR,   1, 
                    ,   2, 
                P4PR,   1, 
                P5PR,   1
            }
        }

        Device (SAT1)
        {
            Name (_ADR, 0x001F0005)  // _ADR: Address
            OperationRegion (SACS, PCI_Config, Zero, 0xC0)
            Field (SACS, DWordAcc, NoLock, Preserve)
            {
                VEID,   16, 
                DEID,   16, 
                Offset (0x08), 
                REID,   8, 
                Offset (0x2C), 
                SVID,   16, 
                SSID,   16, 
                Offset (0x40), 
                PRIT,   16, 
                SECT,   16, 
                PSIT,   4, 
                SSIT,   4, 
                Offset (0x48), 
                SYNC,   4, 
                Offset (0x4A), 
                SDT0,   2, 
                    ,   2, 
                SDT1,   2, 
                Offset (0x4B), 
                SDT2,   2, 
                    ,   2, 
                SDT3,   2, 
                Offset (0x54), 
                ICR0,   4, 
                ICR1,   4, 
                ICR2,   4, 
                ICR3,   4, 
                ICR4,   4, 
                ICR5,   4, 
                Offset (0x90), 
                MAPV,   2, 
                Offset (0x92), 
                    ,   4, 
                P4EN,   1, 
                P5EN,   1, 
                Offset (0x93), 
                P0PR,   1, 
                P1PR,   1, 
                    ,   2, 
                P4PR,   1, 
                P5PR,   1
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
            Field (SMBP, DWordAcc, NoLock, Preserve)
            {
                    ,   2, 
                I2CE,   1
            }

            OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
            Field (SMPB, DWordAcc, NoLock, Preserve)
            {
                    ,   5, 
                SBAR,   11
            }

            OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCON,   8, 
                HCOM,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8, 
                PECR,   8, 
                RXSA,   8, 
                SDAT,   16
            }

            Method (SSXB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRXB, 1, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCON = 0x44
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRB, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = Arg2
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRW, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT1 = (Arg2 & 0xFF)
                DAT0 = ((Arg2 >> 0x08) & 0xFF)
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDW, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (((DAT0 << 0x08) | DAT1))
                }

                Return (0xFFFFFFFF)
            }

            Method (SBLW, 4, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg3
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Arg2 [Zero])
                HCON = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Arg2 [Local1])
                    }
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SBLR, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100){})
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg2
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                TBUF [Zero] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (TBUF [Zero])))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                }

                Return (Zero)
            }

            Method (STRT, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Local0--
                        Sleep (One)
                        If ((Local0 == Zero))
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (COMP, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (KILL, 0, Serialized)
            {
                HCON |= 0x02
                HSTS |= 0xFF
            }
        }

        Device (TMRP)
        {
            Name (_ADR, 0x001F0006)  // _ADR: Address
            OperationRegion (TRCS, PCI_Config, Zero, 0x50)
            Field (TRCS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                TRID,   16, 
                Offset (0x10), 
                SPTP,   1, 
                    ,   11, 
                TBAR,   20, 
                Offset (0x40), 
                SPEN,   1, 
                    ,   11, 
                TARB,   20
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += One
            P8XH (Zero, One)
            P8XH (One, L01C)
            If (((RP1D == Zero) && \_SB.PCI0.RP01.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP01.PDCX)
                {
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.HPSX = One
                    Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((RP2D == Zero) && \_SB.PCI0.RP02.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP02.PDCX)
                {
                    \_SB.PCI0.RP02.PDCX = One
                    \_SB.PCI0.RP02.HPSX = One
                    Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP02.HPSX = One
                }
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP03.PDCX)
                {
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.HPSX = One
                    Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((RP4D == Zero) && \_SB.PCI0.RP04.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP04.PDCX)
                {
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.HPSX = One
                    Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }

            If (((RP5D == Zero) && \_SB.PCI0.RP05.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP05.PDCX)
                {
                    \_SB.PCI0.RP05.PDCX = One
                    \_SB.PCI0.RP05.HPSX = One
                    Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP05.HPSX = One
                }
            }

            If (((RP6D == Zero) && \_SB.PCI0.RP06.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP06.PDCX)
                {
                    \_SB.PCI0.RP06.PDCX = One
                    \_SB.PCI0.RP06.HPSX = One
                    Notify (\_SB.PCI0.RP06, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP06.HPSX = One
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            If (CondRefOf (\_SB.PCI0.IEIT.EITV))
            {
                \_SB.PCI0.IEIT.EITV ()
            }

            Notify (\_TZ.THRM, 0x80) // Thermal Status Change
            If (CondRefOf (TNOT))
            {
                TNOT ()
            }
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.SBUS.HSTS = 0x20
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.P0P3, 0x02) // Device Wake
            Notify (\_SB.PCI0.P0P3.VGA, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            \_SB.PCI0.RP06.PSPX = One
            \_SB.PCI0.RP06.PMSX = One
            Notify (\_SB.PCI0.PEG4, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG5, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG6, 0x02) // Device Wake
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB1, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB2, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB4, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L20, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB6, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L25, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.USB7, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    OperationRegion (PBIC, PCI_Config, Zero, 0xF0)
    Field (PBIC, DWordAcc, NoLock, Preserve)
    {
        Offset (0x7C), 
        SR0,    32, 
        SR1,    32, 
        SR2,    32, 
        SR3,    32, 
        SR4,    32, 
        SR5,    32, 
        SR6,    32, 
        SR7,    32, 
        SR8,    32, 
        SR9,    32
    }

    OperationRegion (IBUS, PCI_Config, 0xD0, 0xE0)
    Field (IBUS, DWordAcc, NoLock, Preserve)
    {
            ,   26, 
        TOLM,   6, 
            ,   26, 
        TOHM,   38, 
        Offset (0xB0), 
        VTEN,   1, 
            ,   11, 
        VTBA,   20
    }

    Scope (_SB)
    {
        Device (CPBG)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0xFF)  // _UID: Unique ID
            Name (_BBN, 0xFF)  // _BBN: BIOS Bus Number
            Name (_ADR, Zero)  // _ADR: Address
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Device (IMCH)
            {
                Name (_ADR, One)  // _ADR: Address
                OperationRegion (PBUS, PCI_Config, Zero, 0xC0)
                Field (PBUS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                        ,   4, 
                    PM0H,   2, 
                    Offset (0x41), 
                    PM1L,   2, 
                        ,   2, 
                    PM1H,   2, 
                    Offset (0x42), 
                    PM2L,   2, 
                        ,   2, 
                    PM2H,   2, 
                    Offset (0x43), 
                    PM3L,   2, 
                        ,   2, 
                    PM3H,   2, 
                    Offset (0x44), 
                    PM4L,   2, 
                        ,   2, 
                    PM4H,   2, 
                    Offset (0x45), 
                    PM5L,   2, 
                        ,   2, 
                    PM5H,   2, 
                    Offset (0x46), 
                    PM6L,   2, 
                        ,   2, 
                    PM6H,   2, 
                    Offset (0x47), 
                    Offset (0x48), 
                        ,   7, 
                    HENA,   1, 
                    Offset (0x50), 
                    PXEN,   1, 
                    PXSZ,   2, 
                        ,   17, 
                    PXBR,   12
                }
            }
        }
    }

    Method (VTOB, 1, NotSerialized)
    {
        Local0 = One
        Local0 <<= Arg0
        Return (Local0)
    }

    Method (BTOV, 1, NotSerialized)
    {
        Local0 = (Arg0 >> One)
        Local1 = Zero
        While (Local0)
        {
            Local1++
            Local0 >>= One
        }

        Return (Local1)
    }

    Method (MKWD, 2, NotSerialized)
    {
        If ((Arg1 & 0x80))
        {
            Local0 = 0xFFFF0000
        }
        Else
        {
            Local0 = Zero
        }

        Local0 |= Arg0
        Local0 |= (Arg1 << 0x08)
        Return (Local0)
    }

    Method (POSW, 1, NotSerialized)
    {
        If ((Arg0 & 0x8000))
        {
            If ((Arg0 == 0xFFFF))
            {
                Return (0xFFFFFFFF)
            }
            Else
            {
                Local0 = ~Arg0
                Local0++
                Local0 &= 0xFFFF
                Return (Local0)
            }
        }
        Else
        {
            Return (Arg0)
        }
    }

    Method (GBFE, 3, NotSerialized)
    {
        CreateByteField (Arg0, Arg1, TIDX)
        Arg2 = TIDX /* \GBFE.TIDX */
    }

    Method (PBFE, 3, NotSerialized)
    {
        CreateByteField (Arg0, Arg1, TIDX)
        TIDX = Arg2
    }

    Method (ITOS, 1, NotSerialized)
    {
        Local0 = Buffer (0x09)
            {
                /* 0000 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                /* 0008 */  0x00                                             // .
            }
        Local7 = Buffer (0x11)
            {
                "0123456789ABCDEF"
            }
        Local1 = 0x08
        Local2 = Zero
        Local3 = Zero
        While (Local1)
        {
            Local1--
            Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
            If (Local4)
            {
                Local3 = Ones
            }

            If (Local3)
            {
                GBFE (Local7, Local4, RefOf (Local5))
                PBFE (Local0, Local2, Local5)
                Local2++
            }
        }

        Return (Local0)
    }

    OperationRegion (NV1, SystemIO, 0x72, 0x02)
    Field (NV1, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
    {
        Offset (0x0B), 
            ,   2, 
        LWOL,   1, 
        Offset (0x20), 
        TMOD,   1, 
        Offset (0x74), 
            ,   1, 
        ALMF,   1, 
        YALM,   6, 
        Offset (0x7E), 
        INS4,   1, 
            ,   1, 
        SSDF,   1, 
        DALM,   5, 
            ,   4, 
        MALM,   4
    }

    OperationRegion (CIRO, SystemIO, 0x0620, 0x1F)
    Field (CIRO, ByteAcc, NoLock, Preserve)
    {
        Offset (0x13), 
        CIRW,   1
    }

    Scope (_SB)
    {
        OperationRegion (SMI0, SystemIO, 0x0000FE00, 0x00000002)
        Field (SMI0, AnyAcc, NoLock, Preserve)
        {
            SMIC,   8
        }

        OperationRegion (SMI1, SystemMemory, 0xBBF9BC0D, 0x00000340)
        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            BCMD,   8, 
            DID,    32, 
            INFO,   1024
        }

        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            AccessAs (ByteAcc, 0x00), 
            Offset (0x05), 
            INF,    8
        }

        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            Offset (0x06), 
            PHMI,   16
        }

        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            SLPB,   32
        }

        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            Offset (0x50), 
            BLK0,   32, 
            BLK1,   32, 
            BLK2,   32, 
            BLK3,   32, 
            BLK4,   32, 
            BLK5,   32, 
            Offset (0x110), 
            BTEN,   1, 
            WLAN,   1, 
            WN3G,   1, 
            ENSR,   2, 
            CCDE,   1, 
            DACB,   1, 
            TPDV,   1, 
            FBBS,   1, 
                ,   1, 
            FCIR,   1, 
            Offset (0x11B), 
            ALMM,   8, 
            ALMH,   8, 
            ALMD,   8, 
                ,   6, 
            Offset (0x120), 
            OWNS,   4096, 
            DVDI,   160
        }

        Field (SMI1, AnyAcc, NoLock, Preserve)
        {
            AccessAs (ByteAcc, 0x00), 
            Offset (0x120), 
            OWN0,   8, 
            OWN1,   8
        }

        Mutex (PSMX, 0x00)
        Method (PHSR, 2, NotSerialized)
        {
            Acquire (PSMX, 0xFFFF)
            BCMD = 0x90
            DID = Arg0
            INF = Arg1
            SMIC = Zero
            Local0 = INF /* \_SB_.INF_ */
            Release (PSMX)
            Return (Local0)
        }

        Name (ECOK, Zero)
        Name (INS3, Zero)
        Name (WLWF, Zero)
        Name (SATT, Zero)
        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (ACST, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS >= 0x07D6))
                {
                    If (ECOK)
                    {
                        Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        ACST = ^^PCI0.LPCB.EC0.ACDF /* \_SB_.PCI0.LPCB.EC0_.ACDF */
                        Release (^^PCI0.LPCB.EC0.MUT1)
                    }
                    Else
                    {
                        ACST = One
                    }

                    PWRS = ACST /* \_SB_.ACAD.ACST */
                }
            }

            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                If (ECOK)
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    ACST = ^^PCI0.LPCB.EC0.ACDF /* \_SB_.PCI0.LPCB.EC0_.ACDF */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                }
                Else
                {
                    ACST = One
                }

                If (ACST)
                {
                    Local0 = One
                    ^^BAT1.BCRI = Zero
                }
                Else
                {
                    Local0 = Zero
                }

                PWRS = ACST /* \_SB_.ACAD.ACST */
                Return (Local0)
            }
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (CBTI, Zero)
            Name (PBTI, Zero)
            Name (BTIN, Zero)
            Name (BTCH, Zero)
            Name (BIFI, Zero)
            Name (SEL0, Zero)
            Name (BCRI, Zero)
            Name (PBIF, Package (0x0D)
            {
                One, 
                0x0FA0, 
                0x0FA0, 
                One, 
                0x2B5C, 
                0x012C, 
                0xA0, 
                0x20, 
                0x20, 
                "PA3593U-1BRS", 
                "", 
                "LION      ", 
                "         "
            })
            Name (PBST, Package (0x04)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x2710
            })
            Name (ERRC, Zero)
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (BTIN)
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If ((BIFI == Zero))
                {
                    UBIF ()
                    BIFI = One
                }

                Return (PBIF) /* \_SB_.BAT1.PBIF */
            }

            Name (LFCC, 0x1130)
            Method (UBIF, 0, NotSerialized)
            {
                If (ECOK)
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.BTDC /* \_SB_.PCI0.LPCB.EC0_.BTDC */
                    Local1 = ^^PCI0.LPCB.EC0.LFCC /* \_SB_.PCI0.LPCB.EC0_.LFCC */
                    Local2 = ^^PCI0.LPCB.EC0.MBVG /* \_SB_.PCI0.LPCB.EC0_.MBVG */
                    Local3 = ^^PCI0.LPCB.EC0.BTMD /* \_SB_.PCI0.LPCB.EC0_.BTMD */
                    Local4 = ^^PCI0.LPCB.EC0.BTMN /* \_SB_.PCI0.LPCB.EC0_.BTMN */
                    Local5 = ^^PCI0.LPCB.EC0.BTSN /* \_SB_.PCI0.LPCB.EC0_.BTSN */
                    Local6 = ^^PCI0.LPCB.EC0.LION /* \_SB_.PCI0.LPCB.EC0_.LION */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    PBIF [One] = Local0
                    PBIF [0x02] = Local1
                    PBIF [0x04] = Local2
                    LFCC = Local1
                    If (Local6)
                    {
                        PBIF [0x0B] = "NiMH"
                    }
                    Else
                    {
                        PBIF [0x0B] = "LION"
                    }

                    Local3 &= 0x0F
                    If ((Local3 <= 0x08))
                    {
                        If ((Local3 == One))
                        {
                            PBIF [0x09] = "NS1P3SZNJSWR"
                        }
                        ElseIf ((Local3 == 0x02))
                        {
                            PBIF [0x09] = "NS1P3SZNJSWO"
                        }
                        ElseIf ((Local3 == 0x03))
                        {
                            PBIF [0x09] = "NS2P3SZNJ4WR"
                        }
                        ElseIf ((Local3 == 0x04))
                        {
                            PBIF [0x09] = "NS2P3SZNJ4WO"
                        }
                        ElseIf ((Local3 == 0x05))
                        {
                            PBIF [0x09] = "NS2P3SZNJ5WR"
                        }
                        ElseIf ((Local3 == 0x06))
                        {
                            PBIF [0x09] = "NS2P3SZNJ5WO"
                        }
                        ElseIf ((Local3 == 0x07))
                        {
                            PBIF [0x09] = "NS3P3SZNJSWR"
                        }
                        ElseIf ((Local3 == 0x08))
                        {
                            PBIF [0x09] = "NS3P3SZNJSWO"
                        }
                    }
                    ElseIf ((Local3 <= 0x10))
                    {
                        If ((Local3 == 0x09))
                        {
                            PBIF [0x09] = "PA3592U-1BRS"
                        }
                        ElseIf ((Local3 == 0x0A))
                        {
                            PBIF [0x09] = "PA3592U-1BAS"
                        }
                        ElseIf ((Local3 == 0x0B))
                        {
                            PBIF [0x09] = "PA3593U-1BRS"
                        }
                        ElseIf ((Local3 == 0x0C))
                        {
                            PBIF [0x09] = "PA3593U-1BAS"
                        }
                        ElseIf ((Local3 == 0x0D))
                        {
                            PBIF [0x09] = "PA3594U-1BRS"
                        }
                        ElseIf ((Local3 == 0x0E))
                        {
                            PBIF [0x09] = "PA3594U-1BAS"
                        }
                        ElseIf ((Local3 == 0x0F))
                        {
                            PBIF [0x09] = "PA3595U-1BRS"
                        }
                        ElseIf ((Local3 == 0x10))
                        {
                            PBIF [0x09] = "PA3595U-1BAS"
                        }
                    }
                    ElseIf ((Local3 <= 0x14))
                    {
                        If ((Local3 == 0x11))
                        {
                            PBIF [0x09] = "PABAS109"
                        }
                        ElseIf ((Local3 == 0x12))
                        {
                            PBIF [0x09] = "PABAS110"
                        }
                        ElseIf ((Local3 == 0x13))
                        {
                            PBIF [0x09] = "PABAS111"
                        }
                        ElseIf ((Local3 == 0x14))
                        {
                            PBIF [0x09] = "PABAS112"
                        }
                    }
                    Else
                    {
                        PBIF [0x09] = "UNKNOWN"
                    }

                    If ((Local4 == 0x05))
                    {
                        PBIF [0x0C] = "Panasonic"
                    }
                    ElseIf ((Local4 == 0x03))
                    {
                        PBIF [0x0C] = "SANYO"
                    }
                    Else
                    {
                        PBIF [0x0C] = "UNKNOWN"
                    }

                    PBIF [0x0A] = ITOS (ToBCD (Local5))
                }
            }

            Name (RCAP, Zero)
            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If ((BTIN == Zero))
                {
                    PBST [Zero] = Zero
                    PBST [One] = 0xFFFFFFFF
                    PBST [0x02] = 0xFFFFFFFF
                    PBST [0x03] = 0xFFFFFFFF
                    Return (PBST) /* \_SB_.BAT1.PBST */
                }

                If (ECOK)
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.MBTC /* \_SB_.PCI0.LPCB.EC0_.MBTC */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    Sleep (0x32)
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local1 = ^^PCI0.LPCB.EC0.MBRM /* \_SB_.PCI0.LPCB.EC0_.MBRM */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    Sleep (0x32)
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local2 = ^^PCI0.LPCB.EC0.MBVG /* \_SB_.PCI0.LPCB.EC0_.MBVG */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    Sleep (0x32)
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local3 = ^^PCI0.LPCB.EC0.MCUR /* \_SB_.PCI0.LPCB.EC0_.MCUR */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    Sleep (0x32)
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local4 = ^^PCI0.LPCB.EC0.BTST /* \_SB_.PCI0.LPCB.EC0_.BTST */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    Sleep (0x32)
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local5 = ^^PCI0.LPCB.EC0.MBTF /* \_SB_.PCI0.LPCB.EC0_.MBTF */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    Sleep (0x32)
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local6 = ^^PCI0.LPCB.EC0.ACDF /* \_SB_.PCI0.LPCB.EC0_.ACDF */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    Sleep (0x32)
                    If (Local6)
                    {
                        If ((Local5 == One))
                        {
                            Local7 = Zero
                            Local1 = LFCC /* \_SB_.BAT1.LFCC */
                        }
                        ElseIf ((Local0 == One))
                        {
                            Local7 = 0x02
                        }
                        Else
                        {
                            Local7 = Zero
                        }
                    }
                    ElseIf ((Local4 && One))
                    {
                        Local7 = One
                    }
                    Else
                    {
                        Local7 = Zero
                    }

                    Local4 &= 0x04
                    If ((Local4 == 0x04))
                    {
                        Local7 |= Local4
                    }

                    PBST [Zero] = Local7
                    If (!(Local1 & 0x8000))
                    {
                        PBST [0x02] = Local1
                    }

                    If (!(Local2 & 0x8000))
                    {
                        PBST [0x03] = Local2
                    }

                    If ((Local3 && 0x8000))
                    {
                        If ((Local3 != 0xFFFF))
                        {
                            Local3 = ~Local3
                            Local3++
                            Local3 &= 0xFFFF
                        }
                    }

                    PBST [One] = Local3
                }

                Return (PBST) /* \_SB_.BAT1.PBST */
            }

            Method (BSTA, 0, NotSerialized)
            {
                If (ECOK)
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.MBTS /* \_SB_.PCI0.LPCB.EC0_.MBTS */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    If ((Local0 == One))
                    {
                        If ((BTIN == Zero))
                        {
                            BTCH = One
                            BIFI = Zero
                        }

                        BTIN = One
                    }
                    Else
                    {
                        If ((BTIN == One))
                        {
                            BTCH = One
                            BIFI = Zero
                        }

                        BTIN = Zero
                    }
                }
            }
        }

        Scope (\_TZ)
        {
            ThermalZone (THRM)
            {
                Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
                {
                    If (\_SB.ECOK)
                    {
                        Acquire (\_SB.PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = \_SB.PCI0.LPCB.EC0.CTMP
                        Release (\_SB.PCI0.LPCB.EC0.MUT1)
                        Return (((Local0 * 0x0A) + 0x0AAC))
                    }

                    Return (0x0C3C)
                }

                Name (_PSL, Package (0x01)  // _PSL: Passive List
                {
                    \_PR.CPU0
                })
                Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
                {
                    Return (0x0EBC)
                }

                Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
                {
                    Return (0x0E8A)
                }

                Name (_TC1, 0x02)  // _TC1: Thermal Constant 1
                Name (_TC2, 0x03)  // _TC2: Thermal Constant 2
                Name (_TSP, 0x28)  // _TSP: Thermal Sampling Period
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (BT)
        {
            Name (_HID, EisaId ("TOS6205"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (BTEN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (DUSB, 0, NotSerialized)
            {
                If (ECOK)
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    ^^PCI0.LPCB.EC0.BLTH = Zero
                    Release (^^PCI0.LPCB.EC0.MUT1)
                }
            }

            Method (AUSB, 0, NotSerialized)
            {
                If (ECOK)
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    ^^PCI0.LPCB.EC0.BLTH = One
                    Release (^^PCI0.LPCB.EC0.MUT1)
                }
            }

            Method (BTPO, 0, NotSerialized)
            {
                PHSR (0x0B, 0x25)
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                ^^PCI0.LPCB.EC0.BLTH = BTEN /* \_SB_.BTEN */
                Release (^^PCI0.LPCB.EC0.MUT1)
            }

            Method (BTPF, 0, NotSerialized)
            {
                PHSR (0x0B, 0x26)
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                ^^PCI0.LPCB.EC0.BLTH = BTEN /* \_SB_.BTEN */
                Release (^^PCI0.LPCB.EC0.MUT1)
            }

            Method (BTST, 0, NotSerialized)
            {
                If (ECOK)
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.KSWH /* \_SB_.PCI0.LPCB.EC0_.KSWH */
                    Local0 ^= One
                    Local7 = ^^PCI0.LPCB.EC0.BTHE /* \_SB_.PCI0.LPCB.EC0_.BTHE */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    If (Local0)
                    {
                        Local6 = (Local7 << 0x06)
                        Local7 <<= 0x07
                        Local1 = (Local7 | Local6)
                        Local2 = (Local0 | Local1)
                        Return (Local2)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Device (TVAP)
        {
            Name (_HID, EisaId ("TOS1900"))  // _HID: Hardware ID
            Scope (\_SB)
            {
                Name (HM01, Zero)
                Name (HM02, Zero)
                Name (HM03, Zero)
                Name (HM04, Zero)
                Name (HM05, Zero)
                Name (HM06, Zero)
                Name (HM07, Zero)
                Name (HM08, Zero)
                Name (HM09, Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }

            Name (_DDN, "VALZeneral")  // _DDN: DOS Device Name
            Name (VZOK, Zero)
            Name (VBFG, 0x0A)
            Name (VALF, Zero)
            Name (VRFS, Zero)
            Name (GSBF, Zero)
            Name (GSFX, Zero)
            Name (GSFY, Zero)
            Name (GSFZ, Zero)
            Name (SPFG, Zero)
            Name (MBTS, Zero)
            Name (MBVG, Zero)
            Name (MBPN, Buffer (0x0C){})
            Name (MBMN, Buffer (0x06){})
            Name (MBMD, Zero)
            Name (BTSN, Zero)
            Name (MCLC, Zero)
            Name (HMX1, Zero)
            Name (HMY1, Zero)
            Name (HMZ1, Zero)
            Name (HMX3, Zero)
            Name (HMY3, Zero)
            Name (HMZ3, Zero)
            Name (HMX4, Zero)
            Name (HMY4, Zero)
            Name (HMZ4, Zero)
            Name (PHIF, Zero)
            Name (ACDF, Zero)
            Name (ACCU, Zero)
            Name (RG59, Zero)
            Name (CTMP, Zero)
            Name (ACVO, Zero)
            Name (ACCA, Zero)
            Name (REFT, Zero)
            Name (INTC, Zero)
            Name (MCUR, Zero)
            Name (MTEM, Zero)
            Name (CTTO, Zero)
            Name (CTTB, Zero)
            Name (MBRM, Zero)
            Name (BTDC, Zero)
            Name (LFCC, Zero)
            Name (BTDV, Zero)
            Name (BATS, Zero)
            Name (CSV1, Zero)
            Name (CSV2, Zero)
            Name (CSV3, Zero)
            Name (CSV4, Zero)
            Name (HPCF, Zero)
            Name (HCWR, Zero)
            Name (PECB, Zero)
            Name (PECL, Zero)
            Name (PECC, Zero)
            Name (PECT, Zero)
            Name (DSPL, Zero)
            Name (ECWR, Zero)
            Name (EXCC, Zero)
            Name (RFSC, Zero)
            Name (VOLC, Zero)
            Name (PAOC, Zero)
            Name (ACAC, Zero)
            Name (FPOC, Zero)
            Name (PPBC, Zero)
            Name (PHCL, Zero)
            Name (GPBA, Buffer (0x04){})
            Name (GPBB, Buffer (0x04){})
            Name (GPCL, Zero)
            Name (BTCC, Zero)
            Name (BTCL, Zero)
            Name (PWM1, Zero)
            Name (PWM2, Zero)
            Name (FSPD, Zero)
            Name (FSP2, Zero)
            Name (BLVL, Zero)
            Name (EPFE, Zero)
            Name (EPFF, Zero)
            Name (CKFG, Zero)
            Name (CECT, One)
            Method (GSRT, 0, NotSerialized)
            {
                If (GSBF){}
                Else
                {
                    GSBF = One
                    GSFX = HDX2 /* \_SB_.HDX2 */
                    GSFY = HDY2 /* \_SB_.HDY2 */
                    GSFZ = HDZ2 /* \_SB_.HDZ2 */
                    GSBF = Zero
                }
            }

            Method (ENAB, 0, NotSerialized)
            {
                VZOK = One
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                Local0 = ^^PCI0.LPCB.EC0.RFST /* \_SB_.PCI0.LPCB.EC0_.RFST */
                Release (^^PCI0.LPCB.EC0.MUT1)
                VRFS = Local0
            }

            Method (EVNT, 1, NotSerialized)
            {
                While (VZOK)
                {
                    If ((VZOK == One))
                    {
                        VZOK = Arg0
                        Notify (TVAP, 0x80) // Status Change
                        Return (Zero)
                    }
                    Else
                    {
                        If ((VALF == 0x1E))
                        {
                            VZOK = One
                            VALF = Zero
                            Return (Zero)
                        }

                        VALF += One
                    }
                }
            }

            Name (HMBB, Buffer (0x1C){})
            CreateField (HMBB, Zero, 0x60, HMPN)
            CreateField (HMBB, 0x60, 0x60, HMMN)
            CreateField (HMBB, 0xC0, 0x10, HMMD)
            CreateField (HMBB, 0xD0, 0x10, HMSN)
            Name (HMBT, Package (0x06)
            {
                Buffer (0x1C){}, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (HMB1, 0, NotSerialized)
            {
                If (MBTS)
                {
                    HMPN = MBPN /* \_SB_.TVAP.MBPN */
                    HMMN = MBMN /* \_SB_.TVAP.MBMN */
                    HMMD = MBMD /* \_SB_.TVAP.MBMD */
                    HMSN = BTSN /* \_SB_.TVAP.BTSN */
                    HMBT [One] = ToBCD (MCLC)
                    HMBT [Zero] = HMBB /* \_SB_.TVAP.HMBB */
                    Return (HMBT) /* \_SB_.TVAP.HMBT */
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (HMB2, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (ODLS, 0, NotSerialized)
            {
                Return (One)
            }

            Method (ODLT, 0, NotSerialized)
            {
                Return (Buffer (One)
                {
                     0x02                                             // .
                })
            }

            Name (ODIN, Buffer (0x10){})
            CreateField (ODIN, Zero, 0x10, ODVI)
            CreateField (ODIN, 0x10, 0x10, ODDI)
            CreateField (ODIN, 0x20, 0x10, ODSV)
            CreateField (ODIN, 0x30, 0x10, ODSD)
            CreateField (ODIN, 0x40, 0x08, ODRI)
            CreateField (ODIN, 0x48, 0x08, ODPO)
            CreateField (ODIN, 0x50, 0x30, ODZO)
            Method (ODLB, 0, NotSerialized)
            {
                ODVI = ^^PCI0.SAT0.VEID /* \_SB_.PCI0.SAT0.VEID */
                ODDI = ^^PCI0.SAT0.DEID /* \_SB_.PCI0.SAT0.DEID */
                ODSV = ^^PCI0.SAT0.SVID /* \_SB_.PCI0.SAT0.SVID */
                ODSD = ^^PCI0.SAT0.SSID /* \_SB_.PCI0.SAT0.SSID */
                ODRI = ^^PCI0.SAT0.REID /* \_SB_.PCI0.SAT0.REID */
                ODPO = (^^PCI0.SAT0.P0PR + ^^PCI0.SAT0.P1PR)
                ODZO = Zero
                Return (ODIN) /* \_SB_.TVAP.ODIN */
            }

            Method (INFO, 0, Serialized)
            {
                If ((VZOK == 0x02))
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.VEVT /* \_SB_.PCI0.LPCB.EC0_.VEVT */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0x03))
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.FEVT /* \_SB_.PCI0.LPCB.EC0_.FEVT */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0x04))
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.NEVT /* \_SB_.PCI0.LPCB.EC0_.NEVT */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xA2))
                {
                    P80H = 0xA2
                    BLK0 = 0xA2
                    PHSR (0x12, 0x09)
                    Local0 = BLK0 /* \_SB_.BLK0 */
                    Local0 = (ToInteger (Local0) & 0xFF)
                    Local0 |= 0x1400
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xA3))
                {
                    P80H = 0xA3
                    Local0 = 0x1500
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xA4))
                {
                    Local0 = 0x1501
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xA5))
                {
                    BLK0 = 0xA5
                    PHSR (0x12, 0x06)
                    Local0 = BLK1 /* \_SB_.BLK1 */
                    Local0 = (ToInteger (Local0) & 0xFF)
                    Local0 |= 0x1600
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xA6))
                {
                    Local0 = 0x1502
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xA7))
                {
                    Local0 = 0x1581
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xA8))
                {
                    Local0 = 0x1580
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xBE))
                {
                    Local0 = 0x1ABE
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xBF))
                {
                    Local0 = 0x1ABF
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xB0))
                {
                    Local0 = 0x19B0
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xB1))
                {
                    Local0 = 0x19B1
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xB2))
                {
                    Local0 = 0x19B2
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xB3))
                {
                    Local0 = 0x19B3
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xB6))
                {
                    Local0 = 0x19B6
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xB7))
                {
                    Local0 = 0x19B7
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xB4))
                {
                    Local0 = 0x0401
                    VZOK = One
                    Return (Local0)
                }
                ElseIf ((VZOK == 0xB5))
                {
                    Local0 = 0x0402
                    VZOK = One
                    Return (Local0)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (VALI, Package (0x06)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (VALO, Package (0x06)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (GWFS, Package (0x06)
            {
                0xFE00, 
                0x56, 
                Zero, 
                One, 
                Zero, 
                Zero
            })
            Name (SWRN, Package (0x06)
            {
                0xFF00, 
                0x56, 
                One, 
                0x0200, 
                Zero, 
                Zero
            })
            Name (SWRF, Package (0x06)
            {
                0xFF00, 
                0x56, 
                Zero, 
                0x0200, 
                Zero, 
                Zero
            })
            Name (GTPS, Package (0x06)
            {
                0xF300, 
                0x050E, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (STPD, Package (0x06)
            {
                0xF400, 
                0x050E, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (STPE, Package (0x06)
            {
                0xF400, 
                0x050E, 
                One, 
                Zero, 
                Zero, 
                Zero
            })
            Name (FNDS, Package (0x06)
            {
                0xFF00, 
                0x5A, 
                Zero, 
                One, 
                Zero, 
                Zero
            })
            Name (FNTP, Package (0x06)
            {
                0xFF00, 
                0x5A, 
                One, 
                One, 
                Zero, 
                Zero
            })
            Name (FNTC, Package (0x06)
            {
                0xFF00, 
                0x5A, 
                0x02, 
                One, 
                Zero, 
                Zero
            })
            Name (GCCM, Package (0x06)
            {
                0xFE00, 
                0x7F, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCMP, Package (0x06)
            {
                0xFF00, 
                0x7F, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SCMS, Package (0x06)
            {
                0xFF00, 
                0x7F, 
                One, 
                Zero, 
                Zero, 
                Zero
            })
            Name (CESS, Package (0x06)
            {
                0xFE00, 
                0x62, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (GPNL, Package (0x06)
            {
                0xFE00, 
                0x11, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SHK0, Package (0x06)
            {
                0xFF00, 
                0xC000, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SHK1, Package (0x06)
            {
                0xFF00, 
                0xC000, 
                Zero, 
                One, 
                Zero, 
                Zero
            })
            Name (GHKM, Package (0x06)
            {
                0xFE00, 
                0xC000, 
                0x03, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SBED, Package (0x06)
            {
                0xFF00, 
                0x1E, 
                One, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SBEE, Package (0x06)
            {
                0xFF00, 
                0x1E, 
                0x03, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SHEE, Package (0x06)
            {
                0xFF00, 
                0x1E, 
                0x09, 
                Zero, 
                Zero, 
                Zero
            })
            Name (SBHE, Package (0x06)
            {
                0xFF00, 
                0x1E, 
                0x0B, 
                Zero, 
                Zero, 
                Zero
            })
            Name (GBEM, Package (0x06)
            {
                0xFE00, 
                0x1E, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (CECF, Zero)
            Name (CECQ, Zero)
            Name (CECG, Package (0x06)
            {
                0xF300, 
                0x0154, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (CELG, Package (0x06)
            {
                0xF300, 
                0x0155, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (CECD, Package (0x06)
            {
                0xF400, 
                0x0154, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (CECE, Package (0x06)
            {
                0xF400, 
                0x0154, 
                One, 
                Zero, 
                Zero, 
                Zero
            })
            Name (CELD, Package (0x06)
            {
                0xF400, 
                0x0155, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (CELE, Package (0x06)
            {
                0xF400, 
                0x0155, 
                One, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HRCM, Package (0x06)
            {
                0xFE00, 
                0x8F, 
                0xC1, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HRMG, Package (0x06)
            {
                0xFE00, 
                0x8F, 
                0xC3, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HGSS, Package (0x06)
            {
                0xFE00, 
                0x8F, 
                0xC4, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HGRS, Package (0x06)
            {
                0xFE00, 
                0x8F, 
                0xC5, 
                Zero, 
                Zero, 
                Zero
            })
            Name (REVT, Package (0x06)
            {
                0xFE00, 
                0x8F, 
                0xC7, 
                Zero, 
                Zero, 
                Zero
            })
            Name (GIFO, Package (0x06)
            {
                0xFE00, 
                0x8F, 
                0xC8, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HCON, Package (0x06)
            {
                0xFE00, 
                0xC000, 
                0x03, 
                Zero, 
                Zero, 
                Zero
            })
            Name (REMS, Package (0x06)
            {
                0xFF00, 
                0x61, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (LEDG, Package (0x06)
            {
                0xF300, 
                0x014E, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (LED0, Package (0x06)
            {
                0xF400, 
                0x014E, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (LED1, Package (0x06)
            {
                0xF400, 
                0x014E, 
                One, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HPG1, Package (0x06)
            {
                0xFE00, 
                0x6D, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (HPG2, Package (0x06)
            {
                0xFE00, 
                0x6D, 
                Zero, 
                One, 
                Zero, 
                Zero
            })
            Name (HPG3, Package (0x06)
            {
                0xFE00, 
                0x6D, 
                Zero, 
                0x0200, 
                Zero, 
                Zero
            })
            Name (HPG4, Package (0x06)
            {
                0xFE00, 
                0x6D, 
                Zero, 
                0x0201, 
                Zero, 
                Zero
            })
            Name (HPS1, Package (0x06)
            {
                0xFE00, 
                0x6D, 
                Zero, 
                0x0100, 
                Zero, 
                Zero
            })
            Name (HPS2, Package (0x06)
            {
                0xFE00, 
                0x6D, 
                Zero, 
                0x0102, 
                Zero, 
                Zero
            })
            Name (RMGW, Package (0x06)
            {
                0xFE00, 
                0x47, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (RMCW, Package (0x06)
            {
                0xFF00, 
                0x47, 
                0x5A00, 
                Zero, 
                Zero, 
                Zero
            })
            Name (RMGS, Package (0x06)
            {
                0xFE00, 
                0x61, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (RMSD, Package (0x06)
            {
                0xFF00, 
                0x61, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (RMSE, Package (0x06)
            {
                0xFF00, 
                0x61, 
                One, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PANS, Package (0x06)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PT01, Package (0x06)
            {
                0x02, 
                0x80, 
                One, 
                0xE0, 
                Zero, 
                Zero
            })
            Name (PT02, Package (0x06)
            {
                0x03, 
                0x20, 
                0x02, 
                0x58, 
                Zero, 
                Zero
            })
            Name (PT03, Package (0x06)
            {
                0x04, 
                Zero, 
                0x03, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PT04, Package (0x06)
            {
                0x04, 
                Zero, 
                0x02, 
                0x58, 
                Zero, 
                Zero
            })
            Name (PT05, Package (0x06)
            {
                0x03, 
                0x20, 
                One, 
                0xE0, 
                Zero, 
                Zero
            })
            Name (PT06, Package (0x06)
            {
                0x05, 
                Zero, 
                0x04, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PT07, Package (0x06)
            {
                0x05, 
                0x78, 
                0x04, 
                0x1A, 
                Zero, 
                Zero
            })
            Name (PT08, Package (0x06)
            {
                0x06, 
                0x40, 
                0x04, 
                0xB0, 
                Zero, 
                Zero
            })
            Name (PT09, Package (0x06)
            {
                0x05, 
                Zero, 
                0x02, 
                0x58, 
                Zero, 
                Zero
            })
            Name (PT0A, Package (0x06)
            {
                0x05, 
                Zero, 
                0x03, 
                0x20, 
                Zero, 
                Zero
            })
            Name (PT0B, Package (0x06)
            {
                0x05, 
                0xA0, 
                0x03, 
                0x84, 
                Zero, 
                Zero
            })
            Name (PT0C, Package (0x06)
            {
                0x06, 
                0x90, 
                0x04, 
                0x1A, 
                Zero, 
                Zero
            })
            Name (PT0D, Package (0x06)
            {
                0x07, 
                0x80, 
                0x04, 
                0xB0, 
                Zero, 
                Zero
            })
            Name (PT0E, Package (0x06)
            {
                0x05, 
                Zero, 
                0x03, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PT0F, Package (0x06)
            {
                0x07, 
                0x80, 
                0x04, 
                0x38, 
                Zero, 
                Zero
            })
            Name (PT10, Package (0x06)
            {
                0x06, 
                0x90, 
                0x03, 
                0xB1, 
                Zero, 
                Zero
            })
            Name (PT11, Package (0x06)
            {
                0x05, 
                0x56, 
                0x03, 
                Zero, 
                Zero, 
                Zero
            })
            Name (PT12, Package (0x06)
            {
                0x06, 
                0x40, 
                0x03, 
                0x84, 
                Zero, 
                Zero
            })
            Name (PT13, Package (0x06)
            {
                0x04, 
                Zero, 
                0x02, 
                0x40, 
                Zero, 
                Zero
            })
            Method (MTCH, 2, NotSerialized)
            {
                If ((DerefOf (Arg0 [Zero]) != DerefOf (Arg1 [Zero]
                    )))
                {
                    Return (Zero)
                }

                If ((DerefOf (Arg0 [One]) != DerefOf (Arg1 [One]
                    )))
                {
                    Return (Zero)
                }

                If ((DerefOf (Arg0 [0x02]) != DerefOf (Arg1 [0x02]
                    )))
                {
                    Return (Zero)
                }

                If ((DerefOf (Arg0 [0x03]) != DerefOf (Arg1 [0x03]
                    )))
                {
                    Return (Zero)
                }

                If ((DerefOf (Arg0 [0x04]) != DerefOf (Arg1 [0x04]
                    )))
                {
                    Return (Zero)
                }

                If ((DerefOf (Arg0 [0x05]) != DerefOf (Arg1 [0x05]
                    )))
                {
                    Return (Zero)
                }

                Return (One)
            }

            Method (SPFC, 6, Serialized)
            {
                Name (_T_N, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_M, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_L, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_K, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_J, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_I, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_H, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_G, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_F, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_E, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_D, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_C, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_B, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_A, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_9, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_8, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_7, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_6, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_5, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_4, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_3, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_2, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                VALI [Zero] = ToInteger (Arg0)
                VALI [One] = ToInteger (Arg1)
                VALI [0x02] = ToInteger (Arg2)
                VALI [0x03] = ToInteger (Arg3)
                VALI [0x04] = ToInteger (Arg4)
                VALI [0x05] = ToInteger (Arg5)
                VALO [One] = Zero
                VALO [0x02] = Zero
                VALO [0x03] = Zero
                VALO [0x04] = Zero
                VALO [0x05] = Zero
                BLK0 = ToInteger (Arg0)
                BLK1 = ToInteger (Arg1)
                BLK2 = ToInteger (Arg2)
                BLK3 = ToInteger (Arg3)
                BLK4 = ToInteger (Arg4)
                BLK5 = ToInteger (Arg5)
                CECF = Zero
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                Local0 = ^^PCI0.LPCB.EC0.POLG /* \_SB_.PCI0.LPCB.EC0_.POLG */
                Release (^^PCI0.LPCB.EC0.MUT1)
                If ((Local0 == Zero))
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    ^^PCI0.LPCB.EC0.POLG = One
                    Release (^^PCI0.LPCB.EC0.MUT1)
                }

                Local0 = ToInteger (Arg1)
                Local0 &= 0x00FFFFFF
                If (((ToInteger (Local0) == 0x56) && MTCH (VALI, GWFS)))
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.KSWH /* \_SB_.PCI0.LPCB.EC0_.KSWH */
                    Local0 ^= One
                    Local1 = VRFS /* \_SB_.TVAP.VRFS */
                    Local1 <<= 0x09
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    If (Local0)
                    {
                        Local0 |= Local1
                    }

                    VALO [0x02] = Local0
                    VALO [Zero] = Zero
                }
                ElseIf (((ToInteger (Local0) == 0x56) && MTCH (VALI, SWRN)))
                {
                    PHSR (0x0B, 0x23)
                    VALO [Zero] = Zero
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    ^^PCI0.LPCB.EC0.WLAN = WLAN /* \_SB_.WLAN */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    VRFS = One
                }
                ElseIf (((ToInteger (Local0) == 0x56) && MTCH (VALI, SWRF)))
                {
                    PHSR (0x0B, 0x24)
                    VALO [Zero] = Zero
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    ^^PCI0.LPCB.EC0.WLAN = WLAN /* \_SB_.WLAN */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    VRFS = Zero
                }
                ElseIf ((ToInteger (Local0) == 0x56))
                {
                    VALO [Zero] = 0x8000
                }
                ElseIf (((ToInteger (Local0) == 0x050E) && MTCH (VALI, GTPS)))
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.TPAD /* \_SB_.PCI0.LPCB.EC0_.TPAD */
                    Local0 ^= One
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    VALO [0x02] = Local0
                    VALO [Zero] = Zero
                }
                ElseIf (((ToInteger (Local0) == 0x050E) && MTCH (VALI, STPE)))
                {
                    PHSR (0x07, 0x18)
                    VALO [Zero] = Zero
                }
                ElseIf (((ToInteger (Local0) == 0x050E) && MTCH (VALI, STPD)))
                {
                    PHSR (0x07, 0x19)
                    VALO [Zero] = Zero
                }
                ElseIf ((ToInteger (Local0) == 0x050E))
                {
                    VALO [Zero] = 0x8000
                }
                ElseIf (((ToInteger (Local0) == 0x5A) && MTCH (VALI, FNDS)))
                {
                    PHSR (0x0C, Zero)
                    VALO [Zero] = Zero
                }
                ElseIf (((ToInteger (Local0) == 0x5A) && MTCH (VALI, FNTP)))
                {
                    PHSR (0x0C, One)
                    VALO [Zero] = Zero
                }
                ElseIf (((ToInteger (Local0) == 0x5A) && MTCH (VALI, FNTC)))
                {
                    PHSR (0x0C, 0x02)
                    VALO [Zero] = Zero
                }
                ElseIf ((ToInteger (Local0) == 0x5A))
                {
                    VALO [Zero] = 0x8000
                }
                ElseIf (((ToInteger (Local0) == 0x7F) && MTCH (VALI, GCCM)))
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.TMOD /* \_SB_.PCI0.LPCB.EC0_.TMOD */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    VALO [0x02] = Local0
                    VALO [0x03] = One
                    VALO [Zero] = Zero
                }
                ElseIf (((ToInteger (Local0) == 0x7F) && MTCH (VALI, SCMP)))
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    ^^PCI0.LPCB.EC0.TMOD = Zero
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    PHSR (0x0A, Zero)
                    VALO [Zero] = Zero
                }
                ElseIf (((ToInteger (Local0) == 0x7F) && MTCH (VALI, SCMS)))
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    ^^PCI0.LPCB.EC0.TMOD = One
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    PHSR (0x0A, One)
                    VALO [Zero] = Zero
                }
                ElseIf ((ToInteger (Local0) == 0x7F))
                {
                    VALO [Zero] = 0x8000
                }
                ElseIf (((ToInteger (Local0) == 0x11) && MTCH (VALI, GPNL)))
                {
                    Name (PBUF, Buffer (0x0200)
                    {
                         0x00                                             // .
                    })
                    CreateField (PBUF, Zero, 0x08, P000)
                    CreateField (PBUF, 0x08, 0x08, P001)
                    CreateField (PBUF, 0x10, 0x08, P002)
                    CreateField (PBUF, 0x18, 0x08, P003)
                    ^^QWMI.PHSR (0x0B, Zero)
                    PBUF = OWNS /* \_SB_.OWNS */
                    PANS [Zero] = ToInteger (P000)
                    PANS [One] = ToInteger (P001)
                    PANS [0x02] = ToInteger (P002)
                    PANS [0x03] = ToInteger (P003)
                    If (MTCH (PANS, PT01))
                    {
                        Local0 = Zero
                    }
                    ElseIf (MTCH (PANS, PT02))
                    {
                        Local0 = 0x0100
                    }
                    ElseIf (MTCH (PANS, PT03))
                    {
                        Local0 = 0x0200
                    }
                    ElseIf (MTCH (PANS, PT04))
                    {
                        Local0 = 0x0300
                    }
                    ElseIf (MTCH (PANS, PT05))
                    {
                        Local0 = 0x0400
                    }
                    ElseIf (MTCH (PANS, PT06))
                    {
                        Local0 = 0x0500
                    }
                    ElseIf (MTCH (PANS, PT07))
                    {
                        Local0 = 0x0600
                    }
                    ElseIf (MTCH (PANS, PT08))
                    {
                        Local0 = 0x0700
                    }
                    ElseIf (MTCH (PANS, PT09))
                    {
                        Local0 = 0x0800
                    }
                    ElseIf (MTCH (PANS, PT0A))
                    {
                        Local0 = 0x0900
                    }
                    ElseIf (MTCH (PANS, PT0B))
                    {
                        Local0 = 0x0A00
                    }
                    ElseIf (MTCH (PANS, PT0C))
                    {
                        Local0 = 0x0B00
                    }
                    ElseIf (MTCH (PANS, PT0D))
                    {
                        Local0 = 0x0C00
                    }
                    ElseIf (MTCH (PANS, PT0E))
                    {
                        Local0 = 0x0D00
                    }
                    ElseIf (MTCH (PANS, PT0F))
                    {
                        Local0 = 0x0E00
                    }
                    ElseIf (MTCH (PANS, PT10))
                    {
                        Local0 = 0x0F00
                    }
                    ElseIf (MTCH (PANS, PT11))
                    {
                        Local0 = 0x1000
                    }
                    ElseIf (MTCH (PANS, PT12))
                    {
                        Local0 = 0x1100
                    }
                    ElseIf (MTCH (PANS, PT13))
                    {
                        Local0 = 0x1200
                    }
                    Else
                    {
                        Local0 = 0xFFFF
                    }

                    VALO [Zero] = Zero
                    VALO [0x02] = Local0
                }
                ElseIf ((ToInteger (Local0) == 0x11))
                {
                    VALO [Zero] = 0x8000
                }
                ElseIf (((ToInteger (Local0) == 0x62) && MTCH (VALI, CESS)))
                {
                    If ((ENSR == 0x02))
                    {
                        VALO [0x03] = 0x21
                    }
                    Else
                    {
                        VALO [0x03] = Zero
                    }

                    VALO [Zero] = Zero
                }
                ElseIf ((ToInteger (Local0) == 0x62))
                {
                    VALO [Zero] = 0x8000
                }
                ElseIf (((ToInteger (Local0) == 0xC000) && MTCH (VALI, SHK0)))
                {
                    VALO [Zero] = Zero
                }
                ElseIf (((ToInteger (Local0) == 0xC000) && MTCH (VALI, SHK1)))
                {
                    VALO [Zero] = Zero
                }
                ElseIf (((ToInteger (Local0) == 0xC000) && MTCH (VALI, GHKM)))
                {
                    Local0 = Zero
                    VALO [Zero] = Zero
                    If ((MID4 == One))
                    {
                        Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        If ((^^PCI0.LPCB.EC0.CCBC == Zero))
                        {
                            Local0 |= Zero
                        }
                        Else
                        {
                            Local0 |= 0x10
                        }

                        Release (^^PCI0.LPCB.EC0.MUT1)
                    }

                    VALO [0x03] = Local0
                }
                ElseIf ((ToInteger (Local0) == 0xC000))
                {
                    VALO [Zero] = 0x8000
                }
                Else
                {
                    CKFG = One
                }

                If ((CKFG == One))
                {
                    CKFG = Zero
                    If (((ToInteger (Local0) == 0x1E) && MTCH (VALI, SBED)))
                    {
                        VBFG = Zero
                        Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        ^^PCI0.LPCB.EC0.HEUE = One
                        ^^PCI0.LPCB.EC0.BEUE = One
                        Release (^^PCI0.LPCB.EC0.MUT1)
                        VALO [Zero] = Zero
                    }
                    ElseIf (((ToInteger (Local0) == 0x1E) && MTCH (VALI, SBEE)))
                    {
                        VBFG = 0x02
                        Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        ^^PCI0.LPCB.EC0.HEUE = One
                        ^^PCI0.LPCB.EC0.BEUE = Zero
                        Release (^^PCI0.LPCB.EC0.MUT1)
                        VALO [Zero] = Zero
                    }
                    ElseIf (((ToInteger (Local0) == 0x1E) && MTCH (VALI, SHEE)))
                    {
                        VBFG = 0x08
                        Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        ^^PCI0.LPCB.EC0.HEUE = Zero
                        ^^PCI0.LPCB.EC0.BEUE = One
                        Release (^^PCI0.LPCB.EC0.MUT1)
                        VALO [Zero] = Zero
                    }
                    ElseIf (((ToInteger (Local0) == 0x1E) && MTCH (VALI, SBHE)))
                    {
                        VBFG = 0x0A
                        Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        ^^PCI0.LPCB.EC0.HEUE = Zero
                        ^^PCI0.LPCB.EC0.BEUE = Zero
                        Release (^^PCI0.LPCB.EC0.MUT1)
                        VALO [Zero] = Zero
                    }
                    ElseIf (((ToInteger (Local0) == 0x1E) && MTCH (VALI, GBEM)))
                    {
                        Local0 = VBFG /* \_SB_.TVAP.VBFG */
                        VALO [0x02] = Local0++
                        VALO [Zero] = Zero
                    }
                    ElseIf ((ToInteger (Local0) == 0x1E))
                    {
                        VALO [Zero] = 0x8000
                    }
                    ElseIf (((ToInteger (Local0) == 0x014E) && MTCH (VALI, LEDG)))
                    {
                        VALO [Zero] = Zero
                        VALO [One] = One
                        Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = ^^PCI0.LPCB.EC0.LEDS /* \_SB_.PCI0.LPCB.EC0_.LEDS */
                        Release (^^PCI0.LPCB.EC0.MUT1)
                        VALO [0x02] = Local0
                    }
                    ElseIf (((ToInteger (Local0) == 0x014E) && MTCH (VALI, LED0)))
                    {
                        PHSR (0x11, Zero)
                        VALO [Zero] = Zero
                    }
                    ElseIf (((ToInteger (Local0) == 0x014E) && MTCH (VALI, LED1)))
                    {
                        PHSR (0x11, One)
                        VALO [Zero] = Zero
                    }
                    ElseIf ((ToInteger (Local0) == 0x014E))
                    {
                        VALO [Zero] = 0x8300
                    }
                    ElseIf (((ToInteger (Local0) == 0x47) && MTCH (VALI, RMGW)))
                    {
                        VALO [Zero] = Zero
                        Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        Local0 = ^^PCI0.LPCB.EC0.DALB /* \_SB_.PCI0.LPCB.EC0_.DALB */
                        Release (^^PCI0.LPCB.EC0.MUT1)
                        VALO [0x02] = Zero
                        VALO [0x03] = Local0
                        If ((Local0 == 0x66))
                        {
                            VALO [0x02] = 0x20
                        }
                        ElseIf ((Local0 == 0x67))
                        {
                            VALO [0x02] = 0x20
                        }
                        ElseIf ((Local0 == 0x8C))
                        {
                            VALO [0x02] = 0x20
                        }
                        ElseIf ((Local0 == 0x90))
                        {
                            VALO [0x02] = 0x20
                        }
                        ElseIf ((Local0 == 0xC0))
                        {
                            VALO [0x02] = 0x0131
                        }
                    }
                    ElseIf (((ToInteger (Local0) == 0x47) && MTCH (VALI, RMCW)))
                    {
                        VALO [Zero] = Zero
                        Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                        ^^PCI0.LPCB.EC0.DALB = Zero
                        Release (^^PCI0.LPCB.EC0.MUT1)
                    }
                    ElseIf ((ToInteger (Local0) == 0x47))
                    {
                        VALO [Zero] = 0x8300
                    }
                    ElseIf (((ToInteger (Local0) == 0x61) && MTCH (VALI, RMGS)))
                    {
                        VALO [Zero] = Zero
                        PHSR (0x14, 0x02)
                        VALO [0x02] = INF /* \_SB_.INF_ */
                    }
                    ElseIf (((ToInteger (Local0) == 0x61) && MTCH (VALI, RMSD)))
                    {
                        VALO [Zero] = Zero
                        PHSR (0x14, Zero)
                        FCIR = Zero
                        CIRW = Zero
                        ^^PCI0.LPCB.CIR.DCIR ()
                        ^^PCI0.LPCB.CIR2.DCIR ()
                        Notify (^^PCI0.LPCB, Zero) // Bus Check
                    }
                    ElseIf (((ToInteger (Local0) == 0x61) && MTCH (VALI, RMSE)))
                    {
                        VALO [Zero] = Zero
                        PHSR (0x14, One)
                        FCIR = One
                        CIRW = One
                        ^^PCI0.LPCB.CIR.ECIR ()
                        ^^PCI0.LPCB.CIR2.ECIR ()
                        Notify (^^PCI0.LPCB, One) // Device Check
                    }
                    ElseIf ((ToInteger (Local0) == 0x61))
                    {
                        VALO [Zero] = 0x8300
                    }
                    ElseIf (((ToInteger (Local0) == 0x015D) && (ToInteger (Arg0) == 
                        0xF300)))
                    {
                        Acquire (PSMX, 0xFFFF)
                        BCMD = 0x90
                        DID = 0x20
                        INF = 0x02
                        SMIC = Zero
                        Release (PSMX)
                        INF ^= One
                        VALO [Zero] = Zero
                        VALO [0x02] = INF /* \_SB_.INF_ */
                        VALO [0x04] = Zero
                    }
                    ElseIf (((ToInteger (Local0) == 0x015D) && (ToInteger (Arg0) == 
                        0xF400)))
                    {
                        _T_0 = ToInteger (Arg2)
                        If ((_T_0 == Zero))
                        {
                            Acquire (PSMX, 0xFFFF)
                            BCMD = 0x90
                            DID = 0x20
                            INF = Zero
                            SMIC = Zero
                            Release (PSMX)
                            VALO [Zero] = Zero
                        }
                        ElseIf ((_T_0 == One))
                        {
                            Acquire (PSMX, 0xFFFF)
                            BCMD = 0x90
                            DID = 0x20
                            INF = One
                            SMIC = Zero
                            Release (PSMX)
                            VALO [Zero] = Zero
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0x015D))
                    {
                        VALO [Zero] = 0x8000
                    }
                    ElseIf ((ToInteger (Local0) == 0x0154))
                    {
                        PHSR (0x12, Zero)
                        CECF = 0x55
                    }
                    ElseIf ((ToInteger (Local0) == 0x0155))
                    {
                        PHSR (0x12, One)
                        CECF = 0x55
                    }
                    ElseIf ((ToInteger (Local0) == 0x8F))
                    {
                        PHSR (0x12, 0x02)
                        CECF = 0x55
                    }
                    ElseIf ((ToInteger (Local0) == 0x00C0008F))
                    {
                        PHSR (0x12, 0x03)
                        CECF = 0x55
                    }
                    ElseIf ((ToInteger (Local0) == 0x00C2008F))
                    {
                        PHSR (0x12, 0x04)
                        CECF = 0x55
                    }
                    ElseIf ((ToInteger (Local0) == 0x00C9008F))
                    {
                        PHSR (0x12, 0x05)
                        CECF = 0x55
                    }
                    ElseIf ((ToInteger (Local0) == 0xC000))
                    {
                        PHSR (0x12, 0x08)
                        CECF = 0x55
                    }
                    ElseIf (((ToInteger (Local0) == 0x6D) && (MTCH (VALI, HPS1) || 
                        MTCH (VALI, HPS2))))
                    {
                        VALO [Zero] = Zero
                    }
                    ElseIf (((ToInteger (Local0) == 0x6D) && MTCH (VALI, HPG1)))
                    {
                        Local0 = HDX1 /* \_SB_.HDX1 */
                        Local1 = HDY1 /* \_SB_.HDY1 */
                        Local2 = HDZ1 /* \_SB_.HDZ1 */
                        Local3 = (Local1 << 0x10)
                        Local3 |= Local0
                        VALO [0x02] = Local3
                        VALO [0x04] = Local2
                        VALO [Zero] = Zero
                    }
                    ElseIf (((ToInteger (Local0) == 0x6D) && MTCH (VALI, HPG2)))
                    {
                        Local0 = HDX2 /* \_SB_.HDX2 */
                        Local1 = HDY2 /* \_SB_.HDY2 */
                        Local2 = HDZ2 /* \_SB_.HDZ2 */
                        Local3 = (Local1 << 0x10)
                        Local3 |= Local0
                        VALO [0x02] = Local3
                        VALO [0x04] = Local2
                        VALO [Zero] = Zero
                    }
                    ElseIf (((ToInteger (Local0) == 0x6D) && MTCH (VALI, HPG3)))
                    {
                        Local0 = HDX3 /* \_SB_.HDX3 */
                        Local1 = HDY3 /* \_SB_.HDY3 */
                        Local2 = HDZ3 /* \_SB_.HDZ3 */
                        Local3 = (Local1 << 0x10)
                        Local3 |= Local0
                        VALO [0x02] = Local3
                        VALO [0x04] = Local2
                        VALO [Zero] = Zero
                    }
                    ElseIf (((ToInteger (Local0) == 0x6D) && MTCH (VALI, HPG4)))
                    {
                        Local0 = HDX4 /* \_SB_.HDX4 */
                        Local1 = HDY4 /* \_SB_.HDY4 */
                        Local2 = HDZ4 /* \_SB_.HDZ4 */
                        Local3 = (Local1 << 0x10)
                        Local3 |= Local0
                        VALO [0x02] = Local3
                        VALO [0x04] = Local2
                        VALO [Zero] = Zero
                    }
                    ElseIf ((ToInteger (Local0) == 0x6D))
                    {
                        VALO [Zero] = 0x8300
                    }
                    ElseIf (((ToInteger (Local0) == 0xB0) && (ToInteger (Arg0) == 
                        0xFE00)))
                    {
                        If (((ToInteger (Arg2) == Zero) && (ToInteger (Arg3) == 0xFFFF)))
                        {
                            VALO [Zero] = Zero
                            VALO [0x02] = 0x02
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf (((ToInteger (Local0) == 0xB0) && (ToInteger (Arg0) == 
                        0xFF00)))
                    {
                        If ((ToInteger (Arg2) == Zero))
                        {
                            PHSR (0x1F, Zero)
                            VALO [Zero] = Zero
                        }
                        ElseIf ((ToInteger (Arg2) == One))
                        {
                            PHSR (0x1F, One)
                            VALO [Zero] = Zero
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf (((ToInteger (Local0) == 0xB0) && !MID9))
                    {
                        VALO [Zero] = 0x8000
                        VALO [0x02] = Zero
                    }
                    Else
                    {
                        CKFG = One
                    }
                }

                If ((CKFG == One))
                {
                    CKFG = Zero
                    If ((ToInteger (Local0) == 0x2A))
                    {
                        VALO [Zero] = Zero
                        _T_1 = ToInteger (^^BLVL)
                        If ((_T_1 == Zero))
                        {
                            VALO [0x02] = Zero
                        }
                        ElseIf ((_T_1 == One))
                        {
                            VALO [0x02] = 0x2000
                        }
                        ElseIf ((_T_1 == 0x02))
                        {
                            VALO [0x02] = 0x4000
                        }
                        ElseIf ((_T_1 == 0x03))
                        {
                            VALO [0x02] = 0x6000
                        }
                        ElseIf ((_T_1 == 0x04))
                        {
                            VALO [0x02] = 0x8000
                        }
                        ElseIf ((_T_1 == 0x05))
                        {
                            VALO [0x02] = 0xA000
                        }
                        ElseIf ((_T_1 == 0x06))
                        {
                            VALO [0x02] = 0xC000
                        }
                        ElseIf ((_T_1 == 0x07))
                        {
                            VALO [0x02] = 0xE000
                        }

                        VALO [0x03] = 0xE000
                    }
                    ElseIf ((ToInteger (Local0) == 0x42))
                    {
                        _T_2 = ToInteger (Arg2)
                        If ((_T_2 == One))
                        {
                            REFT = One
                            VALO [Zero] = Zero
                        }
                        ElseIf ((_T_2 == 0x10))
                        {
                            REFT = One
                            VALO [Zero] = Zero
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0x9F))
                    {
                        If ((ToInteger (Arg0) == 0xFE00))
                        {
                            _T_3 = ToInteger (Arg2)
                            If ((_T_3 == Zero))
                            {
                                PHIF = Zero
                                VALO [Zero] = Zero
                                VALO [0x03] = ((EPFF << 0x08) | EPFE)
                            }
                            ElseIf ((_T_3 == 0xFFFF))
                            {
                                VALO [Zero] = Zero
                                VALO [0x03] = 0x0200
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                        ElseIf ((ToInteger (Arg0) == 0xFF00))
                        {
                            _T_4 = ToInteger (Arg2)
                            If ((_T_4 == Zero))
                            {
                                VALO [Zero] = Zero
                                Local0 = ToInteger (Arg3)
                                EPFE = (Local0 & 0xFF)
                                EPFF = ((Local0 >> 0x08) & 0xFF)
                                PHIF = One
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0xA1))
                    {
                        _T_5 = ToInteger (Arg5)
                        If ((_T_5 == Zero))
                        {
                            HM01 = One
                            VALO [Zero] = Zero
                        }
                        ElseIf ((_T_5 == One))
                        {
                            If ((HM01 == One))
                            {
                                VALO [Zero] = Zero
                                If ((ToInteger (Arg2) == One))
                                {
                                    If (MBTS)
                                    {
                                        Divide (MBVG, 0x64, Local1, VALO [0x02])
                                    }
                                    Else
                                    {
                                        VALO [0x02] = 0xFF
                                    }
                                }
                                Else
                                {
                                    VALO [0x02] = 0xFF
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8D50
                            }
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0xA2))
                    {
                        _T_6 = ToInteger (Arg5)
                        If ((_T_6 == Zero))
                        {
                            HM02 = One
                            VALO [Zero] = Zero
                        }
                        ElseIf ((_T_6 == One))
                        {
                            If ((HM02 == One))
                            {
                                VALO [Zero] = Zero
                                If ((ToInteger (Arg2) == Zero))
                                {
                                    If ((ToInteger (Arg3) == Zero))
                                    {
                                        Divide (0x000F0000, FSPD, Local0, VALO [0x02])
                                    }
                                    ElseIf ((ToInteger (Arg3) == One))
                                    {
                                        Divide (0x000F0000, FSPD, Local0, VALO [0x02])
                                        VALO [0x03] = 0x0ED8
                                    }
                                }
                                ElseIf ((ToInteger (Arg2) == One))
                                {
                                    If ((ToInteger (Arg3) == Zero))
                                    {
                                        Divide (0x000F0000, FSP2, Local0, VALO [0x02])
                                    }
                                    ElseIf ((ToInteger (Arg3) == One))
                                    {
                                        Divide (0x000F0000, FSP2, Local0, VALO [0x02])
                                        VALO [0x03] = 0x0D48
                                    }
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8D50
                            }
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0xA6))
                    {
                        _T_7 = ToInteger (Arg5)
                        If ((_T_7 == Zero))
                        {
                            If (GSBF)
                            {
                                VALO [Zero] = 0x8D20
                            }
                            ElseIf (MID9)
                            {
                                _T_8 = ToInteger (Arg3)
                                If ((_T_8 == Zero))
                                {
                                    HM03 = One
                                    VALO [Zero] = Zero
                                }
                                ElseIf ((_T_8 == One))
                                {
                                    HM03 = One
                                    VALO [Zero] = Zero
                                }
                                ElseIf ((_T_8 == 0x0200))
                                {
                                    HM03 = One
                                    VALO [Zero] = Zero
                                }
                                ElseIf ((_T_8 == 0x0201))
                                {
                                    HM03 = One
                                    VALO [Zero] = Zero
                                }
                                Else
                                {
                                    VALO [Zero] = 0x8300
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8000
                            }
                        }
                        ElseIf ((_T_7 == One))
                        {
                            If (GSBF)
                            {
                                VALO [Zero] = 0x8D20
                            }
                            ElseIf ((HM03 == One))
                            {
                                _T_9 = ToInteger (Arg3)
                                If ((_T_9 == Zero))
                                {
                                    Local0 = GSFX /* \_SB_.TVAP.GSFX */
                                    Local1 = GSFY /* \_SB_.TVAP.GSFY */
                                    Local2 = GSFZ /* \_SB_.TVAP.GSFZ */
                                    VALO [0x02] = ((Local1 << 0x10) | Local0)
                                    VALO [0x04] = Local2
                                    VALO [Zero] = Zero
                                }
                                ElseIf ((_T_9 == One))
                                {
                                    VALO [Zero] = Zero
                                    VALO [0x02] = ((HMY1 << 0x10) | HMX1) /* \_SB_.TVAP.HMX1 */
                                    VALO [0x04] = HMZ1 /* \_SB_.TVAP.HMZ1 */
                                }
                                ElseIf ((_T_9 == 0x0200))
                                {
                                    VALO [Zero] = Zero
                                    VALO [0x02] = ((HMY3 << 0x10) | HMX3) /* \_SB_.TVAP.HMX3 */
                                    VALO [0x04] = HMZ3 /* \_SB_.TVAP.HMZ3 */
                                }
                                ElseIf ((_T_9 == 0x0201))
                                {
                                    VALO [Zero] = Zero
                                    VALO [0x02] = ((HMY4 << 0x10) | HMX4) /* \_SB_.TVAP.HMX4 */
                                    VALO [0x04] = HMZ4 /* \_SB_.TVAP.HMZ4 */
                                }
                                Else
                                {
                                    VALO [Zero] = 0x8300
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8D50
                            }
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0xA7))
                    {
                        _T_A = ToInteger (Arg5)
                        If ((_T_A == Zero))
                        {
                            HM04 = One
                            VALO [Zero] = Zero
                        }
                        ElseIf ((_T_A == One))
                        {
                            If ((HM04 == One))
                            {
                                VALO [Zero] = Zero
                                If (ACDF)
                                {
                                    Local0 = Zero
                                    Local1 = ACCU /* \_SB_.TVAP.ACCU */
                                    VALO [0x02] = ((((((RG59 << 0x08
                                        ) | INTC) << 0x08) | CTMP) << 0x08) | ACVO) /* \_SB_.TVAP.ACVO */
                                    VALO [0x03] = ((ACCA << 0x10) | Local1)
                                }
                                Else
                                {
                                    Local0 = Zero
                                    VALO [0x02] = ((((((RG59 << 0x08
                                        ) | INTC) << 0x08) | CTMP) << 0x08) | 0xFF)
                                    VALO [0x03] = 0xFFFF
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8D50
                            }
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0xA8))
                    {
                        _T_B = ToInteger (Arg4)
                        If ((_T_B == 0x98))
                        {
                            _T_C = ToInteger (Arg5)
                            If ((_T_C == Zero))
                            {
                                HM05 = One
                                VALO [Zero] = Zero
                            }
                            ElseIf ((_T_C == One))
                            {
                                If ((HM05 == One))
                                {
                                    VALO [Zero] = Zero
                                    If ((ToInteger (Arg2) == One))
                                    {
                                        If (MBTS)
                                        {
                                            If (ACDF)
                                            {
                                                VALO [0x02] = MCUR /* \_SB_.TVAP.MCUR */
                                            }
                                            Else
                                            {
                                                VALO [0x02] = (0xFFFF - MCUR) /* \_SB_.TVAP.MCUR */
                                            }

                                            Local0 = MTEM /* \_SB_.TVAP.MTEM */
                                            Local0 -= 0x0AAC
                                            Divide (Local0, 0x0A, Local0, VALO [0x03])
                                        }
                                        Else
                                        {
                                            VALO [0x02] = 0xFFFF
                                            VALO [0x03] = 0xFF
                                        }
                                    }
                                    Else
                                    {
                                        VALO [0x02] = 0xFFFF
                                        VALO [0x03] = 0xFF
                                    }
                                }
                                Else
                                {
                                    VALO [Zero] = 0x8D50
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                        ElseIf ((_T_B == 0x9A))
                        {
                            _T_D = ToInteger (Arg5)
                            If ((_T_D == Zero))
                            {
                                HM06 = One
                                VALO [Zero] = Zero
                            }
                            ElseIf ((_T_D == One))
                            {
                                If ((HM06 == One))
                                {
                                    VALO [Zero] = Zero
                                    If ((ToInteger (Arg2) == Zero))
                                    {
                                        VALO [0x02] = PWM1 /* \_SB_.TVAP.PWM1 */
                                    }
                                    ElseIf ((ToInteger (Arg2) == One))
                                    {
                                        VALO [0x02] = PWM1 /* \_SB_.TVAP.PWM1 */
                                    }
                                }
                                Else
                                {
                                    VALO [Zero] = 0x8D50
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                        ElseIf ((_T_B == 0x9B))
                        {
                            _T_E = ToInteger (Arg5)
                            If ((_T_E == Zero))
                            {
                                HM07 = One
                                VALO [Zero] = Zero
                            }
                            ElseIf ((_T_E == One))
                            {
                                If ((HM07 == One))
                                {
                                    VALO [Zero] = Zero
                                    If ((ToInteger (Arg2) == Zero))
                                    {
                                        VALO [0x03] = ((((((EXCC << 0x08
                                            ) | Zero) << 0x08) | RFSC) << 0x08) | VOLC) /* \_SB_.TVAP.VOLC */
                                        VALO [0x02] = ((((((PAOC << 0x08
                                            ) | ACAC) << 0x08) | FPOC) << 0x08) | PPBC) /* \_SB_.TVAP.PPBC */
                                        PHCL = One
                                    }
                                    ElseIf ((ToInteger (Arg2) == One))
                                    {
                                        VALO [0x02] = BTCC /* \_SB_.TVAP.BTCC */
                                        BTCL = One
                                    }
                                    ElseIf ((ToInteger (Arg2) == 0x02))
                                    {
                                        VALO [0x02] = GPBA /* \_SB_.TVAP.GPBA */
                                        VALO [0x03] = GPBB /* \_SB_.TVAP.GPBB */
                                        GPCL = One
                                    }
                                    Else
                                    {
                                        VALO [Zero] = 0x8300
                                    }
                                }
                                Else
                                {
                                    VALO [Zero] = 0x8D50
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                        ElseIf ((_T_B == 0xA0))
                        {
                            If ((ToInteger (Arg0) == 0xFE00))
                            {
                                _T_F = ToInteger (Arg5)
                                If ((_T_F == Zero))
                                {
                                    HM08 = One
                                    VALO [Zero] = Zero
                                }
                                ElseIf ((_T_F == One))
                                {
                                    If ((HM08 == One))
                                    {
                                        VALO [Zero] = Zero
                                        Local0 = ((PECC << 0x03) | (PECL << One))
                                        VALO [0x02] = (Local0 | PECB) /* \_SB_.TVAP.PECB */
                                    }
                                    Else
                                    {
                                        VALO [Zero] = 0x8D50
                                    }
                                }
                                Else
                                {
                                    VALO [Zero] = 0x8300
                                }

                                If ((ToInteger (Arg3) != Zero))
                                {
                                    VALO [Zero] = 0x8300
                                }
                            }
                        }
                        ElseIf ((_T_B == 0xA9))
                        {
                            _T_G = ToInteger (Arg5)
                            If ((_T_G == Zero))
                            {
                                HM09 = One
                                VALO [Zero] = Zero
                            }
                            ElseIf ((_T_G == One))
                            {
                                If ((HM09 == One))
                                {
                                    VALO [Zero] = Zero
                                    _T_H = ToInteger (Arg2)
                                    If ((_T_H == One))
                                    {
                                        If (MBTS)
                                        {
                                            Local0 = MBRM /* \_SB_.TVAP.MBRM */
                                            Local1 = BTDC /* \_SB_.TVAP.BTDC */
                                            Local2 = LFCC /* \_SB_.TVAP.LFCC */
                                            Local3 = BTDV /* \_SB_.TVAP.BTDV */
                                            Local0 /= 0x64
                                            Local1 /= 0x64
                                            Local2 /= 0x64
                                            Local3 /= 0x64
                                            Local0 *= Local3
                                            Local1 *= Local3
                                            Local2 *= Local3
                                            VALO [0x02] = ((Local0 << 0x10) | BATS) /* \_SB_.TVAP.BATS */
                                            VALO [0x03] = ((CSV2 << 0x10) | CSV1) /* \_SB_.TVAP.CSV1 */
                                            VALO [0x04] = ((Local1 << 0x10) | Local2)
                                            VALO [0x05] = ((CSV4 << 0x10) | CSV3) /* \_SB_.TVAP.CSV3 */
                                        }
                                        Else
                                        {
                                            VALO [0x02] = 0xFFFF
                                            VALO [0x03] = 0xFFFF
                                            VALO [0x04] = 0xFFFF
                                            VALO [0x05] = 0xFFFF
                                        }
                                    }
                                    ElseIf ((_T_H == 0x8001))
                                    {
                                        If (MBTS)
                                        {
                                            VALO [0x02] = BTDV /* \_SB_.TVAP.BTDV */
                                        }
                                        Else
                                        {
                                            VALO [0x02] = 0xFFFF
                                            VALO [0x03] = 0xFFFF
                                            VALO [0x04] = 0xFFFF
                                            VALO [0x05] = 0xFFFF
                                        }
                                    }
                                    Else
                                    {
                                        VALO [0x02] = 0xFFFF
                                        VALO [0x03] = 0xFFFF
                                        VALO [0x04] = 0xFFFF
                                        VALO [0x05] = 0xFFFF
                                    }
                                }
                                Else
                                {
                                    VALO [Zero] = 0x8D50
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                        ElseIf ((_T_B == 0x9D))
                        {
                            _T_I = ToInteger (Arg5)
                            If ((_T_I == Zero))
                            {
                                VALO [Zero] = Zero
                            }
                            ElseIf ((_T_I == One))
                            {
                                VALO [Zero] = Zero
                                VALO [0x02] = HPCF /* \_SB_.TVAP.HPCF */
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0x9D))
                    {
                        If ((ToInteger (Arg0) == 0xFF00))
                        {
                            _T_J = ToInteger (Arg3)
                            If ((_T_J == Zero))
                            {
                                _T_K = ToInteger (Arg2)
                                If ((_T_K == Zero))
                                {
                                    HPCF = Zero
                                    HCWR = One
                                    VALO [Zero] = Zero
                                }
                                ElseIf ((_T_K == One))
                                {
                                    HPCF = One
                                    HCWR = One
                                    VALO [Zero] = Zero
                                }
                                Else
                                {
                                    VALO [Zero] = 0x8300
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0xA0))
                    {
                        If ((ToInteger (Arg3) == Zero))
                        {
                            Local0 = ToInteger (Arg2)
                            Local0 &= 0xF4
                            If (!Local0)
                            {
                                VALO [Zero] = Zero
                                PECT = ToInteger (Arg2)
                                ECWR = One
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0xAA))
                    {
                        VALO [Zero] = Zero
                        VALO [0x02] = CTTO /* \_SB_.TVAP.CTTO */
                        VALO [0x03] = CTTB /* \_SB_.TVAP.CTTB */
                    }
                    ElseIf (((ToInteger (Local0) == 0x0150) && (ToInteger (Arg0) == 
                        0xF300)))
                    {
                        If ((SPFG == One))
                        {
                            VALO [Zero] = Zero
                            _T_L = ToInteger (Arg5)
                            If ((_T_L == Zero))
                            {
                                VALO [One] = 0x800C
                                PHSR (0x1B, Zero)
                                VALO [0x02] = SLPB /* \_SB_.SLPB */
                                VALO [0x03] = 0x20000019
                                VALO [0x04] = 0x20000000
                            }
                            ElseIf ((_T_L == 0x0100))
                            {
                                VALO [One] = 0x8001
                                VALO [0x02] = One
                            }
                            ElseIf ((_T_L == 0x0101))
                            {
                                VALO [One] = 0x800C
                                VALO [0x02] = 0x20000019
                            }
                            ElseIf ((_T_L == 0x0200))
                            {
                                VALO [One] = 0x800D
                                Local0 = Zero
                                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                                VALO [0x02] = ((^^PCI0.LPCB.EC0.SLPL << 0x10) | ^^PCI0.LPCB.EC0.SLPM) /* \_SB_.PCI0.LPCB.EC0_.SLPM */
                                Release (^^PCI0.LPCB.EC0.MUT1)
                                VALO [0x03] = 0x00640005
                                VALO [0x04] = 0x000A0004
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                        Else
                        {
                            VALO [Zero] = 0x8200
                        }
                    }
                    ElseIf (((ToInteger (Local0) == 0x0150) && (ToInteger (Arg0) == 
                        0xF400)))
                    {
                        If (((SPFG == One) && (ToInteger (Arg5) == Zero)))
                        {
                            Local0 = ToInteger (Arg2)
                            If ((((Local0 == 0x20000000) || (Local0 == 0x20000009)) || (Local0 == 0x20000011)))
                            {
                                SLPB = ToInteger (Arg2)
                                PHSR (0x1B, One)
                                VALO [Zero] = Zero
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                        ElseIf (((SPFG == One) && (ToInteger (Arg5) == 0x0200)))
                        {
                            Local0 = ToInteger (Arg2)
                            If (((Local0 & 0xFF80FFF8) != Zero))
                            {
                                VALO [Zero] = 0x8300
                            }
                            ElseIf ((((Local0 & 0x07) == One) || ((Local0 & 
                                0x07) == 0x04)))
                            {
                                If (((Local0 >> 0x10) > 0x64))
                                {
                                    VALO [Zero] = 0x8300
                                }
                                Else
                                {
                                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                                    ^^PCI0.LPCB.EC0.SLPM = (Local0 & 0x07)
                                    ^^PCI0.LPCB.EC0.SLPL = (Local0 >> 0x10)
                                    Release (^^PCI0.LPCB.EC0.MUT1)
                                    VALO [Zero] = Zero
                                }
                            }
                            Else
                            {
                                VALO [Zero] = 0x8300
                            }
                        }
                        ElseIf ((SPFG == One))
                        {
                            VALO [Zero] = 0x8300
                        }
                        Else
                        {
                            VALO [Zero] = 0x8200
                        }
                    }
                    ElseIf (((ToInteger (Local0) == 0x96) && (ToInteger (Arg0) == 
                        0xFE00)))
                    {
                        VALO [Zero] = Zero
                        VALO [0x02] = 0xFF50
                        VALO [0x03] = 0x0501
                    }
                    ElseIf ((ToInteger (Local0) == 0x96))
                    {
                        VALO [Zero] = 0x8000
                    }
                    ElseIf (((ToInteger (Local0) == 0x97) && (ToInteger (Arg0) == 
                        0xFE00)))
                    {
                        If ((ToInteger (Arg3) == One))
                        {
                            VALO [Zero] = Zero
                            Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                            VALO [0x02] = ^^PCI0.LPCB.EC0.ECOF /* \_SB_.PCI0.LPCB.EC0_.ECOF */
                            Release (^^PCI0.LPCB.EC0.MUT1)
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf (((ToInteger (Local0) == 0x97) && (ToInteger (Arg0) == 
                        0xFF00)))
                    {
                        If (((ToInteger (Arg3) == One) && (ToInteger (Arg2) == Zero)))
                        {
                            VALO [Zero] = Zero
                            Acquire (PSMX, 0xFFFF)
                            BCMD = 0x90
                            DID = 0x11
                            INF = 0x03
                            SMIC = Zero
                            Release (PSMX)
                        }
                        ElseIf (((ToInteger (Arg3) == One) && (ToInteger (Arg2) == 
                            One)))
                        {
                            VALO [Zero] = Zero
                            Acquire (PSMX, 0xFFFF)
                            BCMD = 0x90
                            DID = 0x11
                            INF = 0x04
                            SMIC = Zero
                            Release (PSMX)
                        }
                        ElseIf (((ToInteger (Arg3) == Zero) && (ToInteger (Arg2) == 
                            Zero)))
                        {
                            VALO [Zero] = Zero
                        }
                        ElseIf (((ToInteger (Arg3) == Zero) && (ToInteger (Arg2) == 
                            One)))
                        {
                            VALO [Zero] = Zero
                        }
                        ElseIf (((ToInteger (Arg3) == Zero) && (ToInteger (Arg2) == 
                            0x02)))
                        {
                            VALO [Zero] = Zero
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    ElseIf (((ToInteger (Local0) == 0x95) && (ToInteger (Arg0) == 
                        0xFE00)))
                    {
                        If ((MID5 == Zero))
                        {
                            If (KBBF)
                            {
                                VALO [0x02] = KBBT /* \KBBT */
                                VALO [Zero] = Zero
                            }
                            Else
                            {
                                Acquire (PSMX, 0xFFFF)
                                BCMD = 0x90
                                DID = 0x1D
                                INF = 0x02
                                SMIC = Zero
                                Release (PSMX)
                                INF ^= One
                                VALO [Zero] = Zero
                                VALO [0x02] = INF /* \_SB_.INF_ */
                                KBBF = One
                            }
                        }
                        Else
                        {
                            VALO [Zero] = 0x8000
                        }
                    }
                    ElseIf (((ToInteger (Local0) == 0x95) && (ToInteger (Arg0) == 
                        0xFF00)))
                    {
                        _T_M = ToInteger (Arg2)
                        If ((_T_M == Zero))
                        {
                            Acquire (PSMX, 0xFFFF)
                            BCMD = 0x90
                            DID = 0x1D
                            INF = One
                            SMIC = Zero
                            Release (PSMX)
                            KBBT = Zero
                            VALO [Zero] = Zero
                        }
                        ElseIf ((_T_M == One))
                        {
                            Acquire (PSMX, 0xFFFF)
                            BCMD = 0x90
                            DID = 0x1D
                            INF = Zero
                            SMIC = Zero
                            Release (PSMX)
                            KBBT = One
                            VALO [Zero] = Zero
                        }
                        Else
                        {
                            VALO [Zero] = 0x8300
                        }
                    }
                    Else
                    {
                        CKFG = One
                    }
                }

                If ((CKFG == One))
                {
                    CKFG = Zero
                    If ((ToInteger (Local0) == 0x010E))
                    {
                        Local0 = ToInteger (Arg0)
                        If ((Local0 == 0xF300))
                        {
                            VALO [Zero] = Zero
                            VALO [One] = 0x8005
                            If (ALMF)
                            {
                                VALO [0x02] = ((YALM << 0x0A) | ((MALM << 
                                    0x06) | (DALM << One)))
                            }
                            Else
                            {
                                VALO [0x02] = Zero
                            }

                            VALO [0x03] = 0xFFFE
                        }
                        ElseIf ((Local0 == 0xF400))
                        {
                            Local1 = ToInteger (Arg2)
                            ToBCD (((Local1 & 0x3E) >> One), ALMD) /* \_SB_.ALMD */
                            DALM = ((Local1 & 0x3E) >> One)
                            MALM = ((Local1 & 0x03C0) >> 0x06)
                            YALM = ((Local1 & 0xFCC0) >> 0x0A)
                            VALO [Zero] = Zero
                        }
                        Else
                        {
                            VALO [Zero] = 0x8000
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0x010F))
                    {
                        Local0 = ToInteger (Arg0)
                        If ((Local0 == 0xF300))
                        {
                            VALO [Zero] = Zero
                            VALO [One] = 0x8004
                            If (ALMF)
                            {
                                VALO [0x02] = ((FromBCD (ALMH, Local1) << 0x07) | (
                                    FromBCD (ALMM, Local2) << One))
                            }
                            Else
                            {
                                VALO [0x02] = One
                            }

                            VALO [0x03] = 0x0FFF
                            VALO [0x04] = One
                        }
                        ElseIf ((Local0 == 0xF400))
                        {
                            Local1 = ToInteger (Arg2)
                            ALMF = ((Local2 = (Local1 ^ One)) & One)
                            ToBCD (((Local1 & 0x7E) >> One), ALMM) /* \_SB_.ALMM */
                            ToBCD (((Local1 & 0x0F80) >> 0x07), ALMH) /* \_SB_.ALMH */
                            VALO [Zero] = Zero
                        }
                        Else
                        {
                            VALO [Zero] = 0x8000
                        }
                    }
                    ElseIf (((ToInteger (Local0) == 0x015C) && (MID5 == Zero)))
                    {
                        Debug = "015C entry"
                        If ((ToInteger (Arg0) == 0xF300))
                        {
                            Debug = "015C get function"
                            VALO [Zero] = Zero
                            VALO [One] = 0x800E
                            Acquire (PSMX, 0xFFFF)
                            BCMD = 0x90
                            DID = 0x1E
                            INF = Zero
                            SMIC = Zero
                            Release (PSMX)
                            VALO [0x02] = SLPB /* \_SB_.SLPB */
                            VALO [0x03] = 0x003C0003
                            VALO [0x04] = 0x000F0002
                        }
                        ElseIf ((ToInteger (Arg0) == 0xF400))
                        {
                            Debug = "015C set function"
                            Local0 = ToInteger (Arg2)
                            If (((Local0 & 0xFFC0FFF8) != Zero))
                            {
                                VALO [Zero] = 0x8300
                            }
                            ElseIf (((Local0 >> 0x10) > 0x60))
                            {
                                Debug = "015C wrong time value"
                                VALO [Zero] = 0x8300
                            }
                            ElseIf (((Local0 & 0x07) == One))
                            {
                                Debug = "015C set Fn+Z"
                                SLPB = ToInteger (Arg2)
                                Acquire (PSMX, 0xFFFF)
                                BCMD = 0x90
                                DID = 0x1E
                                INF = One
                                SMIC = Zero
                                Release (PSMX)
                                VALO [Zero] = Zero
                            }
                            ElseIf (((Local0 & 0x07) == 0x02))
                            {
                                Debug = "015C set Auto"
                                SLPB = ToInteger (Arg2)
                                PHSR (0x1E, 0x02)
                                VALO [Zero] = Zero
                            }
                            Else
                            {
                                VALO [Zero] = Zero
                            }
                        }
                    }
                    ElseIf ((ToInteger (Local0) == 0x015C))
                    {
                        VALO [Zero] = 0x8000
                    }
                    Else
                    {
                        VALO [Zero] = 0x8000
                    }
                }

                If ((CECF == 0x55))
                {
                    VALO [Zero] = BLK0 /* \_SB_.BLK0 */
                    VALO [One] = BLK1 /* \_SB_.BLK1 */
                    VALO [0x02] = BLK2 /* \_SB_.BLK2 */
                    VALO [0x03] = BLK3 /* \_SB_.BLK3 */
                    VALO [0x04] = BLK4 /* \_SB_.BLK4 */
                    VALO [0x05] = BLK5 /* \_SB_.BLK5 */
                    CECF = Zero
                }

                Local1 = ToInteger (Arg0)
                Local1 &= 0xFFFF
                _T_N = ToInteger (Local1)
                If ((_T_N == 0xF100))
                {
                    If ((SPFG == Zero))
                    {
                        SPFG = One
                        VALO [Zero] = 0x44
                    }
                    Else
                    {
                        VALO [Zero] = 0x8100
                    }
                }
                ElseIf ((_T_N == 0xF200))
                {
                    If ((SPFG == One))
                    {
                        SPFG = Zero
                        VALO [Zero] = 0x44
                    }
                    Else
                    {
                        VALO [Zero] = 0x8200
                    }
                }

                Return (VALO) /* \_SB_.TVAP.VALO */
            }
        }

        Name (HS4S, Zero)
        Device (HAPS)
        {
            Name (_HID, EisaId ("TOS620A"))  // _HID: Hardware ID
            Method (PTLV, 1, NotSerialized)
            {
                PHSR (0x0E, Arg0)
                HS4S = Arg0
            }

            Method (RSSS, 0, NotSerialized)
            {
                HDPI = Zero
                Sleep (0x05)
                HDPI = One
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (MID9)
                {
                    If (SSDF)
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (HPNA, Zero)
            Scope (\_GPE)
            {
                Method (_L1C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                {
                    PAHL ^= One
                    If (HDPA)
                    {
                        If (\_SB.HAPS.HPNA)
                        {
                            Notify (\_SB.HAPS, 0x80) // Status Change
                        }
                        Else
                        {
                            \_SB.HAPS.HPNA = One
                        }
                    }
                    Else
                    {
                        Notify (\_SB.HAPS, 0x81) // Information Change
                    }
                }

                Method (_L1D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                {
                    PLHL ^= One
                    If (MID9)
                    {
                        If (HDPL)
                        {
                            \_SB.TVAP.EVNT (0xBE)
                        }
                        Else
                        {
                            \_SB.TVAP.EVNT (0xBF)
                        }
                    }
                }
            }
        }

        Device (QITR)
        {
            Name (_HID, EisaId ("QCI0701"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0B)
            }

            Name (VZOK, Zero)
            Name (VALI, Package (0x06)
            {
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (VALO, Package (0x06)
            {
                0x88888888, 
                0x88888888, 
                0x88888888, 
                0x88888888, 
                0x88888888, 
                0x88888888
            })
            Name (BBBB, Package (0x05)
            {
                "ABCD", 
                "SRJING", 
                Buffer (0x05)
                {
                     0x12, 0x34, 0x56, 0x78, 0x90                     // .4Vx.
                }, 

                Package (0x02)
                {
                    0x07, 
                    0x09
                }, 

                0x13572468
            })
            Method (ENAB, 0, NotSerialized)
            {
                VZOK = 0x02
            }

            Method (EVNT, 1, NotSerialized)
            {
                VZOK = Arg0
                Notify (QITR, 0x80) // Status Change
                Return (VZOK) /* \_SB_.QITR.VZOK */
            }

            Method (INFO, 0, NotSerialized)
            {
                Local0 = 0x12
                Return (Local0)
            }

            Method (AB00, 0, NotSerialized)
            {
                VZOK = 0x02
            }

            Method (AB11, 1, NotSerialized)
            {
                VZOK = Arg0
                Return (VZOK) /* \_SB_.QITR.VZOK */
            }

            Method (AB01, 0, NotSerialized)
            {
                Local0 = 0x12
                Return (Local0)
            }

            Method (BBAA, 0, NotSerialized)
            {
                Return (BBBB) /* \_SB_.QITR.BBBB */
            }

            Method (SPFC, 6, NotSerialized)
            {
                VALI [Zero] = Arg0
                VALI [One] = Arg1
                VALI [0x02] = Arg2
                VALI [0x03] = Arg3
                VALI [0x04] = Arg4
                VALI [0x05] = Arg5
                Local0 = Arg0
                Local1 = Arg1
                Local2 = Arg2
                Local3 = Arg3
                Local4 = Arg4
                Local5 = Arg5
                VALO [Zero] = Local0
                VALO [One] = Local1
                VALO [0x02] = Local2
                VALO [0x03] = Local3
                VALO [0x04] = Local4
                VALO [0x05] = Local5
                Return (VALO) /* \_SB_.QITR.VALO */
            }

            Method (AB66, 6, NotSerialized)
            {
                VALI [Zero] = Arg0
                VALI [One] = Arg1
                VALI [0x02] = Arg2
                VALI [0x03] = Arg3
                VALI [0x04] = Arg4
                VALI [0x05] = Arg5
                Local0 = Arg0
                Local1 = Arg1
                Local2 = Arg2
                Local3 = Arg3
                Local4 = Arg4
                Local5 = Arg5
                VALO [Zero] = Local0
                VALO [One] = Local1
                VALO [0x02] = Local2
                VALO [0x03] = Local3
                VALO [0x04] = Local4
                VALO [0x05] = Local5
                Return (VALO) /* \_SB_.QITR.VALO */
            }

            Name (HMBB, Buffer (0x1C){})
            CreateField (HMBB, Zero, 0x60, HMPN)
            CreateField (HMBB, 0x60, 0x60, HMMN)
            CreateField (HMBB, 0xC0, 0x10, HMMD)
            CreateField (HMBB, 0xD0, 0x10, HMSN)
            Name (HMBT, Package (0x06)
            {
                Buffer (0x1C){}, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (HMB1, 0, NotSerialized)
            {
                HMPN = "NS2P3SZSV4WO"
                HMMN = "SANYO       "
                HMMD = "12"
                HMSN = "34"
                HMBT [Zero] = HMBB /* \_SB_.QITR.HMBB */
                HMBT [One] = One
                HMBT [0x02] = 0x02
                HMBT [0x03] = 0x03
                HMBT [0x04] = 0x04
                HMBT [0x05] = 0x05
                Return (HMBT) /* \_SB_.QITR.HMBT */
            }

            Method (HMB2, 0, NotSerialized)
            {
                Return (Zero)
            }
        }

        Name (LDSS, Zero)
        Name (SSTS, Zero)
        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Name (LSTS, Zero)
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If ((INS3 == 0x55))
                {
                    INS3 = Zero
                    Return (One)
                }

                P8XH (Zero, 0x25)
                Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                LSTS = ^^PCI0.LPCB.EC0.LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
                Release (^^PCI0.LPCB.EC0.MUT1)
                Return (LSTS) /* \_SB_.LID_.LSTS */
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0F, 
                0x04
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    SSTS = One
                }
                Else
                {
                    SSTS = Zero
                }
            }

            Scope (\_GPE)
            {
                Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
                {
                    Notify (\_SB.LID, 0x80) // Status Change
                }
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 87
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CALPELLA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]                 FACS Address : BBF9BFC0
[028h 0040   4]                 DSDT Address : BBFCE000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : F0
[035h 0053   1]           ACPI Disable Value : F1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000450
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 85
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 0039
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0000
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 0
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000082A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 0
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 00
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000000

[080h 0128   1]         Value to cause reset : 00
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000BBF9BFC0
[08Ch 0140   8]                 DSDT Address : 00000000BBFCE000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000450

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 80
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 03 87 49 4E 54 45 4C 20  // FACP......INTEL 
    0010: 43 41 4C 50 45 4C 4C 41 00 00 04 06 50 54 45 43  // CALPELLA....PTEC
    0020: 01 00 00 00 C0 BF F9 BB 00 E0 FC BB 00 02 09 00  // ................
    0030: B2 00 00 00 F0 F1 00 80 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 85  //  ...............
    0060: 65 00 39 00 00 00 00 00 01 03 0D 00 32 00 00 00  // e.9.........2...
    0070: A5 82 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 00 00 00 00 C0 BF F9 BB 00 00 00 00 00 E0 FC BB  // ................
    0090: 00 00 00 00 01 20 00 00 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 50 04 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 00 08 04 00 00 00 00 00 00 01 80 00 00  // . ..............
    00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 89
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CALPELLA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]            Hardware Block ID : 8086A701

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 89 49 4E 54 45 4C 20  // HPET8.....INTEL 
    0010: 43 41 4C 50 45 4C 4C 41 00 00 04 06 50 54 45 43  // CALPELLA....PTEC
    0020: 01 00 00 00 01 A7 86 80 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B6
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "CALPELLA"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 B6 49 4E 54 45 4C 20  // MCFG<.....INTEL 
    0010: 43 41 4C 50 45 4C 4C 41 00 00 04 06 50 54 45 43  // CALPELLA....PTEC
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 91
[00Ah 0010   6]                       Oem ID : "TOSQCI"
[010h 0016   8]                 Oem Table ID : "TOSQCI00"
[018h 0024   4]                 Oem Revision : 06040000
[01Ch 0028   4]              Asl Compiler ID : " LTP"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 01 D1 F8 E2 \
    2E 9E 56 65 20 B2 3C D6 8C A8 AB EE E9 1D D7 45 \
    EB 6B 72 AD 45 B9 29 86 AE AA 8C 53 39 F4 25 BE \
    B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60 A0 72 47 E6 \
    F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC 1A 6E AF D4 \
    7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90 F5 B0 34 F2 \
    03 C2 9A 7D DD E7 52 4C E8 63 04 6B 00 A7 B5 AB \
    C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A 56 9B D7 45 \
    81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5 01 00 00 00 \
    B6 00 00 00 00 00 02 00 54 4F 53 51 43 49 54 4F \
    53 51 43 49 30 30 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 0F 71 5F 2B D4 FC 7A D2 4E F9 E3 96 6D 49 \
    77 A0 C9 36 2B B9 88 B2 22 F4 F2 2D F2 BE 81 E7 \
    D6 3F 5E 28 CC 49 8A 1E B7 C0 D8 13 69 72 7D 80 \
    C8 DF 7A 15 3C CD 32 DA 2D 74 96 2F 2C 85 CF FC \
    FD 8A 30 3B E8 AE C5 9D 3B 92 C0 08 D1 66 6F D7 \
    57 ED BF 6C 41 CC E1 CA 40 2C C6 FF 5A AE 72 E9 \
    13 57 2A 5C 2C CB 8D 2B 23 2E 59 44 70 1B 2F BE \
    75 A1 84 E8 60 87 19 F0 44 A6 54 45 63 83 6E 33 \
    BB 9A 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 91 54 4F 53 51 43 49  // SLICv.....TOSQCI
    0010: 54 4F 53 51 43 49 30 30 00 00 04 06 20 4C 54 50  // TOSQCI00.... LTP
    0020: 00 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE  // ......Ve .<.....
    0050: E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53  // ...E.kr.E.)....S
    0060: 39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60  // 9.%............`
    0070: A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC  // .rG....?`.......
    0080: 1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90  // .n..}.._ZQ.h..=.
    0090: F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B  // ..4....}..RL.c.k
    00A0: 00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A  // .....o5.z...O).j
    00B0: 56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5  // V..E..7..K.S[<..
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 51  // ............TOSQ
    00D0: 43 49 54 4F 53 51 43 49 30 30 57 49 4E 44 4F 57  // CITOSQCI00WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 0F 71 5F 2B D4 FC 7A D2 4E F9  // .......q_+..z.N.
    0100: E3 96 6D 49 77 A0 C9 36 2B B9 88 B2 22 F4 F2 2D  // ..mIw..6+..."..-
    0110: F2 BE 81 E7 D6 3F 5E 28 CC 49 8A 1E B7 C0 D8 13  // .....?^(.I......
    0120: 69 72 7D 80 C8 DF 7A 15 3C CD 32 DA 2D 74 96 2F  // ir}...z.<.2.-t./
    0130: 2C 85 CF FC FD 8A 30 3B E8 AE C5 9D 3B 92 C0 08  // ,.....0;....;...
    0140: D1 66 6F D7 57 ED BF 6C 41 CC E1 CA 40 2C C6 FF  // .fo.W..lA...@,..
    0150: 5A AE 72 E9 13 57 2A 5C 2C CB 8D 2B 23 2E 59 44  // Z.r..W*\,..+#.YD
    0160: 70 1B 2F BE 75 A1 84 E8 60 87 19 F0 44 A6 54 45  // p./.u...`...D.TE
    0170: 63 83 6E 33 BB 9A                                // c.n3..


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0xBBF1AA98, 
            0x000002E8, 
            "APIST   ", 
            0xBBF1A718, 
            0x00000303, 
            "CPU0CST ", 
            0xBBF19018, 
            0x00000891, 
            "APCST   ", 
            0xBBF18D98, 
            0x00000119
        })
        Name (CFGD, 0x032B0651)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & One))
            {
                If ((((CFGD & 0x01000000) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & One)))
                {
                    SDTL |= One
                    OperationRegion (IST0, SystemMemory, DerefOf (SSDT [One]), DerefOf (SSDT [0x02]))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000000) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC0 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC0 & 0x18))
            {
                APCT ()
            }

            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0xF0) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & One))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & One))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & One))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & One))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSD, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000500, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & One))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x07)
        {
            Package (0x06)
            {
                0x00000640, 
                0x0000AFC8, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x0000063F, 
                0x0000AFC8, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000005BA, 
                0x0000A20D, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x000094E0, 
                0x0000006E, 
                0x0000000A, 
                0x00000383, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x000004AF, 
                0x000087F6, 
                0x0000006E, 
                0x0000000A, 
                0x00000483, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x0000042A, 
                0x00007B14, 
                0x0000006E, 
                0x0000000A, 
                0x00000583, 
                0x00000005
            }, 

            Package (0x06)
            {
                0x000003A5, 
                0x00006EB5, 
                0x0000006E, 
                0x0000000A, 
                0x00000683, 
                0x00000006
            }
        })
        Name (_PSS, Package (0x07)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000640, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x0000063F, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }, 

            Package (0x06)
            {
                0x000005BA, 
                0x0000A20D, 
                0x0000000A, 
                0x0000000A, 
                0x0000000B, 
                0x0000000B
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x000094E0, 
                0x0000000A, 
                0x0000000A, 
                0x0000000A, 
                0x0000000A
            }, 

            Package (0x06)
            {
                0x000004AF, 
                0x000087F6, 
                0x0000000A, 
                0x0000000A, 
                0x00000009, 
                0x00000009
            }, 

            Package (0x06)
            {
                0x0000042A, 
                0x00007B14, 
                0x0000000A, 
                0x0000000A, 
                0x00000008, 
                0x00000008
            }, 

            Package (0x06)
            {
                0x000003A5, 
                0x00006EB5, 
                0x0000000A, 
                0x0000000A, 
                0x00000007, 
                0x00000007
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU0.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU0.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x08
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x08
            }
        })
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If (!PWRS)
                {
                    If ((CFGD & 0x20000000))
                    {
                        If ((CFGD & 0x40))
                        {
                            Return (Package (0x04)
                            {
                                0x03, 
                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000000, // Address
                                            0x01,               // Access Size
                                            )
                                    }, 

                                    One, 
                                    0x03, 
                                    0x03E8
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000010, // Address
                                            0x03,               // Access Size
                                            )
                                    }, 

                                    0x02, 
                                    0xCD, 
                                    0x01F4
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000030, // Address
                                            0x03,               // Access Size
                                            )
                                    }, 

                                    0x03, 
                                    0xF5, 
                                    0xC8
                                }
                            })
                        }

                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000030, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x03, 
                                0xF5, 
                                0xC8
                            }
                        })
                    }

                    If ((CFGD & 0x0200))
                    {
                        If ((CFGD & 0x40))
                        {
                            Return (Package (0x04)
                            {
                                0x03, 
                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000000, // Address
                                            0x01,               // Access Size
                                            )
                                    }, 

                                    One, 
                                    0x03, 
                                    0x03E8
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000010, // Address
                                            0x03,               // Access Size
                                            )
                                    }, 

                                    0x02, 
                                    0xCD, 
                                    0x01F4
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000020, // Address
                                            0x03,               // Access Size
                                            )
                                    }, 

                                    0x03, 
                                    0xF5, 
                                    0x015E
                                }
                            })
                        }

                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000020, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x03, 
                                0xF5, 
                                0x015E
                            }
                        })
                    }

                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000010, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }
                        })
                    }

                    Return (Package (0x02)
                    {
                        One, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }
                    })
                }

                If ((CFGD & 0x0200))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0xF5, 
                            0x015E
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0xCD, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If (!PWRS)
                {
                    If ((CFGD & 0x20000000))
                    {
                        If ((CFGD & 0x40))
                        {
                            Return (Package (0x04)
                            {
                                0x03, 
                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000000, // Address
                                            0x01,               // Access Size
                                            )
                                    }, 

                                    One, 
                                    0x03, 
                                    0x03E8
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (SystemIO, 
                                            0x08,               // Bit Width
                                            0x00,               // Bit Offset
                                            0x0000000000000414, // Address
                                            ,)
                                    }, 

                                    0x02, 
                                    0xCD, 
                                    0x01F4
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (SystemIO, 
                                            0x08,               // Bit Width
                                            0x00,               // Bit Offset
                                            0x0000000000000416, // Address
                                            ,)
                                    }, 

                                    0x03, 
                                    0xF5, 
                                    0xC8
                                }
                            })
                        }

                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000416, // Address
                                        ,)
                                }, 

                                0x03, 
                                0xF5, 
                                0xC8
                            }
                        })
                    }

                    If ((CFGD & 0x0200))
                    {
                        If ((CFGD & 0x40))
                        {
                            Return (Package (0x04)
                            {
                                0x03, 
                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (FFixedHW, 
                                            0x01,               // Bit Width
                                            0x02,               // Bit Offset
                                            0x0000000000000000, // Address
                                            0x01,               // Access Size
                                            )
                                    }, 

                                    One, 
                                    0x03, 
                                    0x03E8
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (SystemIO, 
                                            0x08,               // Bit Width
                                            0x00,               // Bit Offset
                                            0x0000000000000414, // Address
                                            ,)
                                    }, 

                                    0x02, 
                                    0xCD, 
                                    0x01F4
                                }, 

                                Package (0x04)
                                {
                                    ResourceTemplate ()
                                    {
                                        Register (SystemIO, 
                                            0x08,               // Bit Width
                                            0x00,               // Bit Offset
                                            0x0000000000000415, // Address
                                            ,)
                                    }, 

                                    0x03, 
                                    0xF5, 
                                    0x015E
                                }
                            })
                        }

                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000415, // Address
                                        ,)
                                }, 

                                0x03, 
                                0xF5, 
                                0x015E
                            }
                        })
                    }

                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x03)
                        {
                            0x02, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000414, // Address
                                        ,)
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }
                        })
                    }

                    Return (Package (0x02)
                    {
                        One, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }
                    })
                }

                If ((CFGD & 0x0200))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000415, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xF5, 
                            0x015E
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0xCD, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            If (!PWRS)
            {
                If ((CFGD & 0x20000000))
                {
                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x00,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000000, // Address
                                        ,)
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000414, // Address
                                        ,)
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000416, // Address
                                        ,)
                                }, 

                                0x03, 
                                0xF5, 
                                0xC8
                            }
                        })
                    }

                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000416, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xF5, 
                            0xC8
                        }
                    })
                }

                If ((CFGD & 0x0200))
                {
                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x00,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000000, // Address
                                        ,)
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000414, // Address
                                        ,)
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000415, // Address
                                        ,)
                                }, 

                                0x03, 
                                0xF5, 
                                0x015E
                            }
                        })
                    }

                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000415, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xF5, 
                            0x015E
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0xCD, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            If ((CFGD & 0x0200))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000415, // Address
                                ,)
                        }, 

                        0x03, 
                        0xF5, 
                        0x015E
                    }
                })
            }

            If ((CFGD & 0x40))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000414, // Address
                                ,)
                        }, 

                        0x02, 
                        0xCD, 
                        0x01F4
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    0x03, 
                    0x03E8
                }
            })
        }
    }
}



