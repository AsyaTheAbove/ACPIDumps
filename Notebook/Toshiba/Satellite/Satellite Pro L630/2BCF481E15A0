
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20150717-64
Copyright (c) 2000 - 2015 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "TOSINV"
   RSDT   0x00000050     0x01    "TOSINV"  "TOSINV00"   0x00000001    "    "     0x01000013
   XSDT   0x0000007C     0x01    "TOSINV"  "TOSINV00"   0x00000001    "    "     0x01000013
   DSDT   0x0000AE52     0x02    "TOSINV"  "TOSINV00"   0x00000001    "MSFT"     0x01000013
   FACS   0x00000040
   FACP   0x000000F4     0x04    "TOSINV"  "TOSINV00"   0x00000001    "MSFT"     0x01000013
   ASF!   0x000000A5     0x20    "TOSINV"  "TOSINV00"   0x00000001    "MSFT"     0x01000013
   HPET   0x00000038     0x01    "TOSINV"  "TOSINV00"   0x00000001    "MSFT"     0x01000013
   APIC   0x0000008C     0x02    "TOSINV"  "TOSINV00"   0x00000001    "MSFT"     0x01000013
   MCFG   0x0000003C     0x01    "TOSINV"  "TOSINV00"   0x00000001    "MSFT"     0x01000013
   SLIC   0x00000176     0x01    "TOSINV"  "TOSINV00"   0x00000001    "MSFT"     0x01000013
   BOOT   0x00000028     0x01    "TOSINV"  "TOSINV00"   0x00000001    "MSFT"     0x01000013
   SSDT   0x00000110     0x01    "INTEL "  "SataAhci"   0x00001000    "INTL"     0x20051117
   ASPT   0x00000034     0x04    "INTEL "  "Calpella"   0x00000001    "MSFT"     0x01000013
   WDAT   0x00000224     0x01    "INTEL "  "Calpella"   0x00000001    "MSFT"     0x01000013
   SSDT   0x000009F1     0x01    "PmRef "  "CpuPm   "   0x00003000    "INTL"     0x20051117
   SSDT   0x000003E8     0x01    "PmRef "  "Cpu0Ist "   0x00003000    "INTL"     0x20051117
   SSDT   0x00000633     0x01    "PmRef "  "Cpu0Cst "   0x00003001    "INTL"     0x20051117
   SSDT   0x00000303     0x01    "PmRef "  "ApIst   "   0x00003000    "INTL"     0x20051117
   SSDT   0x00000119     0x01    "PmRef "  "ApCst   "   0x00003000    "INTL"     0x20051117

Found 20 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000008C
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 89
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 03
[03Fh 0063   1]                Local Apic ID : 04
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 04
[047h 0071   1]                Local Apic ID : 05
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 05
[04Fh 0079   1]                Local Apic ID : 00
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 06
[057h 0087   1]                Local Apic ID : 00
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 07
[05Fh 0095   1]                Local Apic ID : 00
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 08
[067h 0103   1]                Local Apic ID : 00
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0

[06Ch 0108   1]                Subtable Type : 01 [I/O APIC]
[06Dh 0109   1]                       Length : 0C
[06Eh 0110   1]                  I/O Apic ID : 02
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]                      Address : FEC00000
[074h 0116   4]                    Interrupt : 00000000

[078h 0120   1]                Subtable Type : 02 [Interrupt Source Override]
[079h 0121   1]                       Length : 0A
[07Ah 0122   1]                          Bus : 00
[07Bh 0123   1]                       Source : 00
[07Ch 0124   4]                    Interrupt : 00000002
[080h 0128   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[082h 0130   1]                Subtable Type : 02 [Interrupt Source Override]
[083h 0131   1]                       Length : 0A
[084h 0132   1]                          Bus : 00
[085h 0133   1]                       Source : 09
[086h 0134   4]                    Interrupt : 00000009
[08Ah 0138   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 140 (0x8C)

  0000: 41 50 49 43 8C 00 00 00 02 89 54 4F 53 49 4E 56  // APIC......TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 4D 53 46 54  // TOSINV00....MSFT
  0020: 13 00 00 01 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
  0030: 01 00 00 00 00 08 02 01 01 00 00 00 00 08 03 04  // ................
  0040: 01 00 00 00 00 08 04 05 01 00 00 00 00 08 05 00  // ................
  0050: 00 00 00 00 00 08 06 00 00 00 00 00 00 08 07 00  // ................
  0060: 00 00 00 00 00 08 08 00 00 00 00 00 01 0C 02 00  // ................
  0070: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
  0080: 00 00 02 0A 00 09 09 00 00 00 0D 00              // ............


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 000000A5
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 5B
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : 05
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 89
[03Dh 0061   1]                      Command : 04
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 05
[041h 0065   1]                         Type : 6F
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 68
[044h 0068   1]                     Severity : 08
[045h 0069   1]                 SensorNumber : 88
[046h 0070   1]                       Entity : 17
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 89
[049h 0073   1]                      Command : 04
[04Ah 0074   1]                         Mask : 04
[04Bh 0075   1]                        Value : 04
[04Ch 0076   1]                   SensorType : 07
[04Dh 0077   1]                         Type : 6F
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 68
[050h 0080   1]                     Severity : 20
[051h 0081   1]                 SensorNumber : 88
[052h 0082   1]                       Entity : 03
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 89
[055h 0085   1]                      Command : 05
[056h 0086   1]                         Mask : 01
[057h 0087   1]                        Value : 01
[058h 0088   1]                   SensorType : 19
[059h 0089   1]                         Type : 6F
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 68
[05Ch 0092   1]                     Severity : 20
[05Dh 0093   1]                 SensorNumber : 88
[05Eh 0094   1]                       Entity : 22
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 88
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 03

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 88
[06Eh 0110   1]                      Command : 00
[06Fh 0111   1]                        Value : 02

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 88
[072h 0114   1]                      Command : 00
[073h 0115   1]                        Value : 01

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 88
[076h 0118   1]                      Command : 00
[077h 0119   1]                        Value : 04

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 20 F8 00 00 00 1F F0
[083h 0131   1]              Completion Code : 00
[084h 0132   4]                Enterprise ID : 00000000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0000
[08Bh 0139   2]                 Boot Options : 0000
[08Dh 0141   2]               Oem Parameters : 0000

[08Fh 0143   1]                Subtable Type : 84 [ASF Address]
[090h 0144   1]                     Reserved : 00
[091h 0145   2]                       Length : 0016
[093h 0147   1]                Eprom Address : 00
[094h 0148   1]                 Device Count : 10
[095h 0149   1]                    Addresses : 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8 00 00 00 00 00 


Raw Table Data: Length 165 (0xA5)

  0000: 41 53 46 21 A5 00 00 00 20 5B 54 4F 53 49 4E 56  // ASF!.... [TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 4D 53 46 54  // TOSINV00....MSFT
  0020: 13 00 00 01 00 00 10 00 05 FF 01 00 00 00 01 57  // ...............W
  0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  // ......,.........
  0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  // .o.h.........o.h
  0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00  //  ........o.h .".
  0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  // ................
  0070: 02 88 00 01 03 88 00 04 03 00 17 00 20 F8 00 00  // ............ ...
  0080: 00 1F F0 00 00 00 00 00 00 00 00 00 00 00 00 84  // ................
  0090: 00 16 00 00 10 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8  // .....\h.........
  00A0: 00 00 00 00 00                                   // .....


ASPT
----
[000h 0000   4]                    Signature : "ASPT"    
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 87
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "Calpella"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013


**** Unknown ACPI table signature [ASPT]


Raw Table Data: Length 52 (0x34)

  0000: 41 53 50 54 34 00 00 00 04 87 49 4E 54 45 4C 20  // ASPT4.....INTEL 
  0010: 43 61 6C 70 65 6C 6C 61 01 00 00 00 4D 53 46 54  // Calpella....MSFT
  0020: 13 00 00 01 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0030: 00 00 00 00                                      // ....


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EA
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   1]          Boot Register Index : 44
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

  0000: 42 4F 4F 54 28 00 00 00 01 EA 54 4F 53 49 4E 56  // BOOT(.....TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 4D 53 46 54  // TOSINV00....MSFT
  0020: 13 00 00 01 44 00 00 00                          // ....D...


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 2, "TOSINV", "TOSINV00", 0x00000001)
{
    /*
     * iASL Warning: There were 5 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.IEIT.EITV, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (ECST, MethodObj)    // Warning: Unresolved method, guessing 1 arguments
    External (HDOS, MethodObj)    // Warning: Unresolved method, guessing 0 arguments
    External (HNOT, MethodObj)    // Warning: Unresolved method, guessing 1 arguments
    External (TNOT, MethodObj)    // Warning: Unresolved method, guessing 0 arguments

    External (_SB_.PCI0.AHCI.DID1, IntObj)
    External (_SB_.PCI0.AHCI.DID2, IntObj)
    External (_SB_.PCI0.AHCI.RID1, IntObj)
    External (_SB_.PCI0.SAT2.DID1, IntObj)
    External (_SB_.PCI0.SAT2.DID2, IntObj)
    External (_SB_.PCI0.SAT2.RID1, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)

    Name (SP2O, 0x4E)
    Name (SP1O, 0x2E)
    Name (IO1B, 0x0600)
    Name (IO1L, 0x70)
    Name (IO2B, 0x0600)
    Name (IO2L, 0x20)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP3O, 0x2E)
    Name (IO4B, 0x0A20)
    Name (IO4L, 0x20)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x4000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED1B000)
    Name (DMIL, 0x1000)
    Name (IFPB, 0xFED14000)
    Name (IFPL, 0x1000)
    Name (PEBS, 0xF0000000)
    Name (PELN, 0x04000000)
    Name (TTTB, 0xFED20000)
    Name (TTTL, 0x00020000)
    Name (SMBS, 0xEFA0)
    Name (PBLK, 0x0410)
    Name (PMBS, 0x0400)
    Name (PMLN, 0x80)
    Name (LVL2, 0x0414)
    Name (LVL3, 0x0415)
    Name (LVL4, 0x0416)
    Name (SMIP, 0xB2)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PM30, 0x0430)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1F404)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, Zero)
    Name (SHPC, One)
    Name (PEPM, Zero)
    Name (PEER, Zero)
    Name (PECS, Zero)
    Name (ITKE, Zero)
    Name (FHPP, One)
    Name (DSSP, Zero)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (BRF, One)
    Name (BPH, 0x02)
    Name (BLC, 0x03)
    Name (BRFS, 0x04)
    Name (BPHS, 0x05)
    Name (BLCT, 0x06)
    Name (BRF4, 0x07)
    Name (BEP, 0x08)
    Name (BBF, 0x09)
    Name (BOF, 0x0A)
    Name (BPT, 0x0B)
    Name (SRAF, 0x0C)
    Name (WWP, 0x0D)
    Name (SDOE, 0x0E)
    Name (TRTP, One)
    Name (TRTD, 0x02)
    Name (TRTI, 0x03)
    Name (GCDD, One)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x0C)
    Name (DSLC, 0x0E)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (SOOT, 0x35)
    Name (PDBR, 0x4D)
    Name (SMBL, 0x10)
    Name (TCGM, One)
    OperationRegion (GNVS, SystemMemory, 0x7B7BEE18, 0x00000174)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x25), 
        REVN,   8, 
        Offset (0x28), 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        Offset (0x32), 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        COMA,   8, 
        COMB,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        KSV0,   32, 
        KSV1,   8, 
        Offset (0x67), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        Offset (0x6E), 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x74), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x78), 
        TPMP,   8, 
        TPME,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        BID,    8, 
        Offset (0xAA), 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        I409,   8, 
        I509,   8, 
        I609,   8, 
        I709,   8, 
        IPCF,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        Offset (0xE1), 
        OSCC,   8, 
        NEXP,   8, 
        SDGV,   8, 
        SDDV,   8, 
        Offset (0xEB), 
        DSEN,   8, 
        ECON,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        Offset (0x100), 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        EBAS,   32, 
        CPSP,   32, 
        EECP,   32, 
        EVCP,   32, 
        XBAS,   32, 
        OBS1,   32, 
        OBS2,   32, 
        OBS3,   32, 
        OBS4,   32, 
        OBS5,   32, 
        OBS6,   32, 
        OBS7,   32, 
        OBS8,   32, 
        Offset (0x157), 
        ATMC,   8, 
        PTMC,   8, 
        ATRA,   8, 
        PTRA,   8, 
        PNHM,   32, 
        TBAB,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        ATPC,   8, 
        PTPC,   8, 
        PFLV,   8, 
        BREV,   8, 
        DPBM,   8, 
        DPCM,   8, 
        DPDM,   8, 
        ALFP,   8, 
        IMON,   8, 
        S3DS,   8, 
        PMEE,   8
    }

    OperationRegion (OGNS, SystemMemory, 0x7B7BDC98, 0x00000228)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        ACPS,   8, 
        CPUS,   8, 
        CPUL,   8, 
        ECRO,   8, 
        ECRM,   8, 
        ECRS,   8, 
        ECRD,   8, 
        Offset (0x08), 
        EGST,   8, 
        LCDS,   4, 
        CECS,   1, 
        CECP,   1, 
        HDMI,   1, 
        HKMD,   1, 
        TSBK,   1, 
        SDAT,   1, 
        DCIR,   1, 
        DBTN,   2, 
        HKEM,   1, 
        HSEM,   1, 
        IECC,   1, 
        HSWK,   8, 
        LCMD,   8, 
        SVCF,   8, 
        SWB0,   32, 
        SWB1,   32, 
        SWB2,   32, 
        SWB3,   32, 
        SWB4,   32, 
        SWB5,   32, 
        SWB6,   32, 
        SWB7,   32, 
        KYB0,   32, 
        Offset (0x4E), 
        IEC0,   8, 
        IEC1,   8, 
        IEC2,   8, 
        CECC,   8, 
        CECE,   32, 
        CECI,   16, 
        CECZ,   8, 
        CECF,   8, 
        CEC1,   32, 
        CEC2,   32, 
        CEC3,   32, 
        CEC4,   32, 
        CEC5,   32, 
        LENA,   8, 
        LENB,   8, 
        LENC,   8, 
        LEND,   8, 
        IFNK,   640, 
        ICMD,   2560, 
        RESL,   32, 
        RESV,   16, 
        USC1,   32, 
        USC2,   32, 
        VGAM,   8, 
        USBM,   32, 
        TPID,   8, 
        NODD,   8, 
        IHDD,   8, 
        TJET,   8, 
        CPUM,   8, 
        POLI,   8, 
        TCCR,   8, 
        TEST,   8, 
        LCDA,   8, 
        PWM0,   8, 
        PWM1,   8, 
        PWM2,   8, 
        PWM3,   8, 
        PWM4,   8, 
        PWM5,   8, 
        PWM6,   8, 
        PWM7,   8, 
        EJLL,   8, 
        EJLR,   8
    }

    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        Offset (0x2E), 
        KYBF,   8, 
        KYBA,   248
    }

    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        Offset (0x0E), 
        SWBF,   256, 
        KYBB,   256, 
        Offset (0x72), 
        F0CM,   8, 
        JFNK,   224, 
        CYCC,   16, 
        BTV1,   32, 
        BTV2,   32, 
        ILLU,   8
    }

    Name (ECOK, One)
    Name (INIF, Zero)
    Name (CAGA, Package (0x0D)
    {
        Zero
    })
    Name (CAGB, Package (0x12)
    {
        Zero
    })
    Name (CAGC, Package (0x1E)
    {
        Zero
    })
    Name (CAGD, Package (0x13)
    {
        Zero
    })
    Name (FNKC, Buffer (0x50)
    {
         0x00                                             /* . */
    })
    Name (RETP, Package (0x06)
    {
        Zero
    })
    Name (USAC, Zero)
    Name (BTCG, One)
    Name (PWBS, Zero)
    Name (ACBS, Zero)
    Name (ACBW, Zero)
    Name (FTBT, Zero)
    Name (PEGL, Zero)
    Mutex (MUTS, 0x00)
    Mutex (MUTE, 0x00)
    OperationRegion (WNBD, SystemMemory, 0xFF800100, 0x0100)
    Field (WNBD, ByteAcc, Lock, Preserve)
    {
        Offset (0x02), 
        LRPM,   8, 
        HRPM,   8, 
        RCPU,   8, 
        EVCT,   8, 
        Offset (0x08), 
            ,   4, 
            ,   1, 
        ECSL,   1, 
        POFL,   1, 
        Offset (0x09), 
        WMEC,   8, 
        VGAT,   8, 
        THRF,   3, 
            ,   1, 
        PR10,   4, 
        Offset (0x11), 
        BCM1,   40, 
        Offset (0x17), 
        FKST,   2, 
        Offset (0x40), 
        EC92,   8, 
        EC93,   8, 
        EC94,   8, 
        EC95,   8, 
        EC96,   8, 
        EC99,   8, 
        EC9A,   8, 
        EC9C,   8, 
        EC9D,   8, 
        EC9E,   8, 
        EC9F,   8, 
        ECA0,   8, 
        ECA2,   8, 
        ECA3,   8, 
        ECA4,   8, 
        ECA5,   8, 
        ECA7,   8, 
        ECA8,   8, 
        ECA9,   8, 
        ECAA,   8, 
        ECAB,   8, 
        ECAC,   8, 
        ECAD,   8, 
        ECAE,   8, 
        ECAF,   8, 
        ECB6,   8, 
        ECB8,   8, 
        ECB9,   8, 
        ECBA,   8, 
        ECBD,   8, 
        ECBE,   8, 
        ECBF,   8, 
        ECC0,   8, 
        ECC1,   8, 
        ECC2,   8, 
        ECC5,   8, 
        ECC6,   8, 
        ECC8,   8, 
        ECC9,   8, 
        ECCA,   8, 
        ECCB,   8, 
        ECD7,   8, 
        ECDB,   8, 
        ECDF,   8, 
        ECE2,   8, 
        ECE3,   8, 
        Offset (0x6F), 
        HDS0,   16, 
        HDS1,   16, 
        HDST,   16, 
        HDSS,   8, 
        BCM2,   64, 
        PHC1,   32, 
        PHC2,   32, 
        BATI,   8, 
        PHC3,   32, 
        PHC4,   32, 
        PWMS,   8, 
        B1VT,   16, 
        B1CC,   16, 
        B1TP,   8, 
        MFAN,   16, 
        EVTC,   4, 
        Offset (0x98), 
        ADVT,   8, 
        ACCA,   8, 
        ACCR,   16, 
        CTHI,   8, 
        CTLO,   8, 
        HSRL,   8, 
        BSS1,   8, 
        BSS2,   8, 
            ,   1, 
        FBFG,   4, 
        FBS3,   1, 
        DVLK,   1, 
        Offset (0xA2), 
        PWRT,   8, 
        Offset (0xA6), 
        EWRB,   32, 
        ERDB,   32, 
        Offset (0xB0), 
        BCV1,   16, 
        BCV2,   32, 
        Offset (0xC1), 
        COOL,   2, 
        Offset (0xC2), 
        SCRI,   1, 
        Offset (0xC3), 
        PNID,   8, 
        TCPD,   1, 
        Offset (0xFE), 
        OVLA,   1
    }

    Method (RDEC, 3, Serialized)
    {
        Acquire (MUTE, 0xFFFF)
        ECRO = Arg0
        ECRM = Arg1
        ECRS = Arg2
        FLNK (0xFF, 0x0E)
        Local0 = ECRD /* \ECRD */
        Release (MUTE)
        Return (Local0)
    }

    Method (WREC, 4, Serialized)
    {
        Acquire (MUTE, 0xFFFF)
        ECRO = Arg0
        ECRM = Arg1
        ECRS = Arg2
        ECRD = Arg3
        FLNK (0xFF, 0x0F)
        Release (MUTE)
    }

    Method (FLNK, 2, Serialized)
    {
        If ((IECC == Zero))
        {
            IEC2 += 0x03
            IEC1--
            IEC0 -= 0x0B
            IECC = One
        }

        If ((Arg0 == 0xFF))
        {
            SVCF = Arg1
        }
        Else
        {
            SWB0 = Arg1
        }

        LCMD = Arg0
        APMD = 0xFF
        APMC = 0xE3
        Return ((SWB0 & 0xFF))
    }

    Method (TINC, 2, NotSerialized)
    {
        CreateDWordField (Arg1, Arg0, DCMD)
        Return (DCMD) /* \TINC.DCMD */
    }

    Method (TINI, 0, NotSerialized)
    {
        Name (TMPB, Buffer (0x0154)
        {
             0x00                                             /* . */
        })
        FLNK (0xFF, Zero)
        CopyObject (ICMD, TMPB) /* \TINI.TMPB */
        Local2 = Zero
        Local1 = Zero
        While ((Local1 < LENA))
        {
            Local0 = TINC (Local2, TMPB)
            Index (CAGA, Local1) = Local0
            Local2 += 0x04
            Local1++
        }

        Local1 = Zero
        While ((Local1 < LENB))
        {
            Local0 = TINC (Local2, TMPB)
            Index (CAGB, Local1) = Local0
            Local2 += 0x04
            Local1++
        }

        Local1 = Zero
        While ((Local1 < LENC))
        {
            Local0 = TINC (Local2, TMPB)
            Index (CAGC, Local1) = Local0
            Local2 += 0x04
            Local1++
        }

        Local1 = Zero
        While ((Local1 < LEND))
        {
            Local0 = TINC (Local2, TMPB)
            Index (CAGD, Local1) = Local0
            Local2 += 0x04
            Local1++
        }

        FNKC = IFNK /* \IFNK */
        ICMD = Zero
        IFNK = Zero
        If ((EC94 & One))
        {
            If (BTCG)
            {
                F0CM = One
                FLNK (0xFF, Zero)
                BTCG = Zero
            }
        }
    }

    Method (PARG, 1, NotSerialized)
    {
        CreateDWordField (Arg0, Zero, LARG)
        Return (LARG) /* \PARG.LARG */
    }

    Method (CKIF, 0, NotSerialized)
    {
        If ((INIF == Zero))
        {
            Acquire (MUTS, 0xFFFF)
            ILLU = 0x0F
            TINI ()
            CLRB ()
            Release (MUTS)
            INIF = One
        }
    }

    Method (CHKB, 0, Serialized)
    {
        Local0 = 0x0F
        If (((ECE2 & 0xC0) == 0xC0))
        {
            Return (Zero)
        }

        If (((OSYS < 0x07D6) || (OSYS == 0x07D8)))
        {
            Return (Zero)
        }

        Return (Local0)
    }

    Device (_SB.HSB1)
    {
        Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (((OSYS < 0x07D6) || (OSYS == 0x07D8)))
            {
                Return (Zero)
            }

            If ((BLBM == Zero))
            {
                Return (0x0F)
            }
            Else
            {
                If ((TCPD == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Method (GHID, 0, NotSerialized)
        {
            Return (Buffer (One)
            {
                 0x01                                             /* . */
            })
        }
    }

    Name (RETA, Package (0x06)
    {
        Zero
    })
    Name (HDSP, 0x0F)
    Name (HDSB, Zero)
    Name (SYBZ, Zero)
    Name (HDSD, Zero)
    Name (RFMD, 0xA0)
    Name (VADV, 0xBE)
    Name (VACC, 0x0100)
    Mutex (MUTM, 0x00)
    Name (ECRT, Package (0x08)
    {
        Zero
    })
    Method (CLRB, 0, NotSerialized)
    {
        Local0 = Zero
        While ((Local0 < 0x08))
        {
            Index (ECRT, Local0) = Zero
            Local0++
        }

        EWRB = Zero
        ERDB = Zero
    }

    Method (CKPC, 0, NotSerialized)
    {
        If ((EWRB == Zero))
        {
            Local0 = Zero
            While ((Local0 < 0x08))
            {
                Local1 = DerefOf (Index (ECRT, Local0))
                If (((Local1 & 0xFF000000) == 0xFD000000))
                {
                    Index (ECRT, Local0) = ((Local1 & 0x00FFFFFF) + 0xFF000000)
                    Local0++
                    EWRB = ((Local1 & 0x00FFFFFF) + (Local0 << 0x18))
                    Break
                }

                Local0++
            }
        }
    }

    Method (CKSM, 0, NotSerialized)
    {
        If ((ERDB != Zero))
        {
            Local0 = ((ERDB >> 0x18) & 0xFF)
            If ((Local0 <= 0x08))
            {
                Local1 = Local0
                Local0--
                Index (ECRT, Local0) = ((ERDB & 0x00FFFFFF) + 0xFE000000)
                If ((Local1 == 0x02))
                {
                    HDSB = Zero
                }
            }

            ERDB = Zero
        }

        CKPC ()
    }

    Method (RDSM, 1, NotSerialized)
    {
        Acquire (MUTM, 0xFFFF)
        CKSM ()
        Local0 = Arg0
        Local0--
        Local1 = DerefOf (Index (ECRT, Local0))
        If (((Local1 & 0xFF000000) == 0xFE000000))
        {
            Index (ECRT, Local0) = Zero
        }

        Release (MUTM)
        Return (Local1)
    }

    Method (WRSM, 4, NotSerialized)
    {
        If ((((Arg0 == 0x94) || (Arg0 == 0x91)) || (Arg0 == 0x92)))
        {
            RDSM (Arg1)
        }

        Acquire (MUTM, 0xFFFF)
        Local3 = (Arg0 + ((Arg1 << 0x18) + ((Arg3 << 0x10
            ) + (Arg2 << 0x08))))
        Local2 = One
        Local1 = Zero
        CKSM ()
        Local0 = ((Local3 >> 0x18) & 0xFF)
        Local0--
        If ((((Arg0 == 0x94) || (Arg0 == 0x91)) || (Arg0 == 0x92)))
        {
            Index (ECRT, Local0) = Zero
        }
        Else
        {
            Local1 = DerefOf (Index (ECRT, Local0))
        }

        If ((Local1 == Zero))
        {
            If ((EWRB == Zero))
            {
                Index (ECRT, Local0) = 0xFF000000
                EWRB = Local3
            }
            Else
            {
                Index (ECRT, Local0) = ((Local3 & 0x00FFFFFF) + 0xFD000000)
            }

            Local2 = Zero
        }
        Else
        {
            If (((Local1 & 0xFF000000) == 0xFE000000))
            {
                Local2 = 0x02
            }
        }

        Release (MUTM)
        Return (Local2)
    }

    Method (H3DC, 0, NotSerialized)
    {
        If ((BLBM == Zero))
        {
            HDSP = Zero
        }
        Else
        {
            If ((HDSP == 0x0F))
            {
                HDSP = RDEC (0xD5, 0x02, One)
            }
        }

        Return (HDSP) /* \HDSP */
    }

    Method (GRPA, 6, Serialized)
    {
        Local7 = DerefOf (Index (CAGD, Zero))
        Local6 = DerefOf (Index (CAGD, 0x04))
        Local5 = DerefOf (Index (CAGD, 0x05))
        Local4 = DerefOf (Index (CAGD, 0x0D))
        Index (RETA, Zero) = DerefOf (Index (CAGD, 0x03))
        Index (RETA, One) = Local7
        Index (RETA, 0x02) = Local7
        Index (RETA, 0x03) = Local7
        Index (RETA, 0x04) = Local7
        Index (RETA, 0x05) = Local7
        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
        _T_0 = Arg0
        If ((_T_0 == Zero))
        {
            If (BCMF)
            {
                Local2 = (0xFF & \_SB.PCI0.GFX0.CBLV)
                Local0 = SizeOf (DerefOf (Index (PANL, PNID)))
                While (Local0)
                {
                    Local0--
                    Local1 = DerefOf (Index (DerefOf (Index (PANL, PNID)), Local0))
                    If ((Local2 == Local1))
                    {
                        Break
                    }
                }

                Local0 -= 0x02
                ECA3 = Local0
            }

            Index (RETA, 0x02) = (ECA3 << 0x0D)
            Index (RETA, 0x03) = 0xE000
            Index (RETA, Zero) = Local7
        }
        Else
        {
            If ((_T_0 == One))
            {
                If ((Arg2 == One))
                {
                    RFMD = 0x0A
                    WRSM (0x94, One, 0x08, Zero)
                    Index (RETA, Zero) = Local7
                }
                Else
                {
                    If ((Arg2 == 0x10))
                    {
                        RFMD = 0xA0
                        WRSM (0x94, One, 0x08, One)
                        Index (RETA, Zero) = Local7
                    }
                }
            }
            Else
            {
                If ((_T_0 == 0x02))
                {
                    If ((Arg2 == Zero))
                    {
                        Index (RETA, 0x03) = DerefOf (Index (CAGD, 0x06))
                        Index (RETA, Zero) = Local7
                    }
                    Else
                    {
                        If ((Arg2 == 0xFFFF))
                        {
                            Index (RETA, 0x03) = 0x0200
                            Index (RETA, Zero) = Local7
                        }
                    }
                }
                Else
                {
                    If ((_T_0 == 0x03))
                    {
                        If ((Arg2 == Zero))
                        {
                            Local0 = (Arg3 & 0xFFFF)
                            Local1 = (((Local0 >> 0x08) + (Local0 & 0xFF)) << 
                                0x10)
                            Local1 += Local0
                            Acquire (MUTS, 0xFFFF)
                            FLNK (Arg1, Local1)
                            If ((SWB0 == Zero))
                            {
                                Index (CAGD, 0x06) = Local0
                                Index (RETA, Zero) = Local7
                            }

                            Release (MUTS)
                        }
                    }
                    Else
                    {
                        If ((_T_0 == 0x04))
                        {
                            If (((Arg2 == One) || (Arg2 == 0x02)))
                            {
                                If ((Arg5 == Zero))
                                {
                                    If ((SYBZ == Zero))
                                    {
                                        Index (RETA, Zero) = Local7
                                    }
                                    Else
                                    {
                                        Index (RETA, Zero) = Local6
                                    }
                                }
                                Else
                                {
                                    If ((Arg5 == One))
                                    {
                                        If ((SYBZ == 0x03))
                                        {
                                            Index (RETA, Zero) = Local5
                                        }
                                        Else
                                        {
                                            Local0 = Arg2
                                            If ((Local0 == One))
                                            {
                                                If ((EC94 & One))
                                                {
                                                    Index (RETA, 0x02) = B1VT /* \B1VT */
                                                    Index (RETA, Zero) = Local7
                                                }
                                                Else
                                                {
                                                    Local0 = 0x02
                                                }
                                            }

                                            If ((Local0 == 0x02))
                                            {
                                                Index (RETA, 0x02) = 0xFF
                                                Index (RETA, Zero) = Local7
                                            }
                                        }
                                    }
                                }
                            }
                        }
                        Else
                        {
                            If ((_T_0 == 0x05))
                            {
                                If (((Arg2 & 0xFFFFFFFE) == Zero))
                                {
                                    If ((Arg5 == Zero))
                                    {
                                        If ((SYBZ == Zero))
                                        {
                                            Index (RETA, Zero) = Local7
                                        }
                                        Else
                                        {
                                            Index (RETA, Zero) = Local6
                                        }
                                    }
                                    Else
                                    {
                                        If ((Arg5 == One))
                                        {
                                            If ((SYBZ == 0x03))
                                            {
                                                Index (RETA, Zero) = Local5
                                            }
                                            Else
                                            {
                                                If ((Arg3 == Zero))
                                                {
                                                    If ((Arg2 == Zero))
                                                    {
                                                        Local1 = ((HRPM << 0x08) + LRPM) /* \LRPM */
                                                        Index (RETA, 0x02) = Local1
                                                        Index (RETA, Zero) = Local7
                                                    }
                                                }
                                                Else
                                                {
                                                    If ((Arg3 == One))
                                                    {
                                                        If ((Arg2 == Zero))
                                                        {
                                                            Local1 = ((HRPM << 0x08) + LRPM) /* \LRPM */
                                                            Index (RETA, 0x02) = Local1
                                                            Index (RETA, 0x03) = MFAN /* \MFAN */
                                                            Index (RETA, Zero) = Local7
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                            Else
                            {
                                If ((_T_0 == 0x06))
                                {
                                    If ((H3DC () == One))
                                    {
                                        If (((Arg2 == Zero) && ((Arg3 & 0xFFFFFDFE) == Zero)))
                                        {
                                            If ((Arg5 == Zero))
                                            {
                                                If (((SYBZ != 0x03) && (HDSB == Zero)))
                                                {
                                                    HDSB = 0x02
                                                    HDSS = Zero
                                                    Local0 = ((Arg3 & 0x0200) >> 0x08)
                                                    Local0 += (Arg3 & One)
                                                    WRSM (0x94, 0x02, 0x57, Local0)
                                                    Index (RETA, Zero) = Local7
                                                }
                                                Else
                                                {
                                                    Index (RETA, Zero) = Local6
                                                }
                                            }
                                            Else
                                            {
                                                If ((Arg5 == One))
                                                {
                                                    If ((SYBZ == 0x03))
                                                    {
                                                        Index (RETA, Zero) = Local5
                                                    }
                                                    Else
                                                    {
                                                        If ((HDSS != 0xFA))
                                                        {
                                                            Index (RETA, Zero) = Local6
                                                        }
                                                        Else
                                                        {
                                                            Index (RETA, 0x02) = ((HDS0 << 0x10) + HDS1)
                                                            Index (RETA, 0x04) = HDST /* \HDST */
                                                            Index (RETA, Zero) = Local7
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((_T_0 == 0x07))
                                    {
                                        If (((Arg2 == Zero) && (Arg3 == Zero)))
                                        {
                                            If ((Arg5 == Zero))
                                            {
                                                If ((SYBZ != 0x03))
                                                {
                                                    Index (RETA, Zero) = Local7
                                                }
                                                Else
                                                {
                                                    Index (RETA, Zero) = Local6
                                                }
                                            }
                                            Else
                                            {
                                                If ((Arg5 == One))
                                                {
                                                    If ((SYBZ == 0x03))
                                                    {
                                                        Index (RETA, Zero) = Local5
                                                    }
                                                    Else
                                                    {
                                                        If (IGDS)
                                                        {
                                                            Local0 = ((VGAT << 0x18) + ((TCCR << 0x10) + (
                                                                RCPU << 0x08)))
                                                        }
                                                        Else
                                                        {
                                                            Local0 = (0xFF000000 + ((TCCR << 0x10) + (RCPU << 0x08)
                                                                ))
                                                        }

                                                        If (((EC92 & 0x08) == 0x08))
                                                        {
                                                            If ((ADVT != 0xFF))
                                                            {
                                                                Local1 = ADVT /* \ADVT */
                                                                VADV = Local1
                                                            }
                                                            Else
                                                            {
                                                                Local1 = VADV /* \VADV */
                                                            }

                                                            Index (RETA, 0x02) = (Local0 + Local1)
                                                            If (((ACCR & 0xFF00) != 0xFF00))
                                                            {
                                                                Local1 = ACCR /* \ACCR */
                                                                VACC = Local1
                                                            }
                                                            Else
                                                            {
                                                                Local1 = VACC /* \VACC */
                                                            }

                                                            Local0 = Local1
                                                            Index (RETA, 0x03) = ((ACCA << 0x10) + Local0)
                                                        }
                                                        Else
                                                        {
                                                            Index (RETA, 0x02) = (Local0 + 0xFF)
                                                            Index (RETA, 0x03) = 0xFFFF
                                                        }

                                                        Index (RETA, Zero) = Local7
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x08))
                                        {
                                            If ((Arg5 == Zero))
                                            {
                                                Local0 = One
                                                Local1 = (Local4 + One)
                                                If ((Arg4 == 0x98))
                                                {
                                                    If (((Arg2 != One) && (Arg2 != 0x02)))
                                                    {
                                                        Local0 = Zero
                                                    }
                                                }
                                                Else
                                                {
                                                    If ((Arg4 == 0xA9))
                                                    {
                                                        If (((Arg2 != One) && (Arg2 != 0x02)))
                                                        {
                                                            If (((Arg2 != Local4) && (Arg2 != Local1)))
                                                            {
                                                                Local0 = Zero
                                                            }
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If ((Arg4 == 0x9A))
                                                        {
                                                            If (((Arg2 & 0xFFFFFFFE) != Zero))
                                                            {
                                                                Local0 = Zero
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If ((Arg4 == 0x9B))
                                                            {
                                                                If ((Arg2 > 0x02))
                                                                {
                                                                    Local0 = Zero
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                If (((Arg4 == 0xA0) || (Arg4 == 0x9D)))
                                                                {
                                                                    If ((Arg3 != Zero))
                                                                    {
                                                                        Local0 = Zero
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                If (Local0)
                                                {
                                                    If ((SYBZ == 0x03))
                                                    {
                                                        Index (RETA, Zero) = Local6
                                                    }
                                                    Else
                                                    {
                                                        If ((Arg4 == 0xA9))
                                                        {
                                                            If (((Arg2 == 0x02) || (Arg2 == Local1)))
                                                            {
                                                                Index (RETA, Zero) = Local7
                                                            }
                                                            Else
                                                            {
                                                                If ((Arg2 == Local4))
                                                                {
                                                                    Index (RETA, Zero) = Local7
                                                                }
                                                                Else
                                                                {
                                                                    If ((Arg2 == One))
                                                                    {
                                                                        Index (RETA, Zero) = Local7
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If ((SYBZ == Zero))
                                                            {
                                                                Index (RETA, Zero) = Local7
                                                            }
                                                            Else
                                                            {
                                                                Index (RETA, Zero) = Local6
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If ((Arg5 == One))
                                                {
                                                    If ((SYBZ == 0x03))
                                                    {
                                                        Index (RETA, Zero) = Local5
                                                    }
                                                    Else
                                                    {
                                                        If ((Arg4 == 0x98))
                                                        {
                                                            Local0 = Arg2
                                                            If ((Local0 == One))
                                                            {
                                                                If ((EC94 & One))
                                                                {
                                                                    Index (RETA, 0x02) = B1CC /* \B1CC */
                                                                    Index (RETA, 0x03) = B1TP /* \B1TP */
                                                                    Index (RETA, Zero) = Local7
                                                                }
                                                                Else
                                                                {
                                                                    Local0 = 0x02
                                                                }
                                                            }

                                                            If ((Local0 == 0x02))
                                                            {
                                                                Index (RETA, 0x02) = 0xFFFF
                                                                Index (RETA, 0x03) = 0xFF
                                                                Index (RETA, Zero) = Local7
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If ((Arg4 == 0x9A))
                                                            {
                                                                If ((Arg2 == Zero))
                                                                {
                                                                    Index (RETA, 0x02) = PWMS /* \PWMS */
                                                                    Index (RETA, Zero) = Local7
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                If ((Arg4 == 0x9B))
                                                                {
                                                                    If ((Arg2 == Zero))
                                                                    {
                                                                        Index (RETA, 0x03) = PHC1 /* \PHC1 */
                                                                        Index (RETA, 0x02) = PHC2 /* \PHC2 */
                                                                        PHC1 = Zero
                                                                        PHC2 = Zero
                                                                        Index (RETA, Zero) = Local7
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((Arg2 == One))
                                                                        {
                                                                            Index (RETA, 0x02) = BATI /* \BATI */
                                                                            BATI = Zero
                                                                            Index (RETA, Zero) = Local7
                                                                        }
                                                                        Else
                                                                        {
                                                                            If ((Arg2 == 0x02))
                                                                            {
                                                                                Index (RETA, 0x03) = PHC3 /* \PHC3 */
                                                                                Index (RETA, 0x02) = PHC4 /* \PHC4 */
                                                                                PHC3 = Zero
                                                                                PHC4 = Zero
                                                                                Index (RETA, Zero) = Local7
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                Else
                                                                {
                                                                    If ((Arg4 == 0x9D))
                                                                    {
                                                                        If ((Arg3 == Zero))
                                                                        {
                                                                            Index (RETA, 0x02) = HDSD /* \HDSD */
                                                                            Index (RETA, Zero) = Local7
                                                                        }
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((Arg4 == 0xA0))
                                                                        {
                                                                            If ((Arg3 == Zero))
                                                                            {
                                                                                Index (RETA, 0x02) = (EVTC & 0x0B)
                                                                                Index (RETA, Zero) = Local7
                                                                            }
                                                                        }
                                                                        Else
                                                                        {
                                                                            If ((Arg4 == 0xA9))
                                                                            {
                                                                                Local1 = (Local4 + One)
                                                                                If ((Arg2 == One))
                                                                                {
                                                                                    If ((EC94 & One))
                                                                                    {
                                                                                        Local2 = (ECAE + (ECAF << 0x08))
                                                                                        Local0 = ECAA /* \ECAA */
                                                                                        Local1 = ECAB /* \ECAB */
                                                                                        Local1 <<= 0x08
                                                                                        Local0 += Local1
                                                                                        Local0 *= Local2
                                                                                        Divide (Local0, 0x03E8, Local1, Local4)
                                                                                        Divide (Local0, 0x2710, Local1, Local3)
                                                                                        Local0 = ECAC /* \ECAC */
                                                                                        Local1 = ECAD /* \ECAD */
                                                                                        Local1 <<= 0x08
                                                                                        Local0 += Local1
                                                                                        Local0 *= Local2
                                                                                        Divide (Local0, 0x2710, Local1, Local0)
                                                                                        Local1 = ((Local0 << 0x10) + Local3)
                                                                                        Index (RETA, 0x04) = Local1
                                                                                        Local0 = ECA4 /* \ECA4 */
                                                                                        Local1 = Local4
                                                                                        Local4 = (Local1 * Local0)
                                                                                        Divide (Local4, 0x64, Local1, Local0)
                                                                                        Local0 += One
                                                                                        Divide (Local0, 0x0A, Local1, Local0)
                                                                                        Local1 = ((Local0 << 0x10) + BSS1) /* \BSS1 */
                                                                                        Index (RETA, 0x02) = (Local1 + (BSS2 << 0x08))
                                                                                        Index (RETA, 0x03) = (BCV1 << 0x10)
                                                                                        Index (RETA, 0x05) = BCV2 /* \BCV2 */
                                                                                        Index (RETA, Zero) = Local7
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        Index (RETA, 0x02) = 0xFFFF
                                                                                        Index (RETA, 0x03) = 0xFFFF
                                                                                        Index (RETA, 0x04) = 0xFFFF
                                                                                        Index (RETA, 0x05) = 0xFFFF
                                                                                        Index (RETA, Zero) = Local7
                                                                                    }
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If (((Arg2 == Local4) && ((EC94 & One) == One)))
                                                                                    {
                                                                                        Local2 = (ECAE + (ECAF << 0x08))
                                                                                        Index (RETA, 0x02) = Local2
                                                                                        Index (RETA, Zero) = Local7
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If (((Arg2 == 0x02) || (Arg2 == Local1)))
                                                                                        {
                                                                                            Index (RETA, 0x02) = 0xFFFF
                                                                                            Index (RETA, 0x03) = 0xFFFF
                                                                                            Index (RETA, 0x04) = 0xFFFF
                                                                                            Index (RETA, 0x05) = 0xFFFF
                                                                                            Index (RETA, Zero) = Local7
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x09))
                                            {
                                                If ((Arg3 == Zero))
                                                {
                                                    If (((Arg2 & 0xF4) == Zero))
                                                    {
                                                        EVTC = Arg2
                                                        Index (RETA, Zero) = Local7
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x0A))
                                                {
                                                    Index (RETA, Zero) = DerefOf (Index (CAGD, 0x02))
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x0B))
                                                    {
                                                        If ((Arg3 == Zero))
                                                        {
                                                            If ((H3DC () == One))
                                                            {
                                                                If (((Arg2 == Zero) || (Arg2 == One)))
                                                                {
                                                                    HDSD = Arg2
                                                                    Index (RETA, Zero) = Local7
                                                                }
                                                            }
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x0C))
                                                        {
                                                            Index (RETA, 0x02) = CTHI /* \CTHI */
                                                            Index (RETA, 0x03) = CTLO /* \CTLO */
                                                            Index (RETA, Zero) = Local7
                                                        }
                                                        Else
                                                        {
                                                            Index (RETA, Zero) = DerefOf (Index (CAGD, 0x02))
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        Return (RETA) /* \RETA */
    }

    Method (GRPB, 7, Serialized)
    {
        Local7 = DerefOf (Index (CAGD, Zero))
        Local6 = DerefOf (Index (CAGD, One))
        Local5 = DerefOf (Index (CAGD, 0x03))
        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
        _T_0 = Arg0
        If ((_T_0 == 0x06))
        {
            Local0 = ((Arg3 | Arg4) | Arg5)
            If ((Local0 == Zero))
            {
                Index (RETP, 0x02) = Zero
                If ((HSWK == 0xE9))
                {
                    Index (RETP, 0x02) = 0x20
                    Index (RETP, 0x03) = 0x90
                }

                Index (RETP, Zero) = Local7
            }
        }
        Else
        {
            If ((_T_0 == 0x09))
            {
                Local0 = ((Arg3 | Arg4) | Arg5)
                If ((Local0 == Zero))
                {
                    If ((Arg2 == 0x5A00))
                    {
                        If ((HSWK == 0xE9))
                        {
                            HSWK = Zero
                        }

                        Index (RETP, Zero) = Local7
                    }
                }
            }
            Else
            {
                If ((_T_0 == 0x0A))
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        Local0 = FLNK (Arg1, 0xFF)
                        If ((Local0 != 0xFF))
                        {
                            Index (RETP, Zero) = Local7
                            Index (RETP, 0x02) = Local0
                        }
                    }
                }
                Else
                {
                    If ((_T_0 == 0x0B))
                    {
                        Local0 = ((Arg3 | Arg4) | Arg5)
                        If ((Local0 == Zero))
                        {
                            If (((Arg2 & 0xFFFE) == Zero))
                            {
                                Local1 = Arg2
                                Local0 = FLNK (Arg1, Local1)
                                If ((Local0 != 0xFF))
                                {
                                    Index (RETP, Zero) = Local7
                                }
                            }
                        }
                    }
                    Else
                    {
                        If ((_T_0 == 0x0C))
                        {
                            Local0 = ((Arg2 | Arg4) | Arg5)
                            If ((Local0 == Zero))
                            {
                                If (((Arg3 & 0xFDFE) == Zero))
                                {
                                    While ((HDSB == 0x02))
                                    {
                                        Sleep (0x0A)
                                        If (((EWRB == Zero) && (ERDB == Zero)))
                                        {
                                            Break
                                        }
                                    }

                                    HDSB = One
                                    If ((Arg3 == Zero))
                                    {
                                        Local1 = 0x27
                                    }
                                    Else
                                    {
                                        If ((Arg3 == One))
                                        {
                                            Local1 = 0x28
                                        }
                                        Else
                                        {
                                            If ((Arg3 == 0x0200))
                                            {
                                                Local1 = 0x29
                                            }
                                            Else
                                            {
                                                If ((Arg3 == 0x0201))
                                                {
                                                    Local1 = 0x2A
                                                }
                                            }
                                        }
                                    }

                                    If ((BLBM == Zero))
                                    {
                                        HDSP = Zero
                                    }
                                    Else
                                    {
                                        If ((HDSP == 0x0F))
                                        {
                                            HDSP = RDEC (0xD5, 0x02, One)
                                        }
                                    }

                                    If (HDSP)
                                    {
                                        Local2 = 0x0A
                                        HDSS = Zero
                                        FLNK (0xFF, Local1)
                                        While ((HDSS == Zero))
                                        {
                                            Sleep (0x0A)
                                        }

                                        While ((Local2 != Zero))
                                        {
                                            If ((HDSS == 0xFA))
                                            {
                                                Index (RETP, 0x02) = ((HDS0 << 0x10) + HDS1) /* \HDS1 */
                                                Index (RETP, 0x04) = HDST /* \HDST */
                                                Index (RETP, Zero) = Local7
                                                Local2 = Zero
                                            }
                                            Else
                                            {
                                                Sleep (0x32)
                                                Local2--
                                            }
                                        }
                                    }

                                    HDSB = Zero
                                }
                            }
                        }
                        Else
                        {
                            If ((_T_0 == 0x0D))
                            {
                                Local0 = ((Arg2 | Arg4) | Arg5)
                                If ((Local0 == Zero))
                                {
                                    If (((Arg3 & 0xFFFD) == 0x0100))
                                    {
                                        While ((HDSB == 0x02))
                                        {
                                            Sleep (0x0A)
                                            If (((EWRB == Zero) && (ERDB == Zero)))
                                            {
                                                Break
                                            }
                                        }

                                        HDSB = One
                                        If ((BLBM == Zero))
                                        {
                                            HDSP = Zero
                                        }
                                        Else
                                        {
                                            If ((HDSP == 0x0F))
                                            {
                                                HDSP = RDEC (0xD5, 0x02, One)
                                            }
                                        }

                                        If (HDSP)
                                        {
                                            Index (RETP, Zero) = Local7
                                        }

                                        HDSB = Zero
                                    }
                                }
                            }
                            Else
                            {
                                If ((_T_0 == 0x0E))
                                {
                                    If ((BLBM == Zero))
                                    {
                                        HDSP = Zero
                                    }
                                    Else
                                    {
                                        If ((HDSP == 0x0F))
                                        {
                                            HDSP = RDEC (0xD5, 0x02, One)
                                        }
                                    }

                                    If (HDSP)
                                    {
                                        If (((Arg2 == Zero) && (Arg3 == 0xFFFF)))
                                        {
                                            Index (RETP, Zero) = Local7
                                            Index (RETP, 0x02) = 0x02
                                        }
                                        Else
                                        {
                                            Index (RETP, Zero) = Local5
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((_T_0 == 0x0F))
                                    {
                                        If ((BLBM == Zero))
                                        {
                                            HDSP = Zero
                                        }
                                        Else
                                        {
                                            If ((HDSP == 0x0F))
                                            {
                                                HDSP = RDEC (0xD5, 0x02, One)
                                            }
                                        }

                                        If (HDSP)
                                        {
                                            If (((Arg2 == Zero) || (Arg2 == One)))
                                            {
                                                If ((NODD == Zero))
                                                {
                                                    \_SB.HAPS.ODDL = Arg2
                                                    Local1 = 0x9B01
                                                    If ((Arg2 == Zero))
                                                    {
                                                        Local1 = 0x9B00
                                                        Local0 = (GIV0 & 0xF7)
                                                        GIV0 = Local0
                                                        If ((\_SB.HAPS.ODDS == One))
                                                        {
                                                            \_SB.HAPS.ODDS = Zero
                                                            \_SB.PCI0.LPCB.INEV (0x1ABF)
                                                        }
                                                    }

                                                    FLNK (One, Local1)
                                                }

                                                Index (RETP, Zero) = Local7
                                            }
                                            Else
                                            {
                                                Index (RETP, Zero) = Local5
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Name (PTST, 0xFF)
    Method (GRPC, 6, Serialized)
    {
        Local7 = DerefOf (Index (CAGD, Zero))
        Local6 = DerefOf (Index (CAGD, One))
        Local5 = DerefOf (Index (CAGD, 0x03))
        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
        _T_0 = Arg0
        If ((_T_0 == Zero))
        {
            If ((PTST == 0xFF))
            {
                PTST = FLNK (Arg1, 0x0F)
            }

            Index (RETP, 0x02) = PTST /* \PTST */
            Index (RETP, Zero) = Local7
        }
        Else
        {
            If ((_T_0 == One))
            {
                If (((Arg2 & 0xFFFE) == Zero))
                {
                    PTST = Arg2
                    FLNK (Arg1, Arg2)
                    Index (RETP, Zero) = Local7
                }
            }
            Else
            {
                If ((_T_0 == 0x02))
                {
                    Local0 = One
                    If ((HKEM == One))
                    {
                        Local0 = 0x03
                    }

                    If ((HSEM == One))
                    {
                        Local0 += 0x08
                    }

                    Index (RETP, 0x02) = Local0
                    Index (RETP, Zero) = Local7
                }
                Else
                {
                    If ((_T_0 == 0x03))
                    {
                        Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                        If ((Local0 == Zero))
                        {
                            Index (RETP, 0x02) = RESV /* \RESV */
                            Index (RETP, Zero) = Local7
                        }
                    }
                    Else
                    {
                        If ((_T_0 == 0x04))
                        {
                            Local0 = ((Arg2 | Arg4) | Arg5)
                            If ((Local0 == Zero))
                            {
                                If ((Arg3 == One))
                                {
                                    If (((EC93 & 0x22) != Zero))
                                    {
                                        Local3 = (((EC93 & 0x08) << 0x06) + ((EC93 & 
                                            0x10) >> 0x04))
                                        If ((PR10 == 0x02))
                                        {
                                            Local0 = (FLNK (0x35, 0x02) << 0x0B)
                                            Index (RETP, 0x02) = (Local3 | (Local0 & 0x0800))
                                            Index (RETP, Zero) = Local7
                                        }
                                        Else
                                        {
                                            If ((PR10 == One))
                                            {
                                                Local0 = (FLNK (0x35, 0x02) << 0x0D)
                                                Index (RETP, 0x02) = (Local3 | (Local0 & 0x2000))
                                                Index (RETP, Zero) = Local7
                                            }
                                            Else
                                            {
                                                Index (RETP, 0x02) = Local3
                                                Index (RETP, Zero) = Local7
                                            }
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((Arg3 == 0x03))
                                    {
                                        If ((PR10 == One))
                                        {
                                            Index (RETP, 0x02) = 0x2000
                                            Index (RETP, Zero) = Local7
                                        }
                                    }
                                }
                            }
                        }
                        Else
                        {
                            If ((_T_0 == 0x05))
                            {
                                Index (RETP, 0x03) = Zero
                                If ((EGST == 0x21))
                                {
                                    Index (RETP, 0x03) = EGST /* \EGST */
                                }

                                Index (RETP, Zero) = Local7
                            }
                            Else
                            {
                                If ((_T_0 == 0x06))
                                {
                                    Local0 = Zero
                                    Local0 = FLNK (Arg1, 0xFF)
                                    Index (RETP, 0x02) = Local0
                                    Index (RETP, 0x03) = Local6
                                    Index (RETP, Zero) = Local7
                                }
                                Else
                                {
                                    If ((_T_0 == 0x07))
                                    {
                                        If ((Arg2 == 0x03))
                                        {
                                            Index (RETP, 0x03) = Zero
                                            Local0 = (FLNK (Arg1, 0xFF) << 0x04)
                                            Index (RETP, 0x03) = (Local0 & 0x10)
                                            Index (RETP, Zero) = Local7
                                        }
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x08))
                                        {
                                            If (((Arg2 & One) == One))
                                            {
                                                Local0 = ((Arg2 >> One) & One)
                                                HKEM = Local0
                                                WREC (0xDB, 0x10, 0x04, Local0)
                                                Local0 = ((Arg2 >> 0x03) & One)
                                                HSEM = Local0
                                                WREC (0xDB, 0x20, 0x05, Local0)
                                                Index (RETP, Zero) = Local7
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x09))
                                            {
                                                Local0 = (Arg4 | Arg5)
                                                If ((Local0 == Zero))
                                                {
                                                    If ((Arg3 == 0x0200))
                                                    {
                                                        If ((FLNK (Arg1, Arg2) != 0xFF))
                                                        {
                                                            Index (RETP, Zero) = Local7
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If (((Arg3 == 0x0800) || (Arg3 == 0x2000)))
                                                        {
                                                            If (((Arg2 & 0xFFFE) == Zero))
                                                            {
                                                                FLNK (0x35, Arg2)
                                                                Index (RETP, Zero) = Local7
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x0A))
                                                {
                                                    If ((Arg3 == One))
                                                    {
                                                        If (((Arg2 & 0xFFFC) == Zero))
                                                        {
                                                            If (((Arg2 & 0x03) == 0x02))
                                                            {
                                                                Local0 = 0x07
                                                            }
                                                            Else
                                                            {
                                                                Local0 = (Arg2 << One)
                                                                Local0 += One
                                                            }

                                                            FLNK (Arg1, Local0)
                                                            Index (RETP, Zero) = Local7
                                                        }
                                                    }
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x0B))
                                                    {
                                                        If (((Arg2 & 0xFFFE) == Zero))
                                                        {
                                                            FLNK (Arg1, Arg2)
                                                            Index (RETP, Zero) = Local7
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x0C))
                                                        {
                                                            If ((Arg2 == Zero))
                                                            {
                                                                If (((Arg3 & 0xFFFE) == Zero))
                                                                {
                                                                    Index (RETP, Zero) = Local7
                                                                }
                                                            }
                                                        }
                                                        Else
                                                        {
                                                            If ((_T_0 == 0x0F))
                                                            {
                                                                Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                                                                If ((Local0 == Zero))
                                                                {
                                                                    Index (RETP, 0x02) = (DerefOf (Index (CAGD, 0x07)) >> 0x10
                                                                        )
                                                                    Index (RETP, 0x03) = (DerefOf (Index (CAGD, 0x07)) & 0xFFFF
                                                                        )
                                                                    Index (RETP, Zero) = Local7
                                                                }
                                                            }
                                                            Else
                                                            {
                                                                If ((_T_0 == 0x16))
                                                                {
                                                                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                                                                    If ((Local0 == Zero))
                                                                    {
                                                                        FLNK (Arg1, 0xF1)
                                                                        If ((SWB0 != 0xFFFFFFFF))
                                                                        {
                                                                            Local0 = SWB0 /* \SWB0 */
                                                                        }

                                                                        Index (RETP, One) = 0x8005
                                                                        Index (RETP, 0x02) = Local0
                                                                        Index (RETP, 0x03) = 0xFFFE
                                                                        Index (RETP, Zero) = Local7
                                                                    }
                                                                }
                                                                Else
                                                                {
                                                                    If ((_T_0 == 0x17))
                                                                    {
                                                                        Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                                                                        If ((Local0 == Zero))
                                                                        {
                                                                            FLNK (Arg1, 0xF2)
                                                                            If ((SWB0 != 0xFFFFFFFF))
                                                                            {
                                                                                Local0 = SWB0 /* \SWB0 */
                                                                            }

                                                                            Index (RETP, One) = 0x8004
                                                                            Index (RETP, 0x02) = Local0
                                                                            Index (RETP, 0x03) = 0x0FFF
                                                                            Index (RETP, 0x04) = One
                                                                            Index (RETP, Zero) = Local7
                                                                        }
                                                                    }
                                                                    Else
                                                                    {
                                                                        If ((_T_0 == 0x18))
                                                                        {
                                                                            Local0 = ((Arg3 | Arg4) | Arg5)
                                                                            If ((Local0 == Zero))
                                                                            {
                                                                                SWB1 = Arg2
                                                                                FLNK (Arg1, 0xF3)
                                                                                Index (RETP, Zero) = Local7
                                                                            }
                                                                        }
                                                                        Else
                                                                        {
                                                                            If ((_T_0 == 0x19))
                                                                            {
                                                                                Local0 = ((Arg3 | Arg4) | Arg5)
                                                                                If ((Local0 == Zero))
                                                                                {
                                                                                    SWB1 = Arg2
                                                                                    FLNK (Arg1, 0xF4)
                                                                                    Index (RETP, Zero) = Local7
                                                                                }
                                                                            }
                                                                            Else
                                                                            {
                                                                                If ((_T_0 == 0x1A))
                                                                                {
                                                                                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                                                                                    If ((Local0 == Zero))
                                                                                    {
                                                                                        Index (RETP, 0x02) = FLNK (Arg1, Zero)
                                                                                        Index (RETP, 0x04) = Zero
                                                                                        Index (RETP, Zero) = Local6
                                                                                    }
                                                                                }
                                                                                Else
                                                                                {
                                                                                    If ((_T_0 == 0x1B))
                                                                                    {
                                                                                        Local0 = ((Arg3 | Arg4) | Arg5)
                                                                                        If ((Local0 == Zero))
                                                                                        {
                                                                                            If (((Arg2 & 0xFFFE) == Zero))
                                                                                            {
                                                                                                Local0 = (Arg1 + Arg2)
                                                                                                FLNK (0xFF, Local0)
                                                                                                Index (RETP, Zero) = Local6
                                                                                            }
                                                                                            Else
                                                                                            {
                                                                                                Index (RETP, Zero) = Local5
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                    Else
                                                                                    {
                                                                                        If ((_T_0 == 0x1C))
                                                                                        {
                                                                                            If ((BLBM != Zero))
                                                                                            {
                                                                                                Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                                                                                                If ((Local0 == Zero))
                                                                                                {
                                                                                                    Index (RETP, 0x02) = OVLA /* \OVLA */
                                                                                                    Index (RETP, Zero) = Local7
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                        Else
                                                                                        {
                                                                                            If ((_T_0 == 0x1D))
                                                                                            {
                                                                                                If ((BLBM != Zero))
                                                                                                {
                                                                                                    Local0 = ((Arg3 | Arg4) | Arg5)
                                                                                                    If ((Local0 == Zero))
                                                                                                    {
                                                                                                        If (((Arg2 & 0xFFFE) == Zero))
                                                                                                        {
                                                                                                            FLNK (Arg1, (Arg2 + 0x8C00))
                                                                                                            Index (RETP, Zero) = Local7
                                                                                                        }
                                                                                                        Else
                                                                                                        {
                                                                                                            Index (RETP, Zero) = Local5
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    Device (_SB.VALZ)
    {
        Name (_HID, "TOS1900")  // _HID: Hardware ID
        Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
        {
            Return ("VALZeneral")
        }

        Method (ENAB, 0, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            If ((TSBK == Zero))
            {
                FLNK (0x14, Zero)
            }

            TSBK = One
            Release (MUTS)
            If ((CECC != Zero))
            {
                Notify (VALZ, 0x80) // Status Change
            }
        }

        Method (HMB1, 0, NotSerialized)
        {
            Name (RETB, Buffer (0x1C) {})
            Name (HBT1, Package (0x06)
            {
                Buffer (0x1C) {}, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            CKIF ()
            If ((EC94 & One))
            {
                Acquire (MUTS, 0xFFFF)
                If (BTCG)
                {
                    F0CM = One
                    FLNK (0xFF, Zero)
                    BTCG = Zero
                }

                RETB = JFNK /* \JFNK */
                Index (HBT1, Zero) = RETB /* \_SB_.VALZ.HMB1.RETB */
                Index (HBT1, One) = CYCC /* \CYCC */
                Release (MUTS)
            }

            Return (HBT1) /* \_SB_.VALZ.HMB1.HBT1 */
        }

        Method (HMB2, 0, NotSerialized)
        {
            Return (Package (0x06)
            {
                Buffer (0x1C)
                {
                     0x00                                             /* . */
                }, 

                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
        }

        Method (INFO, 0, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            Local0 = Zero
            If ((CECC != Zero))
            {
                FLNK (0xFF, 0x03)
                If ((CECE != Zero))
                {
                    Release (MUTS)
                    Return (CECE) /* \CECE */
                }
                Else
                {
                    FLNK (0xFF, 0x04)
                }
            }

            If (((KYB0 == Zero) && (EVCT != Zero)))
            {
                FLNK (0x11, EVCT)
            }

            If ((KYB0 != Zero))
            {
                Local0 = KYBF /* \KYBF */
                CopyObject (KYBA, SWBF) /* \SWBF */
                CopyObject (SWBF, KYBB) /* \KYBB */
                SWBF = Zero
                If ((Local0 == 0xFE))
                {
                    Local0 = Zero
                }

                If (((Local0 & 0xF0) == 0x90))
                {
                    Local0 += 0x0B00
                }
                Else
                {
                    If (((Local0 > 0x15) && (Local0 < 0x1A)))
                    {
                        Local0 += 0x1A9A
                    }
                }

                Local0 += 0x0100
            }

            Release (MUTS)
            Return (Local0)
        }

        Method (SPFC, 6, NotSerialized)
        {
            CKIF ()
            Local2 = ((PARG (Arg0) << 0x10) + (PARG (Arg1) & 0xFFFF))
            Local6 = Match (CAGA, MEQ, Local2, MTR, Zero, Zero)
            If ((Local6 != Ones))
            {
                Local5 = DerefOf (Index (FNKC, Local6))
                Return (GRPA (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), PARG (Arg5)))
            }
            Else
            {
                Acquire (MUTS, 0xFFFF)
                Index (RETP, Zero) = DerefOf (Index (CAGD, 0x02))
                Local0 = DerefOf (Index (CAGD, Zero))
                Index (RETP, One) = Local0
                Index (RETP, 0x02) = Local0
                Index (RETP, 0x03) = Local0
                Index (RETP, 0x04) = Local0
                Index (RETP, 0x05) = Local0
                Local6 = Match (CAGB, MEQ, Local2, MTR, Zero, Zero)
                If ((Local6 != Ones))
                {
                    Local5 = DerefOf (Index (FNKC, (Local6 + LENA)))
                    GRPB (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), PARG (Arg5), PARG (
                        Arg1))
                }
                Else
                {
                    Local6 = Match (CAGC, MEQ, Local2, MTR, Zero, Zero)
                    If ((Local6 != Ones))
                    {
                        Local5 = DerefOf (Index (FNKC, ((Local6 + LENA) + LENB)
                            ))
                        GRPC (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), PARG (Arg5))
                    }
                    Else
                    {
                        Local2 &= 0xFFFF0000
                        If ((DerefOf (Index (CAGD, 0x08)) == Local2))
                        {
                            If ((USAC != Zero))
                            {
                                Index (RETP, Zero) = DerefOf (Index (CAGD, 0x0B))
                            }
                            Else
                            {
                                Index (RETP, Zero) = DerefOf (Index (CAGD, 0x0A))
                                USAC = One
                            }
                        }
                        Else
                        {
                            If ((DerefOf (Index (CAGD, 0x09)) == Local2))
                            {
                                If ((USAC == Zero))
                                {
                                    Index (RETP, Zero) = DerefOf (Index (CAGD, 0x0C))
                                }
                                Else
                                {
                                    Index (RETP, Zero) = DerefOf (Index (CAGD, 0x0A))
                                    USAC = Zero
                                }
                            }
                        }
                    }
                }

                Release (MUTS)
                Return (RETP) /* \RETP */
            }
        }

        Method (ODLS, 0, Serialized)
        {
            Name (RETS, One)
            If ((NODD == One))
            {
                RETS = Zero
            }

            Return (RETS) /* \_SB_.VALZ.ODLS.RETS */
        }

        Method (ODLT, 0, Serialized)
        {
            Name (RETT, Buffer (One)
            {
                 0x02                                             /* . */
            })
            If ((SCFG == Zero))
            {
                Index (RETT, Zero) = Zero
            }

            Return (RETT) /* \_SB_.VALZ.ODLT.RETT */
        }

        Method (ODLB, 0, Serialized)
        {
            Name (RETB, Buffer (0x10)
            {
                /* 0000 */  0x86, 0x80, 0x29, 0x3B, 0x79, 0x11, 0x1E, 0xFF,  /* ..);y... */
                /* 0008 */  0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
            })
            If ((SCFG == Zero))
            {
                Index (RETB, 0x02) = ^^PCI0.SAT2.DID1 /* External reference */
                Index (RETB, 0x03) = ^^PCI0.SAT2.DID2 /* External reference */
                Index (RETB, 0x08) = ^^PCI0.SAT2.RID1 /* External reference */
                Index (RETB, 0x09) = 0x05
            }
            Else
            {
                Index (RETB, 0x02) = ^^PCI0.AHCI.DID1 /* External reference */
                Index (RETB, 0x03) = ^^PCI0.AHCI.DID2 /* External reference */
                Index (RETB, 0x08) = ^^PCI0.AHCI.RID1 /* External reference */
                Index (RETB, 0x09) = 0x05
            }

            Return (RETB) /* \_SB_.VALZ.ODLB.RETB */
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (((OSYS < 0x07D6) || (OSYS == 0x07D8)))
            {
                Return (Zero)
            }
            Else
            {
                Return (0x0B)
            }
        }
    }

    Device (_SB.FWEX)
    {
        Name (_HID, "TOS1901")  // _HID: Hardware ID
        Method (FWES, 1, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            Name (FWEB, Buffer (0x20) {})
            Local4 = DerefOf (Index (Arg0, Zero))
            Local7 = Zero
            If ((Local4 == One))
            {
                If (ECOK)
                {
                    Index (FWEB, Zero) = RCPU /* \RCPU */
                    Index (FWEB, One) = VGAT /* \VGAT */
                    Index (FWEB, 0x02) = LRPM /* \LRPM */
                    Index (FWEB, 0x03) = HRPM /* \HRPM */
                    Index (FWEB, 0x04) = Zero
                    Index (FWEB, 0x05) = Zero
                    Index (FWEB, 0x06) = RDEC (0xA0, 0xFF, Zero)
                }

                Release (MUTS)
                Return (FWEB) /* \_SB_.FWEX.FWES.FWEB */
            }

            If ((Local4 == 0x81))
            {
                Local0 = DerefOf (Index (Arg0, One))
                If ((Local0 == 0xFF))
                {
                    Local0 = EVCT /* \EVCT */
                    If ((BLBM != Zero))
                    {
                        If ((OSYS < 0x07D6))
                        {
                            If ((EJLL == 0x59))
                            {
                                Local0++
                            }

                            If ((EJLR == 0x5A))
                            {
                                Local0++
                            }
                        }
                    }

                    Index (FWEB, Zero) = Local0
                    Release (MUTS)
                    Return (FWEB) /* \_SB_.FWEX.FWES.FWEB */
                }
                Else
                {
                    If ((Local0 == 0xFE))
                    {
                        Local0 = FKST /* \FKST */
                        Index (FWEB, Zero) = Local0
                        Release (MUTS)
                        Return (FWEB) /* \_SB_.FWEX.FWES.FWEB */
                    }
                    Else
                    {
                        Local7 = One
                    }
                }
            }

            If ((BLBM != Zero))
            {
                If (((OSYS < 0x07D6) && (Local4 == 0xEE)))
                {
                    Local0 = DerefOf (Index (Arg0, One))
                    If ((Local0 == One))
                    {
                        Local0 = DerefOf (Index (Arg0, 0x02))
                        ^^HAPS.ODDL = Local0
                        If ((Local0 == Zero))
                        {
                            Local0 = (GIV0 & 0xF7)
                            GIV0 = Local0
                            If ((^^HAPS.ODDS == One))
                            {
                                ^^HAPS.ODDS = Zero
                                EJLR = 0x5A
                                ^^PCI0.LPCB.ILEV (0x60)
                            }
                        }
                    }
                }
            }

            Local0 = 0x20
            Local1 = One
            Local3 = Zero
            While (Local0)
            {
                Local2 = (DerefOf (Index (Arg0, Local1)) << 0x18)
                Local3 = (((Local3 >> 0x08) & 0x00FFFFFF) + Local2)
                If ((Local1 == 0x04))
                {
                    Local5 = Local3
                    SWB0 = Local3
                }
                Else
                {
                    If ((Local1 == 0x08))
                    {
                        SWB1 = Local3
                    }
                    Else
                    {
                        If ((Local1 == 0x0C))
                        {
                            SWB2 = Local3
                        }
                        Else
                        {
                            If ((Local1 == 0x10))
                            {
                                SWB3 = Local3
                            }
                            Else
                            {
                                If ((Local1 == 0x14))
                                {
                                    SWB4 = Local3
                                }
                                Else
                                {
                                    If ((Local1 == 0x18))
                                    {
                                        SWB5 = Local3
                                    }
                                    Else
                                    {
                                        If ((Local1 == 0x1C))
                                        {
                                            SWB6 = Local3
                                        }
                                        Else
                                        {
                                            If ((Local1 == 0x20))
                                            {
                                                SWB7 = Local3
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Local0--
                Local1 += One
            }

            If ((Local7 == One))
            {
                Local4 = 0x11
                Local5 = EVCT /* \EVCT */
            }

            FLNK (Local4, Local5)
            Local1 = SWB0 /* \SWB0 */
            Local2 = Zero
            While ((Local2 != 0x20))
            {
                If ((Local2 == 0x04))
                {
                    Local1 = SWB1 /* \SWB1 */
                }
                Else
                {
                    If ((Local2 == 0x08))
                    {
                        Local1 = SWB2 /* \SWB2 */
                    }
                    Else
                    {
                        If ((Local2 == 0x0C))
                        {
                            Local1 = SWB3 /* \SWB3 */
                        }
                        Else
                        {
                            If ((Local2 == 0x10))
                            {
                                Local1 = SWB4 /* \SWB4 */
                            }
                            Else
                            {
                                If ((Local2 == 0x14))
                                {
                                    Local1 = SWB5 /* \SWB5 */
                                }
                                Else
                                {
                                    If ((Local2 == 0x18))
                                    {
                                        Local1 = SWB6 /* \SWB6 */
                                    }
                                    Else
                                    {
                                        If ((Local2 == 0x1C))
                                        {
                                            Local1 = SWB7 /* \SWB7 */
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Index (FWEB, Local2) = Local1
                Divide (Local1, 0x0100, Local0, Local1)
                Local2 += One
            }

            Local0 = Zero
            If ((LCMD != Zero))
            {
                Local2 = Zero
                While ((Local2 != 0x20))
                {
                    Index (FWEB, Local2) = 0xFF
                    Local2 += One
                }
            }

            SWB0 = Local0
            SWB1 = Local0
            SWB2 = Local0
            SWB3 = Local0
            SWB4 = Local0
            SWB5 = Local0
            SWB6 = Local0
            SWB7 = Local0
            If ((Local7 == One))
            {
                Index (FWEB, 0x1F) = EVCT /* \EVCT */
            }

            Release (MUTS)
            Return (FWEB) /* \_SB_.FWEX.FWES.FWEB */
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (((OSYS < 0x07D0) || (OSYS == 0x07D8)))
            {
                Return (Zero)
            }
            Else
            {
                Return (0x0B)
            }
        }
    }

    Method (WFNK, 1, NotSerialized)
    {
        Acquire (MUTS, 0xFFFF)
        PEGL = Zero
        If ((Arg0 == 0x03))
        {
            FBFG = FTBT /* \FTBT */
            FBS3 = Zero
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            Local0 = ((ECB6 >> 0x03) & One)
            If ((Local0 != PWBS))
            {
                WREC (0xB6, 0x08, 0x03, PWBS)
            }

            If ((ECC8 != ACBS))
            {
                WREC (0xC8, 0xFF, Zero, ACBS)
            }

            If ((ECC9 != ACBW))
            {
                WREC (0xC9, 0xFF, Zero, ACBW)
            }

            CLRB ()
            HDSB = Zero
            SYBZ = Zero
            F0CM = One
            FLNK (0xFF, Zero)
            BTCG = Zero
        }

        If ((OSYS > 0x07D5))
        {
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                Local0 = HKMD /* \HKMD */
                WREC (0xDB, One, Zero, Local0)
            }

            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                Local0 = HKEM /* \HKEM */
                WREC (0xDB, 0x10, 0x04, Local0)
                Local0 = HSEM /* \HSEM */
                WREC (0xDB, 0x20, 0x05, Local0)
                FLNK (0x10, One)
                FLNK (0x15, 0xFF)
                ILLU = 0x0F
            }

            If ((EVCT != Zero))
            {
                FLNK (0x11, EVCT)
                If ((RDEC (0xDB, 0x20, 0x05) == Zero))
                {
                    Local0 = (KYB0 & 0xFF)
                    If ((Local0 == 0xDC))
                    {
                        Notify (\_SB.HSB1, 0x02) // Device Wake
                    }
                    Else
                    {
                        HSWK = KYB0 /* \KYB0 */
                    }

                    KYB0 = Zero
                }
            }
        }
        Else
        {
            If ((EVCT != Zero))
            {
                Notify (\_SB.FWEX, 0x80) // Status Change
            }

            FLNK (0x15, 0xFF)
        }

        FLNK (0xFF, 0x30)
        Release (MUTS)
    }

    Method (SFNK, 1, NotSerialized)
    {
        Acquire (MUTS, 0xFFFF)
        PEGL = Zero
        If ((Arg0 == 0x03))
        {
            FBS3 = One
            FTBT = FBFG /* \FBFG */
        }

        If ((BLBM != Zero))
        {
            If ((OSYS < 0x07D6))
            {
                Local0 = (GIV0 & 0xF7)
                GIV0 = Local0
                EJLL = Zero
                EJLR = Zero
                \_SB.HAPS.ODDL = Zero
                \_SB.HAPS.ODDS = Zero
                FLNK (0xEE, 0xE0)
            }
        }

        \_SB.PCI0.LPCB.CLRL ()
        If ((OSYS > 0x07D5))
        {
            EVTC = Zero
            SYBZ = 0x03
            HSWK = Zero
            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                HKMD = RDEC (0xDB, One, Zero)
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            PWBS = ((ECB6 >> 0x03) & One)
            ACBS = ECC8 /* \ECC8 */
            ACBW = ECC9 /* \ECC9 */
        }
        Else
        {
            If ((Arg0 == 0x05))
            {
                If ((ECC8 == Zero))
                {
                    WREC (0xC8, 0xFF, Zero, 0x3F)
                    If ((ECC9 == Zero))
                    {
                        WREC (0xC9, 0xFF, Zero, 0x03)
                    }
                }
            }
        }

        If ((Arg0 > 0x02))
        {
            HDSD = Zero
        }

        Release (MUTS)
    }

    OperationRegion (MBOX, SystemMemory, 0x7B7BEA98, 0x00000320)
    Field (MBOX, AnyAcc, NoLock, Preserve)
    {
        PCI1,   8, 
        PCI2,   8, 
        PCI3,   8, 
        PCI4,   8, 
        PCI5,   8, 
        PCI6,   8, 
        PCI7,   8, 
        PCI8,   8, 
        NLCK,   8, 
        ZIPE,   8, 
        COA1,   8, 
        CAIO,   8, 
        CAIP,   8, 
        CAMD,   8, 
        CADA,   8, 
        COB1,   8, 
        CBIO,   8, 
        CBIP,   8, 
        CBMD,   8, 
        CBDA,   8, 
        FHSD,   8, 
        COMC,   8, 
        CCIO,   8, 
        CCIP,   8, 
        CCMD,   8, 
        CCDA,   8, 
        COMD,   8, 
        CDIO,   8, 
        CDIP,   8, 
        CDMD,   8, 
        CDDA,   8, 
        LPT1,   8, 
        L1IO,   8, 
        L1IP,   8, 
        L1MD,   8, 
        L1DA,   8, 
        LPT2,   8, 
        L2IO,   8, 
        L2IP,   8, 
        L2MD,   8, 
        L2DA,   8, 
        LPT3,   8, 
        L3IO,   8, 
        L3IP,   8, 
        L3MD,   8, 
        L3DA,   8, 
        FDDC,   8, 
        FDWP,   8, 
        HGMP,   8, 
        LGMP,   8, 
        MIDI,   8, 
        AZLA,   8, 
        AUDO,   8, 
        MODM,   8, 
        IDEC,   8, 
        SSED,   8, 
        PACT,   8, 
        SCFG,   8, 
        AMOD,   8, 
        IMOD,   8, 
        LCFG,   8, 
        IDLY,   8, 
        PMTP,   8, 
        PM32,   8, 
        PMBM,   8, 
        PMTM,   8, 
        PSTP,   8, 
        PSIO,   8, 
        PSBM,   8, 
        PSTM,   8, 
        IDE0,   8, 
        IDE1,   8, 
        IDE2,   8, 
        IDE3,   8, 
        IDE4,   8, 
        IDE5,   8, 
        IDE6,   8, 
        IDE7,   8, 
        HIUB,   8, 
        LUBS,   8, 
        PLYT,   8, 
        EDCG,   8, 
        SDFY,   8, 
        SDTC,   8, 
        SDRP,   8, 
        SDCL,   8, 
        SDRC,   8, 
        SDRE,   8, 
        FC2L,   8, 
        FC3L,   8, 
        FCS4,   8, 
        APIM,   8, 
        HPTS,   8, 
        HPTA,   8, 
        EMAS,   8, 
        VGAO,   8, 
        SOFF,   8, 
        KBPO,   8, 
        MSPO,   8, 
        USBB,   8, 
        EVTL,   8, 
        SYBE,   8, 
        ETLC,   8, 
        ACPV,   8, 
        TPMD,   8, 
        TPMO,   8, 
        TPMC,   8, 
        TPMM,   8, 
        TPCC,   8, 
        TPLC,   8, 
        TPLR,   32, 
        QBOT,   8, 
        BOTQ,   8, 
        PBOT,   8, 
        M256,   8, 
        PEGF,   8, 
        OSY1,   16, 
        BMTP,   8, 
        BNPT,   8, 
        LNMT,   8, 
        NBTO,   8, 
        NABD,   8, 
        NEBD,   8, 
        NLBD,   8, 
        DFBT,   16, 
        NPSP,   16, 
        LANG,   8, 
        UACL,   8, 
        SUPS,   8, 
        DVET,   8, 
        S3RS,   8, 
        DAS1,   8, 
        DAS3,   8, 
        WKPM,   8, 
        WKMD,   8, 
        WKS5,   8, 
        HOUR,   8, 
        MINS,   8, 
        SECS,   8, 
        DOFM,   8, 
        NBTV,   64, 
        BTOD,   64, 
        SPVP,   16, 
        POPW,   16, 
        USPW,   16, 
        HDPW,   16, 
        SAHP,   16, 
        SAHF,   8, 
        SUVF,   8, 
        USRF,   8, 
        UMPW,   8, 
        SMHP,   16, 
        SAMP,   16, 
        SAMF,   8, 
        SPFA,   8, 
        SPFB,   8, 
        SPFC,   8, 
        SPFD,   8, 
        SPFE,   8, 
        SPFF,   8, 
        SPFG,   8, 
        SPFH,   8, 
        SPFI,   8, 
        SPFJ,   8, 
        SPFK,   8, 
        SPFL,   8, 
        SPFM,   8, 
        SPFN,   8, 
        SPFO,   8, 
        SPFP,   8, 
        SPFQ,   8, 
        SPFR,   8, 
        SPFS,   8, 
        SPFT,   8, 
        SPFU,   8, 
        SPFV,   8, 
        SPFW,   8, 
        SPFX,   8, 
        SPFY,   8, 
        SPFZ,   8, 
        SPF0,   8, 
        SPF1,   8, 
        SPF2,   8, 
        SPF3,   8, 
        SPF4,   8, 
        SPF5,   8, 
        KRSV,   136, 
        LANE,   8, 
        AORS,   8, 
        P0HP,   8, 
        P1HP,   8, 
        P2HP,   8, 
        P3HP,   8, 
        P4HP,   8, 
        P5HP,   8, 
        P0IL,   8, 
        P1IL,   8, 
        P2IL,   8, 
        D2F1,   8, 
        DVPA,   8, 
        DTGM,   8, 
        Offset (0xF5), 
        Offset (0xF6), 
        BOTT,   8, 
        PANT,   8, 
        TVTP,   8, 
        U201,   8, 
        U202,   8, 
        U111,   8, 
        U112,   8, 
        U113,   8, 
        U114,   8, 
        U115,   8, 
        UPPC,   8, 
        UP00,   8, 
        UP01,   8, 
        UP02,   8, 
        UP03,   8, 
        UP04,   8, 
        UP05,   8, 
        UP06,   8, 
        UP07,   8, 
        UP08,   8, 
        UP09,   8, 
        UP10,   8, 
        UP11,   8, 
        P80R,   8, 
        WDOG,   8, 
        WDTO,   16, 
        WDTB,   16, 
        MASF,   8, 
        MAMT,   8, 
        ABXP,   8, 
        SPIL,   8, 
        PWDW,   8, 
        HETO,   8, 
        AWTR,   16, 
        EOPT,   8, 
        ASFB,   8, 
        MBTX,   8, 
        IDER,   8, 
        SOLE,   8, 
        UCME,   8, 
        MEDM,   8, 
        PPDA,   8, 
        PPCG,   8, 
        PPBV,   8, 
        PPV1,   8, 
        PPPV,   8, 
        PPMV,   8, 
        PRE0,   8, 
        PRE1,   8, 
        PRE2,   8, 
        PRE3,   8, 
        PRE4,   8, 
        PRE5,   8, 
        PRE6,   8, 
        PRE7,   8, 
        PRA0,   8, 
        PRA1,   8, 
        PRA2,   8, 
        PRA3,   8, 
        PRA4,   8, 
        PRA5,   8, 
        PRA6,   8, 
        PRA7,   8, 
        PRU0,   8, 
        PRU1,   8, 
        PRU2,   8, 
        PRU3,   8, 
        PRU4,   8, 
        PRU5,   8, 
        PRU6,   8, 
        PRU7,   8, 
        PRF0,   8, 
        PRF1,   8, 
        PRF2,   8, 
        PRF3,   8, 
        PRF4,   8, 
        PRF5,   8, 
        PRF6,   8, 
        PRF7,   8, 
        PRN0,   8, 
        PRN1,   8, 
        PRN2,   8, 
        PRN3,   8, 
        PRN4,   8, 
        PRN5,   8, 
        PRN6,   8, 
        PRN7,   8, 
        PRC0,   8, 
        PRC1,   8, 
        PRC2,   8, 
        PRC3,   8, 
        PRC4,   8, 
        PRC5,   8, 
        PRC6,   8, 
        PRC7,   8, 
        CTD0,   8, 
        CTD1,   8, 
        CTD2,   8, 
        CTD3,   8, 
        CTD4,   8, 
        CTD5,   8, 
        CTD6,   8, 
        CTD7,   8, 
        PIE0,   8, 
        PIE1,   8, 
        PIE2,   8, 
        PIE3,   8, 
        PIE4,   8, 
        PIE5,   8, 
        PIE6,   8, 
        PIE7,   8, 
        SFE0,   8, 
        SFE1,   8, 
        SFE2,   8, 
        SFE3,   8, 
        SFE4,   8, 
        SFE5,   8, 
        SFE6,   8, 
        SFE7,   8, 
        SNE0,   8, 
        SNE1,   8, 
        SNE2,   8, 
        SNE3,   8, 
        SNE4,   8, 
        SNE5,   8, 
        SNE6,   8, 
        SNE7,   8, 
        SCE0,   8, 
        SCE1,   8, 
        SCE2,   8, 
        SCE3,   8, 
        SCE4,   8, 
        SCE5,   8, 
        SCE6,   8, 
        SCE7,   8, 
        PPS0,   8, 
        PPS1,   8, 
        PPS2,   8, 
        PPS3,   8, 
        PPS4,   8, 
        PPS5,   8, 
        PPS6,   8, 
        PPS7,   8, 
        PHP0,   8, 
        PHP1,   8, 
        PHP2,   8, 
        PHP3,   8, 
        PHP4,   8, 
        PHP5,   8, 
        PHP6,   8, 
        PHP7,   8, 
        PEGA,   8, 
        PGAA,   8, 
        PGL0,   8, 
        PL0A,   8, 
        PGL1,   8, 
        Offset (0x196), 
        PAV1,   8, 
        ISTC,   8, 
        TRML,   8, 
        ATHF,   8, 
        PTTP,   8, 
        XDMD,   8, 
        PCRR,   8, 
        PROH,   8, 
        TUBM,   8, 
        TSTE,   8, 
        BPST,   8, 
        NXFE,   8, 
        VTST,   8, 
        VTFE,   8, 
        CSTS,   8, 
        ENCS,   8, 
        ENC6,   8, 
        CMPE,   8, 
        MDST,   8, 
        EXBR,   8, 
        TXTS,   8, 
        VTDE,   8, 
        CART,   8, 
        CATT,   8, 
        STBE,   8, 
        PEBE,   8, 
        PCBE,   8, 
        EHBE,   8, 
        UHBE,   8, 
        HABE,   8, 
        ERS2,   8, 
        GLPM,   8, 
        GRTT,   8, 
        CRID,   8, 
        ATLF,   8, 
        PTC1,   8, 
        PTC2,   8, 
        PTSP,   8, 
        CTTP,   8, 
        HTSP,   8, 
        U116,   8, 
        U117,   8, 
        UP12,   8, 
        UP13,   8, 
        DALC,   8, 
        ENC7,   8, 
        CSIT,   8, 
        CSIF,   8, 
        CSL1,   8, 
        MIRP,   8, 
        MEMF,   8, 
        CHIL,   8, 
        RKIL,   8, 
        QPIF,   8, 
        DLMF,   8, 
        GPPS,   8, 
        AGLP,   8, 
        EIPS,   8, 
        MTUB,   8, 
        CPEC,   8, 
        IPSP,   8, 
        CTLT,   8, 
        CTLV,   16, 
        MPLT,   8, 
        MPLV,   16, 
        PPLT,   8, 
        PPLV,   16, 
        CPLT,   8, 
        CPLV,   16, 
        RTIF,   8, 
        DPPM,   8, 
        RELT,   8, 
        INTR,   8, 
        PATD,   8, 
        COHE,   8, 
        CTBO,   8, 
        FBOT,   8, 
        CTRD,   8, 
        CERD,   8, 
        MTRD,   8, 
        PTRD,   8, 
        ALEL,   8, 
        CALE,   8, 
        MALE,   8, 
        PALE,   8, 
        DALE,   8, 
        TODM,   8, 
        D1TR,   8, 
        D2TR,   8, 
        D3TR,   8, 
        D4TR,   8, 
        LFPC,   8, 
        RMHM,   8, 
        METR,   8, 
        ECML,   8, 
        MPEC,   8, 
        TRTS,   8, 
        CACK,   8, 
        AZHI,   8, 
        IMEP,   8, 
        IMFE,   8, 
        SAG3,   8, 
        CRSV,   144, 
        ISTM,   8, 
        ISTS,   8, 
        PTDV,   8, 
        WKOL,   8, 
        WOWL,   8, 
        WLEX,   8, 
        ICIR,   8, 
        IREX,   8, 
        IWEX,   8, 
        CRWK,   8, 
        ILED,   8, 
        TBMM,   8, 
        AKWE,   8, 
        USCM,   8, 
        HCEC,   8, 
        RPON,   8, 
        HDDC,   8, 
        IDAF,   8, 
        HDD0,   8, 
        HDD1,   8, 
        MHD0,   8, 
        MHD1,   8, 
        HDD2,   8, 
        HDD3,   8, 
        HDD4,   8, 
        HDD5,   8, 
        HDD6,   8, 
        HDD7,   8, 
        CPID,   8, 
        KBBL,   8, 
        DFBL,   8, 
        FUBM,   8, 
        FUBB,   8, 
        HDC2,   8, 
        WBCA,   8, 
        ADFB,   8, 
        SHDL,   8, 
        BPBM,   8, 
        ESTA,   8, 
        SAIS,   8, 
        WCSW,   8, 
        WCAM,   8, 
        KBCM,   8, 
        BLTM,   8, 
        VTXD,   8, 
        BLBM,   8, 
        ORSV,   192, 
        HPOP,   8, 
        LOCF,   8, 
        PSTA,   8, 
        CCMP,   8, 
        DTP1,   8, 
        SCBK,   8, 
        SCBF,   8, 
        FUBN,   8, 
        KLED,   8, 
        FNZL,   8, 
        LTIM,   8, 
        RGBP,   8, 
        KBLE,   8, 
        FBBP,   8, 
        Offset (0x26A), 
        Offset (0x26E), 
        Offset (0x272), 
        DRSV,   592, 
        MEFD,   8, 
        FWVB,   8, 
        USBP,   8, 
        FWPR,   8, 
        MELF,   8, 
        MEFQ,   8, 
        HP0S,   8, 
        HP1S,   8, 
        HP2S,   8, 
        HP3S,   8, 
        HP4S,   8, 
        HP5S,   8, 
        PEG1,   8, 
        CPMD,   8, 
        ENIF,   8, 
        PRSV,   680
    }

    OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    Method (OSMI, 1, NotSerialized)
    {
        APMD = Arg0
        APMC = 0xBE
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x2B)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x2B)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR01, Package (0x0C)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR01, Package (0x0C)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x15
            }
        })
        Name (PR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                Acquire (MUTS, 0xFFFF)
                FLNK (0xFF, 0x31)
                Release (MUTS)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                ^LPCB.CLRL ()
            }

            OperationRegion (HBUS, PCI_Config, 0x40, 0xC0)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x08), 
                MHEN,   1, 
                    ,   13, 
                MHBR,   18, 
                Offset (0x10), 
                IIEN,   1, 
                    ,   11, 
                DIBI,   20, 
                Offset (0x28), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x30), 
                IPEN,   1, 
                    ,   11, 
                IPBR,   20, 
                Offset (0x62), 
                TUUD,   16, 
                Offset (0x70), 
                    ,   4, 
                TLUD,   12, 
                Offset (0x89), 
                    ,   3, 
                GTSE,   1, 
                Offset (0x8A)
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
            Field (MCHT, ByteAcc, NoLock, Preserve)
            {
                Offset (0xD40), 
                ADVE,   1, 
                    ,   11, 
                ADVT,   20, 
                Offset (0x101E), 
                T0IS,   16, 
                Offset (0x105E), 
                T1IS,   16, 
                Offset (0x10EF), 
                ESCS,   8
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x003E,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x003F,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((PELN >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((PELN >> 0x14) - One)
                If (^^CPBG.IMCH.PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((^^CPBG.IMCH.PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (^^CPBG.IMCH.PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((^^CPBG.IMCH.PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (^^CPBG.IMCH.PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((^^CPBG.IMCH.PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (^^CPBG.IMCH.PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((^^CPBG.IMCH.PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (^^CPBG.IMCH.PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((^^CPBG.IMCH.PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (^^CPBG.IMCH.PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((^^CPBG.IMCH.PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (^^CPBG.IMCH.PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((^^CPBG.IMCH.PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (^^CPBG.IMCH.PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((^^CPBG.IMCH.PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (^^CPBG.IMCH.PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((^^CPBG.IMCH.PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (^^CPBG.IMCH.PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((^^CPBG.IMCH.PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (^^CPBG.IMCH.PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((^^CPBG.IMCH.PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (^^CPBG.IMCH.PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((^^CPBG.IMCH.PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (^^CPBG.IMCH.PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((^^CPBG.IMCH.PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    If ((PNHM >= 0x000106E1))
                    {
                        Local0 = ^IO10.TOLM /* \_SB_.PCI0.IO10.TOLM */
                        M1MN = (Local0++ << 0x1A)
                    }
                    Else
                    {
                        Local0 = ^IIO0.TOLM /* \_SB_.PCI0.IIO0.TOLM */
                        M1MN = (Local0++ << 0x1A)
                    }
                }
                Else
                {
                    M1MN = (TLUD << 0x14)
                }

                M1LN = ((M1MX - M1MN) + One)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (PCPC, 0, NotSerialized)
                {
                    ECST (0x6F)
                }

                Method (PAPR, 0, NotSerialized)
                {
                    If (ECON)
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (IGDS)
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DSEN = (Arg0 & 0x07)
                    If (((Arg0 & 0x03) == Zero))
                    {
                        If (CondRefOf (HDOS))
                        {
                            HDOS ()
                        }
                    }
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If (CondRefOf (IDAB)) {}
                    Else
                    {
                        NDID = Zero
                        If ((DIDL != Zero))
                        {
                            DID1 = SDDL (DIDL)
                        }

                        If ((DDL2 != Zero))
                        {
                            DID2 = SDDL (DDL2)
                        }

                        If ((DDL3 != Zero))
                        {
                            DID3 = SDDL (DDL3)
                        }

                        If ((DDL4 != Zero))
                        {
                            DID4 = SDDL (DDL4)
                        }

                        If ((DDL5 != Zero))
                        {
                            DID5 = SDDL (DDL5)
                        }

                        If ((DDL6 != Zero))
                        {
                            DID6 = SDDL (DDL6)
                        }

                        If ((DDL7 != Zero))
                        {
                            DID7 = SDDL (DDL7)
                        }

                        If ((DDL8 != Zero))
                        {
                            DID8 = SDDL (DDL8)
                        }
                    }

                    If ((NDID == One))
                    {
                        Name (TMP1, Package (0x01)
                        {
                            0xFFFFFFFF
                        })
                        Index (TMP1, Zero) = (0x00010000 | DID1)
                        Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
                    }

                    If ((NDID == 0x02))
                    {
                        Name (TMP2, Package (0x02)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP2, Zero) = (0x00010000 | DID1)
                        Index (TMP2, One) = (0x00010000 | DID2)
                        Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
                    }

                    If ((NDID == 0x03))
                    {
                        Name (TMP3, Package (0x03)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP3, Zero) = (0x00010000 | DID1)
                        Index (TMP3, One) = (0x00010000 | DID2)
                        Index (TMP3, 0x02) = (0x00010000 | DID3)
                        Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
                    }

                    If ((NDID == 0x04))
                    {
                        Name (TMP4, Package (0x04)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP4, Zero) = (0x00010000 | DID1)
                        Index (TMP4, One) = (0x00010000 | DID2)
                        Index (TMP4, 0x02) = (0x00010000 | DID3)
                        Index (TMP4, 0x03) = (0x00010000 | DID4)
                        Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
                    }

                    If ((NDID == 0x05))
                    {
                        Name (TMP5, Package (0x05)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP5, Zero) = (0x00010000 | DID1)
                        Index (TMP5, One) = (0x00010000 | DID2)
                        Index (TMP5, 0x02) = (0x00010000 | DID3)
                        Index (TMP5, 0x03) = (0x00010000 | DID4)
                        Index (TMP5, 0x04) = (0x00010000 | DID5)
                        Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
                    }

                    If ((NDID == 0x06))
                    {
                        Name (TMP6, Package (0x06)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP6, Zero) = (0x00010000 | DID1)
                        Index (TMP6, One) = (0x00010000 | DID2)
                        Index (TMP6, 0x02) = (0x00010000 | DID3)
                        Index (TMP6, 0x03) = (0x00010000 | DID4)
                        Index (TMP6, 0x04) = (0x00010000 | DID5)
                        Index (TMP6, 0x05) = (0x00010000 | DID6)
                        Return (TMP6) /* \_SB_.PCI0.GFX0._DOD.TMP6 */
                    }

                    If ((NDID == 0x07))
                    {
                        Name (TMP7, Package (0x07)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP7, Zero) = (0x00010000 | DID1)
                        Index (TMP7, One) = (0x00010000 | DID2)
                        Index (TMP7, 0x02) = (0x00010000 | DID3)
                        Index (TMP7, 0x03) = (0x00010000 | DID4)
                        Index (TMP7, 0x04) = (0x00010000 | DID5)
                        Index (TMP7, 0x05) = (0x00010000 | DID6)
                        Index (TMP7, 0x06) = (0x00010000 | DID7)
                        Return (TMP7) /* \_SB_.PCI0.GFX0._DOD.TMP7 */
                    }

                    If ((NDID == 0x08))
                    {
                        Name (TMP8, Package (0x08)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Index (TMP8, Zero) = (0x00010000 | DID1)
                        Index (TMP8, One) = (0x00010000 | DID2)
                        Index (TMP8, 0x02) = (0x00010000 | DID3)
                        Index (TMP8, 0x03) = (0x00010000 | DID4)
                        Index (TMP8, 0x04) = (0x00010000 | DID5)
                        Index (TMP8, 0x05) = (0x00010000 | DID6)
                        Index (TMP8, 0x06) = (0x00010000 | DID7)
                        Index (TMP8, 0x07) = (0x00010000 | DID8)
                        Return (TMP8) /* \_SB_.PCI0.GFX0._DOD.TMP8 */
                    }

                    Return (Package (0x01)
                    {
                        0x0400
                    })
                }

                Device (DD01)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID1 == Zero))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID1))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDDS (DID1))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID1))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD02)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID2 == Zero))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID2))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Return (CDDS (DID2))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID2))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        If ((PWM7 == Zero))
                        {
                            PWM0 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x02))
                            PWM1 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x03))
                            PWM2 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x04))
                            PWM3 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x05))
                            PWM4 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x06))
                            PWM5 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x07))
                            PWM6 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x08))
                            PWM7 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x09))
                        }

                        Return (BRLV) /* \BRLV */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        BCMF = Zero
                        If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                        {
                            BRTL = Arg0
                            Local0 = SizeOf (BRLV)
                            While (Local0)
                            {
                                Local0--
                                Local1 = DerefOf (Index (BRLV, Local0))
                                If ((Arg0 == Local1))
                                {
                                    Break
                                }
                            }

                            Arg0 = DerefOf (Index (DerefOf (Index (PANL, PNID)), Local0))
                            AINT (One, Arg0)
                            ECA3 = (Local0 - 0x02)
                        }
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Return (BRTL) /* \BRTL */
                    }
                }

                Device (DD03)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID3 == Zero))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID3))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID3 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID3))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID3))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD04)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID4 == Zero))
                        {
                            Return (0x04)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID4))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID4 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID4))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID4))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD05)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID5 == Zero))
                        {
                            Return (0x05)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID5))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID5 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID5))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID5))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD06)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID6 == Zero))
                        {
                            Return (0x06)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID6))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID6 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID6))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID6))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD07)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID7 == Zero))
                        {
                            Return (0x07)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID7))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID7 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID7))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID7))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD08)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID8 == Zero))
                        {
                            Return (0x08)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID8))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If ((DID8 == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (CDDS (DID8))
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        Return (NDDS (DID8))
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Method (SDDL, 1, NotSerialized)
                {
                    NDID++
                    Local0 = (Arg0 & 0x0F0F)
                    Local1 = (0x80000000 | Local0)
                    If ((DIDL == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL2 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL3 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL4 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL5 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL6 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL7 == Local0))
                    {
                        Return (Local1)
                    }

                    If ((DDL8 == Local0))
                    {
                        Return (Local1)
                    }

                    Return (Zero)
                }

                Method (CDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((Zero == Local0))
                    {
                        Return (0x1D)
                    }

                    If ((CADL == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL2 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL3 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL4 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL5 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL6 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL7 == Local0))
                    {
                        Return (0x1F)
                    }

                    If ((CAL8 == Local0))
                    {
                        Return (0x1F)
                    }

                    Return (0x1D)
                }

                Method (NDDS, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F0F)
                    If ((Zero == Local0))
                    {
                        Return (Zero)
                    }

                    If ((NADL == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL2 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL3 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL4 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL5 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL6 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL7 == Local0))
                    {
                        Return (One)
                    }

                    If ((NDL8 == Local0))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (STBL, 1, NotSerialized)
                {
                    If ((Arg0 == Zero))
                    {
                        NADL = 0x0400
                        NDL2 = Zero
                    }
                    Else
                    {
                        Acquire (MUTS, 0xFFFF)
                        OSMI (0xA8)
                        Local0 = CSTE /* \CSTE */
                        OSMI (0xFF)
                        Local0 >>= One
                        While (!(PADL & Local0))
                        {
                            Local0 >>= One
                            If ((Local0 == Zero))
                            {
                                Local0 = 0x08
                            }
                        }

                        Release (MUTS)
                        If ((Local0 == One))
                        {
                            NADL = 0x0400
                        }

                        If ((Local0 == 0x02))
                        {
                            NADL = 0x0100
                        }

                        If ((Local0 == 0x04))
                        {
                            NADL = 0x0300
                        }

                        If ((Local0 == 0x08))
                        {
                            NADL = 0x0500
                        }

                        NDL2 = Zero
                    }
                }

                Scope (^^PCI0)
                {
                    OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                    Field (MCHP, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x60), 
                        TASM,   10, 
                        Offset (0x62)
                    }
                }

                OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x12), 
                        ,   1, 
                    GIVD,   1, 
                        ,   2, 
                    GUMA,   3, 
                    Offset (0x14), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x18), 
                    Offset (0xA4), 
                    ASLE,   8, 
                    Offset (0xA8), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xB0), 
                        ,   12, 
                    CDVL,   1, 
                    Offset (0xB2), 
                    Offset (0xB5), 
                    LBPC,   8, 
                    Offset (0xBC), 
                    ASLS,   32
                }

                OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
                Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    DMOD,   32, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   32, 
                    DDL2,   32, 
                    DDL3,   32, 
                    DDL4,   32, 
                    DDL5,   32, 
                    DDL6,   32, 
                    DDL7,   32, 
                    DDL8,   32, 
                    CPDL,   32, 
                    CPL2,   32, 
                    CPL3,   32, 
                    CPL4,   32, 
                    CPL5,   32, 
                    CPL6,   32, 
                    CPL7,   32, 
                    CPL8,   32, 
                    CADL,   32, 
                    CAL2,   32, 
                    CAL3,   32, 
                    CAL4,   32, 
                    CAL5,   32, 
                    CAL6,   32, 
                    CAL7,   32, 
                    CAL8,   32, 
                    NADL,   32, 
                    NDL2,   32, 
                    NDL3,   32, 
                    NDL4,   32, 
                    NDL5,   32, 
                    NDL6,   32, 
                    NDL7,   32, 
                    NDL8,   32, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    CBLV,   32, 
                    BCLM,   320, 
                    CPFM,   32, 
                    EPFM,   32, 
                    PLUT,   592, 
                    PFMB,   32, 
                    CCDV,   32, 
                    PCFT,   32, 
                    Offset (0x400), 
                    GVD1,   49152, 
                    PHED,   32, 
                    BDDC,   2048
                }

                Name (DBTB, Package (0x15)
                {
                    Zero, 
                    0x07, 
                    0x38, 
                    0x01C0, 
                    0x0E00, 
                    0x3F, 
                    0x01C7, 
                    0x0E07, 
                    0x01F8, 
                    0x0E38, 
                    0x0FC0, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x7000, 
                    0x7007, 
                    0x7038, 
                    0x71C0, 
                    0x7E00
                })
                Name (CDCT, Package (0x05)
                {
                    Package (0x02)
                    {
                        0xE4, 
                        0x0140
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }
                })
                Name (SUCC, One)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GSCI, 0, Serialized)
                {
                    Method (GBDA, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = 0x0679
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            PARM = 0x0240
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            PARM &= 0xEFFF0000
                            PARM &= (DerefOf (Index (DBTB, IBTT)) << 0x10)
                            PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            PARM = IPSC /* \IPSC */
                            PARM |= (IPAT << 0x08)
                            PARM += 0x0100
                            PARM |= (LIDS << 0x10)
                            PARM += 0x00010000
                            PARM |= (IBIA << 0x14)
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            OSMI (0x56)
                            PARM = PRM1 /* \PRM1 */
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                            PARM ^= One
                            PARM |= (GMFN << One)
                            PARM |= 0x1800
                            PARM |= (IDMS << 0x11)
                            PARM |= (DerefOf (Index (DerefOf (Index (CDCT, HVCO)), CDVL)) << 
                                0x15) /* \_SB_.PCI0.GFX0.PARM */
                            GESF = One
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            PARM = Zero
                            If (ISSC)
                            {
                                PARM |= 0x03
                            }

                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            PARM = KSV0 /* \KSV0 */
                            GESF = KSV1 /* \KSV1 */
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                    }

                    Method (SBCB, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = Zero
                            PARM = 0x000F87FD
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x03))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            PRM0 = PARM /* \_SB_.PCI0.GFX0.PARM */
                            OSMI (0x57)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            If ((PARM == Zero))
                            {
                                Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x08))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x09))
                        {
                            IBTT = (PARM & 0xFF)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            IPSC = (PARM & 0xFF)
                            If (((PARM >> 0x08) & 0xFF))
                            {
                                IPAT = ((PARM >> 0x08) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((PARM >> 0x14) & 0x07)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            IF1E = ((PARM >> One) & One)
                            If ((PARM & 0x0001E000))
                            {
                                IDMS = ((PARM >> 0x0D) & 0x0F)
                            }
                            Else
                            {
                                IDMS = ((PARM >> 0x11) & 0x0F)
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x10))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x11))
                        {
                            PARM = (LIDS << 0x08)
                            PARM += 0x0100
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x12))
                        {
                            If ((PARM & One))
                            {
                                If (((PARM >> One) == One))
                                {
                                    ISSC = One
                                }
                                Else
                                {
                                    GESF = Zero
                                    Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                                }
                            }
                            Else
                            {
                                ISSC = Zero
                            }

                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x13))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x14))
                        {
                            PAVP = (PARM & 0x0F)
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GEFC == 0x04))
                    {
                        GXFC = GBDA ()
                    }

                    If ((GEFC == 0x06))
                    {
                        GXFC = SBCB ()
                    }

                    GEFC = Zero
                    SCIS = One
                    GSSE = Zero
                    SCIE = Zero
                    Return (Zero)
                }

                Method (PDRD, 0, NotSerialized)
                {
                    If (!DRDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!DRDY)
                }

                Method (PSTS, 0, NotSerialized)
                {
                    If ((CSTS > 0x02))
                    {
                        Sleep (ASLP)
                    }

                    Return ((CSTS == 0x03))
                }

                Method (GNOT, 2, NotSerialized)
                {
                    If (PDRD ())
                    {
                        Return (One)
                    }

                    CEVT = Arg0
                    CSTS = 0x03
                    If (((CHPD == Zero) && (Arg1 == Zero)))
                    {
                        If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                        {
                            Notify (PCI0, Arg1)
                        }
                        Else
                        {
                            Notify (GFX0, Arg1)
                        }
                    }

                    If (CondRefOf (HNOT))
                    {
                        HNOT (Arg0)
                    }
                    Else
                    {
                        Notify (GFX0, 0x80) // Status Change
                    }

                    Return (Zero)
                }

                Method (GHDS, 1, NotSerialized)
                {
                    TIDX = Arg0
                    Return (GNOT (One, Zero))
                }

                Method (GLID, 1, NotSerialized)
                {
                    CLID = Arg0
                    Return (GNOT (0x02, Zero))
                }

                Method (GDCK, 1, NotSerialized)
                {
                    CDCK = Arg0
                    Return (GNOT (0x04, Zero))
                }

                Method (PARD, 0, NotSerialized)
                {
                    If (!ARDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!ARDY)
                }

                Method (AINT, 2, NotSerialized)
                {
                    If (!(TCHE & (One << Arg0)))
                    {
                        Return (One)
                    }

                    If (PARD ())
                    {
                        Return (One)
                    }

                    If ((Arg0 == 0x02))
                    {
                        If (CPFM)
                        {
                            Local0 = (CPFM & 0x0F)
                            Local1 = (EPFM & 0x0F)
                            If ((Local0 == One))
                            {
                                If ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                Else
                                {
                                    If ((Local1 & 0x08))
                                    {
                                        PFIT = 0x08
                                    }
                                    Else
                                    {
                                        PFIT = One
                                    }
                                }
                            }

                            If ((Local0 == 0x06))
                            {
                                If ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                Else
                                {
                                    If ((Local1 & One))
                                    {
                                        PFIT = One
                                    }
                                    Else
                                    {
                                        PFIT = 0x06
                                    }
                                }
                            }

                            If ((Local0 == 0x08))
                            {
                                If ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                Else
                                {
                                    If ((Local1 & 0x06))
                                    {
                                        PFIT = 0x06
                                    }
                                    Else
                                    {
                                        PFIT = 0x08
                                    }
                                }
                            }
                        }
                        Else
                        {
                            PFIT ^= 0x07
                        }

                        PFIT |= 0x80000000
                        ASLC = 0x04
                    }
                    Else
                    {
                        If ((Arg0 == One))
                        {
                            BCLP = ((Arg1 * 0xFF) / 0x64)
                            BCLP |= 0x80000000
                            ASLC = 0x02
                        }
                        Else
                        {
                            If ((Arg0 == Zero))
                            {
                                ALSI = Arg1
                                ASLC = One
                            }
                            Else
                            {
                                Return (One)
                            }
                        }
                    }

                    ASLE = One
                    Return (Zero)
                }

                Method (SCIP, 0, NotSerialized)
                {
                    If ((OVER != Zero))
                    {
                        Return (!GSMI)
                    }

                    Return (Zero)
                }
            }

            Device (P0P2)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    If (CPID)
                    {
                        Return (0x00030000)
                    }
                    Else
                    {
                        Return (0x00010000)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PR02) /* \_SB_.PR02 */
                }

                Device (PEGP)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (CSTT, Zero)
                    Name (DOSA, One)
                    Name (BCML, 0x64)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (IGDS)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        UDCS ()
                        UDGS ()
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        If (VGAM)
                        {
                            Return (Package (0x04)
                            {
                                0x0100, 
                                0x0110, 
                                0x0210, 
                                0x0220
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                0x00010100, 
                                0x00010110, 
                                0x80073330, 
                                0x80006342
                            })
                        }
                    }

                    Device (CRT)
                    {
                        Name (_ADR, 0x0100)  // _ADR: Address
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            PEGL = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Name (_DCS, 0x1F)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            _DCS &= 0xFFFFFFFD
                            Local0 = (Arg0 & One)
                            Local0 <<= One
                            _DCS |= Local0
                        }
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            PEGL = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PEGL = One
                        }

                        Name (_DCS, 0x1F)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            _DCS &= 0xFFFFFFFD
                            Local0 = (Arg0 & One)
                            Local0 <<= One
                            _DCS |= Local0
                        }

                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            If ((PWM7 == Zero))
                            {
                                PWM0 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x02))
                                PWM1 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x03))
                                PWM2 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x04))
                                PWM3 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x05))
                                PWM4 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x06))
                                PWM5 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x07))
                                PWM6 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x08))
                                PWM7 = DerefOf (Index (DerefOf (Index (PANL, PNID)), 0x09))
                            }

                            Return (BRLV) /* \BRLV */
                        }

                        Method (_BQC, 0, Serialized)  // _BQC: Brightness Query Current
                        {
                            Return (BCML) /* \_SB_.PCI0.P0P2.VGA_.BCML */
                        }

                        Method (_BCM, 1, Serialized)  // _BCM: Brightness Control Method
                        {
                            BCMF = Zero
                            Acquire (MUTS, 0xFFFF)
                            BCML = Arg0
                            If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                            {
                                Local0 = SizeOf (BRLV)
                                While (Local0)
                                {
                                    Local0--
                                    Local1 = DerefOf (Index (BRLV, Local0))
                                    If ((Arg0 == Local1))
                                    {
                                        Break
                                    }
                                }

                                BRTL = DerefOf (Index (DerefOf (Index (PANL, PNID)), Local0))
                                ECA3 = (Local0 - 0x02)
                                OSMI (0xA2)
                            }

                            Release (MUTS)
                        }
                    }

                    Device (DFP1)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            If (VGAM)
                            {
                                Return (0x0210)
                            }
                            Else
                            {
                                Return (0x80073330)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            PEGL = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Name (_DCS, 0x1F)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            _DCS &= 0xFFFFFFFD
                            Local0 = (Arg0 & One)
                            Local0 <<= One
                            _DCS |= Local0
                        }
                    }

                    Device (DFP2)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            If (VGAM)
                            {
                                Return (0x0220)
                            }
                            Else
                            {
                                Return (0x80006342)
                            }
                        }

                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            PEGL = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                        }

                        Name (_DCS, 0x1F)  // _DCS: Display Current Status
                        Name (_DGS, Zero)  // _DGS: Display Graphics State
                        Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                        {
                            _DCS &= 0xFFFFFFFD
                            Local0 = (Arg0 & One)
                            Local0 <<= One
                            _DCS |= Local0
                        }
                    }

                    Method (UDCS, 0, NotSerialized)
                    {
                        ^LCD._DCS &= 0xFFFFFFFD
                        ^CRT._DCS &= 0xFFFFFFFD
                        ^DFP1._DCS &= 0xFFFFFFFD
                        ^DFP2._DCS &= 0xFFFFFFFD
                        Acquire (MUTS, 0xFFFF)
                        OSMI (0xA8)
                        Release (MUTS)
                        CSTT = CSTE /* \CSTE */
                        If ((CSTT == One))
                        {
                            ^LCD._DCS |= 0x02
                        }

                        If ((CSTT == 0x02))
                        {
                            ^CRT._DCS |= 0x02
                        }

                        If ((CSTT == 0x04))
                        {
                            ^DFP1._DCS |= 0x02
                        }

                        If ((CSTT == 0x08))
                        {
                            ^DFP2._DCS |= 0x02
                        }
                    }

                    Method (UDGS, 0, NotSerialized)
                    {
                        ^LCD._DGS &= 0xFFFFFFFE
                        ^CRT._DGS &= 0xFFFFFFFE
                        ^DFP1._DGS &= 0xFFFFFFFE
                        ^DFP2._DGS &= 0xFFFFFFFE
                        Local1 = (^LCD._DCS & 0x02)
                        Local2 = (^CRT._DCS & 0x02)
                        Local3 = (^DFP1._DCS & 0x02)
                        Local4 = (^DFP2._DCS & 0x02)
                        Local1 >>= One
                        Local3 <<= One
                        Local4 <<= 0x02
                        Local1 |= Local2
                        Local1 |= Local3
                        Local1 |= Local4
                        Acquire (MUTS, 0xFFFF)
                        OSMI (0xFF)
                        Release (MUTS)
                        CSTT >>= One
                        While (!(PADL & CSTT))
                        {
                            CSTT >>= One
                            If ((CSTT == Zero))
                            {
                                CSTT = 0x08
                            }
                        }

                        If ((CSTT == One))
                        {
                            ^LCD._DGS |= One
                        }

                        If ((CSTT == 0x02))
                        {
                            ^CRT._DGS |= One
                        }

                        If ((CSTT == 0x04))
                        {
                            ^DFP1._DGS |= One
                        }

                        If ((CSTT == 0x08))
                        {
                            ^DFP2._DGS |= One
                        }

                        NSTE = CSTT /* \_SB_.PCI0.P0P2.VGA_.CSTT */
                    }

                    Name (ATIB, Buffer (0x80) {})
                    Method (ATIF, 2, NotSerialized)
                    {
                        If ((Arg0 == Zero))
                        {
                            Return (AF00 ())
                        }

                        If ((Arg0 == 0x05))
                        {
                            Return (AF05 ())
                        }

                        If ((Arg0 == 0x06))
                        {
                            AF06 (Arg1)
                            Return (ATIB) /* \_SB_.PCI0.P0P2.VGA_.ATIB */
                        }
                        Else
                        {
                            CreateWordField (ATIB, Zero, SSZE)
                            CreateWordField (ATIB, 0x02, VERN)
                            CreateDWordField (ATIB, 0x04, NMSK)
                            CreateDWordField (ATIB, 0x08, SFUN)
                            SSZE = Zero
                            VERN = Zero
                            NMSK = Zero
                            SFUN = Zero
                            Return (ATIB) /* \_SB_.PCI0.P0P2.VGA_.ATIB */
                        }
                    }

                    Method (AF00, 0, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateWordField (ATIB, 0x02, VERN)
                        CreateDWordField (ATIB, 0x04, NMSK)
                        CreateDWordField (ATIB, 0x08, SFUN)
                        SSZE = 0x0C
                        VERN = One
                        NMSK = Zero
                        SFUN = 0x30
                        Return (ATIB) /* \_SB_.PCI0.P0P2.VGA_.ATIB */
                    }

                    Method (AF05, 0, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateByteField (ATIB, 0x02, TSEF)
                        CreateByteField (ATIB, 0x03, TVIF)
                        SSZE = 0x04
                        TSEF = Zero
                        OSMI (0x56)
                        TVIF = PRM1 /* \PRM1 */
                        Return (ATIB) /* \_SB_.PCI0.P0P2.VGA_.ATIB */
                    }

                    Method (AF06, 1, NotSerialized)
                    {
                        CreateWordField (ATIB, Zero, SSZE)
                        CreateByteField (ATIB, 0x02, TSEF)
                        CreateByteField (ATIB, 0x03, TVIF)
                        SSZE = 0x04
                        TSEF = Zero
                        TVIF = Arg0
                        PRM0 = TVIF /* \_SB_.PCI0.P0P2.VGA_.AF06.TVIF */
                        OSMI (0x57)
                    }
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x0B, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x0B, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PR01) /* \_SB_.PR01 */
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (PCI0.LPCB.LPC1, PCI_Config, 0x40, 0xC0)
                    Field (PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x20), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        Offset (0x28), 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PARC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLA, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PARC & 0x0F))
                            Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PARC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PARC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PBRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLB, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PBRC & 0x0F))
                            Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PBRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PBRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PCRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLC, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PCRC & 0x0F))
                            Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PCRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PCRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PDRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLD, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PDRC & 0x0F))
                            Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PDRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PDRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PERC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLE, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PERC & 0x0F))
                            Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PERC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PERC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PFRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLF, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PFRC & 0x0F))
                            Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PFRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PFRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PGRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,10,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLG, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PGRC & 0x0F))
                            Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PGRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PGRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PHRC |= 0x80
                        }

                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {1,3,4,5,6,7,11,12,14,15}
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLH, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PHRC & 0x0F))
                            Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PHRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PHRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Method (PWCG, 0, NotSerialized)
                {
                    Notify (ADP0, Zero) // Bus Check
                    Notify (BAT0, 0x80) // Status Change
                    Notify (BAT0, 0x81) // Information Change
                }

                Method (INEV, 1, NotSerialized)
                {
                    Acquire (MUTS, 0xFFFF)
                    CECI = Arg0
                    FLNK (0xFF, 0x05)
                    Release (MUTS)
                    If (TSBK)
                    {
                        Notify (VALZ, 0x80) // Status Change
                    }
                }

                Name (LEGA, Package (0x0A)
                {
                    0x14, 
                    0x13, 
                    0x19, 
                    0x59, 
                    0x11, 
                    0x31, 
                    0x36, 
                    0x40, 
                    0x41, 
                    0x70
                })
                Method (LGPA, 1, NotSerialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_0 = Arg0
                    If ((_T_0 == Zero))
                    {
                        Notify (LID0, 0x80) // Status Change
                    }
                    Else
                    {
                        If ((_T_0 == One))
                        {
                            PWCG ()
                        }
                        Else
                        {
                            If ((_T_0 == 0x02))
                            {
                                BTCG = One
                                PWCG ()
                            }
                            Else
                            {
                                If ((_T_0 == 0x03)) {}
                                Else
                                {
                                    If ((_T_0 == 0x04))
                                    {
                                        P80H = 0x11
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x05))
                                        {
                                            Acquire (MUTS, 0xFFFF)
                                            If ((THRF == Zero))
                                            {
                                                PRM0 = Zero
                                            }
                                            Else
                                            {
                                                PRM0 = 0x02
                                            }

                                            OSMI (0xC0)
                                            Release (MUTS)
                                            Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x06))
                                            {
                                                Acquire (MUTS, 0xFFFF)
                                                PRM0 = PWRT /* \PWRT */
                                                OSMI (0xC4)
                                                Release (MUTS)
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x07))
                                                {
                                                    Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x08))
                                                    {
                                                        Local0 = (CPUS & 0x80)
                                                        Local1 = (CPUS & 0x7F)
                                                        If ((Local0 == Zero))
                                                        {
                                                            If ((THRF == Zero))
                                                            {
                                                                ACPS = CPUL /* \CPUL */
                                                            }
                                                            Else
                                                            {
                                                                Local1--
                                                                P80H = Local1
                                                                ACPS = Local1
                                                            }
                                                        }

                                                        If ((TCNT > One))
                                                        {
                                                            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                                                            Sleep (0x64)
                                                            Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                                                            Sleep (0x64)
                                                            Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                                                            Sleep (0x64)
                                                            Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                                                            Sleep (0x64)
                                                            Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                                                            Sleep (0x64)
                                                            Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                                                            Sleep (0x64)
                                                            Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                                                            Sleep (0x64)
                                                            Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                                                        }
                                                        Else
                                                        {
                                                            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                                                            Sleep (0x64)
                                                            Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                                                        }
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x09))
                                                        {
                                                            P80H = 0xE1
                                                        }
                                                        Else
                                                        {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Name (LEGB, Package (0x0E)
                {
                    0x20, 
                    0x21, 
                    0x82, 
                    0x83, 
                    0x84, 
                    0x87, 
                    0x85, 
                    0x86, 
                    0x45, 
                    0xE0, 
                    0xE1, 
                    0xE2, 
                    0xE3, 
                    0x72
                })
                Method (LGPB, 1, NotSerialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_0 = Arg0
                    If ((_T_0 == Zero))
                    {
                        If ((BLBM != Zero))
                        {
                            If ((^^^HAPS.HDSE != Zero))
                            {
                                Notify (HAPS, 0x80) // Status Change
                            }
                        }
                    }
                    Else
                    {
                        If ((_T_0 == One))
                        {
                            If ((BLBM != Zero))
                            {
                                If ((^^^HAPS.HDSE != Zero))
                                {
                                    Notify (HAPS, 0x81) // Information Change
                                }
                            }
                        }
                        Else
                        {
                            If ((_T_0 == 0x02))
                            {
                                If (TSBK)
                                {
                                    If (((EVTC & 0x02) == 0x02))
                                    {
                                        INEV (0x19B2)
                                    }
                                }
                            }
                            Else
                            {
                                If ((_T_0 == 0x03))
                                {
                                    If (TSBK)
                                    {
                                        If (((EVTC & 0x02) == 0x02))
                                        {
                                            INEV (0x19B3)
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((_T_0 == 0x04))
                                    {
                                        If (TSBK)
                                        {
                                            INEV (0x0401)
                                        }
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x05))
                                        {
                                            If ((SYBZ != 0x03))
                                            {
                                                Acquire (MUTM, 0xFFFF)
                                                CKSM ()
                                                Release (MUTM)
                                            }
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x06))
                                            {
                                                If (TSBK)
                                                {
                                                    If (((EVTC & 0x08) == 0x08))
                                                    {
                                                        INEV (0x19B6)
                                                    }
                                                }
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x07))
                                                {
                                                    If (TSBK)
                                                    {
                                                        If (((EVTC & 0x08) == 0x08))
                                                        {
                                                            INEV (0x19B7)
                                                        }
                                                    }
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x08))
                                                    {
                                                        If ((RCPU >= CPUM))
                                                        {
                                                            IDEV (0x0F, 0x45)
                                                            Acquire (MUTS, 0xFFFF)
                                                            TRAP (TRTD, 0x28)
                                                            Release (MUTS)
                                                        }
                                                    }
                                                    Else
                                                    {
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Name (LEGC, Package (0x09)
                {
                    0x51, 
                    0x50, 
                    0x52, 
                    0x53, 
                    0x54, 
                    0x55, 
                    0x56, 
                    0x25, 
                    0x26
                })
                Method (LGPC, 1, NotSerialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_0 = Arg0
                    If ((_T_0 == 0x07)) {}
                    Else
                    {
                        If ((_T_0 == 0x08)) {}
                        Else
                        {
                        }
                    }
                }

                Name (LEGD, Package (0x0F)
                {
                    0x63, 
                    0x64, 
                    0x60, 
                    0x61, 
                    0x62, 
                    0x65, 
                    0x66, 
                    0x68, 
                    0x69, 
                    0x28, 
                    0x29, 
                    0x80, 
                    0x81, 
                    0x71, 
                    0x98
                })
                Method (LGPD, 1, NotSerialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_0 = Arg0
                    If ((_T_0 == Zero))
                    {
                        If (IGDS)
                        {
                            Notify (^^P0P2.VGA.LCD, 0x87) // Device-Specific
                        }
                        Else
                        {
                            Notify (^^GFX0.DD02, 0x87) // Device-Specific
                        }
                    }
                    Else
                    {
                        If ((_T_0 == One))
                        {
                            If (IGDS)
                            {
                                Notify (^^P0P2.VGA.LCD, 0x86) // Device-Specific
                            }
                            Else
                            {
                                Notify (^^GFX0.DD02, 0x86) // Device-Specific
                            }
                        }
                        Else
                        {
                            If ((_T_0 == 0x02))
                            {
                                If ((OSYS < 0x07D6))
                                {
                                    Notify (FWEX, 0x80) // Status Change
                                }
                                Else
                                {
                                    If (TSBK)
                                    {
                                        Notify (VALZ, 0x80) // Status Change
                                    }
                                    Else
                                    {
                                        If ((EVCT != Zero))
                                        {
                                            Acquire (MUTS, 0xFFFF)
                                            FLNK (0x11, EVCT)
                                            Local0 = (KYB0 & 0xFF)
                                            KYB0 = Zero
                                            Release (MUTS)
                                        }
                                    }
                                }
                            }
                            Else
                            {
                                If ((_T_0 == 0x06))
                                {
                                    Local0 = One
                                    If ((BLBM != Zero)) {}
                                    If ((Local0 == One))
                                    {
                                        If (((TSBK != Zero) && (HSEM == Zero)))
                                        {
                                            Notify (HSB1, 0x80) // Status Change
                                        }
                                        Else
                                        {
                                            If ((PTST == 0xFF))
                                            {
                                                PTST = FLNK (0x15, 0x0F)
                                            }

                                            PTST = (One - PTST) /* \PTST */
                                            FLNK (0x15, PTST)
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((_T_0 == 0x09))
                                    {
                                        If (((EC93 & 0x30) == 0x30))
                                        {
                                            WREC (0x93, 0x80, 0x07, One)
                                            WREC (0x93, 0x40, 0x06, One)
                                            BTRS = One
                                        }

                                        Notify (BT, Zero) // Bus Check
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x0A))
                                        {
                                            If (((EC93 & 0x30) == 0x30))
                                            {
                                                WREC (0x93, 0x80, 0x07, Zero)
                                                WREC (0x93, 0x40, 0x06, Zero)
                                                BTRS = Zero
                                            }

                                            Notify (BT, Zero) // Bus Check
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x0B)) {}
                                            Else
                                            {
                                                If ((_T_0 == 0x0C))
                                                {
                                                    BTRS = Zero
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x0D))
                                                    {
                                                        Acquire (MUTS, 0xFFFF)
                                                        OSMI (0xFD)
                                                        Release (MUTS)
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x0E)) {}
                                                        Else
                                                        {
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Field (WNBD, ByteAcc, Lock, Preserve)
                {
                    Offset (0xB8), 
                    EEV0,   8, 
                    EEV1,   8, 
                    EEV2,   8, 
                    EEV3,   8, 
                    EEV4,   8, 
                    EEV5,   8, 
                    EEV6,   8, 
                    EEV7,   8
                }

                Mutex (MUTL, 0x00)
                Name (LEVC, Zero)
                Name (LEVB, Buffer (0x08)
                {
                     0x00                                             /* . */
                })
                Name (LINI, Zero)
                Name (TI3S, Zero)
                Name (TIMC, Zero)
                Name (SLEC, Zero)
                Name (SLEV, Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                })
                Name (SLEN, Package (0x08)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (LREG, 0, NotSerialized)
                {
                    Acquire (MUTS, 0xFFFF)
                    If ((LINI == Zero))
                    {
                        LINI = One
                        If ((OSYS > 0x07D5))
                        {
                            WREC (0xDB, One, Zero, One)
                            FLNK (0x14, One)
                            HKEM = One
                            WREC (0xDB, 0x10, 0x04, One)
                            HSEM = One
                            WREC (0xDB, 0x20, 0x05, One)
                            If ((EVCT != Zero))
                            {
                                FLNK (0x11, EVCT)
                                HSWK = (KYB0 & 0xFF)
                                KYB0 = Zero
                            }

                            FLNK (0x10, One)
                            FLNK (0x15, 0xFF)
                        }
                        Else
                        {
                            WREC (0xDB, One, Zero, Zero)
                            FLNK (0x15, 0xFF)
                            If (IGDS)
                            {
                                ^^P0P2.VGA.LCD._BCL ()
                            }
                            Else
                            {
                                ^^GFX0.DD02._BCL ()
                            }

                            If ((IGDS == Zero))
                            {
                                OperationRegion (IGD1, SystemMemory, ASLB, 0x2000)
                                Field (IGD1, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x31E), 
                                    BNL0,   8, 
                                    Offset (0x320), 
                                    BNL1,   8, 
                                    Offset (0x322), 
                                    BNL2,   8, 
                                    Offset (0x324), 
                                    BNL3,   8, 
                                    Offset (0x326), 
                                    BNL4,   8, 
                                    Offset (0x328), 
                                    BNL5,   8, 
                                    Offset (0x32A), 
                                    BNL6,   8, 
                                    Offset (0x32C), 
                                    BNL7,   8
                                }

                                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                                _T_0 = ECA3 /* \ECA3 */
                                If ((_T_0 == Zero))
                                {
                                    ^^GFX0.BCLP = BNL0 /* \_SB_.PCI0.LPCB.LREG.BNL0 */
                                }
                                Else
                                {
                                    If ((_T_0 == One))
                                    {
                                        ^^GFX0.BCLP = BNL1 /* \_SB_.PCI0.LPCB.LREG.BNL1 */
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x02))
                                        {
                                            ^^GFX0.BCLP = BNL2 /* \_SB_.PCI0.LPCB.LREG.BNL2 */
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x03))
                                            {
                                                ^^GFX0.BCLP = BNL3 /* \_SB_.PCI0.LPCB.LREG.BNL3 */
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x04))
                                                {
                                                    ^^GFX0.BCLP = BNL4 /* \_SB_.PCI0.LPCB.LREG.BNL4 */
                                                }
                                                Else
                                                {
                                                    If ((_T_0 == 0x05))
                                                    {
                                                        ^^GFX0.BCLP = BNL5 /* \_SB_.PCI0.LPCB.LREG.BNL5 */
                                                    }
                                                    Else
                                                    {
                                                        If ((_T_0 == 0x06))
                                                        {
                                                            ^^GFX0.BCLP = BNL6 /* \_SB_.PCI0.LPCB.LREG.BNL6 */
                                                        }
                                                        Else
                                                        {
                                                            If ((_T_0 == 0x07))
                                                            {
                                                                ^^GFX0.BCLP = BNL7 /* \_SB_.PCI0.LPCB.LREG.BNL7 */
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                ^^GFX0.BCLP |= 0x80000000
                                ^^GFX0.ASLC = 0x02
                                ^^GFX0.ASLE = One
                            }
                        }

                        FLNK (0x30, Zero)
                        WREC (0xDA, 0x03, Zero, Zero)
                    }

                    Release (MUTS)
                }

                Method (CLBF, 1, NotSerialized)
                {
                    Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_0 = Arg0
                    If ((_T_0 == Zero))
                    {
                        EEV0 = Zero
                    }
                    Else
                    {
                        If ((_T_0 == One))
                        {
                            EEV1 = Zero
                        }
                        Else
                        {
                            If ((_T_0 == 0x02))
                            {
                                EEV2 = Zero
                            }
                            Else
                            {
                                If ((_T_0 == 0x03))
                                {
                                    EEV3 = Zero
                                }
                                Else
                                {
                                    If ((_T_0 == 0x04))
                                    {
                                        EEV4 = Zero
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x05))
                                        {
                                            EEV5 = Zero
                                        }
                                        Else
                                        {
                                            If ((_T_0 == 0x06))
                                            {
                                                EEV6 = Zero
                                            }
                                            Else
                                            {
                                                If ((_T_0 == 0x07))
                                                {
                                                    EEV7 = Zero
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }

                Method (CKEV, 0, Serialized)
                {
                    Name (TMPB, Buffer (0x08)
                    {
                         0x00                                             /* . */
                    })
                    Acquire (MUTL, 0xFFFF)
                    If ((LEVC == Zero))
                    {
                        Index (TMPB, Zero) = EEV0 /* \_SB_.PCI0.LPCB.EEV0 */
                        Index (TMPB, One) = EEV1 /* \_SB_.PCI0.LPCB.EEV1 */
                        Index (TMPB, 0x02) = EEV2 /* \_SB_.PCI0.LPCB.EEV2 */
                        Index (TMPB, 0x03) = EEV3 /* \_SB_.PCI0.LPCB.EEV3 */
                        Index (TMPB, 0x04) = EEV4 /* \_SB_.PCI0.LPCB.EEV4 */
                        Index (TMPB, 0x05) = EEV5 /* \_SB_.PCI0.LPCB.EEV5 */
                        Index (TMPB, 0x06) = EEV6 /* \_SB_.PCI0.LPCB.EEV6 */
                        Index (TMPB, 0x07) = EEV7 /* \_SB_.PCI0.LPCB.EEV7 */
                        Local0 = Zero
                        While ((Local0 < 0x08))
                        {
                            Local1 = DerefOf (Index (TMPB, Local0))
                            If ((Local1 != Zero))
                            {
                                Index (LEVB, LEVC) = Local1
                                LEVC++
                                CLBF (Local0)
                            }

                            Local0++
                        }
                    }

                    Local2 = LEVC /* \_SB_.PCI0.LPCB.LEVC */
                    Release (MUTL)
                    Return (Local2)
                }

                Method (GEVT, 0, NotSerialized)
                {
                    Acquire (MUTL, 0xFFFF)
                    Local0 = Zero
                    If ((LEVC != Zero))
                    {
                        LEVC--
                        Local0 = DerefOf (Index (LEVB, LEVC))
                        Index (LEVB, LEVC) = Zero
                    }

                    Release (MUTL)
                    Return (Local0)
                }

                Method (ECLV, 0, NotSerialized)
                {
                    While ((((CKEV () != Zero) || (SLEC != Zero)) && (
                        TI3S < 0x78)))
                    {
                        Local1 = One
                        While ((Local1 != Zero))
                        {
                            Local1 = GEVT ()
                            LEVN (Local1)
                            TIMC += 0x19
                            If (((SLEC != Zero) && (Local1 == Zero)))
                            {
                                If ((TIMC == 0x19))
                                {
                                    Sleep (0x64)
                                    TIMC = 0x64
                                    TI3S += 0x04
                                }
                                Else
                                {
                                    Sleep (0x19)
                                    TI3S++
                                }
                            }

                            If ((TIMC == 0x64))
                            {
                                TIMC = Zero
                                If ((SLEC != Zero))
                                {
                                    Local0 = 0x08
                                    While (Local0)
                                    {
                                        Local0--
                                        Local3 = DerefOf (Index (SLEN, Local0))
                                        If ((Local3 != Zero))
                                        {
                                            Local3--
                                            Index (SLEN, Local0) = Local3
                                            If ((Local3 == Zero))
                                            {
                                                Local1 = One
                                                Local2 = DerefOf (Index (SLEV, Local0))
                                                Index (SLEV, Local0) = Zero
                                                ILEV (Local2)
                                                SLEC--
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    If ((TI3S >= 0x78))
                    {
                        TI3S = Zero
                        If ((EEV0 == Zero))
                        {
                            EEV0 = 0xFF
                        }
                    }
                }

                Method (IDEV, 2, Serialized)
                {
                    If ((SLEC < 0x08))
                    {
                        Local0 = 0x08
                        While (Local0)
                        {
                            Local0--
                            If ((DerefOf (Index (SLEN, Local0)) == Zero))
                            {
                                Break
                            }
                        }

                        Index (SLEV, Local0) = Arg1
                        Local2 = Arg0
                        If ((Arg0 >= 0x14))
                        {
                            Divide (Arg0, 0x14, Local2, Local1)
                            Local2 = (Arg0 - Local1)
                        }

                        Index (SLEN, Local0) = Local2
                        SLEC++
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (CLRL, 0, Serialized)
                {
                    SLEC = Zero
                    TIMC = Zero
                    Local0 = 0x08
                    While (Local0)
                    {
                        Local0--
                        Index (SLEV, Local0) = Zero
                        Index (SLEN, Local0) = Zero
                    }
                }

                Method (ILEV, 1, NotSerialized)
                {
                    Acquire (MUTL, 0xFFFF)
                    If ((EEV0 == Zero))
                    {
                        EEV0 = 0xFF
                    }

                    If ((LEVC < 0x08))
                    {
                        Index (LEVB, LEVC) = Arg0
                        LEVC++
                    }

                    Release (MUTL)
                }

                Method (LEVN, 1, NotSerialized)
                {
                    If ((Arg0 != Zero))
                    {
                        P80H = Arg0
                        Sleep (0x14)
                        Local6 = Match (LEGA, MEQ, Arg0, MTR, Zero, Zero)
                        If ((Local6 != Ones))
                        {
                            LGPA (Local6)
                        }
                        Else
                        {
                            Local6 = Match (LEGB, MEQ, Arg0, MTR, Zero, Zero)
                            If ((Local6 != Ones))
                            {
                                LGPB (Local6)
                            }
                            Else
                            {
                                Local6 = Match (LEGC, MEQ, Arg0, MTR, Zero, Zero)
                                If ((Local6 != Ones))
                                {
                                    LGPC (Local6)
                                }
                                Else
                                {
                                    Local6 = Match (LEGD, MEQ, Arg0, MTR, Zero, Zero)
                                    If ((Local6 != Ones))
                                    {
                                        LGPD (Local6)
                                    }
                                }
                            }
                        }
                    }
                }

                Device (ADP0)
                {
                    Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                    {
                        _SB
                    })
                    Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                    Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                    {
                        If (ECOK)
                        {
                            Local0 = ((EC92 >> 0x03) & One)
                            If (Local0)
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (BAT0)
                {
                    Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                    {
                        _SB
                    })
                    Name (BIF1, Package (0x0D)
                    {
                        Zero, 
                        0x10CC, 
                        0x10CC, 
                        One, 
                        0x3A98, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        "PA3478U-1BAS/BRS", 
                        "0000", 
                        "Li-ion", 
                        ""
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (ECOK)
                        {
                            If ((EC94 & One))
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (BST1, Package (0x04)
                    {
                        One, 
                        0x0A90, 
                        0x1000, 
                        0x23A0
                    })
                    Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                    {
                        If (ECOK)
                        {
                            Local0 = ECAE /* \ECAE */
                            Local5 = ECAF /* \ECAF */
                            Local5 <<= 0x08
                            Local0 += Local5
                            Index (BIF1, 0x04) = Local0
                            Local2 = Local0
                            Local0 = ECAA /* \ECAA */
                            Local5 = ECAB /* \ECAB */
                            Local5 <<= 0x08
                            Local0 += Local5
                            Local0 *= Local2
                            Divide (Local0, 0x03E8, Local3, Local0)
                            Index (BIF1, 0x02) = Local0
                            Local1 = ECAC /* \ECAC */
                            Local5 = ECAD /* \ECAD */
                            Local5 <<= 0x08
                            Local1 += Local5
                            Local1 *= Local2
                            Divide (Local1, 0x03E8, Local3, Local1)
                            Index (BIF1, One) = Local1
                            Index (BIF1, 0x08) = Local0
                            Concatenate (BCM1, BCM2, Local0)
                            Index (BIF1, 0x09) = Local0
                            Local0 = ECB9 /* \ECB9 */
                            Local5 = ECBA /* \ECBA */
                            Local5 <<= 0x08
                            Local0 += Local5
                            Local1 = ITOS (Local0)
                            Index (BIF1, 0x0A) = Local1
                        }
                        Else
                        {
                            Index (BIF1, One) = 0xFFFFFFFF
                            Index (BIF1, 0x04) = 0xFFFFFFFF
                        }

                        Return (BIF1) /* \_SB_.PCI0.LPCB.BAT0.BIF1 */
                    }

                    Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                    {
                        If (ECOK)
                        {
                            Local1 = ((EC94 >> 0x04) & One)
                            Local0 = (EC95 & One)
                            Local2 = (Local1 << One)
                            Local3 = (Local0 | Local2)
                            Local2 = ECC6 /* \ECC6 */
                            Local1 = (Local2 * 0x0100)
                            Local0 = ECC5 /* \ECC5 */
                            Local1 += Local0
                            Local4 = (ECAE + (ECAF << 0x08))
                            Local1 *= Local4
                            Divide (Local1, 0x03E8, Local0, Local1)
                            Index (BST1, One) = Local1
                            Local0 = ECA4 /* \ECA4 */
                            If ((Local0 < 0x0F))
                            {
                                Local3 |= 0x04
                            }

                            Index (BST1, Zero) = Local3
                            Local1 = DerefOf (Index (BIF1, 0x02))
                            Local2 = (Local1 * Local0)
                            Divide (Local2, 0x64, Local3, Local2)
                            Local2 += One
                            Index (BST1, 0x02) = Local2
                            Local3 = DerefOf (Index (BIF1, 0x04))
                            Index (BST1, 0x03) = Local3
                        }
                        Else
                        {
                            Index (BST1, Zero) = One
                            Index (BST1, One) = 0xFFFFFFFF
                            Index (BST1, 0x02) = 0xFFFFFFFF
                            Index (BST1, 0x03) = 0xFFFFFFFF
                        }

                        Return (BST1) /* \_SB_.PCI0.LPCB.BAT0.BST1 */
                    }
                }

                Method (ITOS, 1, NotSerialized)
                {
                    Local0 = ""
                    Local1 = 0x04
                    While (Local1)
                    {
                        Local1--
                        Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
                        Local2 = DerefOf (Index (CHAR, Local4))
                        Concatenate (Local0, Local2, Local5)
                        Local0 = Local5
                    }

                    Return (Local0)
                }

                Name (CHAR, Package (0x10)
                {
                    "0", 
                    "1", 
                    "2", 
                    "3", 
                    "4", 
                    "5", 
                    "6", 
                    "7", 
                    "8", 
                    "9", 
                    "A", 
                    "B", 
                    "C", 
                    "D", 
                    "E", 
                    "F"
                })
                Device (PWRB)
                {
                    Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                }

                Device (LID0)
                {
                    Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                    Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                    {
                        If (ECOK)
                        {
                            If (PEGL)
                            {
                                Return (One)
                            }

                            If (RDEC (0x92, One, Zero))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (One)
                            }
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x0D, 
                        0x04
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If (Arg0)
                        {
                            If (RDEC (0x92, One, Zero))
                            {
                                WREC (0xB6, One, Zero, One)
                            }
                            Else
                            {
                                WREC (0xB6, One, Zero, Zero)
                            }
                        }
                        Else
                        {
                            WREC (0xB6, One, Zero, Zero)
                        }
                    }
                }

                Device (KBC)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (MOUE)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (0x0001F351)
                    }

                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN1900"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Device (BT)
                {
                    Name (_HID, "TOS6205")  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local2 = ((EC93 >> 0x05) & One)
                        Local0 = Zero
                        If (Local2)
                        {
                            Local0 = 0x0F
                        }

                        Return (Local0)
                    }

                    Method (BTST, 0, NotSerialized)
                    {
                        Local0 = Zero
                        If (((EC93 & 0x20) == 0x20))
                        {
                            Local0 = (EC93 & 0xC0)
                            If (((EC93 & 0x10) == 0x10))
                            {
                                Local0 += One
                            }
                        }

                        Return (Local0)
                    }

                    Method (AUSB, 0, NotSerialized)
                    {
                    }

                    Method (DUSB, 0, NotSerialized)
                    {
                        BTRS = Zero
                        Acquire (MUTS, 0xFFFF)
                        FLNK (0x16, 0xFC)
                        Release (MUTS)
                        Sleep (0x96)
                    }

                    Method (BTPO, 0, NotSerialized)
                    {
                        Local2 = RDEC (0x93, 0x20, 0x05)
                        If (Local2)
                        {
                            Local3 = RDEC (0x93, 0x10, 0x04)
                            If (Local3)
                            {
                                WREC (0x93, 0x80, 0x07, One)
                                WREC (0x93, 0x40, 0x06, One)
                                Acquire (MUTS, 0xFFFF)
                                FLNK (0x16, 0xFA)
                                Release (MUTS)
                                BTRS = One
                            }
                        }
                    }

                    Method (BTPF, 0, NotSerialized)
                    {
                        If (ECOK)
                        {
                            Local2 = RDEC (0x93, 0x20, 0x05)
                            If (Local2)
                            {
                                Sleep (0xFA)
                            }
                        }
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y0F)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        Else
                        {
                            If (HPAE)
                            {
                                Return (0x0B)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y0F._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == One))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0068,             // Range Minimum
                            0x0068,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x006C,             // Range Minimum
                            0x006C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0810,             // Range Minimum
                            0x0810,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x164E,             // Range Minimum
                            0x164E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = Zero
                    }

                    Local0 = RDEC (0xDA, 0x03, Zero)
                    If ((Local0 == Zero))
                    {
                        Local0 = 0x03
                    }
                    Else
                    {
                        Local0 = One
                    }

                    WREC (0xDA, 0x03, Zero, Local0)
                }

                Device (RHB1)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (IHUB)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision       = 0x1,
                                PLD_IgnoreColor    = 0x1,
                                PLD_Red            = 0x0,
                                PLD_Green          = 0x0,
                                PLD_Blue           = 0x0,
                                PLD_Width          = 0x0,
                                PLD_Height         = 0x0,
                                PLD_UserVisible    = 0x1,
                                PLD_Dock           = 0x0,
                                PLD_Lid            = 0x0,
                                PLD_Panel          = "LEFT",
                                PLD_VerticalPosition = "LOWER",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape          = "HORIZONTALRECTANGLE",
                                PLD_GroupOrientation = 0x0,
                                PLD_GroupToken     = 0x0,
                                PLD_GroupPosition  = 0x0,
                                PLD_Bay            = 0x0,
                                PLD_Ejectable      = 0x0,
                                PLD_EjectRequired  = 0x0,
                                PLD_CabinetNumber  = 0x0,
                                PLD_CardCageNumber = 0x0,
                                PLD_Reference      = 0x0,
                                PLD_Rotation       = 0x0,
                                PLD_Order          = 0x6,
                                PLD_VerticalOffset = 0x0,
                                PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision       = 0x1,
                                PLD_IgnoreColor    = 0x1,
                                PLD_Red            = 0x0,
                                PLD_Green          = 0x0,
                                PLD_Blue           = 0x0,
                                PLD_Width          = 0x0,
                                PLD_Height         = 0x0,
                                PLD_UserVisible    = 0x1,
                                PLD_Dock           = 0x0,
                                PLD_Lid            = 0x0,
                                PLD_Panel          = "LEFT",
                                PLD_VerticalPosition = "CENTER",
                                PLD_HorizontalPosition = "LEFT",
                                PLD_Shape          = "HORIZONTALRECTANGLE",
                                PLD_GroupOrientation = 0x0,
                                PLD_GroupToken     = 0x0,
                                PLD_GroupPosition  = 0x0,
                                PLD_Bay            = 0x0,
                                PLD_Ejectable      = 0x0,
                                PLD_EjectRequired  = 0x0,
                                PLD_CabinetNumber  = 0x0,
                                PLD_CardCageNumber = 0x0,
                                PLD_Reference      = 0x0,
                                PLD_Rotation       = 0x0,
                                PLD_Order          = 0x6,
                                PLD_VerticalOffset = 0x0,
                                PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision       = 0x1,
                                PLD_IgnoreColor    = 0x1,
                                PLD_Red            = 0x0,
                                PLD_Green          = 0x0,
                                PLD_Blue           = 0x0,
                                PLD_Width          = 0x0,
                                PLD_Height         = 0x0,
                                PLD_UserVisible    = 0x1,
                                PLD_Dock           = 0x0,
                                PLD_Lid            = 0x0,
                                PLD_Panel          = "RIGHT",
                                PLD_VerticalPosition = "CENTER",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape          = "HORIZONTALRECTANGLE",
                                PLD_GroupOrientation = 0x0,
                                PLD_GroupToken     = 0x0,
                                PLD_GroupPosition  = 0x0,
                                PLD_Bay            = 0x0,
                                PLD_Ejectable      = 0x0,
                                PLD_EjectRequired  = 0x0,
                                PLD_CabinetNumber  = 0x0,
                                PLD_CardCageNumber = 0x0,
                                PLD_Reference      = 0x0,
                                PLD_Rotation       = 0x0,
                                PLD_Order          = 0x6,
                                PLD_VerticalOffset = 0x0,
                                PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision       = 0x1,
                                PLD_IgnoreColor    = 0x1,
                                PLD_Red            = 0x0,
                                PLD_Green          = 0x0,
                                PLD_Blue           = 0x0,
                                PLD_Width          = 0x0,
                                PLD_Height         = 0x0,
                                PLD_UserVisible    = 0x1,
                                PLD_Dock           = 0x0,
                                PLD_Lid            = 0x0,
                                PLD_Panel          = "RIGHT",
                                PLD_VerticalPosition = "CENTER",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape          = "HORIZONTALRECTANGLE",
                                PLD_GroupOrientation = 0x0,
                                PLD_GroupToken     = 0x0,
                                PLD_GroupPosition  = 0x0,
                                PLD_Bay            = 0x0,
                                PLD_Ejectable      = 0x0,
                                PLD_EjectRequired  = 0x0,
                                PLD_CabinetNumber  = 0x0,
                                PLD_CardCageNumber = 0x0,
                                PLD_Reference      = 0x0,
                                PLD_Rotation       = 0x0,
                                PLD_Order          = 0x6,
                                PLD_VerticalOffset = 0x0,
                                PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x02, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision       = 0x1,
                                PLD_IgnoreColor    = 0x1,
                                PLD_Red            = 0x0,
                                PLD_Green          = 0x0,
                                PLD_Blue           = 0x0,
                                PLD_Width          = 0x0,
                                PLD_Height         = 0x0,
                                PLD_UserVisible    = 0x1,
                                PLD_Dock           = 0x0,
                                PLD_Lid            = 0x0,
                                PLD_Panel          = "LEFT",
                                PLD_VerticalPosition = "UPPER",
                                PLD_HorizontalPosition = "RIGHT",
                                PLD_Shape          = "HORIZONTALRECTANGLE",
                                PLD_GroupOrientation = 0x0,
                                PLD_GroupToken     = 0x0,
                                PLD_GroupPosition  = 0x0,
                                PLD_Bay            = 0x0,
                                PLD_Ejectable      = 0x0,
                                PLD_EjectRequired  = 0x0,
                                PLD_CabinetNumber  = 0x0,
                                PLD_CardCageNumber = 0x0,
                                PLD_Reference      = 0x0,
                                PLD_Rotation       = 0x0,
                                PLD_Order          = 0x6,
                                PLD_VerticalOffset = 0x0,
                                PLD_HorizontalOffset = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PRT7)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PRT8)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }
                    }
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                OperationRegion (U1CS, PCI_Config, 0xC4, 0x04)
                Field (U1CS, DWordAcc, NoLock, Preserve)
                {
                    U1EN,   2
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        U1EN = 0x03
                    }
                    Else
                    {
                        U1EN = Zero
                    }
                }

                Device (RHB2)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (IHUB)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Device (PRT1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PRT2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PRT4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }

                        Device (PRT6)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                        }
                    }
                }
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
                Field (HDAR, WordAcc, NoLock, Preserve)
                {
                    DCKA,   1, 
                    Offset (0x01), 
                    DCKM,   1, 
                        ,   6, 
                    DCKS,   1, 
                    Offset (0x08), 
                        ,   15, 
                    PMES,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKMD)
                    {
                        Return (Package (0x02)
                        {
                            0x0D, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x0D, 
                            Zero
                        })
                    }
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR04) /* \_SB_.AR04 */
                    }

                    Return (PR04) /* \_SB_.PR04 */
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR05) /* \_SB_.AR05 */
                    }

                    Return (PR05) /* \_SB_.PR05 */
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR06) /* \_SB_.AR06 */
                    }

                    Return (PR06) /* \_SB_.PR06 */
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR07) /* \_SB_.AR07 */
                    }

                    Return (PR07) /* \_SB_.PR07 */
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (One)
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PR08) /* \_SB_.PR08 */
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PR0A) /* \_SB_.PR0A */
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (WKPM)
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            0x04
                        })
                    }
                    Else
                    {
                        Return (Package (0x02)
                        {
                            0x09, 
                            Zero
                        })
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PR0B) /* \_SB_.PR0B */
                }
            }

            Device (IO10)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                OperationRegion (IBUS, PCI_Config, 0xD0, 0xE0)
                Field (IBUS, DWordAcc, NoLock, Preserve)
                {
                        ,   26, 
                    TOLM,   6, 
                        ,   26, 
                    TOHM,   38, 
                    Offset (0xB0), 
                    VTEN,   1, 
                        ,   11, 
                    VTBA,   20
                }
            }

            Device (IO1X)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                OperationRegion (PBIC, PCI_Config, Zero, 0xF0)
                Field (PBIC, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x7C), 
                    SR0,    32, 
                    SR1,    32, 
                    SR2,    32, 
                    SR3,    32, 
                    SR4,    32, 
                    SR5,    32, 
                    SR6,    32, 
                    SR7,    32, 
                    SR8,    32, 
                    SR9,    32
                }
            }

            Device (IIO0)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (IBUS, PCI_Config, 0xD0, 0xE0)
                Field (IBUS, DWordAcc, NoLock, Preserve)
                {
                        ,   26, 
                    TOLM,   6, 
                        ,   26, 
                    TOHM,   38, 
                    Offset (0xB0), 
                    VTEN,   1, 
                        ,   11, 
                    VTBA,   20
                }
            }

            Device (IIOX)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                OperationRegion (PBIC, PCI_Config, Zero, 0xF0)
                Field (PBIC, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x7C), 
                    SR0,    32, 
                    SR1,    32, 
                    SR2,    32, 
                    SR3,    32, 
                    SR4,    32, 
                    SR5,    32, 
                    SR6,    32, 
                    SR7,    32, 
                    SR8,    32, 
                    SR9,    32
                }
            }

            Device (PEG3)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PR0C) /* \_SB_.PR0C */
                }
            }

            Device (PEG5)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PR0C) /* \_SB_.PR0C */
                }
            }

            Device (PEG6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
            }
        }

        Device (HAPS)
        {
            Name (_HID, "TOS620A")  // _HID: Hardware ID
            Name (HDSE, Zero)
            Name (ODDL, One)
            Name (ODDS, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((BLBM == Zero))
                {
                    ODDL = Zero
                    HDSP = Zero
                    Return (Zero)
                }

                If (NODD)
                {
                    ODDL = Zero
                }

                HDSP = RDEC (0xD5, 0x02, One)
                Local0 = Zero
                If (HDSP)
                {
                    Local0 = IHDD /* \IHDD */
                }

                Return (Local0)
            }

            Method (PTLV, 1, NotSerialized)
            {
                HDSE = Arg0
                Local0 = (Arg0 + 0x23)
                FLNK (0xFF, Local0)
            }

            Method (RSSS, 0, NotSerialized)
            {
                WREC (0xD5, One, Zero, One)
            }
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x01, 0x00000410, 0x06) {}
        Processor (CPU1, 0x02, 0x00000410, 0x06) {}
        Processor (CPU2, 0x03, 0x00000410, 0x06) {}
        Processor (CPU3, 0x04, 0x00000410, 0x06) {}
        Processor (CPU4, 0x05, 0x00000410, 0x06) {}
        Processor (CPU5, 0x06, 0x00000410, 0x06) {}
        Processor (CPU6, 0x07, 0x00000410, 0x06) {}
        Processor (CPU7, 0x08, 0x00000410, 0x06) {}
    }

    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 3, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        If ((Arg0 == 0x04))
        {
            P80D = ((P80D & Zero) | Arg1)
        }

        If ((Arg2 == Zero)) {}
        If ((Arg2 == One))
        {
            P80H = P80D /* \P80D */
        }
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80D = Zero
        P8XH (Zero, Arg0, Zero)
        SFNK (Arg0)
        If ((Arg0 == 0x03))
        {
            P8XH (0x04, 0x53, Zero)
            P8XH (0x04, 0x53, One)
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x1E)
            }
        }

        If ((Arg0 == 0x04))
        {
            P8XH (0x04, 0x54, Zero)
            P8XH (0x04, 0x54, One)
        }
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        P80D = Zero
        If (NEXP)
        {
            If ((OSCC & 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If ((OSCC & 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            WREC (0xDA, 0x03, Zero, 0x02)
            P8XH (0x04, 0xE3, Zero)
            P8XH (0x04, 0xE3, One)
            If ((OSYS > 0x07D6))
            {
                Notify (\_SB.PCI0.LPCB.PWRB, 0x02) // Device Wake
            }

            If (POFL)
            {
                POEN = One
                USBW = Zero
                POEN = Zero
                POFL = Zero
            }

            If ((Zero == ACTT)) {}
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x14)
            }

            If ((PMEE == One))
            {
                PMEN = One
            }

            If ((OSYS == 0x07D2))
            {
                If ((CFGD & One))
                {
                    If ((ACPS > Zero))
                    {
                        ACPS--
                        PNOT ()
                        ACPS++
                        PNOT ()
                    }
                    Else
                    {
                        ACPS++
                        PNOT ()
                        ACPS--
                        PNOT ()
                    }
                }
            }

            If ((RP1D == Zero))
            {
                Notify (\_SB.PCI0.RP01, Zero) // Bus Check
            }

            If ((RP2D == Zero))
            {
                Notify (\_SB.PCI0.RP02, Zero) // Bus Check
            }

            If ((RP3D == Zero))
            {
                Notify (\_SB.PCI0.RP03, Zero) // Bus Check
            }

            If ((RP4D == Zero))
            {
                Notify (\_SB.PCI0.RP04, Zero) // Bus Check
            }

            If ((RP5D == Zero))
            {
                Notify (\_SB.PCI0.RP05, Zero) // Bus Check
            }

            If ((RP7D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                }
            }

            If ((RP8D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                }
            }
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.LPCB.LREG ()
            P8XH (0x04, 0xE4, Zero)
            P8XH (0x04, 0xE4, One)
            If ((OSYS < 0x07D6))
            {
                Notify (\_SB.PCI0.LPCB.PWRB, 0x02) // Device Wake
            }
        }

        WFNK (Arg0)
        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                If ((PDC4 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU4, 0x81) // C-State Change
                }
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                If ((PDC5 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU5, 0x81) // C-State Change
                }
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                If ((PDC6 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU6, 0x81) // C-State Change
                }
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                If ((PDC7 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU7, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == TRTP))
        {
            TRP0 = Zero
        }

        If ((Arg0 == TRTD))
        {
            DTSF = Arg1
            TRPD = Zero
            Return (DTSF) /* \DTSF */
        }

        If ((Arg0 == TRTI))
        {
            TRPH = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If ((OSYS == 0x07D6))
                {
                    Acquire (MUTS, 0xFFFF)
                    OSMI (0xE4)
                    Release (MUTS)
                }

                OSY1 = OSYS /* \OSYS */
            }

            ^LPCB.LREG ()
        }

        Method (NHPG, 0, Serialized)
        {
            ^RP01.HPEX = Zero
            ^RP02.HPEX = Zero
            ^RP03.HPEX = Zero
            ^RP04.HPEX = Zero
            ^RP05.HPEX = Zero
            ^RP07.HPEX = Zero
            ^RP08.HPEX = Zero
            ^RP01.HPSX = One
            ^RP02.HPSX = One
            ^RP03.HPSX = One
            ^RP04.HPSX = One
            ^RP05.HPSX = One
            ^RP07.HPSX = One
            ^RP08.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            ^RP01.PMEX = Zero
            ^RP02.PMEX = Zero
            ^RP03.PMEX = Zero
            ^RP04.PMEX = Zero
            ^RP05.PMEX = Zero
            ^RP07.PMEX = Zero
            ^RP08.PMEX = Zero
            ^RP01.PMSX = One
            ^RP02.PMSX = One
            ^RP03.PMSX = One
            ^RP04.PMSX = One
            ^RP05.PMSX = One
            ^RP07.PMSX = One
            ^RP08.PMSX = One
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (BCMF, One)
        Name (BRLV, Package (0x0A)
        {
            0x55, 
            0x28, 
            0x0A, 
            0x14, 
            0x1E, 
            0x28, 
            0x37, 
            0x46, 
            0x55, 
            0x64
        })
        Name (BRLT, Package (0x0A)
        {
            0x55, 
            0x28, 
            0x0A, 
            0x14, 
            0x1E, 
            0x28, 
            0x37, 
            0x46, 
            0x55, 
            0x64
        })
        Name (PANL, Package (0x11)
        {
            Package (0x0A)
            {
                0x4E, 
                0x1B, 
                0x07, 
                0x0B, 
                0x12, 
                0x1B, 
                0x2A, 
                0x3A, 
                0x4E, 
                0x64
            }, 

            Package (0x0A)
            {
                0x48, 
                0x19, 
                0x08, 
                0x0C, 
                0x10, 
                0x19, 
                0x28, 
                0x37, 
                0x48, 
                0x64
            }, 

            Package (0x0A)
            {
                0x4E, 
                0x1B, 
                0x09, 
                0x0D, 
                0x12, 
                0x1B, 
                0x2B, 
                0x3B, 
                0x4E, 
                0x64
            }, 

            Package (0x0A)
            {
                0x51, 
                0x1C, 
                0x0A, 
                0x0E, 
                0x13, 
                0x1C, 
                0x2D, 
                0x3D, 
                0x51, 
                0x64
            }, 

            Package (0x0A)
            {
                0x4A, 
                0x2B, 
                0x1C, 
                0x20, 
                0x24, 
                0x2B, 
                0x36, 
                0x3F, 
                0x4A, 
                0x64
            }, 

            Package (0x0A)
            {
                0x54, 
                0x31, 
                0x1D, 
                0x23, 
                0x29, 
                0x31, 
                0x3E, 
                0x48, 
                0x54, 
                0x64
            }, 

            Package (0x0A)
            {
                0x4E, 
                0x2C, 
                0x18, 
                0x1E, 
                0x24, 
                0x2C, 
                0x37, 
                0x42, 
                0x4E, 
                0x64
            }, 

            Package (0x0A)
            {
                0x52, 
                0x2D, 
                0x19, 
                0x20, 
                0x25, 
                0x2D, 
                0x39, 
                0x44, 
                0x52, 
                0x64
            }, 

            Package (0x0A)
            {
                0x45, 
                0x17, 
                0x08, 
                0x0C, 
                0x10, 
                0x17, 
                0x26, 
                0x34, 
                0x45, 
                0x64
            }, 

            Package (0x0A)
            {
                0x47, 
                0x19, 
                0x09, 
                0x0D, 
                0x10, 
                0x19, 
                0x27, 
                0x36, 
                0x47, 
                0x64
            }, 

            Package (0x0A)
            {
                0x4E, 
                0x19, 
                0x08, 
                0x0C, 
                0x10, 
                0x19, 
                0x2A, 
                0x38, 
                0x4E, 
                0x64
            }, 

            Package (0x0A)
            {
                0x45, 
                0x18, 
                0x08, 
                0x0D, 
                0x10, 
                0x18, 
                0x26, 
                0x34, 
                0x45, 
                0x64
            }, 

            Package (0x0A)
            {
                0x49, 
                0x19, 
                0x09, 
                0x0D, 
                0x11, 
                0x19, 
                0x28, 
                0x37, 
                0x49, 
                0x64
            }, 

            Package (0x0A)
            {
                0x51, 
                0x1C, 
                0x09, 
                0x0E, 
                0x13, 
                0x1C, 
                0x2D, 
                0x3D, 
                0x51, 
                0x64
            }, 

            Package (0x0A)
            {
                0x4A, 
                0x19, 
                0x08, 
                0x0C, 
                0x10, 
                0x19, 
                0x29, 
                0x38, 
                0x4A, 
                0x64
            }, 

            Package (0x0A)
            {
                0x45, 
                0x17, 
                0x08, 
                0x0C, 
                0x10, 
                0x17, 
                0x25, 
                0x34, 
                0x45, 
                0x64
            }, 

            Package (0x0A)
            {
                0x3F, 
                0x15, 
                0x07, 
                0x0B, 
                0x0E, 
                0x15, 
                0x22, 
                0x2F, 
                0x3F, 
                0x64
            }
        })
    }

    Scope (_TZ)
    {
        PowerResource (FN00, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
            }
        }

        Device (FAN)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN00
            })
        }

        ThermalZone (THRM)
        {
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = EC9C /* \EC9C */
                If ((Local0 > 0x72))
                {
                    Return (0x0EB2)
                }

                Return ((0x0AAC + (Local0 * 0x0A)))
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling
            {
                Return (0x0D68)
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (0x0EF8)
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (0x0EF8)
            }

            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                CTYP = Arg0
            }

            Name (_AL0, Package (0x01)  // _ALx: Active List
            {
                FAN
            })
            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                If ((TCNT == 0x08))
                {
                    Return (Package (0x08)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3, 
                        \_PR.CPU4, 
                        \_PR.CPU5, 
                        \_PR.CPU6, 
                        \_PR.CPU7
                    })
                }

                If ((TCNT == 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3
                    })
                }

                If ((TCNT == 0x02))
                {
                    Return (Package (0x02)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1
                    })
                }

                Return (Package (0x01)
                {
                    \_PR.CPU0
                })
            }

            Name (_TC1, 0x02)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x05)  // _TC2: Thermal Constant 2
            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y10)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y12)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y13)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y14)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y15)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    _Y16)
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y11)
                Memory32Fixed (ReadOnly,
                    0xFF800000,         // Address Base
                    0x00800000,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y10._BAS, RBR0)  // _BAS: Base Address
                RBR0 = (^^LPCB.RCBA << 0x0E)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._BAS, TBR0)  // _BAS: Base Address
                TBR0 = TBAB /* \TBAB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._LEN, TBLN)  // _LEN: Length
                If ((TBAB == Zero))
                {
                    TBLN = Zero
                }

                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._LEN, MBLN)  // _LEN: Length
                    MBLN = Zero
                }
                Else
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, MBR0)  // _BAS: Base Address
                    MBR0 = (MHBR << 0x0E)
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._BAS, DBR0)  // _BAS: Base Address
                DBR0 = (DIBR << 0x0C)
                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    DBR0 = (DIBI << 0x0C)
                }

                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._LEN, EBLN)  // _LEN: Length
                    EBLN = Zero
                }
                Else
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._BAS, EBR0)  // _BAS: Base Address
                    EBR0 = (EPBR << 0x0C)
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._BAS, XBR0)  // _BAS: Base Address
                XBR0 = (^^^CPBG.IMCH.PXBR << 0x14)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._LEN, XSZ0)  // _LEN: Length
                XSZ0 = (0x10000000 >> ^^^CPBG.IMCH.PXSZ) /* \_SB_.CPBG.IMCH.PXSZ */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y16._BAS, VTB0)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y16._LEN, VTLN)  // _LEN: Length
                If ((((PNHM & 0x000FFFF0) == 0x000106E0) | ((PNHM & 0x000FFFF0
                    ) == 0x000106A0)))
                {
                    If ((PNHM >= 0x000106E1))
                    {
                        If (^^IO10.VTEN)
                        {
                            VTB0 = (^^IO10.VTBA << 0x0C)
                        }
                        Else
                        {
                            VTLN = Zero
                        }
                    }
                    Else
                    {
                        If (^^IIO0.VTEN)
                        {
                            VTB0 = (^^IIO0.VTBA << 0x0C)
                        }
                        Else
                        {
                            VTLN = Zero
                        }
                    }
                }
                Else
                {
                    If (ADVE)
                    {
                        VTB0 = (ADVT << 0x0C)
                    }
                    Else
                    {
                        VTLN = Zero
                    }
                }

                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Scope (\)
    {
        OperationRegion (IO_T, SystemIO, 0x0800, 0x10)
        Field (IO_T, ByteAcc, NoLock, Preserve)
        {
            TRPI,   16, 
            Offset (0x04), 
            Offset (0x06), 
            Offset (0x08), 
            TRP0,   8, 
            Offset (0x0A), 
            Offset (0x0B), 
            Offset (0x0C), 
            Offset (0x0D), 
            Offset (0x0E), 
            Offset (0x0F), 
            Offset (0x10)
        }

        OperationRegion (IO_D, SystemIO, 0x0810, 0x04)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x20), 
                ,   2, 
            SPST,   1, 
            Offset (0x28), 
                ,   11, 
            PMEN,   1, 
            Offset (0x3C), 
                ,   1, 
            POEN,   1, 
            Offset (0x42), 
                ,   1, 
            GPEC,   1, 
            Offset (0x64), 
                ,   9, 
            SCIS,   1, 
            Offset (0x66)
        }

        OperationRegion (GPIO, SystemIO, GPBS, 0x64)
        Field (GPIO, ByteAcc, NoLock, Preserve)
        {
            GU00,   8, 
            GU01,   8, 
            GU02,   8, 
            GU03,   8, 
            GIO0,   8, 
            GIO1,   8, 
            GIO2,   8, 
            GIO3,   8, 
            Offset (0x0C), 
            GL00,   8, 
            GL01,   8, 
            KBLO,   1, 
            TGON,   1, 
                ,   3, 
            GP21,   1, 
            Offset (0x0F), 
                ,   3, 
            GP27,   1, 
            GP28,   1, 
            Offset (0x10), 
            Offset (0x18), 
            GB00,   8, 
            GB01,   8, 
            GB02,   8, 
            GB03,   8, 
            Offset (0x2C), 
            GIV0,   8, 
            GIV1,   8, 
            GIV2,   8, 
            GIV3,   8, 
            GU04,   8, 
            GU05,   8, 
            GU06,   8, 
            GU07,   8, 
            GIO4,   8, 
            GIO5,   8, 
            GIO6,   8, 
            GIO7,   8, 
                ,   5, 
                ,   1, 
            Offset (0x39), 
            GL05,   8, 
            BTRS,   1, 
                ,   4, 
            BTIO,   1, 
            Offset (0x3B), 
            KBLX,   1, 
                ,   2, 
            GP59,   1, 
            Offset (0x3C), 
            Offset (0x40), 
            GU08,   8, 
            GU09,   8, 
            GU0A,   8, 
            GU0B,   8, 
            GIO8,   8, 
            GIO9,   8, 
            GIOA,   8, 
            GIOB,   8, 
            GL08,   8, 
            GL09,   8, 
            GL0A,   8, 
            GL0B,   8
        }

        OperationRegion (RCRB, SystemMemory, SRCB, 0x4000)
        Field (RCRB, DWordAcc, Lock, Preserve)
        {
            Offset (0x1000), 
            Offset (0x3000), 
            Offset (0x3404), 
            HPAS,   2, 
                ,   5, 
            HPAE,   1, 
            Offset (0x3418), 
                ,   1, 
                ,   1, 
            SATD,   1, 
            SMBD,   1, 
            HDAD,   1, 
            Offset (0x341A), 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1, 
            RP7D,   1, 
            RP8D,   1, 
            Offset (0x3518), 
            USBW,   3
        }

        Method (GPI0, 4, NotSerialized)
        {
            If (((Arg0 | Arg1) == Zero))
            {
                Return (0xFFFFFFFF)
            }
            Else
            {
                If (((Arg0 == Zero) & (Arg1 == One)))
                {
                    Return (0x0384)
                }
            }

            Return ((0x1E * (0x09 - (Arg2 + Arg3))))
        }

        Method (GDMA, 2, NotSerialized)
        {
            If ((Arg0 == One))
            {
                If ((Arg1 == One))
                {
                    Return (0x0F)
                }
            }

            Return (0xFFFFFFFF)
        }

        Method (SFLG, 5, NotSerialized)
        {
            Local0 = Zero
            Local0 |= Arg1
            Local0 |= (Arg0 << One)
            Local0 |= (Arg2 << 0x03)
            Local0 |= (Arg3 << 0x02)
            Local0 |= (Arg4 << 0x04)
            Return (Local0)
        }

        Method (SPIO, 3, NotSerialized)
        {
            Name (PBUF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
            })
            CreateByteField (PBUF, Zero, RCT)
            CreateByteField (PBUF, One, ISP)
            CreateByteField (PBUF, 0x02, FAST)
            CreateByteField (PBUF, 0x03, DMAE)
            CreateByteField (PBUF, 0x04, PIOT)
            If (((Arg0 == Zero) || (Arg0 == 0xFFFFFFFF)))
            {
                Return (PBUF) /* \SPIO.PBUF */
            }

            If ((Arg0 > 0xF0))
            {
                DMAE = One
                PIOT = Zero
            }
            Else
            {
                FAST = One
                If ((Arg1 & 0x02))
                {
                    If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                    {
                        RCT = 0x03
                        ISP = 0x02
                        PIOT = 0x04
                        Return (PBUF) /* \SPIO.PBUF */
                    }

                    If (((Arg0 <= 0xB4) & (Arg2 & One)))
                    {
                        RCT = One
                        ISP = 0x02
                        PIOT = 0x03
                        Return (PBUF) /* \SPIO.PBUF */
                    }
                    Else
                    {
                        RCT = Zero
                        ISP = One
                        PIOT = 0x02
                    }
                }
            }

            Return (PBUF) /* \SPIO.PBUF */
        }

        Method (SDMA, 3, NotSerialized)
        {
            Name (PBUF, Buffer (0x05)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            CreateByteField (PBUF, Zero, PCT)
            CreateByteField (PBUF, One, PCB)
            CreateByteField (PBUF, 0x02, UDMT)
            CreateByteField (PBUF, 0x03, UDME)
            CreateByteField (PBUF, 0x04, DMAT)
            If (((Arg0 == Zero) || (Arg0 == 0xFFFFFFFF)))
            {
                Return (PBUF) /* \SDMA.PBUF */
            }

            If ((Arg0 <= 0x78))
            {
                If ((Arg1 & 0x04))
                {
                    UDME = One
                    If (((Arg0 <= 0x0F) & (Arg2 & 0x40)))
                    {
                        UDMT = One
                        PCB = One
                        PCT = One
                        DMAT = 0x06
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x14) & (Arg2 & 0x20)))
                    {
                        UDMT = One
                        PCB = One
                        PCT = One
                        DMAT = 0x05
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                    {
                        PCB = One
                        PCT = 0x02
                        DMAT = 0x04
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                    {
                        PCB = One
                        PCT = One
                        DMAT = 0x03
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                    {
                        PCT = 0x02
                        DMAT = 0x02
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                    {
                        PCT = One
                        DMAT = One
                        Return (PBUF) /* \SDMA.PBUF */
                    }

                    If (((Arg0 <= 0x78) & (Arg2 & One)))
                    {
                        DMAT = Zero
                    }
                }
            }

            Return (PBUF) /* \SDMA.PBUF */
        }

        Method (SETT, 3, Serialized)
        {
            If ((Arg1 & 0x02))
            {
                If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                {
                    Return (0x0B)
                }

                If (((Arg0 <= 0xB4) && (Arg2 & One)))
                {
                    Return (0x09)
                }
            }

            Return (0x04)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SBUS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
            Field (SMBP, DWordAcc, NoLock, Preserve)
            {
                    ,   2, 
                I2CE,   1
            }

            OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
            Field (SMPB, DWordAcc, NoLock, Preserve)
            {
                    ,   5, 
                SBAR,   11
            }

            OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCON,   8, 
                HCOM,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8, 
                PECR,   8, 
                RXSA,   8, 
                SDAT,   16
            }

            Method (SSXB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRXB, 1, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCON = 0x44
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRB, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = Arg2
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRW, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT1 = (Arg2 & 0xFF)
                DAT0 = ((Arg2 >> 0x08) & 0xFF)
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDW, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (((DAT0 << 0x08) | DAT1))
                }

                Return (0xFFFFFFFF)
            }

            Method (SBLW, 4, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg3
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Index (Arg2, Zero))
                HCON = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Index (Arg2, Local1))
                    }
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SBLR, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100) {})
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg2
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                Index (TBUF, Zero) = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (Index (TBUF, Zero))))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    Index (TBUF, Local1) = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                }

                Return (Zero)
            }

            Method (STRT, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Local0--
                        Sleep (One)
                        If ((Local0 == Zero))
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (COMP, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (KILL, 0, Serialized)
            {
                HCON |= 0x02
                HSTS |= 0xFF
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            L01C += One
            If (((RP5D == Zero) && \_SB.PCI0.RP05.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP05.PDCX)
                {
                    \_SB.PCI0.RP05.PDCX = One
                    \_SB.PCI0.RP05.HPSX = One
                    Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP05.HPSX = One
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            GPEC = Zero
            If (CondRefOf (\_SB.PCI0.IEIT.EITV))
            {
                \_SB.PCI0.IEIT.EITV ()
            }

            If (CondRefOf (TNOT))
            {
                TNOT ()
            }
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L15, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L1D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.P0P2, 0x02) // Device Wake
            Notify (\_SB.PCI0.P0P2.PEGP, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG3, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG5, 0x02) // Device Wake
            Notify (\_SB.PCI0.PEG6, 0x02) // Device Wake
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
        }

        Method (_L03, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L0C, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L0E, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L20, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L25, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
        }

        Method (_L17, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            \_SB.PCI0.LPCB.ECLV ()
        }

        Method (_L13, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If ((BLBM != Zero))
            {
                If ((HDSP == 0x0F))
                {
                    HDSP = RDEC (0xD5, 0x02, One)
                }

                If (HDSP)
                {
                    If ((\_SB.HAPS.ODDL != Zero))
                    {
                        If (((GL00 & 0x08) != Zero))
                        {
                            Local0 = (GIV0 | 0x08)
                            GIV0 = Local0
                            If ((\_SB.HAPS.ODDS == Zero))
                            {
                                \_SB.HAPS.ODDS = One
                                If ((OSYS < 0x07D6))
                                {
                                    If ((EJLL == Zero))
                                    {
                                        EJLL = 0x59
                                        \_SB.PCI0.LPCB.ILEV (0x60)
                                    }
                                }
                                Else
                                {
                                    \_SB.PCI0.LPCB.INEV (0x1ABE)
                                }
                            }
                        }
                        Else
                        {
                            Local0 = (GIV0 & 0xF7)
                            GIV0 = Local0
                            If ((\_SB.HAPS.ODDS == One))
                            {
                                \_SB.HAPS.ODDS = Zero
                                If ((OSYS < 0x07D6))
                                {
                                    If (((EJLL == 0x59) || (EJLL == 0x5B)))
                                    {
                                        EJLR = 0x5A
                                        \_SB.PCI0.LPCB.ILEV (0x60)
                                    }
                                }
                                Else
                                {
                                    \_SB.PCI0.LPCB.INEV (0x1ABF)
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    OperationRegion (PBIC, PCI_Config, Zero, 0xF0)
    Field (PBIC, DWordAcc, NoLock, Preserve)
    {
        Offset (0x7C), 
        SR0,    32, 
        SR1,    32, 
        SR2,    32, 
        SR3,    32, 
        SR4,    32, 
        SR5,    32, 
        SR6,    32, 
        SR7,    32, 
        SR8,    32, 
        SR9,    32
    }

    OperationRegion (IBUS, PCI_Config, 0xD0, 0xE0)
    Field (IBUS, DWordAcc, NoLock, Preserve)
    {
            ,   26, 
        TOLM,   6, 
            ,   26, 
        TOHM,   38, 
        Offset (0xB0), 
        VTEN,   1, 
            ,   11, 
        VTBA,   20
    }

    Scope (_SB)
    {
        Device (CPBG)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0xFF)  // _UID: Unique ID
            Name (_BBN, 0x3F)  // _BBN: BIOS Bus Number
            Name (_ADR, Zero)  // _ADR: Address
            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x003F,             // Range Minimum
                    0x003F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, _Y17)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.CPBG._Y17._MIN, PBMN)  // _MIN: Minimum Base Address
                PBMN = ((PELN >> 0x14) - One)
                CreateWordField (BUF0, \_SB.CPBG._Y17._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((PELN >> 0x14) - One)
                Return (BUF0) /* \_SB_.CPBG.BUF0 */
            }

            Device (IMCH)
            {
                Name (_ADR, One)  // _ADR: Address
                OperationRegion (PBUS, PCI_Config, Zero, 0xC0)
                Field (PBUS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                        ,   4, 
                    PM0H,   2, 
                    Offset (0x41), 
                    PM1L,   2, 
                        ,   2, 
                    PM1H,   2, 
                    Offset (0x42), 
                    PM2L,   2, 
                        ,   2, 
                    PM2H,   2, 
                    Offset (0x43), 
                    PM3L,   2, 
                        ,   2, 
                    PM3H,   2, 
                    Offset (0x44), 
                    PM4L,   2, 
                        ,   2, 
                    PM4H,   2, 
                    Offset (0x45), 
                    PM5L,   2, 
                        ,   2, 
                    PM5H,   2, 
                    Offset (0x46), 
                    PM6L,   2, 
                        ,   2, 
                    PM6H,   2, 
                    Offset (0x47), 
                    Offset (0x48), 
                        ,   7, 
                    HENA,   1, 
                    Offset (0x50), 
                    PXEN,   1, 
                    PXSZ,   2, 
                        ,   17, 
                    PXBR,   12
                }
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If ((S3DS == One))
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 37
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]                 FACS Address : 7B76E000
[028h 0040   4]                 DSDT Address : 7B7EE000
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 80
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000450
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 85
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 0039
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000384A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 00 [SystemMemory]
[075h 0117   1]                    Bit Width : 00
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 000000007B76E000
[08Ch 0140   8]                 DSDT Address : 000000007B7EE000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 00 [SystemMemory]
[095h 0149   1]                    Bit Width : 00
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000000

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 00 [SystemMemory]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 00 [SystemMemory]
[0ADh 0173   1]                    Bit Width : 00
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000000

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 00 [SystemMemory]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 00 [SystemMemory]
[0C5h 0197   1]                    Bit Width : 00
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 00 [SystemMemory]
[0D1h 0209   1]                    Bit Width : 00
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000000

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 00 [SystemMemory]
[0DDh 0221   1]                    Bit Width : 00
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000000

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 00 [SystemMemory]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

  0000: 46 41 43 50 F4 00 00 00 04 37 54 4F 53 49 4E 56  // FACP.....7TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 4D 53 46 54  // TOSINV00....MSFT
  0020: 13 00 00 01 00 E0 76 7B 00 E0 7E 7B 01 02 09 00  // ......v{..~{....
  0030: B2 00 00 00 A0 A1 00 80 00 04 00 00 00 00 00 00  // ................
  0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
  0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 00 85  //  ...............
  0060: 65 00 39 00 00 04 10 00 01 03 0D 00 32 13 00 00  // e.9.........2...
  0070: A5 84 03 00 00 00 00 00 F9 0C 00 00 00 00 00 00  // ................
  0080: 06 00 00 00 00 E0 76 7B 00 00 00 00 00 E0 7E 7B  // ......v{......~{
  0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00B0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 2A
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 2A 54 4F 53 49 4E 56  // HPET8....*TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 4D 53 46 54  // TOSINV00....MSFT
  0020: 13 00 00 01 01 A2 86 80 00 00 00 00 00 00 D0 FE  // ................
  0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 02
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 02 54 4F 53 49 4E 56  // MCFG<.....TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 4D 53 46 54  // TOSINV00....MSFT
  0020: 13 00 00 01 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
  0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : 76
[009h 0009   6]                       Oem ID : "TOSINV"
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : 7B7FE0AC
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 000000007B7FE120
[020h 0032   1]            Extended Checksum : E1
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 76 54 4F 53 49 4E 56 02  // RSD PTR vTOSINV.
  0010: AC E0 7F 7B 24 00 00 00 20 E1 7F 7B 00 00 00 00  // ...{$... ..{....
  0020: E1 00 00 00                                      // ....


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000050
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : EF
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]       ACPI Table Address   0 : 7B7FC000
[028h 0040   4]       ACPI Table Address   1 : 7B7FD000
[02Ch 0044   4]       ACPI Table Address   2 : 7B7FB000
[030h 0048   4]       ACPI Table Address   3 : 7B7FA000
[034h 0052   4]       ACPI Table Address   4 : 7B7F9000
[038h 0056   4]       ACPI Table Address   5 : 7B7ED000
[03Ch 0060   4]       ACPI Table Address   6 : 7B7EA000
[040h 0064   4]       ACPI Table Address   7 : 7B7E7000
[044h 0068   4]       ACPI Table Address   8 : 7B7E5000
[048h 0072   4]       ACPI Table Address   9 : 7B7E4000
[04Ch 0076   4]       ACPI Table Address  10 : 7B7E3000

Raw Table Data: Length 80 (0x50)

  0000: 52 53 44 54 50 00 00 00 01 EF 54 4F 53 49 4E 56  // RSDTP.....TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 20 20 20 20  // TOSINV00....    
  0020: 13 00 00 01 00 C0 7F 7B 00 D0 7F 7B 00 B0 7F 7B  // .......{...{...{
  0030: 00 A0 7F 7B 00 90 7F 7B 00 D0 7E 7B 00 A0 7E 7B  // ...{...{..~{..~{
  0040: 00 70 7E 7B 00 50 7E 7B 00 40 7E 7B 00 30 7E 7B  // .p~{.P~{.@~{.0~{


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D2
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 01 D1 F8 E2 \
    2E 9E 56 65 20 B2 3C D6 8C A8 AB EE E9 1D D7 45 \
    EB 6B 72 AD 45 B9 29 86 AE AA 8C 53 39 F4 25 BE \
    B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60 A0 72 47 E6 \
    F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC 1A 6E AF D4 \
    7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90 F5 B0 34 F2 \
    03 C2 9A 7D DD E7 52 4C E8 63 04 6B 00 A7 B5 AB \
    C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A 56 9B D7 45 \
    81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5 01 00 00 00 \
    B6 00 00 00 00 00 02 00 54 4F 53 49 4E 56 54 4F \
    53 49 4E 56 30 30 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 A0 C3 64 30 F3 3B BF 3D 6E C4 7A F1 66 D8 \
    33 89 77 3C D4 04 A2 AF 4A D4 AB 12 8D E3 6A D7 \
    0D 6D 53 C4 79 13 EB B6 20 D1 A3 16 7B 08 B7 C5 \
    E0 C2 C8 6A 3F 7B 58 69 31 0C 97 49 C3 92 72 42 \
    C4 0C DC 2D BA F4 38 60 4C 3D D0 D2 20 9E 4C 5C \
    3A E6 8B 15 3D 95 D2 3E 4E F7 AE 5F 34 B5 28 05 \
    97 A9 21 DF 51 58 F9 57 9C DF 99 E9 92 2C 7C CA \
    63 D0 1D 62 F7 8C 8D 7A 1E 8D 9F 18 30 B0 45 0D \
    F9 FA 

Raw Table Data: Length 374 (0x176)

  0000: 53 4C 49 43 76 01 00 00 01 D2 54 4F 53 49 4E 56  // SLICv.....TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 4D 53 46 54  // TOSINV00....MSFT
  0020: 13 00 00 01 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
  0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
  0040: 01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE  // ......Ve .<.....
  0050: E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53  // ...E.kr.E.)....S
  0060: 39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60  // 9.%............`
  0070: A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC  // .rG....?`.......
  0080: 1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90  // .n..}.._ZQ.h..=.
  0090: F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B  // ..4....}..RL.c.k
  00A0: 00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A  // .....o5.z...O).j
  00B0: 56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5  // V..E..7..K.S[<..
  00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 49  // ............TOSI
  00D0: 4E 56 54 4F 53 49 4E 56 30 30 57 49 4E 44 4F 57  // NVTOSINV00WINDOW
  00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
  00F0: 00 00 00 00 00 00 A0 C3 64 30 F3 3B BF 3D 6E C4  // ........d0.;.=n.
  0100: 7A F1 66 D8 33 89 77 3C D4 04 A2 AF 4A D4 AB 12  // z.f.3.w<....J...
  0110: 8D E3 6A D7 0D 6D 53 C4 79 13 EB B6 20 D1 A3 16  // ..j..mS.y... ...
  0120: 7B 08 B7 C5 E0 C2 C8 6A 3F 7B 58 69 31 0C 97 49  // {......j?{Xi1..I
  0130: C3 92 72 42 C4 0C DC 2D BA F4 38 60 4C 3D D0 D2  // ..rB...-..8`L=..
  0140: 20 9E 4C 5C 3A E6 8B 15 3D 95 D2 3E 4E F7 AE 5F  //  .L\:...=..>N.._
  0150: 34 B5 28 05 97 A9 21 DF 51 58 F9 57 9C DF 99 E9  // 4.(...!.QX.W....
  0160: 92 2C 7C CA 63 D0 1D 62 F7 8C 8D 7A 1E 8D 9F 18  // .,|.c..b...z....
  0170: 30 B0 45 0D F9 FA                                // 0.E...


SSDT1
-----
DefinitionBlock ("ssdt1.aml", "SSDT", 1, "INTEL ", "SataAhci", 0x00001000)
{

    External (_SB_.PCI0, DeviceObj)

    Scope (\_SB.PCI0)
    {
        Device (AHCI)
        {
            OperationRegion (SATI, PCI_Config, Zero, 0x0100)
            Field (SATI, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                DID1,   8, 
                DID2,   8, 
                Offset (0x08), 
                RID1,   8, 
                Offset (0x92), 
                    ,   4, 
                P4EN,   1, 
                P5EN,   1
            }

            Name (_ADR, 0x001F0002)  // _ADR: Address
            Name (GTF0, Buffer (0x38)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
            })
            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
            }

            Device (CHA4)
            {
                Name (_ADR, 0x04)  // _ADR: Address
                Device (ESTA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (One)
                    }
                }
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("ssdt2.aml", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x7B691918, 
            0x000003E8, 
            "APIST   ", 
            0x7B690A98, 
            0x00000303, 
            "CPU0CST ", 
            0x7B68F698, 
            0x00000633, 
            "APCST   ", 
            0x7B68ED98, 
            0x00000119
        })
        Name (CFGD, 0x012B0653)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & One))
            {
                If ((((CFGD & 0x01000002) && ((PDC0 & 0x09) == 
                    0x09)) && !(SDTL & One)))
                {
                    SDTL |= One
                    OperationRegion (IST0, SystemMemory, DerefOf (Index (SSDT, One)), DerefOf (Index (SSDT, 0x02)))
                    Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
                }
            }

            If ((CFGD & 0xF0))
            {
                If ((((CFGD & 0x01000002) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (Index (SSDT, 0x07)), DerefOf (Index (SSDT, 0x08)))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC0 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC0 & 0x18))
            {
                APCT ()
            }

            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0xF0) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (Index (SSDT, 0x0A)), DerefOf (Index (SSDT, 0x0B)))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (Index (SSDT, 0x04)), DerefOf (Index (SSDT, 0x05)))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & One))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & One))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & One))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & One))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }
}



SSDT3
-----
DefinitionBlock ("ssdt3.aml", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{

    External (_PR_.CPU0, DeviceObj)
    External (ACPS, IntObj)
    External (CFGD, UnknownObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)
    External (TCNT, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (ACPS) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000800, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & One))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x0B)
        {
            Package (0x06)
            {
                0x000008DA, 
                0x000061A8, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x00005ACA, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000007CF, 
                0x00005426, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x0000074A, 
                0x00004DA3, 
                0x0000006E, 
                0x0000000A, 
                0x00000383, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x0000472D, 
                0x0000006E, 
                0x0000000A, 
                0x00000483, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x0000063F, 
                0x000040EC, 
                0x0000006E, 
                0x0000000A, 
                0x00000583, 
                0x00000005
            }, 

            Package (0x06)
            {
                0x000005BA, 
                0x00003AE3, 
                0x0000006E, 
                0x0000000A, 
                0x00000683, 
                0x00000006
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x000034E2, 
                0x0000006E, 
                0x0000000A, 
                0x00000783, 
                0x00000007
            }, 

            Package (0x06)
            {
                0x000004AF, 
                0x00002F0F, 
                0x0000006E, 
                0x0000000A, 
                0x00000883, 
                0x00000008
            }, 

            Package (0x06)
            {
                0x0000042A, 
                0x0000294F, 
                0x0000006E, 
                0x0000000A, 
                0x00000983, 
                0x00000009
            }, 

            Package (0x06)
            {
                0x000003A5, 
                0x000023AE, 
                0x0000006E, 
                0x0000000A, 
                0x00000A83, 
                0x0000000A
            }
        })
        Name (_PSS, Package (0x0B)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000008DA, 
                0x000061A8, 
                0x0000000A, 
                0x0000000A, 
                0x00000011, 
                0x00000011
            }, 

            Package (0x06)
            {
                0x00000855, 
                0x00005ACA, 
                0x0000000A, 
                0x0000000A, 
                0x00000010, 
                0x00000010
            }, 

            Package (0x06)
            {
                0x000007CF, 
                0x00005426, 
                0x0000000A, 
                0x0000000A, 
                0x0000000F, 
                0x0000000F
            }, 

            Package (0x06)
            {
                0x0000074A, 
                0x00004DA3, 
                0x0000000A, 
                0x0000000A, 
                0x0000000E, 
                0x0000000E
            }, 

            Package (0x06)
            {
                0x000006C5, 
                0x0000472D, 
                0x0000000A, 
                0x0000000A, 
                0x0000000D, 
                0x0000000D
            }, 

            Package (0x06)
            {
                0x0000063F, 
                0x000040EC, 
                0x0000000A, 
                0x0000000A, 
                0x0000000C, 
                0x0000000C
            }, 

            Package (0x06)
            {
                0x000005BA, 
                0x00003AE3, 
                0x0000000A, 
                0x0000000A, 
                0x0000000B, 
                0x0000000B
            }, 

            Package (0x06)
            {
                0x00000535, 
                0x000034E2, 
                0x0000000A, 
                0x0000000A, 
                0x0000000A, 
                0x0000000A
            }, 

            Package (0x06)
            {
                0x000004AF, 
                0x00002F0F, 
                0x0000000A, 
                0x0000000A, 
                0x00000009, 
                0x00000009
            }, 

            Package (0x06)
            {
                0x0000042A, 
                0x0000294F, 
                0x0000000A, 
                0x0000000A, 
                0x00000008, 
                0x00000008
            }, 

            Package (0x06)
            {
                0x000003A5, 
                0x000023AE, 
                0x0000000A, 
                0x0000000A, 
                0x00000007, 
                0x00000007
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((PDC0 & 0x0800))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFE, 
                        TCNT
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    TCNT
                }
            })
        }
    }
}



SSDT4
-----
DefinitionBlock ("ssdt4.aml", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{

    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (((CFGD & 0x00200000) && (PDC0 & 0x0200)))
            {
                If ((CFGD & 0x20000000))
                {
                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000010, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000030, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x03, 
                                0xF5, 
                                0xC8
                            }
                        })
                    }

                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000030, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0xF5, 
                            0xC8
                        }
                    })
                }

                If ((CFGD & 0x0200))
                {
                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000010, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000020, // Address
                                        0x03,               // Access Size
                                        )
                                }, 

                                0x03, 
                                0xF5, 
                                0x015E
                            }
                        })
                    }

                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000020, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x03, 
                            0xF5, 
                            0x015E
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000010, // Address
                                    0x03,               // Access Size
                                    )
                            }, 

                            0x02, 
                            0xCD, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            If (((CFGD & 0x00200000) && (PDC0 & 0x0100)))
            {
                If ((CFGD & 0x20000000))
                {
                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000414, // Address
                                        ,)
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000416, // Address
                                        ,)
                                }, 

                                0x03, 
                                0xF5, 
                                0xC8
                            }
                        })
                    }

                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000416, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xF5, 
                            0xC8
                        }
                    })
                }

                If ((CFGD & 0x0200))
                {
                    If ((CFGD & 0x40))
                    {
                        Return (Package (0x04)
                        {
                            0x03, 
                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (FFixedHW, 
                                        0x01,               // Bit Width
                                        0x02,               // Bit Offset
                                        0x0000000000000000, // Address
                                        0x01,               // Access Size
                                        )
                                }, 

                                One, 
                                0x03, 
                                0x03E8
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000414, // Address
                                        ,)
                                }, 

                                0x02, 
                                0xCD, 
                                0x01F4
                            }, 

                            Package (0x04)
                            {
                                ResourceTemplate ()
                                {
                                    Register (SystemIO, 
                                        0x08,               // Bit Width
                                        0x00,               // Bit Offset
                                        0x0000000000000415, // Address
                                        ,)
                                }, 

                                0x03, 
                                0xF5, 
                                0x015E
                            }
                        })
                    }

                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000415, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xF5, 
                            0x015E
                        }
                    })
                }

                If ((CFGD & 0x40))
                {
                    Return (Package (0x03)
                    {
                        0x02, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x01,               // Bit Width
                                    0x02,               // Bit Offset
                                    0x0000000000000000, // Address
                                    0x01,               // Access Size
                                    )
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0xCD, 
                            0x01F4
                        }
                    })
                }

                Return (Package (0x02)
                {
                    One, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000000, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }
                })
            }

            If ((CFGD & 0x20000000))
            {
                If ((CFGD & 0x40))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0xCD, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000416, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xF5, 
                            0xC8
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000416, // Address
                                ,)
                        }, 

                        0x03, 
                        0xF5, 
                        0xC8
                    }
                })
            }

            If ((CFGD & 0x0200))
            {
                If ((CFGD & 0x40))
                {
                    Return (Package (0x04)
                    {
                        0x03, 
                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (FFixedHW, 
                                    0x00,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000000, // Address
                                    ,)
                            }, 

                            One, 
                            0x03, 
                            0x03E8
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000414, // Address
                                    ,)
                            }, 

                            0x02, 
                            0xCD, 
                            0x01F4
                        }, 

                        Package (0x04)
                        {
                            ResourceTemplate ()
                            {
                                Register (SystemIO, 
                                    0x08,               // Bit Width
                                    0x00,               // Bit Offset
                                    0x0000000000000415, // Address
                                    ,)
                            }, 

                            0x03, 
                            0xF5, 
                            0x015E
                        }
                    })
                }

                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000415, // Address
                                ,)
                        }, 

                        0x03, 
                        0xF5, 
                        0x015E
                    }
                })
            }

            If ((CFGD & 0x40))
            {
                Return (Package (0x03)
                {
                    0x02, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        0x03, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000414, // Address
                                ,)
                        }, 

                        0x02, 
                        0xCD, 
                        0x01F4
                    }
                })
            }

            Return (Package (0x02)
            {
                One, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    One, 
                    0x03, 
                    0x03E8
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("ssdt5.aml", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{

    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSD, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }
}



SSDT6
-----
DefinitionBlock ("ssdt6.aml", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{

    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



WDAT
----
[000h 0000   4]                    Signature : "WDAT"    [Watchdog Action Table]
[004h 0004   4]                 Table Length : 00000224
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : AE
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "Calpella"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]                Header Length : 00000020
[028h 0040   2]                  PCI Segment : 00FF
[02Ah 0042   1]                      PCI Bus : FF
[02Bh 0043   1]                   PCI Device : FF
[02Ch 0044   1]                 PCI Function : FF
[02Dh 0045   3]                     Reserved : 000000
[030h 0048   4]                 Timer Period : 00000258
[034h 0052   4]                    Max Count : 000003FF
[038h 0056   4]                    Min Count : 00000002
[03Ch 0060   1]        Flags (decoded below) : 81
                                     Enabled : 1
                         Stopped When Asleep : 1
[03Dh 0061   3]                     Reserved : 000000
[040h 0064   4]         Watchdog Entry Count : 00000014

[044h 0068   1]              Watchdog Action : 01
[045h 0069   1]                  Instruction : 02
[046h 0070   2]                     Reserved : 0000

[048h 0072  12]              Register Region : [Generic Address Structure]
[048h 0072   1]                     Space ID : 01 [SystemIO]
[049h 0073   1]                    Bit Width : 10
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 02 [Word Access:16]
[04Ch 0076   8]                      Address : 0000000000000460

[054h 0084   4]                        Value : 00000000
[058h 0088   4]                Register Mask : 000003FF

[05Ch 0092   1]              Watchdog Action : 04
[05Dh 0093   1]                  Instruction : 01
[05Eh 0094   2]                     Reserved : 0000

[060h 0096  12]              Register Region : [Generic Address Structure]
[060h 0096   1]                     Space ID : 01 [SystemIO]
[061h 0097   1]                    Bit Width : 10
[062h 0098   1]                   Bit Offset : 00
[063h 0099   1]         Encoded Access Width : 02 [Word Access:16]
[064h 0100   8]                      Address : 0000000000000460

[06Ch 0108   4]                        Value : 00000000
[070h 0112   4]                Register Mask : 000003FF

[074h 0116   1]              Watchdog Action : 05
[075h 0117   1]                  Instruction : 01
[076h 0118   2]                     Reserved : 0000

[078h 0120  12]              Register Region : [Generic Address Structure]
[078h 0120   1]                     Space ID : 01 [SystemIO]
[079h 0121   1]                    Bit Width : 10
[07Ah 0122   1]                   Bit Offset : 00
[07Bh 0123   1]         Encoded Access Width : 02 [Word Access:16]
[07Ch 0124   8]                      Address : 0000000000000472

[084h 0132   4]                        Value : 00000000
[088h 0136   4]                Register Mask : 000003FF

[08Ch 0140   1]              Watchdog Action : 06
[08Dh 0141   1]                  Instruction : 83
[08Eh 0142   2]                     Reserved : 0000

[090h 0144  12]              Register Region : [Generic Address Structure]
[090h 0144   1]                     Space ID : 01 [SystemIO]
[091h 0145   1]                    Bit Width : 10
[092h 0146   1]                   Bit Offset : 00
[093h 0147   1]         Encoded Access Width : 02 [Word Access:16]
[094h 0148   8]                      Address : 0000000000000472

[09Ch 0156   4]                        Value : 00000000
[0A0h 0160   4]                Register Mask : 000003FF

[0A4h 0164   1]              Watchdog Action : 08
[0A5h 0165   1]                  Instruction : 00
[0A6h 0166   2]                     Reserved : 0000

[0A8h 0168  12]              Register Region : [Generic Address Structure]
[0A8h 0168   1]                     Space ID : 01 [SystemIO]
[0A9h 0169   1]                    Bit Width : 10
[0AAh 0170   1]                   Bit Offset : 0B
[0ABh 0171   1]         Encoded Access Width : 02 [Word Access:16]
[0ACh 0172   8]                      Address : 0000000000000468

[0B4h 0180   4]                        Value : 00000000
[0B8h 0184   4]                Register Mask : 00000001

[0BCh 0188   1]              Watchdog Action : 09
[0BDh 0189   1]                  Instruction : 82
[0BEh 0190   2]                     Reserved : 0000

[0C0h 0192  12]              Register Region : [Generic Address Structure]
[0C0h 0192   1]                     Space ID : 01 [SystemIO]
[0C1h 0193   1]                    Bit Width : 10
[0C2h 0194   1]                   Bit Offset : 00
[0C3h 0195   1]         Encoded Access Width : 02 [Word Access:16]
[0C4h 0196   8]                      Address : 0000000000000468

[0CCh 0204   4]                        Value : 00000000
[0D0h 0208   4]                Register Mask : 00000800

[0D4h 0212   1]              Watchdog Action : 09
[0D5h 0213   1]                  Instruction : 02
[0D6h 0214   2]                     Reserved : 0000

[0D8h 0216  12]              Register Region : [Generic Address Structure]
[0D8h 0216   1]                     Space ID : 01 [SystemIO]
[0D9h 0217   1]                    Bit Width : 08
[0DAh 0218   1]                   Bit Offset : 00
[0DBh 0219   1]         Encoded Access Width : 01 [Byte Access:8]
[0DCh 0220   8]                      Address : 0000000000000072

[0E4h 0228   4]                        Value : 00000045
[0E8h 0232   4]                Register Mask : 000000FF

[0ECh 0236   1]              Watchdog Action : 09
[0EDh 0237   1]                  Instruction : 82
[0EEh 0238   2]                     Reserved : 0000

[0F0h 0240  12]              Register Region : [Generic Address Structure]
[0F0h 0240   1]                     Space ID : 01 [SystemIO]
[0F1h 0241   1]                    Bit Width : 08
[0F2h 0242   1]                   Bit Offset : 00
[0F3h 0243   1]         Encoded Access Width : 01 [Byte Access:8]
[0F4h 0244   8]                      Address : 0000000000000073

[0FCh 0252   4]                        Value : 00000001
[100h 0256   4]                Register Mask : 00000001

[104h 0260   1]              Watchdog Action : 0A
[105h 0261   1]                  Instruction : 00
[106h 0262   2]                     Reserved : 0000

[108h 0264  12]              Register Region : [Generic Address Structure]
[108h 0264   1]                     Space ID : 01 [SystemIO]
[109h 0265   1]                    Bit Width : 10
[10Ah 0266   1]                   Bit Offset : 0B
[10Bh 0267   1]         Encoded Access Width : 02 [Word Access:16]
[10Ch 0268   8]                      Address : 0000000000000468

[114h 0276   4]                        Value : 00000001
[118h 0280   4]                Register Mask : 00000001

[11Ch 0284   1]              Watchdog Action : 0B
[11Dh 0285   1]                  Instruction : 82
[11Eh 0286   2]                     Reserved : 0000

[120h 0288  12]              Register Region : [Generic Address Structure]
[120h 0288   1]                     Space ID : 01 [SystemIO]
[121h 0289   1]                    Bit Width : 10
[122h 0290   1]                   Bit Offset : 00
[123h 0291   1]         Encoded Access Width : 02 [Word Access:16]
[124h 0292   8]                      Address : 0000000000000468

[12Ch 0300   4]                        Value : 00000800
[130h 0304   4]                Register Mask : 00000800

[134h 0308   1]              Watchdog Action : 0B
[135h 0309   1]                  Instruction : 02
[136h 0310   2]                     Reserved : 0000

[138h 0312  12]              Register Region : [Generic Address Structure]
[138h 0312   1]                     Space ID : 01 [SystemIO]
[139h 0313   1]                    Bit Width : 08
[13Ah 0314   1]                   Bit Offset : 00
[13Bh 0315   1]         Encoded Access Width : 01 [Byte Access:8]
[13Ch 0316   8]                      Address : 0000000000000072

[144h 0324   4]                        Value : 00000045
[148h 0328   4]                Register Mask : 000000FF

[14Ch 0332   1]              Watchdog Action : 0B
[14Dh 0333   1]                  Instruction : 82
[14Eh 0334   2]                     Reserved : 0000

[150h 0336  12]              Register Region : [Generic Address Structure]
[150h 0336   1]                     Space ID : 01 [SystemIO]
[151h 0337   1]                    Bit Width : 08
[152h 0338   1]                   Bit Offset : 00
[153h 0339   1]         Encoded Access Width : 01 [Byte Access:8]
[154h 0340   8]                      Address : 0000000000000073

[15Ch 0348   4]                        Value : 00000000
[160h 0352   4]                Register Mask : 00000001

[164h 0356   1]              Watchdog Action : 10
[165h 0357   1]                  Instruction : 00
[166h 0358   2]                     Reserved : 0000

[168h 0360  12]              Register Region : [Generic Address Structure]
[168h 0360   1]                     Space ID : 01 [SystemIO]
[169h 0361   1]                    Bit Width : 08
[16Ah 0362   1]                   Bit Offset : 04
[16Bh 0363   1]         Encoded Access Width : 01 [Byte Access:8]
[16Ch 0364   8]                      Address : 000000000000046A

[174h 0372   4]                        Value : 00000000
[178h 0376   4]                Register Mask : 00000003

[17Ch 0380   1]              Watchdog Action : 11
[17Dh 0381   1]                  Instruction : 82
[17Eh 0382   2]                     Reserved : 0000

[180h 0384  12]              Register Region : [Generic Address Structure]
[180h 0384   1]                     Space ID : 01 [SystemIO]
[181h 0385   1]                    Bit Width : 10
[182h 0386   1]                   Bit Offset : 00
[183h 0387   1]         Encoded Access Width : 02 [Word Access:16]
[184h 0388   8]                      Address : 000000000000046A

[18Ch 0396   4]                        Value : 00000000
[190h 0400   4]                Register Mask : 00000030

[194h 0404   1]              Watchdog Action : 12
[195h 0405   1]                  Instruction : 00
[196h 0406   2]                     Reserved : 0000

[198h 0408  12]              Register Region : [Generic Address Structure]
[198h 0408   1]                     Space ID : 01 [SystemIO]
[199h 0409   1]                    Bit Width : 08
[19Ah 0410   1]                   Bit Offset : 04
[19Bh 0411   1]         Encoded Access Width : 01 [Byte Access:8]
[19Ch 0412   8]                      Address : 000000000000046A

[1A4h 0420   4]                        Value : 00000001
[1A8h 0424   4]                Register Mask : 00000003

[1ACh 0428   1]              Watchdog Action : 13
[1ADh 0429   1]                  Instruction : 82
[1AEh 0430   2]                     Reserved : 0000

[1B0h 0432  12]              Register Region : [Generic Address Structure]
[1B0h 0432   1]                     Space ID : 01 [SystemIO]
[1B1h 0433   1]                    Bit Width : 10
[1B2h 0434   1]                   Bit Offset : 00
[1B3h 0435   1]         Encoded Access Width : 02 [Word Access:16]
[1B4h 0436   8]                      Address : 000000000000046A

[1BCh 0444   4]                        Value : 00000010
[1C0h 0448   4]                Register Mask : 00000030

[1C4h 0452   1]              Watchdog Action : 20
[1C5h 0453   1]                  Instruction : 02
[1C6h 0454   2]                     Reserved : 0000

[1C8h 0456  12]              Register Region : [Generic Address Structure]
[1C8h 0456   1]                     Space ID : 01 [SystemIO]
[1C9h 0457   1]                    Bit Width : 08
[1CAh 0458   1]                   Bit Offset : 00
[1CBh 0459   1]         Encoded Access Width : 01 [Byte Access:8]
[1CCh 0460   8]                      Address : 0000000000000072

[1D4h 0468   4]                        Value : 00000045
[1D8h 0472   4]                Register Mask : 000000FF

[1DCh 0476   1]              Watchdog Action : 20
[1DDh 0477   1]                  Instruction : 00
[1DEh 0478   2]                     Reserved : 0000

[1E0h 0480  12]              Register Region : [Generic Address Structure]
[1E0h 0480   1]                     Space ID : 01 [SystemIO]
[1E1h 0481   1]                    Bit Width : 08
[1E2h 0482   1]                   Bit Offset : 00
[1E3h 0483   1]         Encoded Access Width : 01 [Byte Access:8]
[1E4h 0484   8]                      Address : 0000000000000073

[1ECh 0492   4]                        Value : 00000001
[1F0h 0496   4]                Register Mask : 00000001

[1F4h 0500   1]              Watchdog Action : 21
[1F5h 0501   1]                  Instruction : 02
[1F6h 0502   2]                     Reserved : 0000

[1F8h 0504  12]              Register Region : [Generic Address Structure]
[1F8h 0504   1]                     Space ID : 01 [SystemIO]
[1F9h 0505   1]                    Bit Width : 08
[1FAh 0506   1]                   Bit Offset : 00
[1FBh 0507   1]         Encoded Access Width : 01 [Byte Access:8]
[1FCh 0508   8]                      Address : 0000000000000072

[204h 0516   4]                        Value : 00000045
[208h 0520   4]                Register Mask : 000000FF

[20Ch 0524   1]              Watchdog Action : 21
[20Dh 0525   1]                  Instruction : 82
[20Eh 0526   2]                     Reserved : 0000

[210h 0528  12]              Register Region : [Generic Address Structure]
[210h 0528   1]                     Space ID : 01 [SystemIO]
[211h 0529   1]                    Bit Width : 08
[212h 0530   1]                   Bit Offset : 00
[213h 0531   1]         Encoded Access Width : 01 [Byte Access:8]
[214h 0532   8]                      Address : 0000000000000073

[21Ch 0540   4]                        Value : 00000000
[220h 0544   4]                Register Mask : 00000001

Raw Table Data: Length 548 (0x224)

  0000: 57 44 41 54 24 02 00 00 01 AE 49 4E 54 45 4C 20  // WDAT$.....INTEL 
  0010: 43 61 6C 70 65 6C 6C 61 01 00 00 00 4D 53 46 54  // Calpella....MSFT
  0020: 13 00 00 01 20 00 00 00 FF 00 FF FF FF 00 00 00  // .... ...........
  0030: 58 02 00 00 FF 03 00 00 02 00 00 00 81 00 00 00  // X...............
  0040: 14 00 00 00 01 02 00 00 01 10 00 02 60 04 00 00  // ............`...
  0050: 00 00 00 00 00 00 00 00 FF 03 00 00 04 01 00 00  // ................
  0060: 01 10 00 02 60 04 00 00 00 00 00 00 00 00 00 00  // ....`...........
  0070: FF 03 00 00 05 01 00 00 01 10 00 02 72 04 00 00  // ............r...
  0080: 00 00 00 00 00 00 00 00 FF 03 00 00 06 83 00 00  // ................
  0090: 01 10 00 02 72 04 00 00 00 00 00 00 00 00 00 00  // ....r...........
  00A0: FF 03 00 00 08 00 00 00 01 10 0B 02 68 04 00 00  // ............h...
  00B0: 00 00 00 00 00 00 00 00 01 00 00 00 09 82 00 00  // ................
  00C0: 01 10 00 02 68 04 00 00 00 00 00 00 00 00 00 00  // ....h...........
  00D0: 00 08 00 00 09 02 00 00 01 08 00 01 72 00 00 00  // ............r...
  00E0: 00 00 00 00 45 00 00 00 FF 00 00 00 09 82 00 00  // ....E...........
  00F0: 01 08 00 01 73 00 00 00 00 00 00 00 01 00 00 00  // ....s...........
  0100: 01 00 00 00 0A 00 00 00 01 10 0B 02 68 04 00 00  // ............h...
  0110: 00 00 00 00 01 00 00 00 01 00 00 00 0B 82 00 00  // ................
  0120: 01 10 00 02 68 04 00 00 00 00 00 00 00 08 00 00  // ....h...........
  0130: 00 08 00 00 0B 02 00 00 01 08 00 01 72 00 00 00  // ............r...
  0140: 00 00 00 00 45 00 00 00 FF 00 00 00 0B 82 00 00  // ....E...........
  0150: 01 08 00 01 73 00 00 00 00 00 00 00 00 00 00 00  // ....s...........
  0160: 01 00 00 00 10 00 00 00 01 08 04 01 6A 04 00 00  // ............j...
  0170: 00 00 00 00 00 00 00 00 03 00 00 00 11 82 00 00  // ................
  0180: 01 10 00 02 6A 04 00 00 00 00 00 00 00 00 00 00  // ....j...........
  0190: 30 00 00 00 12 00 00 00 01 08 04 01 6A 04 00 00  // 0...........j...
  01A0: 00 00 00 00 01 00 00 00 03 00 00 00 13 82 00 00  // ................
  01B0: 01 10 00 02 6A 04 00 00 00 00 00 00 10 00 00 00  // ....j...........
  01C0: 30 00 00 00 20 02 00 00 01 08 00 01 72 00 00 00  // 0... .......r...
  01D0: 00 00 00 00 45 00 00 00 FF 00 00 00 20 00 00 00  // ....E....... ...
  01E0: 01 08 00 01 73 00 00 00 00 00 00 00 01 00 00 00  // ....s...........
  01F0: 01 00 00 00 21 02 00 00 01 08 00 01 72 00 00 00  // ....!.......r...
  0200: 00 00 00 00 45 00 00 00 FF 00 00 00 21 82 00 00  // ....E.......!...
  0210: 01 08 00 01 73 00 00 00 00 00 00 00 00 00 00 00  // ....s...........
  0220: 01 00 00 00                                      // ....


XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 0000007C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BD
[00Ah 0010   6]                       Oem ID : "TOSINV"
[010h 0016   8]                 Oem Table ID : "TOSINV00"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   8]       ACPI Table Address   0 : 000000007B7FC000
[02Ch 0044   8]       ACPI Table Address   1 : 000000007B7FD000
[034h 0052   8]       ACPI Table Address   2 : 000000007B7FB000
[03Ch 0060   8]       ACPI Table Address   3 : 000000007B7FA000
[044h 0068   8]       ACPI Table Address   4 : 000000007B7F9000
[04Ch 0076   8]       ACPI Table Address   5 : 000000007B7ED000
[054h 0084   8]       ACPI Table Address   6 : 000000007B7EA000
[05Ch 0092   8]       ACPI Table Address   7 : 000000007B7E7000
[064h 0100   8]       ACPI Table Address   8 : 000000007B7E5000
[06Ch 0108   8]       ACPI Table Address   9 : 000000007B7E4000
[074h 0116   8]       ACPI Table Address  10 : 000000007B7E3000

Raw Table Data: Length 124 (0x7C)

  0000: 58 53 44 54 7C 00 00 00 01 BD 54 4F 53 49 4E 56  // XSDT|.....TOSINV
  0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 20 20 20 20  // TOSINV00....    
  0020: 13 00 00 01 00 C0 7F 7B 00 00 00 00 00 D0 7F 7B  // .......{.......{
  0030: 00 00 00 00 00 B0 7F 7B 00 00 00 00 00 A0 7F 7B  // .......{.......{
  0040: 00 00 00 00 00 90 7F 7B 00 00 00 00 00 D0 7E 7B  // .......{......~{
  0050: 00 00 00 00 00 A0 7E 7B 00 00 00 00 00 70 7E 7B  // ......~{.....p~{
  0060: 00 00 00 00 00 50 7E 7B 00 00 00 00 00 40 7E 7B  // .....P~{.....@~{
  0070: 00 00 00 00 00 30 7E 7B 00 00 00 00              // .....0~{....


