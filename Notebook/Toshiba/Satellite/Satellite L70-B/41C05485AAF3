
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20221020
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000AD8  0x01  "INSYDE"  "HSW-LPT "  0x00003000  "ACPI"   0x00040000
 02)  MCFG  0x0000003C  0x01  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 03)  ASF!  0x000000A5  0x20  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 04)  APIC  0x0000008C  0x03  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 05)  SLIC  0x00000176  0x01  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 06)  SSDT  0x00007410  0x01  "TOSINV"  "TsbOdm  "  0x00001000  "ACPI"   0x00040000
 07)  BOOT  0x00000028  0x01  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 08)  UEFI  0x00001036  0x01  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 09)  DSDT  0x0000A240  0x01  "TOSINV"  "TOSINV00"  0x00000000  "ACPI"   0x00040000
 10)  SSDT  0x0000382C  0x01  "INSYDE"  "HSW-LPT "  0x00003000  "ACPI"   0x00040000
 11)  WDAT  0x00000224  0x01  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 12)  ASPT  0x00000034  0x07  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 13)  SSDT  0x00000539  0x01  "INSYDE"  "HSW-LPT "  0x00003000  "ACPI"   0x00040000
 14)  DMAR  0x000000B8  0x01  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 15)  FACP  0x0000010C  0x05  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 16)  FPDT  0x00000044  0x01  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 17)  SSDT  0x00002028  0x01  "INSYDE"  "HSW-LPT "  0x00001000  "ACPI"   0x00040000
 18)  MSDM  0x00000055  0x03  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 19)  DBGP  0x00000034  0x01  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 20)  HPET  0x00000038  0x01  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 21)  FACS  0x00000040  0x02
 22)  BGRT  0x00000038  0x01  "TOSINV"  "TOSINV00"  0x00000001  "ACPI"   0x00040000
 23)  SSDT  0x000005AA  0x01  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20120913
 24)  SSDT  0x00000119  0x01  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20120913
 25)  SSDT  0x000003D3  0x01  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20120913

Found 25 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 0000008C
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 9F
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 01
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 01
[038h 0056 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 03
[03Fh 0063 001h]               Local Apic ID : 02
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 04
[047h 0071 001h]               Local Apic ID : 03
[048h 0072 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 00 [Processor Local APIC]
[04Dh 0077 001h]                      Length : 08
[04Eh 0078 001h]                Processor ID : 05
[04Fh 0079 001h]               Local Apic ID : 04
[050h 0080 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084 001h]               Subtable Type : 00 [Processor Local APIC]
[055h 0085 001h]                      Length : 08
[056h 0086 001h]                Processor ID : 06
[057h 0087 001h]               Local Apic ID : 05
[058h 0088 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092 001h]               Subtable Type : 00 [Processor Local APIC]
[05Dh 0093 001h]                      Length : 08
[05Eh 0094 001h]                Processor ID : 07
[05Fh 0095 001h]               Local Apic ID : 06
[060h 0096 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100 001h]               Subtable Type : 00 [Processor Local APIC]
[065h 0101 001h]                      Length : 08
[066h 0102 001h]                Processor ID : 08
[067h 0103 001h]               Local Apic ID : 07
[068h 0104 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108 001h]               Subtable Type : 01 [I/O APIC]
[06Dh 0109 001h]                      Length : 0C
[06Eh 0110 001h]                 I/O Apic ID : 02
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]                     Address : FEC00000
[074h 0116 004h]                   Interrupt : 00000000

[078h 0120 001h]               Subtable Type : 02 [Interrupt Source Override]
[079h 0121 001h]                      Length : 0A
[07Ah 0122 001h]                         Bus : 00
[07Bh 0123 001h]                      Source : 00
[07Ch 0124 004h]                   Interrupt : 00000002
[080h 0128 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[082h 0130 001h]               Subtable Type : 02 [Interrupt Source Override]
[083h 0131 001h]                      Length : 0A
[084h 0132 001h]                         Bus : 00
[085h 0133 001h]                      Source : 09
[086h 0134 004h]                   Interrupt : 00000009
[08Ah 0138 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 140 (0x8C)

    0000: 41 50 49 43 8C 00 00 00 03 9F 54 4F 53 49 4E 56  // APIC......TOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 01 01 00 00 00 00 08 03 02  // ................
    0040: 01 00 00 00 00 08 04 03 01 00 00 00 00 08 05 04  // ................
    0050: 01 00 00 00 00 08 06 05 01 00 00 00 00 08 07 06  // ................
    0060: 01 00 00 00 00 08 08 07 01 00 00 00 01 0C 02 00  // ................
    0070: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0080: 00 00 02 0A 00 09 09 00 00 00 0D 00              // ............


ASF!
----
[000h 0000 004h]                   Signature : "ASF!"    [Alert Standard Format Table]
[004h 0004 004h]                Table Length : 000000A5
[008h 0008 001h]                    Revision : 20
[009h 0009 001h]                    Checksum : 94
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]               Subtable Type : 00 [ASF Information]
[025h 0037 001h]                    Reserved : 00
[026h 0038 002h]                      Length : 0010
[028h 0040 001h]         Minimum Reset Value : 05
[029h 0041 001h]    Minimum Polling Interval : FF
[02Ah 0042 002h]                   System ID : 0001
[02Ch 0044 004h]             Manufacturer ID : 57010000
[030h 0048 001h]                       Flags : 00
[031h 0049 003h]                    Reserved : 000000

[034h 0052 001h]               Subtable Type : 01 [ASF Alerts]
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]                      Length : 002C
[038h 0056 001h]                  AssertMask : 00
[039h 0057 001h]                DeassertMask : 00
[03Ah 0058 001h]                 Alert Count : 03
[03Bh 0059 001h]           Alert Data Length : 0C

[03Ch 0060 001h]                     Address : 89
[03Dh 0061 001h]                     Command : 04
[03Eh 0062 001h]                        Mask : 01
[03Fh 0063 001h]                       Value : 01
[040h 0064 001h]                  SensorType : 05
[041h 0065 001h]                        Type : 6F
[042h 0066 001h]                      Offset : 00
[043h 0067 001h]                  SourceType : 68
[044h 0068 001h]                    Severity : 08
[045h 0069 001h]                SensorNumber : 88
[046h 0070 001h]                      Entity : 17
[047h 0071 001h]                    Instance : 00

[048h 0072 001h]                     Address : 89
[049h 0073 001h]                     Command : 04
[04Ah 0074 001h]                        Mask : 04
[04Bh 0075 001h]                       Value : 04
[04Ch 0076 001h]                  SensorType : 07
[04Dh 0077 001h]                        Type : 6F
[04Eh 0078 001h]                      Offset : 00
[04Fh 0079 001h]                  SourceType : 68
[050h 0080 001h]                    Severity : 20
[051h 0081 001h]                SensorNumber : 88
[052h 0082 001h]                      Entity : 03
[053h 0083 001h]                    Instance : 00

[054h 0084 001h]                     Address : 89
[055h 0085 001h]                     Command : 05
[056h 0086 001h]                        Mask : 01
[057h 0087 001h]                       Value : 01
[058h 0088 001h]                  SensorType : 19
[059h 0089 001h]                        Type : 6F
[05Ah 0090 001h]                      Offset : 00
[05Bh 0091 001h]                  SourceType : 68
[05Ch 0092 001h]                    Severity : 20
[05Dh 0093 001h]                SensorNumber : 88
[05Eh 0094 001h]                      Entity : 22
[05Fh 0095 001h]                    Instance : 00

[060h 0096 001h]               Subtable Type : 02 [ASF Remote Control]
[061h 0097 001h]                    Reserved : 00
[062h 0098 002h]                      Length : 0018
[064h 0100 001h]               Control Count : 04
[065h 0101 001h]         Control Data Length : 04
[066h 0102 002h]                    Reserved : 0000

[068h 0104 001h]                    Function : 00
[069h 0105 001h]                     Address : 88
[06Ah 0106 001h]                     Command : 00
[06Bh 0107 001h]                       Value : 03

[06Ch 0108 001h]                    Function : 01
[06Dh 0109 001h]                     Address : 88
[06Eh 0110 001h]                     Command : 00
[06Fh 0111 001h]                       Value : 02

[070h 0112 001h]                    Function : 02
[071h 0113 001h]                     Address : 88
[072h 0114 001h]                     Command : 00
[073h 0115 001h]                       Value : 01

[074h 0116 001h]                    Function : 03
[075h 0117 001h]                     Address : 88
[076h 0118 001h]                     Command : 00
[077h 0119 001h]                       Value : 04

[078h 0120 001h]               Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121 001h]                    Reserved : 00
[07Ah 0122 002h]                      Length : 0017
[07Ch 0124 007h]                Capabilities : 20 F8 00 00 00 13 F0
[083h 0131 001h]             Completion Code : 00
[084h 0132 004h]               Enterprise ID : 00000000
[088h 0136 001h]                     Command : 00
[089h 0137 002h]                   Parameter : 0000
[08Bh 0139 002h]                Boot Options : 0000
[08Dh 0141 002h]              Oem Parameters : 0000

[08Fh 0143 001h]               Subtable Type : 84 [ASF Address]
[090h 0144 001h]                    Reserved : 00
[091h 0145 002h]                      Length : 0016
[093h 0147 001h]               Eprom Address : 00
[094h 0148 001h]                Device Count : 10
[095h 0149 001h]                   Addresses : 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8 00 00 00 00 00 


Raw Table Data: Length 165 (0xA5)

    0000: 41 53 46 21 A5 00 00 00 20 94 54 4F 53 49 4E 56  // ASF!.... .TOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 00 00 10 00 05 FF 01 00 00 00 01 57  // ...............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  // ......,.........
    0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  // .o.h.........o.h
    0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00  //  ........o.h .".
    0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  // ................
    0070: 02 88 00 01 03 88 00 04 03 00 17 00 20 F8 00 00  // ............ ...
    0080: 00 13 F0 00 00 00 00 00 00 00 00 00 00 00 00 84  // ................
    0090: 00 16 00 00 10 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8  // .....\h.........
    00A0: 00 00 00 00 00                                   // .....


ASPT
----
[000h 0000 004h]                   Signature : "ASPT"    
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 07
[009h 0009 001h]                    Checksum : 45
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


**** Unknown ACPI table signature [ASPT]


Raw Table Data: Length 52 (0x34)

    0000: 41 53 50 54 34 00 00 00 07 45 54 4F 53 49 4E 56  // ASPT4....ETOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00                                      // ....


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 58
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 00
                                   Displayed : 0
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 0000000098F0A000
[030h 0048 004h]               Image OffsetX : 0000020F
[034h 0052 004h]               Image OffsetY : 000000BE

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 58 54 4F 53 49 4E 56  // BGRT8....XTOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 01 00 00 00 00 A0 F0 98 00 00 00 00  // ................
    0030: 0F 02 00 00 BE 00 00 00                          // ........


BOOT
----
[000h 0000 004h]                   Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 17
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]         Boot Register Index : 44
[025h 0037 003h]                    Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 17 54 4F 53 49 4E 56  // BOOT(.....TOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 44 00 00 00                          // ....D...


DBGP
----
[000h 0000 004h]                   Signature : "DBGP"    [Debug Port Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 59
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]              Interface Type : 01
[025h 0037 003h]                    Reserved : 000000

[028h 0040 00Ch]         Debug Port Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 01 [SystemIO]
[029h 0041 001h]                   Bit Width : 10
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000000003F8


Raw Table Data: Length 52 (0x34)

    0000: 44 42 47 50 34 00 00 00 01 59 54 4F 53 49 4E 56  // DBGP4....YTOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 01 00 00 00 01 10 00 00 F8 03 00 00  // ................
    0030: 00 00 00 00                                      // ....


DMAR
----
[000h 0000 004h]                   Signature : "DMAR"    [DMA Remapping Table]
[004h 0004 004h]                Table Length : 000000B8
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 80
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]          Host Address Width : 26
[025h 0037 001h]                       Flags : 01
[026h 0038 00Ah]                    Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050 002h]                      Length : 0018

[034h 0052 001h]                       Flags : 00
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]          PCI Segment Number : 0000
[038h 0056 008h]       Register Base Address : 00000000FED90000

[040h 0064 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065 001h]                Entry Length : 08
[042h 0066 002h]                    Reserved : 0000
[044h 0068 001h]              Enumeration ID : 00
[045h 0069 001h]              PCI Bus Number : 00

[046h 0070 002h]                    PCI Path : 02,00


[048h 0072 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074 002h]                      Length : 0020

[04Ch 0076 001h]                       Flags : 01
[04Dh 0077 001h]                    Reserved : 00
[04Eh 0078 002h]          PCI Segment Number : 0000
[050h 0080 008h]       Register Base Address : 00000000FED91000

[058h 0088 001h]           Device Scope Type : 03 [IOAPIC Device]
[059h 0089 001h]                Entry Length : 08
[05Ah 0090 002h]                    Reserved : 0000
[05Ch 0092 001h]              Enumeration ID : 02
[05Dh 0093 001h]              PCI Bus Number : F0

[05Eh 0094 002h]                    PCI Path : 1F,00


[060h 0096 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097 001h]                Entry Length : 08
[062h 0098 002h]                    Reserved : 0000
[064h 0100 001h]              Enumeration ID : 00
[065h 0101 001h]              PCI Bus Number : F0

[066h 0102 002h]                    PCI Path : 0F,00


[068h 0104 002h]               Subtable Type : 0001 [Reserved Memory Region]
[06Ah 0106 002h]                      Length : 0030

[06Ch 0108 002h]                    Reserved : 0000
[06Eh 0110 002h]          PCI Segment Number : 0000
[070h 0112 008h]                Base Address : 000000009CDC0000
[078h 0120 008h]         End Address (limit) : 000000009CDDFFFF

[080h 0128 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129 001h]                Entry Length : 08
[082h 0130 002h]                    Reserved : 0000
[084h 0132 001h]              Enumeration ID : 00
[085h 0133 001h]              PCI Bus Number : 00

[086h 0134 002h]                    PCI Path : 1D,00


[088h 0136 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[089h 0137 001h]                Entry Length : 08
[08Ah 0138 002h]                    Reserved : 0000
[08Ch 0140 001h]              Enumeration ID : 00
[08Dh 0141 001h]              PCI Bus Number : 00

[08Eh 0142 002h]                    PCI Path : 1A,00


[090h 0144 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[091h 0145 001h]                Entry Length : 08
[092h 0146 002h]                    Reserved : 0000
[094h 0148 001h]              Enumeration ID : 00
[095h 0149 001h]              PCI Bus Number : 00

[096h 0150 002h]                    PCI Path : 14,00


[098h 0152 002h]               Subtable Type : 0001 [Reserved Memory Region]
[09Ah 0154 002h]                      Length : 0020

[09Ch 0156 002h]                    Reserved : 0000
[09Eh 0158 002h]          PCI Segment Number : 0000
[0A0h 0160 008h]                Base Address : 000000009D800000
[0A8h 0168 008h]         End Address (limit) : 000000009F9FFFFF

[0B0h 0176 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0B1h 0177 001h]                Entry Length : 08
[0B2h 0178 002h]                    Reserved : 0000
[0B4h 0180 001h]              Enumeration ID : 00
[0B5h 0181 001h]              PCI Bus Number : 00

[0B6h 0182 002h]                    PCI Path : 02,00


Raw Table Data: Length 184 (0xB8)

    0000: 44 4D 41 52 B8 00 00 00 01 80 54 4F 53 49 4E 56  // DMAR......TOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 26 01 00 00 00 00 00 00 00 00 00 00  // ....&...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  // .......... .....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 F0 1F 00  // ................
    0060: 04 08 00 00 00 F0 0F 00 01 00 30 00 00 00 00 00  // ..........0.....
    0070: 00 00 DC 9C 00 00 00 00 FF FF DD 9C 00 00 00 00  // ................
    0080: 01 08 00 00 00 00 1D 00 01 08 00 00 00 00 1A 00  // ................
    0090: 01 08 00 00 00 00 14 00 01 00 20 00 00 00 00 00  // .......... .....
    00A0: 00 00 80 9D 00 00 00 00 FF FF 9F 9F 00 00 00 00  // ................
    00B0: 01 08 00 00 00 00 02 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 1, "TOSINV", "TOSINV00", 0x00000000)
{
    /*
     * iASL Warning: There were 17 external control methods found during
     * disassembly, but only 0 were resolved (17 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CFGD, UnknownObj)
    External (_PR_.CPU0._PPC, UnknownObj)
    External (_PR_.CPU0._PSS, UnknownObj)
    External (_SB_.CPTO, IntObj)
    External (_SB_.IAOE.PTSL, UnknownObj)
    External (_SB_.KUPP, UnknownObj)
    External (_SB_.PCCD, UnknownObj)
    External (_SB_.PCCD.PENB, UnknownObj)
    External (_SB_.PCI0.B0D3.ABAR, IntObj)
    External (_SB_.PCI0.B0D3.BARA, UnknownObj)
    External (_SB_.PCI0.GFX0.DD1F, UnknownObj)
    External (_SB_.PCI0.GFX0.GSCI, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GFX0.GSSE, UnknownObj)
    External (_SB_.PCI0.GFX0.IUEH, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.LPCB.EC9C, IntObj)
    External (_SB_.PCI0.LPCB.FWOK, UnknownObj)
    External (_SB_.PCI0.LPCB.LREG, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.PAUD.PUAM, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.PEG0, UnknownObj)
    External (_SB_.PCI0.PEG0.HPME, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.PEG0.PEGP, UnknownObj)
    External (_SB_.PCI0.PEG0.PEGP.EPON, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.PEG1, UnknownObj)
    External (_SB_.PCI0.PEG1.HPME, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.PEG2, UnknownObj)
    External (_SB_.PCI0.PEG2.HPME, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.RP05.PEGP.EPON, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.XHC_.DUAM, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.TPTS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.TWAK, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AR08, IntObj)
    External (D1F0, UnknownObj)
    External (D1F1, UnknownObj)
    External (D1F2, UnknownObj)
    External (DIDX, UnknownObj)
    External (ECE2, UnknownObj)
    External (GSMI, UnknownObj)
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)
    External (PR08, IntObj)
    External (PS0X, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (PS3X, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SGMD, UnknownObj)
    External (SPS0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SPS3, MethodObj)    // Warning: Unknown method, guessing 0 arguments

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (SP2O, 0x4E)
    Name (SP1O, 0x2E)
    Name (IO1B, 0x0600)
    Name (IO1L, 0x70)
    Name (IO2B, 0x0600)
    Name (IO2L, 0x20)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP3O, 0x2E)
    Name (IO4B, 0x0A20)
    Name (IO4L, 0x20)
    Name (HSCS, One)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x8000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (IFPB, 0xFED14000)
    Name (IFPL, 0x1000)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (TTTB, 0xFED20000)
    Name (TTTL, 0x00020000)
    Name (SMBS, 0xEFA0)
    Name (SMBL, 0x10)
    Name (PBLK, 0x1810)
    Name (PMBS, 0x1800)
    Name (PMLN, 0x0100)
    Name (LVL2, 0x1814)
    Name (LVL3, 0x1815)
    Name (LVL4, 0x1816)
    Name (SMIP, 0xB2)
    Name (GPBS, 0x0800)
    Name (GPLN, 0x0400)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PM30, 0x1830)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1F404)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x03)
    Name (FEMD, 0x04)
    Name (BGR, One)
    Name (BFR, 0x02)
    Name (BBR, 0x03)
    Name (BWC, 0x04)
    Name (BGRP, 0x09)
    Name (BGRC, 0x0A)
    Name (BFRP, 0x0B)
    Name (BBRP, 0x0C)
    Name (BRPS, 0x10)
    Name (BRCS, 0x11)
    Name (BRDS, 0x12)
    Name (BR4S, 0x13)
    Name (BR5S, 0x14)
    Name (BWT1, 0x20)
    Name (BW1P, 0x21)
    Name (BW2C, 0x22)
    Name (BW2P, 0x23)
    Name (BSPC, 0x24)
    Name (BSPP, 0x25)
    Name (BTS, 0x26)
    Name (BICO, 0x27)
    Name (BICC, 0x28)
    Name (BHB, 0x30)
    Name (BFS2, 0x31)
    Name (BFS3, 0x32)
    Name (BFS4, 0x33)
    Name (BRH, 0x35)
    Name (BFHC, 0x40)
    Name (BFD1, 0x41)
    Name (BFD2, 0x42)
    Name (BFCC, 0x43)
    Name (BHCP, 0x44)
    Name (BCOC, 0x45)
    Name (BFHP, 0x46)
    Name (BFCP, 0x47)
    Name (BTDT, 0x50)
    Name (BTMB, 0x51)
    Name (BBGB, 0x52)
    Name (BHC2, 0x53)
    Name (TCGM, One)
    Name (TRTP, One)
    Name (WDTE, One)
    Name (TRTD, 0x02)
    Name (TRTI, 0x03)
    Name (PFTI, 0x04)
    Name (GCDD, One)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x0C)
    Name (DSLC, 0x0E)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (SOOT, 0x35)
    Name (PDBR, 0x4D)
    Name (DPPB, 0xFED98000)
    Name (DPPL, 0x8000)
    OperationRegion (GNVS, SystemMemory, 0x9CF8DA98, 0x000002F5)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x1E), 
        Offset (0x25), 
        REVN,   8, 
        Offset (0x28), 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        COMA,   8, 
        COMB,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x42), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x48), 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        BID,    16, 
        PLID,   8, 
        ECTG,   8, 
        Offset (0x70), 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        Offset (0x7A), 
        DSEN,   8, 
        Offset (0x7C), 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        Offset (0x8F), 
        ATMC,   8, 
        PTMC,   8, 
        ATRA,   8, 
        PTRA,   8, 
        PNHM,   32, 
        TBAB,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        ATPC,   8, 
        PTPC,   8, 
        PFLV,   8, 
        BREV,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        Offset (0xB0), 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        OBF1,   8, 
        OBF2,   8, 
        OBF3,   8, 
        OBF4,   8, 
        OBF5,   8, 
        OBF6,   8, 
        OBF7,   8, 
        OBF8,   8, 
        XHCI,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        PEP3,   8, 
        DPTF,   8, 
        SADE,   8, 
        SACR,   8, 
        SAHT,   8, 
        PCHD,   8, 
        PCHC,   8, 
        PCHH,   8, 
        CTDP,   8, 
        LPMP,   8, 
        LPMV,   8, 
        ECEU,   8, 
        TGFG,   16, 
        MEMD,   8, 
        MEMC,   8, 
        MEMH,   8, 
        FND1,   8, 
        FND2,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        DCMP,   8, 
        TRTV,   8, 
        LPOE,   8, 
        LPOP,   8, 
        LPOS,   8, 
        LPOW,   8, 
        LPER,   8, 
        PPSZ,   32, 
        DISE,   8, 
        PFMA,   64, 
        PFMS,   8, 
        PFIA,   16, 
        ICNF,   8, 
        DSP0,   32, 
        DSP1,   32, 
        NFCE,   8, 
        CODS,   8, 
        SNHE,   8, 
        S0ID,   8, 
        CTDB,   8, 
        Offset (0x207), 
        PWRE,   8, 
        PWRP,   8, 
        XHPR,   8, 
        SDS0,   8, 
        SDS1,   16, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        Offset (0x212), 
        RIC0,   8, 
        PEPY,   8, 
        DVS0,   8, 
        DVS1,   8, 
        DVS2,   8, 
        DVS3,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        DSPD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        RWAG,   8, 
        I20D,   16, 
        I21D,   16, 
        Offset (0x231), 
        RCG0,   8, 
        ECDB,   8, 
        P2ME,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        M0C0,   16, 
        M1C0,   16, 
        M2C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M2C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        TBSF,   8, 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        LANP,   8, 
        Offset (0x27E), 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        GN1E,   8, 
        G1AT,   8, 
        G1PT,   8, 
        G1CT,   8, 
        G1HT,   8, 
        GN2E,   8, 
        G2AT,   8, 
        G2PT,   8, 
        G2CT,   8, 
        G2HT,   8, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        DOSD,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        SOHP,   8, 
        NOHP,   8, 
        TBSE,   8, 
        WKFN,   8, 
        PEPC,   16, 
        VRSD,   16, 
        PB1E,   8, 
        WAND,   8, 
        WWAT,   8, 
        WWPT,   8, 
        WWCT,   8, 
        WWHT,   8, 
        Offset (0x2AD), 
        MPLT,   16, 
        GR13,   8, 
        SPST,   8, 
        ECLP,   8, 
        Offset (0x2BC), 
        CCMD,   8, 
        COMD,   8, 
        LPT1,   8, 
        PSTP,   8, 
        WKMD,   8, 
        IDER,   8, 
        PIE0,   8, 
        PIE1,   8, 
        CSTS,   8, 
        PMEE,   8, 
        WOLE,   8, 
        NVAD,   32, 
        NVSZ,   32, 
        OPTF,   8, 
        IFSE,   8, 
        ISCT,   8, 
        S1C0,   16, 
        S1C1,   16, 
        S2C0,   16, 
        S2C1,   16, 
        SLPS,   8, 
        ALAT,   32, 
        HRAM,   8, 
        MDEN,   8, 
        TBEP,   8, 
        WIFD,   8, 
        WFAT,   8, 
        WFPT,   8, 
        WFCT,   8, 
        WFHT,   8, 
        SDEB,   8, 
        FGNE,   8, 
        MAUL,   8, 
        U2PR,   32, 
        U3SS,   8, 
        TBTC,   8, 
        TRPN,   8, 
        TBTM,   32
    }

    OperationRegion (OGNS, SystemMemory, 0x9CF8C818, 0x0000079A)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        OG00,   8, 
        OG01,   8, 
        OG02,   8, 
        OG03,   8, 
        OG04,   8, 
        OG05,   8, 
        OG06,   8, 
        OG07,   8, 
        OG08,   8, 
        OG09,   8, 
        OG10,   8, 
        ECON,   8, 
        OEMR,   64, 
        ACPS,   8, 
        CPUS,   8, 
        CPUL,   8, 
        ECRO,   8, 
        ECRM,   8, 
        ECRS,   8, 
        ECRD,   8, 
        REVD,   8, 
        EGST,   8, 
        LCDS,   8, 
        BTOP,   8, 
        HSWK,   8, 
        LCMD,   8, 
        SVCF,   8, 
        SWBF,   256, 
        KYBF,   256, 
        IECS,   24, 
        CECC,   8, 
        CECE,   32, 
        CECI,   16, 
        CECZ,   8, 
        CECF,   8, 
        CARG,   160, 
        LENA,   8, 
        LENB,   8, 
        LENC,   8, 
        LENE,   8, 
        LEND,   8, 
        IFNK,   1024, 
        ICMD,   4096, 
        RESL,   32, 
        RESV,   16, 
        USC1,   32, 
        USC2,   32, 
        VGAM,   8, 
        USBM,   32, 
        TPID,   8, 
        NODD,   8, 
        IHDD,   8, 
        TJET,   8, 
        CPUM,   8, 
        POLI,   8, 
        TCCR,   8, 
        TEST,   8, 
        LCDA,   8, 
        PWMV,   64, 
        EJLL,   8, 
        EJLR,   8, 
        SCFG,   8, 
        FKRG,   8, 
        HFMF,   8, 
        HYBT,   8, 
        SKEY,   8, 
        UCSP,   8, 
        CBTN,   8, 
        KBLE,   8, 
        CPTO,   8, 
        KUPP,   8, 
        SLMC,   8, 
        IREX,   8, 
        IRCK,   8, 
        SATR,   8, 
        GPUR,   8, 
        HSFN,   8, 
        HSP0,   8, 
        HSP1,   8, 
        HSP2,   8, 
        HSP3,   8, 
        HSP4,   8, 
        HSP5,   8, 
        HSP6,   8, 
        HSP7,   8, 
        HSP8,   8, 
        HSP9,   8, 
        HSPA,   8, 
        HSPB,   8, 
        HSS0,   8, 
        HSBD,   32, 
        HSDB,   32, 
        HSSS,   8, 
        LPSW,   8, 
        PROI,   8, 
        BTCL,   8, 
        CLMD,   8, 
        CDPM,   8, 
        CTSU,   8, 
        ITLK,   32, 
        DMIS,   32, 
        TPNO,   16, 
        STNO,   8, 
        Offset (0x365), 
        Offset (0x36B), 
        DMIF,   16, 
        Offset (0x375), 
        WDMI,   8192, 
        TDMI,   24, 
        LADR,   32, 
        LBSZ,   8, 
        LRES,   32, 
        LHDR,   32, 
        LFUN,   8
    }

    OperationRegion (PSMI, SystemIO, 0xB2, 0x02)
    Field (PSMI, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMD,   8
    }

    Method (OSMI, 1, NotSerialized)
    {
        APMD = Arg0
        APMC = 0xBE
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
        Stall (0xFF)
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Name (PR00, Package (0x26)
            {
                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0017FFFF, 
                    Zero, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    Zero, 
                    LNKF, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    One, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    Zero, 
                    LNKG, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    LNKH, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0x0018FFFF, 
                    Zero, 
                    LNKE, 
                    Zero
                }
            })
            Name (AR00, Package (0x26)
            {
                Package (0x04)
                {
                    0x0014FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0014FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x0015FFFF, 
                    One, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0016FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0017FFFF, 
                    Zero, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x0019FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    Zero, 
                    Zero, 
                    0x15
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001AFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0013FFFF, 
                    Zero, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x001BFFFF, 
                    Zero, 
                    Zero, 
                    0x16
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001CFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    Zero, 
                    Zero, 
                    0x17
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001DFFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x001FFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0x0001FFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0x0002FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0003FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0004FFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0x0018FFFF, 
                    Zero, 
                    Zero, 
                    0x14
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.PCI0.AR00 */
                }

                Return (PR00) /* \_SB_.PCI0.PR00 */
            }

            Name (PR02, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR02, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Name (PR0A, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }
            })
            Name (AR0A, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }
            })
            Name (PR0B, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }
            })
            Name (AR0B, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }
            })
            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((OSYS <= 0x07D5))
                {
                    If ((XINI == Zero))
                    {
                        XINI = One
                        ^LPCB.LREG ()
                    }
                }

                SPS0 ()
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                SPS3 ()
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFEB00000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((PELN >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((PELN >> 0x14) - One)
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1MN = (TLUD << 0x14)
                M1LN = ((M1MX - M1MN) + One)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (^XHC.CUID (Arg0))
                {
                    Return (^XHC.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf ((OSYS >= 0x07DC))
                {
                    If ((XCNT == Zero))
                    {
                        ^XHC.XSEL ()
                        XCNT++
                    }
                }

                If (((Arg0 == GUID) && NEXP))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (PMEE)
                    {
                        Return (GPRW (0x0B, 0x04))
                    }
                    Else
                    {
                        Return (GPRW (0x0B, Zero))
                    }
                }

                Name (PR01, Package (0x18)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x03, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0003FFFF, 
                        Zero, 
                        LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0003FFFF, 
                        One, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0003FFFF, 
                        0x02, 
                        LNKF, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0003FFFF, 
                        0x03, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        One, 
                        LNKH, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x02, 
                        LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x03, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        LNKE, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        LNKG, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        LNKF, 
                        Zero
                    }
                })
                Name (AR01, Package (0x18)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        Zero, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        One, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x02, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0001FFFF, 
                        0x03, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        Zero, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        One, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x02, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0002FFFF, 
                        0x03, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0003FFFF, 
                        Zero, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0x0003FFFF, 
                        One, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0003FFFF, 
                        0x02, 
                        Zero, 
                        0x15
                    }, 

                    Package (0x04)
                    {
                        0x0003FFFF, 
                        0x03, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        One, 
                        Zero, 
                        0x17
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0x0004FFFF, 
                        0x03, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        One, 
                        Zero, 
                        0x14
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x02, 
                        Zero, 
                        0x16
                    }, 

                    Package (0x04)
                    {
                        0x0005FFFF, 
                        0x03, 
                        Zero, 
                        0x15
                    }
                })
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.PCI0.P0P1.AR01 */
                    }

                    Return (PR01) /* \_SB_.PCI0.P0P1.PR01 */
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (PCI0.LPCB.LPC1, PCI_Config, Zero, 0x0100)
                    Field (PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x02), 
                        CDID,   16, 
                        Offset (0x08), 
                        CRID,   8, 
                        Offset (0x60), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        Offset (0x68), 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8, 
                        Offset (0xAC), 
                        Offset (0xAD), 
                        Offset (0xAE), 
                        XUSB,   1
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PARC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSA) /* \_SB_.PRSA */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLA, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PARC & 0x0F))
                            Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PARC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PARC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PBRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSB) /* \_SB_.PRSB */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLB, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PBRC & 0x0F))
                            Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PBRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PBRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PCRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSC) /* \_SB_.PRSC */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLC, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PCRC & 0x0F))
                            Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PCRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PCRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PDRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSD) /* \_SB_.PRSD */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLD, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PDRC & 0x0F))
                            Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PDRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PDRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PERC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSE) /* \_SB_.PRSE */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLE, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PERC & 0x0F))
                            Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PERC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PERC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PFRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSF) /* \_SB_.PRSF */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLF, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PFRC & 0x0F))
                            Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PFRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PFRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PGRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSG) /* \_SB_.PRSG */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLG, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PGRC & 0x0F))
                            Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PGRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PGRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            PHRC |= 0x80
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSH) /* \_SB_.PRSH */
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLH, One, IRQ0)
                            IRQ0 = Zero
                            IRQ0 = (One << (PHRC & 0x0F))
                            Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Local0--
                            PHRC = Local0
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((PHRC & 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0x78), 
                        ,   6, 
                    GR03,   2, 
                    Offset (0x7A), 
                    GR08,   2, 
                    GR09,   2, 
                    GR0A,   2, 
                    GR0B,   2, 
                    Offset (0x7C), 
                        ,   2, 
                    GR19,   2, 
                    Offset (0x80), 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y0F)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        ElseIf (HPAE)
                        {
                            Return (0x0B)
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y0F._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == One))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x1F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0066,             // Range Minimum
                            0x0066,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0068,             // Range Minimum
                            0x0068,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x006C,             // Range Minimum
                            0x006C,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x54,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0900,             // Range Minimum
                            0x0900,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0A00,             // Range Minimum
                            0x0A00,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0B00,             // Range Minimum
                            0x0B00,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x1800,             // Range Minimum
                            0x1800,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x164E,             // Range Minimum
                            0x164E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (LDR2)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (CWDT)
                {
                    Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x1854,             // Range Minimum
                            0x1854,             // Range Maximum
                            0x04,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((WDTE == One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (BUF0) /* \_SB_.PCI0.LPCB.CWDT.BUF0 */
                    }
                }

                Device (KBC)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        If ((OSYS < 0x07DC))
                        {
                            Return (0x0303D041)
                        }

                        Return (0x0111F351)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                }

                Device (MOUE)
                {
                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (0x5111F351)
                    }

                    Name (_CID, Package (0x03)  // _CID: Compatible ID
                    {
                        EisaId ("SYN1900"), 
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                }

                Device (NCIR)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((ECE2 & 0x06) == 0x06))
                        {
                            If ((IREX == One))
                            {
                                Return (0xFF)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (0x2310A35C)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0620,             // Range Minimum
                            0x0620,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {4}
                    })
                }

                Device (RCIR)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((ECE2 & 0x02) == 0x02))
                        {
                            If (((ECE2 & 0x04) != 0x04))
                            {
                                If ((IREX == One))
                                {
                                    Return (0xFF)
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                    {
                        Return (0x2310A35C)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0620,             // Range Minimum
                            0x0620,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {4}
                    })
                }
            }
        }
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Name (XINI, Zero)
    Mutex (MUTX, 0x00)
    Mutex (OSUM, 0x00)
    Mutex (WFDM, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 3, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        If ((Arg0 == 0x04))
        {
            P80D = ((P80D & Zero) | Arg1)
        }

        If ((Arg2 == Zero)){}
        If ((Arg2 == One))
        {
            P80H = P80D /* \P80D */
        }
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80D = Zero
        P8XH (Zero, Arg0, Zero)
        SLPS = Arg0
        If ((ICNF & 0x10))
        {
            If (CondRefOf (\_SB.IAOE.PTSL))
            {
                \_SB.IAOE.PTSL = Arg0
            }
        }

        \_SB.TPTS (Arg0)
        If ((Arg0 == 0x03))
        {
            P8XH (0x04, 0x53, Zero)
            P8XH (0x04, 0x53, One)
            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x1E)
            }
        }

        If ((Arg0 == 0x04))
        {
            P8XH (0x04, 0x54, Zero)
            P8XH (0x04, 0x54, One)
        }

        If ((Arg0 == 0x05))
        {
            P8XH (0x04, 0x55, Zero)
            P8XH (0x04, 0x55, One)
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If ((((Arg0 == 0x03) || (Arg0 == 0x04)) || (Arg0 == 0x05)))
        {
            If ((PFLV == FDTP))
            {
                GP27 = One
            }
        }
    }

    Method (MMRP, 0, NotSerialized)
    {
        Local0 = PEBS /* \PEBS */
        Local0 += 0x000E0000
        Local1 = (ToInteger (TBSE) - One)
        Local1 *= 0x1000
        Local0 += Local1
        Return (Local0)
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        P80D = Zero
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If (CondRefOf (\_SB.PCI0.PEG0.PEGP.EPON))
            {
                \_SB.PCI0.PEG0.PEGP.EPON ()
            }

            If (CondRefOf (\_SB.PCI0.RP05.PEGP.EPON))
            {
                \_SB.PCI0.RP05.PEGP.EPON ()
            }
        }

        If ((((\_SB.PCI0.B0D3.ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
            \_SB.PCI0.B0D3.ABAR & 0xFFFFC000) != Zero)))
        {
            \_SB.PCI0.B0D3.BARA = \_SB.PCI0.B0D3.ABAR /* External reference */
        }

        If (NEXP)
        {
            If ((OSCC & 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If ((OSCC & 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            P8XH (0x04, 0xE3, Zero)
            P8XH (0x04, 0xE3, One)
            While ((\_SB.PCI0.LPCB.FWOK == Zero))
            {
                P80H = 0xE3
            }

            SSMP = 0x70
            \_SB.KUPP = 0x22
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((GBSX & 0x40))
            {
                \_SB.PCI0.GFX0.IUEH (0x06)
            }

            If ((GBSX & 0x80))
            {
                \_SB.PCI0.GFX0.IUEH (0x07)
            }

            If ((DTSE && (TCNT > One)))
            {
                TRAP (TRTD, 0x14)
            }

            If ((OSYS == 0x07D2))
            {
                If ((\_PR.CFGD & One))
                {
                    If ((\_PR.CPU0._PPC > Zero))
                    {
                        \_PR.CPU0._PPC -= One
                        PNOT ()
                        \_PR.CPU0._PPC += One
                        PNOT ()
                    }
                    Else
                    {
                        \_PR.CPU0._PPC += One
                        PNOT ()
                        \_PR.CPU0._PPC -= One
                        PNOT ()
                    }
                }
            }

            If ((RP1D == Zero))
            {
                Notify (\_SB.PCI0.RP01, Zero) // Bus Check
            }

            If ((RP2D == Zero))
            {
                Notify (\_SB.PCI0.RP02, Zero) // Bus Check
            }

            If ((RP3D == Zero))
            {
                Notify (\_SB.PCI0.RP03, Zero) // Bus Check
            }

            If ((RP4D == Zero))
            {
                Notify (\_SB.PCI0.RP04, Zero) // Bus Check
            }

            If ((RP5D == Zero))
            {
                Notify (\_SB.PCI0.RP05, Zero) // Bus Check
            }

            If ((RP6D == Zero))
            {
                Notify (\_SB.PCI0.RP06, Zero) // Bus Check
            }

            If ((RP7D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                }
            }

            If ((RP8D == Zero))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                }
            }
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.LPCB.LREG ()
            P8XH (0x04, 0xE4, Zero)
            P8XH (0x04, 0xE4, One)
        }

        If ((Arg0 == 0x05))
        {
            P8XH (0x04, 0xE5, Zero)
            P8XH (0x04, 0xE5, One)
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.XHC.XWAK ()
        }

        If (((BID == BICO) || (BID == BICC)))
        {
            Acquire (WFDM, 0xFFFF)
            WKFN = One
            Release (WFDM)
            ADBG (Concatenate ("_WAK=", ToHexString (Timer)))
        }

        If ((OSYS >= 0x07DC))
        {
            OSMI (0xFC)
        }

        \_SB.TWAK (Arg0)
        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCCD.PENB))
        {
            Notify (\_SB.PCCD, 0x82) // Device-Specific Change
        }
        ElseIf ((TCNT > One))
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
        }

        If ((TCNT > One))
        {
            If (((PDC0 & 0x08) && (PDC0 & 0x10)))
            {
                Notify (\_PR.CPU0, 0x81) // C-State Change
            }

            If (((PDC1 & 0x08) && (PDC1 & 0x10)))
            {
                Notify (\_PR.CPU1, 0x81) // C-State Change
            }

            If (((PDC2 & 0x08) && (PDC2 & 0x10)))
            {
                Notify (\_PR.CPU2, 0x81) // C-State Change
            }

            If (((PDC3 & 0x08) && (PDC3 & 0x10)))
            {
                Notify (\_PR.CPU3, 0x81) // C-State Change
            }

            If (((PDC4 & 0x08) && (PDC4 & 0x10)))
            {
                Notify (\_PR.CPU4, 0x81) // C-State Change
            }

            If (((PDC5 & 0x08) && (PDC5 & 0x10)))
            {
                Notify (\_PR.CPU5, 0x81) // C-State Change
            }

            If (((PDC6 & 0x08) && (PDC6 & 0x10)))
            {
                Notify (\_PR.CPU6, 0x81) // C-State Change
            }

            If (((PDC7 & 0x08) && (PDC7 & 0x10)))
            {
                Notify (\_PR.CPU7, 0x81) // C-State Change
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    OperationRegion (MBAR, SystemMemory, ((\_SB.PCI0.MHBR << 0x0F) + 0x5000), 0x1000)
    Field (MBAR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
        PLSV = PPL1 /* \PPL1 */
        PLEN = PL1E /* \PL1E */
        CLMP = CLP1 /* \CLP1 */
        If ((PWRU == Zero))
        {
            PPUU = One
        }
        Else
        {
            PPUU = (PWRU-- << 0x02)
        }

        Local0 = (PLVL * PPUU) /* \SPL1.PPUU */
        Local1 = (Local0 / 0x03E8)
        PPL1 = Local1
        PL1E = One
        CLP1 = One
    }

    Method (RPL1, 0, Serialized)
    {
        PPL1 = PLSV /* \PLSV */
        PL1E = PLEN /* \PLEN */
        CLP1 = CLMP /* \CLMP */
        CSEM = Zero
    }

    Name (DDPS, Zero)
    Name (UAMS, Zero)
    Method (GUAM, 1, Serialized)
    {
        If ((Arg0 != DDPS))
        {
            DDPS = Arg0
            UAMS = (Arg0 && ~PWRS)
            If (Arg0)
            {
                P8XH (Zero, 0xC5, Zero)
                P8XH (One, Zero, Zero)
                ADBG ("Enter CS")
                If (PSCP)
                {
                    If ((CondRefOf (\_PR.CPU0._PSS) && CondRefOf (\_PR.CPU0._PPC)))
                    {
                        \_PR.CPU0._PPC = (SizeOf (\_PR.CPU0._PSS) - One)
                        PNOT ()
                    }
                }

                If (PLCS)
                {
                    SPL1 ()
                }
            }
            Else
            {
                P8XH (Zero, 0xC5, Zero)
                P8XH (One, 0xAB, Zero)
                ADBG ("Exit CS")
                If (PSCP)
                {
                    If (CondRefOf (\_PR.CPU0._PPC))
                    {
                        \_PR.CPU0._PPC = Zero
                        PNOT ()
                    }
                }

                If (PLCS)
                {
                    RPL1 ()
                }
            }

            P_CS ()
        }
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.PAUD.PUAM))
        {
            \_SB.PCI0.PAUD.PUAM ()
        }

        If ((OSYS == 0x07DC))
        {
            If (CondRefOf (\_SB.PCI0.XHC.DUAM))
            {
                \_SB.PCI0.XHC.DUAM ()
            }
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == TRTD))
        {
            DTSF = Arg1
            TRPD = Zero
            Return (DTSF) /* \DTSF */
        }

        If ((Arg0 == TRTI))
        {
            TRPH = Zero
        }

        If ((Arg0 == PFTI))
        {
            TRPF = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB)
    {
        Device (BIND)
        {
            Name (_HID, "INT33D2" /* Intel GPIO Buttons */)  // _HID: Hardware ID
            Name (_CID, "PNP0C40" /* Standard Button Controller */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((IUBE & One) && (OSYS == 0x07DC)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Device (CIND)
        {
            Name (_HID, "INT33D3" /* Intel GPIO Buttons */)  // _HID: Hardware ID
            Name (_CID, "PNP0C60" /* Display Sensor Device */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((IUCE & One) && (OSYS == 0x07DC)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }

        Device (DIND)
        {
            Name (_HID, "INT33D4" /* Intel GPIO Buttons */)  // _HID: Hardware ID
            Name (_CID, "PNP0C70" /* Dock Sensor Device */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If (((IUDE & One) && (OSYS == 0x07DC)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (PFMA) /* \PFMA */
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (PFMS) /* \PFMS */
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (PFIA) /* \PFIA */
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSYS = 0x07D0
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x07DD
                }
            }

            If ((OSYS > 0x07D5))
            {
                OSMI (0xE4)
                ^LPCB.LREG ()
            }
            Else
            {
                XINI = Zero
            }

            If (((BID == BICO) || (BID == BICC)))
            {
                Acquire (OSUM, 0xFFFF)
                Local1 = MMRP ()
                OperationRegion (RP_X, SystemMemory, Local1, 0x20)
                Field (RP_X, DWordAcc, NoLock, Preserve)
                {
                    REG0,   32, 
                    REG1,   32, 
                    REG2,   32, 
                    REG3,   32, 
                    REG4,   32, 
                    REG5,   32, 
                    REG6,   32, 
                    REG7,   32
                }

                Local2 = REG6 /* \_SB_.PCI0._INI.REG6 */
                REG6 = 0x00F0F000
                Local3 = \_GPE.MMTB ()
                \_GPE.OSUP (Local3)
                REG6 = Local2
                Release (OSUM)
                Acquire (WFDM, 0xFFFF)
                WKFN = One
                Release (WFDM)
            }
        }

        Method (NHPG, 0, Serialized)
        {
            ^RP01.HPEX = Zero
            ^RP02.HPEX = Zero
            ^RP03.HPEX = Zero
            ^RP04.HPEX = Zero
            ^RP05.HPEX = Zero
            ^RP06.HPEX = Zero
            ^RP07.HPEX = Zero
            ^RP08.HPEX = Zero
            ^RP01.HPSX = One
            ^RP02.HPSX = One
            ^RP03.HPSX = One
            ^RP04.HPSX = One
            ^RP05.HPSX = One
            ^RP06.HPSX = One
            ^RP07.HPSX = One
            ^RP08.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            ^RP01.PMEX = Zero
            ^RP02.PMEX = Zero
            ^RP03.PMEX = Zero
            ^RP04.PMEX = Zero
            ^RP05.PMEX = Zero
            ^RP06.PMEX = Zero
            ^RP07.PMEX = Zero
            ^RP08.PMEX = Zero
            ^RP01.PMSX = One
            ^RP02.PMSX = One
            ^RP03.PMSX = One
            ^RP04.PMSX = One
            ^RP05.PMSX = One
            ^RP06.PMSX = One
            ^RP07.PMSX = One
            ^RP08.PMSX = One
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((SGMD & 0x0F) != 0x02))
                        {
                            If ((RTD3 == Zero))
                            {
                                CAP0 &= 0x3B
                                STS0 |= 0x10
                            }
                        }
                    }

                    If ((CAP0 & 0x20))
                    {
                        If (CondRefOf (\_SB.PCCD.PENB))
                        {
                            If ((^PCCD.PENB == Zero))
                            {
                                CAP0 &= 0x1F
                                STS0 |= 0x10
                            }
                        }
                        Else
                        {
                            CAP0 &= 0x1F
                            STS0 |= 0x10
                        }
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }

        Device (PEPD)
        {
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (PEPP, Zero)
            Name (DEVS, Package (0x03)
            {
                0x02, 
                Package (0x01)
                {
                    "\\_SB.PCI0.GFX0"
                }, 

                Package (0x01)
                {
                    "\\_SB.PCI0.SAT0.PRT1"
                }
            })
            Name (DEVX, Package (0x08)
            {
                Package (0x02)
                {
                    "\\_SB.PCI0.GFX0", 
                    Ones
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT1", 
                    Ones
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.UA01", 
                    Ones
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SDHC", 
                    Ones
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.I2C0", 
                    Ones
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.I2C1", 
                    Ones
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.XHC", 
                    Ones
                }, 

                Package (0x02)
                {
                    "HDAUDIO\\FUNC_01&VEN_10EC&DEV_0282&SUBSYS_00000000&REV_1000\\4&a02b74b&0&0001", 
                    Ones
                }
            })
            Name (DEVY, Package (0x12)
            {
                Package (0x03)
                {
                    "\\_PR.CPU0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.CPU1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.CPU2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.CPU3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.PRT3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA00", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA01", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SDHC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.XHC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "HDAUDIO\\FUNC_01&VEN_10EC&DEV_0282*", 
                    One, 
                    Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            Zero, 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.ADSP", 
                    One, 
                    Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            Zero, 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            One, 
                            0x03
                        }
                    }
                }
            })
            Name (BCCD, Package (0x05)
            {
                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT1", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT2", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT3", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS >= 0x07DC))
                {
                    If (((CDID & 0xF000) == 0x9000))
                    {
                        If ((S0ID == One))
                        {
                            Return (0x0F)
                        }
                    }
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("b8febfe0-baf8-454b-aecd-49fb91137b21") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x07                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        PEPP = One
                        Return (0x0F)
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((Arg1 == Zero))
                        {
                            Switch (PEPY)
                            {
                                Case (One)
                                {
                                    Return (Package (0x02)
                                    {
                                        One, 
                                        Package (0x01)
                                        {
                                            "\\_SB.PCI0.GFX0"
                                        }
                                    })
                                }
                                Case (0x02)
                                {
                                    Return (Package (0x02)
                                    {
                                        One, 
                                        Package (0x01)
                                        {
                                            "\\_SB.PCI0.SAT0.PRT1"
                                        }
                                    })
                                }
                                Case (0x03)
                                {
                                    Return (DEVS) /* \_SB_.PEPD.DEVS */
                                }
                                Default
                                {
                                    Return (Package (0x01)
                                    {
                                        Zero
                                    })
                                }

                            }
                        }

                        If ((Arg1 == One))
                        {
                            If (!(PEPY & One))
                            {
                                DerefOf (DEVX [Zero]) [One] = Zero
                            }

                            If (!(PEPY & 0x02))
                            {
                                DerefOf (DEVX [One]) [One] = Zero
                            }

                            If (!(PEPY & 0x04))
                            {
                                DerefOf (DEVX [0x02]) [One] = Zero
                            }

                            If (!(PEPY & 0x08))
                            {
                                DerefOf (DEVX [0x03]) [One] = Zero
                            }

                            If (!(PEPY & 0x10))
                            {
                                DerefOf (DEVX [0x04]) [One] = Zero
                            }

                            If (!(PEPY & 0x20))
                            {
                                DerefOf (DEVX [0x05]) [One] = Zero
                            }

                            If (!(PEPY & 0x40))
                            {
                                DerefOf (DEVX [0x06]) [One] = Zero
                            }

                            If (!(PEPY & 0x80))
                            {
                                DerefOf (DEVX [0x07]) [One] = Zero
                            }

                            Return (DEVX) /* \_SB_.PEPD.DEVX */
                        }
                    }
                }

                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x07                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If (((PEPC & 0x03) != One))
                        {
                            DerefOf (DEVY [0x06]) [One] = Zero
                            DerefOf (DEVY [0x07]) [One] = Zero
                            DerefOf (DEVY [0x08]) [One] = Zero
                            DerefOf (DEVY [0x09]) [One] = Zero
                        }

                        If (((PEPC & 0x03) != 0x02))
                        {
                            DerefOf (DEVY [0x05]) [One] = Zero
                            If (!(SPST & One))
                            {
                                DerefOf (DEVY [0x06]) [One] = Zero
                            }

                            If (!(SPST & 0x02))
                            {
                                DerefOf (DEVY [0x07]) [One] = Zero
                            }

                            If (!(SPST & 0x04))
                            {
                                DerefOf (DEVY [0x08]) [One] = Zero
                            }

                            If (!(SPST & 0x08))
                            {
                                DerefOf (DEVY [0x09]) [One] = Zero
                            }
                        }

                        If (((PEPC & 0x04) == Zero))
                        {
                            DerefOf (DEVY [0x0A]) [One] = Zero
                        }

                        If (((PEPC & 0x08) == Zero))
                        {
                            DerefOf (DEVY [0x0B]) [One] = Zero
                        }

                        If (((PEPC & 0x10) == Zero))
                        {
                            DerefOf (DEVY [0x0C]) [One] = Zero
                        }

                        If (((PEPC & 0x20) == Zero))
                        {
                            DerefOf (DEVY [0x0D]) [One] = Zero
                        }

                        If (((PEPC & 0x40) == Zero))
                        {
                            DerefOf (DEVY [0x0E]) [One] = Zero
                        }

                        If (((PEPC & 0x80) == Zero))
                        {
                            DerefOf (DEVY [0x0F]) [One] = Zero
                        }

                        If (((PEPC & 0x0100) == Zero))
                        {
                            DerefOf (DEVY [0x10]) [One] = Zero
                        }

                        If (((PEPC & 0x0200) == Zero))
                        {
                            DerefOf (DEVY [0x11]) [One] = Zero
                        }

                        Return (DEVY) /* \_SB_.PEPD.DEVY */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (BCCD) /* \_SB_.PEPD.BCCD */
                    }
                }

                Return (One)
            }
        }
    }

    Scope (_SB)
    {
        Device (BTKL)
        {
            Name (_HID, "INT3420" /* Intel Bluetooth RF Kill */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Windows 2012"))
                {
                    If ((BID == BW2C))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                GL0A &= 0x7F
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                GL0A |= 0x80
            }

            Method (PSTS, 0, NotSerialized)
            {
                Return (RDGP (0x57))
            }
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x01, 0x00001810, 0x06)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                ADBG ("CPU0 DEP Call")
                If ((S0ID == One))
                {
                    ADBG ("CPU0 DEP")
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
                Else
                {
                    ADBG ("CPU0 DEP NULL")
                    Return (Package (0x00){})
                }
            }
        }

        Processor (CPU1, 0x02, 0x00001810, 0x06)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                ADBG ("CPU1 DEP Call")
                If ((S0ID == One))
                {
                    ADBG ("CPU1 DEP")
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
                Else
                {
                    ADBG ("CPU1 DEP NULL")
                    Return (Package (0x00){})
                }
            }
        }

        Processor (CPU2, 0x03, 0x00001810, 0x06)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                ADBG ("CPU2 DEP Call")
                If ((S0ID == One))
                {
                    ADBG ("CPU2 DEP")
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
                Else
                {
                    ADBG ("CPU2 DEP NULL")
                    Return (Package (0x00){})
                }
            }
        }

        Processor (CPU3, 0x04, 0x00001810, 0x06)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                ADBG ("CPU3 DEP Call")
                If ((S0ID == One))
                {
                    ADBG ("CPU3 DEP")
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
                Else
                {
                    ADBG ("CPU3 DEP NULL")
                    Return (Package (0x00){})
                }
            }
        }

        Processor (CPU4, 0x05, 0x00001810, 0x06)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                ADBG ("CPU4 DEP Call")
                If ((S0ID == One))
                {
                    ADBG ("CPU4 DEP")
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
                Else
                {
                    ADBG ("CPU4 DEP NULL")
                    Return (Package (0x00){})
                }
            }
        }

        Processor (CPU5, 0x06, 0x00001810, 0x06)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                ADBG ("CPU5 DEP Call")
                If ((S0ID == One))
                {
                    ADBG ("CPU5 DEP")
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
                Else
                {
                    ADBG ("CPU5 DEP NULL")
                    Return (Package (0x00){})
                }
            }
        }

        Processor (CPU6, 0x07, 0x00001810, 0x06)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                ADBG ("CPU6 DEP Call")
                If ((S0ID == One))
                {
                    ADBG ("CPU6 DEP")
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
                Else
                {
                    ADBG ("CPU6 DEP NULL")
                    Return (Package (0x00){})
                }
            }
        }

        Processor (CPU7, 0x08, 0x00001810, 0x06)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                ADBG ("CPU7 DEP Call")
                If ((S0ID == One))
                {
                    ADBG ("CPU7 DEP")
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
                Else
                {
                    ADBG ("CPU7 DEP NULL")
                    Return (Package (0x00){})
                }
            }
        }
    }

    Scope (_TZ)
    {
        PowerResource (FN00, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (One)
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
            }
        }

        Device (FAN)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN00
            })
        }

        ThermalZone (THRM)
        {
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = \_SB.PCI0.LPCB.EC9C /* External reference */
                If ((Local0 > 0x72))
                {
                    Return (0x0EB2)
                }

                Return ((0x0AAC + (Local0 * 0x0A)))
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (0x0D68)
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (\_SB.CPTO)
                {
                    Return (0x0EF8)
                }
                Else
                {
                    Return (0x0FA2)
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If (\_SB.CPTO)
                {
                    Return (0x0EF8)
                }
                Else
                {
                    Return (0x0FA2)
                }
            }

            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                CTYP = Arg0
            }

            Name (_AL0, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN
            })
            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                If ((TCNT == 0x08))
                {
                    Return (Package (0x08)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3, 
                        \_PR.CPU4, 
                        \_PR.CPU5, 
                        \_PR.CPU6, 
                        \_PR.CPU7
                    })
                }

                If ((TCNT == 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3
                    })
                }

                If ((TCNT == 0x02))
                {
                    Return (Package (0x02)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1
                    })
                }

                Return (Package (0x01)
                {
                    \_PR.CPU0
                })
            }

            Name (_TC1, 0x02)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x05)  // _TC2: Thermal Constant 2
            Name (_TSP, 0x012C)  // _TSP: Thermal Sampling Period
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y10)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y13)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y14)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y15)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y16)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y11)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00010000,         // Address Length
                    _Y12)
                Memory32Fixed (ReadWrite,
                    0xFF700000,         // Address Base
                    0x00000200,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y10._BAS, RBR0)  // _BAS: Base Address
                RBR0 = (^^LPCB.RCBA << 0x0E)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._BAS, TBR0)  // _BAS: Base Address
                TBR0 = TBAB /* \TBAB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._LEN, TBLN)  // _LEN: Length
                If ((TBAB == Zero))
                {
                    TBLN = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, SNR0)  // _BAS: Base Address
                SNR0 = SRMB /* \SRMB */
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._BAS, MBR0)  // _BAS: Base Address
                MBR0 = (MHBR << 0x0F)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._BAS, DBR0)  // _BAS: Base Address
                DBR0 = (DIBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._BAS, EBR0)  // _BAS: Base Address
                EBR0 = (EPBR << 0x0C)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y16._BAS, XBR0)  // _BAS: Base Address
                XBR0 = (PXBR << 0x1A)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y16._LEN, XSZ0)  // _LEN: Length
                XSZ0 = (0x10000000 >> PXSZ) /* \_SB_.PCI0.PXSZ */
                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DIDX & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD1F, Arg0)
        }
    }

    Scope (_GPE)
    {
        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.P0P1, 0x02) // Device Wake
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((RP1D == Zero))
            {
                \_SB.PCI0.RP01.HPME ()
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If ((RP2D == Zero))
            {
                \_SB.PCI0.RP02.HPME ()
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If ((RP3D == Zero))
            {
                \_SB.PCI0.RP03.HPME ()
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If ((RP4D == Zero))
            {
                \_SB.PCI0.RP04.HPME ()
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If ((RP5D == Zero))
            {
                \_SB.PCI0.RP05.HPME ()
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            If ((RP6D == Zero))
            {
                \_SB.PCI0.RP06.HPME ()
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }

            If ((RP7D == Zero))
            {
                \_SB.PCI0.RP07.HPME ()
                Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            }

            If ((RP8D == Zero))
            {
                \_SB.PCI0.RP08.HPME ()
                Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            }

            If ((D1F0 == One))
            {
                \_SB.PCI0.PEG0.HPME ()
                Notify (\_SB.PCI0.PEG0, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEG0.PEGP, 0x02) // Device Wake
            }

            If ((D1F1 == One))
            {
                \_SB.PCI0.PEG1.HPME ()
                Notify (\_SB.PCI0.PEG1, 0x02) // Device Wake
            }

            If ((D1F2 == One))
            {
                \_SB.PCI0.PEG2.HPME ()
                Notify (\_SB.PCI0.PEG2, 0x02) // Device Wake
            }
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.EHC1.PMEE && \_SB.PCI0.EHC1.PMES))
            {
                Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.EHC2.PMEE && \_SB.PCI0.EHC2.PMES))
            {
                Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.XHC.PMEE && \_SB.PCI0.XHC.PMES))
            {
                Notify (\_SB.PCI0.XHC, 0x02) // Device Wake
            }
            ElseIf ((\_SB.PCI0.XHC.PMEE == Zero))
            {
                \_SB.PCI0.XHC.PMES = One
            }

            If ((\_SB.PCI0.HDEF.PMEE && \_SB.PCI0.HDEF.PMES))
            {
                Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
            }
        }

        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += One
            If (((RP1D == Zero) && \_SB.PCI0.RP01.HPSX))
            {
                P8XH (One, One, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP01.PDCX)
                {
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.HPSX = One
                    If (!\_SB.PCI0.RP01.PDSX)
                    {
                        \_SB.PCI0.RP01.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((RP2D == Zero) && \_SB.PCI0.RP02.HPSX))
            {
                P8XH (One, 0x02, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP02.PDCX)
                {
                    \_SB.PCI0.RP02.PDCX = One
                    \_SB.PCI0.RP02.HPSX = One
                    If (!\_SB.PCI0.RP02.PDSX)
                    {
                        \_SB.PCI0.RP02.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP02.HPSX = One
                }
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.HPSX))
            {
                P8XH (One, 0x03, One)
                P8XH (Zero, L01C, One)
                If (((BID != BICO) && (BID != BICC)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP03.PDCX)
                {
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.HPSX = One
                    If (!\_SB.PCI0.RP03.PDSX)
                    {
                        \_SB.PCI0.RP03.L0SE = Zero
                    }

                    If (((BID != BICO) && (BID != BICC)))
                    {
                        Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((RP4D == Zero) && \_SB.PCI0.RP04.HPSX))
            {
                P8XH (One, 0x04, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP04.PDCX)
                {
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.HPSX = One
                    If (!\_SB.PCI0.RP04.PDSX)
                    {
                        \_SB.PCI0.RP04.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }

            If (((RP5D == Zero) && \_SB.PCI0.RP05.HPSX))
            {
                P8XH (One, 0x05, One)
                P8XH (Zero, L01C, One)
                If (((BID != BICO) && (BID != BICC)))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP05.PDCX)
                {
                    \_SB.PCI0.RP05.PDCX = One
                    \_SB.PCI0.RP05.HPSX = One
                    If (!\_SB.PCI0.RP05.PDSX)
                    {
                        \_SB.PCI0.RP05.L0SE = Zero
                    }

                    If (((BID != BICO) && (BID != BICC)))
                    {
                        Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP05.HPSX = One
                }
            }

            If (((RP6D == Zero) && \_SB.PCI0.RP06.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP06.PDCX)
                {
                    \_SB.PCI0.RP06.PDCX = One
                    \_SB.PCI0.RP06.HPSX = One
                    If (!\_SB.PCI0.RP06.PDSX)
                    {
                        \_SB.PCI0.RP06.L0SE = Zero
                    }

                    Notify (\_SB.PCI0.RP06, Zero) // Bus Check
                }
                Else
                {
                    \_SB.PCI0.RP06.HPSX = One
                }
            }

            If (((RP7D == Zero) && \_SB.PCI0.RP07.HPSX))
            {
                P8XH (One, 0x07, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP07.PDCX)
                {
                    \_SB.PCI0.RP07.PDCX = One
                    \_SB.PCI0.RP07.HPSX = One
                    If (!\_SB.PCI0.RP07.PDSX)
                    {
                        \_SB.PCI0.RP07.L0SE = Zero
                    }

                    If ((PFLV == FDTP))
                    {
                        Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                    }
                    Else
                    {
                    }
                }
                Else
                {
                    \_SB.PCI0.RP07.HPSX = One
                }
            }

            If (((RP8D == Zero) && \_SB.PCI0.RP08.HPSX))
            {
                P8XH (One, 0x08, One)
                P8XH (Zero, L01C, One)
                Sleep (0x64)
                If (\_SB.PCI0.RP08.PDCX)
                {
                    \_SB.PCI0.RP08.PDCX = One
                    \_SB.PCI0.RP08.HPSX = One
                    If (!\_SB.PCI0.RP08.PDSX)
                    {
                        \_SB.PCI0.RP08.L0SE = Zero
                    }

                    If ((PFLV == FDTP))
                    {
                        Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                    }
                    Else
                    {
                    }
                }
                Else
                {
                    \_SB.PCI0.RP08.HPSX = One
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            If (CondRefOf (DTSE))
            {
                If ((DTSE >= One)){}
            }

            If (CondRefOf (\_SB.PCCD.PENB))
            {
                If ((\_SB.PCCD.PENB == One))
                {
                    Notify (\_SB.PCCD, 0x80) // Status Change
                }
            }
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.SBUS.HSTS = 0x20
        }

        Method (OSUP, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x0548)
            OperationRegion (PXVD, SystemMemory, Local0, 0x08)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                TB2P,   32, 
                P2TB,   32
            }

            Local1 = 0x64
            P2TB = 0x0D
            While ((Local1 > Zero))
            {
                Local1 = (Local1 - One)
                Local2 = TB2P /* \_GPE.OSUP.TB2P */
                If ((Local2 == Ones))
                {
                    Return (0x02)
                }

                If ((Local2 & One))
                {
                    Break
                }

                Sleep (0x32)
            }

            P2TB = Zero
            Return (One)
        }

        Method (MMTB, 0, NotSerialized)
        {
            ADBG ("MMTB")
            Local0 = PEBS /* \PEBS */
            Local0 += 0x000E0000
            Local1 = (ToInteger (TBSE) - One)
            Local1 *= 0x1000
            Local0 += Local1
            OperationRegion (MMMM, SystemMemory, Local0, 0x1A)
            Field (MMMM, AnyAcc, NoLock, Preserve)
            {
                Offset (0x19), 
                SBUS,   8
            }

            Local2 = SBUS /* \_GPE.MMTB.SBUS */
            Local0 = PEBS /* \PEBS */
            Local2 *= 0x00100000
            Local0 += Local2
            Return (Local0)
        }

        Method (OSUW, 0, NotSerialized)
        {
            ADBG ("OSUW")
            Local0 = MMTB ()
            OperationRegion (PXVD, SystemMemory, Local0, 0x04)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                VEDI,   32
            }

            Local1 = VEDI /* \_GPE.OSUW.VEDI */
            If ((Local1 != Ones))
            {
                Return (OSUP (Local0))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (TBFF, 0, NotSerialized)
        {
            ADBG ("TBFF")
            Local0 = MMTB ()
            OperationRegion (PXVD, SystemMemory, Local0, 0x04)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                VEDI,   32
            }

            Local1 = VEDI /* \_GPE.TBFF.VEDI */
            If ((Local1 == Ones))
            {
                Return (OSUP (Local0))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (TSUB, 0, NotSerialized)
        {
            Local0 = PEBS /* \PEBS */
            Local0 += 0x000E0000
            Local1 = (ToInteger (TBSE) - One)
            Local1 *= 0x1000
            Local0 += Local1
            OperationRegion (MMMM, SystemMemory, Local0, 0x1A)
            Field (MMMM, AnyAcc, NoLock, Preserve)
            {
                Offset (0x19), 
                SBUS,   8
            }

            Return (SBUS) /* \_GPE.TSUB.SBUS */
        }

        Method (WSUB, 0, NotSerialized)
        {
            Local0 = Zero
            Local1 = Zero
            While (One)
            {
                Local1 = TSUB ()
                If (Local1)
                {
                    Break
                }
                Else
                {
                    Local0 += One
                    If ((Local0 > 0x03E8))
                    {
                        Sleep (0x03E8)
                        ADBG ("WSUB Deadlock")
                    }
                    Else
                    {
                        Sleep (0x10)
                    }
                }
            }
        }

        Method (WWAK, 0, NotSerialized)
        {
            Local0 = Zero
            Local1 = Zero
            While (One)
            {
                Acquire (WFDM, 0xFFFF)
                Local0 = WKFN /* \WKFN */
                Release (WFDM)
                If (Local0)
                {
                    Break
                }
                Else
                {
                    Local1 += One
                    If ((Local1 > 0x03E8))
                    {
                        Sleep (0x03E8)
                        ADBG ("WWAK Deadlock")
                    }
                    Else
                    {
                        Sleep (0x10)
                    }
                }
            }

            Return (Local1)
        }

        Method (_E2A, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            WWAK ()
            WSUB ()
            OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
            Field (SPRT, ByteAcc, Lock, Preserve)
            {
                SSMP,   8
            }

            ADBG ("_E2A")
            Acquire (OSUM, 0xFFFF)
            Local0 = TBFF ()
            If ((Local0 == One))
            {
                Sleep (0x10)
                Release (OSUM)
                Return (Zero)
            }

            If ((Local0 == 0x02))
            {
                If (NOHP)
                {
                    ADBG ("_E2A Ntfy")
                    If ((TBSE == 0x05))
                    {
                        Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                    }

                    If ((TBSE == 0x03))
                    {
                        Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                    }
                }

                Sleep (0x10)
                Release (OSUM)
                Return (Zero)
            }

            If ((SOHP == One))
            {
                ADBG ("_E2A SMI")
                TBSF = 0x15
                SSMP = 0xF7
            }

            If ((NOHP == One))
            {
                ADBG ("_E2A Ntfy")
                If ((TBSE == 0x05))
                {
                    Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                }

                If ((TBSE == 0x03))
                {
                    Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                }
            }

            Sleep (0x10)
            Release (OSUM)
        }

        Method (_L00, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((BID == BRH))
            {
                ADBG ("Rotation Lock")
                Sleep (0x03E8)
                \_SB.PCI0.GFX0.IUEH (0x04)
            }
        }
    }

    Name (RPA0, 0x001C0000)
    Name (RPA1, 0x001C0001)
    Name (RPA2, 0x001C0002)
    Name (RPA3, 0x001C0003)
    Name (RPA4, 0x001C0004)
    Name (RPA5, 0x001C0005)
    Name (RPA6, 0x001C0006)
    Name (RPA7, 0x001C0007)
    Name (PCHS, 0x00000001)
    Name (SRMB, 0x9FA10000)
    Name (PML1, 0x00000000)
    Name (PML2, 0x00000000)
    Name (PML3, 0x00000000)
    Name (PML4, 0x00000000)
    Name (PML5, 0x00000000)
    Name (PML6, 0x00000000)
    Name (PML7, 0x00000000)
    Name (PML8, 0x00000000)
    Name (PNL1, 0x00000000)
    Name (PNL2, 0x00000000)
    Name (PNL3, 0x00000000)
    Name (PNL4, 0x00000000)
    Name (PNL5, 0x00000000)
    Name (PNL6, 0x00000000)
    Name (PNL7, 0x00000000)
    Name (PNL8, 0x00000000)
    Scope (\)
    {
        OperationRegion (IO_D, SystemIO, 0x0810, 0x04)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x28), 
            Offset (0x2A), 
                ,   3, 
            GPE3,   1, 
                ,   7, 
            GPEB,   1, 
            Offset (0x3C), 
                ,   1, 
            UPRW,   1, 
            Offset (0x42), 
                ,   1, 
            GPEC,   1
        }

        Field (PMIO, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x20), 
            Offset (0x22), 
                ,   3, 
            GPS3,   1, 
                ,   7, 
            GPSB,   1, 
            Offset (0x64), 
                ,   9, 
            SCIS,   1, 
            Offset (0x66)
        }

        OperationRegion (PMLP, SystemIO, (PMBS + 0x80), 0x20)
        Field (PMLP, ByteAcc, NoLock, Preserve)
        {
            Offset (0x10), 
            Offset (0x11), 
            GE08,   1, 
                ,   8, 
            GE17,   1, 
                ,   27, 
            GE45,   1, 
                ,   5, 
            GE51,   1, 
            Offset (0x20)
        }

        Field (PMLP, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x01), 
            GS08,   1, 
                ,   8, 
            GS17,   1, 
                ,   27, 
            GS45,   1, 
                ,   5, 
            GS51,   1, 
            Offset (0x10)
        }

        OperationRegion (GPR, SystemIO, GPBS, 0x0400)
        Field (GPR, ByteAcc, NoLock, Preserve)
        {
            GU00,   8, 
            GU01,   8, 
            GU02,   8, 
            GU03,   8, 
            GIO0,   8, 
            GIO1,   8, 
            GIO2,   8, 
            GIO3,   8, 
            Offset (0x0C), 
            GL00,   8, 
            GL01,   8, 
            GL02,   8, 
            GP24,   1, 
                ,   2, 
            GP27,   1, 
            GP28,   1, 
            Offset (0x10), 
            Offset (0x18), 
            GB00,   8, 
            GB01,   8, 
            GB02,   8, 
            GB03,   8, 
            Offset (0x2C), 
            GIV0,   8, 
            GIV1,   8, 
            GIV2,   8, 
            GIV3,   8, 
            GU04,   8, 
            GU05,   8, 
            GU06,   8, 
            GU07,   8, 
            GIO4,   8, 
            GIO5,   8, 
            GIO6,   8, 
            GIO7,   8, 
            GL04,   8, 
            GL05,   8, 
            GL06,   8, 
            GL07,   8, 
            Offset (0x40), 
            GU08,   8, 
            GU09,   8, 
            GU0A,   8, 
            GU0B,   8, 
            GIO8,   8, 
            GIO9,   8, 
            GIOA,   8, 
            GIOB,   8, 
            GL08,   8, 
            GL09,   8, 
            GL0A,   8, 
            GL0B,   8
        }

        OperationRegion (GPRL, SystemIO, GPBS, 0x40)
        Field (GPRL, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            GO08,   1, 
            GO09,   1, 
                ,   3, 
            GO13,   1, 
            GO14,   1, 
                ,   2, 
            GO17,   1, 
                ,   27, 
            GO45,   1, 
                ,   5, 
            GO51,   1, 
            Offset (0x10), 
            Offset (0x30), 
            GR00,   32, 
            GR01,   32, 
            GR02,   32
        }

        OperationRegion (RCRB, SystemMemory, SRCB, 0x4000)
        Field (RCRB, DWordAcc, Lock, Preserve)
        {
            Offset (0x1000), 
            Offset (0x2330), 
            AFEA,   32, 
            AFED,   32, 
            AFES,   16, 
            AFER,   16, 
            Offset (0x3000), 
            Offset (0x331C), 
            Offset (0x331F), 
            PMFS,   1, 
            Offset (0x3320), 
            CKEN,   32, 
            Offset (0x3404), 
            HPAS,   2, 
                ,   5, 
            HPAE,   1, 
            Offset (0x3418), 
                ,   1, 
            ADSD,   1, 
            SATD,   1, 
            SMBD,   1, 
            HDAD,   1, 
            Offset (0x341A), 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1, 
            RP7D,   1, 
            RP8D,   1, 
            Offset (0x359C), 
            UP0D,   1, 
            UP1D,   1, 
            UP2D,   1, 
            UP3D,   1, 
            UP4D,   1, 
            UP5D,   1, 
            UP6D,   1, 
            UP7D,   1, 
            UP8D,   1, 
            UP9D,   1, 
            UPAD,   1, 
            UPBD,   1, 
            UPCD,   1, 
            UPDD,   1, 
                ,   1, 
            Offset (0x359E)
        }

        OperationRegion (IO_P, SystemIO, 0x1000, 0x04)
        Field (IO_P, ByteAcc, NoLock, Preserve)
        {
            TRPF,   8
        }
    }

    Scope (_SB)
    {
        Method (RDGI, 1, Serialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                        ,   30, 
                    TEMP,   1
                }

                Return (TEMP) /* \_SB_.RDGI.TEMP */
            }
        }

        Method (RDGP, 1, Serialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                        ,   31, 
                    TEMP,   1
                }

                Return (TEMP) /* \_SB_.RDGP.TEMP */
            }
        }

        Method (WTGP, 2, Serialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                        ,   31, 
                    TEMP,   1
                }

                TEMP = Arg1
            }
        }

        Method (WTIN, 2, Serialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    TEMP,   1
                }

                TEMP = Arg1
            }
        }

        Method (WPGP, 2, Serialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0104) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   2
                }

                TEMP = Arg1
            }
        }

        Method (GP2N, 2, Serialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                OperationRegion (LGPI, SystemIO, Local0, 0x04)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   1
                }

                TEMP = Arg1
            }
        }

        Method (GP2A, 2, Serialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = ((GPBS + 0x0104) + (Arg0 * 0x08))
                OperationRegion (LGP2, SystemIO, Local0, 0x04)
                Field (LGP2, AnyAcc, NoLock, Preserve)
                {
                    GPWP,   2, 
                    GPIS,   1
                }

                If ((Arg1 == One))
                {
                    GPIS = Zero
                    GPWP = Zero
                }
                Else
                {
                    GPWP = 0x02
                    GPIS = One
                }

                Local0 = (GPBS + 0x10)
                OperationRegion (LGPI, SystemIO, Local0, 0x02)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   16
                }

                If ((Arg0 >= 0x2D))
                {
                    Local1 = (Arg0 - 0x28)
                }
                ElseIf ((Arg0 <= 0x0A))
                {
                    Local1 = (Arg0 - 0x08)
                }
                Else
                {
                    Local1 = (Arg0 - 0x0A)
                }

                Local2 = (One << Local1)
                If (Arg1)
                {
                    TEMP |= Local2
                }
                Else
                {
                    TEMP &= ~Local2
                }
            }
        }

        Method (GP2B, 2, Serialized)
        {
            If ((Arg0 <= 0x5E))
            {
                Local0 = (GPBS + 0x10)
                OperationRegion (LGPI, SystemIO, Local0, 0x02)
                Field (LGPI, AnyAcc, NoLock, Preserve)
                {
                    TEMP,   16
                }

                If ((Arg0 >= 0x2D))
                {
                    Local1 = (Arg0 - 0x28)
                }
                ElseIf ((Arg0 <= 0x0A))
                {
                    Local1 = (Arg0 - 0x08)
                }
                Else
                {
                    Local1 = (Arg0 - 0x0A)
                }

                Local2 = (One << Local1)
                If (Arg1)
                {
                    TEMP |= Local2
                }
                Else
                {
                    TEMP &= ~Local2
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (LTRE, Zero)
        Name (OBFF, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Device (EHC1)
        {
            Name (_ADR, 0x001D0000)  // _ADR: Address
            OperationRegion (PWKE, PCI_Config, 0x54, 0x12)
            Field (PWKE, DWordAcc, NoLock, Preserve)
            {
                Offset (0x01), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0x0E), 
                    ,   1, 
                PWUC,   8
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    PWUC = Ones
                }
                Else
                {
                    PWUC = Zero
                }

                Local0 = KUPP /* External reference */
                Local0 &= 0x0F
                If ((Local0 == Zero))
                {
                    KUPP &= 0xF0
                    KUPP |= 0x03
                }
                Else
                {
                    KUPP &= 0xF0
                    KUPP |= One
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (HUBN)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (PR01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCA, Package (0x04)
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCA) /* \_SB_.PCI0.EHC1.HUBN.PR01._UPC.UPCA */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01._PLD.PLDP */
                    }

                    Device (PR11)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x19, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._PLD.PLDP */
                        }
                    }

                    Device (PR12)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x19, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._PLD.PLDP */
                        }
                    }

                    Device (PR13)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x11, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._PLD.PLDP */
                        }
                    }

                    Device (PR14)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x11, 0x10, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._PLD.PLDP */
                        }
                    }

                    Device (PR15)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._PLD.PLDP */
                        }
                    }

                    Device (PR16)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._PLD.PLDP */
                        }
                    }

                    Device (PR17)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17._PLD.PLDP */
                        }
                    }

                    Device (PR18)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR18._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR18._PLD.PLDP */
                        }
                    }
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x03))
            }
        }

        Device (EHC2)
        {
            Name (_ADR, 0x001A0000)  // _ADR: Address
            OperationRegion (PWKE, PCI_Config, 0x54, 0x12)
            Field (PWKE, DWordAcc, NoLock, Preserve)
            {
                Offset (0x01), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0x0E), 
                    ,   1, 
                PWUC,   6
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    PWUC = Ones
                }
                Else
                {
                    PWUC = Zero
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (HUBN)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (PR01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCA, Package (0x04)
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Return (UPCA) /* \_SB_.PCI0.EHC2.HUBN.PR01._UPC.UPCA */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01._PLD.PLDP */
                    }

                    Device (PR11)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x61, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // a.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._PLD.PLDP */
                        }
                    }

                    Device (PR12)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._PLD.PLDP */
                        }

                        Alias (SBV1, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                            {
                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == One))
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x07                                             // .
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (One)
                                            {
                                                 0x00                                             // .
                                            })
                                        }
                                    }
                                    Case (One)
                                    {
                                        If ((SDGV == 0xFF))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Return (One)
                                        }
                                    }
                                    Case (0x02)
                                    {
                                        Return (SDGV) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12.SDGV */
                                    }

                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR13)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._PLD.PLDP */
                        }

                        Device (WCAM)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    Zero, 
                                    0xFF, 
                                    Zero, 
                                    Zero
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13.WCAM._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x14)
                                    {
                                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
                                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13.WCAM._PLD.PLDP */
                            }
                        }
                    }

                    Device (PR14)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._PLD.PLDP */
                        }
                    }

                    Device (PR15)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._PLD.PLDP */
                        }
                    }

                    Device (PR16)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._PLD.PLDP */
                        }
                    }
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x03))
            }
        }

        Device (XHC)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If ((S0ID == One))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
                Else
                {
                    Return (Package (0x00){})
                }
            }

            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x40), 
                    ,   11, 
                SWAI,   1, 
                Offset (0x44), 
                    ,   12, 
                SAIP,   2, 
                Offset (0x48), 
                Offset (0x74), 
                D0D3,   2, 
                Offset (0x75), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0xB0), 
                    ,   13, 
                MB13,   1, 
                MB14,   1, 
                Offset (0xB4), 
                Offset (0xD0), 
                PR2,    32, 
                PR2M,   32, 
                PR3,    32, 
                PR3M,   32
            }

            OperationRegion (XHCP, SystemMemory, (PEBS + 0x000A0000), 0x0100)
            Field (XHCP, AnyAcc, Lock, Preserve)
            {
                Offset (0x04), 
                PDBM,   16, 
                Offset (0x10), 
                MEMB,   64
            }

            Method (PR2S, 1, Serialized)
            {
                If (((CDID & 0xF000) == 0x8000))
                {
                    Switch (Arg0)
                    {
                        Case (One)
                        {
                            Return (One)
                        }
                        Case (0x02)
                        {
                            Return (0x02)
                        }
                        Case (0x03)
                        {
                            Return (0x04)
                        }
                        Case (0x04)
                        {
                            Return (0x08)
                        }
                        Case (0x05)
                        {
                            Return (0x0100)
                        }
                        Case (0x06)
                        {
                            Return (0x0200)
                        }
                        Case (0x07)
                        {
                            Return (0x0400)
                        }
                        Case (0x08)
                        {
                            Return (0x0800)
                        }
                        Case (0x09)
                        {
                            Return (0x10)
                        }
                        Case (0x0A)
                        {
                            Return (0x20)
                        }
                        Case (0x0B)
                        {
                            Return (0x1000)
                        }
                        Case (0x0C)
                        {
                            Return (0x2000)
                        }
                        Case (0x0D)
                        {
                            Return (0x40)
                        }
                        Case (0x0E)
                        {
                            Return (0x80)
                        }
                        Case (0x0F)
                        {
                            Return (0x4000)
                        }

                    }
                }
                Else
                {
                    Switch (Arg0)
                    {
                        Case (One)
                        {
                            Return (One)
                        }
                        Case (0x02)
                        {
                            Return (0x02)
                        }
                        Case (0x03)
                        {
                            Return (0x04)
                        }
                        Case (0x04)
                        {
                            Return (0x08)
                        }
                        Case (0x05)
                        {
                            Return (0x10)
                        }
                        Case (0x06)
                        {
                            Return (0x20)
                        }
                        Case (0x07)
                        {
                            Return (0x40)
                        }
                        Case (0x08)
                        {
                            Return (0x80)
                        }
                        Case (0x09)
                        {
                            Return (0x0100)
                        }

                    }
                }
            }

            Name (XRST, Zero)
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                Local2 = MEMB /* \_SB_.PCI0.XHC_.MEMB */
                Local1 = PDBM /* \_SB_.PCI0.XHC_.PDBM */
                PDBM &= 0xFFFFFFF9
                Local3 = D0D3 /* \_SB_.PCI0.XHC_.D0D3 */
                D0D3 = Zero
                MEMB = SRMB /* \SRMB */
                PDBM = (Local1 | 0x02)
                OperationRegion (MCA1, SystemMemory, SRMB, 0x9000)
                Field (MCA1, DWordAcc, Lock, Preserve)
                {
                    Offset (0x510), 
                    PSC1,   32, 
                    Offset (0x520), 
                    PSC2,   32, 
                    Offset (0x530), 
                    PSC3,   32, 
                    Offset (0x540), 
                    PSC4,   32, 
                    Offset (0x80E0), 
                        ,   15, 
                    AX15,   1, 
                    Offset (0x8154), 
                        ,   31, 
                    CLK2,   1, 
                    Offset (0x816C), 
                        ,   2, 
                    CLK0,   1, 
                        ,   11, 
                    CLK1,   1
                }

                If ((PCHS == 0x02))
                {
                    MB13 = Zero
                    MB14 = Zero
                    CLK0 = Zero
                    CLK1 = Zero
                }

                CLK2 = One
                If ((PCHS == 0x02))
                {
                    While (((((PSC1 & 0x03F8) == 0x02E0) || ((PSC2 & 
                        0x03F8) == 0x02E0)) || (((PSC3 & 0x03F8) == 0x02E0) || ((PSC4 & 
                        0x03F8) == 0x02E0))))
                    {
                        Stall (0x0A)
                    }

                    Local4 = Zero
                    Local0 = (PSC1 & 0xFFFFFFFD)
                    If (((Local0 & 0x000203F9) == 0x02A0))
                    {
                        PSC1 = (Local0 | 0x80000000)
                        Local4 |= One
                    }

                    Local0 = (PSC2 & 0xFFFFFFFD)
                    If (((Local0 & 0x000203F9) == 0x02A0))
                    {
                        PSC2 = (Local0 | 0x80000000)
                        Local4 |= 0x02
                    }

                    Local0 = (PSC3 & 0xFFFFFFFD)
                    If (((Local0 & 0x000203F9) == 0x02A0))
                    {
                        PSC3 = (Local0 | 0x80000000)
                        Local4 |= 0x04
                    }

                    Local0 = (PSC4 & 0xFFFFFFFD)
                    If (((Local0 & 0x000203F9) == 0x02A0))
                    {
                        PSC4 = (Local0 | 0x80000000)
                        Local4 |= 0x08
                    }

                    If (Local4)
                    {
                        Sleep (0x65)
                        If ((Local4 & One))
                        {
                            Local0 = (PSC1 & 0xFFFFFFFD)
                            PSC1 = (Local0 | 0x00FE0000)
                        }

                        If ((Local4 & 0x02))
                        {
                            Local0 = (PSC2 & 0xFFFFFFFD)
                            PSC2 = (Local0 | 0x00FE0000)
                        }

                        If ((Local4 & 0x04))
                        {
                            Local0 = (PSC3 & 0xFFFFFFFD)
                            PSC3 = (Local0 | 0x00FE0000)
                        }

                        If ((Local4 & 0x08))
                        {
                            Local0 = (PSC4 & 0xFFFFFFFD)
                            PSC4 = (Local0 | 0x00FE0000)
                        }
                    }

                    AX15 = One
                }

                SWAI = Zero
                SAIP = Zero
                If (CondRefOf (\_SB.PCI0.XHC.PS0X))
                {
                    PS0X ()
                }

                PDBM &= 0xFFFFFFFD
                MEMB = Local2
                PDBM = Local1
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                PMES = One
                PMEE = One
                Local2 = MEMB /* \_SB_.PCI0.XHC_.MEMB */
                Local1 = PDBM /* \_SB_.PCI0.XHC_.PDBM */
                PDBM &= 0xFFFFFFF9
                MEMB = SRMB /* \SRMB */
                PDBM |= 0x02
                OperationRegion (MCA1, SystemMemory, SRMB, 0x9000)
                Field (MCA1, DWordAcc, Lock, Preserve)
                {
                    Offset (0x80E0), 
                        ,   15, 
                    AX15,   1, 
                    Offset (0x8154), 
                        ,   31, 
                    CLK2,   1, 
                    Offset (0x816C), 
                        ,   2, 
                    CLK0,   1, 
                        ,   11, 
                    CLK1,   1, 
                    Offset (0x8170)
                }

                Local3 = D0D3 /* \_SB_.PCI0.XHC_.D0D3 */
                If ((Local3 == 0x03))
                {
                    D0D3 = Zero
                }

                If ((PCHS == 0x02))
                {
                    MB13 = One
                    MB14 = One
                    CLK0 = One
                    CLK1 = One
                }

                CLK2 = Zero
                If ((PCHS == 0x02))
                {
                    AX15 = Zero
                }

                SWAI = One
                SAIP = One
                If (CondRefOf (\_SB.PCI0.XHC.PS3X))
                {
                    PS3X ()
                }

                If ((Local3 == 0x03))
                {
                    D0D3 = 0x03
                }

                PDBM &= 0xFFFFFFFD
                MEMB = Local2
                PDBM = Local1
            }

            Method (CUID, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (POSC, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, CDW1)
                CreateDWordField (Arg2, 0x08, CDW3)
                If ((XHCI == Zero))
                {
                    CDW1 |= 0x02
                }

                If (!(CDW1 & One))
                {
                    If ((CDW3 & One))
                    {
                        ESEL ()
                    }
                    ElseIf (((CDID & 0xF000) == 0x8000))
                    {
                        If ((Arg0 > One))
                        {
                            XSEL ()
                        }
                        Else
                        {
                            CDW1 |= 0x0A
                        }
                    }
                    ElseIf ((Arg0 > 0x02))
                    {
                        XSEL ()
                    }
                    Else
                    {
                        CDW1 |= 0x0A
                    }
                }

                Return (Arg2)
            }

            Method (XSEL, 0, Serialized)
            {
                If ((MAUL == One))
                {
                    If (((XHCI == 0x02) || (XHCI == 0x03)))
                    {
                        XUSB = One
                        XRST = One
                        PR3 = U3SS /* \U3SS */
                        PR2 = U2PR /* \U2PR */
                    }
                }
                ElseIf (((XHCI == 0x02) || (XHCI == 0x03)))
                {
                    XUSB = One
                    XRST = One
                    Local0 = Zero
                    Local0 = (PR3 & 0xFFFFFFC0)
                    PR3 = (Local0 | PR3M) /* \_SB_.PCI0.XHC_.PR3M */
                    Local0 = Zero
                    Local0 = (PR2 & 0xFFFF8000)
                    PR2 = (Local0 | PR2M) /* \_SB_.PCI0.XHC_.PR2M */
                }
            }

            Method (ESEL, 0, Serialized)
            {
                If (((XHCI == 0x02) || (XHCI == 0x03)))
                {
                    PR3 &= 0xFFFFFFC0
                    PR2 &= 0xFFFF8000
                    XUSB = Zero
                    XRST = Zero
                }
            }

            Method (XWAK, 0, Serialized)
            {
                If (((XUSB == One) || (XRST == One)))
                {
                    XSEL ()
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                Local0 = KUPP /* External reference */
                Local0 &= 0xF0
                If ((Local0 == Zero))
                {
                    KUPP &= 0x0F
                    KUPP |= 0x30
                }
                Else
                {
                    KUPP &= 0x0F
                    KUPP |= 0x10
                }
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (One) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS01._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (One) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS01._PLD.PLDP */
                    }
                }

                Device (HS02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x02) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS02._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x02) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS02._PLD.PLDP */
                    }
                }

                Device (HS03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x03) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS03._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x71, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x03) & PR2))
                        {
                            VIS &= Zero
                        }

                        If (((CDID & 0xF000) == 0x9000))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS03._PLD.PLDP */
                    }
                }

                Device (HS04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x04) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS04._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x71, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x04) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS04._PLD.PLDP */
                    }
                }

                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x05) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS05._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x61, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // a.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x05) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS05._PLD.PLDP */
                    }
                }

                Device (HS06)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x06) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS06._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x31, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 1.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x06) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS06._PLD.PLDP */
                    }
                }

                Device (HS07)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x07) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS07._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // %.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x07) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS07._PLD.PLDP */
                    }

                    Device (WCAM)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS07.WCAM._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x25, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // %.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS07.WCAM._PLD.PLDP */
                        }
                    }
                }

                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x08) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS08._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x71, 0x0C, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x08) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS08._PLD.PLDP */
                    }
                }

                Device (HS09)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x09) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS09._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x71, 0x0C, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x09) & PR2))
                        {
                            VIS &= Zero
                        }

                        If (((CDID & 0xF000) == 0x9000))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS09._PLD.PLDP */
                    }
                }

                Device (HS10)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0A)
                        }
                        Else
                        {
                            Return (0xFA)
                        }
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x0A) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS10._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x71, 0x0C, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x0A) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS10._PLD.PLDP */
                    }
                }

                Device (HS11)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0xFB)
                        }
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x0B) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS11._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x0B) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS11._PLD.PLDP */
                    }
                }

                Device (HS12)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0C)
                        }
                        Else
                        {
                            Return (0xFC)
                        }
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x0C) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS12._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x69, 0x0C, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x0C) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS12._PLD.PLDP */
                    }
                }

                Device (HS13)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0D)
                        }
                        Else
                        {
                            Return (0xFD)
                        }
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x0D) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS13._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x71, 0x0C, 0x80, 0x06, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x0D) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS13._PLD.PLDP */
                    }
                }

                Device (HS14)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x0E) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS14._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x71, 0x0C, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x0E) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS14._PLD.PLDP */
                    }
                }

                Device (HS15)
                {
                    Name (_ADR, 0x0F)  // _ADR: Address
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        If (!(PR2S (0x0F) & PR2))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS15._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x71, 0x0C, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR2S (0x0F) & PR2))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS15._PLD.PLDP */
                    }
                }

                Device (SSP1)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x10)
                        }
                        Else
                        {
                            Return (0x0A)
                        }
                    }

                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & One))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP1._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & One))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP1._PLD.PLDP */
                    }
                }

                Device (SSP2)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x11)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If ((PROI == One))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP2._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x69, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x02))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP2._PLD.PLDP */
                    }
                }

                Device (SSP3)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x12)
                        }
                        Else
                        {
                            Return (0x0C)
                        }
                    }

                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & 0x04))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP3._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x71, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x04))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP3._PLD.PLDP */
                    }
                }

                Device (SSP4)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x13)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Name (_STA, 0x0F)  // _STA: Status
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & 0x08))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP4._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x71, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x08))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP4._PLD.PLDP */
                    }
                }

                Device (SSP5)
                {
                    Name (_ADR, 0x14)  // _ADR: Address
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & 0x10))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP5._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x71, 0x0C, 0x80, 0x04, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x10))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP5._PLD.PLDP */
                    }
                }

                Device (SSP6)
                {
                    Name (_ADR, 0x15)  // _ADR: Address
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (!(PR3 & 0x20))
                        {
                            UPCP [Zero] = Zero
                        }

                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP6._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                                /* 0008 */  0x71, 0x0C, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00   // q.......
                            }
                        })
                        CreateBitField (DerefOf (PLDP [Zero]), 0x40, VIS)
                        If (!(PR3 & 0x20))
                        {
                            VIS &= Zero
                        }

                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP6._PLD.PLDP */
                    }
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x03))
            }
        }

        Device (HDEF)
        {
            Name (_ADR, 0x001B0000)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                DCKA,   1, 
                Offset (0x01), 
                DCKM,   1, 
                    ,   6, 
                DCKS,   1, 
                Offset (0x08), 
                Offset (0x09), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x0D, 0x03))
            }
        }

        Device (RP01)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (RPA0) /* \RPA0 */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRE = LTR1 /* \LTR1 */
                LMSL = PML1 /* \PML1 */
                LNSL = PNL1 /* \PNL1 */
                OBFF = OBF1 /* \OBF1 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((VDID == Ones))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Switch (ToInteger (Arg0))
                {
                    Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRE)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFF)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.RP01.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (OBFF)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (LTRE)
                                    {
                                        If (((LMSL == Ones) || (LNSL == Ones)))
                                        {
                                            If ((PCHS == One))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == 0x02))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP01.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }

            Scope (PXSX)
            {
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    LPSW = Arg0
                }
            }

            Name (PR04, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR04, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR04) /* \_SB_.PCI0.RP01.AR04 */
                }

                Return (PR04) /* \_SB_.PCI0.RP01.PR04 */
            }
        }

        Device (RP02)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (RPA1) /* \RPA1 */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRE = LTR2 /* \LTR2 */
                LMSL = PML2 /* \PML2 */
                LNSL = PNL2 /* \PNL2 */
                OBFF = OBF2 /* \OBF2 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((VDID == Ones))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Switch (ToInteger (Arg0))
                {
                    Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRE)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFF)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.RP02.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (OBFF)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (LTRE)
                                    {
                                        If (((LMSL == Ones) || (LNSL == Ones)))
                                        {
                                            If ((PCHS == One))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == 0x02))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP02.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Name (PR05, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }
            })
            Name (AR05, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05) /* \_SB_.PCI0.RP02.AR05 */
                }

                Return (PR05) /* \_SB_.PCI0.RP02.PR05 */
            }
        }

        Device (RP03)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (RPA2) /* \RPA2 */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRE = LTR3 /* \LTR3 */
                LMSL = PML3 /* \PML3 */
                LNSL = PNL3 /* \PNL3 */
                OBFF = OBF3 /* \OBF3 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((VDID == Ones))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Switch (ToInteger (Arg0))
                {
                    Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRE)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFF)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.RP03.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (OBFF)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (LTRE)
                                    {
                                        If (((LMSL == Ones) || (LNSL == Ones)))
                                        {
                                            If ((PCHS == One))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == 0x02))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP03.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Name (PR06, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }
            })
            Name (AR06, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR06) /* \_SB_.PCI0.RP03.AR06 */
                }

                Return (PR06) /* \_SB_.PCI0.RP03.PR06 */
            }
        }

        Device (RP04)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (RPA3) /* \RPA3 */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRE = LTR4 /* \LTR4 */
                LMSL = PML4 /* \PML4 */
                LNSL = PNL4 /* \PNL4 */
                OBFF = OBF4 /* \OBF4 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((VDID == Ones))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Switch (ToInteger (Arg0))
                {
                    Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRE)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFF)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.RP04.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (OBFF)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (LTRE)
                                    {
                                        If (((LMSL == Ones) || (LNSL == Ones)))
                                        {
                                            If ((PCHS == One))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == 0x02))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP04.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Name (PR07, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKC, 
                    Zero
                }
            })
            Name (AR07, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x12
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR07) /* \_SB_.PCI0.RP04.AR07 */
                }

                Return (PR07) /* \_SB_.PCI0.RP04.PR07 */
            }
        }

        Device (RP05)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (RPA4) /* \RPA4 */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRE = LTR5 /* \LTR5 */
                LMSL = PML5 /* \PML5 */
                LNSL = PNL5 /* \PNL5 */
                OBFF = OBF5 /* \OBF5 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((VDID == Ones))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Switch (ToInteger (Arg0))
                {
                    Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRE)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFF)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.RP05.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (OBFF)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (LTRE)
                                    {
                                        If (((LMSL == Ones) || (LNSL == Ones)))
                                        {
                                            If ((PCHS == One))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == 0x02))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP05.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Name (PR08, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKD, 
                    Zero
                }
            })
            Name (AR08, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x13
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR08) /* \_SB_.PCI0.RP05.AR08 */
                }

                Return (PR08) /* \_SB_.PCI0.RP05.PR08 */
            }
        }

        Device (RP06)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (RPA5) /* \RPA5 */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRE = LTR6 /* \LTR6 */
                LMSL = PML6 /* \PML6 */
                LNSL = PNL6 /* \PNL6 */
                OBFF = OBF6 /* \OBF6 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((VDID == Ones))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Switch (ToInteger (Arg0))
                {
                    Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRE)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFF)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.RP06.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (OBFF)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (LTRE)
                                    {
                                        If (((LMSL == Ones) || (LNSL == Ones)))
                                        {
                                            If ((PCHS == One))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == 0x02))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP06.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Name (PR09, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKB, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKA, 
                    Zero
                }
            })
            Name (AR09, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x11
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x10
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (((CDID & 0xF000) == 0x8000))
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.PCI0.RP06.AR09 */
                    }

                    Return (PR09) /* \_SB_.PCI0.RP06.PR09 */
                }
                Else
                {
                    If (PICM)
                    {
                        Return (AR08) /* External reference */
                    }

                    Return (PR08) /* External reference */
                }
            }
        }

        Device (RP07)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (RPA6) /* \RPA6 */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRE = LTR7 /* \LTR7 */
                LMSL = PML7 /* \PML7 */
                LNSL = PNL7 /* \PNL7 */
                OBFF = OBF7 /* \OBF7 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((VDID == Ones))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Switch (ToInteger (Arg0))
                {
                    Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRE)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFF)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.RP07.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (OBFF)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (LTRE)
                                    {
                                        If (((LMSL == Ones) || (LNSL == Ones)))
                                        {
                                            If ((PCHS == One))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == 0x02))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP07.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Name (PR0E, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }
            })
            Name (AR0E, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0E) /* \_SB_.PCI0.RP07.AR0E */
                }

                Return (PR0E) /* \_SB_.PCI0.RP07.PR0E */
            }
        }

        Device (RP08)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                Return (RPA7) /* \RPA7 */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRE = LTR8 /* \LTR8 */
                LMSL = PML8 /* \PML8 */
                LNSL = PNL8 /* \PNL8 */
                OBFF = OBF8 /* \OBF8 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x50), 
                L0SE,   1, 
                    ,   3, 
                LDIS,   1, 
                Offset (0x51), 
                Offset (0x52), 
                    ,   13, 
                LASX,   1, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1, 
                Offset (0xE2), 
                    ,   2, 
                L23E,   1, 
                L23R,   1, 
                Offset (0x324), 
                    ,   3, 
                LEDM,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((VDID == Ones))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Switch (ToInteger (Arg0))
                {
                    Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRE)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFF)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.RP08.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (OBFF)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (LTRE)
                                    {
                                        If (((LMSL == Ones) || (LNSL == Ones)))
                                        {
                                            If ((PCHS == One))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == 0x02))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP08.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Name (PR0E, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    LNKC, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    LNKD, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    LNKA, 
                    Zero
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    LNKB, 
                    Zero
                }
            })
            Name (AR0E, Package (0x04)
            {
                Package (0x04)
                {
                    0xFFFF, 
                    Zero, 
                    Zero, 
                    0x12
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    One, 
                    Zero, 
                    0x13
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x02, 
                    Zero, 
                    0x10
                }, 

                Package (0x04)
                {
                    0xFFFF, 
                    0x03, 
                    Zero, 
                    0x11
                }
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0E) /* \_SB_.PCI0.RP08.AR0E */
                }

                Return (PR0E) /* \_SB_.PCI0.RP08.PR0E */
            }
        }

        Device (SAT0)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                ADBG ("SAT0 DEP Call")
                If ((OSYS >= 0x07DD))
                {
                    If (((S0ID == One) && ((PEPC & 0x03) != Zero)))
                    {
                        ADBG ("SAT0 DEP")
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                ADBG ("SAT0 DEP NULL")
                Return (Package (0x00){})
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.FDRP */
                }

                Method (_GTF, 0, Serialized)  // _GTF: Get Task File
                {
                    If ((((DVS0 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Name (PIB1, Buffer (0x07)
                        {
                             0x10, 0x09, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                        })
                        Return (PIB1) /* \_SB_.PCI0.SAT0.PRT0._GTF.PIB1 */
                    }

                    Name (PIB2, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                    Return (PIB2) /* \_SB_.PCI0.SAT0.PRT0._GTF.PIB2 */
                }
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
                Name (FDEV, Zero)
                Name (FDRP, Zero)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT1.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT1.FDRP */
                }

                Method (_GTF, 0, Serialized)  // _GTF: Get Task File
                {
                    If ((((DVS1 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Name (PIB1, Buffer (0x07)
                        {
                             0x10, 0x09, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                        })
                        Return (PIB1) /* \_SB_.PCI0.SAT0.PRT1._GTF.PIB1 */
                    }

                    Name (PIB2, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                    Return (PIB2) /* \_SB_.PCI0.SAT0.PRT1._GTF.PIB2 */
                }
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
                Name (FDEV, Zero)
                Name (FDRP, Zero)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT2.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT2.FDRP */
                }

                Method (_GTF, 0, Serialized)  // _GTF: Get Task File
                {
                    If ((((DVS2 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Name (PIB1, Buffer (0x07)
                        {
                             0x10, 0x09, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                        })
                        Return (PIB1) /* \_SB_.PCI0.SAT0.PRT2._GTF.PIB1 */
                    }

                    Name (PIB2, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                    Return (PIB2) /* \_SB_.PCI0.SAT0.PRT2._GTF.PIB2 */
                }
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
                Name (FDEV, Zero)
                Name (FDRP, Zero)
                Method (_SDD, 1, Serialized)  // _SDD: Set Device Data
                {
                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT3.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT3.FDRP */
                }

                Method (_GTF, 0, Serialized)  // _GTF: Get Task File
                {
                    If ((((DVS3 == One) && ((FDEV & One) == One)) && 
                        ((FDRP & 0x80) == 0x80)))
                    {
                        Name (PIB1, Buffer (0x07)
                        {
                             0x10, 0x09, 0x00, 0x00, 0x00, 0xB0, 0xEF         // .......
                        })
                        Return (PIB1) /* \_SB_.PCI0.SAT0.PRT3._GTF.PIB1 */
                    }

                    Name (PIB2, Buffer (0x07)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                    })
                    Return (PIB2) /* \_SB_.PCI0.SAT0.PRT3._GTF.PIB2 */
                }
            }
        }

        Device (SAT1)
        {
            Name (_ADR, 0x001F0005)  // _ADR: Address
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
            Field (SMBP, DWordAcc, NoLock, Preserve)
            {
                    ,   2, 
                I2CE,   1
            }

            OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
            Field (SMPB, DWordAcc, NoLock, Preserve)
            {
                    ,   5, 
                SBAR,   11
            }

            OperationRegion (SMBI, SystemIO, (SBAR << 0x05), 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCON,   8, 
                HCOM,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8, 
                PECR,   8, 
                RXSA,   8, 
                SDAT,   16
            }

            Method (SSXB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRXB, 1, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCON = 0x44
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRB, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = Arg2
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x48
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                }

                Return (0xFFFF)
            }

            Method (SWRW, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT1 = (Arg2 & 0xFF)
                DAT0 = ((Arg2 >> 0x08) & 0xFF)
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDW, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                I2CE = Zero
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x4C
                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (((DAT0 << 0x08) | DAT1))
                }

                Return (Ones)
            }

            Method (SBLW, 4, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg3
                HSTS = 0xBF
                TXSA = Arg0
                HCOM = Arg1
                DAT0 = SizeOf (Arg2)
                Local1 = Zero
                HBDR = DerefOf (Arg2 [Zero])
                HCON = 0x54
                While ((SizeOf (Arg2) > Local1))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    HSTS = 0x80
                    Local1++
                    If ((SizeOf (Arg2) > Local1))
                    {
                        HBDR = DerefOf (Arg2 [Local1])
                    }
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (One)
                }

                Return (Zero)
            }

            Method (SBLR, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100){})
                If (STRT ())
                {
                    Return (Zero)
                }

                I2CE = Arg2
                HSTS = 0xBF
                TXSA = (Arg0 | One)
                HCOM = Arg1
                HCON = 0x54
                Local0 = 0x0FA0
                While ((!(HSTS & 0x80) && Local0))
                {
                    Local0--
                    Stall (0x32)
                }

                If (!Local0)
                {
                    KILL ()
                    Return (Zero)
                }

                TBUF [Zero] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                HSTS = 0x80
                Local1 = One
                While ((Local1 < DerefOf (TBUF [Zero])))
                {
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                    HSTS = 0x80
                    Local1++
                }

                If (COMP ())
                {
                    HSTS |= 0xFF
                    Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                }

                Return (Zero)
            }

            Method (STRT, 0, Serialized)
            {
                Local0 = 0xC8
                While (Local0)
                {
                    If ((HSTS & 0x40))
                    {
                        Local0--
                        Sleep (One)
                        If ((Local0 == Zero))
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & One))
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (COMP, 0, Serialized)
            {
                Local0 = 0x0FA0
                While (Local0)
                {
                    If ((HSTS & 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Local0--
                        Stall (0x32)
                        If ((Local0 == Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (KILL, 0, Serialized)
            {
                HCON |= 0x02
                HSTS |= 0xFF
            }
        }
    }

    Name (BUFN, Zero)
    Name (MBUF, Buffer (0x1000){})
    OperationRegion (MDBG, SystemMemory, 0x9CF89018, 0x00001004)
    Field (MDBG, AnyAcc, Lock, Preserve)
    {
        MDG0,   32768
    }

    Method (DB2H, 1, Serialized)
    {
        If (MDEN)
        {
            SHOW (Arg0)
            MDGC (0x20)
            MDG0 = MBUF /* \MBUF */
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (DW2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x08)
        Local0 &= 0xFF
        Local1 &= 0xFF
        DB2H (Local1)
        BUFN--
        DB2H (Local0)
    }

    Method (DD2H, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = (Arg0 >> 0x10)
        Local0 &= 0xFFFF
        Local1 &= 0xFFFF
        DW2H (Local1)
        BUFN--
        DW2H (Local0)
    }

    Method (MBGS, 1, Serialized)
    {
        If (MDEN)
        {
            Local0 = SizeOf (Arg0)
            Name (BUFS, Buffer (Local0){})
            BUFS = Arg0
            MDGC (0x20)
            While (Local0)
            {
                MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
                Local0--
            }

            MDG0 = MBUF /* \MBUF */
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (ADBG, 1, Serialized)
    {
        If (MDEN)
        {
            Local0 = SizeOf (Arg0)
            Name (BUFS, Buffer (Local0){})
            BUFS = Arg0
            MDGC (0x20)
            While (Local0)
            {
                MDGC (DerefOf (BUFS [(SizeOf (Arg0) - Local0)]))
                Local0--
            }

            MDG0 = MBUF /* \MBUF */
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (SHOW, 1, Serialized)
    {
        MDGC (NTOC ((Arg0 >> 0x04)))
        MDGC (NTOC (Arg0))
    }

    Method (LINE, 0, Serialized)
    {
        Local0 = BUFN /* \BUFN */
        Local0 &= 0x0F
        While (Local0)
        {
            MDGC (Zero)
            Local0++
            Local0 &= 0x0F
        }
    }

    Method (MDGC, 1, Serialized)
    {
        MBUF [BUFN] = Arg0
        BUFN += One
        If ((BUFN > 0x0FFF))
        {
            BUFN &= 0x0FFF
            UP_L (One)
        }
    }

    Method (UP_L, 1, Serialized)
    {
        Local2 = Arg0
        Local2 <<= 0x04
        MOVE (Local2)
        Local3 = (0x1000 - Local2)
        While (Local2)
        {
            MBUF [Local3] = Zero
            Local3++
            Local2--
        }
    }

    Method (MOVE, 1, Serialized)
    {
        Local4 = Arg0
        BUFN = Zero
        Local5 = (0x1000 - Local4)
        While (Local5)
        {
            Local5--
            MBUF [BUFN] = DerefOf (MBUF [Local4])
            BUFN++
            Local4++
        }
    }

    Method (NTOC, 1, Serialized)
    {
        Local0 = (Arg0 & 0x0F)
        If ((Local0 < 0x0A))
        {
            Local0 += 0x30
        }
        Else
        {
            Local0 += 0x37
        }

        Return (Local0)
    }

    Scope (_SB.PCI0.SAT0)
    {
        Scope (PRT2)
        {
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (One)
                        }
                        Case (0x02)
                        {
                            GPE3 = Zero
                            If (((GL00 & 0x08) == 0x08))
                            {
                                GIV0 |= 0x08
                            }
                            Else
                            {
                                GIV0 &= 0xF7
                            }

                            GL08 &= 0xEF
                            Sleep (0xC8)
                            GPS3 = One
                            GPE3 = One
                            P8XH (0x04, 0x03, Zero)
                            P8XH (0x04, 0x03, One)
                            Return (One)
                        }
                        Case (0x03)
                        {
                            GPE3 = Zero
                            GPS3 = One
                            GL08 |= 0x10
                            P8XH (0x04, 0x05, Zero)
                            P8XH (0x04, 0x05, One)
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L13, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((PFLV == FDTP))
            {
                Return (Zero)
            }

            GPE3 = Zero
            GL08 |= 0x10
            Notify (\_SB.PCI0.SAT0, 0x82) // Device-Specific Change
            Return (Zero)
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (Zero)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0){}
    }

    Method (WAK, 1, NotSerialized)
    {
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 0000010C
[008h 0008 001h]                    Revision : 05
[009h 0009 001h]                    Checksum : 4C
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]                FACS Address : 9CF8B000
[028h 0040 004h]                DSDT Address : 9CFE9000
[02Ch 0044 001h]                       Model : 01
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 80
[038h 0056 004h]    PM1A Event Block Address : 00001800
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00001804
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00001850
[04Ch 0076 004h]      PM Timer Block Address : 00001808
[050h 0080 004h]          GPE0 Block Address : 00001820
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 10
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 85
[060h 0096 002h]                  C2 Latency : 0065
[062h 0098 002h]                  C3 Latency : 0039
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 00
[06Dh 0109 002h]  Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000386A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 00000000000000B2

[080h 0128 001h]        Value to cause reset : FB
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 0000000000000000
[08Ch 0140 008h]                DSDT Address : 000000009CFE9000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 03 [DWord Access:32]
[098h 0152 008h]                     Address : 0000000000001800

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 00 [SystemMemory]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000001804

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 00 [SystemMemory]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000001850

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000001808

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 80
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224 008h]                     Address : 0000000000001820

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 00 [SystemMemory]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 00 [SystemMemory]
[0F5h 0245 001h]                   Bit Width : 00
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248 008h]                     Address : 0000000000000000

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 00 [SystemMemory]
[101h 0257 001h]                   Bit Width : 00
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260 008h]                     Address : 0000000000000000

/**** ACPI table terminates in the middle of a data structure! (dump table) 
CurrentOffset: 10C, TableLength: 10C ***/
Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 4C 54 4F 53 49 4E 56  // FACP.....LTOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 00 B0 F8 9C 00 90 FE 9C 01 02 09 00  // ................
    0030: B2 00 00 00 A0 A1 00 80 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 20 18 00 00 00 00 00 00 04 02 01 04 10 00 00 85  //  ...............
    0060: 65 00 39 00 00 04 10 00 01 03 0D 00 00 13 00 00  // e.9.............
    0070: A5 86 03 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0080: FB 00 00 00 00 00 00 00 00 00 00 00 00 90 FE 9C  // ................
    0090: 00 00 00 00 01 20 00 03 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 80 00 00  // . ..............
    00E0: 20 18 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : 00000101
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 01 01 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000044
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : BE
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 000000009CFFBF98

[034h 0052 002h]               Subtable Type : 0001
[036h 0054 001h]                      Length : 10
[037h 0055 001h]                    Revision : 01
[038h 0056 004h]                    Reserved : 00000000
[03Ch 0060 008h]         S3PT Record Address : 000000009CFFBF18

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 BE 54 4F 53 49 4E 56  // FPDTD.....TOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 00 00 10 01 00 00 00 00 98 BF FF 9C  // ................
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 18 BF FF 9C  // ................
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 57
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]           Hardware Block ID : 8086A201

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 00
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0080
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 57 54 4F 53 49 4E 56  // HPET8....WTOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 01 A2 86 80 00 00 00 00 00 00 D0 FE  // ................
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 7F
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000E0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : FF
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 7F 54 4F 53 49 4E 56  // MCFG<.....TOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 69
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 69 54 4F 53 49 4E 56 /* MSDMU....iTOSINV */\
/* 034h 0052  16 */                            54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49 /* TOSINV00....ACPI */\
/* 044h 0068  16 */                            00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 69 54 4F 53 49 4E 56  // MSDMU....iTOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 47 43 33 51 4E 2D 4D 39  // ........GC3QN-M9
    0040: 54 42 44 2D 47 52 51 51 4B 2D 54 52 37 33 46 2D  // TBD-GRQQK-TR73F-
    0050: 37 48 34 57 51                                   // 7H4WQ


SLIC
----
[000h 0000 004h]                   Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004 004h]                Table Length : 00000176
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : FF
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 152h] Software Licensing Structure : 53 4C 49 43 76 01 00 00 01 FF 54 4F 53 49 4E 56 /* SLICv.....TOSINV */\
/* 034h 0052  16 */                            54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49 /* TOSINV00....ACPI */\
/* 044h 0068  16 */                            00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00 /* ................ */\
/* 054h 0084  16 */                            00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00 /* .$..RSA1........ */\
/* 064h 0100  16 */                            01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE /* ......Ve .<..... */\
/* 074h 0116  16 */                            E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53 /* ...E.kr.E.)....S */\
/* 084h 0132  16 */                            39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60 /* 9.%............` */\
/* 094h 0148  16 */                            A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC /* .rG....?`....... */\
/* 0A4h 0164  16 */                            1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90 /* .n..}.._ZQ.h..=. */\
/* 0B4h 0180  16 */                            F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B /* ..4....}..RL.c.k */\
/* 0C4h 0196  16 */                            00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A /* .....o5.z...O).j */\
/* 0D4h 0212  16 */                            56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5 /* V..E..7..K.S[<.. */\
/* 0E4h 0228  16 */                            01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 49 /* ............TOSI */\
/* 0F4h 0244  16 */                            4E 56 54 4F 53 49 4E 56 30 30 57 49 4E 44 4F 57 /* NVTOSINV00WINDOW */\
/* 104h 0260  16 */                            53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00 /* S .............. */\
/* 114h 0276  16 */                            00 00 00 00 00 00 A0 C3 64 30 F3 3B BF 3D 6E C4 /* ........d0.;.=n. */\
/* 124h 0292  16 */                            7A F1 66 D8 33 89 77 3C D4 04 A2 AF 4A D4 AB 12 /* z.f.3.w<....J... */\
/* 134h 0308  16 */                            8D E3 6A D7 0D 6D 53 C4 79 13 EB B6 20 D1 A3 16 /* ..j..mS.y... ... */\
/* 144h 0324  16 */                            7B 08 B7 C5 E0 C2 C8 6A 3F 7B 58 69 31 0C 97 49 /* {......j?{Xi1..I */\
/* 154h 0340  16 */                            C3 92 72 42 C4 0C DC 2D BA F4 38 60 4C 3D D0 D2 /* ..rB...-..8`L=.. */\
/* 164h 0356  16 */                            20 9E 4C 5C 3A E6 8B 15 3D 95 D2 3E 4E F7 AE 5F /*  .L\:...=..>N.._ */\
/* 174h 0372   2 */                            34 B5                                           /* 4. */\

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 FF 54 4F 53 49 4E 56  // SLICv.....TOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE  // ......Ve .<.....
    0050: E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53  // ...E.kr.E.)....S
    0060: 39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60  // 9.%............`
    0070: A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC  // .rG....?`.......
    0080: 1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90  // .n..}.._ZQ.h..=.
    0090: F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B  // ..4....}..RL.c.k
    00A0: 00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A  // .....o5.z...O).j
    00B0: 56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5  // V..E..7..K.S[<..
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 49  // ............TOSI
    00D0: 4E 56 54 4F 53 49 4E 56 30 30 57 49 4E 44 4F 57  // NVTOSINV00WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 A0 C3 64 30 F3 3B BF 3D 6E C4  // ........d0.;.=n.
    0100: 7A F1 66 D8 33 89 77 3C D4 04 A2 AF 4A D4 AB 12  // z.f.3.w<....J...
    0110: 8D E3 6A D7 0D 6D 53 C4 79 13 EB B6 20 D1 A3 16  // ..j..mS.y... ...
    0120: 7B 08 B7 C5 E0 C2 C8 6A 3F 7B 58 69 31 0C 97 49  // {......j?{Xi1..I
    0130: C3 92 72 42 C4 0C DC 2D BA F4 38 60 4C 3D D0 D2  // ..rB...-..8`L=..
    0140: 20 9E 4C 5C 3A E6 8B 15 3D 95 D2 3E 4E F7 AE 5F  //  .L\:...=..>N.._
    0150: 34 B5 28 05 97 A9 21 DF 51 58 F9 57 9C DF 99 E9  // 4.(...!.QX.W....
    0160: 92 2C 7C CA 63 D0 1D 62 F7 8C 8D 7A 1E 8D 9F 18  // .,|.c..b...z....
    0170: 30 B0 45 0D F9 FA                                // 0.E...


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "INSYDE", "HSW-LPT", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU0._PPC, UnknownObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x99E4E598, 
            0x00000539, 
            "APIST   ", 
            0x9CE28618, 
            0x000005AA, 
            "CPU0CST ", 
            0x9CE28C18, 
            0x000003D3, 
            "APCST   ", 
            0x9CE27D98, 
            0x00000119
        })
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR)
    {
        OperationRegion (PPMT, SystemMemory, 0x9CF88F98, 0x003A)
        Field (PPMT, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CCTP,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL20,   16, 
            PLW0,   8, 
            CTC0,   8, 
            TAR0,   8, 
            PPC0,   8, 
            PL11,   16, 
            PL21,   16, 
            PLW1,   8, 
            CTC1,   8, 
            TAR1,   8, 
            PPC1,   8, 
            PL12,   16, 
            PL22,   16, 
            PLW2,   8, 
            CTC2,   8, 
            TAR2,   8, 
            PPC2,   8, 
            C3MW,   8, 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            C3LT,   16, 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8
        }
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            If (CondRefOf (\_PR.CPU0._PPC))
            {
                \_PR.CPU0._PPC = CPPC /* \_PR_.CPPC */
            }

            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & 0x7A))
            {
                If ((((CFGD & 0x0200) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC1 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC1 & 0x18))
            {
                APCT ()
            }

            PDC0 = PDC1 /* \PDC1 */
            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x7A) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC2 /* \PDC2 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC3 /* \PDC3 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & One))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC4 /* \PDC4 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & One))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC5 /* \PDC5 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & One))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC6 /* \PDC6 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & One))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC7 /* \PDC7 */
            Return (Zero)
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "TOSINV", "TsbOdm", 0x00001000)
{
    /*
     * iASL Warning: There were 10 external control methods found during
     * disassembly, but only 0 were resolved (10 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.GFX0.CBLV, UnknownObj)
    External (_SB_.PCI0.GFX0.CPDL, UnknownObj)
    External (_SB_.PCI0.GFX0.CPL2, UnknownObj)
    External (_SB_.PCI0.GFX0.CPL3, UnknownObj)
    External (_SB_.PCI0.GFX0.DD1F, UnknownObj)
    External (_SB_.PCI0.GFX0.DD1F._BCL, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.GFX0.GHDS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.GFX0.STBL, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (_SB_.PCI0.LPCB, DeviceObj)
    External (_SB_.PCI0.PEG0.PEGP.DD01, UnknownObj)
    External (_SB_.PCI0.PEG0.VGA_, UnknownObj)
    External (_SB_.PCI0.PEG0.VGA_.CRT_._DGS, UnknownObj)
    External (_SB_.PCI0.PEG0.VGA_.CSTT, UnknownObj)
    External (_SB_.PCI0.PEG0.VGA_.DFP1._DGS, UnknownObj)
    External (_SB_.PCI0.PEG0.VGA_.DFP2._DGS, UnknownObj)
    External (_SB_.PCI0.PEG0.VGA_.LCD_, UnknownObj)
    External (_SB_.PCI0.PEG0.VGA_.LCD_._BCL, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.PEG0.VGA_.LCD_._DGS, UnknownObj)
    External (_SB_.PCI0.PEG0.VGA_.UDCS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.PEG0.VGA_.UDGS, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_TZ_.THRM, UnknownObj)
    External (CSTE, IntObj)
    External (DSEN, IntObj)
    External (NSTE, UnknownObj)
    External (OGNS, OpRegionObj)
    External (OSMI, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (OSYS, UnknownObj)
    External (P80H, UnknownObj)
    External (PADL, UnknownObj)
    External (PNOT, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (PRM0, UnknownObj)
    External (SPRT, OpRegionObj)
    External (TRAP, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (TRTD, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Scope (\_SB)
    {
        Field (SPRT, ByteAcc, NoLock, Preserve)
        {
            APMC,   8, 
            APMD,   8
        }

        Field (OGNS, AnyAcc, Lock, Preserve)
        {
            Offset (0x14), 
            ACPS,   8, 
            CPUS,   8, 
            CPUL,   8, 
            ECRO,   8, 
            ECRM,   8, 
            ECRS,   8, 
            ECRD,   8, 
            Offset (0x1C), 
            EGST,   8, 
            LCDS,   4, 
            CECS,   1, 
            CECP,   1, 
            HDMI,   1, 
            HKMD,   1, 
            TSBK,   1, 
            SDAT,   1, 
            DCIR,   1, 
            DBTN,   2, 
            HKEM,   1, 
            HSEM,   1, 
            IECC,   1, 
            HSWK,   8, 
            LCMD,   8, 
            SVCF,   8, 
            SWB0,   32, 
            SWB1,   32, 
            SWB2,   32, 
            SWB3,   32, 
            SWB4,   32, 
            SWB5,   32, 
            SWB6,   32, 
            SWB7,   32, 
            KYB0,   32, 
            Offset (0x62), 
            IEC0,   8, 
            IEC1,   8, 
            IEC2,   8, 
            CECC,   8, 
            CECE,   32, 
            CECI,   16, 
            CECZ,   8, 
            CECF,   8, 
            CEC1,   32, 
            CEC2,   32, 
            CEC3,   32, 
            CEC4,   32, 
            CEC5,   32, 
            LENA,   8, 
            LENB,   8, 
            LENC,   8, 
            LENE,   8, 
            LEND,   8, 
            IFNK,   1056, 
            ICMD,   4224, 
            RESL,   32, 
            RESV,   16, 
            USC1,   32, 
            USC2,   32, 
            VGAM,   8, 
            USBM,   32, 
            TPID,   8, 
            NODD,   8, 
            IHDD,   8, 
            TJET,   8, 
            CPUM,   8, 
            POLI,   8, 
            TCCR,   8, 
            TEST,   8, 
            LCDA,   8, 
            PWM0,   8, 
            PWM1,   8, 
            PWM2,   8, 
            PWM3,   8, 
            PWM4,   8, 
            PWM5,   8, 
            PWM6,   8, 
            PWM7,   8, 
            EJLL,   8, 
            EJLR,   8, 
            SCFG,   8, 
            FKRG,   8, 
            HFMF,   8, 
            HYBT,   8, 
            SKEY,   8, 
            UCSP,   8, 
            CBTN,   8, 
            KBLE,   8, 
            CPTO,   8, 
            KUPP,   8, 
            SLMC,   8, 
            IREX,   8, 
            IRCK,   8, 
            SATR,   8, 
            GPUR,   8, 
            HSFN,   8, 
            HSP0,   8, 
            HSP1,   8, 
            HSP2,   8, 
            HSP3,   8, 
            HSP4,   8, 
            HSP5,   8, 
            HSP6,   8, 
            HSP7,   8, 
            HSP8,   8, 
            HSP9,   8, 
            HSPA,   8, 
            HSPB,   8, 
            HSS0,   8, 
            HSBD,   32, 
            HSDB,   32, 
            HSSS,   8, 
            LPSW,   8, 
            PROI,   8, 
            BTCL,   8, 
            CLMD,   8, 
            CDPM,   8, 
            CTSU,   8, 
            ITLK,   32, 
            DMIS,   32, 
            TPNO,   16, 
            STNO,   8, 
            Offset (0x379), 
            Offset (0x37F), 
            DMIF,   16, 
            Offset (0x389), 
            WDMI,   8192, 
            TDMI,   24, 
            LADR,   32, 
            LBSZ,   8, 
            LRES,   32, 
            LHDR,   32, 
            LFUN,   8
        }

        Field (OGNS, AnyAcc, Lock, Preserve)
        {
            Offset (0x42), 
            KYBF,   8, 
            KYBA,   248, 
            Offset (0x10B), 
            CMGA,   480, 
            CMGB,   832, 
            CMGC,   1376, 
            CMGD,   832, 
            CCGD,   608
        }

        Field (OGNS, AnyAcc, Lock, Preserve)
        {
            Offset (0x22), 
            SWBF,   256, 
            KYBB,   256, 
            Offset (0x87), 
            F0CM,   8, 
            JFNK,   224, 
            CYCC,   16, 
            BTV1,   32, 
            BTV2,   32, 
            ILLU,   8, 
            MFNO,   8, 
            MBF1,   32, 
            MBF2,   32, 
            MBF3,   32, 
            MBF4,   32
        }

        Mutex (MUTS, 0x00)
        Mutex (MUTE, 0x00)
        Name (PWBS, Zero)
        Name (ACBS, Zero)
        Name (ACBW, Zero)
        Name (FKMS, 0xFF)
        Name (FTBT, Zero)
        Name (BCMF, One)
        Name (FBHK, Zero)
        Name (ILAN, Zero)
        Name (USB3, Zero)
        Name (BRLV, Package (0x0A)
        {
            0x55, 
            0x28, 
            0x0A, 
            0x14, 
            0x1E, 
            0x28, 
            0x37, 
            0x46, 
            0x55, 
            0x64
        })
        Name (BROH, Package (0x67)
        {
            0x64, 
            0x28, 
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x64
        })
        Name (PANL, Package (0x09)
        {
            Package (0x0A)
            {
                0x3C, 
                0x1C, 
                0x09, 
                0x0B, 
                0x11, 
                0x1C, 
                0x2C, 
                0x3C, 
                0x4D, 
                0x64
            }, 

            Package (0x0A)
            {
                0x33, 
                0x17, 
                0x07, 
                0x0C, 
                0x10, 
                0x17, 
                0x23, 
                0x33, 
                0x44, 
                0x64
            }, 

            Package (0x0A)
            {
                0x3E, 
                0x1C, 
                0x09, 
                0x0E, 
                0x13, 
                0x1C, 
                0x2D, 
                0x3E, 
                0x51, 
                0x64
            }, 

            Package (0x0A)
            {
                0x2D, 
                0x15, 
                0x07, 
                0x0B, 
                0x0E, 
                0x15, 
                0x21, 
                0x2D, 
                0x3A, 
                0x64
            }, 

            Package (0x0A)
            {
                0x39, 
                0x1A, 
                0x09, 
                0x0D, 
                0x11, 
                0x1A, 
                0x2A, 
                0x39, 
                0x4B, 
                0x64
            }, 

            Package (0x0A)
            {
                0x35, 
                0x1A, 
                0x08, 
                0x0E, 
                0x11, 
                0x1A, 
                0x27, 
                0x35, 
                0x49, 
                0x64
            }, 

            Package (0x0A)
            {
                0x33, 
                0x17, 
                0x07, 
                0x0B, 
                0x0F, 
                0x17, 
                0x24, 
                0x33, 
                0x44, 
                0x64
            }, 

            Package (0x0A)
            {
                0x24, 
                0x11, 
                0x05, 
                0x08, 
                0x0B, 
                0x11, 
                0x1A, 
                0x24, 
                0x2F, 
                0x64
            }, 

            Package (0x0A)
            {
                0x24, 
                0x11, 
                0x05, 
                0x08, 
                0x0B, 
                0x11, 
                0x1A, 
                0x24, 
                0x2F, 
                0x64
            }
        })
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (\_SB.RDEC (0x92, One, Zero))
                {
                    If (!((OSYS < 0x07D6) || (OSYS == 0x07D8)))
                    {
                        Notify (\_SB.VALZ, 0x8F) // Device-Specific
                    }

                    Return (Zero)
                }

                Return (One)
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0D, 
                0x04
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    \_SB.WREC (0xB6, One, Zero, One)
                }
                Else
                {
                    \_SB.WREC (0xB6, One, Zero, Zero)
                }
            }
        }

        Method (RDEC, 3, Serialized)
        {
            Acquire (MUTE, 0xFFFF)
            ECRO = Arg0
            ECRM = Arg1
            ECRS = Arg2
            FLNK (0xFF, 0x0E)
            Local0 = ECRD /* \_SB_.ECRD */
            Release (MUTE)
            Return (Local0)
        }

        Method (WREC, 4, Serialized)
        {
            Acquire (MUTE, 0xFFFF)
            ECRO = Arg0
            ECRM = Arg1
            ECRS = Arg2
            ECRD = Arg3
            FLNK (0xFF, 0x0F)
            Release (MUTE)
        }

        Method (FLNK, 2, Serialized)
        {
            If ((IECC == Zero))
            {
                IEC2 += 0x03
                IEC1--
                IEC0 -= 0x0B
                IECC = One
            }

            If ((Arg0 == 0xFF))
            {
                SVCF = Arg1
            }
            Else
            {
                SWB0 = Arg1
            }

            LCMD = Arg0
            APMD = 0xFF
            APMC = 0xE3
            Return ((SWB0 & 0xFF))
        }

        Device (\_SB.FWEX)
        {
            Name (_HID, "TOS1901")  // _HID: Hardware ID
            Method (FWES, 1, NotSerialized)
            {
                Acquire (MUTS, 0xFFFF)
                Name (FWEB, Buffer (0x20){})
                Local4 = DerefOf (Arg0 [Zero])
                Local7 = Zero
                If ((Local4 == One))
                {
                    If (\_SB.PCI0.LPCB.ECOK)
                    {
                        FWEB [Zero] = \_SB.PCI0.LPCB.RCPU
                        FWEB [One] = \_SB.PCI0.LPCB.VGAT
                        FWEB [0x02] = \_SB.PCI0.LPCB.LRPM
                        FWEB [0x03] = \_SB.PCI0.LPCB.HRPM
                        FWEB [0x04] = Zero
                        FWEB [0x05] = Zero
                        FWEB [0x06] = \_SB.RDEC (0xA0, 0xFF, Zero)
                    }

                    Release (MUTS)
                    Return (FWEB) /* \_SB_.FWEX.FWES.FWEB */
                }

                If ((Local4 == 0x81))
                {
                    Local0 = DerefOf (Arg0 [One])
                    If ((Local0 == 0xFF))
                    {
                        Local0 = \_SB.PCI0.LPCB.EVCT
                        FWEB [Zero] = Local0
                        Release (MUTS)
                        Return (FWEB) /* \_SB_.FWEX.FWES.FWEB */
                    }
                    ElseIf ((Local0 == 0xFE))
                    {
                        Local0 = \_SB.PCI0.LPCB.FKST
                        FWEB [Zero] = Local0
                        Release (MUTS)
                        Return (FWEB) /* \_SB_.FWEX.FWES.FWEB */
                    }
                    Else
                    {
                        Local7 = One
                    }
                }

                Local0 = 0x20
                Local1 = One
                Local3 = Zero
                While (Local0)
                {
                    Local2 = (DerefOf (Arg0 [Local1]) << 0x18)
                    Local3 = (((Local3 >> 0x08) & 0x00FFFFFF) + Local2)
                    If ((Local1 == 0x04))
                    {
                        Local5 = Local3
                        SWB0 = Local3
                    }
                    ElseIf ((Local1 == 0x08))
                    {
                        SWB1 = Local3
                    }
                    ElseIf ((Local1 == 0x0C))
                    {
                        SWB2 = Local3
                    }
                    ElseIf ((Local1 == 0x10))
                    {
                        SWB3 = Local3
                    }
                    ElseIf ((Local1 == 0x14))
                    {
                        SWB4 = Local3
                    }
                    ElseIf ((Local1 == 0x18))
                    {
                        SWB5 = Local3
                    }
                    ElseIf ((Local1 == 0x1C))
                    {
                        SWB6 = Local3
                    }
                    ElseIf ((Local1 == 0x20))
                    {
                        SWB7 = Local3
                    }

                    Local0--
                    Local1 += One
                }

                If ((Local7 == One))
                {
                    Local4 = 0x11
                    Local5 = \_SB.PCI0.LPCB.EVCT
                }

                If ((Local4 == 0x8B))
                {
                    If ((DerefOf (Arg0 [0x0D]) != 0xFF))
                    {
                        ILAN = (DerefOf (Arg0 [0x0D]) | 0xF0)
                        SWB3 |= 0xFF
                    }

                    If ((DerefOf (Arg0 [0x12]) != 0xFF))
                    {
                        USB3 = (DerefOf (Arg0 [0x12]) | 0xF0)
                        SWB4 |= 0xFF00
                    }
                }

                FLNK (Local4, Local5)
                Local1 = SWB0 /* \_SB_.SWB0 */
                Local2 = Zero
                While ((Local2 != 0x20))
                {
                    If ((Local2 == 0x04))
                    {
                        Local1 = SWB1 /* \_SB_.SWB1 */
                    }
                    ElseIf ((Local2 == 0x08))
                    {
                        Local1 = SWB2 /* \_SB_.SWB2 */
                    }
                    ElseIf ((Local2 == 0x0C))
                    {
                        Local1 = SWB3 /* \_SB_.SWB3 */
                    }
                    ElseIf ((Local2 == 0x10))
                    {
                        Local1 = SWB4 /* \_SB_.SWB4 */
                    }
                    ElseIf ((Local2 == 0x14))
                    {
                        Local1 = SWB5 /* \_SB_.SWB5 */
                    }
                    ElseIf ((Local2 == 0x18))
                    {
                        Local1 = SWB6 /* \_SB_.SWB6 */
                    }
                    ElseIf ((Local2 == 0x1C))
                    {
                        Local1 = SWB7 /* \_SB_.SWB7 */
                    }

                    FWEB [Local2] = Local1
                    Divide (Local1, 0x0100, Local0, Local1)
                    Local2 += One
                }

                Local0 = Zero
                If ((LCMD != Zero))
                {
                    Local2 = Zero
                    While ((Local2 != 0x20))
                    {
                        FWEB [Local2] = 0xFF
                        Local2 += One
                    }
                }

                SWB0 = Local0
                SWB1 = Local0
                SWB2 = Local0
                SWB3 = Local0
                SWB4 = Local0
                SWB5 = Local0
                SWB6 = Local0
                SWB7 = Local0
                If ((Local7 == One))
                {
                    FWEB [0x1F] = \_SB.PCI0.LPCB.EVCT
                }

                If ((Local4 == 0x8A))
                {
                    If (((ILAN & 0xF0) != 0xF0))
                    {
                        ILAN = DerefOf (FWEB [0x0C])
                    }
                    Else
                    {
                        FWEB [0x0C] = (ILAN & 0x0F)
                    }

                    If ((DerefOf (FWEB [0x11]) != 0xFF))
                    {
                        If (((USB3 & 0xF0) != 0xF0))
                        {
                            USB3 = DerefOf (FWEB [0x11])
                        }
                        Else
                        {
                            FWEB [0x11] = (USB3 & 0x0F)
                        }
                    }
                }

                Release (MUTS)
                Return (FWEB) /* \_SB_.FWEX.FWES.FWEB */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS < 0x07D0) || (OSYS == 0x07D8)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Method (WFNK, 1, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            \_SB.WREC (0xB6, One, Zero, Zero)
            If ((OSYS >= 0x07DC))
            {
                If ((Arg0 == 0x04))
                {
                    HSFN = Zero
                    If ((LEND != Zero))
                    {
                        INIF = Zero
                        F0CM = 0x03
                        FLNK (0xFF, Zero)
                    }
                }

                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    If ((FBHK == One))
                    {
                        \_SB.WREC (0xDB, 0x80, 0x07, One)
                    }
                }
            }

            If ((Arg0 == 0x03))
            {
                \_SB.PCI0.LPCB.FBFG = FTBT /* \_SB_.FTBT */
                \_SB.PCI0.LPCB.FBS3 = Zero
            }

            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                Local0 = ((\_SB.PCI0.LPCB.ECB6 >> 0x03) & One)
                If ((Local0 != PWBS))
                {
                    \_SB.WREC (0xB6, 0x08, 0x03, PWBS)
                }

                If ((\_SB.PCI0.LPCB.ECC8 != ACBS))
                {
                    \_SB.WREC (0xC8, 0xFF, Zero, ACBS)
                }

                If ((\_SB.PCI0.LPCB.ECC9 != ACBW))
                {
                    \_SB.WREC (0xC9, 0xFF, Zero, ACBW)
                }

                CLRB ()
                HDSB = Zero
                SYBZ = Zero
                F0CM = One
                FLNK (0xFF, Zero)
                BTCG = One
            }

            If ((OSYS > 0x07D5))
            {
                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    Local0 = HKMD /* \_SB_.HKMD */
                    \_SB.WREC (0xDB, One, Zero, Local0)
                }

                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    Local0 = HKEM /* \_SB_.HKEM */
                    \_SB.WREC (0xDB, 0x10, 0x04, Local0)
                    Local0 = HSEM /* \_SB_.HSEM */
                    \_SB.WREC (0xDB, 0x20, 0x05, Local0)
                    FLNK (0x10, One)
                    FLNK (0x15, 0xFF)
                    ILLU = 0x0F
                }

                If ((\_SB.PCI0.LPCB.EVCT != Zero))
                {
                    FLNK (0x11, \_SB.PCI0.LPCB.EVCT)
                    If ((\_SB.RDEC (0xDB, 0x20, 0x05) == Zero))
                    {
                        HSWK = KYB0 /* \_SB_.KYB0 */
                        KYB0 = Zero
                    }
                }
            }
            Else
            {
                If ((\_SB.PCI0.LPCB.EVCT != Zero))
                {
                    Notify (\_SB.FWEX, 0x80) // Status Change
                }

                FLNK (0x15, 0xFF)
            }

            FLNK (0xFF, 0x30)
            Release (MUTS)
        }

        Method (SFNK, 1, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            If ((Arg0 == 0x03))
            {
                \_SB.PCI0.LPCB.FBS3 = One
                FTBT = \_SB.PCI0.LPCB.FBFG
            }
            Else
            {
                CLMD = Zero
            }

            \_SB.PCI0.LPCB.CLRL ()
            If ((OSYS > 0x07D5))
            {
                \_SB.PCI0.LPCB.EVTC = Zero
                SYBZ = 0x03
                HSWK = Zero
                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    HKMD = \_SB.RDEC (0xDB, One, Zero)
                }
            }

            If ((OSYS >= 0x07DC))
            {
                If ((Arg0 == 0x05))
                {
                    If (((ILAN & 0xF0) == 0xF0))
                    {
                        VFBF ()
                        HSFN = One
                        HSP1 = ILAN /* \_SB_.ILAN */
                        ILAN &= 0x0F
                    }

                    If (((USB3 & 0xF0) == 0xF0))
                    {
                        VFBF ()
                        HSFN = One
                        HSP4 = USB3 /* \_SB_.USB3 */
                        USB3 &= 0x0F
                    }
                }

                If (((HSFN != Zero) && (HSFN != 0xFF)))
                {
                    HSFN = One
                    FLNK (0xFF, 0x41)
                }

                If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                {
                    FBHK = Zero
                    If (((\_SB.PCI0.LPCB.ECDB & 0x80) == 0x80))
                    {
                        FBHK = One
                    }
                }
            }

            If (((Arg0 == 0x03) || (Arg0 == 0x04)))
            {
                PWBS = ((\_SB.PCI0.LPCB.ECB6 >> 0x03) & One)
                ACBS = \_SB.PCI0.LPCB.ECC8
                ACBW = \_SB.PCI0.LPCB.ECC9
                FKMS = 0xFF
            }
            ElseIf ((Arg0 == 0x05))
            {
                If ((\_SB.PCI0.LPCB.ECC8 == Zero))
                {
                    \_SB.WREC (0xC8, 0xFF, Zero, 0x3F)
                    If ((\_SB.PCI0.LPCB.ECC9 == Zero))
                    {
                        \_SB.WREC (0xC9, 0xFF, Zero, 0x03)
                    }
                }

                Local0 = Zero
                SWB0 = Ones
                SWB1 = Ones
                SWB2 = Ones
                SWB3 = Ones
                SWB4 = Ones
                SWB5 = Ones
                SWB6 = Ones
                SWB7 = Ones
                If (((ILAN & 0xF0) == 0xF0))
                {
                    SWB3 &= 0xFFFFFF00
                    If (((ILAN & 0x0F) == One))
                    {
                        SWB3 |= One
                    }

                    Local1 = One
                }

                If (((USB3 & 0xF0) == 0xF0))
                {
                    SWB4 &= 0xFFFF00FF
                    If (((USB3 & 0x0F) == One))
                    {
                        SWB4 |= 0x0100
                    }

                    Local1 = One
                }

                If ((Local1 == One))
                {
                    FLNK (0x8B, Ones)
                }
            }

            If ((Arg0 > 0x02))
            {
                HDSD = Zero
            }

            Release (MUTS)
        }

        Name (INIF, Zero)
        Name (CAGA, Buffer (0x50){})
        Name (CAGB, Buffer (0x7C){})
        Name (CAGC, Buffer (0xC0){})
        Name (CAGE, Buffer (0x7C){})
        Name (CAGD, Buffer (0x60){})
        Name (FNKC, Buffer (0x84)
        {
             0x00                                             // .
        })
        Name (RETP, Package (0x06)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (USAC, Zero)
        Name (BTCG, One)
        Method (TINC, 2, NotSerialized)
        {
            CreateDWordField (Arg1, Arg0, DCMD)
            Return (DCMD) /* \_SB_.TINC.DCMD */
        }

        Method (RINC, 2, NotSerialized)
        {
            Local0 = (Arg1 * 0x04)
            CreateDWordField (Arg0, Local0, DCMD)
            Return (DCMD) /* \_SB_.RINC.DCMD */
        }

        Method (WINC, 3, NotSerialized)
        {
            Local0 = (Arg1 * 0x04)
            CreateDWordField (Arg0, Local0, DCMD)
            DCMD = Arg2
        }

        Method (SRCH, 3, NotSerialized)
        {
            Local1 = Zero
            While ((Local1 < Arg1))
            {
                Local0 = RINC (Arg0, Local1)
                If ((Local0 == Arg2))
                {
                    Return (Local1)
                }

                Local1++
            }

            Return (Ones)
        }

        Method (TINI, 0, NotSerialized)
        {
            FLNK (0xFF, Zero)
            CopyObject (CMGA, CAGA) /* \_SB_.CAGA */
            CopyObject (CMGB, CAGB) /* \_SB_.CAGB */
            CopyObject (CMGC, CAGC) /* \_SB_.CAGC */
            CopyObject (CMGD, CAGE) /* \_SB_.CAGE */
            CopyObject (CCGD, CAGD) /* \_SB_.CAGD */
            FNKC = IFNK /* \_SB_.IFNK */
            ICMD = Zero
            IFNK = Zero
            LEND = Zero
            If ((\_SB.PCI0.LPCB.EC94 & One))
            {
                If (BTCG)
                {
                    F0CM = One
                    FLNK (0xFF, Zero)
                    BTCG = Zero
                }
            }
        }

        Method (PARG, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, LARG)
            Return (LARG) /* \_SB_.PARG.LARG */
        }

        Method (GTIF, 0, Serialized)
        {
            If (((INIF == Zero) || (LEND == 0x13)))
            {
                INIF = One
                Return (Zero)
            }

            Return (INIF) /* \_SB_.INIF */
        }

        Method (CKIF, 0, NotSerialized)
        {
            Local0 = GTIF ()
            If ((Local0 == Zero))
            {
                Acquire (MUTS, 0xFFFF)
                ILLU = 0x0F
                TINI ()
                CLRB ()
                Release (MUTS)
            }
        }

        Name (RETA, Package (0x06)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Name (HDSP, 0x0F)
        Name (HDSB, Zero)
        Name (BATL, Zero)
        Name (SYBZ, Zero)
        Name (HDSD, Zero)
        Name (RFMD, 0xA0)
        Name (VADV, 0xBE)
        Name (VACC, 0x0100)
        Mutex (MUTM, 0x00)
        Name (ECRT, Package (0x08)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Method (CLRB, 0, NotSerialized)
        {
            Local0 = Zero
            While ((Local0 < 0x08))
            {
                ECRT [Local0] = Zero
                Local0++
            }

            \_SB.PCI0.LPCB.EWRB = Zero
            \_SB.PCI0.LPCB.ERDB = Zero
        }

        Method (CKPC, 0, NotSerialized)
        {
            If ((\_SB.PCI0.LPCB.EWRB == Zero))
            {
                Local0 = Zero
                While ((Local0 < 0x08))
                {
                    Local1 = DerefOf (ECRT [Local0])
                    If (((Local1 & 0xFF000000) == 0xFD000000))
                    {
                        ECRT [Local0] = ((Local1 & 0x00FFFFFF) + 0xFF000000)
                        Local0++
                        \_SB.PCI0.LPCB.EWRB = ((Local1 & 0x00FFFFFF) + (Local0 << 0x18))
                        Break
                    }

                    Local0++
                }
            }
        }

        Method (CKSM, 0, NotSerialized)
        {
            If ((\_SB.PCI0.LPCB.ERDB != Zero))
            {
                Local0 = ((\_SB.PCI0.LPCB.ERDB >> 0x18) & 0xFF)
                If ((Local0 <= 0x08))
                {
                    Local1 = Local0
                    Local0--
                    ECRT [Local0] = ((\_SB.PCI0.LPCB.ERDB & 0x00FFFFFF) + 0xFE000000)
                    If ((Local1 == 0x02))
                    {
                        HDSB = Zero
                    }
                }

                \_SB.PCI0.LPCB.ERDB = Zero
            }

            CKPC ()
        }

        Method (RDSM, 1, NotSerialized)
        {
            Acquire (MUTM, 0xFFFF)
            CKSM ()
            Local0 = Arg0
            Local0--
            Local1 = DerefOf (ECRT [Local0])
            If (((Local1 & 0xFF000000) == 0xFE000000))
            {
                ECRT [Local0] = Zero
            }

            Release (MUTM)
            Return (Local1)
        }

        Method (WRSM, 4, NotSerialized)
        {
            If ((((Arg0 == 0x94) || (Arg0 == 0x91)) || (Arg0 == 0x92)))
            {
                RDSM (Arg1)
            }

            Acquire (MUTM, 0xFFFF)
            Local3 = (Arg0 + ((Arg1 << 0x18) + ((Arg3 << 0x10
                ) + (Arg2 << 0x08))))
            Local2 = One
            Local1 = Zero
            CKSM ()
            Local0 = ((Local3 >> 0x18) & 0xFF)
            Local0--
            If ((((Arg0 == 0x94) || (Arg0 == 0x91)) || (Arg0 == 0x92)))
            {
                ECRT [Local0] = Zero
            }
            Else
            {
                Local1 = DerefOf (ECRT [Local0])
            }

            If ((Local1 == Zero))
            {
                If ((\_SB.PCI0.LPCB.EWRB == Zero))
                {
                    ECRT [Local0] = 0xFF000000
                    \_SB.PCI0.LPCB.EWRB = Local3
                }
                Else
                {
                    ECRT [Local0] = ((Local3 & 0x00FFFFFF) + 0xFD000000)
                }

                Local2 = Zero
            }
            ElseIf (((Local1 & 0xFF000000) == 0xFE000000))
            {
                Local2 = 0x02
            }

            Release (MUTM)
            Return (Local2)
        }

        Method (GRPA, 6, Serialized)
        {
            Local7 = RINC (CAGD, Zero)
            Local6 = RINC (CAGD, 0x04)
            Local5 = RINC (CAGD, 0x05)
            Local4 = RINC (CAGD, 0x0D)
            RETA [Zero] = RINC (CAGD, 0x03)
            RETA [One] = Local7
            RETA [0x02] = Local7
            RETA [0x03] = Local7
            RETA [0x04] = Local7
            RETA [0x05] = Local7
            Switch (Arg0)
            {
                Case (Zero)
                {
                    If (BCMF)
                    {
                        Local2 = (0xFF & \_SB.PCI0.GFX0.CBLV)
                        If ((OSYS < 0x07DC))
                        {
                            Local0 = SizeOf (\_SB.BRLV)
                        }
                        Else
                        {
                            Local0 = SizeOf (\_SB.BROH)
                        }

                        While (Local0)
                        {
                            Local0--
                            If ((OSYS < 0x07DC))
                            {
                                Local1 = DerefOf (\_SB.BRLV [Local0])
                            }
                            Else
                            {
                                Local1 = DerefOf (\_SB.BROH [Local0])
                            }

                            If ((Local2 == Local1))
                            {
                                Break
                            }
                        }

                        Local0 -= 0x02
                        \_SB.PCI0.LPCB.ECA3 = Local0
                    }

                    RETA [0x02] = (\_SB.PCI0.LPCB.ECA3 << 0x0D)
                    RETA [0x03] = 0xE000
                    RETA [Zero] = Local7
                }
                Case (One)
                {
                    If ((Arg2 == One))
                    {
                        RFMD = 0x0A
                        WRSM (0x94, One, 0x08, Zero)
                        RETA [Zero] = Local7
                    }
                    ElseIf ((Arg2 == 0x10))
                    {
                        RFMD = 0xA0
                        WRSM (0x94, One, 0x08, One)
                        RETA [Zero] = Local7
                    }
                }
                Case (0x02)
                {
                    If ((Arg2 == Zero))
                    {
                        RETA [0x03] = RINC (CAGD, 0x06)
                        RETA [Zero] = Local7
                    }
                    ElseIf ((Arg2 == 0xFFFF))
                    {
                        RETA [0x03] = 0x0200
                        RETA [Zero] = Local7
                    }
                }
                Case (0x03)
                {
                    If ((Arg2 == Zero))
                    {
                        Local0 = (Arg3 & 0xFFFF)
                        Local1 = (((Local0 >> 0x08) + (Local0 & 0xFF)) << 
                            0x10)
                        Local1 += Local0
                        Acquire (MUTS, 0xFFFF)
                        FLNK (Arg1, Local1)
                        If ((SWB0 == Zero))
                        {
                            WINC (CAGD, 0x06, Local0)
                            RETA [Zero] = Local7
                        }

                        Release (MUTS)
                    }
                }
                Case (0x04)
                {
                    If (((Arg2 == One) || (Arg2 == 0x02)))
                    {
                        If ((Arg5 == Zero))
                        {
                            If ((SYBZ == Zero))
                            {
                                RETA [Zero] = Local7
                            }
                            Else
                            {
                                RETA [Zero] = Local6
                            }
                        }
                        ElseIf ((Arg5 == One))
                        {
                            If ((SYBZ == 0x03))
                            {
                                RETA [Zero] = Local5
                            }
                            Else
                            {
                                Local0 = Arg2
                                If ((Local0 == One))
                                {
                                    If ((\_SB.PCI0.LPCB.EC94 & One))
                                    {
                                        RETA [0x02] = \_SB.PCI0.LPCB.B1VT
                                        RETA [Zero] = Local7
                                    }
                                    Else
                                    {
                                        Local0 = 0x02
                                    }
                                }

                                If ((Local0 == 0x02))
                                {
                                    RETA [0x02] = 0xFF
                                    RETA [Zero] = Local7
                                }
                            }
                        }
                    }
                }
                Case (0x05)
                {
                    If (((Arg2 & 0xFFFFFFFE) == Zero))
                    {
                        If ((Arg5 == Zero))
                        {
                            If ((SYBZ == Zero))
                            {
                                RETA [Zero] = Local7
                            }
                            Else
                            {
                                RETA [Zero] = Local6
                            }
                        }
                        ElseIf ((Arg5 == One))
                        {
                            If ((SYBZ == 0x03))
                            {
                                RETA [Zero] = Local5
                            }
                            ElseIf ((Arg3 == Zero))
                            {
                                If ((Arg2 == Zero))
                                {
                                    Local1 = ((\_SB.PCI0.LPCB.HRPM << 0x08) + \_SB.PCI0.LPCB.LRPM)
                                    RETA [0x02] = Local1
                                    RETA [Zero] = Local7
                                }
                            }
                            ElseIf ((Arg3 == One))
                            {
                                If ((Arg2 == Zero))
                                {
                                    Local1 = ((\_SB.PCI0.LPCB.HRPM << 0x08) + \_SB.PCI0.LPCB.LRPM)
                                    RETA [0x02] = Local1
                                    RETA [0x03] = \_SB.PCI0.LPCB.MFAN
                                    RETA [Zero] = Local7
                                }
                            }
                        }
                    }
                }
                Case (0x07)
                {
                    If (((Arg2 == Zero) && (Arg3 == Zero)))
                    {
                        If ((Arg5 == Zero))
                        {
                            TEST = Zero
                            If ((SYBZ != 0x03))
                            {
                                RETA [Zero] = Local7
                            }
                            Else
                            {
                                RETA [Zero] = Local6
                            }
                        }
                        ElseIf ((Arg5 == One))
                        {
                            If ((SYBZ == 0x03))
                            {
                                RETA [Zero] = Local5
                            }
                            Else
                            {
                                Acquire (MUTS, 0xFFFF)
                                TRAP (\TRTD (0x28), Release (MUTS))
                                If (VGAM)
                                {
                                    Local0 = ((\_SB.PCI0.LPCB.VGAT << 0x18) + ((TCCR << 0x10) + (
                                        \_SB.PCI0.LPCB.RCPU << 0x08)))
                                }
                                Else
                                {
                                    Local0 = (0xFF000000 + ((TCCR << 0x10) + (\_SB.PCI0.LPCB.RCPU << 0x08)
                                        ))
                                }

                                If (((\_SB.PCI0.LPCB.EC92 & 0x08) == 0x08))
                                {
                                    If ((\_SB.PCI0.LPCB.ADVT != 0xFF))
                                    {
                                        Local1 = \_SB.PCI0.LPCB.ADVT
                                        VADV = Local1
                                    }
                                    ElseIf ((\_SB.PCI0.LPCB.FCBT == One))
                                    {
                                        Local1 = \_SB.PCI0.LPCB.ADVT
                                        VADV = Local1
                                    }
                                    Else
                                    {
                                        Local1 = VADV /* \_SB_.VADV */
                                    }

                                    RETA [0x02] = (Local0 + Local1)
                                    If (((\_SB.PCI0.LPCB.ACCR & 0xFF00) != 0xFF00))
                                    {
                                        Local1 = \_SB.PCI0.LPCB.ACCR
                                        VACC = Local1
                                    }
                                    ElseIf ((\_SB.PCI0.LPCB.FCBT == One))
                                    {
                                        Local1 = \_SB.PCI0.LPCB.ACCR
                                        VACC = Local1
                                    }
                                    Else
                                    {
                                        Local1 = VACC /* \_SB_.VACC */
                                    }

                                    Local0 = Local1
                                    RETA [0x03] = ((\_SB.PCI0.LPCB.ACCA << 0x10) + Local0)
                                }
                                Else
                                {
                                    RETA [0x02] = (Local0 + 0xFF)
                                    RETA [0x03] = ((\_SB.PCI0.LPCB.ACCA << 0x10) + 0xFFFF)
                                }

                                RETA [Zero] = Local7
                            }
                        }
                    }
                }
                Case (0x08)
                {
                    Local0 = One
                    If ((Arg4 == 0x9D))
                    {
                        Local0 = Zero
                    }

                    If ((Local0 == Zero))
                    {
                        RETA [Zero] = RINC (CAGD, 0x02)
                    }
                    ElseIf ((Arg5 == Zero))
                    {
                        Local0 = One
                        Local1 = (Local4 + One)
                        If ((Arg4 == 0x98))
                        {
                            If (((Arg2 != One) && (Arg2 != 0x02)))
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((Arg4 == 0xA9))
                        {
                            If (((Arg2 != One) && (Arg2 != 0x02)))
                            {
                                If (((Arg2 != Local4) && (Arg2 != Local1)))
                                {
                                    Local0 = Zero
                                }
                            }
                        }
                        ElseIf ((Arg4 == 0x9A))
                        {
                            If (((Arg2 & 0xFFFFFFFE) != Zero))
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf ((Arg4 == 0x9B))
                        {
                            If ((Arg2 > 0x02))
                            {
                                Local0 = Zero
                            }
                        }
                        ElseIf (((Arg4 == 0xA0) || (Arg4 == 0x9D)))
                        {
                            If ((Arg3 != Zero))
                            {
                                Local0 = Zero
                            }
                        }

                        If (Local0)
                        {
                            If ((SYBZ == 0x03))
                            {
                                RETA [Zero] = Local6
                            }
                            ElseIf ((Arg4 == 0xA9))
                            {
                                If (((Arg2 == 0x02) || (Arg2 == Local1)))
                                {
                                    RETA [Zero] = Local7
                                }
                                ElseIf ((Arg2 == Local4))
                                {
                                    RETA [Zero] = Local7
                                }
                                ElseIf ((Arg2 == One))
                                {
                                    RETA [Zero] = Local7
                                }
                            }
                            ElseIf ((SYBZ == Zero))
                            {
                                RETA [Zero] = Local7
                            }
                            Else
                            {
                                RETA [Zero] = Local6
                            }
                        }
                    }
                    ElseIf ((Arg5 == One))
                    {
                        If ((SYBZ == 0x03))
                        {
                            RETA [Zero] = Local5
                        }
                        ElseIf ((Arg4 == 0x98))
                        {
                            Local0 = Arg2
                            If ((Local0 == One))
                            {
                                If ((\_SB.PCI0.LPCB.EC94 & One))
                                {
                                    RETA [0x02] = \_SB.PCI0.LPCB.B1CC
                                    RETA [0x03] = \_SB.PCI0.LPCB.B1TP
                                    RETA [Zero] = Local7
                                }
                                Else
                                {
                                    Local0 = 0x02
                                }
                            }

                            If ((Local0 == 0x02))
                            {
                                RETA [0x02] = 0xFFFF
                                RETA [0x03] = 0xFF
                                RETA [Zero] = Local7
                            }
                        }
                        ElseIf ((Arg4 == 0x9A))
                        {
                            If ((Arg2 == Zero))
                            {
                                RETA [0x02] = \_SB.PCI0.LPCB.PWMS
                                RETA [Zero] = Local7
                            }
                        }
                        ElseIf ((Arg4 == 0x9B))
                        {
                            If ((Arg2 == Zero))
                            {
                                RETA [0x03] = \_SB.PCI0.LPCB.PHC1
                                RETA [0x02] = \_SB.PCI0.LPCB.PHC2
                                \_SB.PCI0.LPCB.PHC1 = Zero
                                \_SB.PCI0.LPCB.PHC2 = Zero
                                RETA [Zero] = Local7
                            }
                            ElseIf ((Arg2 == One))
                            {
                                RETA [0x02] = \_SB.PCI0.LPCB.BATI
                                \_SB.PCI0.LPCB.BATI = Zero
                                RETA [Zero] = Local7
                            }
                            ElseIf ((Arg2 == 0x02))
                            {
                                RETA [0x03] = \_SB.PCI0.LPCB.PHC3
                                RETA [0x02] = \_SB.PCI0.LPCB.PHC4
                                \_SB.PCI0.LPCB.PHC3 = Zero
                                \_SB.PCI0.LPCB.PHC4 = Zero
                                RETA [Zero] = Local7
                            }
                        }
                        ElseIf ((Arg4 == 0x9D))
                        {
                            If ((Arg3 == Zero))
                            {
                                RETA [0x02] = HDSD /* \_SB_.HDSD */
                                RETA [Zero] = Local7
                            }
                        }
                        ElseIf ((Arg4 == 0xA0))
                        {
                            If ((Arg3 == Zero))
                            {
                                RETA [0x02] = (\_SB.PCI0.LPCB.EVTC & 0x0B)
                                RETA [Zero] = Local7
                            }
                        }
                        ElseIf ((Arg4 == 0xA9))
                        {
                            Local1 = (Local4 + One)
                            If ((Arg2 == One))
                            {
                                If ((\_SB.PCI0.LPCB.EC94 & One))
                                {
                                    Local2 = (\_SB.PCI0.LPCB.ECAE + (\_SB.PCI0.LPCB.ECAF << 0x08))
                                    Local0 = \_SB.PCI0.LPCB.ECAA
                                    Local1 = \_SB.PCI0.LPCB.ECAB
                                    Local1 <<= 0x08
                                    Local0 += Local1
                                    Local0 *= Local2
                                    Divide (Local0, 0x03E8, Local1, Local4)
                                    Divide (Local0, 0x2710, Local1, Local3)
                                    Local0 = \_SB.PCI0.LPCB.ECAC
                                    Local1 = \_SB.PCI0.LPCB.ECAD
                                    Local1 <<= 0x08
                                    Local0 += Local1
                                    Local0 *= Local2
                                    Divide (Local0, 0x2710, Local1, Local0)
                                    Local1 = ((Local0 << 0x10) + Local3)
                                    RETA [0x04] = Local1
                                    Local0 = \_SB.PCI0.LPCB.ECA4
                                    Local1 = Local4
                                    Local4 = (Local1 * Local0)
                                    Divide (Local4, 0x64, Local1, Local0)
                                    Local0 += One
                                    Divide (Local0, 0x0A, Local1, Local0)
                                    Local1 = ((Local0 << 0x10) + \_SB.PCI0.LPCB.BSS1)
                                    RETA [0x02] = (Local1 + (\_SB.PCI0.LPCB.BSS2 << 0x08))
                                    RETA [0x03] = ((\_SB.PCI0.LPCB.BCV1 << 0x10) + \_SB.PCI0.LPCB.BCV0)
                                    RETA [0x05] = \_SB.PCI0.LPCB.BCV2
                                    RETA [Zero] = Local7
                                }
                                Else
                                {
                                    RETA [0x02] = 0xFFFF
                                    RETA [0x03] = 0xFFFF
                                    RETA [0x04] = 0xFFFF
                                    RETA [0x05] = 0xFFFF
                                    RETA [Zero] = Local7
                                }
                            }
                            ElseIf (((Arg2 == Local4) && ((\_SB.PCI0.LPCB.EC94 & One) == One)))
                            {
                                Local2 = (\_SB.PCI0.LPCB.ECAE + (\_SB.PCI0.LPCB.ECAF << 0x08))
                                RETA [0x02] = Local2
                                RETA [Zero] = Local7
                            }
                            ElseIf (((Arg2 == 0x02) || (Arg2 == Local1)))
                            {
                                RETA [0x02] = 0xFFFF
                                RETA [0x03] = 0xFFFF
                                RETA [0x04] = 0xFFFF
                                RETA [0x05] = 0xFFFF
                                RETA [Zero] = Local7
                            }
                        }
                    }
                }
                Case (0x09)
                {
                    If ((Arg3 == Zero))
                    {
                        If (((Arg2 & 0xF4) == Zero))
                        {
                            \_SB.PCI0.LPCB.EVTC = Arg2
                            RETA [Zero] = Local7
                        }
                    }
                }
                Case (0x0C)
                {
                    RETA [0x02] = \_SB.PCI0.LPCB.CTHI
                    RETA [0x03] = \_SB.PCI0.LPCB.CTLO
                    RETA [Zero] = Local7
                }
                Case (0x0D)
                {
                    Local0 = ((Arg2 | Arg3) | Arg4)
                    Local1 = (RINC (CAGD, 0x07) & 0xFFFF)
                    If (((Local1 >= 0x0690) && (Local1 < 0x06A0)))
                    {
                        If (((\_SB.PCI0.LPCB.ECE2 & 0x40) == Zero))
                        {
                            If ((\_SB.PCI0.LPCB.EC94 & One))
                            {
                                RETA [Zero] = RINC (CAGD, 0x02)
                                Local0 = One
                            }
                        }
                    }

                    If ((Local0 == Zero))
                    {
                        If (((Arg5 & 0xFFFE) == Zero))
                        {
                            If ((Arg5 == Zero))
                            {
                                BATL = One
                                RETA [Zero] = Local7
                            }
                            ElseIf ((BATL == One))
                            {
                                RETA [0x02] = \_SB.PCI0.LPCB.BLFM
                                RETA [Zero] = Local7
                                BATL = Local7
                            }
                            Else
                            {
                                RETA [Zero] = Local5
                            }
                        }
                    }
                }
                Case (0x0E)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFFE) == Zero))
                        {
                            \_SB.PCI0.LPCB.BLFM = Arg2
                            If ((BTCL == One))
                            {
                                \_SB.PCI0.LPCB.BLFM = BTCL /* \_SB_.BTCL */
                                BTCL = 0x02
                            }

                            WRSM (0x94, 0x05, 0x89, Arg2)
                            RETA [Zero] = Local7
                        }
                    }
                }
                Default
                {
                    RETA [Zero] = RINC (CAGD, 0x02)
                }

            }

            Return (RETA) /* \_SB_.RETA */
        }

        Method (GRPB, 7, Serialized)
        {
            Local7 = RINC (CAGD, Zero)
            Local6 = RINC (CAGD, One)
            Local5 = RINC (CAGD, 0x03)
            Switch (Arg0)
            {
                Case (0x06)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        RETP [0x02] = Zero
                        If ((HSWK == 0xE9))
                        {
                            RETP [0x02] = 0x20
                            RETP [0x03] = 0x90
                        }

                        RETP [Zero] = Local7
                    }
                }
                Case (0x09)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If ((Arg2 == 0x5A00))
                        {
                            If ((HSWK == 0xE9))
                            {
                                HSWK = Zero
                            }

                            RETP [Zero] = Local7
                        }
                    }
                }
                Case (0x12)
                {
                    Local0 = ((Arg6 & 0x00FF0000) >> 0x10)
                    RETP [Zero] = Local5
                    Switch (Local0)
                    {
                        Case (Zero)
                        {
                            Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                            If ((Local0 == Zero))
                            {
                                RETP [0x03] = Local6
                                RETP [0x02] = Local7
                                RETP [Zero] = Local7
                            }
                        }
                        Case (One)
                        {
                            Local1 = (((Arg2 | Arg3) | Arg4) | Arg5)
                            If ((Local1 == Zero))
                            {
                                If (((Arg6 & 0xFF000000) == Zero))
                                {
                                    MFNO = Local0
                                    FLNK (0xFF, Arg1)
                                    Local1 = MFNO /* \_SB_.MFNO */
                                    RETP [Zero] = (Local1 << 0x08)
                                }
                            }
                        }
                        Case (0x03)
                        {
                            Local1 = (((Arg2 | Arg3) | Arg4) | Arg5)
                            If ((Local1 == Zero))
                            {
                                If (((Arg6 & 0xFF000000) == Zero))
                                {
                                    MFNO = Local0
                                    FLNK (0xFF, Arg1)
                                    RETP [0x02] = MBF1 /* \_SB_.MBF1 */
                                    RETP [0x03] = MBF2 /* \_SB_.MBF2 */
                                    RETP [0x04] = MBF3 /* \_SB_.MBF3 */
                                    RETP [0x05] = MBF4 /* \_SB_.MBF4 */
                                    RETP [Zero] = Local7
                                }
                            }
                        }
                        Case (0x04)
                        {
                            Local1 = (((Arg2 | Arg3) | Arg4) | Arg5)
                            If ((Local1 == Zero))
                            {
                                If (((Arg6 & 0xFF000000) == Zero))
                                {
                                    MFNO = Local0
                                    FLNK (0xFF, Arg1)
                                    RETP [0x02] = MBF1 /* \_SB_.MBF1 */
                                    RETP [0x03] = MBF2 /* \_SB_.MBF2 */
                                    RETP [0x04] = MBF3 /* \_SB_.MBF3 */
                                    RETP [0x05] = MBF4 /* \_SB_.MBF4 */
                                    RETP [Zero] = Local7
                                }
                            }
                        }
                        Case (0x05)
                        {
                            Local1 = (((Arg2 | Arg3) | Arg4) | Arg5)
                            If ((Local1 == Zero))
                            {
                                If (((Arg6 & 0xFF000000) == Zero))
                                {
                                    MFNO = Local0
                                    FLNK (0xFF, Arg1)
                                    RETP [0x02] = MBF1 /* \_SB_.MBF1 */
                                    RETP [0x03] = MBF2 /* \_SB_.MBF2 */
                                    RETP [0x04] = MBF3 /* \_SB_.MBF3 */
                                    RETP [0x05] = MBF4 /* \_SB_.MBF4 */
                                    RETP [Zero] = Local7
                                }
                            }
                        }
                        Case (0x06)
                        {
                            Local1 = (((Arg2 | Arg3) | Arg4) | Arg5)
                            If ((Local1 == Zero))
                            {
                                If (((Arg6 & 0xFF000000) == Zero))
                                {
                                    MFNO = Local0
                                    FLNK (0xFF, Arg1)
                                    RETP [0x02] = MBF1 /* \_SB_.MBF1 */
                                    RETP [Zero] = Local7
                                }
                            }
                        }

                    }
                }
                Case (0x13)
                {
                    Local0 = ((Arg6 & 0x00FF0000) >> 0x10)
                    RETP [Zero] = Local5
                    Switch (Local0)
                    {
                        Case (One)
                        {
                            Local1 = ((Arg3 | Arg4) | Arg5)
                            If ((Local1 == Zero))
                            {
                                If (((Arg6 & 0xFF000000) == Zero))
                                {
                                    MFNO = Local0
                                    MBF1 = Arg2
                                    FLNK (0xFF, Arg1)
                                    Local1 = MFNO /* \_SB_.MFNO */
                                    RETP [Zero] = (Local1 << 0x08)
                                }
                            }
                        }
                        Case (0x02)
                        {
                            Local1 = ((Arg3 | Arg4) | Arg5)
                            If ((Local1 == Zero))
                            {
                                If (((Arg6 & 0xFF000000) == Zero))
                                {
                                    MFNO = Local0
                                    MBF1 = Arg2
                                    FLNK (0xFF, Arg1)
                                    Local1 = MFNO /* \_SB_.MFNO */
                                    RETP [Zero] = (Local1 << 0x08)
                                }
                            }
                        }
                        Case (0x03)
                        {
                            If (((Arg6 & 0xFF000000) == Zero))
                            {
                                MFNO = Local0
                                MBF1 = Arg2
                                MBF2 = Arg3
                                MBF3 = Arg4
                                MBF4 = Arg5
                                FLNK (0xFF, Arg1)
                                RETP [Zero] = Local7
                            }
                        }
                        Case (0x04)
                        {
                            If (((Arg6 & 0xFF000000) == Zero))
                            {
                                MFNO = Local0
                                MBF1 = Arg2
                                MBF2 = Arg3
                                MBF3 = Arg4
                                MBF4 = Arg5
                                FLNK (0xFF, Arg1)
                                RETP [Zero] = Local7
                            }
                        }
                        Case (0x05)
                        {
                            If (((Arg6 & 0xFF000000) == Zero))
                            {
                                MFNO = Local0
                                MBF1 = Arg2
                                MBF2 = Arg3
                                MBF3 = Arg4
                                MBF4 = Arg5
                                FLNK (0xFF, Arg1)
                                RETP [Zero] = Local7
                            }
                        }
                        Case (0x06)
                        {
                            Local1 = ((Arg3 | Arg4) | Arg5)
                            If ((Local1 == Zero))
                            {
                                If (((Arg6 & 0xFF000000) == Zero))
                                {
                                    If (((Arg2 & 0xFFFFFF00) == Zero))
                                    {
                                        MFNO = Local0
                                        MBF1 = Arg2
                                        FLNK (0xFF, Arg1)
                                        RETP [Zero] = Local7
                                    }
                                }
                            }
                        }

                    }
                }

            }
        }

        Name (PTST, 0xFF)
        Method (GRPC, 6, Serialized)
        {
            Local7 = RINC (CAGD, Zero)
            Local6 = RINC (CAGD, One)
            Local5 = RINC (CAGD, 0x03)
            Switch (Arg0)
            {
                Case (Zero)
                {
                    If ((PTST == 0xFF))
                    {
                        PTST = FLNK (Arg1, 0x0F)
                    }

                    RETP [0x02] = PTST /* \_SB_.PTST */
                    RETP [0x04] = Local6
                    RETP [Zero] = Local7
                }
                Case (One)
                {
                    If (((Arg2 & 0xFFFE) == Zero))
                    {
                        PTST = Arg2
                        FLNK (Arg1, Arg2)
                        RETP [Zero] = Local7
                    }
                }
                Case (0x02)
                {
                    Local0 = One
                    If ((HKEM == One))
                    {
                        Local0 = 0x03
                    }

                    If ((HSEM == One))
                    {
                        Local0 += 0x08
                    }

                    If ((FKMS == 0xFF))
                    {
                        Sleep (0x0A)
                        If (((\_SB.PCI0.LPCB.ECDB & 0x40) == 0x40))
                        {
                            FKMS = One
                        }
                        Else
                        {
                            FKMS = Zero
                        }
                    }

                    If ((FKMS == One))
                    {
                        Local0 += 0x10
                    }

                    Sleep (0x0A)
                    If (((\_SB.PCI0.LPCB.ECDB & 0x80) == 0x80))
                    {
                        RETP [0x03] = Local6
                    }

                    RETP [0x02] = Local0
                    RETP [Zero] = Local7
                }
                Case (0x03)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        RETP [0x02] = RESV /* \_SB_.RESV */
                        RETP [Zero] = Local7
                    }
                }
                Case (0x04)
                {
                    Local0 = ((Arg2 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If ((Arg3 == One))
                        {
                            If (((\_SB.PCI0.LPCB.EC93 & 0x22) != Zero))
                            {
                                Local3 = (((\_SB.PCI0.LPCB.EC93 & 0x08) << 0x06) + ((\_SB.PCI0.LPCB.EC93 & 
                                    0x10) >> 0x04))
                                RETP [0x02] = Local3
                                RETP [Zero] = Local7
                            }
                        }
                        ElseIf ((Arg3 == 0xFFFE))
                        {
                            Local0 = (\_SB.PCI0.LPCB.RFLO & One)
                            RETP [0x02] = Local0
                            RETP [Zero] = Local7
                        }
                        ElseIf ((Arg3 == 0xFFFF))
                        {
                            Local0 = (\_SB.PCI0.LPCB.EC92 & 0x80)
                            RETP [0x02] = (\_SB.PCI0.LPCB.EC92 >> 0x07)
                            RETP [Zero] = Local7
                        }
                    }
                }
                Case (0x05)
                {
                    RETP [0x03] = 0x21
                    RETP [Zero] = Local7
                }
                Case (0x06)
                {
                    Local0 = Zero
                    Local0 = FLNK (Arg1, 0xFF)
                    RETP [0x02] = Local0
                    RETP [0x03] = Local6
                    RETP [0x04] = CTSU /* \_SB_.CTSU */
                    RETP [Zero] = Local7
                }
                Case (0x07)
                {
                    If ((Arg2 == 0x03))
                    {
                        Local3 = FLNK (0x1F, 0xFF)
                        RETP [Zero] = Local7
                        RETP [0x03] = Zero
                        Local0 = (FLNK (Arg1, 0xFF) << 0x04)
                        RETP [0x02] = (Local0 & 0x10)
                        If ((Local3 == One))
                        {
                            If ((\_SB.PCI0.GFX0.CPDL == 0x0300))
                            {
                                RETP [0x03] = 0x10
                            }
                            ElseIf ((\_SB.PCI0.GFX0.CPL2 == 0x0300))
                            {
                                RETP [0x03] = 0x10
                            }
                            ElseIf ((\_SB.PCI0.GFX0.CPL3 == 0x0300))
                            {
                                RETP [0x03] = 0x10
                            }
                            Else
                            {
                                RETP [0x03] = Zero
                            }
                        }

                        RETP [Zero] = Local7
                    }
                    ElseIf ((Arg2 == 0x07))
                    {
                        RETP [Zero] = Local7
                        RETP [0x02] = 0x02
                    }
                    ElseIf ((Arg2 == 0x08))
                    {
                        Local3 = FLNK (0x1F, 0xFF)
                        RETP [Zero] = Local7
                        If ((Local3 == One))
                        {
                            If ((\_SB.PCI0.GFX0.CPDL == 0x0300))
                            {
                                RETP [0x02] = One
                            }
                            ElseIf ((\_SB.PCI0.GFX0.CPL2 == 0x0300))
                            {
                                RETP [0x02] = One
                            }
                            ElseIf ((\_SB.PCI0.GFX0.CPL3 == 0x0300))
                            {
                                RETP [0x02] = One
                            }
                            Else
                            {
                                RETP [0x02] = Zero
                            }
                        }
                    }
                    ElseIf ((Arg2 == 0x09))
                    {
                        RETP [Zero] = Local7
                        RETP [0x02] = One
                    }
                    ElseIf ((Arg2 == 0x0A))
                    {
                        RETP [Zero] = Local7
                        RETP [0x02] = Zero
                    }
                }
                Case (0x08)
                {
                    If (((Arg2 & One) == One))
                    {
                        Local0 = ((Arg2 >> One) & One)
                        HKEM = Local0
                        \_SB.WREC (0xDB, 0x10, 0x04, Local0)
                        Local0 = ((Arg2 >> 0x03) & One)
                        HSEM = Local0
                        \_SB.WREC (0xDB, 0x20, 0x05, Local0)
                        Local0 = ((Arg2 >> 0x04) & One)
                        FKMS = Local0
                        \_SB.WREC (0xDB, 0x40, 0x06, Local0)
                        If (((Arg3 & 0xFFFFFFFE) == Zero))
                        {
                            \_SB.WREC (0xDB, 0x80, 0x07, Arg3)
                            RETP [Zero] = Local7
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x09)
                {
                    Local0 = (Arg4 | Arg5)
                    If ((Local0 == Zero))
                    {
                        If ((Arg3 == 0x0200))
                        {
                            If ((FLNK (Arg1, Arg2) != 0xFF))
                            {
                                RETP [Zero] = Local7
                            }
                        }
                        ElseIf ((Arg3 == 0xFFFE))
                        {
                            If ((Arg2 == Zero))
                            {
                                \_SB.PCI0.LPCB.RFLO = Zero
                            }
                            ElseIf ((Arg2 == One))
                            {
                                \_SB.PCI0.LPCB.RFLO = One
                            }

                            RETP [Zero] = Local7
                        }
                        ElseIf ((Arg3 == 0xFFFF))
                        {
                            If (((Arg2 & 0xFFFE) == Zero))
                            {
                                Local0 = (Arg2 + 0x9300)
                                FLNK (One, Local0)
                                RETP [Zero] = Local7
                            }
                        }
                    }
                }
                Case (0x0A)
                {
                    If ((Arg3 == One))
                    {
                        If (((Arg2 & 0xFFFC) == Zero))
                        {
                            If (((Arg2 & 0x03) == 0x02))
                            {
                                Local0 = 0x07
                            }
                            Else
                            {
                                Local0 = (Arg2 << One)
                                Local0 += One
                            }

                            FLNK (Arg1, Local0)
                            RETP [Zero] = Local7
                        }
                    }
                }
                Case (0x0B)
                {
                    If (((Arg2 & 0xFFFE) == Zero))
                    {
                        FLNK (Arg1, Arg2)
                        RETP [Zero] = Local7
                    }
                }
                Case (0x0C)
                {
                    If ((Arg2 == Zero))
                    {
                        If (((Arg3 & 0xFFFE) == Zero))
                        {
                            RETP [Zero] = Local7
                        }
                    }
                }
                Case (0x0D)
                {
                    If ((KBLE != Zero))
                    {
                        Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                        If ((Local0 == Zero))
                        {
                            RETP [0x02] = FLNK (Arg1, 0xFFFF000E)
                            RETP [Zero] = Local7
                        }
                    }
                }
                Case (0x0E)
                {
                    RETP [Zero] = 0x8400
                }
                Case (0x0F)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        RETP [0x02] = (RINC (CAGD, 0x07) >> 0x10)
                        RETP [0x03] = (RINC (CAGD, 0x07) & 0xFFFF)
                        RETP [Zero] = Local7
                    }
                }
                Case (0x10)
                {
                    If ((UCSP != Zero))
                    {
                        RETP [Zero] = RINC (CAGD, 0x0C)
                        If ((USAC != Zero))
                        {
                            RETP [Zero] = Local7
                            Local1 = RINC (CAGD, 0x12)
                            Local2 = (Local1 + Local1)
                            Local4 = (Local1 + Local2)
                            Local3 = (Local1 + One)
                            If ((Arg5 == Local7))
                            {
                                FLNK (Arg1, 0xE0)
                                RETP [One] = RINC (CAGD, 0x0E)
                                If (((USC1 & One) == Zero))
                                {
                                    USC1 &= 0xFFFFFFC1
                                }

                                RETP [0x02] = USC1 /* \_SB_.USC1 */
                                RETP [0x03] = (0x00010000 + 0x29)
                                RETP [0x04] = 0x00010000
                            }
                            ElseIf ((Arg5 == Local4))
                            {
                                RETP [Zero] = Local6
                                RETP [One] = Local7
                                RETP [0x02] = CDPM /* \_SB_.CDPM */
                                RETP [0x04] = Local6
                            }
                            ElseIf ((Arg5 == Local1))
                            {
                                RETP [One] = RINC (CAGD, 0x0D)
                                RETP [0x02] = Local6
                            }
                            ElseIf ((Arg5 == Local2))
                            {
                                FLNK (Arg1, 0xE2)
                                RETP [One] = RINC (CAGD, 0x0F)
                                RETP [0x02] = USC2 /* \_SB_.USC2 */
                                RETP [0x03] = RINC (CAGD, 0x10)
                                RETP [0x04] = RINC (CAGD, 0x11)
                            }
                            ElseIf (((Arg5 & Local1) == Local1))
                            {
                                If ((Arg5 == Local3))
                                {
                                    RETP [One] = RINC (CAGD, 0x0E)
                                    RETP [0x02] = Local7
                                    RETP [0x02] = (0x00010000 + 0x29)
                                }
                                Else
                                {
                                    RETP [Zero] = Local5
                                }
                            }
                            Else
                            {
                                RETP [Zero] = Local5
                            }
                        }
                    }
                }
                Case (0x11)
                {
                    If ((UCSP != Zero))
                    {
                        RETP [Zero] = RINC (CAGD, 0x0C)
                        If ((USAC != Zero))
                        {
                            RETP [Zero] = Local5
                            If ((Arg5 == Zero))
                            {
                                Local0 = (Ones ^ 0x29)
                                Local1 = (Local0 ^ 0x00010000)
                                Local0 = (Arg2 & 0x00010000)
                                If ((((Arg2 & Local1) == Zero) && (Local0 != Zero)))
                                {
                                    Local0 = (Arg2 & 0x3F)
                                    If ((((Local0 & One) == Zero) && (Local0 != Zero)))
                                    {
                                        Local0 = One
                                    }

                                    If ((Local0 != One))
                                    {
                                        USC1 = Arg2
                                        FLNK (Arg1, 0xE1)
                                        RETP [Zero] = Local7
                                    }
                                }
                            }
                            ElseIf ((Arg5 == 0x0300))
                            {
                                Local0 = (((Arg2 & 0xFFFFFFFE) | Arg3) | Arg4)
                                If ((Local0 == Zero))
                                {
                                    CDPM = Arg2
                                    FLNK (0xFF, 0x43)
                                    RETP [Zero] = Local6
                                }
                                Else
                                {
                                    RETP [Zero] = Local5
                                }
                            }
                            ElseIf ((Arg5 == 0x0200))
                            {
                                If (((Arg2 & 0xFF80FFFA) == Zero))
                                {
                                    Local0 = (Arg2 & 0x05)
                                    If (((Local0 == One) || (Local0 == 0x04)))
                                    {
                                        Local0 = ((Arg2 & 0x00FF0000) >> 0x10)
                                        If ((Local0 <= 0x64))
                                        {
                                            USC2 = Arg2
                                            FLNK (Arg1, 0xE3)
                                            RETP [Zero] = Local7
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                Case (0x14)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If ((KBLE != Zero))
                        {
                            FLNK (Arg1, 0xF2)
                            RETP [0x02] = SWB0 /* \_SB_.SWB0 */
                            RETP [0x03] = SWB1 /* \_SB_.SWB1 */
                            RETP [0x04] = SWB2 /* \_SB_.SWB2 */
                            RETP [One] = (RINC (CAGD, 0x0F) + One)
                            RETP [Zero] = Local7
                        }
                    }
                }
                Case (0x15)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If ((KBLE != Zero))
                        {
                            SWB1 = Arg2
                            FLNK (Arg1, 0xF1)
                            RETP [Zero] = Local7
                            If ((LCMD == Zero))
                            {
                                RETP [Zero] = SWB0 /* \_SB_.SWB0 */
                            }
                        }
                    }
                    Else
                    {
                        RETP [Zero] = Local5
                    }

                    Notify (\_SB.VALZ, 0x92) // Device-Specific
                }
                Case (0x16)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        FLNK (Arg1, 0xF1)
                        If ((SWB0 != Ones))
                        {
                            Local0 = SWB0 /* \_SB_.SWB0 */
                        }

                        RETP [One] = 0x8005
                        RETP [0x02] = Local0
                        RETP [0x03] = 0xFFFE
                        RETP [Zero] = Local7
                    }
                }
                Case (0x17)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        FLNK (Arg1, 0xF2)
                        If ((SWB0 != Ones))
                        {
                            Local0 = SWB0 /* \_SB_.SWB0 */
                        }

                        RETP [One] = 0x8004
                        RETP [0x02] = Local0
                        RETP [0x03] = 0x0FFF
                        RETP [0x04] = One
                        RETP [Zero] = Local7
                    }
                }
                Case (0x18)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        SWB1 = Arg2
                        FLNK (Arg1, 0xF3)
                        RETP [Zero] = Local7
                    }
                }
                Case (0x19)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        SWB1 = Arg2
                        FLNK (Arg1, 0xF4)
                        RETP [Zero] = Local7
                    }
                }
                Case (0x1A)
                {
                    RETP [Zero] = 0x8000
                }
                Case (0x1B)
                {
                    RETP [Zero] = 0x8000
                }
                Case (0x1E)
                {
                    Local0 = ((Arg2 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg3 & 0xFFFE) == Zero))
                        {
                            If ((Arg3 == Zero))
                            {
                                Local1 = (\_SB.PCI0.LPCB.FCBT + (\_SB.PCI0.LPCB.BCS0 << One))
                                Local1 += (\_SB.PCI0.LPCB.BCSX << 0x02)
                                Local1 += ((\_SB.PCI0.LPCB.EC92 << 0x04) & 0x80)
                                RETP [0x02] = Local1
                            }
                            Else
                            {
                                RETP [0x02] = \_SB.PCI0.LPCB.TCBC
                                RETP [0x04] = Local6
                            }

                            RETP [Zero] = Local7
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x1F)
                {
                    Local0 = (Arg4 | Arg5)
                    If ((Local0 == Zero))
                    {
                        RETP [Zero] = Local5
                        If (((Arg3 & 0xFFFE) == Zero))
                        {
                            If ((Arg3 == Zero))
                            {
                                RETP [Zero] = Local7
                                If ((Arg2 == Zero))
                                {
                                    \_SB.PCI0.LPCB.FCBT = Local7
                                    \_SB.PCI0.LPCB.BCS0 = Local7
                                    \_SB.PCI0.LPCB.BCSX = Local7
                                }
                                ElseIf ((Arg2 == 0x10))
                                {
                                    \_SB.PCI0.LPCB.FCBT = Local6
                                }
                                ElseIf ((Arg2 == 0x11))
                                {
                                    \_SB.PCI0.LPCB.FCBT = Local7
                                }
                                ElseIf ((Arg2 == 0x20))
                                {
                                    \_SB.PCI0.LPCB.BCS0 = Local6
                                }
                                ElseIf ((Arg2 == 0x21))
                                {
                                    \_SB.PCI0.LPCB.BCS0 = Local7
                                }
                                ElseIf ((Arg2 == 0x40))
                                {
                                    \_SB.PCI0.LPCB.BCSX = Local6
                                }
                                ElseIf ((Arg2 == 0x41))
                                {
                                    \_SB.PCI0.LPCB.BCSX = Local7
                                }
                                Else
                                {
                                    RETP [Zero] = Local5
                                }
                            }
                            Else
                            {
                                Local1 = (Arg2 & 0xFFFF)
                                Local2 = ((Arg2 & 0xFFFF0000) >> 0x10)
                                If (((Local1 < 0x05A1) && (Local2 < 0x05A1)))
                                {
                                    \_SB.PCI0.LPCB.TCBC = Arg2
                                    \_SB.PCI0.LPCB.TMUD = Local6
                                    RETP [Zero] = Local7
                                }
                            }
                        }
                    }
                }
                Case (0x20)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        FLNK (0xFF, Arg1)
                        RETP [0x02] = HYBT /* \_SB_.HYBT */
                        RETP [Zero] = Local7
                    }
                }
                Case (0x21)
                {
                    Local0 = (Arg4 | Arg5)
                    If ((Local0 == Zero))
                    {
                        RETP [Zero] = Local5
                        If (((Arg2 & 0xFFFE) == Zero))
                        {
                            If ((Arg3 <= 0x02))
                            {
                                Local0 = (Arg1 + Arg2)
                                SKEY = Arg3
                                FLNK (0xFF, Local0)
                                RETP [Zero] = Local7
                            }
                        }
                    }
                }
                Case (0x22)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If ((FKRG != Zero))
                        {
                            RETP [0x04] = Local6
                        }
                        Else
                        {
                            RETP [0x04] = Local7
                        }

                        FLNK (0xFF, Arg1)
                        RETP [0x02] = HFMF /* \_SB_.HFMF */
                        RETP [One] = Local7
                        RETP [Zero] = Local6
                    }
                }
                Case (0x23)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFFE) == Zero))
                        {
                            HFMF = Arg2
                            FLNK (0xFF, Arg1)
                            RETP [Zero] = Local6
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }

            }
        }

        Method (VFBF, 0, Serialized)
        {
            If ((HSFN == Zero))
            {
                FLNK (0xFF, 0x41)
            }
        }

        Method (BDCK, 1, Serialized)
        {
            Name (BBUF, Buffer (0x08)
            {
                 0x01, 0x09, 0x02, 0x03, 0x05, 0x0F, 0x0F, 0x0F   // ........
            })
            Local0 = Arg0
            Local1 = (HSP3 & 0x0F)
            If ((Local1 == 0x04))
            {
                BBUF [0x04] = 0x0F
            }

            Local2 = Zero
            While ((Local2 < 0x08))
            {
                Local3 = (Local0 & 0x0F)
                Local0 >>= 0x04
                If ((Local3 == Zero))
                {
                    Return (Zero)
                }

                If ((Local2 < Local1))
                {
                    If ((Local3 == 0x0F))
                    {
                        Return (Zero)
                    }
                }

                Local4 = Zero
                Local5 = Zero
                While ((Local4 < 0x08))
                {
                    If ((Local3 == DerefOf (BBUF [Local4])))
                    {
                        BBUF [Local4] = Zero
                        Local5 = One
                        Break
                    }

                    Local4++
                }

                If ((Local5 == Zero))
                {
                    Return (Zero)
                }

                Local2++
            }

            Return (One)
        }

        Method (GRPD, 6, Serialized)
        {
            Local7 = RINC (CAGD, Zero)
            Local6 = RINC (CAGD, One)
            Local5 = RINC (CAGD, 0x03)
            Switch (Arg0)
            {
                Case (Zero)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        VFBF ()
                        RETP [0x02] = (HSP0 & 0x0F)
                        RETP [0x04] = Local7
                        RETP [One] = Local7
                        RETP [Zero] = Local7
                    }
                }
                Case (One)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFFE) == Zero))
                        {
                            VFBF ()
                            HSFN = One
                            HSP0 = (Arg2 | 0xF0)
                            RETP [Zero] = Local7
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x02)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        VFBF ()
                        If (((ILAN & 0xF0) != 0xF0))
                        {
                            ILAN = (HSP1 & 0x0F)
                            RETP [0x02] = ILAN /* \_SB_.ILAN */
                        }
                        Else
                        {
                            RETP [0x02] = (ILAN & 0x0F)
                        }

                        RETP [0x04] = Local6
                        RETP [One] = Local7
                        RETP [Zero] = Local6
                    }
                }
                Case (0x03)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFFE) == Zero))
                        {
                            VFBF ()
                            ILAN = (Arg2 | 0xF0)
                            RETP [Zero] = Local6
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x04)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        VFBF ()
                        Local1 = (HSP2 & 0x0F)
                        RETP [0x02] = (Local1 << 0x03)
                        RETP [0x04] = Local7
                        RETP [0x03] = 0x08
                        RETP [One] = 0x800A
                        RETP [Zero] = Local6
                    }
                }
                Case (0x05)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFF7) == Zero))
                        {
                            VFBF ()
                            HSFN = One
                            Local1 = (Arg2 >> 0x03)
                            HSP2 = (Local1 | 0xF0)
                            RETP [Zero] = Local6
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x06)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        VFBF ()
                        RETP [0x02] = HSBD /* \_SB_.HSBD */
                        RETP [0x03] = (HSP3 & 0x0F)
                        RETP [0x04] = HSDB /* \_SB_.HSDB */
                        RETP [One] = 0x8505
                        RETP [Zero] = Local7
                    }
                }
                Case (0x07)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (BDCK (Arg2))
                        {
                            VFBF ()
                            HSFN = One
                            HSP3 |= 0xF0
                            HSBD = Arg2
                            RETP [Zero] = Local7
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x08)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        VFBF ()
                        If ((HSP4 != 0xFF))
                        {
                            If (((USB3 & 0xF0) != 0xF0))
                            {
                                USB3 = (HSP4 & 0x0F)
                                RETP [0x02] = USB3 /* \_SB_.USB3 */
                            }
                            Else
                            {
                                RETP [0x02] = (USB3 & 0x0F)
                            }

                            RETP [0x04] = Local6
                            RETP [One] = Local7
                            RETP [Zero] = Local6
                        }
                    }
                }
                Case (0x09)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFFE) == Zero))
                        {
                            VFBF ()
                            If ((HSP4 != 0xFF))
                            {
                                USB3 = (Arg2 | 0xF0)
                                RETP [Zero] = Local6
                            }
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x0A)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        VFBF ()
                        RETP [0x02] = (HSP5 & 0x0F)
                        RETP [0x04] = Local7
                        RETP [One] = Local7
                        RETP [Zero] = Local6
                        If ((HSS0 == One))
                        {
                            RETP [Zero] = 0x03
                        }
                    }
                }
                Case (0x0B)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFFE) == Zero))
                        {
                            If ((HSS0 == One))
                            {
                                RETP [Zero] = 0x8400
                            }
                            Else
                            {
                                VFBF ()
                                HSFN = One
                                HSP5 = (Arg2 | 0xF0)
                                RETP [Zero] = Local6
                            }
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x0C)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        VFBF ()
                        If ((HSP6 != 0xFF))
                        {
                            Local1 = (HSP6 & 0x0F)
                            If (((Local1 & 0x0E) == Zero))
                            {
                                RETP [0x02] = 0x3290
                                If ((Local1 != Zero))
                                {
                                    RETP [0x02] = 0x1290
                                }
                            }
                            Else
                            {
                                RETP [0x02] = 0x3291
                                If (((Local1 >> One) != One))
                                {
                                    RETP [0x02] = 0x3294
                                }
                            }

                            RETP [0x04] = 0x3290
                            Local2 = 0x3290
                            Local3 = FLNK (0x9B, 0xFF)
                            Local4 = ((SWB0 & 0xFF00) >> 0x08)
                            If ((Local4 != Zero))
                            {
                                Local2 |= One
                            }

                            If ((Local3 == One))
                            {
                                Local2 |= 0x04
                            }

                            RETP [0x03] = Local2
                            RETP [One] = 0x8200
                            RETP [Zero] = Local6
                        }
                    }
                }
                Case (0x0D)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 == 0x1290) || (Arg2 == 0x3290)))
                        {
                            VFBF ()
                            If ((HSP4 != 0xFF))
                            {
                                HSFN = One
                                HSP6 = 0xF0
                                If ((Arg2 == 0x1290))
                                {
                                    HSP6 = 0xF1
                                }

                                RETP [Zero] = Local6
                            }
                        }
                        ElseIf (((Arg2 == 0x3291) || (Arg2 == 0x3294)))
                        {
                            VFBF ()
                            If ((HSP4 != 0xFF))
                            {
                                HSFN = One
                                RETP [Zero] = Local6
                                If ((Arg2 == 0x3291))
                                {
                                    Local3 = FLNK (0x9B, 0xFF)
                                    Local4 = ((SWB0 & 0xFF00) >> 0x08)
                                    If ((Local4 != Zero))
                                    {
                                        HSP6 = 0xF2
                                    }
                                    Else
                                    {
                                        RETP [Zero] = Local5
                                    }
                                }

                                If ((Arg2 == 0x3294))
                                {
                                    Local3 = FLNK (0x1F, 0xFF)
                                    If ((Local3 == One))
                                    {
                                        HSP6 = 0xF8
                                    }
                                    Else
                                    {
                                        RETP [Zero] = Local5
                                    }
                                }
                            }
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x0E)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        VFBF ()
                        RETP [0x02] = (HSP7 & 0x0F)
                        RETP [0x04] = Local7
                        RETP [One] = Local7
                        RETP [Zero] = Local6
                    }
                }
                Case (0x0F)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFFE) == Zero))
                        {
                            VFBF ()
                            HSFN = One
                            HSP7 = (Arg2 | 0xF0)
                            RETP [Zero] = Local6
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x10)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    RETP [Zero] = 0x8000
                }
                Case (0x11)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    RETP [Zero] = 0x8000
                }
                Case (0x12)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If ((Arg2 == 0x0800))
                        {
                            VFBF ()
                            Local1 = (HSP9 & 0x0F)
                            RETP [0x02] = (Local1 | 0x0800)
                            RETP [0x04] = 0x0800
                            RETP [One] = 0x8700
                            RETP [Zero] = Local7
                        }
                    }
                }
                Case (0x13)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFFE) == 0x0800))
                        {
                            VFBF ()
                            HSFN = One
                            Local1 = (Arg2 & One)
                            HSP9 = (Local1 | 0xF0)
                            RETP [Zero] = Local7
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x14)
                {
                }
                Case (0x15)
                {
                }
                Case (0x16)
                {
                    Local0 = (((Arg2 | Arg3) | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        VFBF ()
                        RETP [0x02] = (HSPB & 0x0F)
                        RETP [0x04] = Local7
                        RETP [One] = Local7
                        RETP [Zero] = Local6
                    }
                }
                Case (0x17)
                {
                    Local0 = ((Arg3 | Arg4) | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFFE) == Zero))
                        {
                            VFBF ()
                            Local1 = HSFN /* \_SB_.HSFN */
                            HSSS = 0x8C
                            HSFN = 0x02
                            FLNK (0xFF, 0x41)
                            If ((HSSS == Zero))
                            {
                                HSFN = One
                                HSPB = (Arg2 | 0xF0)
                                RETP [Zero] = Local6
                            }
                            Else
                            {
                                HSFN = Local1
                                RETP [Zero] = (HSSS << 0x08)
                            }
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x18)
                {
                    Local0 = (Arg4 | Arg5)
                    If ((Local0 == Zero))
                    {
                        If (((Arg2 & 0xFFFC) == Zero))
                        {
                            RETP [Zero] = Local5
                            If ((Arg2 == Zero))
                            {
                                LHDR = Arg3
                                LFUN = Zero
                                FLNK (0xFF, Arg1)
                                RETP [Zero] = Local7
                            }
                            ElseIf ((Arg3 == Zero))
                            {
                                If ((Arg2 == One))
                                {
                                    RETP [0x02] = LBSZ /* \_SB_.LBSZ */
                                    RETP [0x03] = LRES /* \_SB_.LRES */
                                }
                                ElseIf ((Arg2 == 0x02))
                                {
                                    RETP [0x02] = LADR /* \_SB_.LADR */
                                }
                                ElseIf ((Arg2 == 0x03))
                                {
                                    RETP [One] = LHDR /* \_SB_.LHDR */
                                    RETP [0x02] = One
                                }

                                RETP [Zero] = Local7
                            }
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }
                Case (0x19)
                {
                    Local0 = (Arg4 | Arg5)
                    If ((Local0 == Zero))
                    {
                        If ((Arg2 == Zero))
                        {
                            LHDR = Arg3
                            Local1 = LBSZ /* \_SB_.LBSZ */
                            LFUN = Local1
                            While ((Local1 != Zero))
                            {
                                FLNK (0xFF, Arg1)
                                Local1--
                                If ((LFUN == Zero))
                                {
                                    Local1 = Zero
                                }

                                Stall (0x50)
                            }

                            RETP [Zero] = Local7
                        }
                        Else
                        {
                            RETP [Zero] = Local5
                        }
                    }
                }

            }
        }

        Device (\_SB.VALZ)
        {
            Name (_HID, "TOS1900")  // _HID: Hardware ID
            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Return ("VALZeneral")
            }

            Method (ENAB, 0, NotSerialized)
            {
                Acquire (MUTS, 0xFFFF)
                If ((TSBK == Zero))
                {
                    FLNK (0x14, Zero)
                }

                TSBK = One
                Release (MUTS)
                If ((CECC != Zero))
                {
                    Notify (\_SB.VALZ, 0x80) // Status Change
                }
            }

            Method (SMDW, 5, Serialized)
            {
                Local0 = 0x8400
                Local1 = (Arg2 | Arg3)
                If (((Local1 == Zero) && (SizeOf (Arg4) <= 0x40)))
                {
                    Local4 = (~RINC (CAGD, One) - 0x02)
                    Local2 = (RINC (CAGD, 0x0A) - 0x02)
                    Local3 = (Local2 + 0x05)
                    ITLK = Local4
                    DMIS = Arg0
                    TPNO = Arg1
                    FLNK (0xFF, Local2)
                    If ((ITLK != Local4))
                    {
                        Local4++
                        APMC = Local3
                        DMIS = Arg0
                        TPNO = Arg1
                        WDMI = Arg4
                        FLNK (0xFF, Local2)
                        If ((ITLK != Local4))
                        {
                            APMC = Local3
                            Local0 = ((DMIS & 0x00FF0000) >> 0x08)
                        }
                    }

                    DMIS = Zero
                    WDMI = Zero
                }

                Return (Local0)
            }

            Method (HMB1, 0, NotSerialized)
            {
                Name (RETB, Buffer (0x1C)
                {
                     0x00                                             // .
                })
                Name (HBT1, Package (0x06)
                {
                    Buffer (0x1C)
                    {
                         0x00                                             // .
                    }, 

                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                CKIF ()
                If ((\_SB.PCI0.LPCB.EC94 & One))
                {
                    Acquire (MUTS, 0xFFFF)
                    If (BTCG)
                    {
                        F0CM = One
                        FLNK (0xFF, Zero)
                        BTCG = Zero
                    }

                    RETB = JFNK /* \_SB_.JFNK */
                    HBT1 [Zero] = RETB /* \_SB_.VALZ.HMB1.RETB */
                    HBT1 [One] = CYCC /* \_SB_.CYCC */
                    Release (MUTS)
                }

                Return (HBT1) /* \_SB_.VALZ.HMB1.HBT1 */
            }

            Method (HMB2, 0, NotSerialized)
            {
                Return (Package (0x06)
                {
                    Buffer (0x1C)
                    {
                         0x00                                             // .
                    }, 

                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
            }

            Method (INFO, 0, NotSerialized)
            {
                Acquire (MUTS, 0xFFFF)
                Local0 = Zero
                If ((CECC != Zero))
                {
                    FLNK (0xFF, 0x03)
                    If ((CECE != Zero))
                    {
                        Release (MUTS)
                        Return (CECE) /* \_SB_.CECE */
                    }
                    Else
                    {
                        FLNK (0xFF, 0x04)
                    }
                }

                If (((KYB0 == Zero) && (\_SB.PCI0.LPCB.EVCT != Zero)))
                {
                    FLNK (0x11, \_SB.PCI0.LPCB.EVCT)
                }

                Local1 = One
                While (Local1)
                {
                    If ((KYB0 != Zero))
                    {
                        Local0 = KYBF /* \_SB_.KYBF */
                        CopyObject (KYBA, SWBF) /* \_SB_.SWBF */
                        CopyObject (SWBF, KYBB) /* \_SB_.KYBB */
                        SWBF = Zero
                        If ((Local0 == 0xFE))
                        {
                            Local0 = Zero
                        }

                        If (((Local0 & 0xF0) == 0x90))
                        {
                            Local0 += 0x0B00
                        }

                        Local0 += 0x0100
                    }

                    Local1 = Zero
                    If ((KBLE == Zero))
                    {
                        If (((Local0 & 0xFF7F) == 0x012C))
                        {
                            Local0 = Zero
                            Local1 = One
                        }
                    }
                }

                Release (MUTS)
                Return (Local0)
            }

            Method (SPFC, 6, NotSerialized)
            {
                CKIF ()
                Local2 = ((PARG (Arg0) << 0x10) + (PARG (Arg1) & 0xFFFF))
                Local6 = SRCH (CAGA, LENA, Local2)
                If ((Local6 != Ones))
                {
                    Local5 = DerefOf (FNKC [Local6])
                    Return (GRPA (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), PARG (Arg5)))
                }
                Else
                {
                    Acquire (MUTS, 0xFFFF)
                    RETP [Zero] = RINC (CAGD, 0x02)
                    Local0 = RINC (CAGD, Zero)
                    RETP [One] = Local0
                    RETP [0x02] = Local0
                    RETP [0x03] = Local0
                    RETP [0x04] = Local0
                    RETP [0x05] = Local0
                    Local6 = SRCH (CAGB, LENB, Local2)
                    If ((Local6 != Ones))
                    {
                        Local5 = DerefOf (FNKC [(Local6 + LENA)])
                        GRPB (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), PARG (Arg5), PARG (
                            Arg1))
                    }
                    Else
                    {
                        Local6 = SRCH (CAGC, LENC, Local2)
                        If ((Local6 != Ones))
                        {
                            Local5 = DerefOf (FNKC [((Local6 + LENA) + LENB)]
                                )
                            GRPC (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), PARG (Arg5))
                        }
                        Else
                        {
                            If ((OSYS >= 0x07DC))
                            {
                                Local6 = SRCH (CAGE, LENE, Local2)
                            }
                            ElseIf (((Local2 == 0xFE000092) || (Local2 == 0xFF000092)))
                            {
                                Local6 = SRCH (CAGE, LENE, Local2)
                            }

                            If ((Local6 != Ones))
                            {
                                Local5 = DerefOf (FNKC [(((Local6 + LENA) + LENB
                                    ) + LENC)])
                                GRPD (Local6, Local5, PARG (Arg2), PARG (Arg3), PARG (Arg4), PARG (Arg5))
                            }
                            Else
                            {
                                Local2 &= 0xFFFF0000
                                If ((RINC (CAGD, 0x08) == Local2))
                                {
                                    If ((USAC != Zero))
                                    {
                                        RETP [Zero] = RINC (CAGD, 0x0B)
                                    }
                                    Else
                                    {
                                        RETP [Zero] = RINC (CAGD, 0x0A)
                                        USAC = One
                                    }
                                }
                                ElseIf ((RINC (CAGD, 0x09) == Local2))
                                {
                                    If ((USAC == Zero))
                                    {
                                        RETP [Zero] = RINC (CAGD, 0x0C)
                                    }
                                    Else
                                    {
                                        RETP [Zero] = RINC (CAGD, 0x0A)
                                        USAC = Zero
                                    }
                                }
                            }
                        }
                    }

                    Release (MUTS)
                    Return (RETP) /* \_SB_.RETP */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS < 0x07D6) || (OSYS == 0x07D8)))
                {
                    Return (Zero)
                }
                Else
                {
                    If ((OSYS >= 0x07DC))
                    {
                        CKIF ()
                    }

                    Return (0x0B)
                }
            }
        }

        Method (TWAK, 1, NotSerialized)
        {
            WFNK (Arg0)
        }

        Method (TPTS, 1, NotSerialized)
        {
            SFNK (Arg0)
        }

        Method (SPS0, 0, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            FLNK (0xFF, 0x31)
            Release (MUTS)
        }

        Method (SPS3, 0, NotSerialized)
        {
            \_SB.PCI0.LPCB.CLRL ()
        }

        Method (BRIN, 1, NotSerialized)
        {
            Name (BPA0, Package (0x07)
            {
                0x0D, 
                0x0E, 
                0x0D, 
                0x0F, 
                0x0F, 
                0x0F, 
                0x0F
            })
            Local0 = Arg0
            Local1 = Zero
            Local2 = Zero
            Local3 = Zero
            Local4 = Zero
            Local5 = Zero
            If ((Arg0 < 0x64))
            {
                While (One)
                {
                    If ((Local0 >= DerefOf (BPA0 [Local1])))
                    {
                        Local0 -= DerefOf (BPA0 [Local1])
                    }
                    Else
                    {
                        Break
                    }

                    Local1++
                }

                Local2 = Local0
                Local0 = (Local1 + 0x02)
                Local3 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [Local0])
                Local0++
                Local4 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [Local0])
                Local5 = (((Local4 - Local3) * Local2) / DerefOf (
                    BPA0 [Local1]))
                Local0 = (((Local4 - Local3) * Local2) % DerefOf (
                    BPA0 [Local1]))
                If (((DerefOf (BPA0 [Local1]) % 0x02) == Zero))
                {
                    If ((Local0 >= (DerefOf (BPA0 [Local1]) / 0x02)))
                    {
                        Local5++
                    }
                }
                ElseIf ((Local0 > (DerefOf (BPA0 [Local1]) / 0x02)))
                {
                    Local5++
                }

                Arg0 = (Local3 + Local5)
            }

            Return (Arg0)
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (WMID)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "ITFS")  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS < 0x07D9))
                {
                    Return (Zero)
                }

                Return (0x0B)
            }

            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0008 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0010 */  0x43, 0x41, 0x01, 0x00, 0x32, 0x63, 0x13, 0x8A,  // CA..2c..
                /* 0018 */  0xBC, 0x23, 0x85, 0x45, 0xA1, 0x59, 0x14, 0x79,  // .#.E.Y.y
                /* 0020 */  0x3C, 0xAA, 0x29, 0xFC, 0x54, 0x49, 0x01, 0x02   // <.).TI..
            })
            Name (FWBF, Package (0x02)
            {
                Buffer (0x20)
                {
                     0x00                                             // .
                }, 

                Zero
            })
            Name (FBSB, Package (0x02)
            {
                Buffer (0x0200)
                {
                     0x00                                             // .
                }, 

                Zero
            })
            Name (TFWB, Package (0x02)
            {
                Buffer (0x18)
                {
                     0x00                                             // .
                }, 

                Zero
            })
            Name (CCTI, Zero)
            Name (FWLC, 0x02)
            Method (WCTI, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    If ((CCTI == Zero)){}
                    Else
                    {
                        ITLK = Ones
                        FLNK (0xFF, 0x42)
                        FWLC = ITLK /* \_SB_.ITLK */
                        If ((FWLC == One))
                        {
                            ITLK = 0xFFFFFFFE
                            FLNK (0xFF, 0x42)
                            FWLC = 0x02
                        }
                    }
                }
                ElseIf ((CCTI != Zero)){}
                CCTI = Arg0
            }

            Method (WQTI, 1, NotSerialized)
            {
            }

            Method (WSTI, 2, NotSerialized)
            {
            }

            Name (TMPS, Buffer (0x0400)
            {
                 0x00                                             // .
            })
            Name (MSTR, Buffer (0x80)
            {
                 0x00                                             // .
            })
            Name (CHAR, Package (0x10)
            {
                "0", 
                "1", 
                "2", 
                "3", 
                "4", 
                "5", 
                "6", 
                "7", 
                "8", 
                "9", 
                "A", 
                "B", 
                "C", 
                "D", 
                "E", 
                "F"
            })
            Method (PNPC, 4, Serialized)
            {
                DMIS = "DMIX"
                DMIF = Arg0
                WDMI = Arg1
                TPNO = Arg2
                STNO = Arg3
                APMC = 0x47
                If ((Arg3 == Zero))
                {
                    CopyObject (WDMI, TMPS) /* \_SB_.PCI0.WMID.TMPS */
                }
                Else
                {
                    CopyObject (WDMI, MSTR) /* \_SB_.PCI0.WMID.MSTR */
                }
            }

            Method (G1BD, 2, NotSerialized)
            {
                CreateByteField (Arg0, Arg1, R1BD)
                Return (R1BD) /* \_SB_.PCI0.WMID.G1BD.R1BD */
            }

            Method (WMTI, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (One)
                    {
                        Name (RETS, Package (0x0C)
                        {
                            "Copyright (c) 2012, INVENTEC Corporation. All Rights Reserved.", 
                            "1.0.0.0", 
                            "ARION_S", 
                            "", 
                            "", 
                            "", 
                            "", 
                            "", 
                            "", 
                            "", 
                            "", 
                            ""
                        })
                        PNPC (0x51, Zero, Zero, Zero)
                        ToDecimalString (DerefOf (TMPS [0x1A]), Local0)
                        ToDecimalString (DerefOf (TMPS [0x1B]), Local1)
                        Concatenate (Local0, ".", Local2)
                        Concatenate (Local2, Local1, Local3)
                        RETS [0x04] = Local3
                        PNPC (0x51, One, One, One)
                        RETS [0x06] = ToString (MSTR, Ones)
                        PNPC (0x51, Zero, Zero, 0x02)
                        RETS [0x03] = ToString (MSTR, Ones)
                        PNPC (0x51, Zero, Zero, 0x03)
                        RETS [0x05] = ToString (MSTR, Ones)
                        PNPC (0x51, One, One, 0x02)
                        RETS [0x07] = ToString (MSTR, Ones)
                        PNPC (0x51, One, One, 0x03)
                        RETS [0x08] = ToString (MSTR, Ones)
                        PNPC (0x51, One, One, 0x04)
                        RETS [0x09] = ToString (MSTR, Ones)
                        PNPC (0x51, One, One, Zero)
                        Local1 = ""
                        Local2 = 0x0C
                        While ((Local2 < 0x1C))
                        {
                            Local0 = DerefOf (TMPS [Local2])
                            Local0 >>= 0x04
                            Local3 = DerefOf (CHAR [Local0])
                            Concatenate (Local1, Local3, Local1)
                            Local0 = DerefOf (TMPS [Local2])
                            Local0 &= 0x0F
                            Local3 = DerefOf (CHAR [Local0])
                            Concatenate (Local1, Local3, Local1)
                            Local2++
                        }

                        RETS [0x0A] = Local1
                        PNPC (0x51, One, 0x0B, One)
                        RETS [0x0B] = ToString (MSTR, Ones)
                        Return (RETS) /* \_SB_.PCI0.WMID.WMTI.RETS */
                    }
                    Case (0x02)
                    {
                        ITLK = Ones
                        FLNK (0xFF, 0x42)
                        FWLC = ITLK /* \_SB_.ITLK */
                        Local0 = FWLC /* \_SB_.PCI0.WMID.FWLC */
                        Return (Local0)
                    }
                    Case (0x03)
                    {
                        WDMI = Arg2
                        ITLK = Zero
                        FLNK (0xFF, 0x42)
                        If ((ITLK >= 0x10))
                        {
                            Local0 = Zero
                            While ((Local0 < 0x20))
                            {
                                DerefOf (FWBF [Zero]) [Local0] = Zero
                                Local0++
                            }

                            FWBF [One] = Zero
                        }
                        Else
                        {
                            FWBF [One] = 0xFF
                        }

                        Return (FWBF) /* \_SB_.PCI0.WMID.FWBF */
                    }
                    Case (0x04)
                    {
                        Name (TBUF, Buffer (0x24)
                        {
                             0x00                                             // .
                        })
                        CopyObject (Arg2, TBUF) /* \_SB_.PCI0.WMID.WMTI.TBUF */
                        ITLK = One
                        FLNK (0xFF, 0x42)
                        If ((ITLK < 0x10))
                        {
                            Local0 = Zero
                            While ((Local0 < 0x20))
                            {
                                DerefOf (FWBF [Zero]) [Local0] = 0xFF
                                Local0++
                            }

                            FWBF [One] = 0xFF
                            Return (FWBF) /* \_SB_.PCI0.WMID.FWBF */
                        }

                        CreateDWordField (Arg2, 0x20, FKNO)
                        FWBF [One] = FKNO /* \_SB_.PCI0.WMID.WMTI.FKNO */
                        Local0 = Zero
                        Local1 = DerefOf (TBUF [Local0])
                        While ((Local0 < 0x20))
                        {
                            Local0++
                            Local2 = DerefOf (TBUF [Local0])
                            TBUF [Local0] = Local1
                            Local1 = Local2
                        }

                        TBUF [Zero] = (FKNO & 0xFF)
                        DMIS = "FNKX"
                        If (((FKNO & 0xFF00) == 0x0100))
                        {
                            APMD = DerefOf (TBUF [Zero])
                            APMC = 0xE3
                            FWBF [One] = APMD /* \_SB_.APMD */
                        }
                        Else
                        {
                            FWBF [Zero] = \_SB.FWEX.FWES (TBUF)
                            FWBF [One] = LCMD /* \_SB_.LCMD */
                        }

                        DMIS = "    "
                        Return (FWBF) /* \_SB_.PCI0.WMID.FWBF */
                    }
                    Case (0x05)
                    {
                        WDMI = Arg2
                        ITLK = Zero
                        FLNK (0xFF, 0x42)
                        If ((ITLK >= 0x10))
                        {
                            DMIS = "DMIX"
                            DMIF = 0x50
                            APMC = 0x47
                            CopyObject (WDMI, TMPS) /* \_SB_.PCI0.WMID.TMPS */
                            Local0 = Zero
                            While ((Local0 < 0x0200))
                            {
                                DerefOf (FBSB [Zero]) [Local0] = DerefOf (TMPS [
                                    Local0])
                                Local0++
                            }

                            FBSB [One] = DMIS /* \_SB_.DMIS */
                        }
                        Else
                        {
                            FBSB [One] = Ones
                        }

                        Return (FBSB) /* \_SB_.PCI0.WMID.FBSB */
                    }
                    Case (0x06)
                    {
                        Name (SBUF, Buffer (0x0204)
                        {
                             0x00                                             // .
                        })
                        CopyObject (Arg2, SBUF) /* \_SB_.PCI0.WMID.WMTI.SBUF */
                        ITLK = One
                        FLNK (0xFF, 0x42)
                        If ((ITLK < 0x10))
                        {
                            FBSB [One] = Ones
                            Return (FBSB) /* \_SB_.PCI0.WMID.FBSB */
                        }

                        Local0 = Zero
                        While ((Local0 < 0x0200))
                        {
                            Local1 = DerefOf (SBUF [Local0])
                            DerefOf (FBSB [Zero]) [Local0] = Local1
                            Local0++
                        }

                        CreateDWordField (Arg2, 0x0200, ACNO)
                        FBSB [One] = ACNO /* \_SB_.PCI0.WMID.WMTI.ACNO */
                        Local3 = (ACNO & 0xFF)
                        If ((Local3 == 0x51))
                        {
                            PNPC (0x51, DerefOf (SBUF [0x0201]), DerefOf (SBUF [0x0202]), 
                                DerefOf (SBUF [0x0203]))
                            If ((DerefOf (SBUF [Zero]) == Zero))
                            {
                                Local0 = Zero
                                While ((Local0 < 0x0200))
                                {
                                    DerefOf (FBSB [Zero]) [Local0] = DerefOf (TMPS [
                                        Local0])
                                    Local0++
                                }
                            }
                            Else
                            {
                                Local0 = Zero
                                While ((Local0 < 0x80))
                                {
                                    DerefOf (FBSB [Zero]) [Local0] = DerefOf (MSTR [
                                        Local0])
                                    Local0++
                                }
                            }

                            FBSB [One] = DMIS /* \_SB_.DMIS */
                        }
                        ElseIf ((Local3 == 0x52))
                        {
                            DMIS = "DMIX"
                            DMIF = 0x52
                            WDMI = Zero
                            TPNO = Zero
                            STNO = Zero
                            CopyObject (SBUF, WDMI) /* \_SB_.WDMI */
                            APMC = 0x47
                            CopyObject (WDMI, MSTR) /* \_SB_.PCI0.WMID.MSTR */
                            FBSB [One] = DMIS /* \_SB_.DMIS */
                        }
                        Else
                        {
                            FBSB [One] = (Local3 + 0x00820100)
                        }

                        Return (FBSB) /* \_SB_.PCI0.WMID.FBSB */
                    }
                    Case (0x07)
                    {
                        WDMI = Arg2
                        ITLK = Zero
                        FLNK (0xFF, 0x42)
                        If ((ITLK >= 0x10))
                        {
                            Local0 = Zero
                            While ((Local0 < 0x18))
                            {
                                DerefOf (TFWB [Zero]) [Local0] = Zero
                                Local0++
                            }
                        }
                        Else
                        {
                            TFWB [One] = Ones
                        }

                        Return (TFWB) /* \_SB_.PCI0.WMID.TFWB */
                    }
                    Case (0x08)
                    {
                        Name (TTBF, Buffer (0x1C)
                        {
                             0x00                                             // .
                        })
                        Name (AG00, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (AG01, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (AG02, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (AG03, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (AG04, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        Name (AG05, Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        AG00 [Zero] = G1BD (Arg2, Zero)
                        AG00 [One] = G1BD (Arg2, One)
                        AG00 [0x02] = G1BD (Arg2, 0x02)
                        AG00 [0x03] = G1BD (Arg2, 0x03)
                        AG01 [Zero] = G1BD (Arg2, 0x04)
                        AG01 [One] = G1BD (Arg2, 0x05)
                        AG01 [0x02] = G1BD (Arg2, 0x06)
                        AG01 [0x03] = G1BD (Arg2, 0x07)
                        AG02 [Zero] = G1BD (Arg2, 0x08)
                        AG02 [One] = G1BD (Arg2, 0x09)
                        AG02 [0x02] = G1BD (Arg2, 0x0A)
                        AG02 [0x03] = G1BD (Arg2, 0x0B)
                        AG03 [Zero] = G1BD (Arg2, 0x0C)
                        AG03 [One] = G1BD (Arg2, 0x0D)
                        AG03 [0x02] = G1BD (Arg2, 0x0E)
                        AG03 [0x03] = G1BD (Arg2, 0x0F)
                        AG04 [Zero] = G1BD (Arg2, 0x10)
                        AG04 [One] = G1BD (Arg2, 0x11)
                        AG04 [0x02] = G1BD (Arg2, 0x12)
                        AG04 [0x03] = G1BD (Arg2, 0x13)
                        AG05 [Zero] = G1BD (Arg2, 0x14)
                        AG05 [One] = G1BD (Arg2, 0x15)
                        AG05 [0x02] = G1BD (Arg2, 0x16)
                        AG05 [0x03] = G1BD (Arg2, 0x17)
                        ITLK = One
                        FLNK (0xFF, 0x42)
                        If ((ITLK < 0x10))
                        {
                            Local0 = Zero
                            While ((Local0 < 0x18))
                            {
                                DerefOf (TFWB [Zero]) [Local0] = 0xFF
                                Local0++
                            }

                            TFWB [One] = Ones
                            Return (TFWB) /* \_SB_.PCI0.WMID.TFWB */
                        }

                        CreateDWordField (Arg2, 0x18, TFWS)
                        TFWB [One] = TFWS /* \_SB_.PCI0.WMID.WMTI.TFWS */
                        Local1 = \_SB.VALZ.SPFC (AG00, AG01, AG02, AG03, AG04, AG05)
                        Local0 = Zero
                        Local3 = Zero
                        While ((Local0 < 0x06))
                        {
                            Local2 = DerefOf (Local1 [Local0])
                            Local5 = Zero
                            While ((Local5 < 0x04))
                            {
                                Local4 = (Local2 & 0xFF)
                                Local2 >>= 0x08
                                DerefOf (TFWB [Zero]) [Local3] = Local4
                                Local3++
                                Local5++
                            }

                            Local0++
                        }

                        TFWB [One] = One
                        Return (TFWB) /* \_SB_.PCI0.WMID.TFWB */
                    }
                    Default
                    {
                    }

                }
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
            }

            Name (WQCA, Buffer (0x0A00)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xF0, 0x09, 0x00, 0x00, 0x4C, 0x3D, 0x00, 0x00,  // ....L=..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0xC4, 0x9D, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                /* 0020 */  0x10, 0x0B, 0x10, 0x12, 0xA1, 0x83, 0x42, 0x04,  // ......B.
                /* 0028 */  0x12, 0x4B, 0xA4, 0xD8, 0x36, 0x60, 0x30, 0x12,  // .K..6`0.
                /* 0030 */  0x40, 0x24, 0x07, 0x42, 0x2E, 0x98, 0x18, 0x68,  // @$.B...h
                /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x1A, 0x14, 0x25, 0xB0,  // ...Q..%.
                /* 0048 */  0x10, 0x08, 0xC9, 0x14, 0xE0, 0x5B, 0x80, 0x63,  // .....[.c
                /* 0050 */  0x01, 0x86, 0x05, 0xC8, 0x16, 0x60, 0x19, 0x8A,  // .....`..
                /* 0058 */  0xA0, 0x76, 0x2A, 0x40, 0xAE, 0x00, 0x61, 0x02,  // .v*@..a.
                /* 0060 */  0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x12, 0x05,  // ....9(..
                /* 0068 */  0x1A, 0x25, 0x06, 0x42, 0x12, 0x61, 0xE5, 0x1C,  // .%.B.a..
                /* 0070 */  0x5B, 0xCA, 0x05, 0x98, 0x16, 0x20, 0x5C, 0x80,  // [.... \.
                /* 0078 */  0x74, 0x0C, 0x8D, 0xA0, 0x6E, 0x30, 0x49, 0x15,  // t...n0I.
                /* 0080 */  0x20, 0x1A, 0x46, 0x68, 0x05, 0xC1, 0x69, 0x10,  //  .Fh..i.
                /* 0088 */  0x47, 0x11, 0x25, 0x0C, 0xC3, 0x33, 0x66, 0xA0,  // G.%..3f.
                /* 0090 */  0x70, 0x41, 0x22, 0x19, 0x26, 0xE8, 0x09, 0x04,  // pA".&...
                /* 0098 */  0x09, 0xD3, 0x3C, 0x84, 0x70, 0xC2, 0xB4, 0x8D,  // ..<.p...
                /* 00A0 */  0x23, 0x3C, 0x6B, 0x86, 0xD5, 0x2C, 0xE2, 0x84,  // #<k..,..
                /* 00A8 */  0x3D, 0x0B, 0x8E, 0x69, 0x98, 0x50, 0xAD, 0x0F,  // =..i.P..
                /* 00B0 */  0x41, 0x20, 0x31, 0xA2, 0xC4, 0xAD, 0x6B, 0x2C,  // A 1...k,
                /* 00B8 */  0x1A, 0xC8, 0x51, 0x61, 0x64, 0x40, 0xC8, 0x33,  // ..Qad@.3
                /* 00C0 */  0x9C, 0x90, 0x4B, 0x06, 0x22, 0xEE, 0x87, 0x27,  // ..K."..'
                /* 00C8 */  0x71, 0x33, 0x93, 0x45, 0x08, 0x39, 0x14, 0xA0,  // q3.E.9..
                /* 00D0 */  0x10, 0x43, 0xB6, 0x60, 0xA4, 0x4D, 0x80, 0x31,  // .C.`.M.1
                /* 00D8 */  0x04, 0xA1, 0x1C, 0x66, 0x8C, 0x43, 0x89, 0x1A,  // ...f.C..
                /* 00E0 */  0x25, 0x5A, 0x84, 0x60, 0x81, 0xA2, 0xC4, 0x8C,  // %Z.`....
                /* 00E8 */  0x10, 0xB9, 0x32, 0x70, 0x79, 0x43, 0x12, 0x44,  // ..2pyC.D
                /* 00F0 */  0x6B, 0x90, 0x02, 0x89, 0xD1, 0xFE, 0x80, 0xD9,  // k.......
                /* 00F8 */  0x42, 0xF4, 0x17, 0xB0, 0x94, 0x83, 0x80, 0x46,  // B......F
                /* 0100 */  0xC3, 0xCF, 0x00, 0x09, 0x4A, 0x01, 0xD1, 0x31,  // ....J..1
                /* 0108 */  0xA0, 0x4E, 0x01, 0x5A, 0x61, 0x85, 0x71, 0xBE,  // .N.Za.q.
                /* 0110 */  0x31, 0xCE, 0x20, 0x81, 0x63, 0x9F, 0x0C, 0xA8,  // 1. .c...
                /* 0118 */  0x28, 0x08, 0x39, 0x00, 0xA6, 0xB0, 0x3E, 0x12,  // (.9...>.
                /* 0120 */  0x9C, 0xE6, 0x91, 0x9D, 0xD3, 0x79, 0x1A, 0x22,  // .....y."
                /* 0128 */  0xFA, 0xB9, 0xF9, 0x90, 0xE0, 0x91, 0x3E, 0x1C,  // ......>.
                /* 0130 */  0x60, 0xC6, 0xE8, 0x91, 0x1A, 0xF0, 0x18, 0xD9,  // `.......
                /* 0138 */  0xE9, 0xC0, 0xFF, 0x7F, 0x40, 0xBC, 0xF7, 0xEB,  // ....@...
                /* 0140 */  0x00, 0x19, 0xBE, 0x01, 0xD9, 0x09, 0xE1, 0xC1,  // ........
                /* 0148 */  0x00, 0x2C, 0x3E, 0xD1, 0x74, 0x50, 0x38, 0x87,  // .,>.tP8.
                /* 0150 */  0x10, 0xE7, 0x11, 0xE8, 0xE0, 0xCF, 0x38, 0xC8,  // ......8.
                /* 0158 */  0x5B, 0x00, 0x06, 0x22, 0x81, 0x4F, 0x0B, 0x0F,  // [..".O..
                /* 0160 */  0x0E, 0xD8, 0x49, 0x1E, 0x5A, 0xE0, 0xE3, 0x6C,  // ..I.Z..l
                /* 0168 */  0x56, 0x80, 0xD0, 0x81, 0x8A, 0xE0, 0x9D, 0x80,  // V.......
                /* 0170 */  0x9D, 0x0D, 0x7C, 0x19, 0x08, 0x49, 0x46, 0x8D,  // ..|..IF.
                /* 0178 */  0x1E, 0x90, 0x87, 0x5A, 0x23, 0xB6, 0xFC, 0x0E,  // ...Z#...
                /* 0180 */  0x5B, 0xB3, 0x30, 0xF2, 0x01, 0xF1, 0xC8, 0xC3,  // [.0.....
                /* 0188 */  0x06, 0x95, 0x82, 0x61, 0x03, 0x85, 0x49, 0x1C,  // ...a..I.
                /* 0190 */  0x36, 0x58, 0x26, 0x73, 0xA0, 0x27, 0xF7, 0xB8,  // 6X&s.'..
                /* 0198 */  0x71, 0x10, 0x27, 0x87, 0x1F, 0x34, 0x18, 0x25,  // q.'..4.%
                /* 01A0 */  0x0C, 0x1A, 0x3D, 0x2C, 0x8F, 0x23, 0x82, 0x0D,  // ..=,.#..
                /* 01A8 */  0x8E, 0x81, 0x8C, 0x18, 0x5C, 0x80, 0x1E, 0xA9,  // ....\...
                /* 01B0 */  0xFF, 0xFF, 0x23, 0x06, 0x8E, 0x73, 0x8C, 0x14,  // ..#..s..
                /* 01B8 */  0xE5, 0x30, 0x1E, 0x45, 0xD8, 0x2C, 0x1E, 0x32,  // .0.E.,.2
                /* 01C0 */  0xCE, 0xE4, 0xA4, 0x9E, 0x5A, 0xD8, 0xA9, 0x01,  // ....Z...
                /* 01C8 */  0x38, 0x5C, 0x45, 0x4E, 0xC5, 0xA8, 0x4F, 0x0D,  // 8\EN..O.
                /* 01D0 */  0xE0, 0x3E, 0xE7, 0x78, 0xD0, 0xC0, 0x73, 0x70,  // .>.x..sp
                /* 01D8 */  0xFC, 0xD4, 0x00, 0x1C, 0x44, 0x1C, 0x5F, 0xA0,  // ....D._.
                /* 01E0 */  0x80, 0x1E, 0xCD, 0x69, 0xE0, 0x03, 0x8F, 0x19,  // ...i....
                /* 01E8 */  0xDA, 0xFF, 0x7F, 0xCC, 0x70, 0x40, 0x3D, 0x66,  // ....p@=f
                /* 01F0 */  0xF0, 0x0B, 0x1C, 0x33, 0x68, 0x8E, 0x39, 0x1E,  // ...3h.9.
                /* 01F8 */  0x32, 0x70, 0x38, 0x36, 0xC0, 0x51, 0x3A, 0x0B,  // 2p86.Q:.
                /* 0200 */  0x9D, 0xA7, 0x7C, 0x77, 0x32, 0xC6, 0x91, 0xB2,  // ..|w2...
                /* 0208 */  0x81, 0xF9, 0xD8, 0x00, 0x2E, 0x0D, 0xC7, 0x06,  // ........
                /* 0210 */  0xA0, 0x3A, 0x38, 0xEC, 0x2C, 0x4E, 0x0E, 0x33,  // .:8.,N.3
                /* 0218 */  0x68, 0x30, 0x46, 0x07, 0x46, 0x9D, 0x5D, 0xF8,  // h0F.F.].
                /* 0220 */  0xC5, 0xC8, 0xE7, 0x1F, 0x63, 0x24, 0x18, 0x75,  // ....c$.u
                /* 0228 */  0xC4, 0xF4, 0xFF, 0x3F, 0x62, 0x70, 0x78, 0x18,  // ...?bpx.
                /* 0230 */  0x31, 0x50, 0x38, 0xB7, 0xE1, 0x46, 0x0C, 0x77,  // 1P8..F.w
                /* 0238 */  0x64, 0xB8, 0xD1, 0x02, 0x17, 0xE4, 0xA3, 0x05,  // d.......
                /* 0240 */  0xDB, 0x10, 0x3C, 0x5A, 0xE0, 0x3B, 0x32, 0x8F,  // ..<Z.;2.
                /* 0248 */  0x16, 0xB8, 0xDC, 0x42, 0x8E, 0x16, 0x0C, 0xFF,  // ...B....
                /* 0250 */  0xFF, 0xD1, 0xE2, 0x4C, 0x8C, 0x16, 0x28, 0x8F,  // ...L..(.
                /* 0258 */  0xCC, 0xA3, 0x05, 0x2E, 0x57, 0xB1, 0xA3, 0x05,  // ....W...
                /* 0260 */  0x9B, 0x8A, 0xD1, 0x02, 0xE5, 0x91, 0x79, 0xB4,  // ......y.
                /* 0268 */  0xC0, 0xC5, 0xEA, 0x68, 0x41, 0x37, 0x46, 0x8F,  // ...hA7F.
                /* 0270 */  0x92, 0xFF, 0xFF, 0x47, 0x0B, 0x3C, 0x47, 0xE6,  // ...G.<G.
                /* 0278 */  0xD1, 0x02, 0x97, 0xC3, 0xE4, 0xD1, 0x82, 0x0D,  // ........
                /* 0280 */  0xDE, 0xA3, 0x05, 0xBE, 0x23, 0xF3, 0x68, 0xC1,  // ....#.h.
                /* 0288 */  0x27, 0x0F, 0x18, 0x3D, 0x5C, 0x4F, 0x21, 0x42,  // '..=\O!B
                /* 0290 */  0xF0, 0x57, 0xD2, 0x37, 0xC5, 0xD7, 0x87, 0xE7,  // .W.7....
                /* 0298 */  0x07, 0x5F, 0x78, 0x0D, 0x1E, 0xE5, 0x45, 0xD7,  // ._x...E.
                /* 02A0 */  0x73, 0x78, 0xCD, 0x65, 0x04, 0x16, 0x39, 0x30,  // sx.e..90
                /* 02A8 */  0x34, 0x3C, 0x3F, 0x0C, 0x46, 0x3F, 0x9A, 0x73,  // 4<?.F?.s
                /* 02B0 */  0x89, 0x7C, 0x34, 0x51, 0x4E, 0xE1, 0x70, 0x7C,  // .|4QN.p|
                /* 02B8 */  0x24, 0x8E, 0xF0, 0xAC, 0x1B, 0xE2, 0xFF, 0xFF,  // $.......
                /* 02C0 */  0x5A, 0x68, 0x84, 0x23, 0x8A, 0x72, 0xAE, 0x67,  // Zh.#.r.g
                /* 02C8 */  0xEF, 0x63, 0x32, 0x1F, 0x10, 0x79, 0xF5, 0x19,  // .c2..y..
                /* 02D0 */  0xD6, 0xE7, 0x30, 0x45, 0x7F, 0x08, 0x50, 0x18,  // ..0E..P.
                /* 02D8 */  0x1F, 0x99, 0x81, 0x53, 0x98, 0x23, 0x33, 0xD0,  // ...S.#3.
                /* 02E0 */  0xBA, 0x27, 0xC4, 0x38, 0xF0, 0x58, 0xBE, 0x22,  // .'.8.X."
                /* 02E8 */  0xF8, 0xB8, 0xCC, 0x31, 0x42, 0x85, 0xC4, 0x1C,  // ...1B...
                /* 02F0 */  0x40, 0x4F, 0xEC, 0xC9, 0x99, 0x9D, 0x15, 0x3C,  // @O.....<
                /* 02F8 */  0x99, 0xE7, 0x5B, 0x76, 0x66, 0x06, 0xC7, 0x45,  // ..[vf..E
                /* 0300 */  0xD9, 0xE7, 0xE4, 0x03, 0x78, 0x49, 0x7E, 0x0B,  // ....xI~.
                /* 0308 */  0xF0, 0x29, 0xF9, 0x99, 0xD9, 0x38, 0xAF, 0xCB,  // .)...8..
                /* 0310 */  0x3E, 0x33, 0xB3, 0x71, 0x3E, 0x33, 0x1B, 0xE3,  // >3.q>3..
                /* 0318 */  0x7D, 0x39, 0x66, 0xAC, 0x28, 0x9D, 0xA1, 0x08,  // }9f.(...
                /* 0320 */  0x35, 0x68, 0x8C, 0x37, 0x66, 0xA3, 0x04, 0x8A,  // 5h.7f...
                /* 0328 */  0x10, 0xED, 0x99, 0x99, 0x87, 0x79, 0xD6, 0xEA,  // .....y..
                /* 0330 */  0x1C, 0x60, 0x19, 0x27, 0x01, 0x19, 0x79, 0x53,  // .`.'..yS
                /* 0338 */  0xF8, 0xB8, 0x81, 0xC2, 0x7F, 0x57, 0x38, 0x2F,  // .....W8/
                /* 0340 */  0x8F, 0xF3, 0x89, 0x99, 0x1D, 0xEB, 0x7C, 0x62,  // ......|b
                /* 0348 */  0x06, 0x0E, 0xFF, 0xFF, 0xE3, 0x06, 0x70, 0x19,  // ......p.
                /* 0350 */  0x19, 0xEE, 0xE0, 0xE0, 0x71, 0x71, 0x78, 0x9F,  // ....qqx.
                /* 0358 */  0x16, 0x5E, 0x27, 0x8A, 0x1D, 0x13, 0x95, 0x75,  // .^'....u
                /* 0360 */  0xEA, 0x80, 0x7E, 0x11, 0xF0, 0x99, 0xC0, 0xD3,  // ..~.....
                /* 0368 */  0x7E, 0xDA, 0x65, 0x4E, 0x0E, 0x9A, 0xE8, 0x29,  // ~.eN...)
                /* 0370 */  0x3C, 0xC2, 0x7A, 0x36, 0xEC, 0x9C, 0xF1, 0xBC,  // <.z6....
                /* 0378 */  0xC1, 0xE2, 0x1E, 0x98, 0x81, 0xEE, 0xD1, 0x04,  // ........
                /* 0380 */  0x37, 0x6A, 0xB8, 0x63, 0x83, 0x73, 0x6A, 0x81,  // 7j.c.sj.
                /* 0388 */  0x3F, 0x60, 0x7E, 0x77, 0x30, 0x81, 0x87, 0xEC,  // ?`~w0...
                /* 0390 */  0x53, 0x0B, 0xFC, 0x13, 0x86, 0x91, 0x5E, 0x08,  // S.....^.
                /* 0398 */  0x5E, 0xC7, 0x8D, 0xF0, 0x32, 0xCE, 0x0E, 0x2D,  // ^...2..-
                /* 03A0 */  0xE0, 0xF8, 0xFF, 0x1F, 0x5A, 0x00, 0x4E, 0xCC,  // ....Z.N.
                /* 03A8 */  0xE9, 0x11, 0xE0, 0xA1, 0x05, 0xAC, 0x57, 0x83,  // ......W.
                /* 03B0 */  0xF3, 0x7B, 0x08, 0xE8, 0x6D, 0x88, 0x02, 0x79,  // .{..m..y
                /* 03B8 */  0x0B, 0xA8, 0xED, 0xB2, 0x22, 0xA4, 0x17, 0x81,  // ...."...
                /* 03C0 */  0x47, 0x16, 0x1F, 0x5A, 0x8C, 0xF9, 0xB6, 0x62,  // G..Z...b
                /* 03C8 */  0x94, 0xF3, 0x08, 0xF4, 0x70, 0x10, 0xCA, 0xB0,  // ....p...
                /* 03D0 */  0x87, 0x19, 0x30, 0x64, 0x90, 0x18, 0x06, 0x7F,  // ..0d....
                /* 03D8 */  0x58, 0x88, 0x15, 0xC9, 0x87, 0x16, 0x60, 0xFA,  // X.....`.
                /* 03E0 */  0xFF, 0x3F, 0xB4, 0x00, 0xFF, 0x37, 0x89, 0x0F,  // .?...7..
                /* 03E8 */  0x2D, 0x00, 0xA7, 0x4E, 0x18, 0x3E, 0xB4, 0x80,  // -..N.>..
                /* 03F0 */  0xE3, 0xFF, 0x7F, 0x68, 0x01, 0xB7, 0xCC, 0xC7,  // ...h....
                /* 03F8 */  0xAB, 0x09, 0x24, 0xF8, 0x54, 0x20, 0x61, 0x30,  // ..$.T a0
                /* 0400 */  0xA8, 0x43, 0x0B, 0x70, 0x8A, 0x73, 0x68, 0x01,  // .C.p.sh.
                /* 0408 */  0xEA, 0xA3, 0x78, 0x37, 0x39, 0xC0, 0x97, 0x16,  // ..x79...
                /* 0410 */  0x78, 0x27, 0x37, 0x30, 0x1C, 0x0F, 0x1E, 0xDD,  // x'70....
                /* 0418 */  0x7C, 0x0C, 0x78, 0x3C, 0x78, 0x69, 0x39, 0x85,  // |.x<xi9.
                /* 0420 */  0xB7, 0x95, 0x10, 0x67, 0xF9, 0x28, 0xE0, 0x53,  // ...g.(.S
                /* 0428 */  0x8B, 0x2F, 0x2F, 0x9E, 0xC2, 0x93, 0x9B, 0x11,  // .//.....
                /* 0430 */  0xDE, 0x0D, 0x62, 0xBD, 0xBC, 0xF8, 0xDE, 0x66,  // ..b....f
                /* 0438 */  0xC4, 0x13, 0x0D, 0xF4, 0xD2, 0x12, 0xC3, 0xB7,  // ........
                /* 0440 */  0x17, 0x43, 0x3D, 0xB5, 0xB0, 0xA0, 0x6F, 0x72,  // .C=...or
                /* 0448 */  0x7D, 0x05, 0x7C, 0x6A, 0x81, 0x83, 0x7F, 0x5A,  // }.|j...Z
                /* 0450 */  0xC7, 0xF3, 0x0E, 0xE1, 0x53, 0x0B, 0x98, 0xFE,  // ....S...
                /* 0458 */  0xFF, 0xA7, 0x16, 0xE0, 0x3B, 0x32, 0xDC, 0xA9,  // ....;2..
                /* 0460 */  0x05, 0xDE, 0x01, 0xC2, 0xA7, 0x16, 0x70, 0x8D,  // ......p.
                /* 0468 */  0x19, 0xE6, 0xF0, 0x8F, 0x19, 0x7C, 0x67, 0x16,  // .....|g.
                /* 0470 */  0xE0, 0x30, 0x66, 0xB0, 0x8D, 0x8C, 0x8D, 0x19,  // .0f.....
                /* 0478 */  0x18, 0x9E, 0x5F, 0xD8, 0x98, 0xF1, 0xFF, 0xFF,  // .._.....
                /* 0480 */  0x31, 0xC3, 0x05, 0xF4, 0x98, 0x81, 0xED, 0xC8,  // 1.......
                /* 0488 */  0xD8, 0x98, 0x81, 0xE1, 0xA5, 0xE4, 0x98, 0xC1,  // ........
                /* 0490 */  0x37, 0x1E, 0x8F, 0x19, 0xD8, 0x8E, 0x8C, 0x8D,  // 7.......
                /* 0498 */  0x19, 0xF8, 0xFD, 0xFF, 0x87, 0x72, 0x56, 0x1E,  // .....rV.
                /* 04A0 */  0x33, 0xD8, 0x8E, 0x61, 0x1E, 0x33, 0xB0, 0x1D,  // 3..a.3..
                /* 04A8 */  0x19, 0x1B, 0x33, 0x30, 0xBC, 0x0A, 0x1D, 0x33,  // ..30...3
                /* 04B0 */  0xF8, 0x40, 0x3D, 0x66, 0x60, 0x3B, 0x32, 0x36,  // .@=f`;26
                /* 04B8 */  0x66, 0xE0, 0xF1, 0xFF, 0x8F, 0x0F, 0xA1, 0x43,  // f......C
                /* 04C0 */  0x20, 0x0E, 0xD8, 0xF7, 0xB1, 0x03, 0x35, 0x44,  //  .....5D
                /* 04C8 */  0xD0, 0xD7, 0x43, 0x13, 0x0C, 0x7B, 0x06, 0x04,  // ..C..{..
                /* 04D0 */  0xD5, 0xBF, 0x4A, 0x83, 0x06, 0x02, 0x07, 0x3D,  // ..J....=
                /* 04D8 */  0xDC, 0xA0, 0xE1, 0x0E, 0x0D, 0x7F, 0x04, 0x04,  // ........
                /* 04E0 */  0xDF, 0xE9, 0x10, 0x77, 0x04, 0x84, 0x77, 0x5E,  // ...w..w^
                /* 04E8 */  0x63, 0x43, 0x78, 0x06, 0x04, 0x7E, 0x22, 0x1E,  // cCx..~".
                /* 04F0 */  0x09, 0x3E, 0xAD, 0xFA, 0x5C, 0x21, 0xA1, 0x2F,  // .>..\!./
                /* 04F8 */  0x01, 0x0A, 0xE3, 0x83, 0x84, 0xCF, 0x80, 0x70,  // .......p
                /* 0500 */  0x25, 0xC1, 0xA1, 0x46, 0xE8, 0xB1, 0x3F, 0x8D,  // %..F..?.
                /* 0508 */  0x1E, 0xE9, 0x59, 0x1F, 0x88, 0x27, 0xFF, 0x20,  // ..Y..'. 
                /* 0510 */  0x01, 0xE3, 0x78, 0xE0, 0x69, 0x9D, 0x92, 0xB5,  // ..x.i...
                /* 0518 */  0x9F, 0xEC, 0xC8, 0xFF, 0x7F, 0x8E, 0xEC, 0x8C,  // ........
                /* 0520 */  0xC0, 0xD1, 0xF8, 0xC9, 0x10, 0xAC, 0xF2, 0x8F,  // ........
                /* 0528 */  0x07, 0xA0, 0x99, 0xF5, 0x6B, 0x21, 0xE6, 0x7C,  // ....k!.|
                /* 0530 */  0x60, 0xCC, 0x43, 0x7A, 0x17, 0x34, 0xDE, 0xEB,  // `.Cz.4..
                /* 0538 */  0xA0, 0x51, 0x8F, 0xCA, 0xC7, 0x04, 0x9F, 0x07,  // .Q......
                /* 0540 */  0x7D, 0x2E, 0x34, 0xCE, 0x71, 0x9D, 0x7C, 0xA4,  // }.4.q.|.
                /* 0548 */  0x47, 0x08, 0xDF, 0x08, 0xE1, 0x9C, 0x08, 0xC1,  // G.......
                /* 0550 */  0x70, 0x23, 0x66, 0xC7, 0x85, 0x07, 0xC2, 0x10,  // p#f.....
                /* 0558 */  0xEF, 0x0B, 0xBE, 0x09, 0x86, 0x08, 0xF2, 0x92,  // ........
                /* 0560 */  0xF0, 0x44, 0xC8, 0x2E, 0x21, 0x01, 0x43, 0x44,  // .D..!.CD
                /* 0568 */  0x09, 0x69, 0x90, 0xC7, 0x62, 0x83, 0xC4, 0x7A,  // .i..b..z
                /* 0570 */  0x1E, 0x8C, 0x12, 0xF2, 0xB5, 0xD8, 0x08, 0x8F,  // ........
                /* 0578 */  0xC5, 0x3E, 0x32, 0x84, 0x79, 0x22, 0x64, 0xE1,  // .>2.y"d.
                /* 0580 */  0x4E, 0x9A, 0x34, 0xD2, 0x68, 0x50, 0x07, 0x06,  // N.4.hP..
                /* 0588 */  0x1F, 0x0D, 0x7C, 0x2C, 0x78, 0x90, 0xF4, 0xB1,  // ..|,x...
                /* 0590 */  0xC2, 0x20, 0xC7, 0xE5, 0x43, 0xC3, 0x33, 0x81,  // . ..C.3.
                /* 0598 */  0x47, 0xC6, 0xB0, 0x1E, 0x40, 0xD8, 0x21, 0x01,  // G...@.!.
                /* 05A0 */  0xEF, 0x1A, 0x50, 0xB7, 0x83, 0xE7, 0x0E, 0x58,  // ..P....X
                /* 05A8 */  0xE7, 0x0F, 0xFC, 0x49, 0x03, 0xFE, 0x78, 0x7C,  // ...I..x|
                /* 05B0 */  0x18, 0xF0, 0x7C, 0x4E, 0xF8, 0xA9, 0x80, 0x0F,  // ..|N....
                /* 05B8 */  0x82, 0x1F, 0x54, 0xF8, 0x89, 0x96, 0x1F, 0x15,  // ..T.....
                /* 05C0 */  0x8E, 0xE3, 0xFF, 0x9F, 0xC0, 0xC7, 0x17, 0x1F,  // ........
                /* 05C8 */  0xF7, 0xC0, 0x31, 0x1E, 0xF8, 0x8A, 0x0F, 0x1A,  // ..1.....
                /* 05D0 */  0xE4, 0xE2, 0xE0, 0xF9, 0xFA, 0xE4, 0x81, 0x3D,  // .......=
                /* 05D8 */  0x88, 0xC0, 0x9B, 0xC0, 0x89, 0xD7, 0x3A, 0x02,  // ......:.
                /* 05E0 */  0x1D, 0x6E, 0xD9, 0x49, 0xE0, 0x51, 0x21, 0xCA,  // .n.I.Q!.
                /* 05E8 */  0x73, 0x82, 0xEF, 0x15, 0x3E, 0x27, 0xF0, 0xB3,  // s...>'..
                /* 05F0 */  0x08, 0xF0, 0x88, 0x44, 0xAF, 0x21, 0x58, 0xFA,  // ...D.!X.
                /* 05F8 */  0x5A, 0x65, 0xE3, 0xC0, 0x44, 0x07, 0xE1, 0x10,  // Ze..D...
                /* 0600 */  0x87, 0x04, 0x8D, 0xE0, 0x85, 0xE0, 0xF8, 0x3D,  // .......=
                /* 0608 */  0x99, 0xB8, 0x4F, 0x08, 0x3E, 0x47, 0x3C, 0x17,  // ..O.>G<.
                /* 0610 */  0x33, 0xE1, 0x70, 0x3A, 0x78, 0x1A, 0xC2, 0x92,  // 3.p:x...
                /* 0618 */  0x29, 0x74, 0xD0, 0xF5, 0x80, 0x0C, 0x67, 0x89,  // )t....g.
                /* 0620 */  0x70, 0x14, 0xC4, 0x07, 0x00, 0x9F, 0x81, 0x6C,  // p......l
                /* 0628 */  0xE3, 0x5C, 0x8D, 0x9E, 0xE5, 0xDB, 0x86, 0xA7,  // .\......
                /* 0630 */  0x71, 0x14, 0xB8, 0xA8, 0x47, 0x23, 0x7A, 0x64,  // q...G#zd
                /* 0638 */  0xC0, 0xE3, 0x3D, 0x5D, 0x3C, 0x39, 0x78, 0x1E,  // ..=]<9x.
                /* 0640 */  0x9E, 0xE4, 0x13, 0x0F, 0x78, 0x86, 0x87, 0xD9,  // ....x...
                /* 0648 */  0xE4, 0x99, 0xF0, 0xCB, 0x87, 0x2F, 0x20, 0xC6,  // ...../ .
                /* 0650 */  0xE4, 0x87, 0x27, 0x18, 0xA8, 0x27, 0x91, 0xC0,  // ..'..'..
                /* 0658 */  0xFF, 0xFF, 0x21, 0x92, 0x63, 0x02, 0xF4, 0x11,  // ..!.c...
                /* 0660 */  0xBC, 0x26, 0x54, 0x3D, 0x11, 0xDD, 0x1E, 0xAC,  // .&T=....
                /* 0668 */  0xEE, 0x18, 0x4C, 0x26, 0x73, 0x38, 0x6C, 0x96,  // ..L&s8l.
                /* 0670 */  0x18, 0x81, 0x67, 0x05, 0x50, 0x00, 0xF9, 0x6A,  // ..g.P..j
                /* 0678 */  0x60, 0xA5, 0xC7, 0x03, 0x3A, 0x91, 0x10, 0x61,  // `...:..a
                /* 0680 */  0xA2, 0x19, 0x1E, 0x73, 0x96, 0xF2, 0x09, 0x8B,  // ...s....
                /* 0688 */  0x0F, 0x8E, 0x0F, 0xD8, 0x07, 0x1B, 0x86, 0x7D,  // .......}
                /* 0690 */  0x46, 0x6F, 0xC5, 0x9E, 0xCC, 0x5B, 0xC5, 0xF3,  // Fo...[..
                /* 0698 */  0x2D, 0x06, 0xD6, 0x47, 0x00, 0x0E, 0x6B, 0xB4,  // -..G..k.
                /* 06A0 */  0xB0, 0x47, 0xFE, 0x48, 0xE1, 0xEB, 0x88, 0xEF,  // .G.H....
                /* 06A8 */  0x2E, 0x0C, 0xD6, 0x07, 0x11, 0x70, 0x9C, 0x39,  // .....p.9
                /* 06B0 */  0x7C, 0x1C, 0x00, 0x87, 0xC7, 0x29, 0x91, 0x39,  // |....).9
                /* 06B8 */  0x3C, 0x10, 0x80, 0x47, 0xEE, 0x69, 0x02, 0x2D,  // <..G.i.-
                /* 06C0 */  0x7A, 0x79, 0xC2, 0x7D, 0x8F, 0xF2, 0x04, 0xCE,  // zy.}....
                /* 06C8 */  0xFA, 0x15, 0x0B, 0x2B, 0xF4, 0x34, 0x81, 0x3A,  // ...+.4.:
                /* 06D0 */  0x47, 0x58, 0xE0, 0x69, 0x02, 0x25, 0x09, 0x8E,  // GX.i.%..
                /* 06D8 */  0x82, 0xF8, 0x34, 0xE1, 0xA3, 0xBE, 0x0F, 0x68,  // ..4....h
                /* 06E0 */  0xB8, 0x71, 0xF8, 0x14, 0x70, 0x5C, 0x1E, 0xC3,  // .q..p\..
                /* 06E8 */  0x19, 0x1D, 0xCF, 0x03, 0xC1, 0xB1, 0xFB, 0x08,  // ........
                /* 06F0 */  0xC2, 0x82, 0x1D, 0x27, 0xA0, 0xFC, 0xFF, 0x8F,  // ...'....
                /* 06F8 */  0x13, 0xF8, 0x23, 0x02, 0x6E, 0xC0, 0x70, 0x47,  // ..#.n.pG
                /* 0700 */  0x02, 0xEF, 0x28, 0x01, 0xF7, 0x60, 0x06, 0xBE,  // ..(..`..
                /* 0708 */  0x53, 0x04, 0xF0, 0x08, 0x7C, 0xC0, 0xA3, 0xA7,  // S...|...
                /* 0710 */  0x08, 0xF0, 0x1C, 0x03, 0x7C, 0x8A, 0x00, 0x2E,  // ....|...
                /* 0718 */  0x87, 0x3D, 0xF8, 0xA7, 0x01, 0xF0, 0x1C, 0x1E,  // .=......
                /* 0720 */  0xF8, 0x6D, 0xC2, 0x87, 0x07, 0x9C, 0xB6, 0x55,  // .m.....U
                /* 0728 */  0xEA, 0x1C, 0x81, 0xD3, 0xB8, 0x40, 0x81, 0x1E,  // .....@..
                /* 0730 */  0xF9, 0xA9, 0xFB, 0xB8, 0xCF, 0xEE, 0x3C, 0xBE,  // ......<.
                /* 0738 */  0x78, 0x99, 0xA0, 0x2E, 0x38, 0x1D, 0x20, 0x3C,  // x...8. <
                /* 0740 */  0x52, 0x2B, 0xA2, 0xD0, 0xFF, 0x5F, 0xCB, 0x39,  // R+..._.9
                /* 0748 */  0x02, 0x95, 0xFE, 0x34, 0x41, 0x41, 0x0C, 0xE8,  // ...4AA..
                /* 0750 */  0x68, 0x07, 0x2D, 0x34, 0x8C, 0x5D, 0x9E, 0xAD,  // h.-4.]..
                /* 0758 */  0x68, 0x98, 0x33, 0x04, 0x1D, 0x8C, 0xC7, 0xC9,  // h.3.....
                /* 0760 */  0xCF, 0x76, 0xBE, 0x20, 0x18, 0xD7, 0x67, 0x05,  // .v. ..g.
                /* 0768 */  0xDC, 0x28, 0xE1, 0x0E, 0x82, 0xAB, 0x39, 0x17,  // .(....9.
                /* 0770 */  0xA0, 0x86, 0xE0, 0xE3, 0x03, 0xE6, 0x8E, 0xF4,  // ........
                /* 0778 */  0xB2, 0x05, 0x2E, 0x7D, 0xA7, 0x07, 0x90, 0xDF,  // ...}....
                /* 0780 */  0x09, 0x11, 0xB3, 0x46, 0xDD, 0x59, 0x3D, 0x6B,  // ...F.Y=k
                /* 0788 */  0x83, 0x78, 0xD6, 0xBE, 0xAD, 0xF9, 0xA6, 0x84,  // .x......
                /* 0790 */  0xBB, 0x24, 0x78, 0x0E, 0xEF, 0x75, 0xBE, 0xAA,  // .$x..u..
                /* 0798 */  0x99, 0x60, 0x84, 0x9B, 0x1A, 0xB4, 0x9B, 0x08,  // .`......
                /* 07A0 */  0xEE, 0xE6, 0x01, 0xEF, 0xB2, 0x42, 0xEE, 0x44,  // .....B.D
                /* 07A8 */  0x20, 0x3B, 0x2A, 0xB0, 0x73, 0x25, 0xF6, 0xFA,  //  ;*.s%..
                /* 07B0 */  0x01, 0xAE, 0xFF, 0xFF, 0xF5, 0x03, 0xF6, 0x3D,  // .......=
                /* 07B8 */  0xC6, 0xD7, 0x0F, 0x70, 0x41, 0xFA, 0xFA, 0x01,  // ...pA...
                /* 07C0 */  0x5C, 0x2F, 0xA8, 0xB8, 0x9B, 0x04, 0xDC, 0x99,  // \/......
                /* 07C8 */  0xFB, 0xCC, 0x81, 0x57, 0x7B, 0xFB, 0x40, 0xAB,  // ...W{.@.
                /* 07D0 */  0xBE, 0x7D, 0x20, 0x86, 0xE9, 0x7B, 0xA5, 0xA7,  // .} ..{..
                /* 07D8 */  0xF4, 0x12, 0xF1, 0x96, 0xC3, 0x94, 0xDE, 0x3E,  // .......>
                /* 07E0 */  0x50, 0xF7, 0x10, 0x2B, 0x3B, 0x38, 0xA0, 0x2E,  // P..+;8..
                /* 07E8 */  0x20, 0x86, 0x33, 0x88, 0x01, 0x1D, 0xF4, 0xE0,  //  .3.....
                /* 07F0 */  0x00, 0xFD, 0x46, 0xC4, 0xAF, 0x1F, 0xF0, 0xEE,  // ..F.....
                /* 07F8 */  0xCC, 0xE0, 0x19, 0x05, 0xEE, 0xFE, 0x01, 0xF3,  // ........
                /* 0800 */  0xDA, 0xF0, 0x0E, 0x01, 0xFB, 0xFF, 0x7F, 0x87,  // ........
                /* 0808 */  0x00, 0xC3, 0x25, 0x04, 0x58, 0x08, 0x99, 0x3C,  // ..%.X..<
                /* 0810 */  0x2A, 0xFA, 0x55, 0x83, 0x82, 0x78, 0xF2, 0x8E,  // *.U..x..
                /* 0818 */  0x75, 0xFC, 0x83, 0x72, 0x90, 0x62, 0x23, 0xC5,  // u..r.b#.
                /* 0820 */  0x5D, 0x43, 0x00, 0xFB, 0xA7, 0x3E, 0x7E, 0x0D,  // ]C...>~.
                /* 0828 */  0x01, 0x3E, 0xFF, 0xFF, 0x6B, 0x08, 0x70, 0x38,  // .>..k.p8
                /* 0830 */  0x7C, 0xE0, 0x0F, 0x55, 0x70, 0x0E, 0xAA, 0xEC,  // |..Up...
                /* 0838 */  0x50, 0x05, 0x30, 0xF2, 0xFF, 0x7F, 0xFB, 0x00,  // P.0.....
                /* 0840 */  0x3E, 0x47, 0x05, 0x76, 0xFB, 0x00, 0x3C, 0xC0,  // >G.v..<.
                /* 0848 */  0xF2, 0xDB, 0x07, 0xE0, 0x63, 0xE6, 0x3E, 0x54,  // ....c.>T
                /* 0850 */  0x81, 0xE3, 0x0E, 0xC0, 0x0E, 0x55, 0xC0, 0xED,  // .....U..
                /* 0858 */  0xFF, 0x7F, 0xA8, 0x02, 0xEC, 0xDC, 0x21, 0xE0,  // ......!.
                /* 0860 */  0x1C, 0xAA, 0x00, 0xEF, 0xD7, 0x10, 0x60, 0xF5,  // ......`.
                /* 0868 */  0xFF, 0xBF, 0x86, 0x80, 0xF7, 0x96, 0xE0, 0x6B,  // .......k
                /* 0870 */  0x08, 0xE0, 0xE5, 0xF0, 0x81, 0x57, 0x78, 0x0D,  // .....Wx.
                /* 0878 */  0x41, 0x1D, 0x0A, 0xAC, 0xF3, 0xA5, 0xA0, 0x2B,  // A......+
                /* 0880 */  0xB0, 0xC7, 0x79, 0x72, 0x4F, 0x55, 0x70, 0x94,  // ..yrOUp.
                /* 0888 */  0xDD, 0x43, 0x50, 0x9A, 0x4E, 0x55, 0x80, 0xDE,  // .CP.NU..
                /* 0890 */  0xFF, 0xFF, 0x05, 0x04, 0xCC, 0x32, 0x66, 0x8D,  // .....2f.
                /* 0898 */  0x0A, 0x3E, 0x6B, 0x0A, 0xE2, 0x59, 0x3B, 0xD4,  // .>k..Y;.
                /* 08A0 */  0x69, 0x06, 0x7A, 0x88, 0xEB, 0x07, 0xE8, 0x45,  // i.z....E
                /* 08A8 */  0x5E, 0x3F, 0x40, 0x76, 0x56, 0xC0, 0xDC, 0x3F,  // ^?@vV..?
                /* 08B0 */  0x80, 0xD7, 0x45, 0x1E, 0x7C, 0x1E, 0x2E, 0xF2,  // ..E.|...
                /* 08B8 */  0x80, 0x88, 0xFF, 0xFF, 0x55, 0x02, 0x3B, 0x75,  // ....U.;u
                /* 08C0 */  0x7E, 0xEA, 0xC0, 0xAB, 0xBE, 0x80, 0xA0, 0xB5,  // ~.......
                /* 08C8 */  0x5F, 0x40, 0x90, 0x07, 0x2B, 0x18, 0x6A, 0x2F,  // _@..+.j/
                /* 08D0 */  0x20, 0xA8, 0xBB, 0x88, 0xB5, 0x9D, 0x1D, 0x50,  //  ......P
                /* 08D8 */  0x6A, 0x0E, 0x56, 0x14, 0xC4, 0x80, 0x8E, 0x7A,  // j.V....z
                /* 08E0 */  0x76, 0x80, 0x7E, 0x11, 0xF1, 0xC1, 0x0A, 0x98,  // v.~.....
                /* 08E8 */  0x8E, 0xF2, 0x35, 0x02, 0x38, 0x5C, 0x44, 0x80,  // ..5.8\D.
                /* 08F0 */  0x85, 0x94, 0xD9, 0xA3, 0xC2, 0x5F, 0x37, 0x28,  // ....._7(
                /* 08F8 */  0x88, 0x67, 0xEF, 0xDB, 0x99, 0x4F, 0x56, 0xE0,  // .g...OV.
                /* 0900 */  0xB8, 0x8A, 0xC0, 0xFF, 0xFF, 0x5F, 0x45, 0x00,  // ....._E.
                /* 0908 */  0xBF, 0xE0, 0xBE, 0x8A, 0x00, 0x6E, 0xCE, 0x56,  // .....n.V
                /* 0910 */  0x10, 0x6C, 0xFA, 0xD4, 0x68, 0xD4, 0xAA, 0x41,  // .l..h..A
                /* 0918 */  0x99, 0x1A, 0x65, 0x1A, 0xD4, 0xEA, 0x53, 0xA9,  // ..e...S.
                /* 0920 */  0x31, 0x63, 0xD6, 0xA0, 0x24, 0xFB, 0xB1, 0xA0,  // 1c..$...
                /* 0928 */  0xB1, 0x5A, 0x3E, 0x85, 0x40, 0x1C, 0xE0, 0xCF,  // .Z>.@...
                /* 0930 */  0x21, 0x10, 0x07, 0x59, 0xB2, 0x40, 0x1C, 0xE6,  // !..Y.@..
                /* 0938 */  0x83, 0x21, 0x10, 0x87, 0xFA, 0xC5, 0x08, 0xC4,  // .!......
                /* 0940 */  0x71, 0x16, 0x24, 0x40, 0x62, 0x02, 0x84, 0x45,  // q.$@b..E
                /* 0948 */  0x50, 0x01, 0xC2, 0xC4, 0x2F, 0x4F, 0x20, 0x96,  // P.../O .
                /* 0950 */  0xBD, 0x3C, 0x81, 0x58, 0xF0, 0x03, 0x42, 0xFF,  // .<.X..B.
                /* 0958 */  0x7F, 0x10, 0x4B, 0x7F, 0x14, 0x08, 0x84, 0x18,  // ..K.....
                /* 0960 */  0x01, 0xA6, 0x6F, 0x08, 0x81, 0x10, 0x2B, 0x03,  // ..o...+.
                /* 0968 */  0xA1, 0x4B, 0x14, 0x88, 0x23, 0x99, 0x01, 0x61,  // .K..#..a
                /* 0970 */  0xC1, 0xFE, 0x1F, 0x02, 0x71, 0x3C, 0x37, 0x20,  // ....q<7 
                /* 0978 */  0x2C, 0xE4, 0x03, 0x42, 0x20, 0x8E, 0x6A, 0x07,  // ,..B .j.
                /* 0980 */  0x84, 0xC5, 0xD4, 0x03, 0x4A, 0x0D, 0x81, 0x30,  // ....J..0
                /* 0988 */  0x59, 0x8A, 0x40, 0x58, 0x68, 0x47, 0x10, 0x37,  // Y.@XhG.7
                /* 0990 */  0xA2, 0x3B, 0x4A, 0x49, 0x40, 0x4C, 0xA8, 0x26,  // .;JI@L.&
                /* 0998 */  0x20, 0x26, 0x1B, 0x44, 0x40, 0x0E, 0x21, 0x0A,  //  &.D@.!.
                /* 09A0 */  0x88, 0x25, 0x02, 0x11, 0x90, 0xB5, 0x9B, 0x02,  // .%......
                /* 09A8 */  0x62, 0x49, 0x40, 0x04, 0xE4, 0x8C, 0xAE, 0x80,  // bI@.....
                /* 09B0 */  0x58, 0x60, 0x10, 0x01, 0x39, 0xE8, 0x33, 0x41,  // X`..9.3A
                /* 09B8 */  0x40, 0x8E, 0x0D, 0x22, 0x20, 0x8B, 0xF1, 0x05,  // @.." ...
                /* 09C0 */  0xC4, 0x94, 0x81, 0x08, 0xC8, 0x1A, 0x1E, 0x62,  // .......b
                /* 09C8 */  0x02, 0xB2, 0x22, 0x10, 0x01, 0x59, 0xAB, 0x32,  // .."..Y.2
                /* 09D0 */  0x20, 0x26, 0x1C, 0x44, 0x03, 0x26, 0xCE, 0x80,  //  &.D.&..
                /* 09D8 */  0x98, 0x7C, 0x10, 0x01, 0x39, 0xD6, 0x5B, 0x40,  // .|..9.[@
                /* 09E0 */  0x40, 0xCE, 0x08, 0x22, 0x20, 0xA7, 0xD1, 0x06,  // @.." ...
                /* 09E8 */  0xC4, 0xB2, 0x81, 0x08, 0xC8, 0xD9, 0xC5, 0x01,  // ........
                /* 09F0 */  0x31, 0x21, 0xE6, 0x80, 0x98, 0x84, 0xC7, 0x46,  // 1!.....F
                /* 09F8 */  0x20, 0x22, 0x08, 0x44, 0x40, 0xFE, 0xFF, 0x03   //  ".D@...
            })
        }
    }

    Scope (\_SB.PCI0.LPCB)
    {
        Device (ADP0)
        {
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                If (ECOK)
                {
                    Local0 = ((EC92 >> 0x03) & One)
                    If (Local0)
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (One)
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                \_SB
            })
            Name (BIF1, Package (0x0D)
            {
                Zero, 
                0x10CC, 
                0x10CC, 
                One, 
                0x3A98, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                "PA3478U-1BAS/BRS", 
                "0000", 
                "Li-ion", 
                ""
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (ECOK)
                {
                    If ((EC94 & One))
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (BST1, Package (0x04)
            {
                One, 
                0x0A90, 
                0x1000, 
                0x23A0
            })
            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                If (ECOK)
                {
                    Local0 = ECAE /* \_SB_.PCI0.LPCB.ECAE */
                    Local5 = ECAF /* \_SB_.PCI0.LPCB.ECAF */
                    Local5 <<= 0x08
                    Local0 += Local5
                    BIF1 [0x04] = Local0
                    Local2 = Local0
                    Local0 = ECAA /* \_SB_.PCI0.LPCB.ECAA */
                    Local5 = ECAB /* \_SB_.PCI0.LPCB.ECAB */
                    Local5 <<= 0x08
                    Local0 += Local5
                    Local0 *= Local2
                    Divide (Local0, 0x03E8, Local3, Local0)
                    BIF1 [0x02] = Local0
                    Local1 = ECAC /* \_SB_.PCI0.LPCB.ECAC */
                    Local5 = ECAD /* \_SB_.PCI0.LPCB.ECAD */
                    Local5 <<= 0x08
                    Local1 += Local5
                    Local1 *= Local2
                    Divide (Local1, 0x03E8, Local3, Local1)
                    BIF1 [One] = Local1
                    BIF1 [0x08] = Local0
                    Concatenate (BCM1, BCM2, Local0)
                    BIF1 [0x09] = Local0
                    Local0 = ECB9 /* \_SB_.PCI0.LPCB.ECB9 */
                    Local5 = ECBA /* \_SB_.PCI0.LPCB.ECBA */
                    Local5 <<= 0x08
                    Local0 += Local5
                    Local1 = ITOS (Local0)
                    BIF1 [0x0A] = Local1
                }
                Else
                {
                    BIF1 [One] = Ones
                    BIF1 [0x04] = Ones
                }

                Return (BIF1) /* \_SB_.PCI0.LPCB.BAT0.BIF1 */
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If (ECOK)
                {
                    Local1 = ((EC94 >> 0x04) & One)
                    Local0 = (EC95 & One)
                    Local2 = (Local1 << One)
                    Local3 = (Local0 | Local2)
                    Local2 = ECC6 /* \_SB_.PCI0.LPCB.ECC6 */
                    Local1 = (Local2 * 0x0100)
                    Local0 = ECC5 /* \_SB_.PCI0.LPCB.ECC5 */
                    Local1 += Local0
                    Local4 = (ECAE + (ECAF << 0x08))
                    Local1 *= Local4
                    Divide (Local1, 0x03E8, Local0, Local1)
                    BST1 [One] = Local1
                    Local0 = ECA4 /* \_SB_.PCI0.LPCB.ECA4 */
                    If ((Local0 < 0x0F))
                    {
                        Local3 |= 0x04
                    }

                    If ((CTEG == One))
                    {
                        Local3 |= 0x04
                    }

                    BST1 [Zero] = Local3
                    Local1 = DerefOf (BIF1 [0x02])
                    Local2 = (Local1 * Local0)
                    Divide (Local2, 0x64, Local3, Local2)
                    Local2 += One
                    BST1 [0x02] = Local2
                    Local3 = DerefOf (BIF1 [0x04])
                    BST1 [0x03] = Local3
                }
                Else
                {
                    BST1 [Zero] = One
                    BST1 [One] = Ones
                    BST1 [0x02] = Ones
                    BST1 [0x03] = Ones
                }

                Return (BST1) /* \_SB_.PCI0.LPCB.BAT0.BST1 */
            }
        }

        Method (ITOS, 1, NotSerialized)
        {
            Local0 = ""
            Local1 = 0x04
            While (Local1)
            {
                Local1--
                Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
                Local2 = DerefOf (CHAR [Local4])
                Concatenate (Local0, Local2, Local5)
                Local0 = Local5
            }

            Return (Local0)
        }

        Name (CHAR, Package (0x10)
        {
            "0", 
            "1", 
            "2", 
            "3", 
            "4", 
            "5", 
            "6", 
            "7", 
            "8", 
            "9", 
            "A", 
            "B", 
            "C", 
            "D", 
            "E", 
            "F"
        })
        Device (BT)
        {
            Name (_HID, "TOS6205")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local2 = ((EC93 >> 0x05) & One)
                Local0 = Zero
                If (Local2)
                {
                    Local0 = 0x0F
                }

                Return (Local0)
            }

            Method (BTST, 0, NotSerialized)
            {
                If ((OSYS < 0x07DC))
                {
                    Sleep (0x32)
                }

                Local0 = Zero
                If (((EC93 & 0x20) == 0x20))
                {
                    Local0 = (EC93 & 0xC0)
                    If (((EC93 & 0x10) == 0x10))
                    {
                        Local0 += One
                    }
                }

                Return (Local0)
            }

            Method (AUSB, 0, NotSerialized)
            {
            }

            Method (DUSB, 0, NotSerialized)
            {
                Acquire (MUTS, 0xFFFF)
                FLNK (0x16, 0xFC)
                Release (MUTS)
                If ((OSYS < 0x07DC))
                {
                    Sleep (0x96)
                }
            }

            Method (BTPO, 0, NotSerialized)
            {
                Local2 = \_SB.RDEC (0x93, 0x20, 0x05)
                If (Local2)
                {
                    Local3 = \_SB.RDEC (0x93, 0x10, 0x04)
                    If (Local3)
                    {
                        \_SB.WREC (0x93, 0x80, 0x07, One)
                        \_SB.WREC (0x93, 0x40, 0x06, One)
                        Acquire (MUTS, 0xFFFF)
                        FLNK (0x16, 0xFA)
                        Release (MUTS)
                    }
                }
            }

            Method (BTPF, 0, NotSerialized)
            {
                If (ECOK)
                {
                    Local2 = \_SB.RDEC (0x93, 0x20, 0x05)
                    If (Local2)
                    {
                        Sleep (0xFA)
                    }
                }
            }
        }

        Name (ECOK, One)
        Method (PWCG, 0, NotSerialized)
        {
            Notify (\_SB.PCI0.LPCB.ADP0, Zero) // Bus Check
            Sleep (0x32)
            \_SB.PCI0.LPCB.BAT0._BST ()
            Sleep (0x64)
            Notify (\_SB.PCI0.LPCB.BAT0, 0x80) // Status Change
            Sleep (0x32)
            \_SB.PCI0.LPCB.BAT0._BIF ()
            Sleep (0x64)
            Notify (\_SB.PCI0.LPCB.BAT0, 0x81) // Information Change
        }

        Method (INEV, 1, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            CECI = Arg0
            FLNK (0xFF, 0x05)
            Release (MUTS)
            If (TSBK)
            {
                Notify (\_SB.VALZ, 0x80) // Status Change
            }
        }

        Name (LEGA, Package (0x0A)
        {
            0x14, 
            0x13, 
            0x19, 
            0x59, 
            0x11, 
            0x31, 
            0x36, 
            0x40, 
            0x41, 
            0x18
        })
        Method (LGPA, 1, Serialized)
        {
            Switch (Arg0)
            {
                Case (Zero)
                {
                    Notify (\_SB.LID0, 0x80) // Status Change
                }
                Case (One)
                {
                    OSMI (0xFC)
                    PWCG ()
                    PNOT ()
                    \_SB.PCI0.LPCB.INEV (0x1ABF)
                }
                Case (0x02)
                {
                    PWCG ()
                    PNOT ()
                }
                Case (0x03)
                {
                    If ((\_SB.RDEC (0x93, 0x08, 0x03) == Zero))
                    {
                        Acquire (MUTS, 0xFFFF)
                        FLNK (0x16, One)
                        Release (MUTS)
                        If ((\_SB.RDEC (0x93, 0x20, 0x05) == One))
                        {
                            If ((\_SB.RDEC (0x93, 0x10, 0x04) == One))
                            {
                                \_SB.WREC (0x93, 0x80, 0x07, One)
                                \_SB.WREC (0x93, 0x40, 0x06, One)
                                Acquire (MUTS, 0xFFFF)
                                FLNK (0x16, 0xFA)
                                Release (MUTS)
                                Notify (\_SB.PCI0.LPCB.BT, Zero) // Bus Check
                            }
                        }
                    }
                    Else
                    {
                        Acquire (MUTS, 0xFFFF)
                        FLNK (0x16, Zero)
                        Release (MUTS)
                        If ((\_SB.RDEC (0x93, 0x20, 0x05) == One))
                        {
                            \_SB.WREC (0x93, 0x80, 0x07, Zero)
                            \_SB.WREC (0x93, 0x40, 0x06, Zero)
                            Acquire (MUTS, 0xFFFF)
                            FLNK (0x16, 0xFC)
                            Release (MUTS)
                            Notify (\_SB.PCI0.LPCB.BT, Zero) // Bus Check
                        }
                    }
                }
                Case (0x04)
                {
                    P80H = 0x11
                }
                Case (0x05)
                {
                    If (CPTO)
                    {
                        Acquire (MUTS, 0xFFFF)
                        If ((THRF == Zero))
                        {
                            PRM0 = Zero
                        }
                        Else
                        {
                            PRM0 = 0x02
                        }

                        OSMI (0xC0)
                        Release (MUTS)
                        Notify (\_TZ.THRM, 0x81) // Information Change
                    }
                }
                Case (0x06)
                {
                    If (CPTO)
                    {
                        Acquire (MUTS, 0xFFFF)
                        PRM0 = PWRT /* \_SB_.PCI0.LPCB.PWRT */
                        OSMI (0xC4)
                        Release (MUTS)
                    }
                }
                Case (0x07)
                {
                }
                Case (0x08)
                {
                }
                Case (0x09)
                {
                    If (!((OSYS < 0x07D6) || (OSYS == 0x07D8)))
                    {
                        Notify (\_SB.VALZ, 0x8E) // Device-Specific
                    }
                }
                Case (0x0100)
                {
                }
                Default
                {
                }

            }
        }

        Name (LEGB, Package (0x0E)
        {
            0x20, 
            0x21, 
            0x82, 
            0x83, 
            0x84, 
            0x87, 
            0x85, 
            0x86, 
            0x45, 
            0xE0, 
            0xE1, 
            0xE2, 
            0xE3, 
            0x72
        })
        Method (LGPB, 1, Serialized)
        {
            Switch (Arg0)
            {
                Case (0x02)
                {
                    If (TSBK)
                    {
                        If (((EVTC & 0x02) == 0x02))
                        {
                            INEV (0x19B2)
                        }
                    }
                }
                Case (0x03)
                {
                    If (TSBK)
                    {
                        If (((EVTC & 0x02) == 0x02))
                        {
                            INEV (0x19B3)
                        }
                    }
                }
                Case (0x04)
                {
                    If (TSBK)
                    {
                        INEV (0x0401)
                    }
                }
                Case (0x05)
                {
                    If ((SYBZ != 0x03))
                    {
                        Acquire (MUTM, 0xFFFF)
                        CKSM ()
                        Release (MUTM)
                    }
                }
                Case (0x06)
                {
                    If (TSBK)
                    {
                        If (((EVTC & 0x08) == 0x08))
                        {
                            INEV (0x19B6)
                        }
                    }
                }
                Case (0x07)
                {
                    If (TSBK)
                    {
                        If (((EVTC & 0x08) == 0x08))
                        {
                            INEV (0x19B7)
                        }
                    }
                }
                Case (0x08)
                {
                    If (CPTO)
                    {
                        If ((RCPU >= CPUM)){}
                    }
                }
                Case (0x0100)
                {
                }
                Default
                {
                }

            }
        }

        Name (LEGC, Package (0x09)
        {
            0x51, 
            0x50, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x25, 
            0x26
        })
        Method (LGPC, 1, Serialized)
        {
            Switch (Arg0)
            {
                Case (0x07)
                {
                    If (((VGAM == One) || (VGAM == 0x02)))
                    {
                        \_SB.PCI0.PEG0.VGA.UDCS (\_SB.PCI0.PEG0.VGA.UDGS ())
                        If ((DSEN == One))
                        {
                            Acquire (MUTS, 0xFFFF)
                            OSMI (0xA7)
                            Release (MUTS)
                        }
                        Else
                        {
                            Notify (\_SB.PCI0.PEG0.VGA, 0x80) // Status Change
                        }
                    }
                    ElseIf ((DSEN == One))
                    {
                        Acquire (MUTS, 0xFFFF)
                        OSMI (0xA8)
                        NSTE = CSTE /* External reference */
                        OSMI (0xFF)
                        NSTE >>= One
                        While (!(PADL & NSTE))
                        {
                            NSTE >>= One
                            If ((NSTE == Zero))
                            {
                                NSTE = 0x08
                            }
                        }

                        OSMI (0xA7)
                        Release (MUTS)
                    }
                    Else
                    {
                        \_SB.PCI0.GFX0.STBL (One, \_SB.PCI0.GFX0.GHDS (Zero), ElseIf ((_T_0 == 0x08))
                            {
                                If (((VGAM == One) || (VGAM == 0x02)))
                                {
                                    P80H = 0x05
                                    \_SB.PCI0.PEG0.VGA.CRT._DGS = Zero
                                    \_SB.PCI0.PEG0.VGA.LCD._DGS = One
                                    \_SB.PCI0.PEG0.VGA.DFP1._DGS = Zero
                                    \_SB.PCI0.PEG0.VGA.DFP2._DGS = Zero
                                    If (DSEN)
                                    {
                                        Acquire (MUTS, 0xFFFF)
                                        NSTE = One
                                        OSMI (0xA7)
                                        Release (MUTS)
                                    }
                                    Else
                                    {
                                        P80H = 0x06
                                        \_SB.PCI0.PEG0.VGA.CSTT = Zero
                                        Notify (\_SB.PCI0.PEG0.VGA, 0x80) // Status Change
                                    }
                                }
                                ElseIf ((DSEN == One))
                                {
                                    P80H = 0x07
                                    Acquire (MUTS, 0xFFFF)
                                    NSTE = One
                                    OSMI (0xA7)
                                    Release (MUTS)
                                }
                                Else
                                {
                                    \_SB.PCI0.GFX0.STBL (Zero, \_SB.PCI0.GFX0.GHDS (Zero), ElseIf ((_T_0 == 0x0100)){}, Else
                                        {
                                        })
                                }
                            })
                    }
                }

            }
        }

        Name (LEGD, Package (0x0D)
        {
            0x63, 
            0x64, 
            0x60, 
            0x61, 
            0x28, 
            0x29, 
            0x80, 
            0x81, 
            0x71, 
            0x98, 
            0x66, 
            0xE4, 
            0xE5
        })
        Method (LGPD, 1, Serialized)
        {
            Switch (Arg0)
            {
                Case (Zero)
                {
                    If (((VGAM == One) || (VGAM == 0x02)))
                    {
                        If ((VGAM == One))
                        {
                            Notify (\_SB.PCI0.PEG0.VGA.LCD, 0x87) // Device-Specific
                        }
                        ElseIf ((VGAM == 0x02))
                        {
                            Notify (\_SB.PCI0.PEG0.PEGP.DD01, 0x87) // Device-Specific
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.GFX0.DD1F, 0x87) // Device-Specific
                    }
                }
                Case (One)
                {
                    If (((VGAM == One) || (VGAM == 0x02)))
                    {
                        If ((VGAM == One))
                        {
                            Notify (\_SB.PCI0.PEG0.VGA.LCD, 0x86) // Device-Specific
                        }
                        ElseIf ((VGAM == 0x02))
                        {
                            Notify (\_SB.PCI0.PEG0.PEGP.DD01, 0x86) // Device-Specific
                        }
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.GFX0.DD1F, 0x86) // Device-Specific
                    }
                }
                Case (0x02)
                {
                    If ((OSYS < 0x07D6))
                    {
                        Notify (\_SB.FWEX, 0x80) // Status Change
                    }
                    ElseIf (TSBK)
                    {
                        Notify (\_SB.VALZ, 0x80) // Status Change
                    }
                    ElseIf ((EVCT != Zero))
                    {
                        Acquire (MUTS, 0xFFFF)
                        FLNK (0x11, EVCT)
                        Local0 = (KYB0 & 0xFF)
                        KYB0 = Zero
                        Release (MUTS)
                    }
                }
                Case (0x04)
                {
                    If (((EC93 & 0x30) == 0x30))
                    {
                        \_SB.WREC (0x93, 0x80, 0x07, One)
                        \_SB.WREC (0x93, 0x40, 0x06, One)
                    }

                    Notify (\_SB.PCI0.LPCB.BT, Zero) // Bus Check
                }
                Case (0x05)
                {
                    If (((EC93 & 0x30) == 0x30))
                    {
                        \_SB.WREC (0x93, 0x80, 0x07, Zero)
                        \_SB.WREC (0x93, 0x40, 0x06, Zero)
                    }

                    Notify (\_SB.PCI0.LPCB.BT, Zero) // Bus Check
                }
                Case (0x06)
                {
                }
                Case (0x07)
                {
                }
                Case (0x08)
                {
                    OSMI (0xFD)
                }
                Case (0x09)
                {
                }
                Case (0x0A)
                {
                    Acquire (MUTS, 0xFFFF)
                    If ((PTST == 0xFF))
                    {
                        PTST = FLNK (0x15, 0x0F)
                    }

                    PTST = (One - PTST) /* \_SB_.PTST */
                    FLNK (0x15, PTST)
                    Release (MUTS)
                }
                Case (0x0B)
                {
                    IDEV (0x0258, 0xE5)
                }
                Case (0x0C)
                {
                    Acquire (MUTS, 0xFFFF)
                    F0CM = 0x02
                    FLNK (0xFF, Zero)
                    Release (MUTS)
                }
                Case (0x0100)
                {
                }
                Default
                {
                }

            }
        }

        OperationRegion (WNBD, SystemMemory, 0xFF700100, 0x0100)
        Field (WNBD, ByteAcc, Lock, Preserve)
        {
            Offset (0x02), 
            LRPM,   8, 
            HRPM,   8, 
            RCPU,   8, 
            EVCT,   8, 
            GC6I,   1, 
            GC6O,   1, 
            FBCP,   1, 
                ,   2, 
            DLCP,   1, 
            Offset (0x07), 
            Offset (0x08), 
                ,   4, 
                ,   1, 
            ECSL,   1, 
            POFL,   1, 
            Offset (0x09), 
            WMEC,   8, 
            VGAT,   8, 
            THRF,   3, 
                ,   1, 
            PR10,   4, 
            Offset (0x0D), 
                ,   4, 
            BLFM,   1, 
            Offset (0x11), 
            BCM1,   40, 
            Offset (0x17), 
            FKST,   2, 
            Offset (0x18), 
            Offset (0x40), 
            EC92,   8, 
            EC93,   8, 
            EC94,   8, 
            EC95,   8, 
            EC96,   8, 
            EC99,   8, 
            EC9A,   8, 
            EC9C,   8, 
            EC9D,   8, 
            EC9E,   8, 
            EC9F,   8, 
            ECA0,   8, 
            ECA2,   8, 
            ECA3,   8, 
            ECA4,   8, 
            ECA5,   8, 
            ECA7,   8, 
            ECA8,   8, 
            ECA9,   8, 
            ECAA,   8, 
            ECAB,   8, 
            ECAC,   8, 
            ECAD,   8, 
            ECAE,   8, 
            ECAF,   8, 
            ECB6,   8, 
            ECB8,   8, 
            ECB9,   8, 
            ECBA,   8, 
            ECBD,   8, 
            ECBE,   8, 
            ECBF,   8, 
            ECC0,   8, 
            ECC1,   8, 
            ECC2,   8, 
            ECC5,   8, 
            ECC6,   8, 
            ECC8,   8, 
            ECC9,   8, 
            ECCA,   8, 
            ECCB,   8, 
            ECD7,   8, 
            ECDB,   8, 
            ECDF,   8, 
            ECE2,   8, 
            ECE3,   8, 
            Offset (0x6F), 
            HDS0,   16, 
            HDS1,   16, 
            HDST,   16, 
            HDSS,   8, 
            BCM2,   64, 
            PHC1,   32, 
            PHC2,   32, 
            BATI,   8, 
            PHC3,   32, 
            PHC4,   32, 
            PWMS,   8, 
            B1VT,   16, 
            B1CC,   16, 
            B1TP,   8, 
            MFAN,   16, 
            EVTC,   4, 
            Offset (0x98), 
            ADVT,   8, 
            ACCA,   8, 
            ACCR,   16, 
            CTHI,   8, 
            CTLO,   8, 
            HSRL,   8, 
            BSS1,   8, 
            BSS2,   8, 
                ,   1, 
            FBFG,   4, 
            FBS3,   1, 
            DVLK,   1, 
            Offset (0xA2), 
            PWRT,   8, 
            Offset (0xA6), 
            EWRB,   32, 
            ERDB,   32, 
            Offset (0xAF), 
            LOPO,   8, 
            BCV1,   16, 
            BCV2,   32, 
            Offset (0xB8), 
            EEV0,   8, 
            EEV1,   8, 
            EEV2,   8, 
            EEV3,   8, 
            EEV4,   8, 
            EEV5,   8, 
            EEV6,   8, 
            EEV7,   8, 
            Offset (0xC1), 
            COOL,   2, 
            Offset (0xC2), 
            SCRI,   1, 
            Offset (0xC3), 
            PNID,   8, 
            TCPD,   1, 
                ,   2, 
            RFLO,   1, 
            Offset (0xDB), 
            FCBT,   1, 
            BCS0,   1, 
            BCSX,   1, 
            Offset (0xDC), 
            TCBC,   32, 
            TMUD,   1, 
            Offset (0xE1), 
            CTEG,   1, 
            Offset (0xF6), 
            BCV0,   16, 
            Offset (0xFC), 
            FWOK,   1, 
            Offset (0xFE), 
            OVLA,   1
        }

        Mutex (MUTL, 0x00)
        Name (LEVC, Zero)
        Name (LEVB, Buffer (0x08)
        {
             0x00                                             // .
        })
        Name (LINI, Zero)
        Name (TI3S, Zero)
        Name (TIMC, Zero)
        Name (SLEC, Zero)
        Name (SLEV, Buffer (0x08)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (SLEN, Package (0x08)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Method (LREG, 0, NotSerialized)
        {
            Acquire (MUTS, 0xFFFF)
            If ((LINI == Zero))
            {
                LINI = One
                If ((OSYS > 0x07D5))
                {
                    \_SB.WREC (0xDB, One, Zero, One)
                    FLNK (0x14, One)
                    HKEM = One
                    \_SB.WREC (0xDB, 0x10, 0x04, One)
                    HSEM = One
                    \_SB.WREC (0xDB, 0x20, 0x05, One)
                    If ((EVCT != Zero))
                    {
                        FLNK (0x11, EVCT)
                        HSWK = (KYB0 & 0xFF)
                        KYB0 = Zero
                    }

                    FLNK (0x10, One)
                    FLNK (0x15, 0xFF)
                }
                Else
                {
                    \_SB.WREC (0xDB, One, Zero, Zero)
                    FLNK (0x15, 0xFF)
                    If (((VGAM == One) || (VGAM == 0x02)))
                    {
                        \_SB.PCI0.PEG0.VGA.LCD._BCL ()
                    }
                    Else
                    {
                        \_SB.PCI0.GFX0.DD1F._BCL ()
                    }
                }

                FLNK (0x30, Zero)
                \_SB.KUPP = Zero
            }

            Release (MUTS)
        }

        Method (CLBF, 1, Serialized)
        {
            Switch (Arg0)
            {
                Case (Zero)
                {
                    EEV0 = Zero
                }
                Case (One)
                {
                    EEV1 = Zero
                }
                Case (0x02)
                {
                    EEV2 = Zero
                }
                Case (0x03)
                {
                    EEV3 = Zero
                }
                Case (0x04)
                {
                    EEV4 = Zero
                }
                Case (0x05)
                {
                    EEV5 = Zero
                }
                Case (0x06)
                {
                    EEV6 = Zero
                }
                Case (0x07)
                {
                    EEV7 = Zero
                }

            }
        }

        Method (CKEV, 0, Serialized)
        {
            Name (TMPB, Buffer (0x08)
            {
                 0x00                                             // .
            })
            Acquire (MUTL, 0xFFFF)
            If ((LEVC == Zero))
            {
                TMPB [Zero] = EEV0 /* \_SB_.PCI0.LPCB.EEV0 */
                TMPB [One] = EEV1 /* \_SB_.PCI0.LPCB.EEV1 */
                TMPB [0x02] = EEV2 /* \_SB_.PCI0.LPCB.EEV2 */
                TMPB [0x03] = EEV3 /* \_SB_.PCI0.LPCB.EEV3 */
                TMPB [0x04] = EEV4 /* \_SB_.PCI0.LPCB.EEV4 */
                TMPB [0x05] = EEV5 /* \_SB_.PCI0.LPCB.EEV5 */
                TMPB [0x06] = EEV6 /* \_SB_.PCI0.LPCB.EEV6 */
                TMPB [0x07] = EEV7 /* \_SB_.PCI0.LPCB.EEV7 */
                Local0 = Zero
                While ((Local0 < 0x08))
                {
                    Local1 = DerefOf (TMPB [Local0])
                    If ((Local1 != Zero))
                    {
                        LEVB [LEVC] = Local1
                        LEVC++
                        CLBF (Local0)
                    }

                    Local0++
                }
            }

            Local2 = LEVC /* \_SB_.PCI0.LPCB.LEVC */
            Release (MUTL)
            Return (Local2)
        }

        Method (GEVT, 0, NotSerialized)
        {
            Acquire (MUTL, 0xFFFF)
            Local0 = Zero
            If ((LEVC != Zero))
            {
                LEVC--
                Local0 = DerefOf (LEVB [LEVC])
                LEVB [LEVC] = Zero
            }

            Release (MUTL)
            Return (Local0)
        }

        Method (ECLV, 0, NotSerialized)
        {
            While ((((CKEV () != Zero) || (SLEC != Zero)) && (
                TI3S < 0x78)))
            {
                Local1 = One
                While ((Local1 != Zero))
                {
                    Local1 = GEVT ()
                    LEVN (Local1)
                    TIMC += 0x19
                    If (((SLEC != Zero) && (Local1 == Zero)))
                    {
                        If ((TIMC == 0x19))
                        {
                            Sleep (0x64)
                            TIMC = 0x64
                            TI3S += 0x04
                        }
                        Else
                        {
                            Sleep (0x19)
                            TI3S++
                        }
                    }

                    If ((TIMC == 0x64))
                    {
                        TIMC = Zero
                        If ((SLEC != Zero))
                        {
                            Local0 = 0x08
                            While (Local0)
                            {
                                Local0--
                                Local3 = DerefOf (SLEN [Local0])
                                If ((Local3 != Zero))
                                {
                                    Local3--
                                    SLEN [Local0] = Local3
                                    If ((Local3 == Zero))
                                    {
                                        Local1 = One
                                        Local2 = DerefOf (SLEV [Local0])
                                        SLEV [Local0] = Zero
                                        ILEV (Local2)
                                        SLEC--
                                    }
                                }
                            }
                        }
                    }
                }
            }

            If ((TI3S >= 0x78))
            {
                TI3S = Zero
                If ((EEV0 == Zero))
                {
                    EEV0 = 0xFF
                }
            }
        }

        Method (IDEV, 2, Serialized)
        {
            If ((SLEC < 0x08))
            {
                Local0 = 0x08
                While (Local0)
                {
                    Local0--
                    If ((DerefOf (SLEN [Local0]) == Zero))
                    {
                        Break
                    }
                }

                SLEV [Local0] = Arg1
                Local2 = Arg0
                If ((Arg0 >= 0x14))
                {
                    Divide (Arg0, 0x14, Local2, Local1)
                    Local2 = (Arg0 - Local1)
                }

                SLEN [Local0] = Local2
                SLEC++
                Return (One)
            }

            Return (Zero)
        }

        Method (CLRL, 0, Serialized)
        {
            SLEC = Zero
            TIMC = Zero
            Local0 = 0x08
            While (Local0)
            {
                Local0--
                SLEV [Local0] = Zero
                SLEN [Local0] = Zero
            }
        }

        Method (ILEV, 1, NotSerialized)
        {
            Acquire (MUTL, 0xFFFF)
            If ((EEV0 == Zero))
            {
                EEV0 = 0xFF
            }

            If ((LEVC < 0x08))
            {
                LEVB [LEVC] = Arg0
                LEVC++
            }

            Release (MUTL)
        }

        Method (LEVN, 1, NotSerialized)
        {
            If ((Arg0 != Zero))
            {
                P80H = Arg0
                Sleep (0x14)
                Local6 = Match (LEGA, MEQ, Arg0, MTR, Zero, Zero)
                If ((Local6 != Ones))
                {
                    LGPA (Local6)
                }
                Else
                {
                    Local6 = Match (LEGB, MEQ, Arg0, MTR, Zero, Zero)
                    If ((Local6 != Ones))
                    {
                        LGPB (Local6)
                    }
                    Else
                    {
                        Local6 = Match (LEGC, MEQ, Arg0, MTR, Zero, Zero)
                        If ((Local6 != Ones))
                        {
                            LGPC (Local6)
                        }
                        Else
                        {
                            Local6 = Match (LEGD, MEQ, Arg0, MTR, Zero, Zero)
                            If ((Local6 != Ones))
                            {
                                LGPD (Local6)
                            }
                        }
                    }
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L17, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
            {
                \_SB.PCI0.LPCB.ECLV ()
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "INSYDE", "HSW-LPT", 0x00003000)
{
    /*
     * iASL Warning: There were 5 external control methods found during
     * disassembly, but only 0 were resolved (5 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.BCMF, UnknownObj)
    External (_SB_.BRIN, UnknownObj)
    External (_SB_.BRLV, IntObj)
    External (_SB_.BROH, IntObj)
    External (_SB_.PANL, UnknownObj)
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB.ECA3, UnknownObj)
    External (_SB_.PCI0.LPCB.PNID, UnknownObj)
    External (_SB_.PCI0.LPCB.SCRI, UnknownObj)
    External (_SB_.PEPD, UnknownObj)
    External (_SB_.PWM0, UnknownObj)
    External (_SB_.PWM1, UnknownObj)
    External (_SB_.PWM2, UnknownObj)
    External (_SB_.PWM3, UnknownObj)
    External (_SB_.PWM4, UnknownObj)
    External (_SB_.PWM5, UnknownObj)
    External (_SB_.PWM6, UnknownObj)
    External (_SB_.PWM7, UnknownObj)
    External (ADBG, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (AR02, IntObj)
    External (AR0A, IntObj)
    External (AR0B, IntObj)
    External (DSEN, UnknownObj)
    External (GPRW, IntObj)
    External (GUAM, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (HDOS, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (HNOT, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (IDAB, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (OSYS, UnknownObj)
    External (PICM, IntObj)
    External (PNHM, UnknownObj)
    External (PR02, IntObj)
    External (PR0A, IntObj)
    External (PR0B, IntObj)
    External (S0ID, UnknownObj)
    External (SCIS, UnknownObj)

    OperationRegion (SANV, SystemMemory, 0x9CF87D98, 0x0141)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        SARV,   32, 
        ASLB,   32, 
        IMON,   8, 
        IGDS,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IPCF,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        LIDS,   8, 
        KSV0,   32, 
        KSV1,   8, 
        BBAR,   32, 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ALFP,   8, 
        AUDA,   32, 
        AUDB,   32, 
        AUDC,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        CADR,   32, 
        CCNT,   8, 
        Offset (0xC8), 
        SGMD,   8, 
        SGFL,   8, 
        PWOK,   8, 
        HLRS,   8, 
        PWEN,   8, 
        PRST,   8, 
        CPSP,   32, 
        EECP,   8, 
        EVCP,   16, 
        XBAS,   32, 
        GBAS,   16, 
        SGGP,   8, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        OBS1,   32, 
        OBS2,   32, 
        OBS3,   32, 
        OBS4,   32, 
        OBS5,   32, 
        OBS6,   32, 
        OBS7,   32, 
        OBS8,   32, 
        LTRA,   8, 
        OBFA,   8, 
        LTRB,   8, 
        OBFB,   8, 
        LTRC,   8, 
        OBFC,   8, 
        SMSL,   16, 
        SNSL,   16, 
        P0UB,   8, 
        P1UB,   8, 
        P2UB,   8, 
        EDPV,   8, 
        NXDX,   32, 
        DIDX,   32, 
        PCSL,   8, 
        SC7A,   8
    }

    Scope (\_SB.PCI0)
    {
        Name (LTRS, Zero)
        Name (OBFS, Zero)
        Device (PEG0)
        {
            Name (_ADR, 0x00010000)  // _ADR: Address
            OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
            Field (PEGR, DWordAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                PSTS,   1, 
                Offset (0x2C), 
                GENG,   1, 
                    ,   1, 
                PMEG,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW) /* External reference */
                0x09
                0x04
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    GENG = One
                    PMEG = One
                }
                Else
                {
                    GENG = Zero
                    PMEG = Zero
                }
            }

            Method (HPME, 0, Serialized)
            {
                PSTS = One
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR02) /* External reference */
                }

                Return (PR02) /* External reference */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRS = LTRA /* \LTRA */
                OBFS = OBFA /* \OBFA */
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Switch (ToInteger (Arg0))
                {
                    Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRS)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFS)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.PEG0.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (OBFS)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (LTRS)
                                    {
                                        LTRV [Zero] = ((SMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (SMSL & 0x03FF)
                                        LTRV [0x02] = ((SNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (SNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.PEG0.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (PEGP)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW) /* External reference */
                    0x09
                    0x04
                }
            }
        }

        Device (PEG1)
        {
            Name (_ADR, 0x00010001)  // _ADR: Address
            OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
            Field (PEGR, DWordAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                PSTS,   1, 
                Offset (0x2C), 
                GENG,   1, 
                    ,   1, 
                PMEG,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW) /* External reference */
                0x09
                0x04
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    GENG = One
                    PMEG = One
                }
                Else
                {
                    GENG = Zero
                    PMEG = Zero
                }
            }

            Method (HPME, 0, Serialized)
            {
                PSTS = One
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0A) /* External reference */
                }

                Return (PR0A) /* External reference */
            }

            Device (PEGP)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW) /* External reference */
                    0x09
                    0x04
                }
            }
        }

        Device (PEG2)
        {
            Name (_ADR, 0x00010002)  // _ADR: Address
            OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
            Field (PEGR, DWordAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                PSTS,   1, 
                Offset (0x2C), 
                GENG,   1, 
                    ,   1, 
                PMEG,   1
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW) /* External reference */
                0x09
                0x04
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    GENG = One
                    PMEG = One
                }
                Else
                {
                    GENG = Zero
                    PMEG = Zero
                }
            }

            Method (HPME, 0, Serialized)
            {
                PSTS = One
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0B) /* External reference */
                }

                Return (PR0B) /* External reference */
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRS = LTRC /* \LTRC */
                OBFS = OBFC /* \OBFC */
            }

            Name (LTRV, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Name (OPTS, Zero)
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                Switch (ToInteger (Arg0))
                {
                    Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    OPTS = One
                                    If (LTRS)
                                    {
                                        OPTS |= 0x40
                                    }

                                    If (OBFS)
                                    {
                                        OPTS |= 0x10
                                    }

                                    Return (OPTS) /* \_SB_.PCI0.PEG2.OPTS */
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                            Case (0x04)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (OBFS)
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (0x10)
                                        {
                                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                        })
                                    }
                                }
                            }
                            Case (0x06)
                            {
                                If ((Arg1 == 0x02))
                                {
                                    If (LTRS)
                                    {
                                        LTRV [Zero] = ((SMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (SMSL & 0x03FF)
                                        LTRV [0x02] = ((SNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (SNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.PEG2.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }

                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (B0D3)
        {
            Name (_ADR, 0x00030000)  // _ADR: Address
            Name (BARA, 0x80000000)
            Name (TBAR, Zero)
            Name (TCMD, Zero)
            Name (MODB, Zero)
            Name (MODC, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((AUVD != 0xFFFF))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((((ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
                    ABAR & 0xFFFFC000) != Zero)))
                {
                    BARA = ABAR /* \_SB_.PCI0.B0D3.ABAR */
                }
            }

            OperationRegion (RPCS, SystemMemory, \XBAS, 0x00018040)
            Field (RPCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x18004), 
                ACMD,   8, 
                Offset (0x18010), 
                ABAR,   32
            }

            OperationRegion (RPCZ, PCI_Config, Zero, 0x40)
            Field (RPCZ, DWordAcc, Lock, Preserve)
            {
                AUVD,   16
            }

            Method (ASTR, 0, Serialized)
            {
                If ((((ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
                    ABAR & 0xFFFFC000) != Zero)))
                {
                    BBAR = (ABAR & 0xFFFFFFF0)
                    BBAR += 0x1000
                    OperationRegion (RPCY, SystemMemory, BBAR, 0x25)
                    Field (RPCY, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x0C), 
                        EM4W,   32, 
                        EMWA,   32, 
                        Offset (0x1C), 
                        ADWA,   32
                    }

                    EMWA = AUDA /* \AUDA */
                    ADWA = AUDB /* \AUDB */
                    EM4W = AUDC /* \AUDC */
                }
            }

            Method (VSTR, 1, Serialized)
            {
                Name (CONT, 0x03E8)
                Name (ADDR, 0x80000000)
                ADDR = Arg0
                OperationRegion (CCDC, SystemMemory, ADDR, 0x04)
                Field (CCDC, ByteAcc, NoLock, Preserve)
                {
                    CDEC,   32
                }

                If ((((ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
                    ABAR & 0xFFFFC000) != Zero)))
                {
                    If ((CDEC != Zero))
                    {
                        BBAR = (ABAR & 0xFFFFFFF0)
                        OperationRegion (IPCV, SystemMemory, BBAR, 0x70)
                        Field (IPCV, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x60), 
                            AVIC,   32, 
                            Offset (0x68), 
                            AIRS,   16
                        }

                        CONT = 0x03E8
                        While ((((AIRS & One) == One) && (CONT != Zero)))
                        {
                            Stall (One)
                            CONT--
                        }

                        AIRS |= 0x02
                        AVIC = CDEC /* \_SB_.PCI0.B0D3.VSTR.CDEC */
                        AIRS |= One
                        CONT = 0x03E8
                        While ((((AIRS & One) == One) && (CONT != Zero)))
                        {
                            Stall (One)
                            CONT--
                        }
                    }
                }
            }

            Method (CXDC, 0, Serialized)
            {
                Name (IDDX, 0x80000000)
                If (((CADR != Zero) && (CCNT != Zero)))
                {
                    IDDX = CADR /* \CADR */
                    While ((IDDX < (CADR + (CCNT * 0x04))))
                    {
                        VSTR (IDDX)
                        IDDX += 0x04
                    }
                }
            }

            Method (ARST, 0, Serialized)
            {
                If ((((ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
                    ABAR & 0xFFFFC000) != Zero)))
                {
                    BBAR = (ABAR & 0xFFFFFFF0)
                    OperationRegion (IPCV, SystemMemory, BBAR, 0xBF)
                    Field (IPCV, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x08), 
                        CRST,   32, 
                        Offset (0x4C), 
                        CORB,   32, 
                        Offset (0x5C), 
                        RIRB,   32, 
                        Offset (0x80), 
                        OSD1,   32, 
                        Offset (0xA0), 
                        OSD2,   32
                    }

                    CORB &= 0xFFFFFFFD
                    RIRB &= 0xFFFFFFFD
                    OSD1 &= 0xFFFFFFFD
                    OSD2 &= 0xFFFFFFFD
                    CRST &= 0xFFFFFFFE
                }
            }

            Method (AINI, 0, Serialized)
            {
                Name (CONT, 0x03E8)
                If ((((ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
                    ABAR & 0xFFFFC000) != Zero)))
                {
                    BBAR = (ABAR & 0xFFFFFFF0)
                    OperationRegion (IPCV, SystemMemory, BBAR, 0x70)
                    Field (IPCV, DWordAcc, NoLock, Preserve)
                    {
                        GCAP,   16, 
                        Offset (0x08), 
                        GCTL,   32, 
                        Offset (0x0E), 
                        SSTS,   8, 
                        Offset (0x60), 
                        AVIC,   32, 
                        Offset (0x68), 
                        AIRS,   16
                    }

                    GCTL |= One
                    CONT = 0x03E8
                    While ((((GCTL & One) == Zero) && (CONT != Zero)))
                    {
                        Stall (One)
                        CONT--
                    }

                    GCAP &= 0xFFFF
                    SSTS |= 0x0F
                    GCTL &= 0xFFFFFFFE
                    CONT = 0x03E8
                    While ((((GCTL & One) == One) && (CONT != Zero)))
                    {
                        Stall (One)
                        CONT--
                    }

                    GCTL |= One
                    CONT = 0x03E8
                    While ((((GCTL & One) == Zero) && (CONT != Zero)))
                    {
                        Stall (One)
                        CONT--
                    }
                }
            }

            Method (ABWA, 1, Serialized)
            {
                If (Arg0)
                {
                    If ((((ABAR & 0xFFFFC004) == 0xFFFFC004) || ((ABAR & 0xFFFFC000
                        ) == Zero)))
                    {
                        If ((BARA != 0x80000000))
                        {
                            TBAR = ABAR /* \_SB_.PCI0.B0D3.ABAR */
                            TCMD = ACMD /* \_SB_.PCI0.B0D3.ACMD */
                            ABAR = BARA /* \_SB_.PCI0.B0D3.BARA */
                            ACMD = 0x06
                            MODB = One
                        }
                    }
                    ElseIf (((ACMD & 0x06) != 0x06))
                    {
                        TCMD = ACMD /* \_SB_.PCI0.B0D3.ACMD */
                        ACMD = 0x06
                        MODC = One
                    }
                }
                Else
                {
                    If (MODB)
                    {
                        If ((ABAR == BARA))
                        {
                            ABAR = TBAR /* \_SB_.PCI0.B0D3.TBAR */
                            ACMD = TCMD /* \_SB_.PCI0.B0D3.TCMD */
                        }
                    }

                    If (MODC)
                    {
                        ACMD = TCMD /* \_SB_.PCI0.B0D3.TCMD */
                    }
                }
            }
        }

        Device (GFX0)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            OperationRegion (IGDT, SystemMemory, ASLB, 0x0400)
            Field (IGDT, AnyAcc, NoLock, Preserve)
            {
                Offset (0x318), 
                CBRL,   8, 
                Offset (0x31C), 
                DUT0,   8, 
                LVE0,   8, 
                DUT1,   8, 
                LVE1,   8, 
                DUT2,   8, 
                LVE2,   8, 
                DUT3,   8, 
                LVE3,   8, 
                DUT4,   8, 
                LVE4,   8, 
                DUT5,   8, 
                LVE5,   8, 
                DUT6,   8, 
                LVE6,   8, 
                DUT7,   8, 
                LVE7,   8, 
                DUT8,   8, 
                LVE8,   8, 
                DUT9,   8, 
                LVE9,   8, 
                DUTA,   8, 
                LVEA,   8, 
                DUTB,   8, 
                LVEB,   8, 
                DUTC,   8, 
                LVEC,   8, 
                DUTD,   8, 
                LVED,   8, 
                DUTE,   8, 
                LVEE,   8, 
                DUTF,   8, 
                LVEF,   8, 
                DUTG,   8, 
                LVEG,   8, 
                DUTH,   8, 
                LVEH,   8, 
                DUTI,   8, 
                LVEI,   8, 
                DUTJ,   8, 
                LVEJ,   8
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                ADBG ("GFX0 DEP Call")
                If ((S0ID == One))
                {
                    ADBG ("GFX0 DEP")
                    Return (Package (0x01)
                    {
                        \_SB.PEPD
                    })
                }
                Else
                {
                    ADBG ("GFX0 DEP NULL")
                    Return (Package (0x00){})
                }
            }

            Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
            {
                DSEN = (Arg0 & 0x07)
                If (((Arg0 & 0x03) == Zero))
                {
                    If (CondRefOf (HDOS))
                    {
                        HDOS ()
                    }
                }
            }

            Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
            {
                If (CondRefOf (IDAB))
                {
                    IDAB ()
                }
                Else
                {
                    NDID = Zero
                    If ((DIDL != Zero))
                    {
                        DID1 = SDDL (DIDL)
                    }

                    If ((DDL2 != Zero))
                    {
                        DID2 = SDDL (DDL2)
                    }

                    If ((DDL3 != Zero))
                    {
                        DID3 = SDDL (DDL3)
                    }

                    If ((DDL4 != Zero))
                    {
                        DID4 = SDDL (DDL4)
                    }

                    If ((DDL5 != Zero))
                    {
                        DID5 = SDDL (DDL5)
                    }

                    If ((DDL6 != Zero))
                    {
                        DID6 = SDDL (DDL6)
                    }

                    If ((DDL7 != Zero))
                    {
                        DID7 = SDDL (DDL7)
                    }

                    If ((DDL8 != Zero))
                    {
                        DID8 = SDDL (DDL8)
                    }

                    If ((DDL9 != Zero))
                    {
                        DID9 = SDDL (DDL9)
                    }

                    If ((DD10 != Zero))
                    {
                        DIDA = SDDL (DD10)
                    }

                    If ((DD11 != Zero))
                    {
                        DIDB = SDDL (DD11)
                    }

                    If ((DD12 != Zero))
                    {
                        DIDC = SDDL (DD12)
                    }

                    If ((DD13 != Zero))
                    {
                        DIDD = SDDL (DD13)
                    }

                    If ((DD14 != Zero))
                    {
                        DIDE = SDDL (DD14)
                    }

                    If ((DD15 != Zero))
                    {
                        DIDF = SDDL (DD15)
                    }
                }

                If ((NDID == One))
                {
                    Name (TMP1, Package (0x01)
                    {
                        Ones
                    })
                    TMP1 [Zero] = (0x00010000 | DID1)
                    Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
                }

                If ((NDID == 0x02))
                {
                    Name (TMP2, Package (0x02)
                    {
                        Ones, 
                        Ones
                    })
                    TMP2 [Zero] = (0x00010000 | DID1)
                    TMP2 [One] = (0x00010000 | DID2)
                    Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
                }

                If ((NDID == 0x03))
                {
                    Name (TMP3, Package (0x03)
                    {
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP3 [Zero] = (0x00010000 | DID1)
                    TMP3 [One] = (0x00010000 | DID2)
                    TMP3 [0x02] = (0x00010000 | DID3)
                    Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
                }

                If ((NDID == 0x04))
                {
                    Name (TMP4, Package (0x04)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP4 [Zero] = (0x00010000 | DID1)
                    TMP4 [One] = (0x00010000 | DID2)
                    TMP4 [0x02] = (0x00010000 | DID3)
                    TMP4 [0x03] = (0x00010000 | DID4)
                    Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
                }

                If ((NDID == 0x05))
                {
                    Name (TMP5, Package (0x05)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP5 [Zero] = (0x00010000 | DID1)
                    TMP5 [One] = (0x00010000 | DID2)
                    TMP5 [0x02] = (0x00010000 | DID3)
                    TMP5 [0x03] = (0x00010000 | DID4)
                    TMP5 [0x04] = (0x00010000 | DID5)
                    Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
                }

                If ((NDID == 0x06))
                {
                    Name (TMP6, Package (0x06)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP6 [Zero] = (0x00010000 | DID1)
                    TMP6 [One] = (0x00010000 | DID2)
                    TMP6 [0x02] = (0x00010000 | DID3)
                    TMP6 [0x03] = (0x00010000 | DID4)
                    TMP6 [0x04] = (0x00010000 | DID5)
                    TMP6 [0x05] = (0x00010000 | DID6)
                    Return (TMP6) /* \_SB_.PCI0.GFX0._DOD.TMP6 */
                }

                If ((NDID == 0x07))
                {
                    Name (TMP7, Package (0x07)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP7 [Zero] = (0x00010000 | DID1)
                    TMP7 [One] = (0x00010000 | DID2)
                    TMP7 [0x02] = (0x00010000 | DID3)
                    TMP7 [0x03] = (0x00010000 | DID4)
                    TMP7 [0x04] = (0x00010000 | DID5)
                    TMP7 [0x05] = (0x00010000 | DID6)
                    TMP7 [0x06] = (0x00010000 | DID7)
                    Return (TMP7) /* \_SB_.PCI0.GFX0._DOD.TMP7 */
                }

                If ((NDID == 0x08))
                {
                    Name (TMP8, Package (0x08)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP8 [Zero] = (0x00010000 | DID1)
                    TMP8 [One] = (0x00010000 | DID2)
                    TMP8 [0x02] = (0x00010000 | DID3)
                    TMP8 [0x03] = (0x00010000 | DID4)
                    TMP8 [0x04] = (0x00010000 | DID5)
                    TMP8 [0x05] = (0x00010000 | DID6)
                    TMP8 [0x06] = (0x00010000 | DID7)
                    TMP8 [0x07] = (0x00010000 | DID8)
                    Return (TMP8) /* \_SB_.PCI0.GFX0._DOD.TMP8 */
                }

                If ((NDID == 0x09))
                {
                    Name (TMP9, Package (0x09)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMP9 [Zero] = (0x00010000 | DID1)
                    TMP9 [One] = (0x00010000 | DID2)
                    TMP9 [0x02] = (0x00010000 | DID3)
                    TMP9 [0x03] = (0x00010000 | DID4)
                    TMP9 [0x04] = (0x00010000 | DID5)
                    TMP9 [0x05] = (0x00010000 | DID6)
                    TMP9 [0x06] = (0x00010000 | DID7)
                    TMP9 [0x07] = (0x00010000 | DID8)
                    TMP9 [0x08] = (0x00010000 | DID9)
                    Return (TMP9) /* \_SB_.PCI0.GFX0._DOD.TMP9 */
                }

                If ((NDID == 0x0A))
                {
                    Name (TMPA, Package (0x0A)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMPA [Zero] = (0x00010000 | DID1)
                    TMPA [One] = (0x00010000 | DID2)
                    TMPA [0x02] = (0x00010000 | DID3)
                    TMPA [0x03] = (0x00010000 | DID4)
                    TMPA [0x04] = (0x00010000 | DID5)
                    TMPA [0x05] = (0x00010000 | DID6)
                    TMPA [0x06] = (0x00010000 | DID7)
                    TMPA [0x07] = (0x00010000 | DID8)
                    TMPA [0x08] = (0x00010000 | DID9)
                    TMPA [0x09] = (0x00010000 | DIDA)
                    Return (TMPA) /* \_SB_.PCI0.GFX0._DOD.TMPA */
                }

                If ((NDID == 0x0B))
                {
                    Name (TMPB, Package (0x0B)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMPB [Zero] = (0x00010000 | DID1)
                    TMPB [One] = (0x00010000 | DID2)
                    TMPB [0x02] = (0x00010000 | DID3)
                    TMPB [0x03] = (0x00010000 | DID4)
                    TMPB [0x04] = (0x00010000 | DID5)
                    TMPB [0x05] = (0x00010000 | DID6)
                    TMPB [0x06] = (0x00010000 | DID7)
                    TMPB [0x07] = (0x00010000 | DID8)
                    TMPB [0x08] = (0x00010000 | DID9)
                    TMPB [0x09] = (0x00010000 | DIDA)
                    TMPB [0x0A] = (0x00010000 | DIDB)
                    Return (TMPB) /* \_SB_.PCI0.GFX0._DOD.TMPB */
                }

                If ((NDID == 0x0C))
                {
                    Name (TMPC, Package (0x0C)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMPC [Zero] = (0x00010000 | DID1)
                    TMPC [One] = (0x00010000 | DID2)
                    TMPC [0x02] = (0x00010000 | DID3)
                    TMPC [0x03] = (0x00010000 | DID4)
                    TMPC [0x04] = (0x00010000 | DID5)
                    TMPC [0x05] = (0x00010000 | DID6)
                    TMPC [0x06] = (0x00010000 | DID7)
                    TMPC [0x07] = (0x00010000 | DID8)
                    TMPC [0x08] = (0x00010000 | DID9)
                    TMPC [0x09] = (0x00010000 | DIDA)
                    TMPC [0x0A] = (0x00010000 | DIDB)
                    TMPC [0x0B] = (0x00010000 | DIDC)
                    Return (TMPC) /* \_SB_.PCI0.GFX0._DOD.TMPC */
                }

                If ((NDID == 0x0D))
                {
                    Name (TMPD, Package (0x0D)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMPD [Zero] = (0x00010000 | DID1)
                    TMPD [One] = (0x00010000 | DID2)
                    TMPD [0x02] = (0x00010000 | DID3)
                    TMPD [0x03] = (0x00010000 | DID4)
                    TMPD [0x04] = (0x00010000 | DID5)
                    TMPD [0x05] = (0x00010000 | DID6)
                    TMPD [0x06] = (0x00010000 | DID7)
                    TMPD [0x07] = (0x00010000 | DID8)
                    TMPD [0x08] = (0x00010000 | DID9)
                    TMPD [0x09] = (0x00010000 | DIDA)
                    TMPD [0x0A] = (0x00010000 | DIDB)
                    TMPD [0x0B] = (0x00010000 | DIDC)
                    TMPD [0x0C] = (0x00010000 | DIDD)
                    Return (TMPD) /* \_SB_.PCI0.GFX0._DOD.TMPD */
                }

                If ((NDID == 0x0E))
                {
                    Name (TMPE, Package (0x0E)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMPE [Zero] = (0x00010000 | DID1)
                    TMPE [One] = (0x00010000 | DID2)
                    TMPE [0x02] = (0x00010000 | DID3)
                    TMPE [0x03] = (0x00010000 | DID4)
                    TMPE [0x04] = (0x00010000 | DID5)
                    TMPE [0x05] = (0x00010000 | DID6)
                    TMPE [0x06] = (0x00010000 | DID7)
                    TMPE [0x07] = (0x00010000 | DID8)
                    TMPE [0x08] = (0x00010000 | DID9)
                    TMPE [0x09] = (0x00010000 | DIDA)
                    TMPE [0x0A] = (0x00010000 | DIDB)
                    TMPE [0x0B] = (0x00010000 | DIDC)
                    TMPE [0x0C] = (0x00010000 | DIDD)
                    TMPE [0x0D] = (0x00010000 | DIDE)
                    Return (TMPE) /* \_SB_.PCI0.GFX0._DOD.TMPE */
                }

                If ((NDID == 0x0F))
                {
                    Name (TMPF, Package (0x0F)
                    {
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones, 
                        Ones
                    })
                    TMPF [Zero] = (0x00010000 | DID1)
                    TMPF [One] = (0x00010000 | DID2)
                    TMPF [0x02] = (0x00010000 | DID3)
                    TMPF [0x03] = (0x00010000 | DID4)
                    TMPF [0x04] = (0x00010000 | DID5)
                    TMPF [0x05] = (0x00010000 | DID6)
                    TMPF [0x06] = (0x00010000 | DID7)
                    TMPF [0x07] = (0x00010000 | DID8)
                    TMPF [0x08] = (0x00010000 | DID9)
                    TMPF [0x09] = (0x00010000 | DIDA)
                    TMPF [0x0A] = (0x00010000 | DIDB)
                    TMPF [0x0B] = (0x00010000 | DIDC)
                    TMPF [0x0C] = (0x00010000 | DIDD)
                    TMPF [0x0D] = (0x00010000 | DIDE)
                    TMPF [0x0E] = (0x00010000 | DIDF)
                    Return (TMPF) /* \_SB_.PCI0.GFX0._DOD.TMPF */
                }

                Return (Package (0x01)
                {
                    0x0400
                })
            }

            Device (DD01)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID1) == 0x0400))
                    {
                        EDPV = One
                        NXDX = NXD1 /* \NXD1 */
                        DIDX = DID1 /* \DID1 */
                        Return (One)
                    }

                    If ((DID1 == Zero))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID1))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    Return (CDDS (DID1))
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD1) /* \NXD1 */
                    }

                    Return (NDDS (DID1))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD02)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID2) == 0x0400))
                    {
                        EDPV = 0x02
                        NXDX = NXD2 /* \NXD2 */
                        DIDX = DID2 /* \DID2 */
                        Return (0x02)
                    }

                    If ((DID2 == Zero))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID2))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((LIDS == Zero))
                    {
                        Return (Zero)
                    }

                    Return (CDDS (DID2))
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD2) /* \NXD2 */
                    }

                    Return (NDDS (DID2))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD03)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID3) == 0x0400))
                    {
                        EDPV = 0x03
                        NXDX = NXD3 /* \NXD3 */
                        DIDX = DID3 /* \DID3 */
                        Return (0x03)
                    }

                    If ((DID3 == Zero))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID3))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID3 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID3))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD3) /* \NXD3 */
                    }

                    Return (NDDS (DID3))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD04)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID4) == 0x0400))
                    {
                        EDPV = 0x04
                        NXDX = NXD4 /* \NXD4 */
                        DIDX = DID4 /* \DID4 */
                        Return (0x04)
                    }

                    If ((DID4 == Zero))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID4))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID4 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID4))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD4) /* \NXD4 */
                    }

                    Return (NDDS (DID4))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD05)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID5) == 0x0400))
                    {
                        EDPV = 0x05
                        NXDX = NXD5 /* \NXD5 */
                        DIDX = DID5 /* \DID5 */
                        Return (0x05)
                    }

                    If ((DID5 == Zero))
                    {
                        Return (0x05)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID5))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID5 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID5))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD5) /* \NXD5 */
                    }

                    Return (NDDS (DID5))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD06)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID6) == 0x0400))
                    {
                        EDPV = 0x06
                        NXDX = NXD6 /* \NXD6 */
                        DIDX = DID6 /* \DID6 */
                        Return (0x06)
                    }

                    If ((DID6 == Zero))
                    {
                        Return (0x06)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID6))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID6 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID6))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD6) /* \NXD6 */
                    }

                    Return (NDDS (DID6))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD07)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID7) == 0x0400))
                    {
                        EDPV = 0x07
                        NXDX = NXD7 /* \NXD7 */
                        DIDX = DID7 /* \DID7 */
                        Return (0x07)
                    }

                    If ((DID7 == Zero))
                    {
                        Return (0x07)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID7))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID7 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID7))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD7) /* \NXD7 */
                    }

                    Return (NDDS (DID7))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD08)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID8) == 0x0400))
                    {
                        EDPV = 0x08
                        NXDX = NXD8 /* \NXD8 */
                        DIDX = DID8 /* \DID8 */
                        Return (0x08)
                    }

                    If ((DID8 == Zero))
                    {
                        Return (0x08)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID8))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID8 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID8))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD8) /* \NXD8 */
                    }

                    Return (NDDS (DID8))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD09)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID9) == 0x0400))
                    {
                        EDPV = 0x09
                        NXDX = NXD8 /* \NXD8 */
                        DIDX = DID9 /* \DID9 */
                        Return (0x09)
                    }

                    If ((DID9 == Zero))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID9))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID9 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID9))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD8) /* \NXD8 */
                    }

                    Return (NDDS (DID9))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD0A)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDA) == 0x0400))
                    {
                        EDPV = 0x0A
                        NXDX = NXD8 /* \NXD8 */
                        DIDX = DIDA /* \DIDA */
                        Return (0x0A)
                    }

                    If ((DIDA == Zero))
                    {
                        Return (0x0A)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDA))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDA == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DIDA))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD8) /* \NXD8 */
                    }

                    Return (NDDS (DIDA))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD0B)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDB) == 0x0400))
                    {
                        EDPV = 0x0B
                        NXDX = NXD8 /* \NXD8 */
                        DIDX = DIDB /* \DIDB */
                        Return (0x0B)
                    }

                    If ((DIDB == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDB))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDB == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DIDB))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD8) /* \NXD8 */
                    }

                    Return (NDDS (DIDB))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD0C)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDC) == 0x0400))
                    {
                        EDPV = 0x0C
                        NXDX = NXD8 /* \NXD8 */
                        DIDX = DIDC /* \DIDC */
                        Return (0x0C)
                    }

                    If ((DIDC == Zero))
                    {
                        Return (0x0C)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDC))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDC == Zero))
                    {
                        Return (0x0C)
                    }
                    Else
                    {
                        Return (CDDS (DIDC))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD8) /* \NXD8 */
                    }

                    Return (NDDS (DIDC))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD0D)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDD) == 0x0400))
                    {
                        EDPV = 0x0D
                        NXDX = NXD8 /* \NXD8 */
                        DIDX = DIDD /* \DIDD */
                        Return (0x0D)
                    }

                    If ((DIDD == Zero))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDD))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDD == Zero))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (CDDS (DIDD))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD8) /* \NXD8 */
                    }

                    Return (NDDS (DIDD))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD0E)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDE) == 0x0400))
                    {
                        EDPV = 0x0E
                        NXDX = NXD8 /* \NXD8 */
                        DIDX = DIDE /* \DIDE */
                        Return (0x0E)
                    }

                    If ((DIDE == Zero))
                    {
                        Return (0x0E)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDE))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDE == Zero))
                    {
                        Return (0x0E)
                    }
                    Else
                    {
                        Return (CDDS (DIDE))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD8) /* \NXD8 */
                    }

                    Return (NDDS (DIDE))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD0F)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDF) == 0x0400))
                    {
                        EDPV = 0x0F
                        NXDX = NXD8 /* \NXD8 */
                        DIDX = DIDF /* \DIDF */
                        Return (0x0F)
                    }

                    If ((DIDF == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDF))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDC == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (CDDS (DIDF))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXD8) /* \NXD8 */
                    }

                    Return (NDDS (DIDF))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }
            }

            Device (DD1F)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((EDPV == Zero))
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDX))
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    \_SB.PCI0.LPCB.SCRI = Zero
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    \_SB.PCI0.LPCB.SCRI = One
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((EDPV == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (CDDS (DIDX))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                    {
                        Return (NXDX) /* \NXDX */
                    }

                    Return (NDDS (DIDX))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* \NSTE */
                    }
                }

                Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                {
                    If ((\_SB.PWM7 == Zero))
                    {
                        \_SB.PWM0 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [0x02])
                        \_SB.PWM1 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [0x03])
                        \_SB.PWM2 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [0x04])
                        \_SB.PWM3 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [0x05])
                        \_SB.PWM4 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [0x06])
                        \_SB.PWM5 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [0x07])
                        \_SB.PWM6 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [0x08])
                        \_SB.PWM7 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [0x09])
                    }

                    BCLM = Zero
                    If ((OSYS < 0x07DC))
                    {
                        LVE0 = 0x8A
                        LVE1 = 0x99
                        LVE2 = 0xA3
                        LVE3 = 0xB2
                        LVE4 = 0xBC
                        LVE5 = 0xCB
                        LVE6 = 0xDA
                        LVE7 = 0xE4
                        DUT0 = ((\_SB.PWM0 * 0xFF) / 0x64)
                        DUT1 = ((\_SB.PWM1 * 0xFF) / 0x64)
                        DUT2 = ((\_SB.PWM2 * 0xFF) / 0x64)
                        DUT3 = ((\_SB.PWM3 * 0xFF) / 0x64)
                        DUT4 = ((\_SB.PWM4 * 0xFF) / 0x64)
                        DUT5 = ((\_SB.PWM5 * 0xFF) / 0x64)
                        DUT6 = ((\_SB.PWM6 * 0xFF) / 0x64)
                        DUT7 = ((\_SB.PWM7 * 0xFF) / 0x64)
                    }
                    Else
                    {
                        LVE0 = (Zero + 0x80)
                        LVE1 = (One + 0x80)
                        LVE2 = (0x0A + 0x80)
                        LVE3 = (0x14 + 0x80)
                        LVE4 = (0x1E + 0x80)
                        LVE5 = (0x28 + 0x80)
                        LVE6 = (0x32 + 0x80)
                        LVE7 = (0x3C + 0x80)
                        LVE8 = (0x46 + 0x80)
                        LVE9 = (0x50 + 0x80)
                        LVEA = (0x5A + 0x80)
                        LVEB = (0x64 + 0x80)
                         = 0x64 = ((0xFF = (\_SB.BRIN * Zero)) % Zero)
                        DUT0
                        DUT1 = (DUT0 + One)
                        DUT3 = 0x33
                        DUT2 = ((DUT0 + DUT3) / 0x02)
                        DUT4 = 0x4C
                        DUT5 = 0x66
                        DUT6 = 0x7F
                        DUT7 = 0x99
                        DUT8 = 0xB2
                        DUT9 = 0xCC
                        DUTA = 0xE5
                        DUTB = 0xFF
                    }

                    If ((OSYS < 0x07DC))
                    {
                        Return (\_SB.BRLV) /* External reference */
                    }
                    Else
                    {
                        Return (\_SB.BROH) /* External reference */
                    }
                }

                Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                {
                    \_SB.BCMF = Zero
                    If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                    {
                        BRTL = Arg0
                        If ((OSYS < 0x07DC))
                        {
                            Local0 = SizeOf (\_SB.BRLV)
                            While (Local0)
                            {
                                Local0--
                                Local1 = DerefOf (\_SB.BRLV [Local0])
                                If ((Arg0 == Local1))
                                {
                                    Break
                                }
                            }

                            Arg0 = DerefOf (DerefOf (\_SB.PANL [\_SB.PCI0.LPCB.PNID]) [Local0])
                            \_SB.PCI0.LPCB.ECA3 = (Local0 - 0x02)
                        }
                        Else
                        {
                            \_SB.PCI0.LPCB.ECA3 = Arg0
                        }

                        BCLP = ((Arg0 * 0xFF) / 0x64)
                        BCLP |= 0x80000000
                        \_SB.PCI0.GFX0.AINT (One, Arg0)
                    }
                }

                Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                {
                    Return (BRTL) /* \BRTL */
                }
            }

            Method (SDDL, 1, NotSerialized)
            {
                NDID++
                Local0 = (Arg0 & 0x0F0F)
                Local1 = (0x80000000 | Local0)
                If ((DIDL == Local0))
                {
                    Return (Local1)
                }

                If ((DDL2 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL3 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL4 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL5 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL6 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL7 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL8 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL9 == Local0))
                {
                    Return (Local1)
                }

                If ((DD10 == Local0))
                {
                    Return (Local1)
                }

                If ((DD11 == Local0))
                {
                    Return (Local1)
                }

                If ((DD12 == Local0))
                {
                    Return (Local1)
                }

                If ((DD13 == Local0))
                {
                    Return (Local1)
                }

                If ((DD14 == Local0))
                {
                    Return (Local1)
                }

                If ((DD15 == Local0))
                {
                    Return (Local1)
                }

                Return (Zero)
            }

            Method (CDDS, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x0F0F)
                If ((Zero == Local0))
                {
                    Return (0x1D)
                }

                If ((CADL == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL2 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL3 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL4 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL5 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL6 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL7 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL8 == Local0))
                {
                    Return (0x1F)
                }

                Return (0x1D)
            }

            Method (NDDS, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x0F0F)
                If ((Zero == Local0))
                {
                    Return (Zero)
                }

                If ((NADL == Local0))
                {
                    Return (One)
                }

                If ((NDL2 == Local0))
                {
                    Return (One)
                }

                If ((NDL3 == Local0))
                {
                    Return (One)
                }

                If ((NDL4 == Local0))
                {
                    Return (One)
                }

                If ((NDL5 == Local0))
                {
                    Return (One)
                }

                If ((NDL6 == Local0))
                {
                    Return (One)
                }

                If ((NDL7 == Local0))
                {
                    Return (One)
                }

                If ((NDL8 == Local0))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Scope (\_SB.PCI0)
            {
                OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                Field (MCHP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x14), 
                    AUDE,   8, 
                    Offset (0x60), 
                    TASM,   10, 
                    Offset (0x62)
                }
            }

            OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
            Field (IGDP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x12), 
                    ,   1, 
                GIVD,   1, 
                    ,   2, 
                GUMA,   3, 
                Offset (0x14), 
                    ,   4, 
                GMFN,   1, 
                Offset (0x18), 
                Offset (0xA4), 
                ASLE,   8, 
                Offset (0xA8), 
                GSSE,   1, 
                GSSB,   14, 
                GSES,   1, 
                Offset (0xB0), 
                    ,   12, 
                CDVL,   1, 
                Offset (0xB2), 
                Offset (0xB5), 
                LBPC,   8, 
                Offset (0xBC), 
                ASLS,   32
            }

            OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
            Field (IGDM, AnyAcc, NoLock, Preserve)
            {
                SIGN,   128, 
                SIZE,   32, 
                OVER,   32, 
                SVER,   256, 
                VVER,   128, 
                GVER,   128, 
                MBOX,   32, 
                DMOD,   32, 
                PCON,   32, 
                DVER,   64, 
                Offset (0x100), 
                DRDY,   32, 
                CSTS,   32, 
                CEVT,   32, 
                Offset (0x120), 
                DIDL,   32, 
                DDL2,   32, 
                DDL3,   32, 
                DDL4,   32, 
                DDL5,   32, 
                DDL6,   32, 
                DDL7,   32, 
                DDL8,   32, 
                CPDL,   32, 
                CPL2,   32, 
                CPL3,   32, 
                CPL4,   32, 
                CPL5,   32, 
                CPL6,   32, 
                CPL7,   32, 
                CPL8,   32, 
                CADL,   32, 
                CAL2,   32, 
                CAL3,   32, 
                CAL4,   32, 
                CAL5,   32, 
                CAL6,   32, 
                CAL7,   32, 
                CAL8,   32, 
                NADL,   32, 
                NDL2,   32, 
                NDL3,   32, 
                NDL4,   32, 
                NDL5,   32, 
                NDL6,   32, 
                NDL7,   32, 
                NDL8,   32, 
                ASLP,   32, 
                TIDX,   32, 
                CHPD,   32, 
                CLID,   32, 
                CDCK,   32, 
                SXSW,   32, 
                EVTS,   32, 
                CNOT,   32, 
                NRDY,   32, 
                DDL9,   32, 
                DD10,   32, 
                DD11,   32, 
                DD12,   32, 
                DD13,   32, 
                DD14,   32, 
                DD15,   32, 
                CPL9,   32, 
                CP10,   32, 
                CP11,   32, 
                CP12,   32, 
                CP13,   32, 
                CP14,   32, 
                CP15,   32, 
                Offset (0x200), 
                SCIE,   1, 
                GEFC,   4, 
                GXFC,   3, 
                GESF,   8, 
                Offset (0x204), 
                PARM,   32, 
                DSLP,   32, 
                Offset (0x300), 
                ARDY,   32, 
                ASLC,   32, 
                TCHE,   32, 
                ALSI,   32, 
                BCLP,   32, 
                PFIT,   32, 
                CBLV,   32, 
                BCLM,   320, 
                CPFM,   32, 
                EPFM,   32, 
                PLUT,   592, 
                PFMB,   32, 
                CCDV,   32, 
                PCFT,   32, 
                SROT,   32, 
                IUER,   32, 
                FDSP,   64, 
                FDSS,   32, 
                STAT,   32, 
                Offset (0x400), 
                GVD1,   49152, 
                PHED,   32, 
                BDDC,   2048
            }

            Name (DBTB, Package (0x15)
            {
                Zero, 
                0x07, 
                0x38, 
                0x01C0, 
                0x0E00, 
                0x3F, 
                0x01C7, 
                0x0E07, 
                0x01F8, 
                0x0E38, 
                0x0FC0, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x7000, 
                0x7007, 
                0x7038, 
                0x71C0, 
                0x7E00
            })
            Name (CDCT, Package (0x05)
            {
                Package (0x02)
                {
                    0xE4, 
                    0x0140
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }, 

                Package (0x02)
                {
                    Zero, 
                    Zero
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }
            })
            Name (SUCC, One)
            Name (NVLD, 0x02)
            Name (CRIT, 0x04)
            Name (NCRT, 0x06)
            Method (GSCI, 0, Serialized)
            {
                Method (GBDA, 0, Serialized)
                {
                    If ((GESF == Zero))
                    {
                        PARM = 0x0659
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == One))
                    {
                        PARM = 0x00300482
                        If ((S0ID == One))
                        {
                            PARM |= 0x0100
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        PARM &= 0xEFFF0000
                        PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                        PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x05))
                    {
                        PARM = IPSC /* \IPSC */
                        PARM |= (IPAT << 0x08)
                        PARM += 0x0100
                        PARM |= (LIDS << 0x10)
                        PARM += 0x00010000
                        PARM |= (IBIA << 0x14)
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x07))
                    {
                        PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                        PARM ^= One
                        PARM |= (GMFN << One)
                        PARM |= 0x1800
                        PARM |= (IDMS << 0x11)
                        PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                            0x15) /* \_SB_.PCI0.GFX0.PARM */
                        GESF = One
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0A))
                    {
                        PARM = Zero
                        If (ISSC)
                        {
                            PARM |= 0x03
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0B))
                    {
                        PARM = KSV0 /* \KSV0 */
                        GESF = KSV1 /* \KSV1 */
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    GESF = Zero
                    Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                }

                Method (SBCB, 0, Serialized)
                {
                    If ((GESF == Zero))
                    {
                        PARM = Zero
                        PARM = 0x000F87DD
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == One))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x03))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x04))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x05))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x07))
                    {
                        If ((S0ID == One))
                        {
                            If (((PARM & 0xFF) == One))
                            {
                                \GUAM (One)
                            }
                        }

                        If ((PARM == Zero))
                        {
                            Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                            If ((0x80000000 & Local0))
                            {
                                CLID &= 0x0F
                                GLID (CLID)
                            }
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x08))
                    {
                        If ((S0ID == One))
                        {
                            Local0 = ((PARM >> 0x08) & 0xFF)
                            If ((Local0 == Zero))
                            {
                                \GUAM (Zero)
                            }
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x09))
                    {
                        IBTT = (PARM & 0xFF)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0A))
                    {
                        IPSC = (PARM & 0xFF)
                        If (((PARM >> 0x08) & 0xFF))
                        {
                            IPAT = ((PARM >> 0x08) & 0xFF)
                            IPAT--
                        }

                        IBIA = ((PARM >> 0x14) & 0x07)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x0B))
                    {
                        IF1E = ((PARM >> One) & One)
                        If ((PARM & 0x0001E000))
                        {
                            IDMS = ((PARM >> 0x0D) & 0x0F)
                        }
                        Else
                        {
                            IDMS = ((PARM >> 0x11) & 0x0F)
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x10))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x11))
                    {
                        PARM = (LIDS << 0x08)
                        PARM += 0x0100
                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x12))
                    {
                        If ((PARM & One))
                        {
                            If (((PARM >> One) == One))
                            {
                                ISSC = One
                            }
                            Else
                            {
                                GESF = Zero
                                Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                            }
                        }
                        Else
                        {
                            ISSC = Zero
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x13))
                    {
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x14))
                    {
                        PAVP = (PARM & 0x0F)
                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GESF == 0x15))
                    {
                        If ((PARM == One))
                        {
                            \_SB.PCI0.AUDE |= 0x20
                            \_SB.PCI0.B0D3.ABWA (One)
                            \_SB.PCI0.B0D3.ARST ()
                            \_SB.PCI0.B0D3.ASTR ()
                            \_SB.PCI0.B0D3.AINI ()
                            \_SB.PCI0.B0D3.CXDC ()
                            \_SB.PCI0.B0D3.ABWA (Zero)
                            Notify (\_SB.PCI0, Zero) // Bus Check
                        }

                        If ((PARM == Zero))
                        {
                            \_SB.PCI0.AUDE &= 0xDF
                            Notify (\_SB.PCI0, Zero) // Bus Check
                        }

                        GESF = Zero
                        PARM = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GEFC == 0x04))
                {
                    GXFC = GBDA ()
                }

                If ((GEFC == 0x06))
                {
                    GXFC = SBCB ()
                }

                GEFC = Zero
                SCIS = One
                GSSE = Zero
                SCIE = Zero
                Return (Zero)
            }

            Method (PDRD, 0, NotSerialized)
            {
                Return (!DRDY)
            }

            Method (PSTS, 0, NotSerialized)
            {
                If ((CSTS > 0x02))
                {
                    Sleep (ASLP)
                }

                Return ((CSTS == 0x03))
            }

            Method (GNOT, 2, NotSerialized)
            {
                If (PDRD ())
                {
                    Return (One)
                }

                CEVT = Arg0
                CSTS = 0x03
                If (((CHPD == Zero) && (Arg1 == Zero)))
                {
                    If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                    {
                        Notify (\_SB.PCI0, Arg1)
                    }
                    Else
                    {
                        Notify (\_SB.PCI0.GFX0, Arg1)
                    }
                }

                If (CondRefOf (HNOT))
                {
                    HNOT (Arg0)
                }
                Else
                {
                    Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                }

                Return (Zero)
            }

            Method (GHDS, 1, NotSerialized)
            {
                TIDX = Arg0
                Return (GNOT (One, Zero))
            }

            Method (GLID, 1, NotSerialized)
            {
                If ((Arg0 == One))
                {
                    CLID = 0x03
                }
                Else
                {
                    CLID = Arg0
                }

                If (GNOT (0x02, Zero))
                {
                    CLID |= 0x80000000
                    Return (One)
                }

                Return (Zero)
            }

            Method (GDCK, 1, NotSerialized)
            {
                CDCK = Arg0
                Return (GNOT (0x04, Zero))
            }

            Method (PARD, 0, NotSerialized)
            {
                If (!ARDY)
                {
                    Sleep (ASLP)
                }

                Return (!ARDY)
            }

            Method (IUEH, 1, Serialized)
            {
                IUER &= 0xC0
                IUER ^= (One << Arg0)
                If ((Arg0 <= 0x04))
                {
                    Return (AINT (0x05, Zero))
                }
                Else
                {
                    Return (AINT (Arg0, Zero))
                }
            }

            Method (AINT, 2, NotSerialized)
            {
                If (!(TCHE & (One << Arg0)))
                {
                    Return (One)
                }

                If (PARD ())
                {
                    Return (One)
                }

                If (((Arg0 >= 0x05) && (Arg0 <= 0x07)))
                {
                    ASLC = (One << Arg0)
                    ASLE = One
                    Local2 = Zero
                    While (((Local2 < 0xFA) && (ASLC != Zero)))
                    {
                        Sleep (0x04)
                        Local2++
                    }

                    Return (Zero)
                }

                If ((Arg0 == 0x02))
                {
                    If (CPFM)
                    {
                        Local0 = (CPFM & 0x0F)
                        Local1 = (EPFM & 0x0F)
                        If ((Local0 == One))
                        {
                            If ((Local1 & 0x06))
                            {
                                PFIT = 0x06
                            }
                            ElseIf ((Local1 & 0x08))
                            {
                                PFIT = 0x08
                            }
                            Else
                            {
                                PFIT = One
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            If ((Local1 & 0x08))
                            {
                                PFIT = 0x08
                            }
                            ElseIf ((Local1 & One))
                            {
                                PFIT = One
                            }
                            Else
                            {
                                PFIT = 0x06
                            }
                        }

                        If ((Local0 == 0x08))
                        {
                            If ((Local1 & One))
                            {
                                PFIT = One
                            }
                            ElseIf ((Local1 & 0x06))
                            {
                                PFIT = 0x06
                            }
                            Else
                            {
                                PFIT = 0x08
                            }
                        }
                    }
                    Else
                    {
                        PFIT ^= 0x07
                    }

                    PFIT |= 0x80000000
                    ASLC = 0x04
                }
                ElseIf ((Arg0 == One))
                {
                    BCLP = ((Arg1 * 0xFF) / 0x64)
                    BCLP |= 0x80000000
                    ASLC = 0x02
                }
                ElseIf ((Arg0 == Zero))
                {
                    ALSI = Arg1
                    ASLC = One
                }
                Else
                {
                    Return (One)
                }

                ASLE = One
                Return (Zero)
            }

            Method (SCIP, 0, NotSerialized)
            {
                If ((OVER != Zero))
                {
                    Return (!GSMI)
                }

                Return (Zero)
            }

            Device (\_SB.MEM2)
            {
                Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Name (CRS2, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x20000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x40004000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (IGDS)
                    {
                        If ((PNHM == 0x000306C1))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (CRS2) /* \_SB_.MEM2.CRS2 */
                }
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "INSYDE", "HSW-LPT", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_SB_.ACPS, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU0)
    {
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            \_PR.CPU0._PPC = \_SB.ACPS /* External reference */
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Name (_PSS, Package (0x10)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C5, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00002500, 
                0x00002500
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x0000B798, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x0000AE3F, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x0000A513, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00009344, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00008A9F, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x0000822D, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000079DF, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x000069C6, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x000061FA, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00005A5C, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x000052E4, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00004B94, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00003D71, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x0000369C, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00002FF2, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU0.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU0.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "INSYDE", "HSW-LPT", 0x00001000)
{
    /*
     * iASL Warning: There were 2 external control methods found during
     * disassembly, but only 0 were resolved (2 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.LPCB.H_EC.AMBT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1CI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1DC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1DI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1FC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1FV, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1MH, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1ML, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1RC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2CI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2DI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2FC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2FV, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2MH, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2ML, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2RC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.BKAP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.BPWR, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CFS2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CFSP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CPAP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CPUP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CVRT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.DIM0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.DIM1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.ECAV, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.ECMD, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.LPCB.H_EC.ECRD, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.ECWT, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PCI0.LPCB.H_EC.FANT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PCAD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECH, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEHI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEPM, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEWL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PLAP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PMAX, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PMDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PPDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PPWR, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRC0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRC1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRCL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRCM, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRCS, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRFC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRIN, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS4, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PSTE, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PWFC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PWRL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.SKNT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TER1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TER2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD3, UnknownObj)
    External (_TZ_.TZ00._TMP, IntObj)
    External (_TZ_.TZ01._TMP, IntObj)
    External (BFS2, UnknownObj)
    External (BFS3, UnknownObj)
    External (BFS4, UnknownObj)
    External (BHB_, UnknownObj)
    External (BID_, UnknownObj)
    External (DTS1, UnknownObj)
    External (DTS2, UnknownObj)
    External (DTS3, UnknownObj)
    External (DTS4, UnknownObj)
    External (PAMT, IntObj)
    External (PDTS, UnknownObj)

    Scope (\_SB)
    {
        Device (PTID)
        {
            Name (_HID, EisaId ("INT340E") /* Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (IVER, 0x00030000)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (TSDL, Package (0x2A)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "CPU Core VR (IMVP) Temperature", 
                0x03, 
                "Heat Exchanger Fan Temperature", 
                0x03, 
                "Skin Temperature", 
                0x03, 
                "Ambient Temperature", 
                0x02, 
                "Channel 0 DIMM Temperature", 
                0x02, 
                "Channel 1 DIMM Temperature", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TS-on-DIMM0 Temperature", 
                0x02, 
                "TS-on-DIMM1 Temperature", 
                0x02, 
                "TS-on-DIMM2 Temperature", 
                0x02, 
                "TS-on-DIMM3 Temperature", 
                0x02, 
                "TZ00 _TMP", 
                0x02, 
                "TZ01 _TMP"
            })
            Name (PSDL, Package (0x26)
            {
                0x0B, 
                "Platform Power (mW)", 
                0x0B, 
                "Brick Power cW(100ths)", 
                0x0B, 
                "Battery Discharge Power cW(100ths)", 
                0x0B, 
                "Platform Average Power (mW)", 
                0x0B, 
                "Brick Average Power cW(0.01)", 
                0x0B, 
                "Battery Discharge Average Power cW(0.01)", 
                0x0C, 
                "Battery 1 Design Capacity (mWh)", 
                0x0C, 
                "Battery 1 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 1 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 1 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery 2 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 2 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 2 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery Pack 1 maximum power (mW)", 
                0x0C, 
                "Battery Pack 2 maximum power (mW)"
            })
            Name (OSDL, Package (0x0F)
            {
                Zero, 
                "CPU Fan #1 Speed", 
                "RPM", 
                Zero, 
                "CPU Fan #2 Speed", 
                "RPM", 
                0x03, 
                "Skin Temp 0", 
                "RAW", 
                0x03, 
                "Thermistor 1 ", 
                "RAW", 
                0x03, 
                "Thermistor 2 ", 
                "RAW"
            })
            Method (TSDD, 0, NotSerialized)
            {
                Name (TMPV, Package (0x15)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                TMPV [Zero] = ((DTS1 * 0x0A) + 0x0AAC)
                TMPV [One] = ((DTS2 * 0x0A) + 0x0AAC)
                TMPV [0x02] = ((DTS3 * 0x0A) + 0x0AAC)
                TMPV [0x03] = ((DTS4 * 0x0A) + 0x0AAC)
                TMPV [0x04] = ((PDTS * 0x0A) + 0x0AAC)
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.CVRT))) + Zero)
                    TMPV [0x05]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.FANT))) + Zero)
                    TMPV [0x06]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.SKNT))) + Zero)
                    TMPV [0x07]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.AMBT))) + Zero)
                    TMPV [0x08]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.DIM0))) + Zero)
                    TMPV [0x09]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.DIM1))) + Zero)
                    TMPV [0x0A]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.PMAX))) + Zero)
                    TMPV [0x0B]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.PPDT))) + Zero)
                    TMPV [0x0C]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.PECH))) + Zero)
                    TMPV [0x0D]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.PMDT))) + Zero)
                    TMPV [0x0E]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.TSD0))) + Zero)
                    TMPV [0x0F]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.TSD1))) + Zero)
                    TMPV [0x10]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.TSD2))) + Zero)
                    TMPV [0x11]
                     = 0x0AAC = ((0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.TSD3))) + Zero)
                    TMPV [0x12]
                }

                TMPV [0x13] = \_TZ.TZ00._TMP /* External reference */
                If (CondRefOf (\_TZ.TZ01))
                {
                    TMPV [0x14] = \_TZ.TZ01._TMP /* External reference */
                }

                Return (TMPV) /* \_SB_.PTID.TSDD.TMPV */
            }

            Method (PSDD, 0, Serialized)
            {
                Name (PWRV, Package (0x13)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                If ((\_SB.PCI0.LPCB.H_EC.ECRD == RefOf (\_SB.PCI0.LPCB.H_EC.ECAV)))
                {
                    One
                    RefOf (\_SB.PCI0.LPCB.H_EC.CPUP) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [Zero]
                    0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.BPWR))
                    PWRV [One]
                    0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.PPWR))
                    PWRV [0x02]
                    RefOf (\_SB.PCI0.LPCB.H_EC.CPAP) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x03]
                    0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.BKAP))
                    PWRV [0x04]
                    0x0A = (\_SB.PCI0.LPCB.H_EC.ECRD * RefOf (\_SB.PCI0.LPCB.H_EC.PLAP))
                    PWRV [0x05]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B1DC) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x06]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B1RC) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x07]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B1FC) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x08]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B1FV) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x09]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B1DI) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x0A]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B1CI) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x0B]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B2RC) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x0C]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B2FC) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x0D]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B2FV) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x0E]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B2DI) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x0F]
                    RefOf (\_SB.PCI0.LPCB.H_EC.B2CI) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    PWRV [0x10]
                    \_SB.PCI0.LPCB.H_EC.ECRD = ((0x08 = (\_SB.PCI0.LPCB.H_EC.ECRD << RefOf (\_SB.PCI0.LPCB.H_EC.B1MH))) + Zero)
                    RefOf (\_SB.PCI0.LPCB.H_EC.B1ML)
                    Local0
                    If (Local0)
                    {
                        Local0 = ~Local0 |= 0xFFFF0000
                        Local0 = (Local0 += One * 0x0A)
                    }

                    PWRV [0x11] = Local0
                    \_SB.PCI0.LPCB.H_EC.ECRD = ((0x08 = (\_SB.PCI0.LPCB.H_EC.ECRD << RefOf (\_SB.PCI0.LPCB.H_EC.B2MH))) + Zero)
                    RefOf (\_SB.PCI0.LPCB.H_EC.B2ML)
                    Local0
                    If (Local0)
                    {
                        Local0 = ~Local0 |= 0xFFFF0000
                        Local0 = (Local0 += One * 0x0A)
                    }

                    PWRV [0x12] = Local0
                }

                Return (PWRV) /* \_SB_.PTID.PSDD.PWRV */
            }

            Method (OSDD, 0, NotSerialized)
            {
                Name (OSDV, Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                If ((\_SB.PCI0.LPCB.H_EC.ECRD == RefOf (\_SB.PCI0.LPCB.H_EC.ECAV)))
                {
                    One
                    RefOf (\_SB.PCI0.LPCB.H_EC.CFSP) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    OSDV [Zero]
                    If ((((BID == BHB) || (BID == BFS2)) || ((BID == 
                        BFS3) || (BID == BFS4))))
                    {
                        RefOf (\_SB.PCI0.LPCB.H_EC.CFS2) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                        OSDV [One]
                    }

                    RefOf (\_SB.PCI0.LPCB.H_EC.SKNT) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    OSDV [0x02]
                    If ((((BID == BHB) || (BID == BFS2)) || ((BID == 
                        BFS3) || (BID == BFS4))))
                    {
                         = 0x02 = (\_SB.PCI0.LPCB.H_EC.ECRD << RefOf (\_SB.PCI0.LPCB.H_EC.TER1))
                        OSDV [0x03]
                         = 0x02 = (\_SB.PCI0.LPCB.H_EC.ECRD << RefOf (\_SB.PCI0.LPCB.H_EC.TER2))
                        OSDV [0x04]
                    }
                }

                Return (OSDV) /* \_SB_.PTID.OSDD.OSDV */
            }

            Method (SDSP, 0, NotSerialized)
            {
                Return (0x0A)
            }

            Name (PADA, Package (0x0A)
            {
                One, 
                Ones, 
                Ones, 
                0x1A, 
                Ones, 
                Ones, 
                Ones, 
                Ones, 
                Ones, 
                Ones
            })
            Name (PADD, Package (0x0A)
            {
                0x02, 
                0x06A4, 
                0x06A0, 
                0x1A, 
                0x62, 
                0x63, 
                0x60, 
                0x61, 
                0x65, 
                0x64
            })
            Method (PADT, 0, NotSerialized)
            {
                If (PAMT)
                {
                    Return (PADA) /* \_SB_.PTID.PADA */
                }

                Return (PADD) /* \_SB_.PTID.PADD */
            }

            Method (RPMD, 0, NotSerialized)
            {
                Name (MTMP, Buffer (0x1A){})
                If ((\_SB.PCI0.LPCB.H_EC.ECRD == RefOf (\_SB.PCI0.LPCB.H_EC.ECAV)))
                {
                    One
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRCL) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [Zero]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRC0) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [One]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRC1) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x02]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRCM) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x03]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRIN) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x04]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PSTE) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x05]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PCAD) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x06]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEWL) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x07]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PWRL) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x08]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PECD) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x09]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEHI) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x0A]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PECI) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x0B]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEPL) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x0C]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEPM) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x0D]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PWFC) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x0E]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PECC) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x0F]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PDT0) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x10]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PDT1) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x11]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PDT2) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x12]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PDT3) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x13]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRFC) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x14]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRS0) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x15]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRS1) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x16]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRS2) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x17]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRS3) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x18]
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRS4) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    MTMP [0x19]
                }

                Return (MTMP) /* \_SB_.PTID.RPMD.MTMP */
            }

            Method (WPMD, 1, NotSerialized)
            {
                If ((SizeOf (Arg0) != 0x1A))
                {
                    Return (Ones)
                }

                If ((\_SB.PCI0.LPCB.H_EC.ECRD == RefOf (\_SB.PCI0.LPCB.H_EC.ECAV)))
                {
                    One
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [Zero])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRCL)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [One])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRC0)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x02])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRC1)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x03])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRCM)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x04])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRIN)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x05])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PSTE)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x06])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PCAD)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x07])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEWL)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x08])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PWRL)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x09])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PECD)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x0A])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEHI)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x0B])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PECI)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x0C])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEPL)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x0D])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEPM)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x0E])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PWFC)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x0F])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PECC)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x10])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PDT0)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x11])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PDT1)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x12])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PDT2)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x13])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PDT3)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x14])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRFC)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x15])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRS0)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x16])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRS1)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x17])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRS2)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x18])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRS3)
                    \_SB.PCI0.LPCB.H_EC.ECWT ()
                    DerefOf (Arg0 [0x19])
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRS4)
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x67)
                }

                Return (Zero)
            }

            Method (ISPC, 0, NotSerialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECRD == RefOf (\_SB.PCI0.LPCB.H_EC.ECAV)))
                {
                    One
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x65)
                }

                Return (Zero)
            }

            Method (ENPC, 0, NotSerialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECRD == RefOf (\_SB.PCI0.LPCB.H_EC.ECAV)))
                {
                    One
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x66)
                }

                Return (Zero)
            }

            Method (RPCS, 0, NotSerialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECRD == RefOf (\_SB.PCI0.LPCB.H_EC.ECAV)))
                {
                    One
                    RefOf (\_SB.PCI0.LPCB.H_EC.PRCS) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    Local0
                }

                Return (Local0)
            }

            Method (RPEC, 0, NotSerialized)
            {
                Local0 = Zero
                If ((\_SB.PCI0.LPCB.H_EC.ECRD == RefOf (\_SB.PCI0.LPCB.H_EC.ECAV)))
                {
                    One
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEC0) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    Local1
                    Local0 |= Local1
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEC1) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    Local1
                    Local0 |= (Local1 << 0x08)
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEC2) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    Local1
                    Local0 |= (Local1 << 0x10)
                    RefOf (\_SB.PCI0.LPCB.H_EC.PEC3) = \_SB.PCI0.LPCB.H_EC.ECRD /* External reference */
                    Local1
                    Local0 |= (Local1 << 0x18)
                }

                Return (Local0)
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)
    External (PDC0, UnknownObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU1.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU1.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU2.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU2.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU3.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU3.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU4.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU4.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU5.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU5.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU6.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU6.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU7.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU7.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (C3LT, IntObj)
    External (C3MW, IntObj)
    External (C6LT, IntObj)
    External (C6MW, IntObj)
    External (C7LT, IntObj)
    External (C7MW, IntObj)
    External (CDLT, IntObj)
    External (CDLV, IntObj)
    External (CDMW, IntObj)
    External (CDPW, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C3TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001814, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x01F4
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            Zero, 
            Zero
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, Zero)
        Name (AC3V, Zero)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00){}
        })
        Name (CSTF, Zero)
        Name (GEAR, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                C3TM [0x02] = C3LT /* External reference */
                C6TM [0x02] = C6LT /* External reference */
                C7TM [0x02] = C7LT /* External reference */
                CDTM [0x02] = CDLT /* External reference */
                CDTM [0x03] = CDPW /* External reference */
                DerefOf (CDTM [Zero]) [0x07] = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PDC0 & 0x0200)))
                {
                    C1TM [Zero] = MWES /* \_PR_.CPU0.MWES */
                    C3TM [Zero] = MWES /* \_PR_.CPU0.MWES */
                    C6TM [Zero] = MWES /* \_PR_.CPU0.MWES */
                    C7TM [Zero] = MWES /* \_PR_.CPU0.MWES */
                    CDTM [Zero] = MWES /* \_PR_.CPU0.MWES */
                    DerefOf (C3TM [Zero]) [0x07] = C3MW /* External reference */
                    DerefOf (C6TM [Zero]) [0x07] = C6MW /* External reference */
                    DerefOf (C7TM [Zero]) [0x07] = C7MW /* External reference */
                    DerefOf (CDTM [Zero]) [0x07] = CDMW /* External reference */
                }
                ElseIf (((CFGD & 0x0800) && (PDC0 & 0x0100)))
                {
                    C1TM [Zero] = MWES /* \_PR_.CPU0.MWES */
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            C3ST [One] = C1TM /* \_PR_.CPU0.C1TM */
            If ((CFGD & 0x20))
            {
                C3ST [0x02] = C7TM /* \_PR_.CPU0.C7TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x10))
            {
                C3ST [0x02] = C6TM /* \_PR_.CPU0.C6TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x08))
            {
                C3ST [0x02] = C3TM /* \_PR_.CPU0.C3TM */
                AC2V = Ones
            }

            If ((CFGD & 0x4000))
            {
                C3ST [0x03] = CDTM /* \_PR_.CPU0.CDTM */
                AC3V = Ones
            }

            If ((GEAR == One))
            {
                If ((CFGD & 0x08))
                {
                    C3ST [0x02] = C3TM /* \_PR_.CPU0.C3TM */
                    AC2V = Ones
                    AC3V = Zero
                }
                Else
                {
                    AC2V = Zero
                    AC3V = Zero
                }
            }

            If ((GEAR == 0x02))
            {
                AC2V = Zero
                AC3V = Zero
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_PR_.CPU0.C3ST */
            }
            ElseIf (AC2V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x02])
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            ElseIf (AC3V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x03])
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            Else
            {
                C1ST [One] = DerefOf (C3ST [One])
                Return (C1ST) /* \_PR_.CPU0.C1ST */
            }
        }
    }
}



UEFI
----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00001036
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : DB
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 010h]             UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 4150 (0x1036)

    0000: 55 45 46 49 36 10 00 00 01 DB 54 4F 53 49 4E 56  // UEFI6.....TOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  // ....5.K.t..G....
    0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 00 00 00 24  // .u.{6.$BVDT$...$
    0040: 00 00 00 24 31 2E 31 30 00 00 00 00 00 00 00 00  // ...$1.10........
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 24 41 52 49  // ............$ARI
    0060: 4F 4E 5F 53 00 00 00 00 00 00 00 00 00 00 00 00  // ON_S............
    0070: 00 00 00 00 00 00 24 30 33 2E 37 33 2E 30 36 00  // ......$03.73.06.
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  // ................
    00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0160: FF FF FF FF FF 24 42 4D 45 24 00 70 3C 00 00 10  // .....$BME$.p<...
    0170: 00 00 24 00 10 3A 00 00 10 02 00 24 01 00 10 00  // ..$..:.....$....
    0180: 00 00 70 01 00 24 5F 4D 53 43 5F 56 45 52 3D 00  // ..p..$_MSC_VER=.
    0190: 00 24 52 44 41 54 45 0E 04 1D 72 01 00 00 24 45  // .$RDATE...r...$E
    01A0: 4E 44 4F 46 42 56 44 54 FF FF FF FF FF FF FF FF  // NDOFBVDT........
    01B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0230: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0240: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0250: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0260: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0270: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0280: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0290: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    02A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    02B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    02C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    02D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    02E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    02F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0300: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0310: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0320: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0330: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0340: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0350: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0360: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0370: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0380: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0390: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    03A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    03B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    03C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    03D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    03E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    03F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0400: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0410: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0420: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0430: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0440: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0450: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0460: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0470: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0480: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0490: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    04A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    04B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    04C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    04D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    04E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    04F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0500: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0510: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0520: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0530: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0540: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0550: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0560: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0570: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0580: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0590: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    05A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    05B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    05C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    05D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    05E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    05F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0600: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0610: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0620: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0630: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0640: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0650: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0660: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0670: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0680: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0690: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    06A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    06B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    06C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    06D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    06E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    06F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0700: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0710: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0720: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0730: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0740: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0750: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0760: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0770: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0780: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0790: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    07A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    07B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    07C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    07D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    07E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    07F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0800: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0810: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0820: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0830: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0840: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0850: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0860: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0870: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0880: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0890: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    08A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    08B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    08C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    08D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    08E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    08F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0900: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0910: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0920: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0930: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0940: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0950: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0960: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0970: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0980: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0990: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    09A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    09B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    09C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    09D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    09E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    09F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0A00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0A10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0A20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0A30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0A40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0A50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0A60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0A70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0A80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0A90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0AA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0AB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0AC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0AD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0AE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0AF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0B00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0B10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0B20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0B30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0B40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0B50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0B60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0B70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0B80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0B90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0BA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0BB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0BC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0BD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0BE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0BF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0C00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0C10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0C20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0C30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0C40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0C50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0C60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0C70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0C80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0C90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0CA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0CB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0CC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0CD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0CE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0CF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0D90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0DA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0DB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0DC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0DD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0DE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0DF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0E00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0E10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0E20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0E30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0E40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0E50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0E60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0E70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0E80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0E90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0EA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0EB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0EC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0ED0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0EE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0EF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0F00: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0F10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0F20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0F30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0F40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0F50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0F60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0F70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0F80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0F90: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0FA0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0FB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0FC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0FD0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0FE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0FF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    1000: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    1010: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    1020: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    1030: FF FF FF FF FF FF                                // ......


WDAT
----
[000h 0000 004h]                   Signature : "WDAT"    [Watchdog Action Table]
[004h 0004 004h]                Table Length : 00000224
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 8F
[00Ah 0010 006h]                      Oem ID : "TOSINV"
[010h 0016 008h]                Oem Table ID : "TOSINV00"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "ACPI"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]               Header Length : 00000020
[028h 0040 002h]                 PCI Segment : 00FF
[02Ah 0042 001h]                     PCI Bus : FF
[02Bh 0043 001h]                  PCI Device : FF
[02Ch 0044 001h]                PCI Function : FF
[02Dh 0045 003h]                    Reserved : 000000
[030h 0048 004h]                Timer Period : 00000258
[034h 0052 004h]                   Max Count : 000003FF
[038h 0056 004h]                   Min Count : 00000002
[03Ch 0060 001h]       Flags (decoded below) : 81
                                     Enabled : 1
                         Stopped When Asleep : 1
[03Dh 0061 003h]                    Reserved : 000000
[040h 0064 004h]        Watchdog Entry Count : 00000014

[044h 0068 001h]             Watchdog Action : 01
[045h 0069 001h]                 Instruction : 02
[046h 0070 002h]                    Reserved : 0000

[048h 0072 00Ch]             Register Region : [Generic Address Structure]
[048h 0072 001h]                    Space ID : 01 [SystemIO]
[049h 0073 001h]                   Bit Width : 10
[04Ah 0074 001h]                  Bit Offset : 00
[04Bh 0075 001h]        Encoded Access Width : 02 [Word Access:16]
[04Ch 0076 008h]                     Address : 0000000000001860

[054h 0084 004h]                       Value : 00000000
[058h 0088 004h]               Register Mask : 000003FF

[05Ch 0092 001h]             Watchdog Action : 04
[05Dh 0093 001h]                 Instruction : 01
[05Eh 0094 002h]                    Reserved : 0000

[060h 0096 00Ch]             Register Region : [Generic Address Structure]
[060h 0096 001h]                    Space ID : 01 [SystemIO]
[061h 0097 001h]                   Bit Width : 10
[062h 0098 001h]                  Bit Offset : 00
[063h 0099 001h]        Encoded Access Width : 02 [Word Access:16]
[064h 0100 008h]                     Address : 0000000000001860

[06Ch 0108 004h]                       Value : 00000000
[070h 0112 004h]               Register Mask : 000003FF

[074h 0116 001h]             Watchdog Action : 05
[075h 0117 001h]                 Instruction : 01
[076h 0118 002h]                    Reserved : 0000

[078h 0120 00Ch]             Register Region : [Generic Address Structure]
[078h 0120 001h]                    Space ID : 01 [SystemIO]
[079h 0121 001h]                   Bit Width : 10
[07Ah 0122 001h]                  Bit Offset : 00
[07Bh 0123 001h]        Encoded Access Width : 02 [Word Access:16]
[07Ch 0124 008h]                     Address : 0000000000001872

[084h 0132 004h]                       Value : 00000000
[088h 0136 004h]               Register Mask : 000003FF

[08Ch 0140 001h]             Watchdog Action : 06
[08Dh 0141 001h]                 Instruction : 83
[08Eh 0142 002h]                    Reserved : 0000

[090h 0144 00Ch]             Register Region : [Generic Address Structure]
[090h 0144 001h]                    Space ID : 01 [SystemIO]
[091h 0145 001h]                   Bit Width : 10
[092h 0146 001h]                  Bit Offset : 00
[093h 0147 001h]        Encoded Access Width : 02 [Word Access:16]
[094h 0148 008h]                     Address : 0000000000001872

[09Ch 0156 004h]                       Value : 00000000
[0A0h 0160 004h]               Register Mask : 000003FF

[0A4h 0164 001h]             Watchdog Action : 08
[0A5h 0165 001h]                 Instruction : 00
[0A6h 0166 002h]                    Reserved : 0000

[0A8h 0168 00Ch]             Register Region : [Generic Address Structure]
[0A8h 0168 001h]                    Space ID : 01 [SystemIO]
[0A9h 0169 001h]                   Bit Width : 10
[0AAh 0170 001h]                  Bit Offset : 0B
[0ABh 0171 001h]        Encoded Access Width : 02 [Word Access:16]
[0ACh 0172 008h]                     Address : 0000000000001868

[0B4h 0180 004h]                       Value : 00000000
[0B8h 0184 004h]               Register Mask : 00000001

[0BCh 0188 001h]             Watchdog Action : 09
[0BDh 0189 001h]                 Instruction : 82
[0BEh 0190 002h]                    Reserved : 0000

[0C0h 0192 00Ch]             Register Region : [Generic Address Structure]
[0C0h 0192 001h]                    Space ID : 01 [SystemIO]
[0C1h 0193 001h]                   Bit Width : 10
[0C2h 0194 001h]                  Bit Offset : 00
[0C3h 0195 001h]        Encoded Access Width : 02 [Word Access:16]
[0C4h 0196 008h]                     Address : 0000000000001868

[0CCh 0204 004h]                       Value : 00000000
[0D0h 0208 004h]               Register Mask : 00000800

[0D4h 0212 001h]             Watchdog Action : 09
[0D5h 0213 001h]                 Instruction : 02
[0D6h 0214 002h]                    Reserved : 0000

[0D8h 0216 00Ch]             Register Region : [Generic Address Structure]
[0D8h 0216 001h]                    Space ID : 01 [SystemIO]
[0D9h 0217 001h]                   Bit Width : 08
[0DAh 0218 001h]                  Bit Offset : 00
[0DBh 0219 001h]        Encoded Access Width : 01 [Byte Access:8]
[0DCh 0220 008h]                     Address : 0000000000000070

[0E4h 0228 004h]                       Value : 00000045
[0E8h 0232 004h]               Register Mask : 000000FF

[0ECh 0236 001h]             Watchdog Action : 09
[0EDh 0237 001h]                 Instruction : 82
[0EEh 0238 002h]                    Reserved : 0000

[0F0h 0240 00Ch]             Register Region : [Generic Address Structure]
[0F0h 0240 001h]                    Space ID : 01 [SystemIO]
[0F1h 0241 001h]                   Bit Width : 08
[0F2h 0242 001h]                  Bit Offset : 00
[0F3h 0243 001h]        Encoded Access Width : 01 [Byte Access:8]
[0F4h 0244 008h]                     Address : 0000000000000071

[0FCh 0252 004h]                       Value : 00000001
[100h 0256 004h]               Register Mask : 00000001

[104h 0260 001h]             Watchdog Action : 0A
[105h 0261 001h]                 Instruction : 00
[106h 0262 002h]                    Reserved : 0000

[108h 0264 00Ch]             Register Region : [Generic Address Structure]
[108h 0264 001h]                    Space ID : 01 [SystemIO]
[109h 0265 001h]                   Bit Width : 10
[10Ah 0266 001h]                  Bit Offset : 0B
[10Bh 0267 001h]        Encoded Access Width : 02 [Word Access:16]
[10Ch 0268 008h]                     Address : 0000000000001868

[114h 0276 004h]                       Value : 00000001
[118h 0280 004h]               Register Mask : 00000001

[11Ch 0284 001h]             Watchdog Action : 0B
[11Dh 0285 001h]                 Instruction : 82
[11Eh 0286 002h]                    Reserved : 0000

[120h 0288 00Ch]             Register Region : [Generic Address Structure]
[120h 0288 001h]                    Space ID : 01 [SystemIO]
[121h 0289 001h]                   Bit Width : 10
[122h 0290 001h]                  Bit Offset : 00
[123h 0291 001h]        Encoded Access Width : 02 [Word Access:16]
[124h 0292 008h]                     Address : 0000000000001868

[12Ch 0300 004h]                       Value : 00000800
[130h 0304 004h]               Register Mask : 00000800

[134h 0308 001h]             Watchdog Action : 0B
[135h 0309 001h]                 Instruction : 02
[136h 0310 002h]                    Reserved : 0000

[138h 0312 00Ch]             Register Region : [Generic Address Structure]
[138h 0312 001h]                    Space ID : 01 [SystemIO]
[139h 0313 001h]                   Bit Width : 08
[13Ah 0314 001h]                  Bit Offset : 00
[13Bh 0315 001h]        Encoded Access Width : 01 [Byte Access:8]
[13Ch 0316 008h]                     Address : 0000000000000070

[144h 0324 004h]                       Value : 00000045
[148h 0328 004h]               Register Mask : 000000FF

[14Ch 0332 001h]             Watchdog Action : 0B
[14Dh 0333 001h]                 Instruction : 82
[14Eh 0334 002h]                    Reserved : 0000

[150h 0336 00Ch]             Register Region : [Generic Address Structure]
[150h 0336 001h]                    Space ID : 01 [SystemIO]
[151h 0337 001h]                   Bit Width : 08
[152h 0338 001h]                  Bit Offset : 00
[153h 0339 001h]        Encoded Access Width : 01 [Byte Access:8]
[154h 0340 008h]                     Address : 0000000000000071

[15Ch 0348 004h]                       Value : 00000000
[160h 0352 004h]               Register Mask : 00000001

[164h 0356 001h]             Watchdog Action : 10
[165h 0357 001h]                 Instruction : 00
[166h 0358 002h]                    Reserved : 0000

[168h 0360 00Ch]             Register Region : [Generic Address Structure]
[168h 0360 001h]                    Space ID : 01 [SystemIO]
[169h 0361 001h]                   Bit Width : 08
[16Ah 0362 001h]                  Bit Offset : 04
[16Bh 0363 001h]        Encoded Access Width : 01 [Byte Access:8]
[16Ch 0364 008h]                     Address : 000000000000186A

[174h 0372 004h]                       Value : 00000000
[178h 0376 004h]               Register Mask : 00000003

[17Ch 0380 001h]             Watchdog Action : 11
[17Dh 0381 001h]                 Instruction : 82
[17Eh 0382 002h]                    Reserved : 0000

[180h 0384 00Ch]             Register Region : [Generic Address Structure]
[180h 0384 001h]                    Space ID : 01 [SystemIO]
[181h 0385 001h]                   Bit Width : 10
[182h 0386 001h]                  Bit Offset : 00
[183h 0387 001h]        Encoded Access Width : 02 [Word Access:16]
[184h 0388 008h]                     Address : 000000000000186A

[18Ch 0396 004h]                       Value : 00000000
[190h 0400 004h]               Register Mask : 00000030

[194h 0404 001h]             Watchdog Action : 12
[195h 0405 001h]                 Instruction : 00
[196h 0406 002h]                    Reserved : 0000

[198h 0408 00Ch]             Register Region : [Generic Address Structure]
[198h 0408 001h]                    Space ID : 01 [SystemIO]
[199h 0409 001h]                   Bit Width : 08
[19Ah 0410 001h]                  Bit Offset : 04
[19Bh 0411 001h]        Encoded Access Width : 01 [Byte Access:8]
[19Ch 0412 008h]                     Address : 000000000000186A

[1A4h 0420 004h]                       Value : 00000001
[1A8h 0424 004h]               Register Mask : 00000003

[1ACh 0428 001h]             Watchdog Action : 13
[1ADh 0429 001h]                 Instruction : 82
[1AEh 0430 002h]                    Reserved : 0000

[1B0h 0432 00Ch]             Register Region : [Generic Address Structure]
[1B0h 0432 001h]                    Space ID : 01 [SystemIO]
[1B1h 0433 001h]                   Bit Width : 10
[1B2h 0434 001h]                  Bit Offset : 00
[1B3h 0435 001h]        Encoded Access Width : 02 [Word Access:16]
[1B4h 0436 008h]                     Address : 000000000000186A

[1BCh 0444 004h]                       Value : 00000010
[1C0h 0448 004h]               Register Mask : 00000030

[1C4h 0452 001h]             Watchdog Action : 20
[1C5h 0453 001h]                 Instruction : 02
[1C6h 0454 002h]                    Reserved : 0000

[1C8h 0456 00Ch]             Register Region : [Generic Address Structure]
[1C8h 0456 001h]                    Space ID : 01 [SystemIO]
[1C9h 0457 001h]                   Bit Width : 08
[1CAh 0458 001h]                  Bit Offset : 00
[1CBh 0459 001h]        Encoded Access Width : 01 [Byte Access:8]
[1CCh 0460 008h]                     Address : 0000000000000070

[1D4h 0468 004h]                       Value : 00000045
[1D8h 0472 004h]               Register Mask : 000000FF

[1DCh 0476 001h]             Watchdog Action : 20
[1DDh 0477 001h]                 Instruction : 00
[1DEh 0478 002h]                    Reserved : 0000

[1E0h 0480 00Ch]             Register Region : [Generic Address Structure]
[1E0h 0480 001h]                    Space ID : 01 [SystemIO]
[1E1h 0481 001h]                   Bit Width : 08
[1E2h 0482 001h]                  Bit Offset : 00
[1E3h 0483 001h]        Encoded Access Width : 01 [Byte Access:8]
[1E4h 0484 008h]                     Address : 0000000000000071

[1ECh 0492 004h]                       Value : 00000001
[1F0h 0496 004h]               Register Mask : 00000001

[1F4h 0500 001h]             Watchdog Action : 21
[1F5h 0501 001h]                 Instruction : 02
[1F6h 0502 002h]                    Reserved : 0000

[1F8h 0504 00Ch]             Register Region : [Generic Address Structure]
[1F8h 0504 001h]                    Space ID : 01 [SystemIO]
[1F9h 0505 001h]                   Bit Width : 08
[1FAh 0506 001h]                  Bit Offset : 00
[1FBh 0507 001h]        Encoded Access Width : 01 [Byte Access:8]
[1FCh 0508 008h]                     Address : 0000000000000070

[204h 0516 004h]                       Value : 00000045
[208h 0520 004h]               Register Mask : 000000FF

[20Ch 0524 001h]             Watchdog Action : 21
[20Dh 0525 001h]                 Instruction : 82
[20Eh 0526 002h]                    Reserved : 0000

[210h 0528 00Ch]             Register Region : [Generic Address Structure]
[210h 0528 001h]                    Space ID : 01 [SystemIO]
[211h 0529 001h]                   Bit Width : 08
[212h 0530 001h]                  Bit Offset : 00
[213h 0531 001h]        Encoded Access Width : 01 [Byte Access:8]
[214h 0532 008h]                     Address : 0000000000000071

[21Ch 0540 004h]                       Value : 00000000
[220h 0544 004h]               Register Mask : 00000001

Raw Table Data: Length 548 (0x224)

    0000: 57 44 41 54 24 02 00 00 01 8F 54 4F 53 49 4E 56  // WDAT$.....TOSINV
    0010: 54 4F 53 49 4E 56 30 30 01 00 00 00 41 43 50 49  // TOSINV00....ACPI
    0020: 00 00 04 00 20 00 00 00 FF 00 FF FF FF 00 00 00  // .... ...........
    0030: 58 02 00 00 FF 03 00 00 02 00 00 00 81 00 00 00  // X...............
    0040: 14 00 00 00 01 02 00 00 01 10 00 02 60 18 00 00  // ............`...
    0050: 00 00 00 00 00 00 00 00 FF 03 00 00 04 01 00 00  // ................
    0060: 01 10 00 02 60 18 00 00 00 00 00 00 00 00 00 00  // ....`...........
    0070: FF 03 00 00 05 01 00 00 01 10 00 02 72 18 00 00  // ............r...
    0080: 00 00 00 00 00 00 00 00 FF 03 00 00 06 83 00 00  // ................
    0090: 01 10 00 02 72 18 00 00 00 00 00 00 00 00 00 00  // ....r...........
    00A0: FF 03 00 00 08 00 00 00 01 10 0B 02 68 18 00 00  // ............h...
    00B0: 00 00 00 00 00 00 00 00 01 00 00 00 09 82 00 00  // ................
    00C0: 01 10 00 02 68 18 00 00 00 00 00 00 00 00 00 00  // ....h...........
    00D0: 00 08 00 00 09 02 00 00 01 08 00 01 70 00 00 00  // ............p...
    00E0: 00 00 00 00 45 00 00 00 FF 00 00 00 09 82 00 00  // ....E...........
    00F0: 01 08 00 01 71 00 00 00 00 00 00 00 01 00 00 00  // ....q...........
    0100: 01 00 00 00 0A 00 00 00 01 10 0B 02 68 18 00 00  // ............h...
    0110: 00 00 00 00 01 00 00 00 01 00 00 00 0B 82 00 00  // ................
    0120: 01 10 00 02 68 18 00 00 00 00 00 00 00 08 00 00  // ....h...........
    0130: 00 08 00 00 0B 02 00 00 01 08 00 01 70 00 00 00  // ............p...
    0140: 00 00 00 00 45 00 00 00 FF 00 00 00 0B 82 00 00  // ....E...........
    0150: 01 08 00 01 71 00 00 00 00 00 00 00 00 00 00 00  // ....q...........
    0160: 01 00 00 00 10 00 00 00 01 08 04 01 6A 18 00 00  // ............j...
    0170: 00 00 00 00 00 00 00 00 03 00 00 00 11 82 00 00  // ................
    0180: 01 10 00 02 6A 18 00 00 00 00 00 00 00 00 00 00  // ....j...........
    0190: 30 00 00 00 12 00 00 00 01 08 04 01 6A 18 00 00  // 0...........j...
    01A0: 00 00 00 00 01 00 00 00 03 00 00 00 13 82 00 00  // ................
    01B0: 01 10 00 02 6A 18 00 00 00 00 00 00 10 00 00 00  // ....j...........
    01C0: 30 00 00 00 20 02 00 00 01 08 00 01 70 00 00 00  // 0... .......p...
    01D0: 00 00 00 00 45 00 00 00 FF 00 00 00 20 00 00 00  // ....E....... ...
    01E0: 01 08 00 01 71 00 00 00 00 00 00 00 01 00 00 00  // ....q...........
    01F0: 01 00 00 00 21 02 00 00 01 08 00 01 70 00 00 00  // ....!.......p...
    0200: 00 00 00 00 45 00 00 00 FF 00 00 00 21 82 00 00  // ....E.......!...
    0210: 01 08 00 01 71 00 00 00 00 00 00 00 00 00 00 00  // ....q...........
    0220: 01 00 00 00                                      // ....


