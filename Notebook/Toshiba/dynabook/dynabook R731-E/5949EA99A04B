
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20200110
Copyright (c) 2000 - 2020 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000007E5  0x01  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20061109
 02)  MCFG  0x0000003C  0x01  "TOSHIB"  "A007D   "  0x00000001  "LOHR"   0x0000005F
 03)  ASF!  0x000000A0  0x20  "TOSHIB"  "A007D   "  0x00000001  "LOHR"   0x0000005F
 04)  APIC  0x000000BC  0x01  "TOSHIB"  "A007D   "  0x00000001  "LOHR"   0x0000005F
 05)  SLIC  0x00000176  0x01  "TOSHIB"  "A007D   "  0x00000000  "LOHR"   0x0000005F
 06)  SSDT  0x00000671  0x01  "TOSHIB"  "SataSec "  0x00001000  "INTL"   0x20061109
 07)  BOOT  0x00000028  0x01  "TOSHIB"  "A007D   "  0x00000000  "LOHR"   0x0000005F
 08)  DSDT  0x00008A46  0x02  "TOSHIB"  "A007D   "  0x20111220  "INTL"   0x20061109
 09)  SSDT  0x00000996  0x01  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20061109
 10)  SSDT  0x00000720  0x01  "TOSHIB"  "PtidDevc"  0x00001000  "INTL"   0x20061109
 11)  DMAR  0x00000110  0x01  "INTEL "  "SNB     "  0x00000001  "INTL"   0x00000001
 12)  FACP  0x00000081  0x02  "TOSHIB"  "A007D   "  0x00000003  "LOHR"   0x0000005F
 13)  SSDT  0x00000694  0x01  "TOSHIB"  "SataPri "  0x00001000  "INTL"   0x20061109
 14)  TCPA  0x00000032  0x02  "TOSHIB"  "A007D   "  0x00000000  "LOHR"   0x0000005F
 15)  HPET  0x00000038  0x01  "TOSHIB"  "A007D   "  0x00000001  "LOHR"   0x0000005F
 16)  FACS  0x00000040  0x01
 17)  SSDT  0x00000303  0x01  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20061109
 18)  SSDT  0x00000119  0x01  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20061109
 19)  SSDT  0x0000071E  0x01  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20061109

Found 19 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 000000BC
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A007D   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 00
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 00
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 00
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 00
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 01 [I/O APIC]
[06Dh 0109   1]                       Length : 0C
[06Eh 0110   1]                  I/O Apic ID : 02
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]                      Address : FEC00000
[074h 0116   4]                    Interrupt : 00000000

[078h 0120   1]                Subtable Type : 02 [Interrupt Source Override]
[079h 0121   1]                       Length : 0A
[07Ah 0122   1]                          Bus : 00
[07Bh 0123   1]                       Source : 00
[07Ch 0124   4]                    Interrupt : 00000002
[080h 0128   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[082h 0130   1]                Subtable Type : 02 [Interrupt Source Override]
[083h 0131   1]                       Length : 0A
[084h 0132   1]                          Bus : 00
[085h 0133   1]                       Source : 09
[086h 0134   4]                    Interrupt : 00000009
[08Ah 0138   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[08Ch 0140   1]                Subtable Type : 04 [Local APIC NMI]
[08Dh 0141   1]                       Length : 06
[08Eh 0142   1]                 Processor ID : 00
[08Fh 0143   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[091h 0145   1]         Interrupt Input LINT : 01

[092h 0146   1]                Subtable Type : 04 [Local APIC NMI]
[093h 0147   1]                       Length : 06
[094h 0148   1]                 Processor ID : 01
[095h 0149   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[097h 0151   1]         Interrupt Input LINT : 01

[098h 0152   1]                Subtable Type : 04 [Local APIC NMI]
[099h 0153   1]                       Length : 06
[09Ah 0154   1]                 Processor ID : 02
[09Bh 0155   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[09Dh 0157   1]         Interrupt Input LINT : 01

[09Eh 0158   1]                Subtable Type : 04 [Local APIC NMI]
[09Fh 0159   1]                       Length : 06
[0A0h 0160   1]                 Processor ID : 03
[0A1h 0161   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A3h 0163   1]         Interrupt Input LINT : 01

[0A4h 0164   1]                Subtable Type : 04 [Local APIC NMI]
[0A5h 0165   1]                       Length : 06
[0A6h 0166   1]                 Processor ID : 04
[0A7h 0167   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A9h 0169   1]         Interrupt Input LINT : 01

[0AAh 0170   1]                Subtable Type : 04 [Local APIC NMI]
[0ABh 0171   1]                       Length : 06
[0ACh 0172   1]                 Processor ID : 05
[0ADh 0173   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0AFh 0175   1]         Interrupt Input LINT : 01

[0B0h 0176   1]                Subtable Type : 04 [Local APIC NMI]
[0B1h 0177   1]                       Length : 06
[0B2h 0178   1]                 Processor ID : 06
[0B3h 0179   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0B5h 0181   1]         Interrupt Input LINT : 01

[0B6h 0182   1]                Subtable Type : 04 [Local APIC NMI]
[0B7h 0183   1]                       Length : 06
[0B8h 0184   1]                 Processor ID : 07
[0B9h 0185   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0BBh 0187   1]         Interrupt Input LINT : 01

Raw Table Data: Length 188 (0xBC)

    0000: 41 50 49 43 BC 00 00 00 01 65 54 4F 53 48 49 42  // APIC.....eTOSHIB
    0010: 41 30 30 37 44 20 20 20 01 00 00 00 4C 4F 48 52  // A007D   ....LOHR
    0020: 5F 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // _...............
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 00  // ................
    0050: 00 00 00 00 00 08 05 00 00 00 00 00 00 08 06 00  // ................
    0060: 00 00 00 00 00 08 07 00 00 00 00 00 01 0C 02 00  // ................
    0070: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0080: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 00 05  // ................
    0090: 00 01 04 06 01 05 00 01 04 06 02 05 00 01 04 06  // ................
    00A0: 03 05 00 01 04 06 04 05 00 01 04 06 05 05 00 01  // ................
    00B0: 04 06 06 05 00 01 04 06 07 05 00 01              // ............


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 000000A0
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 9F
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A007D   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : FF
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 89
[03Dh 0061   1]                      Command : 04
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 05
[041h 0065   1]                         Type : 6F
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 68
[044h 0068   1]                     Severity : 08
[045h 0069   1]                 SensorNumber : 88
[046h 0070   1]                       Entity : 17
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 89
[049h 0073   1]                      Command : 04
[04Ah 0074   1]                         Mask : 04
[04Bh 0075   1]                        Value : 04
[04Ch 0076   1]                   SensorType : 07
[04Dh 0077   1]                         Type : 6F
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 68
[050h 0080   1]                     Severity : 20
[051h 0081   1]                 SensorNumber : 88
[052h 0082   1]                       Entity : 03
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 89
[055h 0085   1]                      Command : 05
[056h 0086   1]                         Mask : 01
[057h 0087   1]                        Value : 01
[058h 0088   1]                   SensorType : 19
[059h 0089   1]                         Type : 6F
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 68
[05Ch 0092   1]                     Severity : 20
[05Dh 0093   1]                 SensorNumber : 88
[05Eh 0094   1]                       Entity : 22
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 88
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 03

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 88
[06Eh 0110   1]                      Command : 00
[06Fh 0111   1]                        Value : 02

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 88
[072h 0114   1]                      Command : 00
[073h 0115   1]                        Value : 01

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 88
[076h 0118   1]                      Command : 00
[077h 0119   1]                        Value : 04

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 20 70 00 00 00 13 F0
[083h 0131   1]              Completion Code : 00
[084h 0132   4]                Enterprise ID : 00000000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0000
[08Bh 0139   2]                 Boot Options : 0000
[08Dh 0141   2]               Oem Parameters : 0000

[08Fh 0143   1]                Subtable Type : 84 [ASF Address]
[090h 0144   1]                     Reserved : 00
[091h 0145   2]                       Length : 0011
[093h 0147   1]                Eprom Address : 00
[094h 0148   1]                 Device Count : 0B
[095h 0149   1]                    Addresses : 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8 


Raw Table Data: Length 160 (0xA0)

    0000: 41 53 46 21 A0 00 00 00 20 9F 54 4F 53 48 49 42  // ASF!.... .TOSHIB
    0010: 41 30 30 37 44 20 20 20 01 00 00 00 4C 4F 48 52  // A007D   ....LOHR
    0020: 5F 00 00 00 00 00 10 00 FF FF 01 00 00 00 01 57  // _..............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  // ......,.........
    0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  // .o.h.........o.h
    0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00  //  ........o.h .".
    0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  // ................
    0070: 02 88 00 01 03 88 00 04 03 00 17 00 20 70 00 00  // ............ p..
    0080: 00 13 F0 00 00 00 00 00 00 00 00 00 00 00 00 84  // ................
    0090: 00 11 00 00 0B 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8  // .....\h.........


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4E
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A007D   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   1]          Boot Register Index : 7C
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 4E 54 4F 53 48 49 42  // BOOT(....NTOSHIB
    0010: 41 30 30 37 44 20 20 20 00 00 00 00 4C 4F 48 52  // A007D   ....LOHR
    0020: 5F 00 00 00 7C 00 00 00                          // _...|...


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 00000110
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : ED
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "SNB "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "INTL"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   1]           Host Address Width : 23
[025h 0037   1]                        Flags : 01
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0018

[034h 0052   1]                        Flags : 00
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FED90000

[040h 0064   1]            Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 00
[045h 0069   1]               PCI Bus Number : 00

[046h 0070   2]                     PCI Path : 02,00


[048h 0072   2]                Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074   2]                       Length : 0058

[04Ch 0076   1]                        Flags : 01
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]           PCI Segment Number : 0000
[050h 0080   8]        Register Base Address : 00000000FED91000

[058h 0088   1]            Device Scope Type : 03 [IOAPIC Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 02
[05Dh 0093   1]               PCI Bus Number : FA

[05Eh 0094   2]                     PCI Path : 1F,00


[060h 0096   1]            Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097   1]                 Entry Length : 08
[062h 0098   2]                     Reserved : 0000
[064h 0100   1]               Enumeration ID : 00
[065h 0101   1]               PCI Bus Number : FA

[066h 0102   2]                     PCI Path : 0F,00


[068h 0104   1]            Device Scope Type : 04 [Message-capable HPET Device]
[069h 0105   1]                 Entry Length : 08
[06Ah 0106   2]                     Reserved : 0000
[06Ch 0108   1]               Enumeration ID : 00
[06Dh 0109   1]               PCI Bus Number : FA

[06Eh 0110   2]                     PCI Path : 0F,01


[070h 0112   1]            Device Scope Type : 04 [Message-capable HPET Device]
[071h 0113   1]                 Entry Length : 08
[072h 0114   2]                     Reserved : 0000
[074h 0116   1]               Enumeration ID : 00
[075h 0117   1]               PCI Bus Number : FA

[076h 0118   2]                     PCI Path : 0F,02


[078h 0120   1]            Device Scope Type : 04 [Message-capable HPET Device]
[079h 0121   1]                 Entry Length : 08
[07Ah 0122   2]                     Reserved : 0000
[07Ch 0124   1]               Enumeration ID : 00
[07Dh 0125   1]               PCI Bus Number : FA

[07Eh 0126   2]                     PCI Path : 0F,03


[080h 0128   1]            Device Scope Type : 04 [Message-capable HPET Device]
[081h 0129   1]                 Entry Length : 08
[082h 0130   2]                     Reserved : 0000
[084h 0132   1]               Enumeration ID : 00
[085h 0133   1]               PCI Bus Number : FA

[086h 0134   2]                     PCI Path : 0F,04


[088h 0136   1]            Device Scope Type : 04 [Message-capable HPET Device]
[089h 0137   1]                 Entry Length : 08
[08Ah 0138   2]                     Reserved : 0000
[08Ch 0140   1]               Enumeration ID : 00
[08Dh 0141   1]               PCI Bus Number : FA

[08Eh 0142   2]                     PCI Path : 0F,05


[090h 0144   1]            Device Scope Type : 04 [Message-capable HPET Device]
[091h 0145   1]                 Entry Length : 08
[092h 0146   2]                     Reserved : 0000
[094h 0148   1]               Enumeration ID : 00
[095h 0149   1]               PCI Bus Number : FA

[096h 0150   2]                     PCI Path : 0F,06


[098h 0152   1]            Device Scope Type : 04 [Message-capable HPET Device]
[099h 0153   1]                 Entry Length : 08
[09Ah 0154   2]                     Reserved : 0000
[09Ch 0156   1]               Enumeration ID : 00
[09Dh 0157   1]               PCI Bus Number : FA

[09Eh 0158   2]                     PCI Path : 0F,07


[0A0h 0160   2]                Subtable Type : 0001 [Reserved Memory Region]
[0A2h 0162   2]                       Length : 0028

[0A4h 0164   2]                     Reserved : 0000
[0A6h 0166   2]           PCI Segment Number : 0000
[0A8h 0168   8]                 Base Address : 00000000000E0000
[0B0h 0176   8]          End Address (limit) : 00000000000E7FFF

[0B8h 0184   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0B9h 0185   1]                 Entry Length : 08
[0BAh 0186   2]                     Reserved : 0000
[0BCh 0188   1]               Enumeration ID : 00
[0BDh 0189   1]               PCI Bus Number : 00

[0BEh 0190   2]                     PCI Path : 1D,00


[0C0h 0192   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0C1h 0193   1]                 Entry Length : 08
[0C2h 0194   2]                     Reserved : 0000
[0C4h 0196   1]               Enumeration ID : 00
[0C5h 0197   1]               PCI Bus Number : 00

[0C6h 0198   2]                     PCI Path : 1A,00


[0C8h 0200   2]                Subtable Type : 0001 [Reserved Memory Region]
[0CAh 0202   2]                       Length : 0028

[0CCh 0204   2]                     Reserved : 0000
[0CEh 0206   2]           PCI Segment Number : 0000
[0D0h 0208   8]                 Base Address : 00000000AAE44000
[0D8h 0216   8]          End Address (limit) : 00000000AAE63FFF

[0E0h 0224   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0E1h 0225   1]                 Entry Length : 08
[0E2h 0226   2]                     Reserved : 0000
[0E4h 0228   1]               Enumeration ID : 00
[0E5h 0229   1]               PCI Bus Number : 00

[0E6h 0230   2]                     PCI Path : 1D,00


[0E8h 0232   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0E9h 0233   1]                 Entry Length : 08
[0EAh 0234   2]                     Reserved : 0000
[0ECh 0236   1]               Enumeration ID : 00
[0EDh 0237   1]               PCI Bus Number : 00

[0EEh 0238   2]                     PCI Path : 1A,00


[0F0h 0240   2]                Subtable Type : 0001 [Reserved Memory Region]
[0F2h 0242   2]                       Length : 0020

[0F4h 0244   2]                     Reserved : 0000
[0F6h 0246   2]           PCI Segment Number : 0000
[0F8h 0248   8]                 Base Address : 00000000AB800000
[100h 0256   8]          End Address (limit) : 00000000AF9FFFFF

[108h 0264   1]            Device Scope Type : 01 [PCI Endpoint Device]
[109h 0265   1]                 Entry Length : 08
[10Ah 0266   2]                     Reserved : 0000
[10Ch 0268   1]               Enumeration ID : 00
[10Dh 0269   1]               PCI Bus Number : 00

[10Eh 0270   2]                     PCI Path : 02,00


Raw Table Data: Length 272 (0x110)

    0000: 44 4D 41 52 10 01 00 00 01 ED 49 4E 54 45 4C 20  // DMAR......INTEL 
    0010: 53 4E 42 20 00 00 00 00 01 00 00 00 49 4E 54 4C  // SNB ........INTL
    0020: 01 00 00 00 23 01 00 00 00 00 00 00 00 00 00 00  // ....#...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 58 00 01 00 00 00  // ..........X.....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 FA 1F 00  // ................
    0060: 04 08 00 00 00 FA 0F 00 04 08 00 00 00 FA 0F 01  // ................
    0070: 04 08 00 00 00 FA 0F 02 04 08 00 00 00 FA 0F 03  // ................
    0080: 04 08 00 00 00 FA 0F 04 04 08 00 00 00 FA 0F 05  // ................
    0090: 04 08 00 00 00 FA 0F 06 04 08 00 00 00 FA 0F 07  // ................
    00A0: 01 00 28 00 00 00 00 00 00 00 0E 00 00 00 00 00  // ..(.............
    00B0: FF 7F 0E 00 00 00 00 00 01 08 00 00 00 00 1D 00  // ................
    00C0: 01 08 00 00 00 00 1A 00 01 00 28 00 00 00 00 00  // ..........(.....
    00D0: 00 40 E4 AA 00 00 00 00 FF 3F E6 AA 00 00 00 00  // .@.......?......
    00E0: 01 08 00 00 00 00 1D 00 01 08 00 00 00 00 1A 00  // ................
    00F0: 01 00 20 00 00 00 00 00 00 00 80 AB 00 00 00 00  // .. .............
    0100: FF FF 9F AF 00 00 00 00 01 08 00 00 00 00 02 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 2, "TOSHIB", "A007D   ", 0x20111220)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.PEGP.VGA_.LCD_, UnknownObj)
    External (_SB_.PCI0.SAT0.DVID, IntObj)
    External (_SB_.PCI0.SAT0.PRID, UnknownObj)
    External (_SB_.PCI0.SAT0.PRT2, UnknownObj)
    External (_SB_.PCI0.SAT0.PSCC, UnknownObj)
    External (_SB_.PCI0.SAT0.RVID, IntObj)
    External (_SB_.PCI0.SAT0.SSID, IntObj)
    External (_SB_.PCI0.SAT0.SVID, IntObj)
    External (_SB_.PCI0.SAT0.VNID, IntObj)
    External (HNOT, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)

    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        BCDD = CTDD /* \CTDD */
        If (((Arg0 >= One) && (Arg0 <= 0x04)))
        {
            Local0 = (EWLD | 0x9000)
            SMBR (0xFA00, Local0, Zero, Zero, 0xB2)
        }

        ACBK = PWRS /* \PWRS */
        ULSB = One
        If ((\_SB.PCI0.RP06.LNDX == One))
        {
            ULSB = Zero
        }

        IUSB = One
        If ((\_SB.PCI0.RP05.LNDX == One))
        {
            IUSB = Zero
        }

        WED3 = Zero
        If ((\_SB.PCI0.EHC1.PMEN == One))
        {
            WED3 = One
        }

        If ((\_SB.PCI0.EHC2.PMEN == One))
        {
            WED3 = One
        }

        If ((UPSW == One))
        {
            WED3 = One
        }

        CBWR = Zero
        If (((Arg0 == 0x03) && (OSYS >= 0x07D6)))
        {
            CBWR = One
        }

        CBWE = Zero
        If (GP90)
        {
            CBWE = One
        }

        GP90 = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        HKEN = One
        WAKS = One
        If ((Arg0 == 0x03))
        {
            While ((RSME == One)){}
            RSME = Zero
            If ((BMOD == One))
            {
                Arg0 = 0x04
            }
        }

        BMOD = Zero
        Notify (\_SB.PCI0.RP02.PXSX, One) // Device Check
        Notify (\_SB.PCI0.RP06.USBC, One) // Device Check
        If (DSPT)
        {
            While ((DKRE == One)){}
            DKRE = Zero
            DWAK ()
        }

        SYU6 = Zero
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            DNTF = One
            If ((Arg0 == 0x04))
            {
                Local0 = BCDD /* \BCDD */
                If (((Local0 == One) || (Local0 == 0x04)))
                {
                    SYU6 = One
                }
            }
        }

        SMBR (0xFA00, 0x9001, Zero, Zero, 0xB2)
        If ((PWRS != ACBK))
        {
            PNOT ()
        }

        If (IGDE ())
        {
            If ((OSID == 0x04))
            {
                \_SB.PCI0.GFX0.CLID = One
            }
            Else
            {
                \_SB.PCI0.GFX0.CLID = LIDS /* \LIDS */
            }

            \_SB.PCI0.GFX0.EVTS = 0x02
        }

        If ((Arg0 == 0x03))
        {
            DTSF = 0x14
            TRPD = Zero
        }

        If (GP90)
        {
            Notify (\_SB.BAT1, 0x80) // Status Change
        }

        If (GP91)
        {
            GP91 = Zero
            If ((Arg0 == 0x04))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If (GPAW)
        {
            GPAW = Zero
            If ((OSYS >= 0x07D6))
            {
                Notify (\_SB.HS87, 0x02) // Device Wake
            }
        }

        If (GPBW)
        {
            GPBW = Zero
            If ((OSYS >= 0x07D6))
            {
                Notify (\_SB.HS86, 0x02) // Device Wake
            }
        }

        Name (BUFF, Package (0x02)
        {
            Zero, 
            One
        })
        If ((PWRS == Zero))
        {
            Local0 = (BST1 & 0x04)
            If ((Local0 == 0x04))
            {
                BUFF [Zero] = One
            }
        }

        Return (BUFF) /* \_WAK.BUFF */
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If (MPEN)
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                If ((PDC4 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU4, 0x81) // C-State Change
                }
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                If ((PDC5 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU5, 0x81) // C-State Change
                }
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                If ((PDC6 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU6, 0x81) // C-State Change
                }
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                If ((PDC7 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU7, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == One))
        {
            TRP0 = Zero
        }

        If ((Arg0 == 0x02))
        {
            DTSF = Arg1
            TRPD = Zero
            Return (DTSF) /* \DTSF */
        }

        If ((Arg0 == 0x03))
        {
            TRPH = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Method (SMBR, 5, Serialized)
    {
        Acquire (MUTX, 0xFFFF)
        Local3 = IESI /* \IESI */
        Local4 = IEDI /* \IEDI */
        Local0 = Zero
        While (One)
        {
            BIOT (Arg0, Arg1, Arg2, Arg3, Local3, Local4, 0xB2)
            Local1 = (OEAX & 0xFF00)
            If ((Local1 == 0x2100))
            {
                Local0 += 0x32
                If ((Local0 >= 0x2710))
                {
                    Break
                }
                Else
                {
                    Sleep (0x32)
                }
            }
            Else
            {
                Break
            }
        }

        Release (MUTX)
    }

    Method (BIOT, 7, Serialized)
    {
        IEAX = Arg0
        IEBX = Arg1
        IECX = Arg2
        IEDX = Arg3
        IESI = Arg4
        IEDI = Arg5
        SSMP = Arg6
    }

    Method (IGDE, 0, NotSerialized)
    {
        If (\_SB.PCI0.DMIC.IVDD)
        {
            Return (Zero)
        }

        Return (One)
    }

    Method (VGAN, 0, NotSerialized)
    {
        If (!IGDE ())
        {
            Notify (\_SB.PCI0.PEGP.VGA, 0x80) // Status Change
        }
        ElseIf (VRDY ())
        {
            If (!PSTA ())
            {
                \_SB.PCI0.GFX0.CEVT = One
                \_SB.PCI0.GFX0.CSTS = 0x03
                Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                If (!PSTA ())
                {
                    \_SB.PCI0.GFX0.CEVT = Zero
                }
            }
        }
    }

    Method (PNLN, 0, NotSerialized)
    {
        If (IGDE ())
        {
            Notify (\_SB.PCI0.GFX0, Zero) // Bus Check
        }
    }

    Method (LCDN, 1, NotSerialized)
    {
        If (!IGDE ())
        {
            Notify (\_SB.PCI0.PEGP.VGA.LCD, Arg0)
        }
        Else
        {
            Notify (\_SB.PCI0.GFX0.DD01, Arg0)
        }
    }

    Method (WPSX, 4, Serialized)
    {
        IESI = Arg1
        IEDI = Arg2
        SMBR (0xFE00, 0x23, Arg0, Zero, 0xB2)
        While ((OECX != Zero))
        {
            IESI = Arg1
            IEDI = Arg2
            SMBR (0xFE00, 0x23, Arg0, Zero, 0xB2)
        }
    }

    Name (SBTB, 0xFF)
    Method (GSBS, 0, NotSerialized)
    {
        SMBR (0xFE00, 0x14, Zero, Zero, 0xB2)
        Local0 = OECX /* \OECX */
        If (((Local0 == 0x02) || (Local0 == 0x03)))
        {
            SBTB = One
        }
        ElseIf (((Local0 == 0x07) || (Local0 == 0x08)))
        {
            SBTB = 0x02
        }
        Else
        {
            SBTB = Zero
        }
    }

    Method (OERS, 0, NotSerialized)
    {
        OEEE = Zero
        CODD (0x0101)
        Local0 = (0x80 | 0x02)
        Notify (\_SB.PCI0.SAT0, Local0)
    }

    Method (CODD, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = Zero
        While (One)
        {
            BIOT (0xFF00, 0x76, Local0, Zero, Zero, Zero, 0xB2)
            Local2 = (OEAX & 0xFF00)
            If ((Local2 == 0x2100))
            {
                Local1 += 0x32
                If ((Local1 >= 0x2710))
                {
                    Break
                }
                Else
                {
                    Sleep (0x32)
                }
            }
            Else
            {
                Break
            }
        }
    }

    Method (SCMC, 0, NotSerialized)
    {
        If ((\_SB.PCI0.SAT0.PSCC != One))
        {
            Return (One)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (ODDN, 0, NotSerialized)
    {
        If (SCMC ())
        {
            Notify (\_SB.PCI0.SAT0.PRT2, Zero) // Bus Check
        }
        Else
        {
            Notify (\_SB.PCI0.SAT0.PRID, Zero) // Bus Check
        }
    }

    Method (DWAK, 0, NotSerialized)
    {
        Local0 = (DCSS & 0x05)
        If ((Local0 == 0x05))
        {
            If ((0x2451F351 == DCID))
            {
                If (((DCID != DLID) || (DSNB != DSRN)))
                {
                    Local0 = Zero
                    Local1 = Zero
                    If ((OSID < 0x05))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, 0xB2)
                        Local2 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x0136, Zero, Zero, 0xB2)
                        Local0 = (OEAX & 0xFF00)
                        Local1 = OECX /* \OECX */
                        If ((Local2 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, 0xB2)
                        }
                    }

                    If ((((Local0 == Zero) && (Local1 == Zero)) || (Local0 != 
                        Zero)))
                    {
                        Notify (\_SB.PCI0.PCIB.DOCK, Zero) // Bus Check
                    }
                    Else
                    {
                        Notify (\_SB.VALZ, 0x81) // Information Change
                    }
                }
            }
        }
        ElseIf (DLID)
        {
            DCKU = One
            DCKD = Zero
            Local0 = Zero
            Local1 = Zero
            If ((OSID < 0x05))
            {
                SMBR (0xF100, Zero, Zero, Zero, 0xB2)
                Local2 = (OEAX & 0xFF00)
                SMBR (0xF300, 0x0136, Zero, Zero, 0xB2)
                Local0 = (OEAX & 0xFF00)
                Local1 = OECX /* \OECX */
                If ((Local2 == Zero))
                {
                    SMBR (0xF200, Zero, Zero, Zero, 0xB2)
                }
            }

            If ((((Local0 == Zero) && (Local1 == Zero)) || (Local0 != 
                Zero)))
            {
                Notify (\_SB.PCI0.PCIB.DOCK, One) // Device Check
            }
            Else
            {
                Notify (\_SB.VALZ, 0x83) // Device-Specific Change
            }

            DLID = Zero
            DSRN = Zero
        }
    }

    Method (DLXX, 0, NotSerialized)
    {
        If (GP60)
        {
            GP60 = Zero
            Local0 = Zero
            Local1 = Zero
            If ((OSID < 0x05))
            {
                SMBR (0xF100, Zero, Zero, Zero, 0xB2)
                Local2 = (OEAX & 0xFF00)
                SMBR (0xF300, 0x0136, Zero, Zero, 0xB2)
                Local0 = (OEAX & 0xFF00)
                Local1 = OECX /* \OECX */
                If ((Local2 == Zero))
                {
                    SMBR (0xF200, Zero, Zero, Zero, 0xB2)
                }
            }

            If ((((Local0 == Zero) && (Local1 == Zero)) || (Local0 != 
                Zero)))
            {
                Notify (\_SB.PCI0.PCIB.DOCK, Zero) // Bus Check
            }
            Else
            {
                Notify (\_SB.VALZ, 0x83) // Device-Specific Change
            }

            PNOT ()
        }

        If (GP61)
        {
            GP61 = Zero
            If (DCKD)
            {
                DCKD = Zero
                Local0 = Zero
                Local1 = Zero
                If ((OSID < 0x05))
                {
                    SMBR (0xF100, Zero, Zero, Zero, 0xB2)
                    Local2 = (OEAX & 0xFF00)
                    SMBR (0xF300, 0x0136, Zero, Zero, 0xB2)
                    Local0 = (OEAX & 0xFF00)
                    Local1 = OECX /* \OECX */
                    If ((Local2 == Zero))
                    {
                        SMBR (0xF200, Zero, Zero, Zero, 0xB2)
                    }
                }

                If ((((Local0 == Zero) && (Local1 == Zero)) || (Local0 != 
                    Zero)))
                {
                    Notify (\_SB.PCI0.PCIB.DOCK, One) // Device Check
                }
                Else
                {
                    Notify (\_SB.VALZ, 0x83) // Device-Specific Change
                }

                DLID = Zero
                DSRN = Zero
                If ((LIDS == Zero))
                {
                    Notify (\_SB.VALZ, 0x90) // Device-Specific
                }

                VGAN ()
                PNOT ()
            }
            Else
            {
                Signal (DKSQ)
            }
        }

        If (GP62)
        {
            GP62 = Zero
            Local0 = Zero
            Local1 = Zero
            If ((OSID < 0x05))
            {
                SMBR (0xF100, Zero, Zero, Zero, 0xB2)
                Local2 = (OEAX & 0xFF00)
                SMBR (0xF300, 0x0136, Zero, Zero, 0xB2)
                Local0 = (OEAX & 0xFF00)
                Local1 = OECX /* \OECX */
                If ((Local2 == Zero))
                {
                    SMBR (0xF200, Zero, Zero, Zero, 0xB2)
                }
            }

            If ((((Local0 == Zero) && (Local1 == Zero)) || (Local0 != 
                Zero)))
            {
                Notify (\_SB.PCI0.PCIB.DOCK, One) // Device Check
            }
            Else
            {
                Notify (\_SB.VALZ, 0x82) // Device-Specific Change
            }
        }

        If (GP63)
        {
            GP63 = Zero
            If ((DCKF == Zero))
            {
                Local0 = Zero
                Local1 = Zero
                If ((OSID < 0x05))
                {
                    SMBR (0xF100, Zero, Zero, Zero, 0xB2)
                    Local2 = (OEAX & 0xFF00)
                    SMBR (0xF300, 0x0136, Zero, Zero, 0xB2)
                    Local0 = (OEAX & 0xFF00)
                    Local1 = OECX /* \OECX */
                    If ((Local2 == Zero))
                    {
                        SMBR (0xF200, Zero, Zero, Zero, 0xB2)
                    }
                }

                If ((((Local0 == Zero) && (Local1 == Zero)) || (Local0 != 
                    Zero)))
                {
                    Notify (\_SB.PCI0.PCIB.DOCK, Zero) // Bus Check
                }
                Else
                {
                    Notify (\_SB.VALZ, 0x81) // Information Change
                }
            }
            Else
            {
                Signal (DKSQ)
                DCKF = Zero
            }

            PNOT ()
        }
    }

    Event (DKSQ)
    Method (SH1X, 1, NotSerialized)
    {
        Local0 = Arg0
        IESI = One
        IEDI = Zero
        SMBR (0xFE00, 0x23, 0xF9, Zero, 0xB2)
        If ((OEDX != Local0))
        {
            IESI = One
            IEDI = Zero
            SMBR (0xFF00, 0x23, 0xF9, Local0, 0xB2)
            OECX = One
            While (OECX)
            {
                IESI = One
                IEDI = Zero
                SMBR (0xFE00, 0x23, 0xF9, Zero, 0xB2)
            }
        }
    }

    Method (SH2X, 1, NotSerialized)
    {
        Local0 = Arg0
        IESI = One
        IEDI = One
        SMBR (0xFE00, 0x23, 0xFA, Zero, 0xB2)
        If ((OEDX != Local0))
        {
            IESI = One
            IEDI = One
            SMBR (0xFF00, 0x23, 0xFA, Local0, 0xB2)
            OECX = One
            While (OECX)
            {
                IESI = One
                IEDI = One
                SMBR (0xFE00, 0x23, 0xFA, Zero, 0xB2)
            }
        }
    }

    Method (LPS0, 0, NotSerialized)
    {
        If ((DNTF == One))
        {
            DNTF = Zero
            If ((DOS2 == Zero))
            {
                If (DCKU)
                {
                    If (VRDY ())
                    {
                        \_SB.PCI0.GFX0.CEVT = One
                        \_SB.PCI0.GFX0.CSTS = 0x03
                        CTDD = 0x02
                        NXDD = One
                        Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                        If ((\_SB.PCI0.GFX0.CSTS > One))
                        {
                            Sleep (\_SB.PCI0.GFX0.ASLP)
                        }
                    }
                }
            }
        }

        DCKU = Zero
    }

    Method (VRDY, 0, NotSerialized)
    {
        If (!\_SB.PCI0.GFX0.DRDY)
        {
            Sleep (\_SB.PCI0.GFX0.ASLP)
        }

        Return (\_SB.PCI0.GFX0.DRDY)
    }

    Method (PSTA, 0, NotSerialized)
    {
        If ((\_SB.PCI0.GFX0.CSTS > 0x02))
        {
            Sleep (\_SB.PCI0.GFX0.ASLP)
        }

        Return ((\_SB.PCI0.GFX0.CSTS == 0x03))
    }

    Method (HDSP, 1, Serialized)
    {
        Local0 = (Arg0 & 0x03)
        Local1 = (Arg0 & 0x0100)
        Local1 >>= 0x03
        Local0 |= Local1
        Local1 = (Arg0 & 0x80)
        Local1 >>= 0x02
        Local0 |= Local1
        Local1 = (Arg0 & 0x40)
        Local0 |= Local1
        Local1 = (Arg0 & 0x10)
        Local1 <<= 0x02
        Local0 |= Local1
        Local1 = (Local0 & 0x40)
        If (Local1)
        {
            Local1 = (DCSS & 0x05)
            If ((Local1 == 0x05))
            {
                Local1 = (GL00 & 0x24)
                If ((Local1 == 0x24))
                {
                    Local0 &= 0xBF
                    Local0 |= 0x80
                }
            }
        }

        If (!IGDE ())
        {
            NXDD = Local0
            Notify (\_SB.PCI0.PEGP.VGA, 0x80) // Status Change
        }
        ElseIf (VRDY ())
        {
            If (!PSTA ())
            {
                \_SB.PCI0.GFX0.CEVT = One
                \_SB.PCI0.GFX0.CSTS = 0x03
                NXDD = Local0
                Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                If (!PSTA ())
                {
                    \_SB.PCI0.GFX0.CEVT = Zero
                }
            }
        }
    }

    Method (VDOS, 1, NotSerialized)
    {
        Local0 = (Arg0 & 0x03)
        If ((Local0 == Zero))
        {
            DCST = One
            DOS2 = Zero
        }
        ElseIf ((Local0 == One))
        {
            DCST = Zero
            DOS2 = One
        }
        ElseIf ((Local0 == 0x02))
        {
            DCST = One
            DOS2 = One
        }
        ElseIf ((Local0 == 0x03))
        {
            DCST = One
        }

        Local0 = (Arg0 & 0x04)
        If (Local0)
        {
            BRTC = Zero
        }
        Else
        {
            BRTC = One
        }
    }

    Method (VPSX, 4, Serialized)
    {
        If (Arg3)
        {
            SYU7 = Zero
            If ((SYU6 == One))
            {
                SYU6 = Zero
                If ((CTCA == One))
                {
                    SYU7 = One
                }
            }
        }

        VGAF = Arg1
    }

    Method (VPSC, 1, NotSerialized)
    {
        If (VGAF)
        {
            Return (0x03)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (TROM, 2, NotSerialized)
    {
        Local0 = (Arg0 + 0x000C0000)
        Local1 = (Arg1 << 0x03)
        Name (BUFF, Buffer (Arg1){})
        Scope (\)
        {
            OperationRegion (VROM, SystemMemory, Local0, Local1)
            Field (VROM, ByteAcc, NoLock, Preserve)
            {
                ROMI,   65536
            }
        }

        BUFF = ROMI /* \ROMI */
        Return (BUFF) /* \TROM.BUFF */
    }

    Method (VDDC, 3, NotSerialized)
    {
        Return (Zero)
        If ((Arg0 == One))
        {
            Local0 = 0x80
        }
        ElseIf ((Arg0 == 0x02))
        {
            Local0 = 0x0100
        }
        Else
        {
            Return (Zero)
        }

        PRES = Zero
        Local1 = (Arg0 << 0x08)
        Local1 |= Arg1
        Name (BUFF, Buffer (Local0){})
        SMBR (0xFE00, 0x37, Local1, 0x000EF000, 0xB2)
        Local1 &= 0xFF00
        OECX = 0x0100
        While (OECX)
        {
            SMBR (0xFE00, 0x37, Local1, Zero, 0xB2)
        }

        If (Arg2)
        {
            Local0 = FSDP /* \FSDP */
            FSDP = (Local0 | 0x22)
            Local0 = (FSDP - Local0)
            EDCK -= Local0
        }

        BUFF = PRES /* \PRES */
        Return (BUFF) /* \VDDC.BUFF */
    }

    Method (DBGT, 1, Serialized)
    {
        Name (TITL, "...Toshiba ASL tracing...")
        Debug = TITL /* \DBGT.TITL */
        Debug = Arg0
    }

    Scope (_SB)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSYS = 0x07D6
            OSID = 0x05
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                    OSID = Zero
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                    OSID = 0x04
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                    OSID = 0x04
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                    OSID = 0x04
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSYS = 0x07D2
                    OSID = 0x04
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                    OSID = 0x05
                }
            }

            BT1F = BES1 /* \BES1 */
            DSPW = Zero
            VGAF = Zero
            PPSC = Zero
            SPSC = Zero
            GP91 = Zero
            BMOD = Zero
            HKEN = One
            If ((OSYS >= 0x07D6))
            {
                SMBR (0xFF00, 0x1E, 0x0F, Zero, 0xB2)
            }

            SMBR (0xFA00, 0x9001, Zero, Zero, 0xB2)
            If (IGDE ())
            {
                If ((OSID == 0x04))
                {
                    ^PCI0.GFX0.CLID = One
                }
                Else
                {
                    ^PCI0.GFX0.CLID = LIDS /* \LIDS */
                }

                ^PCI0.GFX0.EVTS = 0x03
            }

            SMBR (0xFF00, 0xC3, Zero, Zero, 0xB2)
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
    }

    OperationRegion (GNVS, SystemMemory, 0xAA5D0000, 0x2000)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        OSYS,   16, 
        Offset (0x03), 
        Offset (0x04), 
        Offset (0x05), 
        Offset (0x06), 
        Offset (0x07), 
        Offset (0x08), 
        Offset (0x09), 
        Offset (0x0A), 
        Offset (0x0B), 
        Offset (0x0C), 
        Offset (0x0D), 
        Offset (0x0E), 
        DBGS,   8, 
        Offset (0x12), 
        DTST,   8, 
        Offset (0x14), 
        PTMA,   8, 
        Offset (0x16), 
        Offset (0x17), 
        Offset (0x18), 
        Offset (0x19), 
        Offset (0x1A), 
        Offset (0x1B), 
        Offset (0x1C), 
        Offset (0x1D), 
        Offset (0x1E), 
        Offset (0x28), 
        Offset (0x29), 
        MPEN,   8, 
        PCP0,   8, 
        PCP1,   8, 
        Offset (0x2D), 
        PPMF,   32, 
        C67L,   8, 
        Offset (0x3C), 
        Offset (0x3D), 
        Offset (0x3E), 
        Offset (0x3F), 
        Offset (0x40), 
        Offset (0x42), 
        Offset (0x44), 
        Offset (0x46), 
        Offset (0x47), 
        Offset (0x4B), 
        Offset (0x4F), 
        Offset (0x53), 
        Offset (0x57), 
        Offset (0x5B), 
        Offset (0x5C), 
        Offset (0x5D), 
        Offset (0x5E), 
        Offset (0x5F), 
        Offset (0x60), 
        Offset (0x61), 
        Offset (0x62), 
        Offset (0x67), 
        Offset (0x68), 
        Offset (0x69), 
        Offset (0x6A), 
        Offset (0x6B), 
        Offset (0x6C), 
        Offset (0x6D), 
        Offset (0x6E), 
        Offset (0x6F), 
        Offset (0x71), 
        Offset (0x73), 
        Offset (0x74), 
        Offset (0x75), 
        Offset (0x76), 
        Offset (0x78), 
        Offset (0x79), 
        Offset (0x7A), 
        Offset (0x82), 
        Offset (0x89), 
        Offset (0x90), 
        Offset (0x91), 
        Offset (0x98), 
        Offset (0x99), 
        Offset (0xAA), 
        ASLB,   32, 
        IBDP,   8, 
        Offset (0xB0), 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        Offset (0xB4), 
        IBIA,   8, 
        ISSC,   8, 
        Offset (0xB7), 
        Offset (0xB8), 
        Offset (0xB9), 
        Offset (0xBA), 
        IDMM,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        Offset (0xC2), 
        Offset (0xC6), 
        Offset (0xCA), 
        Offset (0xCE), 
        Offset (0xD2), 
        Offset (0xD6), 
        Offset (0xDA), 
        Offset (0xDE), 
        GSMI,   8, 
        Offset (0xE1), 
        Offset (0xE2), 
        Offset (0xE3), 
        Offset (0xEB), 
        DSEN,   8, 
        Offset (0xED), 
        Offset (0xEE), 
        Offset (0xEF), 
        Offset (0xF0), 
        Offset (0xF1), 
        Offset (0xF2), 
        Offset (0x100), 
            ,   1, 
        Offset (0x101), 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x102), 
        BCDD,   7, 
        Offset (0x103), 
        Offset (0x104), 
        SYSE,   1, 
        HKEN,   1, 
        HPEN,   1, 
        FBEN,   1, 
        GPEN,   1, 
        Offset (0x105), 
        HAPS,   2, 
        HHSW,   2, 
        HPSU,   2, 
        HRCU,   2, 
        HGSU,   2, 
        HEBI,   2, 
        HTMD,   2, 
        Offset (0x107), 
        HKRD,   2, 
        HVBS,   2, 
        Offset (0x10B), 
        MINF,   8, 
        TNVS,   1, 
        OSPC,   1, 
        ACBK,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        ULSB,   1, 
        IUSB,   1, 
        Offset (0x10E), 
        PULD,   8, 
        PULA,   8, 
        BCLD,   8, 
        BCLA,   8, 
        GSVM,   2, 
        Offset (0x113), 
        TCNT,   8, 
        GPIC,   8, 
        Offset (0x116), 
        OSID,   8, 
            ,   1, 
        Offset (0x118), 
            ,   1, 
        DSPT,   1, 
            ,   1, 
            ,   1, 
        Offset (0x119), 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x11A), 
        Offset (0x11C), 
        Offset (0x11D), 
        Offset (0x11E), 
        Offset (0x11F), 
        Offset (0x120), 
        Offset (0x121), 
        Offset (0x122), 
        Offset (0x13A), 
        BRTD,   8, 
        BRTB,   8, 
        BRT0,   8, 
        BRT1,   8, 
        BRT2,   8, 
        BRT3,   8, 
        BRT4,   8, 
        BRT5,   8, 
        BRT6,   8, 
        BRT7,   8, 
        BRDH,   8, 
        BRBH,   8
    }

    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x13C), 
        LBRL,   32, 
        LBRH,   32, 
        Offset (0x146), 
        VSST,   8, 
        DLID,   32, 
        DSRN,   32, 
        Offset (0x200), 
        PAR1,   16, 
        PAR2,   16, 
        PAR3,   16, 
        PAR4,   16, 
        PAR5,   16, 
        PAR6,   16
    }

    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x200), 
        Offset (0x202), 
        RDID,   32, 
        RDSN,   32, 
        CAPB,   16
    }

    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x200), 
        IEAX,   32, 
        IEBX,   32, 
        IECX,   32, 
        IEDX,   32, 
        IESI,   32, 
        IEDI,   32, 
        IEBP,   32, 
        Offset (0x220), 
        OEAX,   32, 
        OEBX,   32, 
        OECX,   32, 
        OEDX,   32, 
        OESI,   32, 
        OEDI,   32, 
        OEBP,   32, 
        Offset (0x240), 
            ,   1, 
        BES1,   1, 
        BES2,   1, 
            ,   4, 
        Offset (0x241), 
            ,   1, 
        Offset (0x242), 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x243), 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x244), 
        Offset (0x246), 
        PTMP,   8, 
        AP2T,   8, 
        AP3T,   8, 
        Offset (0x250), 
        Offset (0x252), 
        Offset (0x254), 
        Offset (0x256), 
        CRT1,   16, 
        TMP1,   16, 
        AST1,   16, 
        Offset (0x25E), 
        Offset (0x260), 
        Offset (0x262), 
        Offset (0x264), 
        Offset (0x266), 
        CRT2,   16, 
        TMP2,   16, 
        AST2,   16, 
        Offset (0x26E), 
        Offset (0x270), 
        Offset (0x272), 
        Offset (0x274), 
        Offset (0x276), 
        CRT3,   16, 
        TMP3,   16, 
        AST3,   16, 
        Offset (0x27E), 
        Offset (0x280), 
        Offset (0x300), 
        BMN1,   104, 
        BSN1,   88, 
        BTP1,   72, 
        Offset (0x325), 
        BDC1,   32, 
        BLF1,   32, 
        BTC1,   32, 
        BDV1,   32, 
        BST1,   32, 
        BPR1,   32, 
        BRC1,   32, 
        BPV1,   32, 
        Offset (0x349), 
        BCW1,   32, 
        BCL1,   32, 
        BG11,   32, 
        BG21,   32, 
        BOI1,   32, 
        BIR1,   24, 
        SNR1,   224, 
        CCM1,   16, 
        TDT1,   16, 
        TCC1,   32, 
        TDC1,   32, 
        TFC1,   16, 
        Offset (0x400), 
        BMN2,   104, 
        BSN2,   88, 
        BTP2,   72, 
        Offset (0x425), 
        BDC2,   32, 
        BLF2,   32, 
        BTC2,   32, 
        BDV2,   32, 
        BST2,   32, 
        BPR2,   32, 
        BRC2,   32, 
        BPV2,   32, 
        Offset (0x449), 
        BCW2,   32, 
        BCL2,   32, 
        BG12,   32, 
        BG22,   32, 
        BOI2,   32, 
        BIR2,   24, 
        SNR2,   224, 
        CCM2,   16, 
        TDT2,   16, 
        TCC2,   32, 
        TDC2,   32, 
        TFC2,   16, 
        Offset (0x500), 
        GP50,   1, 
        GP51,   1, 
        GP52,   1, 
        GP53,   1, 
        GP54,   1, 
        GP55,   1, 
        GP56,   1, 
        GP57,   1, 
        GP60,   1, 
        GP61,   1, 
        GP62,   1, 
        GP63,   1, 
            ,   1, 
            ,   1, 
        GP66,   1, 
        GP67,   1, 
        GP70,   1, 
        GP71,   1, 
            ,   1, 
        GP73,   1, 
        GP74,   1, 
        GP75,   1, 
        GP76,   1, 
        GP77,   1, 
        BTMD,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        BPFE,   1, 
        Offset (0x504), 
        GP90,   1, 
        GP91,   1, 
        GP92,   1, 
        GP93,   1, 
        GP94,   1, 
        GP95,   1, 
        GP96,   1, 
        GP97,   1, 
        GPD0,   1, 
        GPD1,   1, 
        Offset (0x506), 
        Offset (0x50F), 
            ,   1, 
            ,   1, 
            ,   1, 
        WED3,   1, 
        WED4,   1, 
        UPSW,   1, 
        Offset (0x510), 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x511), 
            ,   1, 
        VALF,   1, 
        DCST,   1, 
        DOS2,   1, 
            ,   1, 
        DCKF,   1, 
        BT1F,   1, 
        BT2F,   1, 
        CTLA,   1, 
        CTCA,   1, 
        CTTA,   1, 
        CTDA,   1, 
            ,   1, 
        CTMA,   1, 
        CTHA,   1, 
        CTD5,   1, 
        NXLA,   1, 
        NXCA,   1, 
        NXTA,   1, 
        NXDA,   1, 
            ,   1, 
        NXMA,   1, 
        NXHA,   1, 
        NXD5,   1
    }

    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x512), 
        CTDD,   8, 
        NXDD,   8, 
            ,   1, 
        PNLS,   1, 
        B1ST,   1, 
        B2ST,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        ECDS,   1, 
        TMOR,   8, 
        TPMO,   8, 
        TPMQ,   8, 
        TPMR,   16, 
        BRTC,   1, 
        CBWR,   1, 
        CBWE,   1, 
        Offset (0x520), 
        AFRP,   16, 
        AFWP,   16, 
        AFIF,   256, 
        GCVS,   8, 
        Offset (0x546), 
        GPHA,   1, 
        GPGA,   1, 
        GPFA,   1, 
        GPEA,   1, 
        GPDA,   1, 
        GPCA,   1, 
        GPBA,   1, 
        GPAA,   1, 
        GPHE,   1, 
        GPGE,   1, 
        GPFE,   1, 
        GPEE,   1, 
        GPDE,   1, 
        GPCE,   1, 
        GPBE,   1, 
        GPAE,   1, 
        GPHW,   1, 
        GPGW,   1, 
        GPFW,   1, 
        GPEW,   1, 
        GPDW,   1, 
        GPCW,   1, 
        GPBW,   1, 
        GPAW,   1, 
        GPHP,   1, 
        GPGP,   1, 
        GPFP,   1, 
        GPEP,   1, 
        GPDP,   1, 
        GPCP,   1, 
        GPBP,   1, 
        GPAP,   1, 
        FPLA,   1, 
        FSTA,   1, 
        FPRA,   1, 
        FNXA,   1, 
        TPBA,   1, 
        FCDA,   1, 
        FTVA,   1, 
        FQSA,   1, 
        FPLE,   1, 
        FSTE,   1, 
        FPRE,   1, 
        FNXE,   1, 
        TPBE,   1, 
        FCDE,   1, 
        FTVE,   1, 
        FQSE,   1, 
        FPLW,   1, 
        FSTW,   1, 
        FPRW,   1, 
        FNXW,   1, 
        TPBW,   1, 
        FCDW,   1, 
        FTVW,   1, 
        FQSW,   1, 
        FPLP,   1, 
        FSTP,   1, 
        FPRP,   1, 
        FNXP,   1, 
        TPBP,   1, 
        FCDP,   1, 
        FTVP,   1, 
        FQSP,   1, 
        RTVA,   1, 
        RCDA,   1, 
        Offset (0x54F), 
        RTVE,   1, 
        RCDE,   1, 
        Offset (0x550), 
        RTVW,   1, 
        RCDW,   1, 
        Offset (0x551), 
        RTVP,   1, 
        RCDP,   1, 
        Offset (0x552), 
        Offset (0x554), 
        Offset (0x556), 
        Offset (0x558), 
        Offset (0x55A), 
        SYU0,   1, 
        SYU1,   1, 
        SYU2,   1, 
            ,   1, 
            ,   1, 
        WAKS,   1, 
        SYU6,   1, 
        SYU7,   1, 
        Offset (0x55C), 
            ,   1, 
        DNTF,   1, 
        DCKU,   1, 
        DCKD,   1, 
            ,   1, 
        HPCE,   1, 
        HAPE,   1, 
        Offset (0x55D), 
        Offset (0x55E), 
        Offset (0x55F), 
        BSTG,   1, 
        Offset (0x560), 
        HKCD,   8, 
        Offset (0x562), 
        BDID,   32, 
        Offset (0x56E), 
        DSPW,   1, 
        VGAF,   1, 
            ,   1, 
            ,   1, 
        PPSC,   1, 
        SPSC,   1, 
        EWLD,   1, 
        Offset (0x56F), 
        LCDS,   4, 
        CRTS,   4, 
        CR2S,   4, 
        DVIS,   4, 
        LC2S,   4, 
        MDPS,   4, 
        HD2S,   4, 
        PSD5,   4, 
            ,   1, 
            ,   1, 
            ,   1, 
        WED5,   1, 
            ,   1, 
            ,   1, 
        Offset (0x574), 
            ,   1, 
            ,   1, 
        Offset (0x575), 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x576), 
        RSME,   1, 
        Offset (0x577), 
        DKRE,   1, 
        Offset (0x578), 
        UODP,   4, 
        UODS,   1, 
        UODD,   1, 
        ODNA,   1, 
        Offset (0x579), 
        EPH1,   1, 
        EPH2,   1, 
        EPH3,   1, 
        EPH4,   1, 
        EPH5,   1, 
        EPH6,   1, 
        EPH7,   1, 
        EPH8,   1, 
        EPU1,   1, 
        EPU2,   1, 
        EPU3,   1, 
        EPU4,   1, 
        EPU5,   1, 
        EPU6,   1, 
        EPU7,   1, 
        EPU8,   1, 
        Offset (0x580), 
        VGAR,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x581), 
        BTRE,   1, 
        ACVA,   1, 
            ,   1, 
        LIDV,   1, 
        ULSE,   1, 
        DRVL,   1, 
        Offset (0x582), 
            ,   1, 
            ,   1, 
        LDDM,   1, 
            ,   1, 
        ASPS,   1, 
        Offset (0x583), 
        Offset (0x584), 
        Offset (0x585), 
        DCSS,   8, 
        DCID,   32, 
        DATR,   16, 
        DSNB,   32, 
        SMIF,   8, 
        Offset (0x592), 
        Offset (0x593), 
        Offset (0x594), 
        Offset (0x595), 
        Offset (0x596), 
        Offset (0x597), 
        Offset (0x598), 
        Offset (0x599), 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        BNUM,   8, 
        B0SC,   8, 
        B1SC,   8, 
        B2SC,   8, 
        B0SS,   8, 
        B1SS,   8, 
        B2SS,   8, 
        CMCP,   8, 
        CIRP,   8, 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        Offset (0x5D4), 
        Offset (0x5D5), 
        Offset (0x5D6), 
        Offset (0x5D7), 
        Offset (0x5D8), 
        Offset (0x5D9), 
        Offset (0x5DA), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        Offset (0x5DE), 
        LLOW,   8, 
        LHIH,   8, 
        EMAE,   8, 
        Offset (0x5E3), 
        Offset (0x5E5), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x5E8), 
        Offset (0x5E9), 
        Offset (0x5F0), 
        Offset (0x5F7), 
        IDEM,   8, 
        Offset (0x5FF), 
        Offset (0x600), 
        PAVP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        ECON,   8, 
        Offset (0x605), 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        KSV0,   32, 
        KSV1,   8, 
        PNHM,   32, 
        Offset (0x614), 
        TPMH,   8, 
        BMOD,   8, 
        IPSB,   32, 
        PVID,   16, 
        PFLV,   8, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        ZPOE,   1, 
        OEEE,   1, 
        NVEB,   1, 
        ZPOI,   1, 
        Offset (0x62A), 
        Offset (0x62E), 
        SMHA,   16, 
        SMOF,   8, 
        SMLE,   16, 
        SMTY,   8, 
        SMWD,   512, 
        Offset (0x690), 
        Offset (0x698), 
        Offset (0x6A2), 
        Offset (0x6A4), 
        Offset (0x6A8), 
        FSDP,   8, 
        Offset (0x6B3), 
        Offset (0x6B6), 
        Offset (0x6C6), 
        Offset (0x70E), 
        Offset (0x70F), 
        EDCK,   8
    }

    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x690), 
        PRES,   32768
    }

    OperationRegion (OINT, SystemMemory, 0x000ECDE0, 0x1F)
    Field (OINT, AnyAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        Offset (0x02), 
        IBTT,   8, 
        IPAT,   8, 
        Offset (0x05), 
        Offset (0x06), 
        Offset (0x07), 
        Offset (0x09), 
        Offset (0x0A)
    }

    Scope (_GPE)
    {
        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (((RP1D == Zero) && \_SB.PCI0.RP01.HPSX))
            {
                Local0 = Zero
                If (\_SB.PCI0.RP01.PDCX)
                {
                    Sleep (0x64)
                    If (\_SB.PCI0.RP01.PDSX)
                    {
                        EPH1 = Zero
                        SMBR (0xFA00, 0x3400, One, Zero, 0xB2)
                        While ((EPH1 == Zero)){}
                        Local0 = One
                    }
                    Else
                    {
                        If (EPU1)
                        {
                            EPU1 = Zero
                        }
                        Else
                        {
                            EPH1 = Zero
                            SMBR (0xFA00, 0x3403, One, Zero, 0xB2)
                            While ((EPH1 == Zero)){}
                        }

                        Local0 = One
                    }
                }
                ElseIf (\_SB.PCI0.RP01.ABPX)
                {
                    If (\_SB.PCI0.RP01.PDSX)
                    {
                        SMBR (0xFA00, 0x3401, One, Zero, 0xB2)
                        Local0 = 0x03
                    }
                }

                \_SB.PCI0.RP01.HPSX = One
                \_SB.PCI0.RP01.PDCX = One
                \_SB.PCI0.RP01.ABPX = One
                If (Local0)
                {
                    Notify (\_SB.PCI0.RP01, Local0)
                }
            }

            If (((RP2D == Zero) && \_SB.PCI0.RP02.HPSX))
            {
                Local0 = Zero
                If (\_SB.PCI0.RP02.PDCX)
                {
                    Sleep (0x64)
                    EPH2 = Zero
                    SMBR (0xFA00, 0x3404, 0x02, Zero, 0xB2)
                    While ((EPH2 == Zero)){}
                    If (\_SB.PCI0.RP02.PDSX)
                    {
                        EPH2 = Zero
                        SMBR (0xFA00, 0x3400, 0x02, Zero, 0xB2)
                        While ((EPH2 == Zero)){}
                        Local0 = One
                    }
                    Else
                    {
                        If (EPU2)
                        {
                            EPU2 = Zero
                        }
                        Else
                        {
                            EPH2 = Zero
                            SMBR (0xFA00, 0x3403, 0x02, Zero, 0xB2)
                            While ((EPH2 == Zero)){}
                        }

                        Local0 = One
                    }
                }
                ElseIf (\_SB.PCI0.RP02.ABPX)
                {
                    If (\_SB.PCI0.RP02.PDSX)
                    {
                        SMBR (0xFA00, 0x3401, 0x02, Zero, 0xB2)
                        Local0 = 0x03
                    }
                }

                \_SB.PCI0.RP02.HPSX = One
                \_SB.PCI0.RP02.PDCX = One
                \_SB.PCI0.RP02.ABPX = One
                If (Local0)
                {
                    Notify (\_SB.PCI0.RP02, Local0)
                }
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.HPSX))
            {
                Local0 = Zero
                If (\_SB.PCI0.RP03.PDCX)
                {
                    Sleep (0x64)
                    If (\_SB.PCI0.RP03.PDSX)
                    {
                        EPH3 = Zero
                        SMBR (0xFA00, 0x3400, 0x03, Zero, 0xB2)
                        While ((EPH3 == Zero)){}
                        Local0 = One
                    }
                    Else
                    {
                        If (EPU3)
                        {
                            EPU3 = Zero
                        }
                        Else
                        {
                            EPH3 = Zero
                            SMBR (0xFA00, 0x3403, 0x03, Zero, 0xB2)
                            While ((EPH3 == Zero)){}
                        }

                        Local0 = One
                    }
                }
                ElseIf (\_SB.PCI0.RP03.ABPX)
                {
                    If (\_SB.PCI0.RP03.PDSX)
                    {
                        SMBR (0xFA00, 0x3401, 0x03, Zero, 0xB2)
                        Local0 = 0x03
                    }
                }

                \_SB.PCI0.RP03.HPSX = One
                \_SB.PCI0.RP03.PDCX = One
                \_SB.PCI0.RP03.ABPX = One
                If (Local0)
                {
                    Notify (\_SB.PCI0.RP03, Local0)
                }
            }

            If (((RP4D == Zero) && \_SB.PCI0.RP04.HPSX))
            {
                Local0 = Zero
                If (\_SB.PCI0.RP04.PDCX)
                {
                    Sleep (0x64)
                    If (\_SB.PCI0.RP04.PDSX)
                    {
                        EPH4 = Zero
                        SMBR (0xFA00, 0x3400, 0x04, Zero, 0xB2)
                        While ((EPH4 == 0x04)){}
                        Local0 = One
                    }
                    Else
                    {
                        If (EPU4)
                        {
                            EPU4 = Zero
                        }
                        Else
                        {
                            EPH4 = Zero
                            SMBR (0xFA00, 0x3403, 0x04, Zero, 0xB2)
                            While ((EPH4 == 0x04)){}
                        }

                        Local0 = One
                    }
                }
                ElseIf (\_SB.PCI0.RP04.ABPX)
                {
                    If (\_SB.PCI0.RP04.PDSX)
                    {
                        SMBR (0xFA00, 0x3401, 0x04, Zero, 0xB2)
                        Local0 = 0x03
                    }
                }

                \_SB.PCI0.RP04.HPSX = One
                \_SB.PCI0.RP04.PDCX = One
                \_SB.PCI0.RP04.ABPX = One
                If (Local0)
                {
                    Notify (\_SB.PCI0.RP04, Local0)
                }
            }

            If (((RP5D == Zero) && \_SB.PCI0.RP05.HPSX))
            {
                Local0 = Zero
                If (\_SB.PCI0.RP05.PDCX)
                {
                    Sleep (0x64)
                    If (\_SB.PCI0.RP05.PDSX)
                    {
                        EPH5 = Zero
                        SMBR (0xFA00, 0x3400, 0x05, Zero, 0xB2)
                        While ((EPH5 == Zero)){}
                        Local0 = One
                    }
                    Else
                    {
                        If (EPU5)
                        {
                            EPU5 = Zero
                        }
                        Else
                        {
                            EPH5 = Zero
                            SMBR (0xFA00, 0x3403, 0x05, Zero, 0xB2)
                            While ((EPH5 == Zero)){}
                        }

                        Local0 = One
                    }
                }
                ElseIf (\_SB.PCI0.RP05.ABPX)
                {
                    If (\_SB.PCI0.RP05.PDSX)
                    {
                        SMBR (0xFA00, 0x3401, 0x05, Zero, 0xB2)
                        Local0 = 0x03
                    }
                }

                \_SB.PCI0.RP05.HPSX = One
                \_SB.PCI0.RP05.PDCX = One
                \_SB.PCI0.RP05.ABPX = One
                If (Local0)
                {
                    Notify (\_SB.PCI0.RP05, Local0)
                }
            }

            If (((RP6D == Zero) && \_SB.PCI0.RP06.HPSX))
            {
                Local0 = Zero
                If (\_SB.PCI0.RP06.PDCX)
                {
                    Sleep (0x64)
                    If (\_SB.PCI0.RP06.PDSX)
                    {
                        EPH6 = Zero
                        SMBR (0xFA00, 0x3400, 0x06, Zero, 0xB2)
                        While ((EPH6 == Zero)){}
                        Local0 = One
                    }
                    Else
                    {
                        If (EPU6)
                        {
                            EPU6 = Zero
                        }
                        Else
                        {
                            EPH6 = Zero
                            SMBR (0xFA00, 0x3403, 0x06, Zero, 0xB2)
                            While ((EPH6 == Zero)){}
                        }

                        Local0 = One
                    }
                }
                ElseIf (\_SB.PCI0.RP06.ABPX)
                {
                    If (\_SB.PCI0.RP06.PDSX)
                    {
                        SMBR (0xFA00, 0x3401, 0x06, Zero, 0xB2)
                        Local0 = 0x03
                    }
                }

                \_SB.PCI0.RP06.HPSX = One
                \_SB.PCI0.RP06.PDCX = One
                \_SB.PCI0.RP06.ABPX = One
                If (Local0)
                {
                    Notify (\_SB.PCI0.RP06, Local0)
                }
            }

            If (((RP7D == Zero) && \_SB.PCI0.RP07.HPSX))
            {
                Local0 = Zero
                If (\_SB.PCI0.RP07.PDCX)
                {
                    Sleep (0x64)
                    If (\_SB.PCI0.RP07.PDSX)
                    {
                        EPH7 = Zero
                        SMBR (0xFA00, 0x3400, 0x07, Zero, 0xB2)
                        While ((EPH7 == Zero)){}
                        Local0 = One
                    }
                    Else
                    {
                        If (EPU7)
                        {
                            EPU7 = Zero
                        }
                        Else
                        {
                            EPH7 = Zero
                            SMBR (0xFA00, 0x3403, 0x07, Zero, 0xB2)
                            While ((EPH7 == Zero)){}
                        }

                        Local0 = One
                    }
                }
                ElseIf (\_SB.PCI0.RP07.ABPX)
                {
                    If (\_SB.PCI0.RP07.PDSX)
                    {
                        SMBR (0xFA00, 0x3401, 0x07, Zero, 0xB2)
                        Local0 = 0x03
                    }
                }

                \_SB.PCI0.RP07.HPSX = One
                \_SB.PCI0.RP07.PDCX = One
                \_SB.PCI0.RP07.ABPX = One
                If (Local0)
                {
                    Notify (\_SB.PCI0.RP07, Local0)
                }
            }

            If (((RP8D == Zero) && \_SB.PCI0.RP08.HPSX))
            {
                Local0 = Zero
                If (\_SB.PCI0.RP08.PDCX)
                {
                    Sleep (0x64)
                    If (\_SB.PCI0.RP08.PDSX)
                    {
                        EPH8 = Zero
                        SMBR (0xFA00, 0x3400, 0x08, Zero, 0xB2)
                        While ((EPH8 == Zero)){}
                        Local0 = One
                    }
                    Else
                    {
                        If (EPU8)
                        {
                            EPU8 = Zero
                        }
                        Else
                        {
                            EPH8 = Zero
                            SMBR (0xFA00, 0x3403, 0x08, Zero, 0xB2)
                            While ((EPH8 == Zero)){}
                        }

                        Local0 = One
                    }
                }
                ElseIf (\_SB.PCI0.RP08.ABPX)
                {
                    If (\_SB.PCI0.RP08.PDSX)
                    {
                        SMBR (0xFA00, 0x3401, 0x08, Zero, 0xB2)
                        Local0 = 0x03
                    }
                }

                \_SB.PCI0.RP08.HPSX = One
                \_SB.PCI0.RP08.PDCX = One
                \_SB.PCI0.RP08.ABPX = One
                If (Local0)
                {
                    Notify (\_SB.PCI0.RP08, Local0)
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
            If ((HTMD != Zero))
            {
                Notify (\_SB.VALZ, 0x88) // Device-Specific
            }
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (\_SB.PCI0.GFX0.GSSE)
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.SBUS.HSTS = 0x20
        }

        Method (_L08, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GI57 = One
            While ((GP50 || (GP51 || (GP52 || (GP54 || (GP55 || (
                GP56 || (GP57 || (GP60 || (GP61 || (GP62 || (GP63 || (GP66 || 
                (GP67 || (GP70 || (GP71 || (GP93 || (GP94 || (GPAP || (
                GPBP || (GPCP || (GPDP || (GPEP || (GPFP || (GPGP || (GPHP || 
                (FCDP || (FTVP || (FQSP || (GP96 || (GP97 || (GPD0 || (
                GPD1 || (BPFE || (TPBP || (ECDS || (B1ST || B2ST)))))))))))))))))))))))))))))))))))))
            {
                If (GP50)
                {
                    GP50 = Zero
                    Notify (\_SB.ADP1, 0x80) // Status Change
                    PNOT ()
                }

                If (GP51)
                {
                    GP51 = Zero
                }

                If (GP52)
                {
                    GP52 = Zero
                    If ((BES1 == BT1F))
                    {
                        Notify (\_SB.BAT1, 0x80) // Status Change
                    }
                    Else
                    {
                        BT1F = BES1 /* \BES1 */
                        If (BES1)
                        {
                            Notify (\_SB.BAT1, Zero) // Bus Check
                        }
                        Else
                        {
                            Notify (\_SB.BAT1, One) // Device Check
                        }
                    }
                }

                If (B1ST)
                {
                    B1ST = Zero
                    Notify (\_SB.BAT1, 0x81) // Information Change
                }

                If (B2ST)
                {
                    B2ST = Zero
                }

                If (GP54)
                {
                    GP54 = Zero
                }

                If (GP55)
                {
                    GP55 = Zero
                }

                If (GP56)
                {
                    GP56 = Zero
                    Notify (\_SB.BAT1, 0x80) // Status Change
                }

                If (GP57)
                {
                    GP57 = Zero
                }

                If (DSPT)
                {
                    DLXX ()
                }
                Else
                {
                    GP60 = Zero
                    GP61 = Zero
                    GP62 = Zero
                    GP63 = Zero
                }

                If (GP66)
                {
                    GP66 = Zero
                    SMBR (0xFE00, 0x14, Zero, Zero, 0xB2)
                    Local0 = OECX /* \OECX */
                    If (((BDID != Zero) && (OECX == Zero)))
                    {
                        Local0 = BDID /* \BDID */
                    }

                    BDID = OECX /* \OECX */
                    If ((Local0 == 0x07))
                    {
                        Sleep (0x03E8)
                        ODDN ()
                    }
                }

                If (GP67)
                {
                    GP67 = Zero
                }

                If (GP70)
                {
                    GP70 = Zero
                    If (VALF)
                    {
                        Notify (\_SB.VALZ, 0x80) // Status Change
                    }

                    If ((DOS2 == Zero))
                    {
                        If ((HKCD == 0x3F))
                        {
                            If ((TNVS == Zero))
                            {
                                VGAN ()
                            }
                        }
                    }

                    If (HPEN)
                    {
                        If ((HKCD == 0x40))
                        {
                            LCDN (0x87)
                        }

                        If ((HKCD == 0x41))
                        {
                            LCDN (0x86)
                        }
                    }
                }

                If (GP71)
                {
                    GP71 = Zero
                    Notify (\_SB.LID, 0x80) // Status Change
                    If ((LIDS == Zero))
                    {
                        Notify (\_SB.VALZ, 0x8F) // Device-Specific
                    }

                    PNLN ()
                }

                If (GP93)
                {
                    GP93 = Zero
                    Notify (\_SB.HAPS, 0x80) // Status Change
                }

                If (GP94)
                {
                    GP94 = Zero
                    Notify (\_SB.HAPS, 0x81) // Information Change
                }

                If (BPFE)
                {
                    BPFE = Zero
                    Notify (\_SB.BT, 0x90) // Device-Specific
                }

                If (GPAP)
                {
                    GPAP = Zero
                    Notify (\_SB.HS87, 0x80) // Status Change
                }

                If (GPBP)
                {
                    GPBP = Zero
                    Notify (\_SB.HS86, 0x80) // Status Change
                }

                If (GPCP)
                {
                    GPCP = Zero
                }

                If (GPDP)
                {
                    GPDP = Zero
                }

                If (GPEP)
                {
                    GPEP = Zero
                }

                If (GPFP)
                {
                    GPFP = Zero
                }

                If (GPGP)
                {
                    GPGP = Zero
                }

                If (GPHP)
                {
                    GPHP = Zero
                }

                If (FTVP)
                {
                    FTVP = Zero
                }

                If (FCDP)
                {
                    FCDP = Zero
                }

                If (FQSP)
                {
                    FQSP = Zero
                }

                If (GP96)
                {
                    GP96 = Zero
                }

                If (GP97)
                {
                    GP97 = Zero
                    If (ZPOI)
                    {
                        If (OEEE)
                        {
                            If (NVEB)
                            {
                                If (VALF)
                                {
                                    Notify (\_SB.VALZ, 0x8C) // Device-Specific
                                }
                            }
                            Else
                            {
                                OERS ()
                            }
                        }
                    }
                    ElseIf (VALF)
                    {
                        Notify (\_SB.VALZ, 0x8B) // Device-Specific
                    }
                }

                If (TPBP)
                {
                    TPBP = Zero
                    Notify (\_SB.HS81, 0x80) // Status Change
                }

                If (GPD0)
                {
                    GPD0 = Zero
                    OERS ()
                }

                If (GPD1)
                {
                    GPD1 = Zero
                    Notify (\_SB.VALZ, 0x8E) // Device-Specific
                }

                If (ECDS)
                {
                    ECDS = Zero
                    Notify (\_SB.PCI0.RP02, One) // Device Check
                }
            }
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (((RP1D == Zero) && \_SB.PCI0.RP01.PSPX))
            {
                \_SB.PCI0.RP01.PSPX = One
                \_SB.PCI0.RP01.PMSX = One
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If (((RP2D == Zero) && \_SB.PCI0.RP02.PSPX))
            {
                \_SB.PCI0.RP02.PSPX = One
                \_SB.PCI0.RP02.PMSX = One
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.PSPX))
            {
                \_SB.PCI0.RP03.PSPX = One
                \_SB.PCI0.RP03.PMSX = One
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If (((RP4D == Zero) && \_SB.PCI0.RP04.PSPX))
            {
                \_SB.PCI0.RP04.PSPX = One
                \_SB.PCI0.RP04.PMSX = One
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If (((RP5D == Zero) && \_SB.PCI0.RP05.PSPX))
            {
                \_SB.PCI0.RP05.PSPX = One
                \_SB.PCI0.RP05.PMSX = One
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            If (((RP6D == Zero) && \_SB.PCI0.RP06.PSPX))
            {
                \_SB.PCI0.RP06.PSPX = One
                \_SB.PCI0.RP06.PMSX = One
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }

            If (((RP7D == Zero) && \_SB.PCI0.RP07.PSPX))
            {
                \_SB.PCI0.RP07.PSPX = One
                \_SB.PCI0.RP07.PMSX = One
                Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            }

            If (((RP8D == Zero) && \_SB.PCI0.RP08.PSPX))
            {
                \_SB.PCI0.RP08.PSPX = One
                \_SB.PCI0.RP08.PMSX = One
                Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            }
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.PCIB, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (GP76)
            {
                GP76 = Zero
                Notify (\_SB.PCI0.LANC, 0x02) // Device Wake
            }

            If (GP77)
            {
                GP77 = Zero
                Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            }

            If (GP73)
            {
                GP73 = Zero
                Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
            }
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x00, 0x00000410, 0x06){}
        Processor (CPU1, 0x01, 0x00000410, 0x06){}
        Processor (CPU2, 0x02, 0x00000410, 0x06){}
        Processor (CPU3, 0x03, 0x00000410, 0x06){}
        Processor (CPU4, 0x04, 0x00000410, 0x06){}
        Processor (CPU5, 0x05, 0x00000410, 0x06){}
        Processor (CPU6, 0x06, 0x00000410, 0x06){}
        Processor (CPU7, 0x07, 0x00000410, 0x06){}
    }

    Scope (_TZ)
    {
        ThermalZone (TZ01)
        {
            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                If ((DTS2 > DTS1))
                {
                    Local0 = DTS2 /* \DTS2 */
                }
                Else
                {
                    Local0 = DTS1 /* \DTS1 */
                }

                If ((Local0 <= 0x10))
                {
                    AST1 = 0x0B4C
                    Return (0x0B4C)
                }
                Else
                {
                    AST1 = Local0
                    Return ((0x0AAC + (Local0 * 0x0A)))
                }
            }

            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Return ((0x0AAC + (CRTT * 0x0A)))
            }
        }
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Device (DMIC)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
                Field (HBUS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    EPEN,   1, 
                        ,   11, 
                    EPBR,   20, 
                    Offset (0x48), 
                    MHEN,   1, 
                        ,   14, 
                    MHBR,   17, 
                    Offset (0x50), 
                    GCLK,   1, 
                    IVDD,   1, 
                    Offset (0x54), 
                    D0EN,   1, 
                    Offset (0x60), 
                    PXEN,   1, 
                    PXSZ,   2, 
                        ,   23, 
                    PXBR,   6, 
                    Offset (0x68), 
                    DIEN,   1, 
                        ,   11, 
                    DIBR,   20, 
                    Offset (0x70), 
                        ,   20, 
                    MEBR,   12, 
                    Offset (0x80), 
                        ,   4, 
                    PM0H,   2, 
                    Offset (0x81), 
                    PM1L,   2, 
                        ,   2, 
                    PM1H,   2, 
                    Offset (0x82), 
                    PM2L,   2, 
                        ,   2, 
                    PM2H,   2, 
                    Offset (0x83), 
                    PM3L,   2, 
                        ,   2, 
                    PM3H,   2, 
                    Offset (0x84), 
                    PM4L,   2, 
                        ,   2, 
                    PM4H,   2, 
                    Offset (0x85), 
                    PM5L,   2, 
                        ,   2, 
                    PM5H,   2, 
                    Offset (0x86), 
                    PM6L,   2, 
                        ,   2, 
                    PM6H,   2, 
                    Offset (0x87), 
                    Offset (0xA8), 
                        ,   20, 
                    TUUD,   19, 
                    Offset (0xBC), 
                        ,   20, 
                    TLUD,   12, 
                    Offset (0xC8), 
                        ,   7, 
                    HTSE,   1
                }

                OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
                Field (MCHT, ByteAcc, NoLock, Preserve)
                {
                }
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x003F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0040,             // Length
                    ,, )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFED40000,         // Range Minimum
                    0xFED44FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (^DMIC.PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y00._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((^DMIC.PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y00._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (^DMIC.PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((^DMIC.PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (^DMIC.PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((^DMIC.PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (^DMIC.PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((^DMIC.PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (^DMIC.PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((^DMIC.PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (^DMIC.PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((^DMIC.PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (^DMIC.PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((^DMIC.PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (^DMIC.PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((^DMIC.PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (^DMIC.PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((^DMIC.PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (^DMIC.PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((^DMIC.PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (^DMIC.PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((^DMIC.PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (^DMIC.PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((^DMIC.PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (^DMIC.PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((^DMIC.PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0D._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0D._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, M1LN)  // _LEN: Length
                M1MN = (^DMIC.TLUD << 0x14)
                M1LN = ((M1MX - M1MN) + One)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (GPIC)
                {
                    Return (Package (0x1B)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            One, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x03, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            Zero, 
                            Zero, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            One, 
                            Zero, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            Zero, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            Zero, 
                            0x17
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            One, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            Zero, 
                            0x10
                        }
                    })
                }
                Else
                {
                    Return (Package (0x1B)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            One, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x03, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            Zero, 
                            ^LPCB.LNKE, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            One, 
                            ^LPCB.LNKF, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            ^LPCB.LNKG, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            ^LPCB.LNKH, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            One, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            ^LPCB.LNKA, 
                            Zero
                        }
                    })
                }
            }

            Device (PDRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00004000,         // Address Length
                        _Y0E)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00008000,         // Address Length
                        _Y0F)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y11)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y10)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y12)
                    Memory32Fixed (ReadOnly,
                        0xFEB00000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED40000,         // Address Base
                        0x00050000,         // Address Length
                        _Y13)
                    Memory32Fixed (ReadOnly,
                        0xFF000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFEE00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y0E._BAS, RBR0)  // _BAS: Base Address
                    RBR0 = (^^LPCB.RCBA << 0x0E)
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y0F._BAS, MBR0)  // _BAS: Base Address
                    MBR0 = (^^DMIC.MHBR << 0x0F)
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y10._BAS, EPR0)  // _BAS: Base Address
                    EPR0 = (^^DMIC.EPBR << 0x0C)
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._BAS, DBR0)  // _BAS: Base Address
                    DBR0 = (^^DMIC.DIBR << 0x0C)
                    If ((IPSB != Zero))
                    {
                        CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, TBRB)  // _BAS: Base Address
                        CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._LEN, TBRL)  // _LEN: Length
                        TBRB = IPSB /* \IPSB */
                        TBRL = 0x1000
                    }

                    If ((^^LPCB.GTPM.ACSS != 0xFF))
                    {
                        If ((TPMH != One))
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._BAS, TPMB)  // _BAS: Base Address
                            CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._LEN, TPML)  // _LEN: Length
                            TPMB = 0xFED45000
                            TPML = 0x0004B000
                        }
                    }

                    Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
                }

                OperationRegion (SRG1, SystemIO, 0xB2, One)
                Field (SRG1, ByteAcc, NoLock, Preserve)
                {
                    TRP4,   8
                }
            }

            Device (PEGP)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKD, 
                                Zero
                            }
                        })
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        VPSX (Zero, Zero, 0x0100, One)
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        VPSX (0x03, One, 0x0100, Zero)
                    }

                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (VPSC (0x0100))
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        VDOS (Arg0)
                    }

                    Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
                    {
                        Return (TROM (Arg0, Arg1))
                    }
                }
            }

            Device (B0D4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    VDOS (Arg0)
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If ((NDID == One))
                    {
                        Return (Package (0x01)
                        {
                            0x80000400
                        })
                    }

                    If ((NDID == 0x02))
                    {
                        Return (Package (0x02)
                        {
                            0x80000100, 
                            0x80000400
                        })
                    }

                    If ((NDID == 0x03))
                    {
                        Return (Package (0x03)
                        {
                            0x80000100, 
                            0x80000400, 
                            0x80000300
                        })
                    }

                    If ((NDID == 0x04))
                    {
                        Return (Package (0x04)
                        {
                            0x80000100, 
                            0x80000400, 
                            0x80000300, 
                            0x80000301
                        })
                    }

                    If ((NDID == 0x05))
                    {
                        Return (Package (0x05)
                        {
                            0x80000100, 
                            0x80000400, 
                            0x80000300, 
                            0x80000301, 
                            0x80000302
                        })
                    }

                    If ((NDID == 0x06))
                    {
                        Return (Package (0x06)
                        {
                            0x80000100, 
                            0x80000400, 
                            0x80000300, 
                            0x80000301, 
                            0x80000302, 
                            0x80000303
                        })
                    }

                    Return (Package (0x01)
                    {
                        0x0400
                    })
                }

                Name (BLVL, Package (0x0A)
                {
                    0x64, 
                    0x15, 
                    0x15, 
                    0x1F, 
                    0x2B, 
                    0x35, 
                    0x41, 
                    0x4F, 
                    0x60, 
                    0x64
                })
                Method (BCMN, 1, NotSerialized)
                {
                    BCLP = Arg0
                    LBPC = Zero
                }

                Device (DD01)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DIDL == Zero))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return ((0xFFFF & DIDL))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTCA)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXCA)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & One))
                        {
                            NXCA = One
                        }
                        Else
                        {
                            NXCA = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        CRTS = Zero
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        CRTS = 0x03
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        Return (CRTS) /* \CRTS */
                    }
                }

                Device (DD02)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID2 == Zero))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID2))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTLA)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DDC, 1, NotSerialized)  // _DDC: Display Data Current
                    {
                        Return (VDDC (Arg0, One, One))
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXLA)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & One))
                        {
                            NXLA = One
                        }
                        Else
                        {
                            NXLA = Zero
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        Name (BUFF, Package (0x0A)
                        {
                            0x64, 
                            0x0A, 
                            0x0A, 
                            0x0F, 
                            0x1E, 
                            0x28, 
                            0x37, 
                            0x41, 
                            0x50, 
                            0x64
                        })
                        BUFF [Zero] = BRTD /* \BRTD */
                        BUFF [One] = BRTB /* \BRTB */
                        BUFF [0x02] = BRT0 /* \BRT0 */
                        BUFF [0x03] = BRT1 /* \BRT1 */
                        BUFF [0x04] = BRT2 /* \BRT2 */
                        BUFF [0x05] = BRT3 /* \BRT3 */
                        BUFF [0x06] = BRT4 /* \BRT4 */
                        BUFF [0x07] = BRT5 /* \BRT5 */
                        BUFF [0x08] = BRT6 /* \BRT6 */
                        BUFF [0x09] = BRT7 /* \BRT7 */
                        If (((OSYS < 0x07D6) && HPSU))
                        {
                            BUFF [Zero] = BCLA /* \BCLA */
                            BUFF [One] = BCLD /* \BCLD */
                        }

                        Return (BUFF) /* \_SB_.PCI0.GFX0.DD02._BCL.BUFF */
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        Local1 = 0x07
                        SMBR (0xFE00, 0x2A, Zero, Zero, 0xB2)
                        If ((OEAX == Zero))
                        {
                            Local0 = OECX /* \OECX */
                            Local0 >>= 0x0D
                            If ((Local0 <= 0x03))
                            {
                                Local1 = LBRL /* \LBRL */
                            }
                            Else
                            {
                                Local1 = LBRH /* \LBRH */
                                Local0 -= 0x04
                            }

                            Local0 *= 0x08
                            Local1 >>= Local0
                            Local1 &= 0xFF
                        }

                        Return (Local1)
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If (((OSYS >= 0x07D6) || (HPSU == Zero)))
                        {
                            Local0 = Zero
                            If ((BRT1 == Arg0))
                            {
                                Local0 = One
                            }
                            ElseIf ((BRT2 == Arg0))
                            {
                                Local0 = 0x02
                            }
                            ElseIf ((BRT3 == Arg0))
                            {
                                Local0 = 0x03
                            }
                            ElseIf ((BRT4 == Arg0))
                            {
                                Local0 = 0x04
                            }
                            ElseIf ((BRT5 == Arg0))
                            {
                                Local0 = 0x05
                            }
                            ElseIf ((BRT6 == Arg0))
                            {
                                Local0 = 0x06
                            }
                            ElseIf ((BRT7 == Arg0))
                            {
                                Local0 = 0x07
                            }

                            Local0 <<= 0x0D
                            SMBR (0xFF00, 0x2A, Local0, Zero, 0xB2)
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        LCDS = Zero
                        LPS0 ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        LCDS = 0x03
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        Return (LCDS) /* \LCDS */
                    }
                }

                Device (DD03)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID3 == Zero))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID3))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTMA)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXMA)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & One))
                        {
                            NXMA = One
                        }
                        Else
                        {
                            NXMA = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        MDPS = Zero
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        MDPS = 0x03
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        Return (MDPS) /* \MDPS */
                    }
                }

                Device (DD04)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID4 == Zero))
                        {
                            Return (0x04)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID4))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Local0 = (DCSS & 0x05)
                        If ((Local0 == 0x05))
                        {
                            Local0 = (GL00 & 0x24)
                            If ((Local0 == 0x20))
                            {
                                Local0 = (GL08 & 0x40)
                                If (Local0)
                                {
                                    If (CTHA)
                                    {
                                        Return (0x0F)
                                    }
                                }
                            }
                        }

                        Return (0x0D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXHA)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & One))
                        {
                            NXHA = One
                        }
                        Else
                        {
                            NXHA = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        HD2S = Zero
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        HD2S = 0x03
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        Return (HD2S) /* \HD2S */
                    }
                }

                Device (DD05)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID5 == Zero))
                        {
                            Return (0x05)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID5))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Local1 = (DCSS & 0x05)
                        If ((Local1 == 0x05))
                        {
                            Local0 = (GL00 & 0x24)
                            If ((Local0 == 0x20))
                            {
                                Local0 = (GL08 & 0x40)
                                If ((Local0 == Zero))
                                {
                                    If (CTHA)
                                    {
                                        Return (0x0F)
                                    }
                                }
                            }
                        }

                        Return (0x0D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXHA)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & One))
                        {
                            NXHA = One
                        }
                        Else
                        {
                            NXHA = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        HD2S = Zero
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        HD2S = 0x03
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        Return (HD2S) /* \HD2S */
                    }
                }

                Device (DD06)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID6 == Zero))
                        {
                            Return (0x06)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID6))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        Local1 = (DCSS & 0x05)
                        If ((Local1 == 0x05))
                        {
                            Local0 = (GL00 & 0x24)
                            If ((Local0 == 0x24))
                            {
                                If (CTD5)
                                {
                                    Return (0x0F)
                                }
                            }
                        }

                        Return (0x0D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXD5)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If ((Arg0 & One))
                        {
                            NXD5 = One
                        }
                        Else
                        {
                            NXD5 = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        PSD5 = Zero
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        PSD5 = 0x03
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        Return (PSD5) /* \PSD5 */
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    VPSX (Zero, Zero, 0x10, Zero)
                }

                Method (_PS1, 0, Serialized)  // _PS1: Power State 1
                {
                    VPSX (One, One, 0x10, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    VPSX (0x03, One, 0x10, Zero)
                }

                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (VPSC (0x10))
                }

                Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
                {
                    Return (TROM (Arg0, Arg1))
                }

                Scope (^^PCI0)
                {
                    OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                    Field (MCHP, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x60), 
                        TASM,   10, 
                        Offset (0x62)
                    }
                }

                OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x12), 
                        ,   1, 
                    GIVD,   1, 
                        ,   2, 
                    GUMA,   3, 
                    Offset (0x14), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x18), 
                    Offset (0xA4), 
                    ASLE,   8, 
                    Offset (0xA8), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xB0), 
                        ,   12, 
                    CDVL,   1, 
                    Offset (0xB2), 
                    Offset (0xB5), 
                    LBPC,   8, 
                    Offset (0xBC), 
                    ASLS,   32
                }

                OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
                Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    DMOD,   32, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   32, 
                    DDL2,   32, 
                    DDL3,   32, 
                    DDL4,   32, 
                    DDL5,   32, 
                    DDL6,   32, 
                    DDL7,   32, 
                    DDL8,   32, 
                    CPDL,   32, 
                    CPL2,   32, 
                    CPL3,   32, 
                    CPL4,   32, 
                    CPL5,   32, 
                    CPL6,   32, 
                    CPL7,   32, 
                    CPL8,   32, 
                    CADL,   32, 
                    CAL2,   32, 
                    CAL3,   32, 
                    CAL4,   32, 
                    CAL5,   32, 
                    CAL6,   32, 
                    CAL7,   32, 
                    CAL8,   32, 
                    NADL,   32, 
                    NDL2,   32, 
                    NDL3,   32, 
                    NDL4,   32, 
                    NDL5,   32, 
                    NDL6,   32, 
                    NDL7,   32, 
                    NDL8,   32, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    CBLV,   32, 
                    BCLM,   320, 
                    CPFM,   32, 
                    EPFM,   32, 
                    PLUT,   592, 
                    PFMB,   32, 
                    CCDV,   32, 
                    PCFT,   32, 
                    Offset (0x400), 
                    GVD1,   49152, 
                    PHED,   32, 
                    BDDC,   2048
                }

                Name (DBTB, Package (0x15)
                {
                    Zero, 
                    0x07, 
                    0x38, 
                    0x01C0, 
                    0x0E00, 
                    0x3F, 
                    0x01C7, 
                    0x0E07, 
                    0x01F8, 
                    0x0E38, 
                    0x0FC0, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x7000, 
                    0x7007, 
                    0x7038, 
                    0x71C0, 
                    0x7E00
                })
                Name (CDCT, Package (0x05)
                {
                    Package (0x02)
                    {
                        0xE4, 
                        0x0140
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }
                })
                Name (SUCC, One)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GSCI, 0, Serialized)
                {
                    Method (GBDA, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = 0x59
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            PARM = 0x20
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            PARM = 0x24980000
                            PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                            GESF = One
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            PARM &= 0xFFF80000
                            PARM |= (IPAT << 0x08)
                            If (LIDS)
                            {
                                PARM |= 0x00020000
                            }
                            Else
                            {
                                PARM |= 0x00010000
                            }

                            PARM |= 0x00080000
                            GESF = One
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x06))
                        {
                            PARM &= 0xFFFFFF00
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                            PARM ^= One
                            PARM |= (GMFN << One)
                            PARM |= 0x1800
                            PARM |= 0x00060000
                            PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                0x15) /* \_SB_.PCI0.GFX0.PARM */
                            GESF = One
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            PARM = Zero
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            PARM = Zero
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                    }

                    Method (SBCB, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = 0x0190
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x03))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            Local0 = Zero
                            Local1 = (PARM & 0xFFFF)
                            If (((Local1 == 0x82) || (Local1 == 0x8200)))
                            {
                                Local0 = One
                            }
                            ElseIf (((Local1 == 0x81) || (Local1 == 0x8100)))
                            {
                                Local0 = 0x02
                            }
                            ElseIf (((Local1 == 0x84) || (Local1 == 0x8400)))
                            {
                                Local0 = 0x03
                            }
                            ElseIf (((Local1 == 0x88) || (Local1 == 0x8800)))
                            {
                                Local0 = 0x04
                            }
                            ElseIf (((Local1 == 0x90) || (Local1 == 0x9000)))
                            {
                                Local0 = 0x05
                            }
                            ElseIf (((Local1 == 0x0182) || (Local1 == 0x8201)))
                            {
                                Local0 = 0x06
                            }
                            ElseIf (((Local1 == 0x8102) || (Local1 == 0x0281)))
                            {
                                Local0 = 0x06
                            }
                            ElseIf (((Local1 == 0x0482) || (Local1 == 0x8204)))
                            {
                                Local0 = 0x07
                            }
                            ElseIf (((Local1 == 0x8402) || (Local1 == 0x0284)))
                            {
                                Local0 = 0x07
                            }
                            ElseIf (((Local1 == 0x0882) || (Local1 == 0x8208)))
                            {
                                Local0 = 0x08
                            }
                            ElseIf (((Local1 == 0x8802) || (Local1 == 0x0288)))
                            {
                                Local0 = 0x08
                            }
                            ElseIf (((Local1 == 0x1082) || (Local1 == 0x8210)))
                            {
                                Local0 = 0x09
                            }
                            ElseIf (((Local1 == 0x9002) || (Local1 == 0x0290)))
                            {
                                Local0 = 0x09
                            }
                            ElseIf (((Local1 == 0x0481) || (Local1 == 0x8104)))
                            {
                                Local0 = 0x0A
                            }
                            ElseIf (((Local1 == 0x8401) || (Local1 == 0x0184)))
                            {
                                Local0 = 0x0A
                            }
                            ElseIf (((Local1 == 0x0881) || (Local1 == 0x8108)))
                            {
                                Local0 = 0x0B
                            }
                            ElseIf (((Local1 == 0x8801) || (Local1 == 0x0188)))
                            {
                                Local0 = 0x0B
                            }
                            ElseIf (((Local1 == 0x1081) || (Local1 == 0x8110)))
                            {
                                Local0 = 0x0C
                            }
                            ElseIf (((Local1 == 0x9001) || (Local1 == 0x0190)))
                            {
                                Local0 = 0x0C
                            }
                            ElseIf (((Local1 == 0x0884) || (Local1 == 0x8408)))
                            {
                                Local0 = 0x0D
                            }
                            ElseIf (((Local1 == 0x8804) || (Local1 == 0x0488)))
                            {
                                Local0 = 0x0D
                            }
                            ElseIf (((Local1 == 0x1084) || (Local1 == 0x8410)))
                            {
                                Local0 = 0x0E
                            }
                            ElseIf (((Local1 == 0x9004) || (Local1 == 0x0490)))
                            {
                                Local0 = 0x0E
                            }
                            ElseIf (((Local1 == 0x1088) || (Local1 == 0x8810)))
                            {
                                Local0 = 0x0F
                            }
                            ElseIf (((Local1 == 0x9008) || (Local1 == 0x0890)))
                            {
                                Local0 = 0x0F
                            }

                            GESF = Zero
                            PARM = Zero
                            If ((Local0 == Zero))
                            {
                                Return (NVLD) /* \_SB_.PCI0.GFX0.NVLD */
                            }
                            Else
                            {
                                IESI = Zero
                                SMBR (0xFA00, 0x8001, Local0, 0x2800, 0xB2)
                                Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                            }
                        }

                        If ((GESF == 0x06))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x08))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x09))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x10))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x11))
                        {
                            PARM = Zero
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x12))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x13))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x14))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                    }

                    If ((GEFC == 0x04))
                    {
                        GXFC = GBDA ()
                    }

                    If ((GEFC == 0x06))
                    {
                        GXFC = SBCB ()
                    }

                    GEFC = Zero
                    SCIS = One
                    GSSE = Zero
                    SCIE = Zero
                    Return (Zero)
                }

                Method (PDRD, 0, NotSerialized)
                {
                    If (!DRDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!DRDY)
                }

                Method (PSTS, 0, NotSerialized)
                {
                    If ((CSTS > 0x02))
                    {
                        Sleep (ASLP)
                    }

                    Return ((CSTS == 0x03))
                }

                Method (GNOT, 2, NotSerialized)
                {
                    If (PDRD ())
                    {
                        Return (One)
                    }

                    CEVT = Arg0
                    CSTS = 0x03
                    If (((CHPD == Zero) && (Arg1 == Zero)))
                    {
                        If (((OSYS > 0x07D0) || (OSYS < 0x07D6)))
                        {
                            Notify (PCI0, Arg1)
                        }
                        Else
                        {
                            Notify (GFX0, Arg1)
                        }
                    }

                    If (CondRefOf (HNOT))
                    {
                        HNOT (Arg0)
                    }
                    Else
                    {
                        Notify (GFX0, 0x80) // Status Change
                    }

                    Return (Zero)
                }

                Method (GHDS, 1, NotSerialized)
                {
                    TIDX = Arg0
                    Return (GNOT (One, Zero))
                }

                Method (GLID, 1, NotSerialized)
                {
                    If ((Arg0 == One))
                    {
                        CLID = 0x03
                    }
                    Else
                    {
                        CLID = Arg0
                    }

                    Return (GNOT (0x02, Zero))
                }

                Method (GDCK, 1, NotSerialized)
                {
                    CDCK = Arg0
                    Return (GNOT (0x04, Zero))
                }

                Method (PARD, 0, NotSerialized)
                {
                    If (!ARDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!ARDY)
                }

                Method (AINT, 2, NotSerialized)
                {
                    If (!(TCHE & (One << Arg0)))
                    {
                        Return (One)
                    }

                    If (PARD ())
                    {
                        Return (One)
                    }

                    If ((Arg0 == 0x02))
                    {
                        If (CPFM)
                        {
                            Local0 = (CPFM & 0x0F)
                            Local1 = (EPFM & 0x0F)
                            If ((Local0 == One))
                            {
                                If ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                ElseIf ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                Else
                                {
                                    PFIT = One
                                }
                            }

                            If ((Local0 == 0x06))
                            {
                                If ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                ElseIf ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                Else
                                {
                                    PFIT = 0x06
                                }
                            }

                            If ((Local0 == 0x08))
                            {
                                If ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                ElseIf ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                Else
                                {
                                    PFIT = 0x08
                                }
                            }
                        }
                        Else
                        {
                            PFIT ^= 0x07
                        }

                        PFIT |= 0x80000000
                        ASLC = 0x04
                    }
                    ElseIf ((Arg0 == One))
                    {
                        BCLP = ((Arg1 * 0xFF) / 0x64)
                        BCLP |= 0x80000000
                        ASLC = 0x02
                    }
                    ElseIf ((Arg0 == Zero))
                    {
                        ALSI = Arg1
                        ASLC = One
                    }
                    Else
                    {
                        Return (One)
                    }

                    ASLE = One
                    Return (Zero)
                }

                Method (SCIP, 0, NotSerialized)
                {
                    If ((OVER != Zero))
                    {
                        Return (!GSMI)
                    }

                    Return (Zero)
                }

                Device (^^MEM2)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x20000000,         // Address Base
                            0x00200000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x40000000,         // Address Base
                            0x00200000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (IGDE ())
                        {
                            Return (CRS) /* \_SB_.MEM2.CRS_ */
                        }
                    }
                }
            }

            Scope (\)
            {
                OperationRegion (IO_T, SystemIO, 0x1000, 0x10)
                Field (IO_T, ByteAcc, NoLock, Preserve)
                {
                    TRPI,   16, 
                    Offset (0x04), 
                    Offset (0x06), 
                    Offset (0x08), 
                    TRP0,   8, 
                    Offset (0x0A), 
                    Offset (0x0B), 
                    Offset (0x0C), 
                    Offset (0x0D), 
                    Offset (0x0E), 
                    Offset (0x0F), 
                    Offset (0x10)
                }

                OperationRegion (IO_D, SystemIO, 0x0810, 0x04)
                Field (IO_D, ByteAcc, NoLock, Preserve)
                {
                    TRPD,   8
                }

                OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
                Field (IO_H, ByteAcc, NoLock, Preserve)
                {
                    TRPH,   8
                }

                OperationRegion (PMIO, SystemIO, 0x0400, 0x80)
                Field (PMIO, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x20), 
                        ,   2, 
                    SPST,   1, 
                        ,   16, 
                    GPS3,   1, 
                    Offset (0x28), 
                        ,   19, 
                    GPE3,   1, 
                    Offset (0x3C), 
                        ,   1, 
                    UPRW,   1, 
                    Offset (0x42), 
                        ,   1, 
                    GPEC,   1, 
                    Offset (0x64), 
                        ,   9, 
                    SCIS,   1, 
                    Offset (0x66)
                }

                OperationRegion (GPIO, SystemIO, 0x0500, 0x7C)
                Field (GPIO, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x0C), 
                    GL00,   8, 
                    GL01,   8, 
                    GL02,   8, 
                    GL03,   8, 
                    Offset (0x38), 
                    GL04,   8, 
                    GL05,   8, 
                    GL06,   8, 
                        ,   1, 
                    GI57,   1, 
                    Offset (0x3C), 
                    Offset (0x48), 
                    GL08,   8, 
                    GL09,   8, 
                    GL10,   8, 
                    GL11,   8
                }

                OperationRegion (RCRB, SystemMemory, 0xFED1C000, 0x4000)
                Field (RCRB, DWordAcc, Lock, Preserve)
                {
                    Offset (0x1000), 
                    Offset (0x3000), 
                    Offset (0x3404), 
                    HPAS,   2, 
                        ,   5, 
                    HPAE,   1, 
                    Offset (0x3418), 
                        ,   1, 
                        ,   1, 
                    SATD,   1, 
                    SMBD,   1, 
                    HDAD,   1, 
                    Offset (0x341A), 
                    RP1D,   1, 
                    RP2D,   1, 
                    RP3D,   1, 
                    RP4D,   1, 
                    RP5D,   1, 
                    RP6D,   1, 
                    RP7D,   1, 
                    RP8D,   1, 
                    Offset (0x359C), 
                    UP0D,   1, 
                    UP1D,   1, 
                    UP2D,   1, 
                    UP3D,   1, 
                    UP4D,   1, 
                    UP5D,   1, 
                    UP6D,   1, 
                    UP7D,   1, 
                    UP8D,   1, 
                    UP9D,   1, 
                    UPAD,   1, 
                    UPBD,   1, 
                    UPCD,   1, 
                    UPDD,   1, 
                        ,   1, 
                    Offset (0x359E)
                }

                Method (GETP, 1, Serialized)
                {
                    If (((Arg0 & 0x09) == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    If (((Arg0 & 0x09) == 0x08))
                    {
                        Return (0x0384)
                    }

                    Local0 = ((Arg0 & 0x0300) >> 0x08)
                    Local1 = ((Arg0 & 0x3000) >> 0x0C)
                    Return ((0x1E * (0x09 - (Local0 + Local1))))
                }

                Method (GDMA, 5, Serialized)
                {
                    If (Arg0)
                    {
                        If ((Arg1 && Arg4))
                        {
                            Return (0x14)
                        }

                        If ((Arg2 && Arg4))
                        {
                            Return (((0x04 - Arg3) * 0x0F))
                        }

                        Return (((0x04 - Arg3) * 0x1E))
                    }

                    Return (0xFFFFFFFF)
                }

                Method (GETT, 1, Serialized)
                {
                    Return ((0x1E * (0x09 - (((Arg0 >> 0x02) & 0x03
                        ) + (Arg0 & 0x03)))))
                }

                Method (GETF, 3, Serialized)
                {
                    Name (TMPF, Zero)
                    If (Arg0)
                    {
                        TMPF |= One
                    }

                    If ((Arg2 & 0x02))
                    {
                        TMPF |= 0x02
                    }

                    If (Arg1)
                    {
                        TMPF |= 0x04
                    }

                    If ((Arg2 & 0x20))
                    {
                        TMPF |= 0x08
                    }

                    If ((Arg2 & 0x4000))
                    {
                        TMPF |= 0x10
                    }

                    Return (TMPF) /* \GETF.TMPF */
                }

                Method (SETP, 3, Serialized)
                {
                    If ((Arg0 > 0xF0))
                    {
                        Return (0x08)
                    }
                    Else
                    {
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                            {
                                Return (0x2301)
                            }

                            If (((Arg0 <= 0xB4) && (Arg2 & One)))
                            {
                                Return (0x2101)
                            }
                        }

                        Return (0x1001)
                    }
                }

                Method (SDMA, 1, Serialized)
                {
                    If ((Arg0 <= 0x14))
                    {
                        Return (One)
                    }

                    If ((Arg0 <= 0x1E))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 <= 0x2D))
                    {
                        Return (One)
                    }

                    If ((Arg0 <= 0x3C))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 <= 0x5A))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SETT, 3, Serialized)
                {
                    If ((Arg1 & 0x02))
                    {
                        If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                        {
                            Return (0x0B)
                        }

                        If (((Arg0 <= 0xB4) && (Arg2 & One)))
                        {
                            Return (0x09)
                        }
                    }

                    Return (0x04)
                }

                Name (_S0, Package (0x03)  // _S0_: S0 System State
                {
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_S3, Package (0x03)  // _S3_: S3 System State
                {
                    0x05, 
                    0x05, 
                    Zero
                })
                Name (_S4, Package (0x03)  // _S4_: S4 System State
                {
                    0x06, 
                    0x06, 
                    Zero
                })
                Name (_S5, Package (0x03)  // _S5_: S5 System State
                {
                    0x07, 
                    0x07, 
                    Zero
                })
            }

            Device (LANC)
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x04
                })
                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        WED5 = One
                    }
                    Else
                    {
                        WED5 = Zero
                    }
                }
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
                Field (HDAR, WordAcc, NoLock, Preserve)
                {
                    DCKA,   1, 
                    Offset (0x01), 
                    DCKM,   1, 
                        ,   6, 
                    DCKS,   1, 
                    Offset (0x08), 
                        ,   15, 
                    PMES,   1
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x03
                })
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PCIR, PCI_Config, Zero, 0x20)
                Field (PCIR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x19), 
                    BRGB,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                        ,   3, 
                    LNDX,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x30), 
                    TLSX,   4, 
                    Offset (0x32), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                OperationRegion (PECR, PCI_Config, 0x0320, 0x10)
                Field (PECR, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                        ,   23, 
                    LTSM,   5
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKD, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                OperationRegion (PCIR, PCI_Config, Zero, 0x20)
                Field (PCIR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x19), 
                    BRGB,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                        ,   3, 
                    LNDX,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x30), 
                    TLSX,   4, 
                    Offset (0x32), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                OperationRegion (PECR, PCI_Config, 0x0320, 0x10)
                Field (PECR, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                        ,   23, 
                    LTSM,   5
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (PXSX._EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                {
                    EPU2 = One
                    EPH2 = Zero
                    SMBR (0xFA00, 0x3402, 0x02, Zero, 0xB2)
                    While ((EPH2 == Zero)){}
                }

                Name (PXSX._EJD, "\\_SB.PCI0.EHC1.HUB0.RMH0.PRT4")  // _EJD: Ejection Dependent Device
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKA, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PCIR, PCI_Config, Zero, 0x20)
                Field (PCIR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x19), 
                    BRGB,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                        ,   3, 
                    LNDX,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x30), 
                    TLSX,   4, 
                    Offset (0x32), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                OperationRegion (PECR, PCI_Config, 0x0320, 0x10)
                Field (PECR, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                        ,   23, 
                    LTSM,   5
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKB, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x09, 
                    0x04
                })
                OperationRegion (PCIR, PCI_Config, Zero, 0x20)
                Field (PCIR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x19), 
                    BRGB,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                        ,   3, 
                    LNDX,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x30), 
                    TLSX,   4, 
                    Offset (0x32), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                OperationRegion (PECR, PCI_Config, 0x0320, 0x10)
                Field (PECR, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                        ,   23, 
                    LTSM,   5
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x12
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKC, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PCIR, PCI_Config, Zero, 0x20)
                Field (PCIR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x19), 
                    BRGB,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                        ,   3, 
                    LNDX,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x30), 
                    TLSX,   4, 
                    Offset (0x32), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                OperationRegion (PECR, PCI_Config, 0x0320, 0x10)
                Field (PECR, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                        ,   23, 
                    LTSM,   5
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKD, 
                                Zero
                            }
                        })
                    }
                }

                Device (USBB)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If (Arg0)
                        {
                            UPSW = One
                        }
                        Else
                        {
                            UPSW = Zero
                        }
                    }
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (PCIR, PCI_Config, Zero, 0x20)
                Field (PCIR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x19), 
                    BRGB,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                        ,   3, 
                    LNDX,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x30), 
                    TLSX,   4, 
                    Offset (0x32), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                OperationRegion (PECR, PCI_Config, 0x0320, 0x10)
                Field (PECR, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                        ,   23, 
                    LTSM,   5
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x10
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKA, 
                                Zero
                            }
                        })
                    }
                }

                Device (USBC)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_EJD, "\\_SB.PCI0.PCIB.DOCK")  // _EJD: Ejection Dependent Device
                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x09, 
                        0x04
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If (Arg0)
                        {
                            UPSW = One
                        }
                        Else
                        {
                            UPSW = Zero
                        }
                    }
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (PCIR, PCI_Config, Zero, 0x20)
                Field (PCIR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x19), 
                    BRGB,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                        ,   3, 
                    LNDX,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x30), 
                    TLSX,   4, 
                    Offset (0x32), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                OperationRegion (PECR, PCI_Config, 0x0320, 0x10)
                Field (PECR, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                        ,   23, 
                    LTSM,   5
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x11
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKB, 
                                Zero
                            }
                        })
                    }
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PCIR, PCI_Config, Zero, 0x20)
                Field (PCIR, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x19), 
                    BRGB,   8
                }

                OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    L0SE,   1, 
                        ,   3, 
                    LNDX,   1, 
                    Offset (0x12), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x1A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x1B), 
                    LSCX,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PSPX,   1, 
                    Offset (0x30), 
                    TLSX,   4, 
                    Offset (0x32), 
                    Offset (0x98), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                OperationRegion (PECR, PCI_Config, 0x0320, 0x10)
                Field (PECR, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                        ,   23, 
                    LTSM,   5
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x13
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x12
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                ^^LPCB.LNKD, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                ^^LPCB.LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPCB.LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPCB.LNKC, 
                                Zero
                            }
                        })
                    }
                }
            }

            Method (NHPG, 0, Serialized)
            {
                If ((RP1D == Zero))
                {
                    ^RP01.HPEX = Zero
                }

                If ((RP2D == Zero))
                {
                    ^RP02.HPEX = Zero
                }

                If ((RP3D == Zero))
                {
                    ^RP03.HPEX = Zero
                }

                If ((RP4D == Zero))
                {
                    ^RP04.HPEX = Zero
                }

                If ((RP5D == Zero))
                {
                    ^RP05.HPEX = Zero
                }

                If ((RP6D == Zero))
                {
                    ^RP06.HPEX = Zero
                }

                If ((RP7D == Zero))
                {
                    ^RP07.HPEX = Zero
                }

                If ((RP8D == Zero))
                {
                    ^RP08.HPEX = Zero
                }

                If ((RP1D == Zero))
                {
                    ^RP01.HPSX = One
                }

                If ((RP2D == Zero))
                {
                    ^RP02.HPSX = One
                }

                If ((RP3D == Zero))
                {
                    ^RP03.HPSX = One
                }

                If ((RP4D == Zero))
                {
                    ^RP04.HPSX = One
                }

                If ((RP5D == Zero))
                {
                    ^RP05.HPSX = One
                }

                If ((RP6D == Zero))
                {
                    ^RP06.HPSX = One
                }

                If ((RP7D == Zero))
                {
                    ^RP07.HPSX = One
                }

                If ((RP8D == Zero))
                {
                    ^RP08.HPSX = One
                }
            }

            Method (NPME, 0, Serialized)
            {
                If ((RP1D == Zero))
                {
                    ^RP01.PMEX = Zero
                }

                If ((RP2D == Zero))
                {
                    ^RP02.PMEX = Zero
                }

                If ((RP3D == Zero))
                {
                    ^RP03.PMEX = Zero
                }

                If ((RP4D == Zero))
                {
                    ^RP04.PMEX = Zero
                }

                If ((RP5D == Zero))
                {
                    ^RP05.PMEX = Zero
                }

                If ((RP6D == Zero))
                {
                    ^RP06.PMEX = Zero
                }

                If ((RP7D == Zero))
                {
                    ^RP07.PMEX = Zero
                }

                If ((RP8D == Zero))
                {
                    ^RP08.PMEX = Zero
                }

                If ((RP1D == Zero))
                {
                    ^RP01.PMSX = One
                }

                If ((RP2D == Zero))
                {
                    ^RP02.PMSX = One
                }

                If ((RP3D == Zero))
                {
                    ^RP03.PMSX = One
                }

                If ((RP4D == Zero))
                {
                    ^RP04.PMSX = One
                }

                If ((RP5D == Zero))
                {
                    ^RP05.PMSX = One
                }

                If ((RP6D == Zero))
                {
                    ^RP06.PMSX = One
                }

                If ((RP7D == Zero))
                {
                    ^RP07.PMSX = One
                }

                If ((RP8D == Zero))
                {
                    ^RP08.PMSX = One
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x04
                })
                OperationRegion (EH1C, PCI_Config, Zero, 0xFF)
                Field (EH1C, ByteAcc, NoLock, Preserve)
                {
                    VNID,   16, 
                    DVID,   16, 
                    Offset (0x08), 
                    RVID,   8, 
                    Offset (0x2C), 
                    SVID,   16, 
                    SSID,   16
                }

                OperationRegion (E1PM, PCI_Config, 0x54, 0x02)
                Field (E1PM, WordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEN,   1, 
                        ,   6, 
                    PMES,   1
                }

                Device (HUB0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (RMH0)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Device (PRT4)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_EJD, "\\_SB.PCI0.RP02.PXSX")  // _EJD: Ejection Dependent Device
                        }

                        Device (PDCK)
                        {
                            Method (_ADR, 0, NotSerialized)  // _ADR: Address
                            {
                                Return (0x03)
                            }

                            Name (_EJD, "\\_SB.PCI0.PCIB.DOCK")  // _EJD: Ejection Dependent Device
                        }

                        Device (UPT0)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "ROUND",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRT3)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "ROUND",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRT5)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "ROUND",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRT6)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "ROUND",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRT7)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "ROUND",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0D, 
                    0x04
                })
                OperationRegion (EH2C, PCI_Config, Zero, 0xFF)
                Field (EH2C, ByteAcc, NoLock, Preserve)
                {
                    VNID,   16, 
                    DVID,   16, 
                    Offset (0x08), 
                    RVID,   8, 
                    Offset (0x2C), 
                    SVID,   16, 
                    SSID,   16
                }

                OperationRegion (E2PM, PCI_Config, 0x54, 0x02)
                Field (E2PM, WordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEN,   1, 
                        ,   6, 
                    PMES,   1
                }

                Device (HUB0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (RMH0)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                        Device (PRT8)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "ROUND",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRTB)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "ROUND",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRTC)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "ROUND",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }

                        Device (PRTD)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Name (_PLD, ToPLD (
                                PLD_Revision           = 0x1,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x0,
                                PLD_Panel              = "TOP",
                                PLD_VerticalPosition   = "LOWER",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "ROUND",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
                        }
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }
            }

            Device (PCIB)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Device (SLTB)
                {
                    Name (_ADR, 0x000B0000)  // _ADR: Address
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0x000BFFFF, 
                                Zero, 
                                Zero, 
                                0x16
                            }, 

                            Package (0x04)
                            {
                                0x000BFFFF, 
                                One, 
                                Zero, 
                                0x17
                            }, 

                            Package (0x04)
                            {
                                0x000BFFFF, 
                                0x02, 
                                Zero, 
                                0x14
                            }, 

                            Package (0x04)
                            {
                                0x000BFFFF, 
                                0x03, 
                                Zero, 
                                0x15
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0x000BFFFF, 
                                Zero, 
                                ^^LPCB.LNKG, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x000BFFFF, 
                                One, 
                                ^^LPCB.LNKH, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x000BFFFF, 
                                0x02, 
                                ^^LPCB.LNKE, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0x000BFFFF, 
                                0x03, 
                                ^^LPCB.LNKF, 
                                Zero
                            }
                        })
                    }
                }

                Device (DOCK)
                {
                    Name (_HID, EisaId ("PNP0A05") /* Generic Container Device */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Local0 = Zero
                        Local1 = Zero
                        If ((OSID < 0x05))
                        {
                            SMBR (0xF100, Zero, Zero, Zero, 0xB2)
                            Local2 = (OEAX & 0xFF00)
                            SMBR (0xF300, 0x0136, Zero, Zero, 0xB2)
                            Local0 = (OEAX & 0xFF00)
                            Local1 = OECX /* \OECX */
                            If ((Local2 == Zero))
                            {
                                SMBR (0xF200, Zero, Zero, Zero, 0xB2)
                            }
                        }

                        If ((((Local0 == Zero) && (Local1 == Zero)) || (Local0 != 
                            Zero)))
                        {
                            DLID = DCID /* \DCID */
                            DSRN = DSNB /* \DSNB */
                            Local0 = (DCSS & 0x05)
                            If ((Local0 != 0x05))
                            {
                                Return (Zero)
                            }
                            ElseIf ((0x2451F351 == DLID))
                            {
                                DCKD = One
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_BDN, 0, NotSerialized)  // _BDN: BIOS Dock Name
                    {
                        Return (DCID) /* \DCID */
                    }

                    Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                    {
                        Return (DSNB) /* \DSNB */
                    }

                    Method (_DCK, 1, NotSerialized)  // _DCK: Dock Present
                    {
                        If (Arg0)
                        {
                            Local0 = (DCSS & 0x05)
                            If ((Local0 == 0x05))
                            {
                                ^^^PDRC.TRP4 = 0x41
                                Reset (DKSQ)
                                Wait (DKSQ, 0x0BB8)
                                Return (One)
                            }

                            Return (Zero)
                        }
                        Else
                        {
                            Return (One)
                        }
                    }

                    Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                    {
                        If ((BES1 || BES2))
                        {
                            If (DCKD)
                            {
                                DCKD = Zero
                                ^^^PDRC.TRP4 = 0x40
                                Reset (DKSQ)
                                Wait (DKSQ, 0x1388)
                                If ((LIDS == Zero))
                                {
                                    Notify (VALZ, 0x90) // Device-Specific
                                }
                            }

                            DLID = Zero
                            DSRN = Zero
                            If ((OSID < 0x05))
                            {
                                VGAN ()
                            }

                            PNOT ()
                        }
                    }

                    PowerResource (PDOC, 0x01, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (DSPW) /* \DSPW */
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                            DSPW = One
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                            DSPW = Zero
                        }
                    }

                    Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                    {
                        PDOC
                    })
                    Name (_PR1, Package (0x01)  // _PR1: Power Resources for D1
                    {
                        PDOC
                    })
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x20), 
                    PARC,   8, 
                    PBRC,   8, 
                    PCRC,   8, 
                    PDRC,   8, 
                    Offset (0x28), 
                    PERC,   8, 
                    PFRC,   8, 
                    PGRC,   8, 
                    PHRC,   8, 
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    IOEN,   8, 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PARC |= 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLA, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLA, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PARC & 0x0F))
                        Return (RTLA) /* \_SB_.PCI0.LPCB.LNKA._CRS.RTLA */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PARC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PARC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PBRC |= 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLB, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLB, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PBRC & 0x0F))
                        Return (RTLB) /* \_SB_.PCI0.LPCB.LNKB._CRS.RTLB */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PBRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PBRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PCRC |= 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLC, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLC, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PCRC & 0x0F))
                        Return (RTLC) /* \_SB_.PCI0.LPCB.LNKC._CRS.RTLC */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PCRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PCRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PDRC |= 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLD, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLD, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PDRC & 0x0F))
                        Return (RTLD) /* \_SB_.PCI0.LPCB.LNKD._CRS.RTLD */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PDRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PDRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PERC |= 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLE, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLE, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PERC & 0x0F))
                        Return (RTLE) /* \_SB_.PCI0.LPCB.LNKE._CRS.RTLE */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PERC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PERC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PFRC |= 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLF, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLF, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PFRC & 0x0F))
                        Return (RTLF) /* \_SB_.PCI0.LPCB.LNKF._CRS.RTLF */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PFRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PFRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PGRC |= 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLG, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLG, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PGRC & 0x0F))
                        Return (RTLG) /* \_SB_.PCI0.LPCB.LNKG._CRS.RTLG */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PGRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PGRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PHRC |= 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLH, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLH, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PHRC & 0x0F))
                        Return (RTLH) /* \_SB_.PCI0.LPCB.LNKH._CRS.RTLH */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PHRC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PHRC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (GTPM)
                {
                    Method (_HID, 0, Serialized)  // _HID: Hardware ID
                    {
                        If ((TVID == 0x15D1))
                        {
                            Return (0x0201D824)
                        }
                        Else
                        {
                            Return (0x310CD041)
                        }
                    }

                    Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
                    OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x1000)
                    Field (TMMB, ByteAcc, Lock, Preserve)
                    {
                        ACSS,   8, 
                        Offset (0x18), 
                        TSTA,   8, 
                        TBCA,   8, 
                        Offset (0xF00), 
                        TVID,   16, 
                        TDID,   16
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (((ACSS == 0xFF) || (TPMH == One)))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((TPMH != One))
                        {
                            Return (ResourceTemplate ()
                            {
                                Memory32Fixed (ReadOnly,
                                    0xFED40000,         // Address Base
                                    0x00005000,         // Address Length
                                    )
                            })
                        }
                    }

                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                        {
                            If ((Arg1 == One))
                            {
                                If ((Arg2 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x3F                                             // ?
                                    })
                                }

                                If ((Arg2 == One))
                                {
                                    Return ("1.0")
                                }

                                If ((Arg2 == 0x02))
                                {
                                    CreateDWordField (Arg3, Zero, VREQ)
                                    If ((((VREQ >= Zero) && (VREQ <= 0x0B)) || (
                                        VREQ == 0x0E)))
                                    {
                                        Local0 = (VREQ | 0x3900)
                                        SMBR (0xFA00, Local0, Zero, Zero, 0xB2)
                                        Local1 = (OEAX & 0xFF00)
                                        While ((Local1 == 0x2000))
                                        {
                                            SMBR (0xFA00, Local0, Zero, Zero, 0xB2)
                                            Local1 = (OEAX & 0xFF00)
                                        }

                                        If ((Local1 == Zero))
                                        {
                                            TPMO = VREQ /* \_SB_.PCI0.LPCB.GTPM._DSM.VREQ */
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                            Return (0x02)
                                        }
                                    }

                                    Return (One)
                                }

                                If ((Arg2 == 0x03))
                                {
                                    Name (BUFF, Package (0x02)
                                    {
                                        Zero, 
                                        Zero
                                    })
                                    BUFF [One] = TPMO /* \TPMO */
                                    Return (BUFF) /* \_SB_.PCI0.LPCB.GTPM._DSM.BUFF */
                                }

                                If ((Arg2 == 0x04))
                                {
                                    Return (0x02)
                                }

                                If ((Arg2 == 0x05))
                                {
                                    Name (BUF1, Package (0x03)
                                    {
                                        Zero, 
                                        Zero, 
                                        Zero
                                    })
                                    Local0 = TPMQ /* \TPMQ */
                                    BUF1 [One] = Local0
                                    Local0 = 0x01D2
                                    If ((Local0 == 0xFFF0))
                                    {
                                        Local0 = 0xFFFFFFF0
                                    }

                                    If ((Local0 == 0xFFF1))
                                    {
                                        Local0 = 0xFFFFFFF1
                                    }

                                    BUF1 [0x02] = Local0
                                    Return (BUF1) /* \_SB_.PCI0.LPCB.GTPM._DSM.BUF1 */
                                }
                            }
                            ElseIf ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x01                                             // .
                                })
                            }
                        }
                        ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
                        {
                            If ((Arg1 == One))
                            {
                                If ((Arg2 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }

                                If ((Arg2 == One))
                                {
                                    If ((DerefOf (Arg3 [Zero]) == Zero))
                                    {
                                        TMOR = Zero
                                        Return (Zero)
                                    }

                                    If ((DerefOf (Arg3 [Zero]) == One))
                                    {
                                        TMOR = One
                                        Return (Zero)
                                    }
                                }

                                Return (One)
                            }

                            If ((Arg2 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x01                                             // .
                                })
                            }
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y14)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSYS >= 0x07D1))
                        {
                            If (HPAE)
                            {
                                Return (0x0F)
                            }
                        }
                        ElseIf (HPAE)
                        {
                            Return (0x0B)
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPAE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y14._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == One))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x1000,             // Range Minimum
                            0x1000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x40,               // Length
                            )
                    })
                }

                Device (GEN1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0680,             // Range Minimum
                            0x0680,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x01E0,             // Range Minimum
                            0x01E0,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (BUF0) /* \_SB_.PCI0.LPCB.GEN1.BUF0 */
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {8}
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {0}
                    })
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                }

                Device (PS2M)
                {
                    Method (_HID, 0, Serialized)  // _HID: Hardware ID
                    {
                        If ((SYU2 == One))
                        {
                            Return (0x2002F351)
                        }
                        Else
                        {
                            Return (0x130FD041)
                        }
                    }

                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                }
            }

            Device (SAT0)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                OperationRegion (SACS, PCI_Config, 0x40, 0xC0)
                Field (SACS, DWordAcc, NoLock, Preserve)
                {
                    PRIT,   16, 
                    SECT,   16, 
                    PSIT,   4, 
                    SSIT,   4, 
                    Offset (0x08), 
                    SYNC,   4, 
                    Offset (0x0A), 
                    SDT0,   2, 
                        ,   2, 
                    SDT1,   2, 
                    Offset (0x0B), 
                    SDT2,   2, 
                        ,   2, 
                    SDT3,   2, 
                    Offset (0x14), 
                    ICR0,   4, 
                    ICR1,   4, 
                    ICR2,   4, 
                    ICR3,   4, 
                    ICR4,   4, 
                    ICR5,   4, 
                    Offset (0x50), 
                    MAPV,   2
                }
            }

            Device (SAT1)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
                OperationRegion (SACS, PCI_Config, 0x40, 0xC0)
                Field (SACS, DWordAcc, NoLock, Preserve)
                {
                    PRIT,   16, 
                    SECT,   16, 
                    PSIT,   4, 
                    SSIT,   4, 
                    Offset (0x08), 
                    SYNC,   4, 
                    Offset (0x0A), 
                    SDT0,   2, 
                        ,   2, 
                    SDT1,   2, 
                    Offset (0x0B), 
                    SDT2,   2, 
                        ,   2, 
                    SDT3,   2, 
                    Offset (0x14), 
                    ICR0,   4, 
                    ICR1,   4, 
                    ICR2,   4, 
                    ICR3,   4, 
                    ICR4,   4, 
                    ICR5,   4, 
                    Offset (0x50), 
                    MAPV,   2
                }
            }

            Device (SBUS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
                OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
                Field (SMBP, DWordAcc, NoLock, Preserve)
                {
                        ,   2, 
                    I2CE,   1
                }

                OperationRegion (SMBI, SystemIO, 0xFFFE, 0x10)
                Field (SMBI, ByteAcc, NoLock, Preserve)
                {
                    HSTS,   8, 
                    Offset (0x02), 
                    HCON,   8, 
                    HCOM,   8, 
                    TXSA,   8, 
                    DAT0,   8, 
                    DAT1,   8, 
                    HBDR,   8, 
                    PECR,   8, 
                    RXSA,   8, 
                    SDAT,   16
                }

                Method (SSXB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SRXB, 1, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCON = 0x44
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRB, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = Arg2
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SRDB, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCOM = Arg1
                    HCON = 0x48
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                    }

                    Return (0xFFFF)
                }

                Method (SWRW, 3, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT1 = (Arg2 & 0xFF)
                    DAT0 = ((Arg2 >> 0x08) & 0xFF)
                    HCON = 0x4C
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SRDW, 2, Serialized)
                {
                    If (STRT ())
                    {
                        Return (0xFFFF)
                    }

                    I2CE = Zero
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCOM = Arg1
                    HCON = 0x4C
                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (((DAT0 << 0x08) | DAT1))
                    }

                    Return (0xFFFFFFFF)
                }

                Method (SBLW, 4, Serialized)
                {
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Arg3
                    HSTS = 0xBF
                    TXSA = Arg0
                    HCOM = Arg1
                    DAT0 = SizeOf (Arg2)
                    Local1 = Zero
                    HBDR = DerefOf (Arg2 [Zero])
                    HCON = 0x54
                    While ((SizeOf (Arg2) > Local1))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (Zero)
                        }

                        HSTS = 0x80
                        Local1++
                        If ((SizeOf (Arg2) > Local1))
                        {
                            HBDR = DerefOf (Arg2 [Local1])
                        }
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SBLR, 3, Serialized)
                {
                    Name (TBUF, Buffer (0x0100){})
                    If (STRT ())
                    {
                        Return (Zero)
                    }

                    I2CE = Arg2
                    HSTS = 0xBF
                    TXSA = (Arg0 | One)
                    HCOM = Arg1
                    HCON = 0x54
                    Local0 = 0x0FA0
                    While ((!(HSTS & 0x80) && Local0))
                    {
                        Local0--
                        Stall (0x32)
                    }

                    If (!Local0)
                    {
                        KILL ()
                        Return (Zero)
                    }

                    TBUF [Zero] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                    HSTS = 0x80
                    Local1 = One
                    While ((Local1 < DerefOf (TBUF [Zero])))
                    {
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (Zero)
                        }

                        TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                        HSTS = 0x80
                        Local1++
                    }

                    If (COMP ())
                    {
                        HSTS |= 0xFF
                        Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                    }

                    Return (Zero)
                }

                Method (STRT, 0, Serialized)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        If ((HSTS & 0x40))
                        {
                            Local0--
                            Sleep (One)
                            If ((Local0 == Zero))
                            {
                                Return (One)
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & One))
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == Zero))
                            {
                                KILL ()
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Return (One)
                }

                Method (COMP, 0, Serialized)
                {
                    Local0 = 0x0FA0
                    While (Local0)
                    {
                        If ((HSTS & 0x02))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Local0--
                            Stall (0x32)
                            If ((Local0 == Zero))
                            {
                                KILL ()
                            }
                        }
                    }

                    Return (Zero)
                }

                Method (KILL, 0, Serialized)
                {
                    HCON |= 0x02
                    HSTS |= 0xFF
                }
            }

            Device (TRD0)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
                OperationRegion (TRDR, PCI_Config, 0x40, 0xC0)
                Field (TRDR, AnyAcc, NoLock, Preserve)
                {
                    TBRB,   32
                }
            }
        }

        Device (VALZ)
        {
            Name (_HID, EisaId ("TOS6208"))  // _HID: Hardware ID
            Name (_DDN, "VALZeneral")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (WAKS)
                {
                    WAKS = Zero
                }

                Return (0x0B)
            }

            Method (ENAB, 0, NotSerialized)
            {
                VALF = One
                SYSE = One
            }

            Method (INFO, 0, NotSerialized)
            {
                If ((AFRP != AFWP))
                {
                    Local0 = AFRP /* \AFRP */
                    Name (BUFF, Buffer (0x20){})
                    BUFF = AFIF /* \AFIF */
                    CreateWordField (BUFF, Local0, FFDT)
                    Local2 = FFDT /* \_SB_.VALZ.INFO.FFDT */
                    Local0 += 0x02
                    Local0 &= 0x1F
                    AFRP = Local0
                }
                Else
                {
                    Local2 = Zero
                }

                Return (Local2)
            }

            Method (GHCI, 6, Serialized)
            {
                CreateDWordField (Arg0, Zero, REAX)
                CreateWordField (Arg1, Zero, R_BX)
                Local0 = (REAX & 0xFF00)
                If ((Local0 == 0xFE00))
                {
                    If ((R_BX == 0xC000))
                    {
                        Return (G000 (Local0, R_BX, Arg2, Arg3, Arg4, Arg5))
                    }

                    If ((R_BX == 0xC800))
                    {
                        Return (G800 (Local0, R_BX, Arg2, Arg3, Arg4, Arg5))
                    }

                    If ((R_BX == 0xC801))
                    {
                        Return (G801 (Local0, R_BX, Arg2, Arg3, Arg4, Arg5))
                    }
                }

                If ((Local0 == 0xFF00))
                {
                    If ((R_BX == 0xC000))
                    {
                        Return (G000 (Local0, R_BX, Arg2, Arg3, Arg4, Arg5))
                    }

                    If ((R_BX == 0xC801))
                    {
                        Return (G801 (Local0, R_BX, Arg2, Arg3, Arg4, Arg5))
                    }
                }

                Return (GCH0 (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5))
            }

            Scope (\)
            {
                Method (GCH0, 6, Serialized)
                {
                    Acquire (MUTX, 0xFFFF)
                    Local0 = Zero
                    While (One)
                    {
                        BIOT (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If ((Local1 == 0x2100))
                        {
                            Local0 += 0x32
                            If ((Local0 >= 0x2710))
                            {
                                Break
                            }
                            Else
                            {
                                Sleep (0x32)
                            }
                        }
                        Else
                        {
                            Break
                        }
                    }

                    Name (BUFF, Package (0x06){})
                    BUFF [Zero] = OEAX /* \OEAX */
                    BUFF [One] = OEBX /* \OEBX */
                    BUFF [0x02] = OECX /* \OECX */
                    BUFF [0x03] = OEDX /* \OEDX */
                    BUFF [0x04] = OESI /* \OESI */
                    BUFF [0x05] = OEDI /* \OEDI */
                    Release (MUTX)
                    Return (BUFF) /* \GCH0.BUFF */
                }

                Method (G000, 6, NotSerialized)
                {
                    Name (BUFF, Package (0x06){})
                    CreateDWordField (Arg2, Zero, RECX)
                    CreateDWordField (Arg3, Zero, REDX)
                    CreateDWordField (Arg4, Zero, RESI)
                    CreateDWordField (Arg5, Zero, REDI)
                    CreateByteField (Arg2, Zero, R_CL)
                    BUFF [Zero] = Zero
                    BUFF [One] = Arg1
                    BUFF [0x02] = RECX /* \G000.RECX */
                    BUFF [0x03] = REDX /* \G000.REDX */
                    BUFF [0x04] = RESI /* \G000.RESI */
                    BUFF [0x05] = REDI /* \G000.REDI */
                    If (GCVS)
                    {
                        If ((Arg0 == 0xFE00))
                        {
                            If ((R_CL == Zero))
                            {
                                Local0 = TNVS /* \TNVS */
                                BUFF [0x02] = Local0
                            }
                            ElseIf (((R_CL >= One) && (R_CL <= 0x04)))
                            {
                                Local0 = R_CL /* \G000.R_CL */
                                Local0 |= 0x3000
                                SMBR (0xFA00, Local0, Zero, Zero, 0xB2)
                                BUFF [0x02] = OECX /* \OECX */
                                BUFF [0x03] = OEDX /* \OEDX */
                            }
                            ElseIf ((R_CL == 0x05))
                            {
                                BUFF [0x02] = 0x21
                            }
                            ElseIf ((R_CL == 0x06))
                            {
                                BUFF [0x02] = One
                            }
                            Else
                            {
                                BUFF [Zero] = 0x8300
                            }
                        }
                        Else
                        {
                            CreateWordField (Arg3, Zero, R_DX)
                            If ((R_CL == Zero))
                            {
                                If ((R_DX == Zero))
                                {
                                    TNVS = Zero
                                }
                                Else
                                {
                                    TNVS = One
                                }
                            }
                            ElseIf ((R_CL == One))
                            {
                                Local0 = R_CL /* \G000.R_CL */
                                Local0 |= 0x3080
                                SMBR (0xFA00, Local0, R_DX, Zero, 0xB2)
                            }
                            ElseIf ((R_CL == 0x02))
                            {
                                HDSP (R_DX)
                            }
                            Else
                            {
                                BUFF [Zero] = 0x8300
                            }
                        }
                    }
                    Else
                    {
                        BUFF [Zero] = 0x8000
                    }

                    Return (BUFF) /* \G000.BUFF */
                }

                Method (G800, 6, NotSerialized)
                {
                    Name (BUFF, Package (0x06){})
                    BUFF [Zero] = Zero
                    BUFF [One] = Arg1
                    BUFF [0x02] = One
                    BUFF [0x03] = Arg3
                    BUFF [0x04] = Arg4
                    BUFF [0x05] = Arg5
                    Return (BUFF) /* \G800.BUFF */
                }

                Method (G801, 6, NotSerialized)
                {
                    CreateDWordField (Arg2, Zero, RECX)
                    CreateDWordField (Arg3, Zero, REDX)
                    CreateDWordField (Arg4, Zero, RESI)
                    CreateDWordField (Arg5, Zero, REDI)
                    Local0 = 0x8300
                    Local1 = RECX /* \G801.RECX */
                    If ((REDX == One))
                    {
                        Local0 = Zero
                        If ((Arg0 == 0xFE00))
                        {
                            Local1 = PULD /* \PULD */
                            Local2 = PULA /* \PULA */
                            Local2 <<= 0x08
                            Local1 |= Local2
                        }
                        Else
                        {
                            Local2 = (Local1 & 0xFF)
                            Local3 = (Local1 >> 0x08)
                            PULD = Local2
                            PULA = Local3
                        }
                    }

                    If ((REDX == 0x02))
                    {
                        Local0 = Zero
                        If ((Arg0 == 0xFE00))
                        {
                            Local1 = BCLD /* \BCLD */
                            Local2 = BCLA /* \BCLA */
                            Local2 <<= 0x08
                            Local1 |= Local2
                        }
                        Else
                        {
                            Local2 = (Local1 & 0xFF)
                            Local3 = (Local1 >> 0x08)
                            BCLD = Local2
                            BCLA = Local3
                        }
                    }

                    Name (BUFF, Package (0x06){})
                    BUFF [Zero] = Local0
                    BUFF [One] = Arg1
                    BUFF [0x02] = Local1
                    BUFF [0x03] = REDX /* \G801.REDX */
                    BUFF [0x04] = RESI /* \G801.RESI */
                    BUFF [0x05] = REDI /* \G801.REDI */
                    Return (BUFF) /* \G801.BUFF */
                }
            }

            Method (VNTF, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0xFFFF)
                Local1 = (Arg0 >> 0x10)
                If ((Local1 == One))
                {
                    PNOT ()
                }
            }

            Method (PLST, 0, NotSerialized)
            {
                Name (BUFF, Buffer (One)
                {
                     0x00                                             // .
                })
                CreateBitField (BUFF, Zero, PNL0)
                CreateBitField (BUFF, One, PNL1)
                PNL0 = PNLS /* \PNLS */
                PNL1 = LIDS /* \LIDS */
                Return (BUFF) /* \_SB_.VALZ.PLST.BUFF */
            }

            Method (MCNT, 0, Serialized)
            {
                Name (BUFF, Buffer (0x08){})
                CreateDWordField (BUFF, Zero, CAPA)
                CreateDWordField (BUFF, 0x04, CURR)
                SMBR (0xFA00, 0x3001, Zero, Zero, 0xB2)
                CAPA = OECX /* \OECX */
                CURR = OEDX /* \OEDX */
                Return (BUFF) /* \_SB_.VALZ.MCNT.BUFF */
            }

            Method (MDSP, 0, Serialized)
            {
                Name (BUFF, Buffer (0x08){})
                CreateDWordField (BUFF, Zero, CAPA)
                CreateDWordField (BUFF, 0x04, CURR)
                SMBR (0xFA00, 0x3002, Zero, Zero, 0xB2)
                CAPA = OECX /* \OECX */
                CURR = OEDX /* \OEDX */
                Return (BUFF) /* \_SB_.VALZ.MDSP.BUFF */
            }

            Method (VCHG, 1, Serialized)
            {
                HDSP (Arg0)
            }

            Method (VCID, 0, NotSerialized)
            {
                DLID = DCID /* \DCID */
                If (DCID)
                {
                    DCKD = One
                }

                Return (DCID) /* \DCID */
            }

            Method (VUID, 0, NotSerialized)
            {
                DSRN = DSNB /* \DSNB */
                Return (DSNB) /* \DSNB */
            }

            Method (VDCK, 1, NotSerialized)
            {
                If (Arg0)
                {
                    Local0 = (DCSS & 0x05)
                    If ((Local0 == 0x05))
                    {
                        ^^PCI0.PDRC.TRP4 = 0x41
                        Reset (DKSQ)
                        Wait (DKSQ, 0x0BB8)
                        VGAN ()
                        Return (One)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (VEJ0, 1, NotSerialized)
            {
                If (DCKD)
                {
                    DCKD = Zero
                    ^^PCI0.PDRC.TRP4 = 0x40
                    Reset (DKSQ)
                    Wait (DKSQ, 0x1388)
                }

                DLID = Zero
                DSRN = Zero
                Notify (VALZ, 0x83) // Device-Specific Change
                VGAN ()
                PNOT ()
            }

            Method (DLSZ, 0, NotSerialized)
            {
                Return (0x02)
            }

            Method (DLIB, 0, NotSerialized)
            {
                Name (BUFF, Buffer (0x20)
                {
                    /* 0000 */  0x80, 0x20, 0x03, 0x0C, 0x03, 0xE8, 0x00, 0x00,  // . ......
                    /* 0008 */  0x86, 0x80, 0x26, 0x1C, 0x00, 0x00, 0x00, 0x00,  // ..&.....
                    /* 0010 */  0x80, 0x00, 0x04, 0x06, 0xFF, 0xE5, 0x00, 0x00,  // ........
                    /* 0018 */  0x86, 0x80, 0x1A, 0x1C, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Return (BUFF) /* \_SB_.VALZ.DLIB.BUFF */
            }

            Method (ODLS, 0, NotSerialized)
            {
                Return (ODNA) /* \ODNA */
            }

            Method (ODLT, 0, NotSerialized)
            {
                Name (BUFF, Buffer (One){})
                CreateByteField (BUFF, Zero, DTYP)
                If ((^^PCI0.SAT0.PSCC != One))
                {
                    DTYP = 0x02
                }

                Return (BUFF) /* \_SB_.VALZ.ODLT.BUFF */
            }

            Method (ODLB, 0, NotSerialized)
            {
                Name (BUFF, Buffer (0x10){})
                CreateWordField (BUFF, Zero, VNID)
                CreateWordField (BUFF, 0x02, DVID)
                CreateWordField (BUFF, 0x04, SVID)
                CreateWordField (BUFF, 0x06, SSID)
                CreateByteField (BUFF, 0x08, RVID)
                CreateByteField (BUFF, 0x09, PRTN)
                VNID = ^^PCI0.SAT0.VNID /* External reference */
                DVID = ^^PCI0.SAT0.DVID /* External reference */
                SVID = ^^PCI0.SAT0.SVID /* External reference */
                SSID = ^^PCI0.SAT0.SSID /* External reference */
                RVID = ^^PCI0.SAT0.RVID /* External reference */
                If ((^^PCI0.SAT0.PSCC != One))
                {
                    PRTN = One
                    PRTN = 0x02
                }

                Return (BUFF) /* \_SB_.VALZ.ODLB.BUFF */
            }

            Method (HMB1, 0, NotSerialized)
            {
                Name (BUFF, Package (0x06){})
                BUFF [Zero] = SNR1 /* \SNR1 */
                BUFF [One] = CCM1 /* \CCM1 */
                BUFF [0x02] = TDT1 /* \TDT1 */
                BUFF [0x03] = TCC1 /* \TCC1 */
                BUFF [0x04] = TDC1 /* \TDC1 */
                BUFF [0x05] = TFC1 /* \TFC1 */
                Return (BUFF) /* \_SB_.VALZ.HMB1.BUFF */
            }

            Method (HMB2, 0, NotSerialized)
            {
                Name (BUFF, Package (0x06){})
                BUFF [Zero] = SNR2 /* \SNR2 */
                BUFF [One] = CCM2 /* \CCM2 */
                BUFF [0x02] = TDT2 /* \TDT2 */
                BUFF [0x03] = TCC2 /* \TCC2 */
                BUFF [0x04] = TDC2 /* \TDC2 */
                BUFF [0x05] = TFC2 /* \TFC2 */
                Return (BUFF) /* \_SB_.VALZ.HMB2.BUFF */
            }

            Method (SMDW, 5, Serialized)
            {
                SMHA = Arg0
                SMOF = Arg1
                SMWD = Arg4
                SMBR (0xFA00, 0xC000, Zero, Zero, 0xB2)
                OEAX &= 0xFF00
                If ((OEAX == Zero))
                {
                    Local0 = SMOF /* \SMOF */
                    Local0 <<= 0x08
                    Local0 |= 0x05
                    Local0 <<= 0x08
                    Local0 |= SMTY /* \SMTY */
                    IESI = SMHA /* \SMHA */
                    SMBR (0xFA00, 0x1100, Local0, SMLE, 0xB2)
                    OEAX &= 0xFF00
                }

                Return (OEAX) /* \OEAX */
            }
        }

        Device (HAPS)
        {
            Name (_HID, EisaId ("TOS620A"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HAPE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PTLV, 1, NotSerialized)
            {
                Local0 = Arg0
                Local0 |= 0x3500
                SMBR (0xFA00, Local0, Zero, Zero, 0xB2)
            }

            Method (RSSS, 0, NotSerialized)
            {
                SMBR (0xFA00, 0x3580, Zero, Zero, 0xB2)
            }
        }

        Device (BT)
        {
            Name (_HID, EisaId ("TOS6205"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (BTMD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (BTST, 0, Serialized)
            {
                OESI = Zero
                SMBR (0xFE00, 0x4D, One, 0x7D00, 0xB2)
                Local0 = One
                While (Local0)
                {
                    SMBR (0xFE00, 0x4D, 0x0101, 0x7D00, 0xB2)
                    Local2 = OESI /* \OESI */
                    Local1 = (OEAX & 0xFF00)
                    If (Local1)
                    {
                        Local1 = (OEAX & 0xFF)
                        If ((Local1 != 0x20))
                        {
                            Local2 = Zero
                            Local0 = Zero
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = (Local2 & 0x02)
                Local0 <<= 0x06
                Local1 = (Local2 & 0x04)
                Local1 <<= 0x04
                Local0 |= Local1
                Local3 = (Local2 & 0x10)
                Local3 >>= 0x04
                Local0 |= Local3
                Return (Local0)
            }

            Method (AUSB, 0, Serialized)
            {
                If (BTMD)
                {
                    IEDI = Zero
                    IESI = 0x03
                    SMBR (0xFF00, 0x4D, One, 0x7C00, 0xB2)
                    Local0 = One
                    While (Local0)
                    {
                        SMBR (0xFF00, 0x4D, 0x0101, 0x7C00, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If (Local1)
                        {
                            Local1 = (OEAX & 0xFF)
                            If ((Local1 != 0x20))
                            {
                                Local0 = Zero
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }
                }
            }

            Method (DUSB, 0, Serialized)
            {
                If (BTMD)
                {
                    IEDI = Zero
                    IESI = 0x04
                    SMBR (0xFF00, 0x4D, One, 0x7C00, 0xB2)
                    Local0 = One
                    While (Local0)
                    {
                        SMBR (0xFF00, 0x4D, 0x0101, 0x7C00, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If (Local1)
                        {
                            Local1 = (OEAX & 0xFF)
                            If ((Local1 != 0x20))
                            {
                                Local0 = Zero
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }
                }
            }

            Method (BTPO, 0, Serialized)
            {
                If (BTMD)
                {
                    IEDI = Zero
                    IESI = One
                    SMBR (0xFF00, 0x4D, One, 0x7C00, 0xB2)
                    Local0 = One
                    While (Local0)
                    {
                        SMBR (0xFF00, 0x4D, 0x0101, 0x7C00, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If (Local1)
                        {
                            Local1 = (OEAX & 0xFF)
                            If ((Local1 != 0x20))
                            {
                                Local0 = Zero
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }
                }
            }

            Method (BTPF, 0, Serialized)
            {
                If (BTMD)
                {
                    IEDI = Zero
                    IESI = 0x02
                    SMBR (0xFF00, 0x4D, One, 0x7C00, 0xB2)
                    Local0 = One
                    While (Local0)
                    {
                        SMBR (0xFF00, 0x4D, 0x0101, 0x7C00, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If (Local1)
                        {
                            Local1 = (OEAX & 0xFF)
                            If ((Local1 != 0x20))
                            {
                                Local0 = Zero
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }
                }
            }
        }

        Device (HS87)
        {
            Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07D6) && (GPAA == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (GHID, 0, NotSerialized)
            {
                If (GPAW)
                {
                    GPAW = Zero
                    Notify (HS87, 0x02) // Device Wake
                }

                Return (Buffer (0x04)
                {
                     0x01, 0x00, 0x00, 0x00                           // ....
                })
            }
        }

        Device (HS86)
        {
            Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07D6) && (GPBA == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (GHID, 0, NotSerialized)
            {
                If (GPBW)
                {
                    GPBW = Zero
                    Notify (HS86, 0x02) // Device Wake
                }

                Return (Buffer (0x04)
                {
                     0x02, 0x00, 0x00, 0x00                           // ....
                })
            }
        }

        Device (HS81)
        {
            Name (_HID, EisaId ("PNP0C32"))  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07D6) && (TPBA == One)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (GHID, 0, NotSerialized)
            {
                If (TPBW)
                {
                    TPBW = Zero
                    Notify (HS81, 0x02) // Device Wake
                }

                Return (Buffer (0x04)
                {
                     0x03, 0x00, 0x00, 0x00                           // ....
                })
            }
        }

        Device (ADP1)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (_STA, 0x0F)  // _STA: Status
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Return (PWRS) /* \PWRS */
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x08, 
                0x04
            })
            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Return (LIDS) /* \LIDS */
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x1D, 
                    0x04
                })
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                EWLD = Arg0
            }
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (BES1)
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Name (BUFF, Package (0x0D){})
                BUFF [Zero] = Zero
                Local2 = BDV1 /* \BDV1 */
                Local0 = (BDC1 * Local2)
                Divide (Local0, 0x03E8, Local1, Local0)
                BUFF [One] = Local0
                Local2 = BPV1 /* \BPV1 */
                Local0 = (BLF1 * Local2)
                Divide (Local0, 0x03E8, Local1, Local0)
                BUFF [0x02] = Local0
                BUFF [0x03] = BTC1 /* \BTC1 */
                BUFF [0x04] = BDV1 /* \BDV1 */
                Local0 = (BCW1 * Local2)
                Divide (Local0, 0x03E8, Local1, Local0)
                BUFF [0x05] = Local0
                Local0 = (BCL1 * Local2)
                Divide (Local0, 0x03E8, Local1, Local0)
                BUFF [0x06] = Local0
                Local0 = (BG11 * Local2)
                Divide (Local0, 0x03E8, Local1, Local0)
                BUFF [0x07] = Local0
                Local0 = (BG21 * Local2)
                Divide (Local0, 0x03E8, Local1, Local0)
                BUFF [0x08] = Local0
                BUFF [0x09] = BMN1 /* \BMN1 */
                BUFF [0x0A] = BSN1 /* \BSN1 */
                BUFF [0x0B] = BTP1 /* \BTP1 */
                BUFF [0x0C] = BOI1 /* \BOI1 */
                Return (BUFF) /* \_SB_.BAT1._BIF.BUFF */
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If (BES2)
                {
                    Local0 = (BST1 & 0x03)
                    Local1 = (BST2 & 0x03)
                    If ((Local0 || Local1))
                    {
                        Local0 = (BPR1 * BPV1) /* \BPV1 */
                        Divide (Local0, 0x07D0, Local1, Local0)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                ElseIf ((BST1 && 0x03))
                {
                    Local0 = (BPR1 * BPV1) /* \BPV1 */
                    Divide (Local0, 0x03E8, Local1, Local0)
                }
                Else
                {
                    Local0 = Zero
                }

                Name (BUFF, Package (0x04){})
                BUFF [Zero] = BST1 /* \BST1 */
                BUFF [One] = Local0
                Local0 = (BRC1 * BPV1) /* \BPV1 */
                Divide (Local0, 0x03E8, Local1, Local0)
                If (GP90)
                {
                    If (BSTG)
                    {
                        BUFF [Zero] = 0x05
                        Local2 = BDV1 /* \BDV1 */
                        Local0 = (BCW1 * Local2)
                        Divide (Local0, 0x2710, Local2, Local0)
                        BSTG = Zero
                    }
                    Else
                    {
                        BSTG = One
                    }
                }

                BUFF [0x02] = Local0
                BUFF [0x03] = BPV1 /* \BPV1 */
                Return (BUFF) /* \_SB_.BAT1._BST.BUFF */
            }
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000081
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 5D
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A007D   "
[018h 0024   4]                 Oem Revision : 00000003
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]                 FACS Address : AA6AD000
[028h 0040   4]                 DSDT Address : AA6DD000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : F0
[035h 0053   1]           ACPI Disable Value : F1
[036h 0054   1]               S4BIOS Command : F2
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000450
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 10
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 0039
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 7E
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000086A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : FE
/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 129 (0x81)

    0000: 46 41 43 50 81 00 00 00 02 5D 54 4F 53 48 49 42  // FACP.....]TOSHIB
    0010: 41 30 30 37 44 20 20 20 03 00 00 00 4C 4F 48 52  // A007D   ....LOHR
    0020: 5F 00 00 00 00 D0 6A AA 00 D0 6D AA 00 02 09 00  // _.....j...m.....
    0030: B2 00 00 00 F0 F1 F2 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 10 00 10 00  //  ...............
    0060: 65 00 39 00 00 00 00 00 01 03 0D 7E 00 03 00 00  // e.9........~....
    0070: A5 86 00 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: FE                                               // .


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C5
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A007D   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 C5 54 4F 53 48 49 42  // HPET8.....TOSHIB
    0010: 41 30 30 37 44 20 20 20 01 00 00 00 4C 4F 48 52  // A007D   ....LOHR
    0020: 5F 00 00 00 01 A2 86 80 00 00 00 00 00 00 D0 FE  // _...............
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 95
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A007D   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 95 54 4F 53 48 49 42  // MCFG<.....TOSHIB
    0010: 41 30 30 37 44 20 20 20 01 00 00 00 4C 4F 48 52  // A007D   ....LOHR
    0020: 5F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // _...............
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 73
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A007D   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 01 D1 F8 E2 \
    2E 9E 56 65 20 B2 3C D6 8C A8 AB EE E9 1D D7 45 \
    EB 6B 72 AD 45 B9 29 86 AE AA 8C 53 39 F4 25 BE \
    B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60 A0 72 47 E6 \
    F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC 1A 6E AF D4 \
    7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90 F5 B0 34 F2 \
    03 C2 9A 7D DD E7 52 4C E8 63 04 6B 00 A7 B5 AB \
    C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A 56 9B D7 45 \
    81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5 01 00 00 00 \
    B6 00 00 00 00 00 02 00 54 4F 53 48 49 42 41 30 \
    30 37 44 20 20 20 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 59 0E 67 B5 59 EF 49 78 D7 A7 9F 1D B3 9E \
    70 A3 A0 5A 9B 80 72 CF A3 70 CA EB D2 C3 A4 9F \
    6F 72 28 B5 73 DD C9 5C 02 2E 2C 1A 04 36 0D 9B \
    8D C4 38 13 94 27 A3 7D 95 A3 A5 E3 28 1E DD 4C \
    E9 82 C6 A8 C7 18 CE 21 94 DD DC A7 9D 9A 93 3A \
    EA C1 C4 1D F4 D0 C7 30 0A 6F B1 28 D1 8D DD 36 \
    67 13 8D 1F D8 6B 17 C9 85 25 05 7F C3 43 C1 AE \
    EE BC 72 5F FF 7B 13 38 3E 6A 11 BD 14 BC 2C A6 \
    F0 61 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 73 54 4F 53 48 49 42  // SLICv....sTOSHIB
    0010: 41 30 30 37 44 20 20 20 00 00 00 00 4C 4F 48 52  // A007D   ....LOHR
    0020: 5F 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // _...............
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE  // ......Ve .<.....
    0050: E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53  // ...E.kr.E.)....S
    0060: 39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60  // 9.%............`
    0070: A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC  // .rG....?`.......
    0080: 1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90  // .n..}.._ZQ.h..=.
    0090: F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B  // ..4....}..RL.c.k
    00A0: 00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A  // .....o5.z...O).j
    00B0: 56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5  // V..E..7..K.S[<..
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 48  // ............TOSH
    00D0: 49 42 41 30 30 37 44 20 20 20 57 49 4E 44 4F 57  // IBA007D   WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 59 0E 67 B5 59 EF 49 78 D7 A7  // ......Y.g.Y.Ix..
    0100: 9F 1D B3 9E 70 A3 A0 5A 9B 80 72 CF A3 70 CA EB  // ....p..Z..r..p..
    0110: D2 C3 A4 9F 6F 72 28 B5 73 DD C9 5C 02 2E 2C 1A  // ....or(.s..\..,.
    0120: 04 36 0D 9B 8D C4 38 13 94 27 A3 7D 95 A3 A5 E3  // .6....8..'.}....
    0130: 28 1E DD 4C E9 82 C6 A8 C7 18 CE 21 94 DD DC A7  // (..L.......!....
    0140: 9D 9A 93 3A EA C1 C4 1D F4 D0 C7 30 0A 6F B1 28  // ...:.......0.o.(
    0150: D1 8D DD 36 67 13 8D 1F D8 6B 17 C9 85 25 05 7F  // ...6g....k...%..
    0160: C3 43 C1 AE EE BC 72 5F FF 7B 13 38 3E 6A 11 BD  // .C....r_.{.8>j..
    0170: 14 BC 2C A6 F0 61                                // ..,..a


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (GSVM, UnknownObj)
    External (HPSU, IntObj)
    External (NPSS, IntObj)
    External (PDC0, UnknownObj)
    External (PULA, IntObj)
    External (PULD, IntObj)
    External (PWRS, IntObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU0)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            If ((GSVM == One))
            {
                If (HPSU)
                {
                    If (PWRS)
                    {
                        Return (PULA) /* External reference */
                    }
                    Else
                    {
                        Return (PULD) /* External reference */
                    }
                }
            }

            Return (Zero)
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x10,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x00000000000000B3, // Address
                        ,)
                }
            })
        }

        Method (XPSS, 0, NotSerialized)
        {
            If ((PDC0 & One))
            {
                Return (NPSS) /* External reference */
            }

            Return (SPSS) /* \_PR_.CPU0.SPSS */
        }

        Name (SPSS, Package (0x09)
        {
            Package (0x06)
            {
                0x000009C5, 
                0x000088B8, 
                0x0000006E, 
                0x0000000A, 
                0x00000083, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000088B8, 
                0x0000006E, 
                0x0000000A, 
                0x00000183, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000673A, 
                0x0000006E, 
                0x0000000A, 
                0x00000283, 
                0x00000002
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00005AC1, 
                0x0000006E, 
                0x0000000A, 
                0x00000383, 
                0x00000003
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004EC4, 
                0x0000006E, 
                0x0000000A, 
                0x00000483, 
                0x00000004
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x0000434A, 
                0x0000006E, 
                0x0000000A, 
                0x00000583, 
                0x00000005
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00003848, 
                0x0000006E, 
                0x0000000A, 
                0x00000683, 
                0x00000006
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00002DC1, 
                0x0000006E, 
                0x0000000A, 
                0x00000783, 
                0x00000007
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000023B4, 
                0x0000006E, 
                0x0000000A, 
                0x00000883, 
                0x00000008
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (_PSS, Package (0x09)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C5, 
                0x000088B8, 
                0x0000000A, 
                0x0000000A, 
                0x00002000, 
                0x00002000
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x000088B8, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x0000673A, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00005AC1, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00004EC4, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x0000434A, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00003848, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00002DC1, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000023B4, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU0.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU0.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "TOSHIB", "SataSec", 0x00001000)
{
    /*
     * iASL Warning: There were 7 external control methods found during
     * disassembly, but only 0 were resolved (7 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.SAT0, DeviceObj)
    External (GDMA, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (GETF, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (GETP, IntObj)
    External (GETT, IntObj)
    External (ICR0, UnknownObj)
    External (ICR1, UnknownObj)
    External (ICR3, UnknownObj)
    External (ICR5, UnknownObj)
    External (SDMA, IntObj)
    External (SDT2, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SDT3, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SECT, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SETP, UnknownObj)
    External (SETT, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (SSIT, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SYNC, UnknownObj)

    Scope (\_SB.PCI0.SAT0)
    {
        Device (SECD)
        {
            Name (_ADR, One)  // _ADR: Address
            Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
            {
                Name (SBUF, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateDWordField (SBUF, Zero, PIO0)
                CreateDWordField (SBUF, 0x04, DMA0)
                CreateDWordField (SBUF, 0x08, PIO1)
                CreateDWordField (SBUF, 0x0C, DMA1)
                CreateDWordField (SBUF, 0x10, FLAG)
                SECT () = GETP /* External reference */
                PIO0
                (ICR1 & 0x04) = GDMA ((SYNC & 0x04), (ICR3 & 
                    0x04), (ICR0 & 0x04), SDT2 ())
                DMA0
                If ((DMA0 == Ones))
                {
                    DMA0 = PIO0 /* \_SB_.PCI0.SAT0.SECD._GTM.PIO0 */
                }

                If ((SECT () & 0x4000))
                {
                    If (((SECT () & 0x90) == 0x80))
                    {
                        PIO1 = 0x0384
                    }
                    Else
                    {
                        SSIT () = GETT /* External reference */
                        PIO1
                    }
                }
                Else
                {
                    PIO1 = Ones
                }

                (ICR1 & 0x08) = GDMA ((SYNC & 0x08), (ICR3 & 
                    0x08), (ICR0 & 0x08), SDT3 ())
                DMA1
                If ((DMA1 == Ones))
                {
                    DMA1 = PIO1 /* \_SB_.PCI0.SAT0.SECD._GTM.PIO1 */
                }

                SECT () = GETF ((SYNC & 0x04), (SYNC & 0x08))
                FLAG
                If (((PIO0 == Ones) & (DMA0 == Ones)))
                {
                    PIO0 = 0x78
                    DMA0 = 0x14
                    FLAG = 0x03
                }

                Return (SBUF) /* \_SB_.PCI0.SAT0.SECD._GTM.SBUF */
            }

            Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
            {
                CreateDWordField (Arg0, Zero, PIO0)
                CreateDWordField (Arg0, 0x04, DMA0)
                CreateDWordField (Arg0, 0x08, PIO1)
                CreateDWordField (Arg0, 0x0C, DMA1)
                CreateDWordField (Arg0, 0x10, FLAG)
                If ((SizeOf (Arg1) == 0x0200))
                {
                    SECT () &= 0xC0F0
                    SYNC &= 0x0B
                    SDT2 () = Zero
                    ICR0 &= 0x0B
                    ICR1 &= 0x0B
                    ICR3 &= 0x0B
                    ICR5 &= 0x0B
                    CreateWordField (Arg1, 0x62, W490)
                    CreateWordField (Arg1, 0x6A, W530)
                    CreateWordField (Arg1, 0x7E, W630)
                    CreateWordField (Arg1, 0x80, W640)
                    CreateWordField (Arg1, 0xB0, W880)
                    CreateWordField (Arg1, 0xBA, W930)
                    SECT () |= 0x8004
                    If (((FLAG & 0x02) && (W490 & 0x0800)))
                    {
                        SECT () |= 0x02
                    }

                    PIO0 = (SECT () | SETP) /* External reference */
                    W530
                    W640
                    SECT ()
                    If ((FLAG & One))
                    {
                        SYNC |= 0x04
                        DMA0 = SDMA /* External reference */
                        SDT2 ()
                        If ((DMA0 < 0x1E))
                        {
                            ICR3 |= 0x04
                        }

                        If ((DMA0 < 0x3C))
                        {
                            ICR0 |= 0x04
                        }

                        If ((W930 & 0x2000))
                        {
                            ICR1 |= 0x04
                        }
                    }
                }

                If ((SizeOf (Arg2) == 0x0200))
                {
                    SECT () &= 0xBF0F
                    SSIT () = Zero
                    SYNC &= 0x07
                    SDT3 () = Zero
                    ICR0 &= 0x07
                    ICR1 &= 0x07
                    ICR3 &= 0x07
                    ICR5 &= 0x07
                    CreateWordField (Arg2, 0x62, W491)
                    CreateWordField (Arg2, 0x6A, W531)
                    CreateWordField (Arg2, 0x7E, W631)
                    CreateWordField (Arg2, 0x80, W641)
                    CreateWordField (Arg2, 0xB0, W881)
                    CreateWordField (Arg2, 0xBA, W931)
                    SECT () |= 0x8040
                    If (((FLAG & 0x08) && (W491 & 0x0800)))
                    {
                        SECT () |= 0x20
                    }

                    If ((FLAG & 0x10))
                    {
                        SECT () |= 0x4000
                        If ((PIO1 > 0xF0))
                        {
                            SECT () |= 0x80
                        }
                        Else
                        {
                            SECT () |= 0x10
                            W641 = SETT (PIO1, W531)
                            SSIT ()
                        }
                    }

                    If ((FLAG & 0x04))
                    {
                        SYNC |= 0x08
                        DMA1 = SDMA /* External reference */
                        SDT3 ()
                        If ((DMA1 < 0x1E))
                        {
                            ICR3 |= 0x08
                        }

                        If ((DMA1 < 0x3C))
                        {
                            ICR0 |= 0x08
                        }

                        If ((W931 & 0x2000))
                        {
                            ICR1 |= 0x08
                        }
                    }
                }
            }

            Device (S_D0)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Name (SIB0, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                    })
                    CreateByteField (SIB0, One, PMD0)
                    CreateByteField (SIB0, 0x08, DMD0)
                    If ((SECT () & 0x02))
                    {
                        If (((SECT () & 0x09) == 0x08))
                        {
                            PMD0 = 0x08
                        }
                        Else
                        {
                            PMD0 = 0x0A
                            Local0 = ((SECT () & 0x0300) >> 0x08)
                            Local1 = ((SECT () & 0x3000) >> 0x0C)
                            Local2 = (Local0 + Local1)
                            If ((0x03 == Local2))
                            {
                                PMD0 = 0x0B
                            }

                            If ((0x05 == Local2))
                            {
                                PMD0 = 0x0C
                            }
                        }
                    }
                    Else
                    {
                        PMD0 = One
                    }

                    If ((SYNC & 0x04))
                    {
                        DMD0 = (SDT2 () | 0x40)
                        If ((ICR1 & 0x04))
                        {
                            If ((ICR0 & 0x04))
                            {
                                DMD0 += 0x02
                            }

                            If ((ICR3 & 0x04))
                            {
                                DMD0 = 0x45
                            }
                        }
                    }
                    Else
                    {
                        DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                    }

                    Return (SIB0) /* \_SB_.PCI0.SAT0.SECD.S_D0._GTF.SIB0 */
                }
            }

            Device (S_D1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Name (SIB1, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                    })
                    CreateByteField (SIB1, One, PMD1)
                    CreateByteField (SIB1, 0x08, DMD1)
                    If ((SECT () & 0x20))
                    {
                        If (((SECT () & 0x90) == 0x80))
                        {
                            PMD1 = 0x08
                        }
                        Else
                        {
                            Local0 = ((SSIT () & 0x03) + ((SSIT () & 0x0C) >> 0x02
                                ))
                            If ((0x05 == Local0))
                            {
                                PMD1 = 0x0C
                            }
                            ElseIf ((0x03 == Local0))
                            {
                                PMD1 = 0x0B
                            }
                            Else
                            {
                                PMD1 = 0x0A
                            }
                        }
                    }
                    Else
                    {
                        PMD1 = One
                    }

                    If ((SYNC & 0x08))
                    {
                        DMD1 = (SDT3 () | 0x40)
                        If ((ICR1 & 0x08))
                        {
                            If ((ICR0 & 0x08))
                            {
                                DMD1 += 0x02
                            }

                            If ((ICR3 & 0x08))
                            {
                                DMD1 = 0x45
                            }
                        }
                    }
                    Else
                    {
                        DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                    }

                    Return (SIB1) /* \_SB_.PCI0.SAT0.SECD.S_D1._GTF.SIB1 */
                }
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0xA8973018, 
            0x000007E5, 
            "APIST   ", 
            0xAAFD7A98, 
            0x00000303, 
            "CPU0CST ", 
            0xAAFD6798, 
            0x0000071E, 
            "APCST   ", 
            0xAAFD5D98, 
            0x00000119
        })
        Name (CFGD, 0x0076F6FF)
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & 0x3E))
            {
                If ((((CFGD & 0x0400) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC0 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC0 & 0x18))
            {
                APCT ()
            }

            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x2E) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & One))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & One))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & One))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & One))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            Return (Zero)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "TOSHIB", "PtidDevc", 0x00001000)
{
    External (_SB_.PCI0.LPCB.H_EC.AMBT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CFSP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.CPAP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.CPUP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.CVRT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.DIM0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.DIM1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.DTMP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.FANT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MCAP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.MCHP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.MFSP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PCDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PMAX, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PMDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PPDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.SKNT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.SYAP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.SYSP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD3, UnknownObj)
    External (DTS1, UnknownObj)
    External (DTS2, UnknownObj)

    Scope (\_SB)
    {
        Device (PTID)
        {
            Name (_HID, EisaId ("INT340E") /* Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (IVER, 0x00020001)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (TMPV, Package (0x33)
            {
                Zero, 
                "CPU Thermal Diode Temperature", 
                0x80000000, 
                Zero, 
                "CPU Core 0 DTS", 
                0x80000000, 
                Zero, 
                "CPU Core 1 DTS", 
                0x80000000, 
                0x03, 
                "CPU VR (IMVP) Temperature", 
                0x80000000, 
                0x03, 
                "Heat Exchanger Fan Temperature", 
                0x80000000, 
                0x03, 
                "Skin Temperature", 
                0x80000000, 
                0x03, 
                "Ambient Temperature", 
                0x80000000, 
                0x02, 
                "DIMM0 Temperature", 
                0x80000000, 
                0x02, 
                "DIMM1 Temperature", 
                0x80000000, 
                Zero, 
                "CPU, MCH & PCH Max Temperature", 
                0x80000000, 
                Zero, 
                "CPU DTS Temperature from PCH", 
                0x80000000, 
                0x05, 
                "MCH DTS Temperature from PCH", 
                0x80000000, 
                0x05, 
                "PCH DTS Temperature from PCH", 
                0x80000000, 
                0x02, 
                "TS-on-DIMM0 Temperature", 
                0x80000000, 
                0x02, 
                "TS-on-DIMM1 Temperature", 
                0x80000000, 
                0x02, 
                "TS-on-DIMM2 Temperature", 
                0x80000000, 
                0x02, 
                "TS-on-DIMM3 Temperature", 
                0x80000000
            })
            Name (PWRV, Package (0x12)
            {
                Zero, 
                "CPU Power", 
                0x80000000, 
                One, 
                "Gfx Core Power", 
                0x80000000, 
                0x0A, 
                "System Power", 
                0x80000000, 
                Zero, 
                "CPU Average Power", 
                0x80000000, 
                One, 
                "Gfx Core Average Power", 
                0x80000000, 
                0x0A, 
                "System Average Power", 
                0x80000000
            })
            Name (OSDV, Package (0x08)
            {
                Zero, 
                "CPU Fan Speed", 
                "RPM", 
                0x80000000, 
                0x05, 
                "GMCH Fan Speed ", 
                "RPM", 
                0x80000000
            })
            Method (TSDD, 0, NotSerialized)
            {
                TMPV [0x02] = ((\_SB.PCI0.LPCB.H_EC.DTMP * 0x0A) + 0x0AAC)
                TMPV [0x05] = ((DTS1 * 0x0A) + 0x0AAC)
                TMPV [0x08] = ((DTS2 * 0x0A) + 0x0AAC)
                TMPV [0x0B] = ((\_SB.PCI0.LPCB.H_EC.CVRT * 0x0A) + 0x0AAC)
                TMPV [0x0E] = ((\_SB.PCI0.LPCB.H_EC.FANT * 0x0A) + 0x0AAC)
                TMPV [0x11] = ((\_SB.PCI0.LPCB.H_EC.SKNT * 0x0A) + 0x0AAC)
                TMPV [0x14] = ((\_SB.PCI0.LPCB.H_EC.AMBT * 0x0A) + 0x0AAC)
                TMPV [0x17] = ((\_SB.PCI0.LPCB.H_EC.DIM0 * 0x0A) + 0x0AAC)
                TMPV [0x1A] = ((\_SB.PCI0.LPCB.H_EC.DIM1 * 0x0A) + 0x0AAC)
                TMPV [0x1D] = ((\_SB.PCI0.LPCB.H_EC.PMAX * 0x0A) + 0x0AAC)
                TMPV [0x20] = ((\_SB.PCI0.LPCB.H_EC.PCDT * 0x0A) + 0x0AAC)
                TMPV [0x23] = ((\_SB.PCI0.LPCB.H_EC.PMDT * 0x0A) + 0x0AAC)
                TMPV [0x26] = ((\_SB.PCI0.LPCB.H_EC.PPDT * 0x0A) + 0x0AAC)
                TMPV [0x29] = ((\_SB.PCI0.LPCB.H_EC.TSD0 * 0x0A) + 0x0AAC)
                TMPV [0x2C] = ((\_SB.PCI0.LPCB.H_EC.TSD1 * 0x0A) + 0x0AAC)
                TMPV [0x2F] = ((\_SB.PCI0.LPCB.H_EC.TSD2 * 0x0A) + 0x0AAC)
                TMPV [0x32] = ((\_SB.PCI0.LPCB.H_EC.TSD3 * 0x0A) + 0x0AAC)
                Return (TMPV) /* \_SB_.PTID.TMPV */
            }

            Method (PSDD, 0, NotSerialized)
            {
                PWRV [0x02] = \_SB.PCI0.LPCB.H_EC.CPUP /* External reference */
                PWRV [0x05] = \_SB.PCI0.LPCB.H_EC.MCHP /* External reference */
                PWRV [0x08] = (\_SB.PCI0.LPCB.H_EC.SYSP * 0x0A)
                PWRV [0x0B] = \_SB.PCI0.LPCB.H_EC.CPAP /* External reference */
                PWRV [0x0E] = \_SB.PCI0.LPCB.H_EC.MCAP /* External reference */
                PWRV [0x11] = (\_SB.PCI0.LPCB.H_EC.SYAP * 0x0A)
                Return (PWRV) /* \_SB_.PTID.PWRV */
            }

            Method (OSDD, 0, NotSerialized)
            {
                OSDV [0x03] = \_SB.PCI0.LPCB.H_EC.CFSP /* External reference */
                OSDV [0x07] = \_SB.PCI0.LPCB.H_EC.MFSP /* External reference */
                Return (OSDV) /* \_SB_.PTID.OSDV */
            }

            Method (SDSP, 0, NotSerialized)
            {
                Return (0x0A)
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "TOSHIB", "SataPri", 0x00001000)
{
    /*
     * iASL Warning: There were 9 external control methods found during
     * disassembly, but only 0 were resolved (9 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.SAT0, DeviceObj)
    External (GDMA, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (GETF, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (GETP, IntObj)
    External (GETT, IntObj)
    External (GSBS, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (ICR0, UnknownObj)
    External (ICR1, UnknownObj)
    External (ICR3, UnknownObj)
    External (ICR5, UnknownObj)
    External (PRIT, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (PSIT, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SBTB, UnknownObj)
    External (SDMA, IntObj)
    External (SDT0, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SDT1, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (SETP, UnknownObj)
    External (SETT, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (SH2X, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (SYNC, UnknownObj)

    Scope (\_SB.PCI0.SAT0)
    {
        OperationRegion (SATC, PCI_Config, Zero, 0x0100)
        Field (SATC, ByteAcc, NoLock, Preserve)
        {
            VNID,   16, 
            DVID,   16, 
            Offset (0x08), 
            RVID,   8, 
            Offset (0x0A), 
            PSCC,   8, 
            Offset (0x2C), 
            SVID,   16, 
            SSID,   16
        }

        Device (PRID)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
            {
                Name (PBUF, Buffer (0x14)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                CreateDWordField (PBUF, Zero, PIO0)
                CreateDWordField (PBUF, 0x04, DMA0)
                CreateDWordField (PBUF, 0x08, PIO1)
                CreateDWordField (PBUF, 0x0C, DMA1)
                CreateDWordField (PBUF, 0x10, FLAG)
                PRIT () = GETP /* External reference */
                PIO0
                (ICR1 & One) = GDMA ((SYNC & One), (ICR3 & 
                    One), (ICR0 & One), SDT0 ())
                DMA0
                If ((DMA0 == Ones))
                {
                    DMA0 = PIO0 /* \_SB_.PCI0.SAT0.PRID._GTM.PIO0 */
                }

                If ((PRIT () & 0x4000))
                {
                    If (((PRIT () & 0x90) == 0x80))
                    {
                        PIO1 = 0x0384
                    }
                    Else
                    {
                        PSIT () = GETT /* External reference */
                        PIO1
                    }
                }
                Else
                {
                    PIO1 = Ones
                }

                (ICR1 & 0x02) = GDMA ((SYNC & 0x02), (ICR3 & 
                    0x02), (ICR0 & 0x02), SDT1 ())
                DMA1
                If ((DMA1 == Ones))
                {
                    DMA1 = PIO1 /* \_SB_.PCI0.SAT0.PRID._GTM.PIO1 */
                }

                PRIT () = GETF ((SYNC & One), (SYNC & 0x02))
                FLAG
                Return (PBUF) /* \_SB_.PCI0.SAT0.PRID._GTM.PBUF */
            }

            Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
            {
                CreateDWordField (Arg0, Zero, PIO0)
                CreateDWordField (Arg0, 0x04, DMA0)
                CreateDWordField (Arg0, 0x08, PIO1)
                CreateDWordField (Arg0, 0x0C, DMA1)
                CreateDWordField (Arg0, 0x10, FLAG)
                If ((SizeOf (Arg1) == 0x0200))
                {
                    PRIT () &= 0xC0F0
                    SYNC &= 0x0E
                    SDT0 () = Zero
                    ICR0 &= 0x0E
                    ICR1 &= 0x0E
                    ICR3 &= 0x0E
                    ICR5 &= 0x0E
                    CreateWordField (Arg1, 0x62, W490)
                    CreateWordField (Arg1, 0x6A, W530)
                    CreateWordField (Arg1, 0x7E, W630)
                    CreateWordField (Arg1, 0x80, W640)
                    CreateWordField (Arg1, 0xB0, W880)
                    CreateWordField (Arg1, 0xBA, W930)
                    PRIT () |= 0x8004
                    If (((FLAG & 0x02) && (W490 & 0x0800)))
                    {
                        PRIT () |= 0x02
                    }

                    PIO0 = (PRIT () | SETP) /* External reference */
                    W530
                    W640
                    PRIT ()
                    If ((FLAG & One))
                    {
                        SYNC |= One
                        DMA0 = SDMA /* External reference */
                        SDT0 ()
                        If ((DMA0 < 0x1E))
                        {
                            ICR3 |= One
                        }

                        If ((DMA0 < 0x3C))
                        {
                            ICR0 |= One
                        }

                        ICR1 |= One
                    }
                }

                If ((SizeOf (Arg2) == 0x0200))
                {
                    PRIT () &= 0xBF0F
                    PSIT () = Zero
                    SYNC &= 0x0D
                    SDT1 () = Zero
                    ICR0 &= 0x0D
                    ICR1 &= 0x0D
                    ICR3 &= 0x0D
                    ICR5 &= 0x0D
                    CreateWordField (Arg2, 0x62, W491)
                    CreateWordField (Arg2, 0x6A, W531)
                    CreateWordField (Arg2, 0x7E, W631)
                    CreateWordField (Arg2, 0x80, W641)
                    CreateWordField (Arg2, 0xB0, W881)
                    CreateWordField (Arg2, 0xBA, W931)
                    PRIT () |= 0x8040
                    If (((FLAG & 0x08) && (W491 & 0x0800)))
                    {
                        PRIT () |= 0x20
                    }

                    If ((FLAG & 0x10))
                    {
                        PRIT () |= 0x4000
                        If ((PIO1 > 0xF0))
                        {
                            PRIT () |= 0x80
                        }
                        Else
                        {
                            PRIT () |= 0x10
                            W641 = SETT (PIO1, W531)
                            PSIT ()
                        }
                    }

                    If ((FLAG & 0x04))
                    {
                        SYNC |= 0x02
                        DMA1 = SDMA /* External reference */
                        SDT1 ()
                        If ((DMA1 < 0x1E))
                        {
                            ICR3 |= 0x02
                        }

                        If ((DMA1 < 0x3C))
                        {
                            ICR0 |= 0x02
                        }

                        ICR1 |= 0x02
                    }
                }
            }

            Device (P_D0)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Name (PIB0, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                    })
                    CreateByteField (PIB0, One, PMD0)
                    CreateByteField (PIB0, 0x08, DMD0)
                    If ((PRIT () & 0x02))
                    {
                        If (((PRIT () & 0x09) == 0x08))
                        {
                            PMD0 = 0x08
                        }
                        Else
                        {
                            PMD0 = 0x0A
                            Local0 = ((PRIT () & 0x0300) >> 0x08)
                            Local1 = ((PRIT () & 0x3000) >> 0x0C)
                            Local2 = (Local0 + Local1)
                            If ((0x03 == Local2))
                            {
                                PMD0 = 0x0B
                            }

                            If ((0x05 == Local2))
                            {
                                PMD0 = 0x0C
                            }
                        }
                    }
                    Else
                    {
                        PMD0 = One
                    }

                    If ((SYNC & One))
                    {
                        DMD0 = (SDT0 () | 0x40)
                        If ((ICR1 & One))
                        {
                            If ((ICR0 & One))
                            {
                                DMD0 += 0x02
                            }

                            If ((ICR3 & One))
                            {
                                DMD0 = 0x45
                            }
                        }
                    }
                    Else
                    {
                        DMD0 = (((PMD0 & 0x07) - 0x02) | 0x20)
                    }

                    Return (PIB0) /* \_SB_.PCI0.SAT0.PRID.P_D0._GTF.PIB0 */
                }
            }

            Device (P_D1)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                {
                    Name (PIB1, Buffer (0x0E)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                    })
                    CreateByteField (PIB1, One, PMD1)
                    CreateByteField (PIB1, 0x08, DMD1)
                    If ((PRIT () & 0x20))
                    {
                        If (((PRIT () & 0x90) == 0x80))
                        {
                            PMD1 = 0x08
                        }
                        Else
                        {
                            Local0 = ((PSIT () & 0x03) + ((PSIT () & 0x0C) >> 0x02
                                ))
                            If ((0x05 == Local0))
                            {
                                PMD1 = 0x0C
                            }
                            ElseIf ((0x03 == Local0))
                            {
                                PMD1 = 0x0B
                            }
                            Else
                            {
                                PMD1 = 0x0A
                            }
                        }
                    }
                    Else
                    {
                        PMD1 = One
                    }

                    If ((SYNC & 0x02))
                    {
                        DMD1 = (SDT1 () | 0x40)
                        If ((ICR1 & 0x02))
                        {
                            If ((ICR0 & 0x02))
                            {
                                DMD1 += 0x02
                            }

                            If ((ICR3 & 0x02))
                            {
                                DMD1 = 0x45
                            }
                        }
                    }
                    Else
                    {
                        DMD1 = (((PMD1 & 0x07) - 0x02) | 0x20)
                    }

                    Return (PIB1) /* \_SB_.PCI0.SAT0.PRID.P_D1._GTF.PIB1 */
                }

                Method (XEJ0, 1, NotSerialized)
                {
                    GSBS ()
                    If ((SBTB == 0x02))
                    {
                        SH2X (0x03)
                    }
                }

                Name (_PLD, ToPLD (
                    PLD_Revision           = 0x1,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x0,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "UNKNOWN",
                    PLD_VerticalPosition   = "UPPER",
                    PLD_HorizontalPosition = "LEFT",
                    PLD_Shape              = "UNKNOWN",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x1,
                    PLD_Ejectable          = 0x0,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0)
)  // _PLD: Physical Location of Device
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSD, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)
    External (PFLV, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (C1LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000000, // Address
                    0x01,               // Access Size
                    )
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C1LH, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C3LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000010, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x02, 
            0x9C, 
            0x01F4
        })
        Name (C7SM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000031, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xC7, 
            0xC8
        })
        Name (C7LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000030, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xC7, 
            0xC8
        })
        Name (C6LM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x02,               // Bit Offset
                    0x0000000000000020, // Address
                    0x01,               // Access Size
                    )
            }, 

            0x03, 
            0xB5, 
            0x015E
        })
        Name (C3LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000414, // Address
                    ,)
            }, 

            0x02, 
            0x9C, 
            0x01F4
        })
        Name (C6LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000415, // Address
                    ,)
            }, 

            0x03, 
            0xB5, 
            0x015E
        })
        Name (C7LI, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000416, // Address
                    ,)
            }, 

            0x03, 
            0xC7, 
            0xC8
        })
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00){}
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If ((!CSTF && (CFGD & 0x00400000)))
            {
                C3LI [0x02] = 0x50
                C3LM [0x02] = 0x50
                C7SM [0x02] = 0x6D
                C7LM [0x02] = 0x6D
                C6LM [0x02] = 0x68
                C7LI [0x02] = 0x6D
                C6LI [0x02] = 0x68
                CSTF = Ones
            }

            If (((CFGD & 0x1000) && (PDC0 & 0x0200)))
            {
                If ((!PWRS || (PFLV != One)))
                {
                    If ((CFGD & 0x00010000))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C7SM /* \_PR_.CPU0.C7SM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7SM /* \_PR_.CPU0.C7SM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x20))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C7LM /* \_PR_.CPU0.C7LM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7LM /* \_PR_.CPU0.C7LM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x10))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                            C3ST [0x03] = C6LM /* \_PR_.CPU0.C6LM */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C6LM /* \_PR_.CPU0.C6LM */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x08))
                    {
                        C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        C2ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                    Else
                    {
                        C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        Return (C1ST) /* \_PR_.CPU0.C1ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C6LM /* \_PR_.CPU0.C6LM */
                    DerefOf (C2ST [0x02]) [One] = 0x02
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                ElseIf ((CFGD & 0x08))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C3LM /* \_PR_.CPU0.C3LM */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If (((CFGD & 0x1000) && (PDC0 & 0x0100)))
            {
                If ((!PWRS || (PFLV != One)))
                {
                    If ((CFGD & 0x20))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                            C3ST [0x03] = C7LI /* \_PR_.CPU0.C7LI */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C7LI /* \_PR_.CPU0.C7LI */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x10))
                    {
                        If ((CFGD & 0x08))
                        {
                            C3ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                            C3ST [0x03] = C6LI /* \_PR_.CPU0.C6LI */
                            Return (C3ST) /* \_PR_.CPU0.C3ST */
                        }
                        Else
                        {
                            C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                            C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                            Return (C2ST) /* \_PR_.CPU0.C2ST */
                        }
                    }

                    If ((CFGD & 0x08))
                    {
                        C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                    Else
                    {
                        C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                        Return (C1ST) /* \_PR_.CPU0.C1ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                    DerefOf (C2ST [0x02]) [One] = 0x02
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                ElseIf ((CFGD & 0x08))
                {
                    C2ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LM /* \_PR_.CPU0.C1LM */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If ((!PWRS || (PFLV != One)))
            {
                If ((CFGD & 0x20))
                {
                    If ((CFGD & 0x08))
                    {
                        C3ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        C3ST [0x03] = C7LI /* \_PR_.CPU0.C7LI */
                        Return (C3ST) /* \_PR_.CPU0.C3ST */
                    }
                    Else
                    {
                        C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C2ST [0x02] = C7LI /* \_PR_.CPU0.C7LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                }

                If ((CFGD & 0x10))
                {
                    If ((CFGD & 0x08))
                    {
                        C3ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C3ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                        C3ST [0x03] = C6LI /* \_PR_.CPU0.C6LI */
                        Return (C3ST) /* \_PR_.CPU0.C3ST */
                    }
                    Else
                    {
                        C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                        C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                        Return (C2ST) /* \_PR_.CPU0.C2ST */
                    }
                }

                If ((CFGD & 0x08))
                {
                    C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                    C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                    Return (C2ST) /* \_PR_.CPU0.C2ST */
                }
                Else
                {
                    C1ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                    Return (C1ST) /* \_PR_.CPU0.C1ST */
                }
            }

            If ((CFGD & 0x10))
            {
                C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                C2ST [0x02] = C6LI /* \_PR_.CPU0.C6LI */
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            ElseIf ((CFGD & 0x08))
            {
                C2ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                C2ST [0x02] = C3LI /* \_PR_.CPU0.C3LI */
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            Else
            {
                C1ST [One] = C1LH /* \_PR_.CPU0.C1LH */
                Return (C1ST) /* \_PR_.CPU0.C1ST */
            }
        }
    }
}



TCPA
----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : B5
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A007D   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   2]               Platform Class : 0000
[026h 0038   4]         Min Event Log Length : 00010000
[02Ah 0042   8]            Event Log Address : 00000000AA6BF010

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 02 B5 54 4F 53 48 49 42  // TCPA2.....TOSHIB
    0010: 41 30 30 37 44 20 20 20 00 00 00 00 4C 4F 48 52  // A007D   ....LOHR
    0020: 5F 00 00 00 00 00 00 00 01 00 10 F0 6B AA 00 00  // _...........k...
    0030: 00 00                                            // ..


