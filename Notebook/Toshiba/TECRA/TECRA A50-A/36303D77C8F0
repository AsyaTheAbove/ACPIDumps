
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20190215
Copyright (c) 2000 - 2019 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00000618  0x01  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20120518
 02)  MCFG  0x0000003C  0x01  "TOSHIB"  "A008C   "  0x00000001  "LOHR"   0x0000005F
 03)  ASF!  0x000000A0  0x20  "TOSHIB"  "A008C   "  0x00000001  "LOHR"   0x0000005F
 04)  APIC  0x000000BC  0x01  "TOSHIB"  "A008C   "  0x00000001  "LOHR"   0x0000005F
 05)  SLIC  0x00000176  0x01  "TOSHIB"  "A008C   "  0x00000000  "LOHR"   0x0000005F
 06)  SSDT  0x00000720  0x01  "TOSHIB"  "PtidDevc"  0x00001000  "INTL"   0x20120518
 07)  BOOT  0x00000028  0x01  "TOSHIB"  "A008C   "  0x00000000  "LOHR"   0x0000005F
 08)  DSDT  0x00012422  0x02  "TOSHIB"  "A008C   "  0x20140917  "INTL"   0x20120518
 09)  SSDT  0x00000AC4  0x01  "PmRef "  "CpuPm   "  0x00003000  "INTL"   0x20120518
 10)  SSDT  0x000007A8  0x01  "TOSHIB"  "MacUniq1"  0x00001000  "INTL"   0x20120518
 11)  FACP  0x0000010C  0x05  "TOSHIB"  "A008C   "  0x00000005  "LOHR"   0x0000005F
 12)  FPDT  0x00000044  0x01  "TOSHIB"  "A008C   "  0x00000000  "LOHR"   0x0000005F
 13)  SSDT  0x000004F8  0x01  "TOSHIB"  "SataAhci"  0x00001000  "INTL"   0x20120518
 14)  MSDM  0x00000055  0x03  "TOSHIB"  "A008C   "  0x00000000  "LOHR"   0x0000005F
 15)  TCPA  0x00000032  0x02  "TOSHIB"  "A008C   "  0x00000000  "LOHR"   0x0000005F
 16)  HPET  0x00000038  0x01  "TOSHIB"  "A008C   "  0x00000001  "LOHR"   0x0000005F
 17)  SSDT  0x00000562  0x01  "SaSsdt"  "SaSsdt  "  0x00003000  "INTL"   0x20120518
 18)  FACS  0x00000040  0x01
 19)  SSDT  0x00000119  0x01  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20120518
 20)  SSDT  0x000003D3  0x01  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20120518
 21)  SSDT  0x000005AA  0x01  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20120518

Found 21 ACPI tables in /root/snap/hw-probe/common/HW_PROBE/LATEST/hw.info/logs/acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 000000BC
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 65
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A008C   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 00
[050h 0080   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 00
[058h 0088   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 00
[060h 0096   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 00
[068h 0104   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 01 [I/O APIC]
[06Dh 0109   1]                       Length : 0C
[06Eh 0110   1]                  I/O Apic ID : 02
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]                      Address : FEC00000
[074h 0116   4]                    Interrupt : 00000000

[078h 0120   1]                Subtable Type : 02 [Interrupt Source Override]
[079h 0121   1]                       Length : 0A
[07Ah 0122   1]                          Bus : 00
[07Bh 0123   1]                       Source : 00
[07Ch 0124   4]                    Interrupt : 00000002
[080h 0128   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[082h 0130   1]                Subtable Type : 02 [Interrupt Source Override]
[083h 0131   1]                       Length : 0A
[084h 0132   1]                          Bus : 00
[085h 0133   1]                       Source : 09
[086h 0134   4]                    Interrupt : 00000009
[08Ah 0138   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

[08Ch 0140   1]                Subtable Type : 04 [Local APIC NMI]
[08Dh 0141   1]                       Length : 06
[08Eh 0142   1]                 Processor ID : 00
[08Fh 0143   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[091h 0145   1]         Interrupt Input LINT : 01

[092h 0146   1]                Subtable Type : 04 [Local APIC NMI]
[093h 0147   1]                       Length : 06
[094h 0148   1]                 Processor ID : 01
[095h 0149   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[097h 0151   1]         Interrupt Input LINT : 01

[098h 0152   1]                Subtable Type : 04 [Local APIC NMI]
[099h 0153   1]                       Length : 06
[09Ah 0154   1]                 Processor ID : 02
[09Bh 0155   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[09Dh 0157   1]         Interrupt Input LINT : 01

[09Eh 0158   1]                Subtable Type : 04 [Local APIC NMI]
[09Fh 0159   1]                       Length : 06
[0A0h 0160   1]                 Processor ID : 03
[0A1h 0161   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A3h 0163   1]         Interrupt Input LINT : 01

[0A4h 0164   1]                Subtable Type : 04 [Local APIC NMI]
[0A5h 0165   1]                       Length : 06
[0A6h 0166   1]                 Processor ID : 04
[0A7h 0167   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A9h 0169   1]         Interrupt Input LINT : 01

[0AAh 0170   1]                Subtable Type : 04 [Local APIC NMI]
[0ABh 0171   1]                       Length : 06
[0ACh 0172   1]                 Processor ID : 05
[0ADh 0173   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0AFh 0175   1]         Interrupt Input LINT : 01

[0B0h 0176   1]                Subtable Type : 04 [Local APIC NMI]
[0B1h 0177   1]                       Length : 06
[0B2h 0178   1]                 Processor ID : 06
[0B3h 0179   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0B5h 0181   1]         Interrupt Input LINT : 01

[0B6h 0182   1]                Subtable Type : 04 [Local APIC NMI]
[0B7h 0183   1]                       Length : 06
[0B8h 0184   1]                 Processor ID : 07
[0B9h 0185   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0BBh 0187   1]         Interrupt Input LINT : 01

Raw Table Data: Length 188 (0xBC)

    0000: 41 50 49 43 BC 00 00 00 01 65 54 4F 53 48 49 42  // APIC.....eTOSHIB
    0010: 41 30 30 38 43 20 20 20 01 00 00 00 4C 4F 48 52  // A008C   ....LOHR
    0020: 5F 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // _...............
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 00  // ................
    0050: 00 00 00 00 00 08 05 00 00 00 00 00 00 08 06 00  // ................
    0060: 00 00 00 00 00 08 07 00 00 00 00 00 01 0C 02 00  // ................
    0070: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0080: 00 00 02 0A 00 09 09 00 00 00 0D 00 04 06 00 05  // ................
    0090: 00 01 04 06 01 05 00 01 04 06 02 05 00 01 04 06  // ................
    00A0: 03 05 00 01 04 06 04 05 00 01 04 06 05 05 00 01  // ................
    00B0: 04 06 06 05 00 01 04 06 07 05 00 01              // ............


ASF!
----
[000h 0000   4]                    Signature : "ASF!"    [Alert Standard Format table]
[004h 0004   4]                 Table Length : 000000A0
[008h 0008   1]                     Revision : 20
[009h 0009   1]                     Checksum : 9F
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A008C   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   1]                Subtable Type : 00 [ASF Information]
[025h 0037   1]                     Reserved : 00
[026h 0038   2]                       Length : 0010
[028h 0040   1]          Minimum Reset Value : FF
[029h 0041   1]     Minimum Polling Interval : FF
[02Ah 0042   2]                    System ID : 0001
[02Ch 0044   4]              Manufacturer ID : 57010000
[030h 0048   1]                        Flags : 00
[031h 0049   3]                     Reserved : 000000

[034h 0052   1]                Subtable Type : 01 [ASF Alerts]
[035h 0053   1]                     Reserved : 00
[036h 0054   2]                       Length : 002C
[038h 0056   1]                   AssertMask : 00
[039h 0057   1]                 DeassertMask : 00
[03Ah 0058   1]                  Alert Count : 03
[03Bh 0059   1]            Alert Data Length : 0C

[03Ch 0060   1]                      Address : 89
[03Dh 0061   1]                      Command : 04
[03Eh 0062   1]                         Mask : 01
[03Fh 0063   1]                        Value : 01
[040h 0064   1]                   SensorType : 05
[041h 0065   1]                         Type : 6F
[042h 0066   1]                       Offset : 00
[043h 0067   1]                   SourceType : 68
[044h 0068   1]                     Severity : 08
[045h 0069   1]                 SensorNumber : 88
[046h 0070   1]                       Entity : 17
[047h 0071   1]                     Instance : 00

[048h 0072   1]                      Address : 89
[049h 0073   1]                      Command : 04
[04Ah 0074   1]                         Mask : 04
[04Bh 0075   1]                        Value : 04
[04Ch 0076   1]                   SensorType : 07
[04Dh 0077   1]                         Type : 6F
[04Eh 0078   1]                       Offset : 00
[04Fh 0079   1]                   SourceType : 68
[050h 0080   1]                     Severity : 20
[051h 0081   1]                 SensorNumber : 88
[052h 0082   1]                       Entity : 03
[053h 0083   1]                     Instance : 00

[054h 0084   1]                      Address : 89
[055h 0085   1]                      Command : 05
[056h 0086   1]                         Mask : 01
[057h 0087   1]                        Value : 01
[058h 0088   1]                   SensorType : 19
[059h 0089   1]                         Type : 6F
[05Ah 0090   1]                       Offset : 00
[05Bh 0091   1]                   SourceType : 68
[05Ch 0092   1]                     Severity : 20
[05Dh 0093   1]                 SensorNumber : 88
[05Eh 0094   1]                       Entity : 22
[05Fh 0095   1]                     Instance : 00

[060h 0096   1]                Subtable Type : 02 [ASF Remote Control]
[061h 0097   1]                     Reserved : 00
[062h 0098   2]                       Length : 0018
[064h 0100   1]                Control Count : 04
[065h 0101   1]          Control Data Length : 04
[066h 0102   2]                     Reserved : 0000

[068h 0104   1]                     Function : 00
[069h 0105   1]                      Address : 88
[06Ah 0106   1]                      Command : 00
[06Bh 0107   1]                        Value : 03

[06Ch 0108   1]                     Function : 01
[06Dh 0109   1]                      Address : 88
[06Eh 0110   1]                      Command : 00
[06Fh 0111   1]                        Value : 02

[070h 0112   1]                     Function : 02
[071h 0113   1]                      Address : 88
[072h 0114   1]                      Command : 00
[073h 0115   1]                        Value : 01

[074h 0116   1]                     Function : 03
[075h 0117   1]                      Address : 88
[076h 0118   1]                      Command : 00
[077h 0119   1]                        Value : 04

[078h 0120   1]                Subtable Type : 03 [ASF RMCP Boot Options]
[079h 0121   1]                     Reserved : 00
[07Ah 0122   2]                       Length : 0017
[07Ch 0124   7]                 Capabilities : 20 70 00 00 00 13 F0
[083h 0131   1]              Completion Code : 00
[084h 0132   4]                Enterprise ID : 00000000
[088h 0136   1]                      Command : 00
[089h 0137   2]                    Parameter : 0000
[08Bh 0139   2]                 Boot Options : 0000
[08Dh 0141   2]               Oem Parameters : 0000

[08Fh 0143   1]                Subtable Type : 84 [ASF Address]
[090h 0144   1]                     Reserved : 00
[091h 0145   2]                       Length : 0011
[093h 0147   1]                Eprom Address : 00
[094h 0148   1]                 Device Count : 0B
[095h 0149   1]                    Addresses : 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8 


Raw Table Data: Length 160 (0xA0)

    0000: 41 53 46 21 A0 00 00 00 20 9F 54 4F 53 48 49 42  // ASF!.... .TOSHIB
    0010: 41 30 30 38 43 20 20 20 01 00 00 00 4C 4F 48 52  // A008C   ....LOHR
    0020: 5F 00 00 00 00 00 10 00 FF FF 01 00 00 00 01 57  // _..............W
    0030: 00 00 00 00 01 00 2C 00 00 00 03 0C 89 04 01 01  // ......,.........
    0040: 05 6F 00 68 08 88 17 00 89 04 04 04 07 6F 00 68  // .o.h.........o.h
    0050: 20 88 03 00 89 05 01 01 19 6F 00 68 20 88 22 00  //  ........o.h .".
    0060: 02 00 18 00 04 04 00 00 00 88 00 03 01 88 00 02  // ................
    0070: 02 88 00 01 03 88 00 04 03 00 17 00 20 70 00 00  // ............ p..
    0080: 00 13 F0 00 00 00 00 00 00 00 00 00 00 00 00 84  // ................
    0090: 00 11 00 00 0B 5C 68 88 C2 D2 DC A0 A2 A4 A6 C8  // .....\h.........


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 4E
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A008C   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   1]          Boot Register Index : 7C
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 4E 54 4F 53 48 49 42  // BOOT(....NTOSHIB
    0010: 41 30 30 38 43 20 20 20 00 00 00 00 4C 4F 48 52  // A008C   ....LOHR
    0020: 5F 00 00 00 7C 00 00 00                          // _...|...


DSDT
----
DefinitionBlock ("", "DSDT", 2, "TOSHIB", "A008C   ", 0x20140917)
{
    /*
     * iASL Warning: There were 10 external control methods found during
     * disassembly, but only 0 were resolved (10 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCCD, UnknownObj)
    External (_SB_.PCCD.PENB, UnknownObj)
    External (_SB_.PCI0.B0D3.ABWA, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.B0D3.AINI, MethodObj)    // Warning: Unknown method, guessing 3 arguments
    External (_SB_.PCI0.B0D3.ARST, MethodObj)    // Warning: Unknown method, guessing 7 arguments
    External (_SB_.PCI0.B0D3.ASTR, MethodObj)    // Warning: Unknown method, guessing 4 arguments
    External (_SB_.PCI0.B0D3.CXDC, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.PEGP.VGA_.DDC1, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.DDC2, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.DDC3, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.DDC4, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.DDC5, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.DDC6, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.DDC7, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.DDC8, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.DDC9, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.DDCA, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.DDCB, UnknownObj)
    External (_SB_.PCI0.PEGP.VGA_.SGPO, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.SAT0.DVID, IntObj)
    External (_SB_.PCI0.SAT0.PRID, UnknownObj)
    External (_SB_.PCI0.SAT0.PRT0, UnknownObj)
    External (_SB_.PCI0.SAT0.PRT1, UnknownObj)
    External (_SB_.PCI0.SAT0.PRT2, UnknownObj)
    External (_SB_.PCI0.SAT0.PRT3, UnknownObj)
    External (_SB_.PCI0.SAT0.PRT4, UnknownObj)
    External (_SB_.PCI0.SAT0.PRT5, UnknownObj)
    External (_SB_.PCI0.SAT0.PSCC, UnknownObj)
    External (_SB_.PCI0.SAT0.RVID, IntObj)
    External (_SB_.PCI0.SAT0.SECD, UnknownObj)
    External (_SB_.PCI0.SAT0.SSID, IntObj)
    External (_SB_.PCI0.SAT0.SVID, IntObj)
    External (_SB_.PCI0.SAT0.VNID, IntObj)
    External (_SB_.PCI0.SAT1.PRID, UnknownObj)
    External (_SB_.PCI0.SAT1.SECD, UnknownObj)
    External (HNOT, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (PDC4, UnknownObj)
    External (PDC5, UnknownObj)
    External (PDC6, UnknownObj)
    External (PDC7, UnknownObj)
    External (PS0X, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (PS3X, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (UNDD, MethodObj)    // Warning: Unknown method, guessing 1 arguments

    Mutex (MTXU, 0x00)
    Scope (\)
    {
        Device (NFC1)
        {
            Name (_HID, EisaId ("SKTD000"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((NFCE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (NFC2)
        {
            Name (_HID, EisaId ("NXP5442") /* NXP 5442 Near Field Communications Controller */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((NFCE == 0x02))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (NFC3)
        {
            Name (_HID, EisaId ("ICV0A12"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((NFCE == 0x03))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        BCDD = CTDD /* \CTDD */
        If (((Arg0 >= One) && (Arg0 <= 0x04)))
        {
            Local0 = (EWLD | 0x9000)
            SMBR (0xFA00, Local0, Zero, Zero, Zero, Zero, 0xB2)
        }

        ACBK = PWRS /* \PWRS */
        WED3 = Zero
        If ((\_SB.PCI0.EHC1.VNID != 0xFFFF))
        {
            If ((\_SB.PCI0.EHC1.PMEE == One))
            {
                WED3 = One
            }
        }

        If ((\_SB.PCI0.EHC2.VNID != 0xFFFF))
        {
            If ((\_SB.PCI0.EHC2.PMEE == One))
            {
                WED3 = One
            }
        }

        If ((UPSW == One))
        {
            WED3 = One
        }

        CBWR = Zero
        If (((Arg0 == 0x03) && (OSYS >= 0x07D6)))
        {
            CBWR = One
        }

        CBWE = Zero
        If (GP90)
        {
            CBWE = One
        }

        GP90 = Zero
        If (OPTM)
        {
            \_SB.PCI0.PEGP.VGA.SGPO (0x23, Zero)
            \_SB.PCI0.PEGP.VGA.SGPO (0x21, Zero)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.XHC.XWAK ()
        }

        HKEN = One
        WAKS = One
        OP3E = Zero
        OP3S = Zero
        \_SB.PCI0.AMW0.SVPA = Zero
        \_SB.PCI0.AMW0.SRVA = Zero
        If ((Arg0 == 0x03))
        {
            While ((RSME == One)){}
            RSME = Zero
            If ((BMOD == One))
            {
                Arg0 = 0x04
            }
        }

        BMOD = Zero
        KBFF = Zero
        Notify (\_SB.PCI0.RP06.PXSX, One) // Device Check
        If (DSPT)
        {
            While ((DKRE == One)){}
            DKRE = Zero
            While ((DKRU == One)){}
            DKRU = Zero
            DWAK ()
        }

        SYU6 = Zero
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            DNTF = One
            If ((Arg0 == 0x04))
            {
                Local0 = BCDD /* \BCDD */
                If (((Local0 == One) || (Local0 == 0x04)))
                {
                    SYU6 = One
                }
            }
        }

        SMBR (0xFA00, 0x9001, Zero, Zero, Zero, Zero, 0xB2)
        If ((PWRS != ACBK))
        {
            PNOT ()
        }

        If (IGDE ())
        {
            \_SB.PCI0.GFX0.CLID = LIDS /* \LIDS */
            \_SB.PCI0.GFX0.EVTS = 0x02
        }

        If ((Arg0 == 0x03))
        {
            DTSF = 0x14
            TRPD = Zero
        }

        If (GP90)
        {
            Notify (\_SB.BAT1, 0x80) // Status Change
        }

        If (GP91)
        {
            GP91 = Zero
            If ((Arg0 == 0x04))
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        Name (BUFF, Package (0x02)
        {
            Zero, 
            One
        })
        If ((PWRS == Zero))
        {
            Local0 = (BST1 & 0x04)
            If ((Local0 == 0x04))
            {
                BUFF [Zero] = One
            }
        }

        Return (BUFF) /* \_WAK.BUFF */
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If (MPEN)
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }

            If ((PDC4 & 0x08))
            {
                Notify (\_PR.CPU4, 0x80) // Performance Capability Change
                If ((PDC4 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU4, 0x81) // C-State Change
                }
            }

            If ((PDC5 & 0x08))
            {
                Notify (\_PR.CPU5, 0x80) // Performance Capability Change
                If ((PDC5 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU5, 0x81) // C-State Change
                }
            }

            If ((PDC6 & 0x08))
            {
                Notify (\_PR.CPU6, 0x80) // Performance Capability Change
                If ((PDC6 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU6, 0x81) // C-State Change
                }
            }

            If ((PDC7 & 0x08))
            {
                Notify (\_PR.CPU7, 0x80) // Performance Capability Change
                If ((PDC7 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU7, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == 0x02))
        {
            DTSF = Arg1
            TRPD = Zero
            Return (DTSF) /* \DTSF */
        }

        If ((Arg0 == 0x03))
        {
            TRPH = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Method (SMBR, 7, Serialized)
    {
        Acquire (MUTX, 0xFFFF)
        Local0 = Zero
        While (One)
        {
            BIOT (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, 0xB2)
            Local1 = (OEAX & 0xFF00)
            If ((Local1 == 0x2100))
            {
                Local0 += 0x32
                If ((Local0 >= 0x2710))
                {
                    Break
                }
                Else
                {
                    Sleep (0x32)
                }
            }
            Else
            {
                Break
            }
        }

        Release (MUTX)
    }

    Method (BIOT, 7, Serialized)
    {
        IEAX = Arg0
        IEBX = Arg1
        IECX = Arg2
        IEDX = Arg3
        IESI = Arg4
        IEDI = Arg5
        SSMP = Arg6
    }

    Method (IGDE, 0, NotSerialized)
    {
        If (\_SB.PCI0.IVDD)
        {
            Return (Zero)
        }

        Return (One)
    }

    Method (VGAN, 0, NotSerialized)
    {
        If (!IGDE ())
        {
            Notify (\_SB.PCI0.PEGP.VGA, 0x80) // Status Change
        }
        ElseIf (VRDY ())
        {
            If (!PSTA ())
            {
                \_SB.PCI0.GFX0.CEVT = One
                \_SB.PCI0.GFX0.CSTS = 0x03
                Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                If (!PSTA ())
                {
                    \_SB.PCI0.GFX0.CEVT = Zero
                }
            }
        }
    }

    Method (PNLN, 0, NotSerialized)
    {
        If (IGDE ())
        {
            \_SB.PCI0.GFX0.GLID (LIDS)
        }
    }

    Method (LCDN, 1, NotSerialized)
    {
        If (!IGDE ())
        {
            If ((DIDL == One))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDC1, Arg0)
            }

            If ((DIDL == 0x02))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDC2, Arg0)
            }

            If ((DIDL == 0x03))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDC3, Arg0)
            }

            If ((DIDL == 0x04))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDC4, Arg0)
            }

            If ((DIDL == 0x05))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDC5, Arg0)
            }

            If ((DIDL == 0x06))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDC6, Arg0)
            }

            If ((DIDL == 0x07))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDC7, Arg0)
            }

            If ((DIDL == 0x08))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDC8, Arg0)
            }

            If ((DIDL == 0x09))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDC9, Arg0)
            }

            If ((DIDL == 0x0A))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDCA, Arg0)
            }

            If ((DIDL == 0x0B))
            {
                Notify (\_SB.PCI0.PEGP.VGA.DDCB, Arg0)
            }
        }
        Else
        {
            If ((DIDL == One))
            {
                Notify (\_SB.PCI0.GFX0.DDC1, Arg0)
            }

            If ((DIDL == 0x02))
            {
                Notify (\_SB.PCI0.GFX0.DDC2, Arg0)
            }

            If ((DIDL == 0x03))
            {
                Notify (\_SB.PCI0.GFX0.DDC3, Arg0)
            }

            If ((DIDL == 0x04))
            {
                Notify (\_SB.PCI0.GFX0.DDC4, Arg0)
            }

            If ((DIDL == 0x05))
            {
                Notify (\_SB.PCI0.GFX0.DDC5, Arg0)
            }

            If ((DIDL == 0x06))
            {
                Notify (\_SB.PCI0.GFX0.DDC6, Arg0)
            }

            If ((DIDL == 0x07))
            {
                Notify (\_SB.PCI0.GFX0.DDC7, Arg0)
            }

            If ((DIDL == 0x08))
            {
                Notify (\_SB.PCI0.GFX0.DDC8, Arg0)
            }
        }
    }

    Method (WPSX, 4, Serialized)
    {
        SMBR (0xFE00, 0x23, Arg0, Zero, Arg1, Arg2, 0xB2)
        While ((OECX != Zero))
        {
            SMBR (0xFE00, 0x23, Arg0, Zero, Arg1, Arg2, 0xB2)
        }
    }

    Name (SBTB, 0xFF)
    Method (GSBS, 0, NotSerialized)
    {
        SMBR (0xFE00, 0x14, Zero, Zero, Zero, Zero, 0xB2)
        Local0 = OECX /* \OECX */
        If (((Local0 == 0x02) || (Local0 == 0x03)))
        {
            SBTB = One
        }
        ElseIf (((Local0 == 0x07) || (Local0 == 0x08)))
        {
            SBTB = 0x02
        }
        Else
        {
            SBTB = Zero
        }
    }

    Method (OERS, 0, NotSerialized)
    {
        OEEE = Zero
        CODD (0x0101)
        Local0 = (0x80 | ODDP) /* \ODDP */
        Notify (\_SB.PCI0.SAT0, Local0)
    }

    Method (CODD, 1, Serialized)
    {
        Local0 = Arg0
        Local1 = Zero
        While (One)
        {
            BIOT (0xFF00, 0x76, Local0, Zero, Zero, Zero, 0xB2)
            Local2 = (OEAX & 0xFF00)
            If ((Local2 == 0x2100))
            {
                Local1 += 0x32
                If ((Local1 >= 0x2710))
                {
                    Break
                }
                Else
                {
                    Sleep (0x32)
                }
            }
            Else
            {
                Break
            }
        }
    }

    Method (SCMC, 0, NotSerialized)
    {
        If ((\_SB.PCI0.SAT0.PSCC != One))
        {
            Return (One)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (ODDN, 0, NotSerialized)
    {
        If (SCMC ())
        {
            If ((ODDP == Zero))
            {
                Notify (\_SB.PCI0.SAT0.PRT0, Zero) // Bus Check
            }

            If ((ODDP == One))
            {
                Notify (\_SB.PCI0.SAT0.PRT1, Zero) // Bus Check
            }

            If ((ODDP == 0x02))
            {
                Notify (\_SB.PCI0.SAT0.PRT2, Zero) // Bus Check
            }

            If ((ODDP == 0x03))
            {
                Notify (\_SB.PCI0.SAT0.PRT3, Zero) // Bus Check
            }

            If ((ODDP == 0x04))
            {
                Notify (\_SB.PCI0.SAT0.PRT4, Zero) // Bus Check
            }

            If ((ODDP == 0x05))
            {
                Notify (\_SB.PCI0.SAT0.PRT5, Zero) // Bus Check
            }
        }
        Else
        {
            If ((ODDP == Zero))
            {
                Notify (\_SB.PCI0.SAT0.PRID, Zero) // Bus Check
            }

            If ((ODDP == One))
            {
                Notify (\_SB.PCI0.SAT0.SECD, Zero) // Bus Check
            }

            If ((ODDP == 0x02))
            {
                Notify (\_SB.PCI0.SAT0.PRID, Zero) // Bus Check
            }

            If ((ODDP == 0x03))
            {
                Notify (\_SB.PCI0.SAT0.SECD, Zero) // Bus Check
            }

            If ((ODDP == 0x04))
            {
                Notify (\_SB.PCI0.SAT1.PRID, Zero) // Bus Check
            }

            If ((ODDP == 0x05))
            {
                Notify (\_SB.PCI0.SAT1.SECD, Zero) // Bus Check
            }
        }
    }

    Method (DWAK, 0, NotSerialized)
    {
        Local0 = (DCSS & 0x05)
        If ((Local0 == 0x05))
        {
            If ((0x2851F351 == DCID))
            {
                DWSB ()
            }
        }
        ElseIf (DLID)
        {
            DCKU = One
            DCKD = Zero
            If (GDCM ())
            {
                Notify (\_SB.PCI0.DOCK, One) // Device Check
            }
            Else
            {
                Notify (\_SB.VALZ, 0x83) // Device-Specific Change
            }

            DLID = Zero
            DSRN = Zero
        }
    }

    Method (DLXX, 0, NotSerialized)
    {
        If (GP60)
        {
            GP60 = Zero
            If (GDCM ())
            {
                Notify (\_SB.PCI0.DOCK, Zero) // Bus Check
            }
            Else
            {
                Notify (\_SB.VALZ, 0x83) // Device-Specific Change
            }

            If (!IGDE ()){}
            Else
            {
                \_SB.PCI0.GFX0.GDCK (Zero)
            }

            PNOT ()
        }

        If (GP61)
        {
            GP61 = Zero
            If (DCKD)
            {
                DCKD = Zero
                If (GDCM ())
                {
                    Notify (\_SB.PCI0.DOCK, One) // Device Check
                }
                Else
                {
                    Notify (\_SB.VALZ, 0x83) // Device-Specific Change
                }

                DLID = Zero
                DSRN = Zero
                If (UDNE)
                {
                    If ((LIDS == Zero))
                    {
                        Notify (\_SB.VALZ, 0x90) // Device-Specific
                    }
                }

                If (!IGDE ())
                {
                    If ((PVID != 0x1002))
                    {
                        If ((OSID < 0x05))
                        {
                            VGAN ()
                        }
                    }
                }
                Else
                {
                    \_SB.PCI0.GFX0.GDCK (Zero)
                }

                PNOT ()
            }
            Else
            {
                Signal (DKSQ)
            }
        }

        If (GP62)
        {
            GP62 = Zero
            If (GDCM ())
            {
                Notify (\_SB.PCI0.DOCK, One) // Device Check
            }
            Else
            {
                Notify (\_SB.VALZ, 0x82) // Device-Specific Change
            }
        }

        If (GP63)
        {
            GP63 = Zero
            If ((DCKF == Zero))
            {
                If (GDCM ())
                {
                    Notify (\_SB.PCI0.DOCK, Zero) // Bus Check
                }
                Else
                {
                    Notify (\_SB.VALZ, 0x81) // Information Change
                }
            }
            Else
            {
                If (!IGDE ()){}
                Else
                {
                    \_SB.PCI0.GFX0.GDCK (One)
                }

                Signal (DKSQ)
                DCKF = Zero
            }

            PNOT ()
        }
    }

    Method (GDCM, 0, NotSerialized)
    {
        Local0 = Zero
        Local1 = Zero
        If ((OSID < 0x05))
        {
            SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
            Local2 = (OEAX & 0xFF00)
            SMBR (0xF300, 0x0136, Zero, Zero, Zero, Zero, 0xB2)
            Local0 = (OEAX & 0xFF00)
            Local1 = OECX /* \OECX */
            If ((Local2 == Zero))
            {
                SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
            }
        }

        If ((((Local0 == Zero) && (Local1 == Zero)) || (Local0 != 
            Zero)))
        {
            Return (One)
        }

        Return (Zero)
    }

    Method (DWSB, 0, NotSerialized)
    {
        If (((DCID != DLID) || (DSNB != DSRN)))
        {
            If (GDCM ())
            {
                Notify (\_SB.PCI0.DOCK, Zero) // Bus Check
            }
            Else
            {
                Notify (\_SB.VALZ, 0x81) // Information Change
            }

            If (!IGDE ()){}
            Else
            {
                \_SB.PCI0.GFX0.GDCK (One)
            }
        }
    }

    Event (DKSQ)
    Method (SH1X, 1, NotSerialized)
    {
        Local0 = Arg0
        SMBR (0xFE00, 0x23, 0xF9, Zero, One, Zero, 0xB2)
        If ((OEDX != Local0))
        {
            SMBR (0xFF00, 0x23, 0xF9, Local0, One, Zero, 0xB2)
            OECX = One
            While (OECX)
            {
                SMBR (0xFE00, 0x23, 0xF9, Zero, One, Zero, 0xB2)
            }
        }
    }

    Method (SH2X, 1, NotSerialized)
    {
        Local0 = Arg0
        SMBR (0xFE00, 0x23, 0xFA, Zero, One, One, 0xB2)
        If ((OEDX != Local0))
        {
            SMBR (0xFF00, 0x23, 0xFA, Local0, One, One, 0xB2)
            OECX = One
            While (OECX)
            {
                SMBR (0xFE00, 0x23, 0xFA, Zero, One, One, 0xB2)
            }
        }
    }

    Method (LPS0, 0, NotSerialized)
    {
        If ((DNTF == One))
        {
            DNTF = Zero
            If ((DOS2 == Zero))
            {
                If (DCKU)
                {
                    If (VRDY ())
                    {
                        \_SB.PCI0.GFX0.CEVT = One
                        \_SB.PCI0.GFX0.CSTS = 0x03
                        CTDD = 0x02
                        NXDD = One
                        Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                        If ((\_SB.PCI0.GFX0.CSTS > One))
                        {
                            Sleep (\_SB.PCI0.GFX0.ASLP)
                        }
                    }
                }
            }
        }

        DCKU = Zero
    }

    Method (VRDY, 0, NotSerialized)
    {
        If (!\_SB.PCI0.GFX0.DRDY)
        {
            Sleep (\_SB.PCI0.GFX0.ASLP)
        }

        Return (\_SB.PCI0.GFX0.DRDY)
    }

    Method (PSTA, 0, NotSerialized)
    {
        If ((\_SB.PCI0.GFX0.CSTS > 0x02))
        {
            Sleep (\_SB.PCI0.GFX0.ASLP)
        }

        Return ((\_SB.PCI0.GFX0.CSTS == 0x03))
    }

    Method (HDSP, 1, Serialized)
    {
        If (!IGDE ())
        {
            UNDD (Arg0)
            Notify (\_SB.PCI0.PEGP.VGA, 0x80) // Status Change
        }
        ElseIf (VRDY ())
        {
            If (!PSTA ())
            {
                \_SB.PCI0.GFX0.CEVT = One
                \_SB.PCI0.GFX0.CSTS = 0x03
                UNDD (Arg0)
                Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                If (!PSTA ())
                {
                    \_SB.PCI0.GFX0.CEVT = Zero
                }
            }
        }
    }

    Method (VDOS, 1, NotSerialized)
    {
        Local0 = (Arg0 & 0x03)
        If ((Local0 == Zero))
        {
            DCST = One
            DOS2 = Zero
        }
        ElseIf ((Local0 == One))
        {
            DCST = Zero
            DOS2 = One
        }
        ElseIf ((Local0 == 0x02))
        {
            DCST = One
            DOS2 = One
        }
        ElseIf ((Local0 == 0x03))
        {
            DCST = One
        }

        Local0 = (Arg0 & 0x04)
        If (Local0)
        {
            BRTC = Zero
        }
        Else
        {
            BRTC = One
        }
    }

    Name (VGAB, Buffer (0xFB)
    {
        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
        /* 00F8 */  0x00, 0x00, 0x00                                 // ...
    })
    Method (VPSX, 4, Serialized)
    {
        If (Arg3)
        {
            SYU7 = Zero
            If ((SYU6 == One))
            {
                SYU6 = Zero
                If ((CTCA == One))
                {
                    SYU7 = One
                }
            }
        }

        If ((Arg2 == 0x10))
        {
            VGAF = Arg1
        }
        Else
        {
            VGDF = Arg1
        }
    }

    Method (VPSC, 1, NotSerialized)
    {
        If ((Arg0 == 0x10))
        {
            If (VGAF)
            {
                Return (0x03)
            }
            Else
            {
                Return (Zero)
            }
        }
        ElseIf (VGDF)
        {
            Return (0x03)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (TROM, 3, NotSerialized)
    {
        Local1 = (Arg1 << 0x03)
        Name (BUFF, Buffer (Arg1){})
        If (Arg2)
        {
            Local0 = (Arg0 + VRIA) /* \VRIA */
        }
        Else
        {
            Local0 = (Arg0 + 0x000C0000)
        }

        Scope (\)
        {
            OperationRegion (VROM, SystemMemory, Local0, Local1)
            Field (VROM, ByteAcc, NoLock, Preserve)
            {
                ROMI,   32768
            }
        }

        BUFF = ROMI /* \ROMI */
        Return (BUFF) /* \TROM.BUFF */
    }

    Method (VDDC, 3, NotSerialized)
    {
        Return (Zero)
    }

    Method (DBGT, 1, Serialized)
    {
        Name (TITL, "...Toshiba ASL tracing...")
        Debug = TITL /* \DBGT.TITL */
        Debug = Arg0
    }

    Method (PLDP, 1, Serialized)
    {
        Name (BUFF, Package (0x01)
        {
            Buffer (0x14)
            {
                 0x00                                             // .
            }
        })
        SMBR (0xFA00, 0x3200, Arg0, Zero, Zero, Zero, 0xB2)
        BUFF [Zero] = PLDB /* \PLDB */
        Return (BUFF) /* \PLDP.BUFF */
    }

    Scope (_SB)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            OSYS = 0x07D6
            OSID = 0x05
            OSSP = Zero
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Linux"))
                {
                    OSYS = 0x03E8
                    OSID = Zero
                    OSSP = Zero
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                    OSID = 0x04
                    OSSP = Zero
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                    OSID = 0x04
                    OSSP = One
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                    OSID = 0x04
                    OSSP = 0x02
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSYS = 0x07D2
                    OSID = 0x04
                    OSSP = 0x03
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                    OSID = 0x05
                    OSSP = Zero
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSYS = 0x07D6
                    OSID = 0x05
                    OSSP = One
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                    OSID = 0x06
                    OSSP = Zero
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                    OSID = 0x07
                    OSSP = Zero
                }
            }

            BT1F = BES1 /* \BES1 */
            DSPW = Zero
            VGAF = Zero
            VGDF = Zero
            PPSC = Zero
            SPSC = Zero
            GP91 = Zero
            BMOD = Zero
            HKEN = One
            If ((OSYS >= 0x07D6))
            {
                If ((OSYS < 0x07DC))
                {
                    SMBR (0xFF00, 0x1E, 0x0F, Zero, Zero, Zero, 0xB2)
                }
                Else
                {
                    SMBR (0xFF00, 0x1E, 0x0F, One, Zero, Zero, 0xB2)
                }
            }

            SMBR (0xFA00, 0x9001, Zero, Zero, Zero, Zero, 0xB2)
            If (IGDE ())
            {
                ^PCI0.GFX0.CLID = LIDS /* \LIDS */
                ^PCI0.GFX0.EVTS = 0x03
            }

            SMBR (0xFF00, 0xC3, Zero, Zero, Zero, Zero, 0xB2)
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = 0x18
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    If ((CAP0 & 0x04))
                    {
                        If ((RTD3 == Zero))
                        {
                            CAP0 &= 0x3B
                            STS0 |= 0x10
                        }
                    }

                    If ((CAP0 & 0x20))
                    {
                        If (CondRefOf (\_SB.PCCD.PENB))
                        {
                            If ((^PCCD.PENB == Zero))
                            {
                                CAP0 &= 0x1F
                                STS0 |= 0x10
                            }
                        }
                        Else
                        {
                            CAP0 &= 0x1F
                            STS0 |= 0x10
                        }
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }
    }

    Method (KBBE, 0, Serialized)
    {
        If ((SYU3 == One))
        {
            If ((KBFF == One))
            {
                SMBR (0xFA00, 0x5B00, One, Zero, Zero, Zero, 0xB2)
                KBFF = Zero
            }
        }
    }

    Method (KBBD, 1, Serialized)
    {
        If ((SYU3 == One))
        {
            If ((KBFF == Zero))
            {
                Sleep (\_SB.PCI0.GFX0.ASLP)
                SMBR (0xFA00, 0x5B00, 0x02, Arg0, Zero, Zero, 0xB2)
                Local1 = (OEAX & 0xFF00)
                If ((Local1 == Zero))
                {
                    If ((OECX == One))
                    {
                        SMBR (0xFA00, 0x5B00, Zero, Zero, Zero, Zero, 0xB2)
                        KBFF = One
                    }
                }
            }
        }
    }

    OperationRegion (GNVS, SystemMemory, 0xCBFB9000, 0x00001000)
    OperationRegion (GRSV, SystemMemory, 0xCBFBA000, 0x00012004)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        OSYS,   16, 
        Offset (0x03), 
        Offset (0x04), 
        Offset (0x05), 
        Offset (0x06), 
        Offset (0x07), 
        Offset (0x08), 
        Offset (0x09), 
        Offset (0x0A), 
        Offset (0x0B), 
        Offset (0x0F), 
        Offset (0x10), 
        Offset (0x11), 
        DBGS,   8, 
        DTST,   8, 
        Offset (0x14), 
        PTMA,   8, 
        Offset (0x16), 
        Offset (0x17), 
        Offset (0x18), 
        Offset (0x19), 
        Offset (0x1A), 
        Offset (0x1B), 
        Offset (0x1C), 
        Offset (0x1D), 
        Offset (0x1E), 
        Offset (0x28), 
        Offset (0x29), 
        MPEN,   8, 
        PCP0,   8, 
        PCP1,   8, 
        Offset (0x2D), 
        PPMF,   32, 
        C67L,   8, 
        DVS0,   8, 
        DVS1,   8, 
        DVS2,   8, 
        DVS3,   8, 
        Offset (0x3C), 
        Offset (0x3D), 
        Offset (0x3E), 
        Offset (0x3F), 
        Offset (0x40), 
        Offset (0x42), 
        Offset (0x44), 
        Offset (0x46), 
        Offset (0x47), 
        Offset (0x4B), 
        Offset (0x4F), 
        Offset (0x53), 
        Offset (0x57), 
        Offset (0x5B), 
        Offset (0x5C), 
        Offset (0x5D), 
        Offset (0x5E), 
        Offset (0x5F), 
        Offset (0x60), 
        Offset (0x61), 
        Offset (0x62), 
        Offset (0x67), 
        Offset (0x68), 
        Offset (0x69), 
        Offset (0x6A), 
        Offset (0x6B), 
        Offset (0x6C), 
        Offset (0x6D), 
        Offset (0x6E), 
        Offset (0x6F), 
        Offset (0x71), 
        Offset (0x73), 
        Offset (0x74), 
        Offset (0x75), 
        Offset (0x76), 
        Offset (0x78), 
        Offset (0x79), 
        Offset (0x7A), 
        Offset (0x82), 
        Offset (0x89), 
        Offset (0x90), 
        Offset (0x91), 
        Offset (0x98), 
        Offset (0x99), 
        LNON,   8, 
        Offset (0xAA), 
        ASLB,   32, 
        IBDP,   8, 
        Offset (0xB0), 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        Offset (0xB4), 
        IBIA,   8, 
        ISSC,   8, 
        Offset (0xB7), 
        Offset (0xB8), 
        Offset (0xB9), 
        Offset (0xBA), 
        IDMM,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        Offset (0xC2), 
        Offset (0xC6), 
        Offset (0xCA), 
        Offset (0xCE), 
        Offset (0xD2), 
        Offset (0xD6), 
        Offset (0xDA), 
        Offset (0xDE), 
        GSMI,   8, 
        Offset (0xE1), 
        Offset (0xE2), 
        Offset (0xE3), 
        Offset (0xEA), 
        TPID,   8, 
        DSEN,   8, 
        Offset (0xED), 
        Offset (0xEE), 
        Offset (0xEF), 
        Offset (0xF0), 
        Offset (0xF1), 
        Offset (0xF2), 
        Offset (0xFA), 
        BAOP,   8, 
        Offset (0x100), 
            ,   1, 
        Offset (0x101), 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x102), 
        BCDD,   7, 
        Offset (0x103), 
        UDNE,   1, 
        Offset (0x104), 
        SYSE,   1, 
        HKEN,   1, 
        HPEN,   1, 
        FBEN,   1, 
        GPEN,   1, 
        Offset (0x105), 
        HAPS,   2, 
        HHSW,   2, 
        HPSU,   2, 
        HRCU,   2, 
        HGSU,   2, 
        HEBI,   2, 
        HTMD,   2, 
        Offset (0x107), 
        HKRD,   2, 
        HVBS,   2, 
        Offset (0x109), 
        KPAE,   1, 
        KX64,   1, 
        Offset (0x10B), 
        MINF,   8, 
        TNVS,   1, 
        OSPC,   1, 
        ACBK,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        ULSB,   1, 
        IUSB,   1, 
        Offset (0x10E), 
        PULD,   8, 
        PULA,   8, 
        BCLD,   8, 
        BCLA,   8, 
        GSVM,   2, 
        Offset (0x113), 
        TCNT,   8, 
        GPIC,   8, 
        XSBK,   8, 
        OSID,   8, 
        OSSP,   8, 
            ,   1, 
        DSPT,   1, 
            ,   1, 
            ,   1, 
        Offset (0x119), 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x11A), 
        Offset (0x11C), 
        Offset (0x11D), 
        Offset (0x11E), 
        Offset (0x11F), 
        Offset (0x120), 
        Offset (0x121), 
        Offset (0x122), 
        Offset (0x124), 
        ABRC,   1, 
        Offset (0x125), 
        Offset (0x126), 
        PMAD,   64, 
        PMSZ,   8, 
        PIAD,   16, 
        KBTP,   1, 
        Offset (0x136), 
        INCN,   8, 
        SCTN,   8, 
        BRCL,   8, 
        BRCR,   8, 
        BRTD,   8, 
        BRTB,   8, 
        BRT0,   8, 
        BRT1,   8, 
        BRT2,   8, 
        BRT3,   8, 
        BRT4,   8, 
        BRT5,   8, 
        BRT6,   8, 
        BRT7,   8, 
        BRDH,   8, 
        BRBH,   8
    }

    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x13C), 
        LBRL,   32, 
        LBRH,   32, 
        Offset (0x147), 
        DLID,   32, 
        DSRN,   32, 
        NBR0,   16, 
        NBR1,   16, 
        NBR2,   16, 
        NBR3,   16, 
        NBR4,   16, 
        NBR5,   16, 
        NBR6,   16, 
        NBR7,   16, 
        Offset (0x1AA), 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LMS1,   16, 
        LMS2,   16, 
        LMS3,   16, 
        LMS4,   16, 
        LMS5,   16, 
        LMS6,   16, 
        LMS7,   16, 
        LMS8,   16, 
        LNS1,   16, 
        LNS2,   16, 
        LNS3,   16, 
        LNS4,   16, 
        LNS5,   16, 
        LNS6,   16, 
        LNS7,   16, 
        LNS8,   16, 
        OBF1,   8, 
        OBF2,   8, 
        OBF3,   8, 
        OBF4,   8, 
        OBF5,   8, 
        OBF6,   8, 
        OBF7,   8, 
        OBF8,   8, 
        LTRA,   8, 
        OBFA,   8, 
        LTRB,   8, 
        OBFB,   8, 
        LTRC,   8, 
        OBFC,   8, 
        SMSL,   16, 
        SNSL,   16, 
        Offset (0x200), 
        Offset (0x253), 
        CODS,   8, 
        SNHE,   8, 
        Offset (0x259), 
        NFCE,   8, 
        RTD3,   8, 
        S0ID,   8, 
            ,   3471
    }

    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x516), 
        TPMO,   8
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        PLDB,   160, 
        Offset (0x28), 
        XH01,   8, 
        XH02,   8, 
        XH03,   8, 
        XH04,   8, 
        XH05,   8, 
        XH06,   8, 
        XH07,   8, 
        XH08,   8, 
        XH09,   8, 
        XH10,   8, 
        XH11,   8, 
        XH12,   8, 
        XH13,   8, 
        XH14,   8, 
        Offset (0x3C), 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        CTD1,   1, 
        CTD2,   1, 
        CTD3,   1, 
        CTD4,   1, 
        CUD5,   1, 
        CTD6,   1, 
        CTD7,   1, 
        CTD8,   1, 
        CTD9,   1, 
        CUDA,   1, 
        CTDB,   1, 
        CTDC,   1, 
        CUDD,   1, 
        CTDE,   1, 
        CTDF,   1, 
        Offset (0x7B), 
        NXD1,   1, 
        NXD2,   1, 
        NXD3,   1, 
        NXD4,   1, 
        NTD5,   1, 
        NXD6,   1, 
        NXD7,   1, 
        NXD8,   1, 
        NXD9,   1, 
        NTDA,   1, 
        NXDB,   1, 
        NXDC,   1, 
        NTDD,   1, 
        NXDE,   1, 
        NXDF,   1, 
        Offset (0x7D), 
        DPS1,   1, 
        DPS2,   1, 
        DPS3,   1, 
        DPS4,   1, 
        DPS5,   1, 
        DPS6,   1, 
        DPS7,   1, 
        DPS8,   1, 
        DPS9,   1, 
        DPSA,   1, 
        DPSB,   1, 
        DPSC,   1, 
        DPSD,   1, 
        DPSE,   1, 
        DPSF,   1, 
        Offset (0x7F), 
        DIDL,   8, 
        DPI0,   16, 
        DPI1,   16, 
        DPI2,   16, 
        DPI3,   16, 
        DPP0,   16, 
        DPP1,   16, 
        DPP2,   16, 
        DPP3,   16, 
        DPE0,   16, 
        DPE1,   16, 
        DPE2,   16, 
        DPE3,   16, 
        DPR0,   16, 
        DPR1,   16, 
        DPR2,   16, 
        DPR3,   16, 
        BRID,   32, 
        SS1T,   8, 
        SS2T,   8, 
        SS3T,   8, 
        SS4T,   8, 
        SS5T,   8, 
        SS6T,   8
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        Offset (0x79), 
        CTDV,   16, 
        Offset (0x7D), 
        DPWS,   16, 
        Offset (0x200), 
        PAR1,   16, 
        PAR2,   16, 
        PAR3,   16, 
        PAR4,   16, 
        PAR5,   16, 
        PAR6,   16
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        Offset (0x200), 
        Offset (0x202), 
        RDID,   32, 
        RDSN,   32, 
        CAPB,   16
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        Offset (0x200), 
        IEAX,   32, 
        IEBX,   32, 
        IECX,   32, 
        IEDX,   32, 
        IESI,   32, 
        IEDI,   32, 
        IEBP,   32, 
        Offset (0x220), 
        OEAX,   32, 
        OEBX,   32, 
        OECX,   32, 
        OEDX,   32, 
        OESI,   32, 
        OEDI,   32, 
        OEBP,   32, 
        Offset (0x240), 
            ,   1, 
        BES1,   1, 
        BES2,   1, 
            ,   4, 
        Offset (0x241), 
            ,   1, 
        Offset (0x242), 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x243), 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x244), 
        Offset (0x246), 
        PTMP,   8, 
        AP2T,   8, 
        AP3T,   8, 
        DUSB,   8, 
        SLBP,   8, 
        Offset (0x250), 
        Offset (0x252), 
        Offset (0x254), 
        Offset (0x256), 
        CRT1,   16, 
        TMP1,   16, 
        AST1,   16, 
        Offset (0x25E), 
        Offset (0x260), 
        Offset (0x262), 
        Offset (0x264), 
        Offset (0x266), 
        CRT2,   16, 
        TMP2,   16, 
        AST2,   16, 
        Offset (0x26E), 
        Offset (0x270), 
        Offset (0x272), 
        Offset (0x274), 
        Offset (0x276), 
        CRT3,   16, 
        TMP3,   16, 
        AST3,   16, 
        Offset (0x27E), 
        Offset (0x280), 
        Offset (0x2BC), 
        SPWR,   8, 
        EPWT,   16, 
        Offset (0x2C4), 
        RSWT,   16, 
        Offset (0x300), 
        BMN1,   104, 
        BSN1,   88, 
        BTP1,   72, 
        Offset (0x325), 
        BDC1,   32, 
        BLF1,   32, 
        BTC1,   32, 
        BDV1,   32, 
        BST1,   32, 
        BPR1,   32, 
        BRC1,   32, 
        BPV1,   32, 
        Offset (0x349), 
        BCW1,   32, 
        BCL1,   32, 
        BG11,   32, 
        BG21,   32, 
        BOI1,   32, 
        BIR1,   24, 
        SNR1,   224, 
        CCM1,   16, 
        TDT1,   16, 
        TCC1,   32, 
        TDC1,   32, 
        TFC1,   16, 
        Offset (0x400), 
        BMN2,   104, 
        BSN2,   88, 
        BTP2,   72, 
        Offset (0x425), 
        BDC2,   32, 
        BLF2,   32, 
        BTC2,   32, 
        BDV2,   32, 
        BST2,   32, 
        BPR2,   32, 
        BRC2,   32, 
        BPV2,   32, 
        Offset (0x449), 
        BCW2,   32, 
        BCL2,   32, 
        BG12,   32, 
        BG22,   32, 
        BOI2,   32, 
        BIR2,   24, 
        SNR2,   224, 
        CCM2,   16, 
        TDT2,   16, 
        TCC2,   32, 
        TDC2,   32, 
        TFC2,   16, 
        Offset (0x500), 
        GP50,   1, 
        GP51,   1, 
        GP52,   1, 
        GP53,   1, 
        GP54,   1, 
        GP55,   1, 
        GP56,   1, 
        GP57,   1, 
        GP60,   1, 
        GP61,   1, 
        GP62,   1, 
        GP63,   1, 
            ,   1, 
            ,   1, 
        GP66,   1, 
        GP67,   1, 
        GP70,   1, 
        GP71,   1, 
            ,   1, 
        GP73,   1, 
        GP74,   1, 
        GP75,   1, 
        GP76,   1, 
        GP77,   1, 
        BTMD,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        BPFE,   1, 
        Offset (0x504), 
        GP90,   1, 
        GP91,   1, 
        GP92,   1, 
        GP93,   1, 
        GP94,   1, 
        GP95,   1, 
        GP96,   1, 
        GP97,   1, 
        GPD0,   1, 
        GPD1,   1, 
        GPD2,   1, 
        GPD3,   1, 
        GPD4,   1, 
        Offset (0x506), 
        Offset (0x50F), 
            ,   1, 
            ,   1, 
            ,   1, 
        WED3,   1, 
        WED4,   1, 
        UPSW,   1, 
        Offset (0x510), 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x511), 
            ,   1, 
        VALF,   1, 
        DCST,   1, 
        DOS2,   1, 
            ,   1, 
        DCKF,   1, 
        BT1F,   1, 
        BT2F,   1, 
        CTLA,   1, 
        CTCA,   1, 
        CTTA,   1, 
        CTDA,   1, 
            ,   1, 
        CTMA,   1, 
        CTHA,   1, 
        CTD5,   1, 
        NXLA,   1, 
        NXCA,   1, 
        NXTA,   1, 
        NXDA,   1, 
            ,   1, 
        NXMA,   1, 
        NXHA,   1, 
        NXD5,   1, 
        Offset (0x56F), 
        LCDS,   1, 
        CRTS,   1, 
        CR2S,   1, 
        DVIS,   1, 
            ,   1, 
        MDPS,   1, 
        HD2S,   1, 
        PSD5,   1
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        Offset (0x512), 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        CDS4,   1, 
        CDS1,   1, 
        CDS2,   1, 
        CDS3,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        NDS4,   1, 
        NDS1,   1, 
        NDS2,   1, 
        NDS3,   1, 
        Offset (0x56F), 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        DDS4,   1, 
        DDS1,   1, 
        DDS2,   1, 
        DDS3,   1
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        Offset (0x512), 
        CTDD,   8, 
        NXDD,   8, 
            ,   1, 
        PNLS,   1, 
        B1ST,   1, 
        B2ST,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        ECDS,   1, 
        TMOR,   8, 
        TPMX,   8, 
        TPMQ,   8, 
        TPMR,   16, 
        BRTC,   1, 
        CBWR,   1, 
        CBWE,   1, 
        Offset (0x51B), 
            ,   2, 
        PPCR,   1, 
        Offset (0x51C), 
        TDAD,   8, 
        Offset (0x520), 
        AFRP,   16, 
        AFWP,   16, 
        AFIF,   256, 
        GCVS,   8, 
        Offset (0x546), 
        GPHA,   1, 
        GPGA,   1, 
        GPFA,   1, 
        GPEA,   1, 
        GPDA,   1, 
        GPCA,   1, 
        GPBA,   1, 
        GPAA,   1, 
        GPHE,   1, 
        GPGE,   1, 
        GPFE,   1, 
        GPEE,   1, 
        GPDE,   1, 
        GPCE,   1, 
        GPBE,   1, 
        GPAE,   1, 
        GPHW,   1, 
        GPGW,   1, 
        GPFW,   1, 
        GPEW,   1, 
        GPDW,   1, 
        GPCW,   1, 
        GPBW,   1, 
        GPAW,   1, 
        GPHP,   1, 
        GPGP,   1, 
        GPFP,   1, 
        GPEP,   1, 
        GPDP,   1, 
        GPCP,   1, 
        GPBP,   1, 
        GPAP,   1, 
        FPLA,   1, 
        FSTA,   1, 
        FPRA,   1, 
        FNXA,   1, 
        TPBA,   1, 
        FCDA,   1, 
        FTVA,   1, 
        FQSA,   1, 
        FPLE,   1, 
        FSTE,   1, 
        FPRE,   1, 
        FNXE,   1, 
        TPBE,   1, 
        FCDE,   1, 
        FTVE,   1, 
        FQSE,   1, 
        FPLW,   1, 
        FSTW,   1, 
        FPRW,   1, 
        FNXW,   1, 
        TPBW,   1, 
        FCDW,   1, 
        FTVW,   1, 
        FQSW,   1, 
        FPLP,   1, 
        FSTP,   1, 
        FPRP,   1, 
        FNXP,   1, 
        TPBP,   1, 
        FCDP,   1, 
        FTVP,   1, 
        FQSP,   1, 
        RTVA,   1, 
        RCDA,   1, 
        Offset (0x54F), 
        RTVE,   1, 
        RCDE,   1, 
        Offset (0x550), 
        RTVW,   1, 
        RCDW,   1, 
        Offset (0x551), 
        RTVP,   1, 
        RCDP,   1, 
        Offset (0x552), 
        Offset (0x554), 
        Offset (0x556), 
        Offset (0x558), 
        Offset (0x55A), 
        SYU0,   1, 
        SYU1,   1, 
        SYU2,   1, 
        SYU3,   1, 
        SYU4,   1, 
        WAKS,   1, 
        SYU6,   1, 
        SYU7,   1, 
        Offset (0x55C), 
            ,   1, 
        DNTF,   1, 
        DCKU,   1, 
        DCKD,   1, 
            ,   1, 
        HPCE,   1, 
        HAPE,   1, 
        Offset (0x55D), 
        MM64,   8, 
        ODDP,   8, 
        BSTG,   1, 
        Offset (0x560), 
        HKCD,   8, 
        Offset (0x562), 
        Offset (0x564), 
        Offset (0x566), 
        Offset (0x56A), 
        BDID,   32, 
        DSPW,   1, 
        VGAF,   1, 
        VGDF,   1, 
            ,   1, 
        PPSC,   1, 
        SPSC,   1, 
        EWLD,   1, 
        Offset (0x56F), 
        DPST,   8, 
        Offset (0x573), 
            ,   1, 
            ,   1, 
            ,   1, 
        WED5,   1, 
            ,   1, 
            ,   1, 
        Offset (0x574), 
        OPTM,   1, 
        OP3E,   1, 
        OP3S,   1, 
        Offset (0x575), 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x576), 
        RSME,   1, 
        Offset (0x577), 
        DKRE,   1, 
        DKRU,   1, 
        Offset (0x578), 
        UODP,   4, 
        UODS,   1, 
        UODD,   1, 
        ODNA,   1, 
        Offset (0x579), 
        EPH1,   1, 
        EPH2,   1, 
        EPH3,   1, 
        EPH4,   1, 
        EPH5,   1, 
        EPH6,   1, 
        EPH7,   1, 
        EPH8,   1, 
        EPU1,   1, 
        EPU2,   1, 
        EPU3,   1, 
        EPU4,   1, 
        EPU5,   1, 
        EPU6,   1, 
        EPU7,   1, 
        EPU8,   1, 
        DAOP,   8, 
        Offset (0x580), 
        VGAR,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x581), 
        BTRE,   1, 
        ACVA,   1, 
            ,   1, 
        LIDV,   1, 
        ULSE,   1, 
        DRVL,   1, 
        Offset (0x582), 
            ,   1, 
            ,   1, 
        LDDM,   1, 
            ,   1, 
        ASPS,   1, 
        Offset (0x583), 
        Offset (0x584), 
        Offset (0x585), 
        DCSS,   8, 
        DCID,   32, 
        DATR,   16, 
        DSNB,   32, 
        SMIF,   8, 
        Offset (0x592), 
        Offset (0x593), 
        Offset (0x594), 
        Offset (0x595), 
        Offset (0x596), 
        Offset (0x597), 
        Offset (0x598), 
        Offset (0x599), 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        BNUM,   8, 
        B0SC,   8, 
        B1SC,   8, 
        B2SC,   8, 
        B0SS,   8, 
        B1SS,   8, 
        B2SS,   8, 
        CMCP,   8, 
        CIRP,   8, 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        Offset (0x5BF), 
        Offset (0x5C3), 
        Offset (0x5C7), 
        Offset (0x5CB), 
        Offset (0x5CF), 
        Offset (0x5D3), 
        Offset (0x5D4), 
        Offset (0x5D5), 
        Offset (0x5D6), 
        Offset (0x5D7), 
        Offset (0x5D8), 
        Offset (0x5D9), 
        Offset (0x5DA), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        Offset (0x5DE), 
        LLOW,   8, 
        LHIH,   8, 
        EMAE,   8, 
        Offset (0x5E3), 
        Offset (0x5E5), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x5E8), 
        Offset (0x5E9), 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        Offset (0x600), 
        PAVP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        ECON,   8, 
        Offset (0x605), 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        KSV0,   32, 
        KSV1,   8, 
        PNHM,   32, 
        Offset (0x614), 
        TPMH,   8, 
        BMOD,   8, 
        IPSB,   32, 
        PVID,   16, 
        PFLV,   8, 
        Offset (0x629), 
        ZPOE,   1, 
        OEEE,   1, 
        NVEB,   1, 
        ZPOI,   1, 
        Offset (0x62A), 
        Offset (0x62E), 
        VRIA,   32, 
        SMHA,   16, 
        SMOF,   8, 
        SMLE,   16, 
        SMTY,   8, 
        SMWD,   512, 
        OPVB,   32, 
        XHCI,   8, 
        XHPM,   8, 
        KBFF,   1, 
        Offset (0x67F), 
        UP8T,   2, 
        UP9T,   2, 
        UPAT,   2, 
        UPBT,   2, 
        UPCT,   2, 
        UPDT,   2, 
            ,   2, 
        Offset (0x681), 
        UP0T,   2, 
        UP1T,   2, 
        UP2T,   2, 
        UP3T,   2, 
        UP4T,   2, 
        UP5T,   2, 
        UP6T,   2, 
        UP7T,   2, 
        SYSV,   48, 
        ECKV,   48, 
        VTSI,   8, 
        Offset (0x698), 
        Offset (0x6A2), 
        Offset (0x6A4), 
        Offset (0x6A8), 
        FSDP,   8, 
        Offset (0x6B3), 
        Offset (0x6B6), 
        Offset (0x6C6), 
        Offset (0x70E), 
        Offset (0x70F), 
        EDCK,   8
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        Offset (0x690), 
        PRES,   32768
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        Offset (0x690), 
        UMSB,   16384, 
        UUIB,   16384
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        Offset (0x690), 
        PWS1,   8, 
        PWS2,   8, 
        PWS3,   8, 
        PWS4,   8, 
        PSD1,   1280, 
        PSD2,   1280, 
        PSD3,   1280, 
        PSD4,   1280
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        Offset (0x690), 
        OWSN,   16, 
        OWNS,   4112
    }

    Field (GRSV, AnyAcc, NoLock, Preserve)
    {
        Offset (0x2000), 
        VRIM,   524288, 
        TGPD,   32
    }

    OperationRegion (OINT, SystemMemory, 0x000ECDE0, 0x1F)
    Field (OINT, AnyAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        Offset (0x02), 
        Offset (0x03), 
        IPAT,   8, 
        Offset (0x05), 
        Offset (0x06), 
        Offset (0x07), 
        Offset (0x09), 
        Offset (0x0A)
    }

    Name (FMBL, One)
    Name (GPBS, 0x0800)
    Scope (_SB)
    {
        Name (PR00, Package (0x18)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR00, Package (0x18)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR01, Package (0x18)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR01, Package (0x18)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                One, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x15
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
    }

    Scope (_GPE)
    {
        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.RP01.VDID != 0xFFFFFFFF))
            {
                If (((RP1D == Zero) && \_SB.PCI0.RP01.HPSX))
                {
                    Local0 = Zero
                    Sleep (0x64)
                    If (\_SB.PCI0.RP01.PDCX)
                    {
                        If (\_SB.PCI0.RP01.PDSX)
                        {
                            EPH1 = Zero
                            SMBR (0xFA00, 0x3400, One, Zero, Zero, Zero, 0xB2)
                            While ((EPH1 == Zero)){}
                            Local0 = One
                        }
                        Else
                        {
                            If (EPU1)
                            {
                                EPU1 = Zero
                            }
                            Else
                            {
                                EPH1 = Zero
                                SMBR (0xFA00, 0x3403, One, Zero, Zero, Zero, 0xB2)
                                While ((EPH1 == Zero)){}
                            }

                            Local0 = One
                        }
                    }
                    ElseIf (\_SB.PCI0.RP01.ABPX)
                    {
                        If (\_SB.PCI0.RP01.PDSX)
                        {
                            SMBR (0xFA00, 0x3401, One, Zero, Zero, Zero, 0xB2)
                            Local0 = 0x03
                        }
                    }

                    \_SB.PCI0.RP01.HPSX = One
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.ABPX = One
                    If (Local0)
                    {
                        Notify (\_SB.PCI0.RP01, Local0)
                    }
                }
            }

            If ((\_SB.PCI0.RP02.VDID != 0xFFFFFFFF))
            {
                If (((RP2D == Zero) && \_SB.PCI0.RP02.HPSX))
                {
                    Local0 = Zero
                    Sleep (0x64)
                    If (\_SB.PCI0.RP02.PDCX)
                    {
                        If (\_SB.PCI0.RP02.PDSX)
                        {
                            EPH2 = Zero
                            SMBR (0xFA00, 0x3400, 0x02, Zero, Zero, Zero, 0xB2)
                            While ((EPH2 == Zero)){}
                            Local0 = One
                        }
                        Else
                        {
                            If (EPU2)
                            {
                                EPU2 = Zero
                            }
                            Else
                            {
                                EPH2 = Zero
                                SMBR (0xFA00, 0x3403, 0x02, Zero, Zero, Zero, 0xB2)
                                While ((EPH2 == Zero)){}
                            }

                            Local0 = One
                        }
                    }
                    ElseIf (\_SB.PCI0.RP02.ABPX)
                    {
                        If (\_SB.PCI0.RP02.PDSX)
                        {
                            SMBR (0xFA00, 0x3401, 0x02, Zero, Zero, Zero, 0xB2)
                            Local0 = 0x03
                        }
                    }

                    \_SB.PCI0.RP02.HPSX = One
                    \_SB.PCI0.RP02.PDCX = One
                    \_SB.PCI0.RP02.ABPX = One
                    If (Local0)
                    {
                        Notify (\_SB.PCI0.RP02, Local0)
                    }
                }
            }

            If ((\_SB.PCI0.RP03.VDID != 0xFFFFFFFF))
            {
                If (((RP3D == Zero) && \_SB.PCI0.RP03.HPSX))
                {
                    Sleep (0x64)
                    Local0 = Zero
                    If (\_SB.PCI0.RP03.PDCX)
                    {
                        If (\_SB.PCI0.RP03.PDSX)
                        {
                            EPH3 = Zero
                            SMBR (0xFA00, 0x3400, 0x03, Zero, Zero, Zero, 0xB2)
                            While ((EPH3 == Zero)){}
                            Local0 = One
                        }
                        Else
                        {
                            If (EPU3)
                            {
                                EPU3 = Zero
                            }
                            Else
                            {
                                EPH3 = Zero
                                SMBR (0xFA00, 0x3403, 0x03, Zero, Zero, Zero, 0xB2)
                                While ((EPH3 == Zero)){}
                            }

                            Local0 = One
                        }
                    }
                    ElseIf (\_SB.PCI0.RP03.ABPX)
                    {
                        If (\_SB.PCI0.RP03.PDSX)
                        {
                            SMBR (0xFA00, 0x3401, 0x03, Zero, Zero, Zero, 0xB2)
                            Local0 = 0x03
                        }
                    }

                    \_SB.PCI0.RP03.HPSX = One
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.ABPX = One
                    If (Local0)
                    {
                        Notify (\_SB.PCI0.RP03, Local0)
                    }
                }
            }

            If ((\_SB.PCI0.RP04.VDID != 0xFFFFFFFF))
            {
                If (((RP4D == Zero) && \_SB.PCI0.RP04.HPSX))
                {
                    Local0 = Zero
                    Sleep (0x64)
                    If (\_SB.PCI0.RP04.PDCX)
                    {
                        If (\_SB.PCI0.RP04.PDSX)
                        {
                            EPH4 = Zero
                            SMBR (0xFA00, 0x3400, 0x04, Zero, Zero, Zero, 0xB2)
                            While ((EPH4 == 0x04)){}
                            Local0 = One
                        }
                        Else
                        {
                            If (EPU4)
                            {
                                EPU4 = Zero
                            }
                            Else
                            {
                                EPH4 = Zero
                                SMBR (0xFA00, 0x3403, 0x04, Zero, Zero, Zero, 0xB2)
                                While ((EPH4 == 0x04)){}
                            }

                            Local0 = One
                        }
                    }
                    ElseIf (\_SB.PCI0.RP04.ABPX)
                    {
                        If (\_SB.PCI0.RP04.PDSX)
                        {
                            SMBR (0xFA00, 0x3401, 0x04, Zero, Zero, Zero, 0xB2)
                            Local0 = 0x03
                        }
                    }

                    \_SB.PCI0.RP04.HPSX = One
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.ABPX = One
                    If (Local0)
                    {
                        Notify (\_SB.PCI0.RP04, Local0)
                    }
                }
            }

            If ((\_SB.PCI0.RP05.VDID != 0xFFFFFFFF))
            {
                If (((RP5D == Zero) && \_SB.PCI0.RP05.HPSX))
                {
                    Local0 = Zero
                    Sleep (0x64)
                    If (\_SB.PCI0.RP05.PDCX)
                    {
                        If (\_SB.PCI0.RP05.PDSX)
                        {
                            EPH5 = Zero
                            SMBR (0xFA00, 0x3400, 0x05, Zero, Zero, Zero, 0xB2)
                            While ((EPH5 == Zero)){}
                            Local0 = One
                        }
                        Else
                        {
                            If (EPU5)
                            {
                                EPU5 = Zero
                            }
                            Else
                            {
                                EPH5 = Zero
                                SMBR (0xFA00, 0x3403, 0x05, Zero, Zero, Zero, 0xB2)
                                While ((EPH5 == Zero)){}
                            }

                            Local0 = One
                        }
                    }
                    ElseIf (\_SB.PCI0.RP05.ABPX)
                    {
                        If (\_SB.PCI0.RP05.PDSX)
                        {
                            SMBR (0xFA00, 0x3401, 0x05, Zero, Zero, Zero, 0xB2)
                            Local0 = 0x03
                        }
                    }

                    \_SB.PCI0.RP05.HPSX = One
                    \_SB.PCI0.RP05.PDCX = One
                    \_SB.PCI0.RP05.ABPX = One
                    If (Local0)
                    {
                        Notify (\_SB.PCI0.RP05, Local0)
                    }
                }
            }

            If ((\_SB.PCI0.RP06.VDID != 0xFFFFFFFF))
            {
                If (((RP6D == Zero) && \_SB.PCI0.RP06.HPSX))
                {
                    Local0 = Zero
                    Sleep (0x64)
                    If (\_SB.PCI0.RP06.PDCX)
                    {
                        EPH6 = Zero
                        SMBR (0xFA00, 0x3404, 0x06, Zero, Zero, Zero, 0xB2)
                        While ((EPH6 == Zero)){}
                        If (\_SB.PCI0.RP06.PDSX)
                        {
                            EPH6 = Zero
                            SMBR (0xFA00, 0x3400, 0x06, Zero, Zero, Zero, 0xB2)
                            While ((EPH6 == Zero)){}
                            Local0 = One
                        }
                        Else
                        {
                            If (EPU6)
                            {
                                EPU6 = Zero
                            }
                            Else
                            {
                                EPH6 = Zero
                                SMBR (0xFA00, 0x3403, 0x06, Zero, Zero, Zero, 0xB2)
                                While ((EPH6 == Zero)){}
                            }

                            Local0 = One
                        }
                    }
                    ElseIf (\_SB.PCI0.RP06.ABPX)
                    {
                        If (\_SB.PCI0.RP06.PDSX)
                        {
                            SMBR (0xFA00, 0x3401, 0x06, Zero, Zero, Zero, 0xB2)
                            Local0 = 0x03
                        }
                    }

                    \_SB.PCI0.RP06.HPSX = One
                    \_SB.PCI0.RP06.PDCX = One
                    \_SB.PCI0.RP06.ABPX = One
                    If (Local0)
                    {
                        Notify (\_SB.PCI0.RP06, Local0)
                    }
                }
            }

            If ((\_SB.PCI0.RP07.VDID != 0xFFFFFFFF))
            {
                If (((RP7D == Zero) && \_SB.PCI0.RP07.HPSX))
                {
                    Local0 = Zero
                    Sleep (0x64)
                    If (\_SB.PCI0.RP07.PDCX)
                    {
                        If (\_SB.PCI0.RP07.PDSX)
                        {
                            EPH7 = Zero
                            SMBR (0xFA00, 0x3400, 0x07, Zero, Zero, Zero, 0xB2)
                            While ((EPH7 == Zero)){}
                            Local0 = One
                        }
                        Else
                        {
                            If (EPU7)
                            {
                                EPU7 = Zero
                            }
                            Else
                            {
                                EPH7 = Zero
                                SMBR (0xFA00, 0x3403, 0x07, Zero, Zero, Zero, 0xB2)
                                While ((EPH7 == Zero)){}
                            }

                            Local0 = One
                        }
                    }
                    ElseIf (\_SB.PCI0.RP07.ABPX)
                    {
                        If (\_SB.PCI0.RP07.PDSX)
                        {
                            SMBR (0xFA00, 0x3401, 0x07, Zero, Zero, Zero, 0xB2)
                            Local0 = 0x03
                        }
                    }

                    \_SB.PCI0.RP07.HPSX = One
                    \_SB.PCI0.RP07.PDCX = One
                    \_SB.PCI0.RP07.ABPX = One
                    If (Local0)
                    {
                        Notify (\_SB.PCI0.RP07, Local0)
                    }
                }
            }

            If ((\_SB.PCI0.RP08.VDID != 0xFFFFFFFF))
            {
                If (((RP8D == Zero) && \_SB.PCI0.RP08.HPSX))
                {
                    Local0 = Zero
                    Sleep (0x64)
                    If (\_SB.PCI0.RP08.PDCX)
                    {
                        If (\_SB.PCI0.RP08.PDSX)
                        {
                            EPH8 = Zero
                            SMBR (0xFA00, 0x3400, 0x08, Zero, Zero, Zero, 0xB2)
                            While ((EPH8 == Zero)){}
                            Local0 = One
                        }
                        Else
                        {
                            If (EPU8)
                            {
                                EPU8 = Zero
                            }
                            Else
                            {
                                EPH8 = Zero
                                SMBR (0xFA00, 0x3403, 0x08, Zero, Zero, Zero, 0xB2)
                                While ((EPH8 == Zero)){}
                            }

                            Local0 = One
                        }
                    }
                    ElseIf (\_SB.PCI0.RP08.ABPX)
                    {
                        If (\_SB.PCI0.RP08.PDSX)
                        {
                            SMBR (0xFA00, 0x3401, 0x08, Zero, Zero, Zero, 0xB2)
                            Local0 = 0x03
                        }
                    }

                    \_SB.PCI0.RP08.HPSX = One
                    \_SB.PCI0.RP08.PDCX = One
                    \_SB.PCI0.RP08.ABPX = One
                    If (Local0)
                    {
                        Notify (\_SB.PCI0.RP08, Local0)
                    }
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            If (CondRefOf (\_SB.PCCD.PENB))
            {
                If ((\_SB.PCCD.PENB == One))
                {
                    Notify (\_SB.PCCD, 0x80) // Status Change
                }
            }

            While ((GP50 || (GP51 || (GP52 || (GP53 || (GP54 || (
                GP55 || (GP56 || (GP57 || (GP60 || (GP61 || (GP62 || (GP63 || 
                (GP66 || (GP67 || (GP70 || (GP71 || (GP93 || (GP94 || (
                GPAP || (GPBP || (GPCP || (GPDP || (GPEP || (GPFP || (GPGP || 
                (GPHP || (FCDP || (FTVP || (FQSP || (GP96 || (GP97 || (
                GPD0 || (GPD1 || (GPD2 || (GPD3 || (GPD4 || (BPFE || (TPBP || 
                (ECDS || (B1ST || B2ST)))))))))))))))))))))))))))))))))))))))))
            {
                If (GP50)
                {
                    GP50 = Zero
                    Notify (\_SB.ADP1, 0x80) // Status Change
                    PNOT ()
                }

                If (GP51)
                {
                    GP51 = Zero
                }

                If (GP52)
                {
                    GP52 = Zero
                    If ((BES1 == BT1F))
                    {
                        Notify (\_SB.BAT1, 0x80) // Status Change
                    }
                    Else
                    {
                        BT1F = BES1 /* \BES1 */
                        If (BES1)
                        {
                            Notify (\_SB.BAT1, Zero) // Bus Check
                        }
                        Else
                        {
                            Notify (\_SB.BAT1, One) // Device Check
                        }
                    }
                }

                If (GP53)
                {
                    GP53 = Zero
                    Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
                    If ((HTMD != Zero))
                    {
                        Notify (\_SB.VALZ, 0x88) // Device-Specific
                    }
                }

                If (B1ST)
                {
                    B1ST = Zero
                    Notify (\_SB.BAT1, 0x81) // Information Change
                }

                If (B2ST)
                {
                    B2ST = Zero
                }

                If (GP54)
                {
                    GP54 = Zero
                }

                If (GP55)
                {
                    GP55 = Zero
                }

                If (GP56)
                {
                    GP56 = Zero
                    Notify (\_SB.BAT1, 0x80) // Status Change
                }

                If (GP57)
                {
                    GP57 = Zero
                }

                If (DSPT)
                {
                    DLXX ()
                }
                Else
                {
                    GP60 = Zero
                    GP61 = Zero
                    GP62 = Zero
                    GP63 = Zero
                }

                If (GP66)
                {
                    GP66 = Zero
                    SMBR (0xFE00, 0x14, Zero, Zero, Zero, Zero, 0xB2)
                    Local0 = OECX /* \OECX */
                    If (((BDID != Zero) && (OECX == Zero)))
                    {
                        Local0 = BDID /* \BDID */
                    }

                    BDID = OECX /* \OECX */
                    If ((Local0 == 0x07))
                    {
                        ODDN ()
                    }
                }

                If (GP67)
                {
                    GP67 = Zero
                }

                If (GP70)
                {
                    GP70 = Zero
                    If (VALF)
                    {
                        Notify (\_SB.VALZ, 0x80) // Status Change
                    }

                    If ((DOS2 == Zero))
                    {
                        If ((HKCD == 0x3F))
                        {
                            If ((TNVS == Zero)){}
                        }
                    }

                    If ((HPEN || ABRC))
                    {
                        If ((HKCD == 0x40))
                        {
                            LCDN (0x87)
                        }

                        If ((HKCD == 0x41))
                        {
                            LCDN (0x86)
                        }
                    }
                }

                If (GP71)
                {
                    GP71 = Zero
                    Notify (\_SB.LID, 0x80) // Status Change
                    If ((LIDS == Zero))
                    {
                        Notify (\_SB.VALZ, 0x8F) // Device-Specific
                    }

                    PNLN ()
                }

                If (GP93)
                {
                    GP93 = Zero
                    Notify (\_SB.HAPS, 0x80) // Status Change
                }

                If (GP94)
                {
                    GP94 = Zero
                    Notify (\_SB.HAPS, 0x81) // Information Change
                }

                If (BPFE)
                {
                    BPFE = Zero
                    Notify (\_SB.BT, 0x90) // Device-Specific
                }

                If (GPAP)
                {
                    GPAP = Zero
                }

                If (GPBP)
                {
                    GPBP = Zero
                }

                If (GPCP)
                {
                    GPCP = Zero
                }

                If (GPDP)
                {
                    GPDP = Zero
                }

                If (GPEP)
                {
                    GPEP = Zero
                }

                If (GPFP)
                {
                    GPFP = Zero
                }

                If (GPGP)
                {
                    GPGP = Zero
                }

                If (GPHP)
                {
                    GPHP = Zero
                }

                If (FTVP)
                {
                    FTVP = Zero
                }

                If (FCDP)
                {
                    FCDP = Zero
                }

                If (FQSP)
                {
                    FQSP = Zero
                }

                If (GP96)
                {
                    GP96 = Zero
                }

                If (GP97)
                {
                    GP97 = Zero
                    If (ZPOI)
                    {
                        If (OEEE)
                        {
                            If (NVEB)
                            {
                                If (VALF)
                                {
                                    Notify (\_SB.VALZ, 0x8C) // Device-Specific
                                }
                            }
                            Else
                            {
                                OERS ()
                            }
                        }
                    }
                    ElseIf (VALF)
                    {
                        Notify (\_SB.VALZ, 0x8B) // Device-Specific
                    }
                }

                If (TPBP)
                {
                    TPBP = Zero
                }

                If (GPD1)
                {
                    GPD1 = Zero
                    Notify (\_SB.VALZ, 0x8E) // Device-Specific
                }

                If (GPD2)
                {
                    GPD2 = Zero
                    PNOT ()
                }

                If (GPD3)
                {
                    GPD3 = Zero
                    Notify (\_SB.VALZ, 0x92) // Device-Specific
                }

                If (GPD4)
                {
                    GPD4 = Zero
                    Notify (\_SB.VALZ, 0x95) // Device-Specific
                }

                If (GPD0)
                {
                    GPD0 = Zero
                    OERS ()
                }

                If (ECDS)
                {
                    ECDS = Zero
                    Notify (\_SB.PCI0.RP06, One) // Device Check
                }
            }
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (\_SB.PCI0.GFX0.GSSE)
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L07, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.SBUS.HSTS = 0x20
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (((RP1D == Zero) && \_SB.PCI0.RP01.PSPX))
            {
                \_SB.PCI0.RP01.PSPX = One
                \_SB.PCI0.RP01.PMSX = One
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If (((RP2D == Zero) && \_SB.PCI0.RP02.PSPX))
            {
                \_SB.PCI0.RP02.PSPX = One
                \_SB.PCI0.RP02.PMSX = One
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If (((RP3D == Zero) && \_SB.PCI0.RP03.PSPX))
            {
                \_SB.PCI0.RP03.PSPX = One
                \_SB.PCI0.RP03.PMSX = One
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If (((RP4D == Zero) && \_SB.PCI0.RP04.PSPX))
            {
                \_SB.PCI0.RP04.PSPX = One
                \_SB.PCI0.RP04.PMSX = One
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If (((RP5D == Zero) && \_SB.PCI0.RP05.PSPX))
            {
                \_SB.PCI0.RP05.PSPX = One
                \_SB.PCI0.RP05.PMSX = One
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            If (((RP6D == Zero) && \_SB.PCI0.RP06.PSPX))
            {
                \_SB.PCI0.RP06.PSPX = One
                \_SB.PCI0.RP06.PMSX = One
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }

            If (((RP7D == Zero) && \_SB.PCI0.RP07.PSPX))
            {
                \_SB.PCI0.RP07.PSPX = One
                \_SB.PCI0.RP07.PMSX = One
                Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            }

            If (((RP8D == Zero) && \_SB.PCI0.RP08.PSPX))
            {
                \_SB.PCI0.RP08.PSPX = One
                \_SB.PCI0.RP08.PMSX = One
                Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            }
        }

        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Local0 = Zero
            Local0++
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GP73 = Zero
            GP76 = Zero
            GP77 = Zero
            Notify (\_SB.PCI0.GLAN, 0x02) // Device Wake
            If ((\_SB.PCI0.EHC1.PMES && \_SB.PCI0.EHC1.PMES))
            {
                \_SB.PCI0.EHC1.PMES = One
                \_SB.PCI0.EHC1.PMEE = Zero
                Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.EHC2.PMES && \_SB.PCI0.EHC2.PMES))
            {
                \_SB.PCI0.EHC2.PMES = One
                \_SB.PCI0.EHC2.PMEE = Zero
                Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.XHC.PMES && \_SB.PCI0.XHC.PMES))
            {
                \_SB.PCI0.XHC.PMES = One
                \_SB.PCI0.XHC.PMEE = Zero
                Notify (\_SB.PCI0.XHC, 0x02) // Device Wake
            }

            Notify (\_SB.PCI0.HDEF, 0x02) // Device Wake
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x00, 0x00001810, 0x06){}
        Processor (CPU1, 0x01, 0x00001810, 0x06){}
        Processor (CPU2, 0x02, 0x00001810, 0x06){}
        Processor (CPU3, 0x03, 0x00001810, 0x06){}
        Processor (CPU4, 0x04, 0x00001810, 0x06){}
        Processor (CPU5, 0x05, 0x00001810, 0x06){}
        Processor (CPU6, 0x06, 0x00001810, 0x06){}
        Processor (CPU7, 0x07, 0x00001810, 0x06){}
    }

    Scope (_TZ)
    {
        ThermalZone (TZ01)
        {
            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                If ((DTS2 > DTS1))
                {
                    Local0 = DTS2 /* \DTS2 */
                }
                Else
                {
                    Local0 = DTS1 /* \DTS1 */
                }

                If ((Local0 <= 0x10))
                {
                    AST1 = 0x0B4C
                    Return (0x0B4C)
                }
                Else
                {
                    AST1 = Local0
                    Return ((0x0AAC + (Local0 * 0x0A)))
                }
            }

            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Return ((0x0AAC + (CRTT * 0x0A)))
            }
        }
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                IVDD,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
            Field (MCHT, ByteAcc, NoLock, Preserve)
            {
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x003F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0040,             // Length
                    ,, )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFEB00000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y00._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y00._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0D._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0D._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, M1LN)  // _LEN: Length
                M1MN = (TLUD << 0x14)
                M1LN = ((M1MX - M1MN) + One)
                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (^XHC.CUID (Arg0))
                {
                    Return (^XHC.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf ((OSYS >= 0x07DC))
                {
                    If ((XCNT == Zero))
                    {
                        ^XHC.XSEL ()
                        XCNT++
                    }
                }

                CDW1 |= 0x04
                Return (Local0)
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (GPIC)
                {
                    Return (Package (0x24)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            One, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            One, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x03, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            Zero, 
                            Zero, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            Zero, 
                            Zero, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            One, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            Zero, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            Zero, 
                            0x17
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            One, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            Zero, 
                            0x10
                        }
                    })
                }
                Else
                {
                    Return (Package (0x24)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            Zero, 
                            LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            One, 
                            LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x03, 
                            LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            Zero, 
                            LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            Zero, 
                            LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0004FFFF, 
                            Zero, 
                            LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            Zero, 
                            LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            One, 
                            LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            Zero, 
                            LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            One, 
                            LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x02, 
                            LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0016FFFF, 
                            0x03, 
                            LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0019FFFF, 
                            Zero, 
                            LNKE, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            Zero, 
                            LNKF, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            One, 
                            LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x02, 
                            LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001AFFFF, 
                            0x03, 
                            LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            LNKG, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            One, 
                            LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x02, 
                            LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            0x03, 
                            LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            LNKH, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            One, 
                            LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x02, 
                            LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            0x03, 
                            LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            LNKA, 
                            Zero
                        }
                    })
                }
            }

            Device (PDRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00004000,         // Address Length
                        _Y0E)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00008000,         // Address Length
                        _Y10)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y12)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y11)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y13)
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED40000,         // Address Base
                        0x00050000,         // Address Length
                        _Y14)
                    Memory32Fixed (ReadOnly,
                        0xFED90000,         // Address Base
                        0x00002000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFF000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFEE00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED80000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED84000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y0F)
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y0E._BAS, RBR0)  // _BAS: Base Address
                    RBR0 = (^^LPCB.RCBA << 0x0E)
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y0F._BAS, TBR0)  // _BAS: Base Address
                    TBR0 = IPSB /* \IPSB */
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y0F._LEN, TBLN)  // _LEN: Length
                    If ((IPSB == Zero))
                    {
                        TBLN = Zero
                    }

                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y10._BAS, MBR0)  // _BAS: Base Address
                    MBR0 = (MHBR << 0x0F)
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._BAS, EPR0)  // _BAS: Base Address
                    EPR0 = (EPBR << 0x0C)
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, DBR0)  // _BAS: Base Address
                    DBR0 = (DIBR << 0x0C)
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._BAS, XBR0)  // _BAS: Base Address
                    XBR0 = (PXBR << 0x1A)
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._LEN, XSZ0)  // _LEN: Length
                    XSZ0 = (0x10000000 >> PXSZ) /* \_SB_.PCI0.PXSZ */
                    If ((^^LPCB.GTPM.ACSS != 0xFF))
                    {
                        If ((TPMH != One))
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._BAS, TPMB)  // _BAS: Base Address
                            CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._LEN, TPML)  // _LEN: Length
                            TPMB = 0xFED45000
                            TPML = 0x0004B000
                        }
                    }

                    Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
                }

                OperationRegion (SRG1, SystemIO, 0xB2, One)
                Field (SRG1, ByteAcc, NoLock, Preserve)
                {
                    TRP4,   8
                }
            }

            Device (PEGP)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
                Field (PEGR, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    PSTS,   1, 
                    Offset (0x2C), 
                    GENG,   1, 
                        ,   1, 
                    PMEG,   1
                }

                Method (HPME, 0, Serialized)
                {
                    PSTS = One
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                Zero, 
                                0x10
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                Zero, 
                                0x11
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                Zero, 
                                0x12
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                Zero, 
                                0x13
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                Zero, 
                                LNKA, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                One, 
                                LNKB, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                LNKC, 
                                Zero
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                LNKD, 
                                Zero
                            }
                        })
                    }
                }

                Name (LTRS, Zero)
                Name (OBFS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    LTRS = LTRA /* \LTRA */
                    OBFS = OBFA /* \OBFA */
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (OPTS, Zero)
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    If ((Arg1 == 0x02))
                                    {
                                        OPTS = One
                                        If (LTRS)
                                        {
                                            OPTS |= 0x40
                                        }

                                        If (OBFS)
                                        {
                                            OPTS |= 0x10
                                        }

                                        Return (OPTS) /* \_SB_.PCI0.PEGP.OPTS */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                                Case (0x04)
                                {
                                    If ((Arg1 == 0x02))
                                    {
                                        If (OBFS)
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                        Else
                                        {
                                            Return (Buffer (0x10)
                                            {
                                                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                            })
                                        }
                                    }
                                }
                                Case (0x06)
                                {
                                    If ((Arg1 == 0x02))
                                    {
                                        If (LTRS)
                                        {
                                            LTRV [Zero] = ((SMSL >> 0x0A) & 0x07)
                                            LTRV [One] = (SMSL & 0x03FF)
                                            LTRV [0x02] = ((SNSL >> 0x0A) & 0x07)
                                            LTRV [0x03] = (SNSL & 0x03FF)
                                            Return (LTRV) /* \_SB_.PCI0.PEGP.LTRV */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                }

                            }
                        }

                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (DGFX, PCI_Config, Zero, 0xF0)
                    Field (DGFX, DWordAcc, Lock, Preserve)
                    {
                        Offset (0x0B), 
                        LNKV,   8
                    }

                    Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                    {
                        Return (VPSC (0x0100))
                    }

                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        VDOS (Arg0)
                    }
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    VDOS (Arg0)
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If ((NDID == One))
                    {
                        Name (TMP1, Package (0x01)
                        {
                            0xFFFFFFFF
                        })
                        TMP1 [Zero] = DID1 /* \DID1 */
                        Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
                    }

                    If ((NDID == 0x02))
                    {
                        Name (TMP2, Package (0x02)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP2 [Zero] = DID1 /* \DID1 */
                        TMP2 [One] = DID2 /* \DID2 */
                        Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
                    }

                    If ((NDID == 0x03))
                    {
                        Name (TMP3, Package (0x03)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP3 [Zero] = DID1 /* \DID1 */
                        TMP3 [One] = DID2 /* \DID2 */
                        TMP3 [0x02] = DID3 /* \DID3 */
                        Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
                    }

                    If ((NDID == 0x04))
                    {
                        Name (TMP4, Package (0x04)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP4 [Zero] = DID1 /* \DID1 */
                        TMP4 [One] = DID2 /* \DID2 */
                        TMP4 [0x02] = DID3 /* \DID3 */
                        TMP4 [0x03] = DID4 /* \DID4 */
                        Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
                    }

                    If ((NDID == 0x05))
                    {
                        Name (TMP5, Package (0x05)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP5 [Zero] = DID1 /* \DID1 */
                        TMP5 [One] = DID2 /* \DID2 */
                        TMP5 [0x02] = DID3 /* \DID3 */
                        TMP5 [0x03] = DID4 /* \DID4 */
                        TMP5 [0x04] = DID5 /* \DID5 */
                        Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
                    }

                    If ((NDID == 0x06))
                    {
                        Name (TMP6, Package (0x06)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP6 [Zero] = DID1 /* \DID1 */
                        TMP6 [One] = DID2 /* \DID2 */
                        TMP6 [0x02] = DID3 /* \DID3 */
                        TMP6 [0x03] = DID4 /* \DID4 */
                        TMP6 [0x04] = DID5 /* \DID5 */
                        TMP6 [0x05] = DID6 /* \DID6 */
                        Return (TMP6) /* \_SB_.PCI0.GFX0._DOD.TMP6 */
                    }

                    If ((NDID == 0x07))
                    {
                        Name (TMP7, Package (0x07)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP7 [Zero] = DID1 /* \DID1 */
                        TMP7 [One] = DID2 /* \DID2 */
                        TMP7 [0x02] = DID3 /* \DID3 */
                        TMP7 [0x03] = DID4 /* \DID4 */
                        TMP7 [0x04] = DID5 /* \DID5 */
                        TMP7 [0x05] = DID6 /* \DID6 */
                        TMP7 [0x06] = DID7 /* \DID7 */
                        Return (TMP7) /* \_SB_.PCI0.GFX0._DOD.TMP7 */
                    }

                    If ((NDID == 0x08))
                    {
                        Name (TMP8, Package (0x08)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP8 [Zero] = DID1 /* \DID1 */
                        TMP8 [One] = DID2 /* \DID2 */
                        TMP8 [0x02] = DID3 /* \DID3 */
                        TMP8 [0x03] = DID4 /* \DID4 */
                        TMP8 [0x04] = DID5 /* \DID5 */
                        TMP8 [0x05] = DID6 /* \DID6 */
                        TMP8 [0x06] = DID7 /* \DID7 */
                        TMP8 [0x07] = DID8 /* \DID8 */
                        Return (TMP8) /* \_SB_.PCI0.GFX0._DOD.TMP8 */
                    }

                    If ((NDID == 0x09))
                    {
                        Name (TMP9, Package (0x09)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMP9 [Zero] = DID1 /* \DID1 */
                        TMP9 [One] = DID2 /* \DID2 */
                        TMP9 [0x02] = DID3 /* \DID3 */
                        TMP9 [0x03] = DID4 /* \DID4 */
                        TMP9 [0x04] = DID5 /* \DID5 */
                        TMP9 [0x05] = DID6 /* \DID6 */
                        TMP9 [0x06] = DID7 /* \DID7 */
                        TMP9 [0x07] = DID8 /* \DID8 */
                        TMP9 [0x08] = DID9 /* \DID9 */
                        Return (TMP9) /* \_SB_.PCI0.GFX0._DOD.TMP9 */
                    }

                    If ((NDID == 0x0A))
                    {
                        Name (TMPA, Package (0x0A)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMPA [Zero] = DID1 /* \DID1 */
                        TMPA [One] = DID2 /* \DID2 */
                        TMPA [0x02] = DID3 /* \DID3 */
                        TMPA [0x03] = DID4 /* \DID4 */
                        TMPA [0x04] = DID5 /* \DID5 */
                        TMPA [0x05] = DID6 /* \DID6 */
                        TMPA [0x06] = DID7 /* \DID7 */
                        TMPA [0x07] = DID8 /* \DID8 */
                        TMPA [0x08] = DID9 /* \DID9 */
                        TMPA [0x09] = DIDA /* \DIDA */
                        Return (TMPA) /* \_SB_.PCI0.GFX0._DOD.TMPA */
                    }

                    If ((NDID == 0x0B))
                    {
                        Name (TMPB, Package (0x0B)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMPB [Zero] = DID1 /* \DID1 */
                        TMPB [One] = DID2 /* \DID2 */
                        TMPB [0x02] = DID3 /* \DID3 */
                        TMPB [0x03] = DID4 /* \DID4 */
                        TMPB [0x04] = DID5 /* \DID5 */
                        TMPB [0x05] = DID6 /* \DID6 */
                        TMPB [0x06] = DID7 /* \DID7 */
                        TMPB [0x07] = DID8 /* \DID8 */
                        TMPB [0x08] = DID9 /* \DID9 */
                        TMPB [0x09] = DIDA /* \DIDA */
                        TMPB [0x0A] = DIDB /* \DIDB */
                        Return (TMPB) /* \_SB_.PCI0.GFX0._DOD.TMPB */
                    }

                    If ((NDID == 0x0C))
                    {
                        Name (TMPC, Package (0x0C)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMPC [Zero] = DID1 /* \DID1 */
                        TMPC [One] = DID2 /* \DID2 */
                        TMPC [0x02] = DID3 /* \DID3 */
                        TMPC [0x03] = DID4 /* \DID4 */
                        TMPC [0x04] = DID5 /* \DID5 */
                        TMPC [0x05] = DID6 /* \DID6 */
                        TMPC [0x06] = DID7 /* \DID7 */
                        TMPC [0x07] = DID8 /* \DID8 */
                        TMPC [0x08] = DID9 /* \DID9 */
                        TMPC [0x09] = DIDA /* \DIDA */
                        TMPC [0x0A] = DIDB /* \DIDB */
                        TMPC [0x0B] = DIDC /* \DIDC */
                        Return (TMPC) /* \_SB_.PCI0.GFX0._DOD.TMPC */
                    }

                    If ((NDID == 0x0D))
                    {
                        Name (TMPD, Package (0x0D)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMPD [Zero] = DID1 /* \DID1 */
                        TMPD [One] = DID2 /* \DID2 */
                        TMPD [0x02] = DID3 /* \DID3 */
                        TMPD [0x03] = DID4 /* \DID4 */
                        TMPD [0x04] = DID5 /* \DID5 */
                        TMPD [0x05] = DID6 /* \DID6 */
                        TMPD [0x06] = DID7 /* \DID7 */
                        TMPD [0x07] = DID8 /* \DID8 */
                        TMPD [0x08] = DID9 /* \DID9 */
                        TMPD [0x09] = DIDA /* \DIDA */
                        TMPD [0x0A] = DIDB /* \DIDB */
                        TMPD [0x0B] = DIDC /* \DIDC */
                        TMPD [0x0C] = DIDD /* \DIDD */
                        Return (TMPD) /* \_SB_.PCI0.GFX0._DOD.TMPD */
                    }

                    If ((NDID == 0x0E))
                    {
                        Name (TMPE, Package (0x0E)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMPE [Zero] = DID1 /* \DID1 */
                        TMPE [One] = DID2 /* \DID2 */
                        TMPE [0x02] = DID3 /* \DID3 */
                        TMPE [0x03] = DID4 /* \DID4 */
                        TMPE [0x04] = DID5 /* \DID5 */
                        TMPE [0x05] = DID6 /* \DID6 */
                        TMPE [0x06] = DID7 /* \DID7 */
                        TMPE [0x07] = DID8 /* \DID8 */
                        TMPE [0x08] = DID9 /* \DID9 */
                        TMPE [0x09] = DIDA /* \DIDA */
                        TMPE [0x0A] = DIDB /* \DIDB */
                        TMPE [0x0B] = DIDC /* \DIDC */
                        TMPE [0x0C] = DIDD /* \DIDD */
                        TMPE [0x0D] = DIDE /* \DIDE */
                        Return (TMPE) /* \_SB_.PCI0.GFX0._DOD.TMPE */
                    }

                    If ((NDID == 0x0F))
                    {
                        Name (TMPF, Package (0x0F)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        TMPF [Zero] = DID1 /* \DID1 */
                        TMPF [One] = DID2 /* \DID2 */
                        TMPF [0x02] = DID3 /* \DID3 */
                        TMPF [0x03] = DID4 /* \DID4 */
                        TMPF [0x04] = DID5 /* \DID5 */
                        TMPF [0x05] = DID6 /* \DID6 */
                        TMPF [0x06] = DID7 /* \DID7 */
                        TMPF [0x07] = DID8 /* \DID8 */
                        TMPF [0x08] = DID9 /* \DID9 */
                        TMPF [0x09] = DIDA /* \DIDA */
                        TMPF [0x0A] = DIDB /* \DIDB */
                        TMPF [0x0B] = DIDC /* \DIDC */
                        TMPF [0x0C] = DIDD /* \DIDD */
                        TMPF [0x0D] = DIDE /* \DIDE */
                        TMPF [0x0E] = DIDF /* \DIDF */
                        Return (TMPF) /* \_SB_.PCI0.GFX0._DOD.TMPF */
                    }

                    Return (Package (0x01)
                    {
                        0x0100
                    })
                }

                Name (BLVL, Package (0x0A)
                {
                    0x64, 
                    0x15, 
                    0x15, 
                    0x1F, 
                    0x2B, 
                    0x35, 
                    0x41, 
                    0x4F, 
                    0x60, 
                    0x64
                })
                Method (BCMN, 1, NotSerialized)
                {
                    BCLP = Arg0
                    LBPC = Zero
                }

                Device (DDC1)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DID1 == Zero))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return ((DID1 & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTD1)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXD1)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXD1 = One
                        }
                        Else
                        {
                            NXD1 = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPS1 = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPS1 = One
                        KBBD (One)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPS1 == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        If ((OSYS < 0x07DC))
                        {
                            Name (BUFF, Package (0x0A)
                            {
                                0x64, 
                                0x0A, 
                                0x0A, 
                                0x0F, 
                                0x1E, 
                                0x28, 
                                0x37, 
                                0x41, 
                                0x50, 
                                0x64
                            })
                            BUFF [Zero] = BRTD /* \BRTD */
                            BUFF [One] = BRTB /* \BRTB */
                            BUFF [0x02] = BRT0 /* \BRT0 */
                            BUFF [0x03] = BRT1 /* \BRT1 */
                            BUFF [0x04] = BRT2 /* \BRT2 */
                            BUFF [0x05] = BRT3 /* \BRT3 */
                            BUFF [0x06] = BRT4 /* \BRT4 */
                            BUFF [0x07] = BRT5 /* \BRT5 */
                            BUFF [0x08] = BRT6 /* \BRT6 */
                            BUFF [0x09] = BRT7 /* \BRT7 */
                            If (((OSYS < 0x07D6) && HPSU))
                            {
                                BUFF [Zero] = BCLA /* \BCLA */
                                BUFF [One] = BCLD /* \BCLD */
                            }

                            Return (BUFF) /* \_SB_.PCI0.GFX0.DDC1._BCL.BUFF */
                        }
                        Else
                        {
                            Name (BUFN, Package (0x67)
                            {
                                0x64, 
                                0x1E, 
                                Zero, 
                                One, 
                                0x02, 
                                0x03, 
                                0x04, 
                                0x05, 
                                0x06, 
                                0x07, 
                                0x08, 
                                0x09, 
                                0x0A, 
                                0x0B, 
                                0x0C, 
                                0x0D, 
                                0x0E, 
                                0x0F, 
                                0x10, 
                                0x11, 
                                0x12, 
                                0x13, 
                                0x14, 
                                0x15, 
                                0x16, 
                                0x17, 
                                0x18, 
                                0x19, 
                                0x1A, 
                                0x1B, 
                                0x1C, 
                                0x1D, 
                                0x1E, 
                                0x1F, 
                                0x20, 
                                0x21, 
                                0x22, 
                                0x23, 
                                0x24, 
                                0x25, 
                                0x26, 
                                0x27, 
                                0x28, 
                                0x29, 
                                0x2A, 
                                0x2B, 
                                0x2C, 
                                0x2D, 
                                0x2E, 
                                0x2F, 
                                0x30, 
                                0x31, 
                                0x32, 
                                0x33, 
                                0x34, 
                                0x35, 
                                0x36, 
                                0x37, 
                                0x38, 
                                0x39, 
                                0x3A, 
                                0x3B, 
                                0x3C, 
                                0x3D, 
                                0x3E, 
                                0x3F, 
                                0x40, 
                                0x41, 
                                0x42, 
                                0x43, 
                                0x44, 
                                0x45, 
                                0x46, 
                                0x47, 
                                0x48, 
                                0x49, 
                                0x4A, 
                                0x4B, 
                                0x4C, 
                                0x4D, 
                                0x4E, 
                                0x4F, 
                                0x50, 
                                0x51, 
                                0x52, 
                                0x53, 
                                0x54, 
                                0x55, 
                                0x56, 
                                0x57, 
                                0x58, 
                                0x59, 
                                0x5A, 
                                0x5B, 
                                0x5C, 
                                0x5D, 
                                0x5E, 
                                0x5F, 
                                0x60, 
                                0x61, 
                                0x62, 
                                0x63, 
                                0x64
                            })
                            Return (BUFN) /* \_SB_.PCI0.GFX0.DDC1._BCL.BUFN */
                        }
                    }

                    Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                    {
                        If ((OSYS < 0x07DC))
                        {
                            Local1 = 0x07
                            SMBR (0xFE00, 0x2A, Zero, Zero, Zero, Zero, 0xB2)
                            If ((OEAX == Zero))
                            {
                                Local0 = OECX /* \OECX */
                                Local0 >>= 0x0D
                                If ((Local0 <= 0x03))
                                {
                                    Local1 = LBRL /* \LBRL */
                                }
                                Else
                                {
                                    Local1 = LBRH /* \LBRH */
                                    Local0 -= 0x04
                                }

                                Local0 *= 0x08
                                Local1 >>= Local0
                                Local1 &= 0xFF
                            }
                        }
                        Else
                        {
                            Local1 = CBLV /* \_SB_.PCI0.GFX0.CBLV */
                            Local1 &= 0xFF
                        }

                        Return (Local1)
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If ((OSYS < 0x07DC))
                        {
                            If (((OSYS >= 0x07D6) || (HPSU == Zero)))
                            {
                                Local0 = Zero
                                If ((BRT1 == Arg0))
                                {
                                    Local0 = One
                                }
                                ElseIf ((BRT2 == Arg0))
                                {
                                    Local0 = 0x02
                                }
                                ElseIf ((BRT3 == Arg0))
                                {
                                    Local0 = 0x03
                                }
                                ElseIf ((BRT4 == Arg0))
                                {
                                    Local0 = 0x04
                                }
                                ElseIf ((BRT5 == Arg0))
                                {
                                    Local0 = 0x05
                                }
                                ElseIf ((BRT6 == Arg0))
                                {
                                    Local0 = 0x06
                                }
                                ElseIf ((BRT7 == Arg0))
                                {
                                    Local0 = 0x07
                                }

                                Local0 <<= 0x0D
                                SMBR (0xFF00, 0x2A, Local0, Zero, Zero, Zero, 0xB2)
                            }
                        }
                    }
                }

                Device (DDC2)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DID2 == Zero))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return ((DID2 & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTD2)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXD2)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXD2 = One
                        }
                        Else
                        {
                            NXD2 = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPS2 = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPS2 = One
                        KBBD (0x02)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPS2 == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDC3)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DID3 == Zero))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return ((DID3 & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTD3)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXD3)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXD3 = One
                        }
                        Else
                        {
                            NXD3 = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPS3 = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPS3 = One
                        KBBD (0x03)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPS3 == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDC4)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DID4 == Zero))
                        {
                            Return (0x04)
                        }
                        Else
                        {
                            Return ((DID4 & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTD4)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXD4)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXD4 = One
                        }
                        Else
                        {
                            NXD4 = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPS4 = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPS4 = One
                        KBBD (0x04)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPS4 == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDC5)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DID5 == Zero))
                        {
                            Return (0x05)
                        }
                        Else
                        {
                            Return ((DID5 & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTD5)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXD5)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXD5 = One
                        }
                        Else
                        {
                            NXD5 = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPS5 = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPS5 = One
                        KBBD (0x05)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPS5 == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDC6)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DID6 == Zero))
                        {
                            Return (0x06)
                        }
                        Else
                        {
                            Return ((DID6 & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTD6)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXD6)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXD6 = One
                        }
                        Else
                        {
                            NXD6 = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPS6 = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPS6 = One
                        KBBD (0x06)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPS6 == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDC7)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DID7 == Zero))
                        {
                            Return (0x07)
                        }
                        Else
                        {
                            Return ((DID7 & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTD7)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXD7)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXD7 = One
                        }
                        Else
                        {
                            NXD7 = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPS7 = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPS7 = One
                        KBBD (0x07)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPS7 == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDC8)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DID8 == Zero))
                        {
                            Return (0x08)
                        }
                        Else
                        {
                            Return ((DID8 & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTD8)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXD8)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXD8 = One
                        }
                        Else
                        {
                            NXD8 = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPS8 = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPS8 = One
                        KBBD (0x08)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPS8 == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDC9)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DID9 == Zero))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return ((DID9 & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTD9)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXD9)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXD9 = One
                        }
                        Else
                        {
                            NXD9 = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPS9 = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPS9 = One
                        KBBD (0x09)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPS9 == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDCA)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DIDA == Zero))
                        {
                            Return (0x0A)
                        }
                        Else
                        {
                            Return ((DIDA & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTDA)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXDA)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXDA = One
                        }
                        Else
                        {
                            NXDA = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPSA = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPSA = One
                        KBBD (0x0A)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPSA == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDCB)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DIDB == Zero))
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return ((DIDB & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTDB)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXDB)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXDB = One
                        }
                        Else
                        {
                            NXDB = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPSB = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPSB = One
                        KBBD (0x0B)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPSB == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDCC)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DIDC == Zero))
                        {
                            Return (0x0C)
                        }
                        Else
                        {
                            Return ((DIDC & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTDC)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXDC)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXDC = One
                        }
                        Else
                        {
                            NXDC = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPSC = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPSC = One
                        KBBD (0x0C)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPSC == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDCD)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DIDD == Zero))
                        {
                            Return (0x0D)
                        }
                        Else
                        {
                            Return ((DIDD & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CUDD)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NTDD)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NTDD = One
                        }
                        Else
                        {
                            NTDD = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPSD = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPSD = One
                        KBBD (0x0D)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPSD == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDCE)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DIDE == Zero))
                        {
                            Return (0x0E)
                        }
                        Else
                        {
                            Return ((DIDE & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTDE)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXDE)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXDE = One
                        }
                        Else
                        {
                            NXDE = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPSE = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPSE = One
                        KBBD (0x0E)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPSE == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (DDCF)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        If ((DIDF == Zero))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return ((DIDF & 0xFFFF))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        If (CTDF)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0D)
                        }
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If (NXDF)
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        Local0 = Arg0
                        Local1 = (Local0 & One)
                        If (Local1)
                        {
                            NXDF = One
                        }
                        Else
                        {
                            NXDF = Zero
                        }
                    }

                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        DPSF = Zero
                        KBBE ()
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        DPSF = One
                        KBBD (0x0F)
                    }

                    Method (_PSC, 0, Serialized)  // _PSC: Power State Current
                    {
                        If ((DPSF == One))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    VPSX (Zero, Zero, 0x10, Zero)
                }

                Method (_PS1, 0, Serialized)  // _PS1: Power State 1
                {
                    VPSX (One, One, 0x10, Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    VPSX (0x03, One, 0x10, Zero)
                }

                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (VPSC (0x10))
                }

                Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
                {
                    Return (TROM (Arg0, Arg1, Zero))
                }

                Scope (^^PCI0)
                {
                    OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                    Field (MCHP, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x14), 
                        AUDE,   8, 
                        Offset (0x60), 
                        TASM,   10, 
                        Offset (0x62)
                    }
                }

                OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
                Field (IGDP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x12), 
                        ,   1, 
                    GIVD,   1, 
                        ,   2, 
                    GUMA,   3, 
                    Offset (0x14), 
                        ,   4, 
                    GMFN,   1, 
                    Offset (0x18), 
                    Offset (0xA4), 
                    ASLE,   8, 
                    Offset (0xA8), 
                    GSSE,   1, 
                    GSSB,   14, 
                    GSES,   1, 
                    Offset (0xB0), 
                        ,   12, 
                    CDVL,   1, 
                    Offset (0xB2), 
                    Offset (0xB5), 
                    LBPC,   8, 
                    Offset (0xBC), 
                    ASLS,   32
                }

                OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
                Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    DMOD,   32, 
                    PCON,   32, 
                    DVER,   64, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   32, 
                    DDL2,   32, 
                    DDL3,   32, 
                    DDL4,   32, 
                    DDL5,   32, 
                    DDL6,   32, 
                    DDL7,   32, 
                    DDL8,   32, 
                    CPDL,   32, 
                    CPL2,   32, 
                    CPL3,   32, 
                    CPL4,   32, 
                    CPL5,   32, 
                    CPL6,   32, 
                    CPL7,   32, 
                    CPL8,   32, 
                    CADL,   32, 
                    CAL2,   32, 
                    CAL3,   32, 
                    CAL4,   32, 
                    CAL5,   32, 
                    CAL6,   32, 
                    CAL7,   32, 
                    CAL8,   32, 
                    NADL,   32, 
                    NDL2,   32, 
                    NDL3,   32, 
                    NDL4,   32, 
                    NDL5,   32, 
                    NDL6,   32, 
                    NDL7,   32, 
                    NDL8,   32, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    DDL9,   32, 
                    DD10,   32, 
                    DD11,   32, 
                    DD12,   32, 
                    DD13,   32, 
                    DD14,   32, 
                    DD15,   32, 
                    CPL9,   32, 
                    CP10,   32, 
                    CP11,   32, 
                    CP12,   32, 
                    CP13,   32, 
                    CP14,   32, 
                    CP15,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    CBLV,   32, 
                    BCLM,   320, 
                    CPFM,   32, 
                    EPFM,   32, 
                    PLUT,   592, 
                    PFMB,   32, 
                    CCDV,   32, 
                    PCFT,   32, 
                    SROT,   32, 
                    IUER,   32, 
                    FDSP,   64, 
                    FDSS,   32, 
                    Offset (0x400), 
                    GVD1,   49152, 
                    PHED,   32, 
                    BDDC,   2048
                }

                Name (DBTB, Package (0x15)
                {
                    Zero, 
                    0x07, 
                    0x38, 
                    0x01C0, 
                    0x0E00, 
                    0x3F, 
                    0x01C7, 
                    0x0E07, 
                    0x01F8, 
                    0x0E38, 
                    0x0FC0, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x7000, 
                    0x7007, 
                    0x7038, 
                    0x71C0, 
                    0x7E00
                })
                Name (CDCT, Package (0x05)
                {
                    Package (0x02)
                    {
                        0xE4, 
                        0x0140
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }, 

                    Package (0x02)
                    {
                        Zero, 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        0xDE, 
                        0x014D
                    }
                })
                Name (SUCC, One)
                Name (NVLD, 0x02)
                Name (CRIT, 0x04)
                Name (NCRT, 0x06)
                Method (GSCI, 0, Serialized)
                {
                    Method (GBDA, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = 0x51
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            PARM = 0x00200000
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            PARM = Zero
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            PARM &= 0xFFF80000
                            PARM |= (IPAT << 0x08)
                            If (LIDS)
                            {
                                PARM |= 0x00020000
                            }
                            Else
                            {
                                PARM |= 0x00010000
                            }

                            PARM |= 0x00080000
                            GESF = One
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                            PARM ^= One
                            PARM |= (GMFN << One)
                            PARM |= 0x1800
                            PARM |= 0x00060000
                            PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                0x15) /* \_SB_.PCI0.GFX0.PARM */
                            GESF = One
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            PARM = Zero
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            PARM = Zero
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        GESF = Zero
                        Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                    }

                    Method (SBCB, 0, Serialized)
                    {
                        If ((GESF == Zero))
                        {
                            PARM = 0x00020000
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == One))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x03))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x04))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x05))
                        {
                            Local0 = Zero
                            Local1 = (PARM & 0xFFFF)
                            If (((Local1 == 0x82) || (Local1 == 0x8200)))
                            {
                                Local0 = One
                            }
                            ElseIf (((Local1 == 0x81) || (Local1 == 0x8100)))
                            {
                                Local0 = 0x02
                            }
                            ElseIf (((Local1 == 0x84) || (Local1 == 0x8400)))
                            {
                                Local0 = 0x03
                            }
                            ElseIf (((Local1 == 0x88) || (Local1 == 0x8800)))
                            {
                                Local0 = 0x04
                            }
                            ElseIf (((Local1 == 0x90) || (Local1 == 0x9000)))
                            {
                                Local0 = 0x05
                            }
                            ElseIf (((Local1 == 0x0182) || (Local1 == 0x8201)))
                            {
                                Local0 = 0x06
                            }
                            ElseIf (((Local1 == 0x8102) || (Local1 == 0x0281)))
                            {
                                Local0 = 0x06
                            }
                            ElseIf (((Local1 == 0x0482) || (Local1 == 0x8204)))
                            {
                                Local0 = 0x07
                            }
                            ElseIf (((Local1 == 0x8402) || (Local1 == 0x0284)))
                            {
                                Local0 = 0x07
                            }
                            ElseIf (((Local1 == 0x0882) || (Local1 == 0x8208)))
                            {
                                Local0 = 0x08
                            }
                            ElseIf (((Local1 == 0x8802) || (Local1 == 0x0288)))
                            {
                                Local0 = 0x08
                            }
                            ElseIf (((Local1 == 0x1082) || (Local1 == 0x8210)))
                            {
                                Local0 = 0x09
                            }
                            ElseIf (((Local1 == 0x9002) || (Local1 == 0x0290)))
                            {
                                Local0 = 0x09
                            }
                            ElseIf (((Local1 == 0x0481) || (Local1 == 0x8104)))
                            {
                                Local0 = 0x0A
                            }
                            ElseIf (((Local1 == 0x8401) || (Local1 == 0x0184)))
                            {
                                Local0 = 0x0A
                            }
                            ElseIf (((Local1 == 0x0881) || (Local1 == 0x8108)))
                            {
                                Local0 = 0x0B
                            }
                            ElseIf (((Local1 == 0x8801) || (Local1 == 0x0188)))
                            {
                                Local0 = 0x0B
                            }
                            ElseIf (((Local1 == 0x1081) || (Local1 == 0x8110)))
                            {
                                Local0 = 0x0C
                            }
                            ElseIf (((Local1 == 0x9001) || (Local1 == 0x0190)))
                            {
                                Local0 = 0x0C
                            }
                            ElseIf (((Local1 == 0x0884) || (Local1 == 0x8408)))
                            {
                                Local0 = 0x0D
                            }
                            ElseIf (((Local1 == 0x8804) || (Local1 == 0x0488)))
                            {
                                Local0 = 0x0D
                            }
                            ElseIf (((Local1 == 0x1084) || (Local1 == 0x8410)))
                            {
                                Local0 = 0x0E
                            }
                            ElseIf (((Local1 == 0x9004) || (Local1 == 0x0490)))
                            {
                                Local0 = 0x0E
                            }
                            ElseIf (((Local1 == 0x1088) || (Local1 == 0x8810)))
                            {
                                Local0 = 0x0F
                            }
                            ElseIf (((Local1 == 0x9008) || (Local1 == 0x0890)))
                            {
                                Local0 = 0x0F
                            }

                            GESF = Zero
                            PARM = Zero
                            If ((Local0 == Zero))
                            {
                                Return (NVLD) /* \_SB_.PCI0.GFX0.NVLD */
                            }

                            SMBR (0xFA00, 0x8001, Local0, 0x2800, Zero, Zero, 0xB2)
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x07))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x08))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x09))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0A))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x0B))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x10))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x11))
                        {
                            PARM = Zero
                            GESF = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x12))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x13))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x14))
                        {
                            GESF = Zero
                            PARM = Zero
                            Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                        }

                        If ((GESF == 0x15))
                        {
                            If ((PARM == One))
                            {
                                AUDE |= 0x20
                                ^^^B0D3.ARST (^^^B0D3.ABWA (One), ^^^B0D3.ASTR (^^^B0D3.AINI (^^^B0D3.CXDC (^^^B0D3.ABWA (Zero), Notify (PCI0, Zero) // Bus Check), If (
                                    (PARM == Zero))
                                            {
                                                AUDE &= 0xDF
                                                Notify (PCI0, Zero) // Bus Check
                                            }, GESF = Zero), PARM = Zero, Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */, 
                                                    GESF = Zero), Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */)
                            }
                        }
                    }

                    If ((GEFC == 0x04))
                    {
                        GXFC = GBDA ()
                    }

                    If ((GEFC == 0x06))
                    {
                        GXFC = SBCB ()
                    }

                    GEFC = Zero
                    SCIS = One
                    GSSE = Zero
                    SCIE = Zero
                    Return (Zero)
                }

                Method (PDRD, 0, NotSerialized)
                {
                    Return (!DRDY)
                }

                Method (PSTS, 0, NotSerialized)
                {
                    If ((CSTS > 0x02))
                    {
                        Sleep (ASLP)
                    }

                    Return ((CSTS == 0x03))
                }

                Method (GNOT, 2, NotSerialized)
                {
                    If (PDRD ())
                    {
                        Return (One)
                    }

                    CEVT = Arg0
                    CSTS = 0x03
                    If (((CHPD == Zero) && (Arg1 == Zero)))
                    {
                        If (((OSYS > 0x07D0) && (OSYS < 0x07D6)))
                        {
                            Notify (PCI0, Arg1)
                        }
                        Else
                        {
                            Notify (GFX0, Arg1)
                        }
                    }

                    If (CondRefOf (HNOT))
                    {
                        HNOT (Arg0)
                    }
                    Else
                    {
                        Notify (GFX0, 0x80) // Status Change
                    }

                    Return (Zero)
                }

                Method (GHDS, 1, NotSerialized)
                {
                    TIDX = Arg0
                    Return (GNOT (One, Zero))
                }

                Method (GLID, 1, NotSerialized)
                {
                    If ((Arg0 == One))
                    {
                        CLID = 0x03
                    }
                    Else
                    {
                        CLID = Arg0
                    }

                    If (GNOT (0x02, Zero))
                    {
                        CLID |= 0x80000000
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (GDCK, 1, NotSerialized)
                {
                    CDCK = Arg0
                    Return (GNOT (0x04, Zero))
                }

                Method (PARD, 0, NotSerialized)
                {
                    If (!ARDY)
                    {
                        Sleep (ASLP)
                    }

                    Return (!ARDY)
                }

                Method (IUEH, 1, Serialized)
                {
                    IUER &= 0xC0
                    IUER ^= (One << Arg0)
                    If ((Arg0 <= 0x04))
                    {
                        Return (AINT (0x05, Zero))
                    }
                    Else
                    {
                        Return (AINT (Arg0, Zero))
                    }
                }

                Method (AINT, 2, NotSerialized)
                {
                    If (!(TCHE & (One << Arg0)))
                    {
                        Return (One)
                    }

                    If (PARD ())
                    {
                        Return (One)
                    }

                    If (((Arg0 >= 0x05) && (Arg0 <= 0x07)))
                    {
                        ASLC = (One << Arg0)
                        ASLE = One
                        Local2 = Zero
                        While (((Local2 < 0xFA) && (ASLC != Zero)))
                        {
                            Sleep (0x04)
                            Local2++
                        }

                        Return (Zero)
                    }

                    If ((Arg0 == 0x02))
                    {
                        If (CPFM)
                        {
                            Local0 = (CPFM & 0x0F)
                            Local1 = (EPFM & 0x0F)
                            If ((Local0 == One))
                            {
                                If ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                ElseIf ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                Else
                                {
                                    PFIT = One
                                }
                            }

                            If ((Local0 == 0x06))
                            {
                                If ((Local1 & 0x08))
                                {
                                    PFIT = 0x08
                                }
                                ElseIf ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                Else
                                {
                                    PFIT = 0x06
                                }
                            }

                            If ((Local0 == 0x08))
                            {
                                If ((Local1 & One))
                                {
                                    PFIT = One
                                }
                                ElseIf ((Local1 & 0x06))
                                {
                                    PFIT = 0x06
                                }
                                Else
                                {
                                    PFIT = 0x08
                                }
                            }
                        }
                        Else
                        {
                            PFIT ^= 0x07
                        }

                        PFIT |= 0x80000000
                        ASLC = 0x04
                    }
                    ElseIf ((Arg0 == One))
                    {
                        BCLP = ((Arg1 * 0xFF) / 0x64)
                        BCLP |= 0x80000000
                        ASLC = 0x02
                    }
                    ElseIf ((Arg0 == Zero))
                    {
                        ALSI = Arg1
                        ASLC = One
                    }
                    Else
                    {
                        Return (One)
                    }

                    ASLE = One
                    Return (Zero)
                }

                Method (SCIP, 0, NotSerialized)
                {
                    If ((OVER != Zero))
                    {
                        Return (!GSMI)
                    }

                    Return (Zero)
                }

                Device (^^MEM2)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (CRS2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0x20000000,         // Address Base
                            0x00200000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x40004000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (IGDS)
                        {
                            If ((PNHM == 0x000306C1))
                            {
                                Return (0x0F)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (CRS2) /* \_SB_.MEM2.CRS2 */
                    }
                }
            }

            Name (RPA0, 0x001C0004)
            Name (RPA1, 0x001C0005)
            Name (RPA2, 0x001C0002)
            Name (RPA3, 0x001C0006)
            Name (RPA4, 0x001C0003)
            Name (RPA5, 0x001C0001)
            Name (RPA6, 0x001C0000)
            Name (RPA7, 0x001C0007)
            Name (PCHS, 0x00000001)
            Name (SRMB, 0xCFA20000)
            Scope (\)
            {
                OperationRegion (IO_D, SystemIO, 0x2008, 0x04)
                Field (IO_D, ByteAcc, NoLock, Preserve)
                {
                    TRPD,   8
                }

                OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
                Field (IO_H, ByteAcc, NoLock, Preserve)
                {
                    TRPH,   8
                }

                OperationRegion (PMIO, SystemIO, 0x1800, 0x80)
                Field (PMIO, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    Offset (0x2A), 
                        ,   3, 
                    GPE3,   1, 
                        ,   7, 
                    GPEB,   1, 
                    Offset (0x3C), 
                        ,   1, 
                    UPRW,   1, 
                    Offset (0x42), 
                        ,   1, 
                    GPEC,   1
                }

                Field (PMIO, ByteAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x20), 
                    Offset (0x22), 
                        ,   3, 
                    GPS3,   1, 
                        ,   7, 
                    GPSB,   1, 
                    Offset (0x64), 
                        ,   9, 
                    SCIS,   1, 
                    Offset (0x66)
                }

                OperationRegion (PMLP, SystemIO, 0x1880, 0x20)
                Field (PMLP, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    Offset (0x11), 
                    GE08,   1, 
                        ,   8, 
                    GE17,   1, 
                        ,   17, 
                    GE35,   1, 
                        ,   9, 
                    GE45,   1, 
                        ,   5, 
                    GE51,   1, 
                    Offset (0x20)
                }

                Field (PMLP, ByteAcc, NoLock, WriteAsZeros)
                {
                    Offset (0x01), 
                    GS08,   1, 
                        ,   8, 
                    GS17,   1, 
                        ,   17, 
                    GS35,   1, 
                        ,   9, 
                    GS45,   1, 
                        ,   5, 
                    GS51,   1, 
                    Offset (0x10)
                }

                OperationRegion (GPR, SystemIO, 0x0800, 0x0400)
                Field (GPR, ByteAcc, NoLock, Preserve)
                {
                    GU00,   8, 
                    GU01,   8, 
                    GU02,   8, 
                    GU03,   8, 
                    GIO0,   8, 
                    GIO1,   8, 
                    GIO2,   8, 
                    GIO3,   8, 
                    Offset (0x0C), 
                    GL00,   8, 
                    GL01,   8, 
                    GL02,   8, 
                    GP24,   1, 
                        ,   2, 
                    GP27,   1, 
                    GP28,   1, 
                    Offset (0x10), 
                    Offset (0x18), 
                    GB00,   8, 
                    GB01,   8, 
                    GB02,   8, 
                    GB03,   8, 
                    Offset (0x2C), 
                    GIV0,   8, 
                    GIV1,   8, 
                    GIV2,   8, 
                    GIV3,   8, 
                    GU04,   8, 
                    GU05,   8, 
                    GU06,   8, 
                    GU07,   8, 
                    GIO4,   8, 
                    GIO5,   8, 
                    GIO6,   8, 
                    GIO7,   8, 
                    GL04,   8, 
                    GL05,   8, 
                    GL06,   8, 
                    GL07,   8, 
                    Offset (0x40), 
                    GU08,   8, 
                    GU09,   8, 
                    GU0A,   8, 
                    GU0B,   8, 
                    GIO8,   8, 
                    GIO9,   8, 
                    GIOA,   8, 
                    GIOB,   8, 
                    GL08,   8, 
                    GL09,   8, 
                    GL0A,   8, 
                    GL0B,   8
                }

                OperationRegion (GPRL, SystemIO, 0x0800, 0x40)
                Field (GPRL, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    GO08,   1, 
                    GO09,   1, 
                        ,   3, 
                    GO13,   1, 
                    GO14,   1, 
                        ,   2, 
                    GO17,   1, 
                        ,   27, 
                    GO45,   1, 
                        ,   5, 
                    GO51,   1, 
                    Offset (0x10), 
                    Offset (0x30), 
                    GR00,   32, 
                    GR01,   32, 
                    GR02,   32
                }

                OperationRegion (RCRB, SystemMemory, 0xFED1C000, 0x4000)
                Field (RCRB, DWordAcc, Lock, Preserve)
                {
                    Offset (0x1000), 
                    Offset (0x2330), 
                    AFEA,   32, 
                    AFED,   32, 
                    AFES,   16, 
                    AFER,   16, 
                    Offset (0x3000), 
                    Offset (0x3404), 
                    HPAS,   2, 
                        ,   5, 
                    HPAE,   1, 
                    Offset (0x3418), 
                        ,   1, 
                    ADSD,   1, 
                    SATD,   1, 
                    SMBD,   1, 
                    HDAD,   1, 
                    Offset (0x341A), 
                    RP1D,   1, 
                    RP2D,   1, 
                    RP3D,   1, 
                    RP4D,   1, 
                    RP5D,   1, 
                    RP6D,   1, 
                    RP7D,   1, 
                    RP8D,   1, 
                    Offset (0x359C), 
                    UP0D,   1, 
                    UP1D,   1, 
                    UP2D,   1, 
                    UP3D,   1, 
                    UP4D,   1, 
                    UP5D,   1, 
                    UP6D,   1, 
                    UP7D,   1, 
                    UP8D,   1, 
                    UP9D,   1, 
                    UPAD,   1, 
                    UPBD,   1, 
                    UPCD,   1, 
                    UPDD,   1, 
                        ,   1, 
                    Offset (0x359E)
                }

                Method (GETP, 1, Serialized)
                {
                    If (((Arg0 & 0x09) == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    If (((Arg0 & 0x09) == 0x08))
                    {
                        Return (0x0384)
                    }

                    Local0 = ((Arg0 & 0x0300) >> 0x08)
                    Local1 = ((Arg0 & 0x3000) >> 0x0C)
                    Return ((0x1E * (0x09 - (Local0 + Local1))))
                }

                Method (GDMA, 5, Serialized)
                {
                    If (Arg0)
                    {
                        If ((Arg1 && Arg4))
                        {
                            Return (0x14)
                        }

                        If ((Arg2 && Arg4))
                        {
                            Return (((0x04 - Arg3) * 0x0F))
                        }

                        Return (((0x04 - Arg3) * 0x1E))
                    }

                    Return (0xFFFFFFFF)
                }

                Method (GETT, 1, Serialized)
                {
                    Return ((0x1E * (0x09 - (((Arg0 >> 0x02) & 0x03
                        ) + (Arg0 & 0x03)))))
                }

                Method (GETF, 3, Serialized)
                {
                    Name (TMPF, Zero)
                    If (Arg0)
                    {
                        TMPF |= One
                    }

                    If ((Arg2 & 0x02))
                    {
                        TMPF |= 0x02
                    }

                    If (Arg1)
                    {
                        TMPF |= 0x04
                    }

                    If ((Arg2 & 0x20))
                    {
                        TMPF |= 0x08
                    }

                    If ((Arg2 & 0x4000))
                    {
                        TMPF |= 0x10
                    }

                    Return (TMPF) /* \GETF.TMPF */
                }

                Method (SETP, 3, Serialized)
                {
                    If ((Arg0 > 0xF0))
                    {
                        Return (0x08)
                    }
                    Else
                    {
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                            {
                                Return (0x2301)
                            }

                            If (((Arg0 <= 0xB4) && (Arg2 & One)))
                            {
                                Return (0x2101)
                            }
                        }

                        Return (0x1001)
                    }
                }

                Method (SDMA, 1, Serialized)
                {
                    If ((Arg0 <= 0x14))
                    {
                        Return (One)
                    }

                    If ((Arg0 <= 0x1E))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 <= 0x2D))
                    {
                        Return (One)
                    }

                    If ((Arg0 <= 0x3C))
                    {
                        Return (0x02)
                    }

                    If ((Arg0 <= 0x5A))
                    {
                        Return (One)
                    }

                    Return (Zero)
                }

                Method (SETT, 3, Serialized)
                {
                    If ((Arg1 & 0x02))
                    {
                        If (((Arg0 <= 0x78) && (Arg2 & 0x02)))
                        {
                            Return (0x0B)
                        }

                        If (((Arg0 <= 0xB4) && (Arg2 & One)))
                        {
                            Return (0x09)
                        }
                    }

                    Return (0x04)
                }

                OperationRegion (IO_P, SystemIO, 0x1000, 0x04)
                Field (IO_P, ByteAcc, NoLock, Preserve)
                {
                    TRPF,   8
                }

                Name (_S0, Package (0x03)  // _S0_: S0 System State
                {
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (_S3, Package (0x03)  // _S3_: S3 System State
                {
                    0x05, 
                    0x05, 
                    Zero
                })
                Name (_S4, Package (0x03)  // _S4_: S4 System State
                {
                    0x06, 
                    0x06, 
                    Zero
                })
                Name (_S5, Package (0x03)  // _S5_: S5 System State
                {
                    0x07, 
                    0x07, 
                    Zero
                })
            }

            Scope (\_SB)
            {
                Method (RDGI, 1, Serialized)
                {
                    If ((Arg0 <= 0x5E))
                    {
                        Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                        OperationRegion (LGPI, SystemIO, Local0, 0x04)
                        Field (LGPI, AnyAcc, NoLock, Preserve)
                        {
                                ,   30, 
                            TEMP,   1
                        }

                        Return (TEMP) /* \_SB_.RDGI.TEMP */
                    }

                    Return (Zero)
                }

                Method (RDGP, 1, Serialized)
                {
                    If ((Arg0 <= 0x5E))
                    {
                        Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                        OperationRegion (LGPI, SystemIO, Local0, 0x04)
                        Field (LGPI, AnyAcc, NoLock, Preserve)
                        {
                                ,   31, 
                            TEMP,   1
                        }

                        Return (TEMP) /* \_SB_.RDGP.TEMP */
                    }

                    Return (Zero)
                }

                Method (WTGP, 2, Serialized)
                {
                    If ((Arg0 <= 0x5E))
                    {
                        Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                        OperationRegion (LGPI, SystemIO, Local0, 0x04)
                        Field (LGPI, AnyAcc, NoLock, Preserve)
                        {
                                ,   31, 
                            TEMP,   1
                        }

                        TEMP = Arg1
                    }
                }

                Method (WTIN, 2, Serialized)
                {
                    If ((Arg0 <= 0x5E))
                    {
                        Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                        OperationRegion (LGPI, SystemIO, Local0, 0x04)
                        Field (LGPI, ByteAcc, NoLock, Preserve)
                        {
                                ,   3, 
                            TEMP,   1
                        }

                        TEMP = Arg1
                    }
                }

                Method (WPGP, 2, Serialized)
                {
                    If ((Arg0 <= 0x5E))
                    {
                        Local0 = ((GPBS + 0x0104) + (Arg0 * 0x08))
                        OperationRegion (LGPI, SystemIO, Local0, 0x04)
                        Field (LGPI, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   2
                        }

                        TEMP = Arg1
                    }
                }

                Method (GP2N, 2, Serialized)
                {
                    If ((Arg0 <= 0x5E))
                    {
                        Local0 = ((GPBS + 0x0100) + (Arg0 * 0x08))
                        OperationRegion (LGPI, SystemIO, Local0, 0x04)
                        Field (LGPI, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   1
                        }

                        TEMP = Arg1
                    }
                }

                Method (GP2A, 2, Serialized)
                {
                    If ((Arg0 <= 0x5E))
                    {
                        Local0 = ((GPBS + 0x0104) + (Arg0 * 0x08))
                        OperationRegion (LGP2, SystemIO, Local0, 0x04)
                        Field (LGP2, AnyAcc, NoLock, Preserve)
                        {
                            GPWP,   2, 
                            GPIS,   1
                        }

                        If ((Arg1 == One))
                        {
                            GPIS = Zero
                            GPWP = Zero
                        }
                        Else
                        {
                            GPWP = 0x02
                            GPIS = One
                        }

                        Local0 = (GPBS + 0x10)
                        OperationRegion (LGPI, SystemIO, Local0, 0x02)
                        Field (LGPI, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   16
                        }

                        If ((Arg0 >= 0x2D))
                        {
                            Local1 = (Arg0 - 0x28)
                        }
                        ElseIf ((Arg0 <= 0x0A))
                        {
                            Local1 = (Arg0 - 0x08)
                        }
                        Else
                        {
                            Local1 = (Arg0 - 0x0A)
                        }

                        Local2 = (One << Local1)
                        If (Arg1)
                        {
                            TEMP |= Local2
                        }
                        Else
                        {
                            TEMP &= ~Local2
                        }
                    }
                }

                Method (GP2B, 2, Serialized)
                {
                    If ((Arg0 <= 0x5E))
                    {
                        Local0 = (GPBS + 0x10)
                        OperationRegion (LGPI, SystemIO, Local0, 0x02)
                        Field (LGPI, AnyAcc, NoLock, Preserve)
                        {
                            TEMP,   16
                        }

                        If ((Arg0 >= 0x2D))
                        {
                            Local1 = (Arg0 - 0x28)
                        }
                        ElseIf ((Arg0 <= 0x0A))
                        {
                            Local1 = (Arg0 - 0x08)
                        }
                        Else
                        {
                            Local1 = (Arg0 - 0x0A)
                        }

                        Local2 = (One << Local1)
                        If (Arg1)
                        {
                            TEMP |= Local2
                        }
                        Else
                        {
                            TEMP &= ~Local2
                        }
                    }
                }
            }

            Scope (\_SB.PCI0)
            {
                Name (LTRE, Zero)
                Name (OBFF, Zero)
                Device (GLAN)
                {
                    Name (_ADR, 0x00190000)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x0D, 0x04))
                    }

                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If (Arg0)
                        {
                            WED5 = One
                        }
                        Else
                        {
                            WED5 = Zero
                        }
                    }
                }

                Device (EHC1)
                {
                    Name (_ADR, 0x001D0000)  // _ADR: Address
                    OperationRegion (EH1C, PCI_Config, Zero, 0xFF)
                    Field (EH1C, ByteAcc, NoLock, Preserve)
                    {
                        VNID,   16, 
                        DVID,   16, 
                        Offset (0x08), 
                        RVID,   8, 
                        Offset (0x2C), 
                        SVID,   16, 
                        SSID,   16
                    }

                    OperationRegion (PWKE, PCI_Config, 0x54, 0x12)
                    Field (PWKE, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x01), 
                        PMEE,   1, 
                            ,   6, 
                        PMES,   1, 
                        Offset (0x0E), 
                            ,   1, 
                        PWUC,   8
                    }

                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If (Arg0)
                        {
                            PWUC = Ones
                        }
                        Else
                        {
                            PWUC = Zero
                        }
                    }

                    Device (HUB0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (RMH0)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Device (PRT0)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                                {
                                    Name (UPCP, Package (0x04)
                                    {
                                        0xFF, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    If ((XH01 == 0xFF))
                                    {
                                        UPCP [Zero] = Zero
                                    }

                                    Return (UPCP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT0._UPC.UPCP */
                                }

                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    Name (PLDP, Package (0x01)
                                    {
                                        Buffer (0x14)
                                        {
                                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                        }
                                    })
                                    Return (PLDP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT0._PLD.PLDP */
                                }
                            }

                            Device (PRT1)
                            {
                                Name (_ADR, 0x02)  // _ADR: Address
                                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                                {
                                    Name (UPCP, Package (0x04)
                                    {
                                        0xFF, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    If ((XH02 == 0xFF))
                                    {
                                        UPCP [Zero] = Zero
                                    }

                                    Return (UPCP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT1._UPC.UPCP */
                                }

                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    Name (PLDP, Package (0x01)
                                    {
                                        Buffer (0x14)
                                        {
                                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                        }
                                    })
                                    Return (PLDP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT1._PLD.PLDP */
                                }
                            }

                            Device (PRT2)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                                {
                                    Name (UPCP, Package (0x04)
                                    {
                                        0xFF, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    If ((XH03 == 0xFF))
                                    {
                                        UPCP [Zero] = Zero
                                    }

                                    Return (UPCP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT2._UPC.UPCP */
                                }

                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    Name (PLDP, Package (0x01)
                                    {
                                        Buffer (0x14)
                                        {
                                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                        }
                                    })
                                    Return (PLDP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT2._PLD.PLDP */
                                }
                            }

                            Device (PRT3)
                            {
                                Name (_ADR, 0x04)  // _ADR: Address
                                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                                {
                                    Name (UPCP, Package (0x04)
                                    {
                                        0xFF, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    If ((XH04 == 0xFF))
                                    {
                                        UPCP [Zero] = Zero
                                    }

                                    Return (UPCP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT3._UPC.UPCP */
                                }

                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    Name (PLDP, Package (0x01)
                                    {
                                        Buffer (0x14)
                                        {
                                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                        }
                                    })
                                    Return (PLDP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT3._PLD.PLDP */
                                }
                            }

                            Device (PRT4)
                            {
                                Name (_ADR, 0x05)  // _ADR: Address
                                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                                {
                                    Name (UPCP, Package (0x04)
                                    {
                                        0xFF, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    If ((XH05 == 0xFF))
                                    {
                                        UPCP [Zero] = Zero
                                    }

                                    Return (UPCP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT4._UPC.UPCP */
                                }

                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    Name (PLDP, Package (0x01)
                                    {
                                        Buffer (0x14)
                                        {
                                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                        }
                                    })
                                    Return (PLDP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT4._PLD.PLDP */
                                }
                            }

                            Device (PRT5)
                            {
                                Name (_ADR, 0x06)  // _ADR: Address
                                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                                {
                                    Name (UPCP, Package (0x04)
                                    {
                                        0xFF, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    If ((XH06 == 0xFF))
                                    {
                                        UPCP [Zero] = Zero
                                    }

                                    Return (UPCP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT5._UPC.UPCP */
                                }

                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    Name (PLDP, Package (0x01)
                                    {
                                        Buffer (0x14)
                                        {
                                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                        }
                                    })
                                    Return (PLDP) /* \_SB_.PCI0.EHC1.HUB0.RMH0.PRT5._PLD.PLDP */
                                }
                            }
                        }
                    }

                    Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                    {
                        Return (0x02)
                    }

                    Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                    {
                        Return (0x02)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x0D, 0x03))
                    }
                }

                Device (EHC2)
                {
                    Name (_ADR, 0x001A0000)  // _ADR: Address
                    OperationRegion (EH2C, PCI_Config, Zero, 0xFF)
                    Field (EH2C, ByteAcc, NoLock, Preserve)
                    {
                        VNID,   16, 
                        DVID,   16, 
                        Offset (0x08), 
                        RVID,   8, 
                        Offset (0x2C), 
                        SVID,   16, 
                        SSID,   16
                    }

                    OperationRegion (PWKE, PCI_Config, 0x54, 0x12)
                    Field (PWKE, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x01), 
                        PMEE,   1, 
                            ,   6, 
                        PMES,   1, 
                        Offset (0x0E), 
                            ,   1, 
                        PWUC,   8
                    }

                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If (Arg0)
                        {
                            PWUC = Ones
                        }
                        Else
                        {
                            PWUC = Zero
                        }
                    }

                    Device (HUB0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (RMH0)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                Zero, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Device (PRTA)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                                {
                                    Name (UPCP, Package (0x04)
                                    {
                                        0xFF, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    If ((XH11 == 0xFF))
                                    {
                                        UPCP [Zero] = Zero
                                    }

                                    Return (UPCP) /* \_SB_.PCI0.EHC2.HUB0.RMH0.PRTA._UPC.UPCP */
                                }

                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    Name (PLDP, Package (0x01)
                                    {
                                        Buffer (0x14)
                                        {
                                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                        }
                                    })
                                    Return (PLDP) /* \_SB_.PCI0.EHC2.HUB0.RMH0.PRTA._PLD.PLDP */
                                }
                            }

                            Device (PRTD)
                            {
                                Name (_ADR, 0x06)  // _ADR: Address
                                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                                {
                                    Name (UPCP, Package (0x04)
                                    {
                                        0xFF, 
                                        0xFF, 
                                        Zero, 
                                        Zero
                                    })
                                    If ((XH14 == 0xFF))
                                    {
                                        UPCP [Zero] = Zero
                                    }

                                    Return (UPCP) /* \_SB_.PCI0.EHC2.HUB0.RMH0.PRTD._UPC.UPCP */
                                }

                                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                                {
                                    Name (PLDP, Package (0x01)
                                    {
                                        Buffer (0x14)
                                        {
                                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                            /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                                            /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                        }
                                    })
                                    Return (PLDP) /* \_SB_.PCI0.EHC2.HUB0.RMH0.PRTD._PLD.PLDP */
                                }
                            }
                        }
                    }

                    Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                    {
                        Return (0x02)
                    }

                    Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                    {
                        Return (0x02)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x0D, 0x03))
                    }
                }

                Device (XHC)
                {
                    Name (_ADR, 0x00140000)  // _ADR: Address
                    OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
                    Field (XPRT, AnyAcc, NoLock, Preserve)
                    {
                        DVID,   16, 
                        Offset (0x74), 
                        D0D3,   2, 
                        Offset (0x75), 
                        PMEE,   1, 
                            ,   6, 
                        PMES,   1, 
                        Offset (0xB0), 
                            ,   13, 
                        MB13,   1, 
                        MB14,   1, 
                        Offset (0xB4), 
                        Offset (0xD0), 
                        PR2,    32, 
                        PR2M,   32, 
                        PR3,    32, 
                        PR3M,   32
                    }

                    OperationRegion (XHCP, SystemMemory, 0xF80A0000, 0x0100)
                    Field (XHCP, DWordAcc, Lock, Preserve)
                    {
                        Offset (0x04), 
                        PDBM,   8, 
                        Offset (0x10), 
                        MEMB,   32
                    }

                    Method (PR2S, 1, Serialized)
                    {
                        If (((CDID & 0xF000) == 0x8000))
                        {
                            Switch (Arg0)
                            {
                                Case (One)
                                {
                                    Return (One)
                                }
                                Case (0x02)
                                {
                                    Return (0x02)
                                }
                                Case (0x03)
                                {
                                    Return (0x04)
                                }
                                Case (0x04)
                                {
                                    Return (0x08)
                                }
                                Case (0x05)
                                {
                                    Return (0x0100)
                                }
                                Case (0x06)
                                {
                                    Return (0x0200)
                                }
                                Case (0x07)
                                {
                                    Return (0x0400)
                                }
                                Case (0x08)
                                {
                                    Return (0x0800)
                                }
                                Case (0x09)
                                {
                                    Return (0x10)
                                }
                                Case (0x0A)
                                {
                                    Return (0x20)
                                }
                                Case (0x0B)
                                {
                                    Return (0x1000)
                                }
                                Case (0x0C)
                                {
                                    Return (0x2000)
                                }
                                Case (0x0D)
                                {
                                    Return (0x40)
                                }
                                Case (0x0E)
                                {
                                    Return (0x80)
                                }
                                Case (0x0F)
                                {
                                    Return (0x4000)
                                }

                            }

                            Return (Zero)
                        }
                        Else
                        {
                            Switch (Arg0)
                            {
                                Case (One)
                                {
                                    Return (One)
                                }
                                Case (0x02)
                                {
                                    Return (0x02)
                                }
                                Case (0x03)
                                {
                                    Return (0x04)
                                }
                                Case (0x04)
                                {
                                    Return (0x08)
                                }
                                Case (0x05)
                                {
                                    Return (0x10)
                                }
                                Case (0x06)
                                {
                                    Return (0x20)
                                }
                                Case (0x07)
                                {
                                    Return (0x40)
                                }
                                Case (0x08)
                                {
                                    Return (0x80)
                                }
                                Case (0x09)
                                {
                                    Return (0x0100)
                                }

                            }

                            Return (Zero)
                        }
                    }

                    Name (XRST, Zero)
                    Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                    {
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        Local2 = MEMB /* \_SB_.PCI0.XHC_.MEMB */
                        Local1 = PDBM /* \_SB_.PCI0.XHC_.PDBM */
                        MEMB = SRMB /* \_SB_.PCI0.SRMB */
                        Local0 = PDBM /* \_SB_.PCI0.XHC_.PDBM */
                        Local0 |= 0x06
                        PDBM = Local0
                        OperationRegion (MCA1, SystemMemory, SRMB, 0x9000)
                        Field (MCA1, DWordAcc, Lock, Preserve)
                        {
                            Offset (0x510), 
                            R510,   31, 
                            WPR1,   1, 
                            Offset (0x520), 
                            R520,   31, 
                            WPR2,   1, 
                            Offset (0x530), 
                            R530,   31, 
                            WPR3,   1, 
                            Offset (0x540), 
                            R540,   31, 
                            WPR4,   1, 
                            Offset (0x80E0), 
                                ,   15, 
                            AX15,   1, 
                            Offset (0x8154), 
                                ,   31, 
                            CLK2,   1, 
                            Offset (0x816C), 
                                ,   2, 
                            CLK0,   1, 
                                ,   11, 
                            CLK1,   1, 
                            Offset (0x8170)
                        }

                        Local3 = D0D3 /* \_SB_.PCI0.XHC_.D0D3 */
                        If ((Local3 == 0x03))
                        {
                            D0D3 = Zero
                        }

                        If ((PCHS == 0x02))
                        {
                            MB13 = Zero
                            MB14 = Zero
                            CLK0 = Zero
                            CLK1 = Zero
                        }

                        CLK2 = One
                        If ((PCHS == 0x02))
                        {
                            While (((((R510 & 0x3FFF) == 0x02E0) || ((R520 & 
                                0x3FFF) == 0x02E0)) || (((R530 & 0x3FFF) == 0x02E0) || ((R540 & 
                                0x3FFF) == 0x02E0)))){}
                            If ((((R510 & 0x3FFF) == 0x02A0) && ((R510 & 0x00020000
                                ) == Zero)))
                            {
                                WPR1 = One
                                While (((R510 & 0x00080000) == Zero)){}
                                R510 |= 0x00FE0000
                            }

                            If ((((R520 & 0x3FFF) == 0x02A0) && ((R520 & 0x00020000
                                ) == Zero)))
                            {
                                WPR2 = One
                                While (((R520 & 0x00080000) == Zero)){}
                                R520 |= 0x00FE0000
                            }

                            If ((((R530 & 0x3FFF) == 0x02A0) && ((R530 & 0x00020000
                                ) == Zero)))
                            {
                                WPR3 = One
                                While (((R530 & 0x00080000) == Zero)){}
                                R530 |= 0x00FE0000
                            }

                            If ((((R540 & 0x3FFF) == 0x02A0) && ((R540 & 0x00020000
                                ) == Zero)))
                            {
                                WPR4 = One
                                While (((R540 & 0x00080000) == Zero)){}
                                R540 |= 0x00FE0000
                            }

                            AX15 = One
                        }

                        If (CondRefOf (\_SB.PCI0.XHC.PS0X))
                        {
                            PS0X ()
                        }

                        If ((Local3 == 0x03))
                        {
                            D0D3 = 0x03
                        }

                        PDBM = Local1
                        MEMB = Local2
                    }

                    Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                    {
                        If ((DVID == 0xFFFF))
                        {
                            Return (Zero)
                        }

                        PMES = One
                        PMEE = One
                        Local2 = MEMB /* \_SB_.PCI0.XHC_.MEMB */
                        Local1 = PDBM /* \_SB_.PCI0.XHC_.PDBM */
                        MEMB = SRMB /* \_SB_.PCI0.SRMB */
                        Local0 = PDBM /* \_SB_.PCI0.XHC_.PDBM */
                        Local0 |= 0x06
                        PDBM = Local0
                        OperationRegion (MCA1, SystemMemory, SRMB, 0x9000)
                        Field (MCA1, DWordAcc, Lock, Preserve)
                        {
                            Offset (0x510), 
                                ,   31, 
                            WPR1,   1, 
                            Offset (0x520), 
                                ,   31, 
                            WPR2,   1, 
                            Offset (0x530), 
                                ,   31, 
                            WPR3,   1, 
                            Offset (0x540), 
                                ,   31, 
                            WPR4,   1, 
                            Offset (0x80E0), 
                                ,   15, 
                            AX15,   1, 
                            Offset (0x8154), 
                                ,   31, 
                            CLK2,   1, 
                            Offset (0x816C), 
                                ,   2, 
                            CLK0,   1, 
                                ,   11, 
                            CLK1,   1, 
                            Offset (0x8170)
                        }

                        Local3 = D0D3 /* \_SB_.PCI0.XHC_.D0D3 */
                        If ((Local3 == 0x03))
                        {
                            D0D3 = Zero
                        }

                        If ((PCHS == 0x02))
                        {
                            MB13 = One
                            MB14 = One
                            CLK0 = One
                            CLK1 = One
                        }

                        CLK2 = Zero
                        If ((PCHS == 0x02))
                        {
                            AX15 = Zero
                        }

                        If (CondRefOf (\_SB.PCI0.XHC.PS3X))
                        {
                            PS3X ()
                        }

                        If ((Local3 == 0x03))
                        {
                            D0D3 = 0x03
                        }

                        PDBM = Local1
                        MEMB = Local2
                    }

                    Method (CUID, 1, Serialized)
                    {
                        If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (POSC, 3, Serialized)
                    {
                        CreateDWordField (Arg2, Zero, CDW1)
                        CreateDWordField (Arg2, 0x08, CDW3)
                        If ((XHCI == Zero))
                        {
                            CDW1 |= 0x02
                        }

                        If (!(CDW1 & One))
                        {
                            If ((CDW3 & One))
                            {
                                ESEL ()
                            }
                            ElseIf (((CDID & 0xF000) == 0x8000))
                            {
                                XSEL ()
                            }
                            ElseIf ((Arg0 > 0x02))
                            {
                                XSEL ()
                            }
                            Else
                            {
                                CDW1 |= 0x0A
                            }
                        }

                        Return (Arg2)
                    }

                    Method (XSEL, 0, Serialized)
                    {
                        If (((XHCI == 0x02) || (XHCI == 0x03)))
                        {
                            XUSB = One
                            XRST = One
                            XSBK = One
                            Local0 = Zero
                            Local0 = (PR3 & 0xFFFFFFC0)
                            PR3 = (Local0 | PR3M) /* \_SB_.PCI0.XHC_.PR3M */
                            Local0 = Zero
                            Local0 = (PR2 & 0xFFFF8000)
                            PR2 = (Local0 | PR2M) /* \_SB_.PCI0.XHC_.PR2M */
                        }
                    }

                    Method (ESEL, 0, Serialized)
                    {
                        If (((XHCI == 0x02) || (XHCI == 0x03)))
                        {
                            PR3 &= 0xFFFFFFC0
                            PR2 &= 0xFFFF8000
                            XUSB = Zero
                            XRST = Zero
                            XSBK = Zero
                        }
                    }

                    Method (XWAK, 0, Serialized)
                    {
                        If (((XUSB == One) || (XRST == One)))
                        {
                            XSEL ()
                        }
                    }

                    Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                    {
                        Return (0x02)
                    }

                    Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                    {
                        Return (0x02)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HS01)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (HS02)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (HS03)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (HS04)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (HS05)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (HS06)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (HS07)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (HS08)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (HS09)
                        {
                            Name (_ADR, 0x09)  // _ADR: Address
                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (HS10)
                        {
                            Method (_ADR, 0, Serialized)  // _ADR: Address
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0A)
                                }
                                Else
                                {
                                    Return (0xFA)
                                }
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Device (HS11)
                        {
                            Method (_ADR, 0, Serialized)  // _ADR: Address
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0B)
                                }
                                Else
                                {
                                    Return (0xFB)
                                }
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Device (HS12)
                        {
                            Method (_ADR, 0, Serialized)  // _ADR: Address
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0C)
                                }
                                Else
                                {
                                    Return (0xFC)
                                }
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Device (HS13)
                        {
                            Method (_ADR, 0, Serialized)  // _ADR: Address
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0D)
                                }
                                Else
                                {
                                    Return (0xFD)
                                }
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Device (HS14)
                        {
                            Name (_ADR, 0x0E)  // _ADR: Address
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Device (HS15)
                        {
                            Name (_ADR, 0x0F)  // _ADR: Address
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Device (SSP1)
                        {
                            Method (_ADR, 0, Serialized)  // _ADR: Address
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x10)
                                }
                                Else
                                {
                                    Return (0x0A)
                                }
                            }

                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (SSP2)
                        {
                            Method (_ADR, 0, Serialized)  // _ADR: Address
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x11)
                                }
                                Else
                                {
                                    Return (0x0B)
                                }
                            }

                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (SSP3)
                        {
                            Method (_ADR, 0, Serialized)  // _ADR: Address
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x12)
                                }
                                Else
                                {
                                    Return (0x0C)
                                }
                            }

                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (SSP4)
                        {
                            Method (_ADR, 0, Serialized)  // _ADR: Address
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x13)
                                }
                                Else
                                {
                                    Return (0x0D)
                                }
                            }

                            Name (_STA, 0x0F)  // _STA: Status
                        }

                        Device (SSP5)
                        {
                            Name (_ADR, 0x14)  // _ADR: Address
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }

                        Device (SSP6)
                        {
                            Name (_ADR, 0x15)  // _ADR: Address
                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If (((CDID & 0xF000) == 0x8000))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }
                        }
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x0D, 0x03))
                    }

                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        If (Arg0)
                        {
                            UPSW = One
                        }
                        Else
                        {
                            UPSW = Zero
                        }
                    }
                }

                Device (HDEF)
                {
                    Name (_ADR, 0x001B0000)  // _ADR: Address
                    OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
                    Field (HDAR, WordAcc, NoLock, Preserve)
                    {
                        DCKA,   1, 
                        Offset (0x01), 
                        DCKM,   1, 
                            ,   6, 
                        DCKS,   1, 
                        Offset (0x08), 
                        Offset (0x09), 
                        PMEE,   1, 
                            ,   6, 
                        PMES,   1
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x0D, 0x03))
                    }
                }

                Device (RP01)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (RPA0) /* \_SB_.PCI0.RPA0 */
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTRE = LTR1 /* \LTR1 */
                        OBFF = OBF1 /* \OBF1 */
                    }

                    OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x324), 
                            ,   3, 
                        LEDM,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (OPTS, Zero)
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            OPTS = One
                                            If (LTRE)
                                            {
                                                OPTS |= 0x40
                                            }

                                            If (OBFF)
                                            {
                                                OPTS |= 0x10
                                            }

                                            Return (OPTS) /* \_SB_.PCI0.RP01.OPTS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Case (0x04)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }
                                    }
                                    Case (0x06)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRE)
                                            {
                                                Name (MLTR, Zero)
                                                If ((PCHS == One))
                                                {
                                                    MLTR = 0x0846
                                                }
                                                ElseIf ((PCHS == 0x02))
                                                {
                                                    MLTR = 0x1003
                                                }

                                                LTRV [Zero] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [One] = (MLTR & 0x03FF)
                                                LTRV [0x02] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [0x03] = (MLTR & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.RP01.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }

                                }
                            }

                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (GPIC)
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    Zero, 
                                    0x10
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    Zero, 
                                    0x11
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    Zero, 
                                    0x12
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    Zero, 
                                    0x13
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    LNKA, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    LNKB, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    LNKC, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    LNKD, 
                                    Zero
                                }
                            })
                        }
                    }
                }

                Device (RP02)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (RPA1) /* \_SB_.PCI0.RPA1 */
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTRE = LTR2 /* \LTR2 */
                        OBFF = OBF2 /* \OBF2 */
                    }

                    OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x324), 
                            ,   3, 
                        LEDM,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (OPTS, Zero)
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            OPTS = One
                                            If (LTRE)
                                            {
                                                OPTS |= 0x40
                                            }

                                            If (OBFF)
                                            {
                                                OPTS |= 0x10
                                            }

                                            Return (OPTS) /* \_SB_.PCI0.RP02.OPTS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Case (0x04)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }
                                    }
                                    Case (0x06)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRE)
                                            {
                                                Name (MLTR, Zero)
                                                If ((PCHS == One))
                                                {
                                                    MLTR = 0x0846
                                                }
                                                ElseIf ((PCHS == 0x02))
                                                {
                                                    MLTR = 0x1003
                                                }

                                                LTRV [Zero] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [One] = (MLTR & 0x03FF)
                                                LTRV [0x02] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [0x03] = (MLTR & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.RP02.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }

                                }
                            }

                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (GPIC)
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    Zero, 
                                    0x11
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    Zero, 
                                    0x12
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    Zero, 
                                    0x13
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    Zero, 
                                    0x10
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    LNKB, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    LNKC, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    LNKD, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    LNKA, 
                                    Zero
                                }
                            })
                        }
                    }
                }

                Device (RP03)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (RPA2) /* \_SB_.PCI0.RPA2 */
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTRE = LTR3 /* \LTR3 */
                        OBFF = OBF3 /* \OBF3 */
                    }

                    OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x324), 
                            ,   3, 
                        LEDM,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (OPTS, Zero)
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            OPTS = One
                                            If (LTRE)
                                            {
                                                OPTS |= 0x40
                                            }

                                            If (OBFF)
                                            {
                                                OPTS |= 0x10
                                            }

                                            Return (OPTS) /* \_SB_.PCI0.RP03.OPTS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Case (0x04)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }
                                    }
                                    Case (0x06)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRE)
                                            {
                                                Name (MLTR, Zero)
                                                If ((PCHS == One))
                                                {
                                                    MLTR = 0x0846
                                                }
                                                ElseIf ((PCHS == 0x02))
                                                {
                                                    MLTR = 0x1003
                                                }

                                                LTRV [Zero] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [One] = (MLTR & 0x03FF)
                                                LTRV [0x02] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [0x03] = (MLTR & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.RP03.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }

                                }
                            }

                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (GPIC)
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    Zero, 
                                    0x12
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    Zero, 
                                    0x13
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    Zero, 
                                    0x10
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    Zero, 
                                    0x11
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    LNKC, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    LNKD, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    LNKA, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    LNKB, 
                                    Zero
                                }
                            })
                        }
                    }
                }

                Device (RP04)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (RPA3) /* \_SB_.PCI0.RPA3 */
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTRE = LTR4 /* \LTR4 */
                        OBFF = OBF4 /* \OBF4 */
                    }

                    OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x324), 
                            ,   3, 
                        LEDM,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (OPTS, Zero)
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            OPTS = One
                                            If (LTRE)
                                            {
                                                OPTS |= 0x40
                                            }

                                            If (OBFF)
                                            {
                                                OPTS |= 0x10
                                            }

                                            Return (OPTS) /* \_SB_.PCI0.RP04.OPTS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Case (0x04)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }
                                    }
                                    Case (0x06)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRE)
                                            {
                                                Name (MLTR, Zero)
                                                If ((PCHS == One))
                                                {
                                                    MLTR = 0x0846
                                                }
                                                ElseIf ((PCHS == 0x02))
                                                {
                                                    MLTR = 0x1003
                                                }

                                                LTRV [Zero] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [One] = (MLTR & 0x03FF)
                                                LTRV [0x02] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [0x03] = (MLTR & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.RP04.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }

                                }
                            }

                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (GPIC)
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    Zero, 
                                    0x13
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    Zero, 
                                    0x10
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    Zero, 
                                    0x11
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    Zero, 
                                    0x12
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    LNKD, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    LNKA, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    LNKB, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    LNKC, 
                                    Zero
                                }
                            })
                        }
                    }
                }

                Device (RP05)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (RPA4) /* \_SB_.PCI0.RPA4 */
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTRE = LTR5 /* \LTR5 */
                        OBFF = OBF5 /* \OBF5 */
                    }

                    OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x324), 
                            ,   3, 
                        LEDM,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (OPTS, Zero)
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            OPTS = One
                                            If (LTRE)
                                            {
                                                OPTS |= 0x40
                                            }

                                            If (OBFF)
                                            {
                                                OPTS |= 0x10
                                            }

                                            Return (OPTS) /* \_SB_.PCI0.RP05.OPTS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Case (0x04)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }
                                    }
                                    Case (0x06)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRE)
                                            {
                                                Name (MLTR, Zero)
                                                If ((PCHS == One))
                                                {
                                                    MLTR = 0x0846
                                                }
                                                ElseIf ((PCHS == 0x02))
                                                {
                                                    MLTR = 0x1003
                                                }

                                                LTRV [Zero] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [One] = (MLTR & 0x03FF)
                                                LTRV [0x02] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [0x03] = (MLTR & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.RP05.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }

                                }
                            }

                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (GPIC)
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    Zero, 
                                    0x10
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    Zero, 
                                    0x11
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    Zero, 
                                    0x12
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    Zero, 
                                    0x13
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    LNKA, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    LNKB, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    LNKC, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    LNKD, 
                                    Zero
                                }
                            })
                        }
                    }
                }

                Device (RP06)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (RPA5) /* \_SB_.PCI0.RPA5 */
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTRE = LTR6 /* \LTR6 */
                        OBFF = OBF6 /* \OBF6 */
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x09, 0x04))
                    }

                    OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x324), 
                            ,   3, 
                        LEDM,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (OPTS, Zero)
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            OPTS = One
                                            If (LTRE)
                                            {
                                                OPTS |= 0x40
                                            }

                                            If (OBFF)
                                            {
                                                OPTS |= 0x10
                                            }

                                            Return (OPTS) /* \_SB_.PCI0.RP06.OPTS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Case (0x04)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }
                                    }
                                    Case (0x06)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRE)
                                            {
                                                Name (MLTR, Zero)
                                                If ((PCHS == One))
                                                {
                                                    MLTR = 0x0846
                                                }
                                                ElseIf ((PCHS == 0x02))
                                                {
                                                    MLTR = 0x1003
                                                }

                                                LTRV [Zero] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [One] = (MLTR & 0x03FF)
                                                LTRV [0x02] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [0x03] = (MLTR & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.RP06.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }

                                }
                            }

                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                        {
                            Return (GPRW (0x09, 0x04))
                        }
                    }

                    Method (PXSX._EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                    {
                        EPU6 = One
                        EPH6 = Zero
                        SMBR (0xFA00, 0x3402, 0x06, Zero, Zero, Zero, 0xB2)
                        While ((EPH6 == Zero)){}
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (GPIC)
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    Zero, 
                                    0x11
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    Zero, 
                                    0x12
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    Zero, 
                                    0x13
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    Zero, 
                                    0x10
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    LNKB, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    LNKC, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    LNKD, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    LNKA, 
                                    Zero
                                }
                            })
                        }
                    }
                }

                Device (RP07)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (RPA6) /* \_SB_.PCI0.RPA6 */
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTRE = LTR7 /* \LTR7 */
                        OBFF = OBF7 /* \OBF7 */
                    }

                    OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x324), 
                            ,   3, 
                        LEDM,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (OPTS, Zero)
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            OPTS = One
                                            If (LTRE)
                                            {
                                                OPTS |= 0x40
                                            }

                                            If (OBFF)
                                            {
                                                OPTS |= 0x10
                                            }

                                            Return (OPTS) /* \_SB_.PCI0.RP07.OPTS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Case (0x04)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }
                                    }
                                    Case (0x06)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRE)
                                            {
                                                Name (MLTR, Zero)
                                                If ((PCHS == One))
                                                {
                                                    MLTR = 0x0846
                                                }
                                                ElseIf ((PCHS == 0x02))
                                                {
                                                    MLTR = 0x1003
                                                }

                                                LTRV [Zero] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [One] = (MLTR & 0x03FF)
                                                LTRV [0x02] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [0x03] = (MLTR & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.RP07.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }

                                }
                            }

                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (GPIC)
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    Zero, 
                                    0x12
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    Zero, 
                                    0x13
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    Zero, 
                                    0x10
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    Zero, 
                                    0x11
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    LNKC, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    LNKD, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    LNKA, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    LNKB, 
                                    Zero
                                }
                            })
                        }
                    }
                }

                Device (RP08)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (RPA7) /* \_SB_.PCI0.RPA7 */
                    }

                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                        LTRE = LTR8 /* \LTR8 */
                        OBFF = OBF8 /* \OBF8 */
                    }

                    OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
                    Field (PXCS, AnyAcc, NoLock, Preserve)
                    {
                        VDID,   32, 
                        Offset (0x50), 
                        L0SE,   1, 
                            ,   3, 
                        LDIS,   1, 
                        Offset (0x51), 
                        Offset (0x52), 
                            ,   13, 
                        LASX,   1, 
                        Offset (0x5A), 
                        ABPX,   1, 
                            ,   2, 
                        PDCX,   1, 
                            ,   2, 
                        PDSX,   1, 
                        Offset (0x5B), 
                        Offset (0x60), 
                        Offset (0x62), 
                        PSPX,   1, 
                        Offset (0xA4), 
                        D3HT,   2, 
                        Offset (0xD8), 
                            ,   30, 
                        HPEX,   1, 
                        PMEX,   1, 
                        Offset (0xE2), 
                            ,   2, 
                        L23E,   1, 
                        L23R,   1, 
                        Offset (0x324), 
                            ,   3, 
                        LEDM,   1
                    }

                    Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                    {
                        Offset (0xDC), 
                            ,   30, 
                        HPSX,   1, 
                        PMSX,   1
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((VDID == 0xFFFFFFFF))
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (LTRV, Package (0x04)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    Name (OPTS, Zero)
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        Switch (ToInteger (Arg0))
                        {
                            Case (ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */){                                Switch (ToInteger (Arg2))
                                {
                                    Case (Zero)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            OPTS = One
                                            If (LTRE)
                                            {
                                                OPTS |= 0x40
                                            }

                                            If (OBFF)
                                            {
                                                OPTS |= 0x10
                                            }

                                            Return (OPTS) /* \_SB_.PCI0.RP08.OPTS */
                                        }
                                        Else
                                        {
                                            Return (Zero)
                                        }
                                    }
                                    Case (0x04)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (OBFF)
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x10)
                                                {
                                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                                })
                                            }
                                        }
                                    }
                                    Case (0x06)
                                    {
                                        If ((Arg1 == 0x02))
                                        {
                                            If (LTRE)
                                            {
                                                Name (MLTR, Zero)
                                                If ((PCHS == One))
                                                {
                                                    MLTR = 0x0846
                                                }
                                                ElseIf ((PCHS == 0x02))
                                                {
                                                    MLTR = 0x1003
                                                }

                                                LTRV [Zero] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [One] = (MLTR & 0x03FF)
                                                LTRV [0x02] = ((MLTR >> 0x0A) & 0x07)
                                                LTRV [0x03] = (MLTR & 0x03FF)
                                                Return (LTRV) /* \_SB_.PCI0.RP08.LTRV */
                                            }
                                            Else
                                            {
                                                Return (Zero)
                                            }
                                        }
                                    }

                                }
                            }

                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Device (PXSX)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                    {
                        If (GPIC)
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    Zero, 
                                    0x13
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    Zero, 
                                    0x10
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    Zero, 
                                    0x11
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    Zero, 
                                    0x12
                                }
                            })
                        }
                        Else
                        {
                            Return (Package (0x04)
                            {
                                Package (0x04)
                                {
                                    0xFFFF, 
                                    Zero, 
                                    LNKD, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    One, 
                                    LNKA, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x02, 
                                    LNKB, 
                                    Zero
                                }, 

                                Package (0x04)
                                {
                                    0xFFFF, 
                                    0x03, 
                                    LNKC, 
                                    Zero
                                }
                            })
                        }
                    }
                }

                Method (NHPG, 0, Serialized)
                {
                    If ((RP1D == Zero))
                    {
                        ^RP01.HPEX = Zero
                    }

                    If ((RP2D == Zero))
                    {
                        ^RP02.HPEX = Zero
                    }

                    If ((RP3D == Zero))
                    {
                        ^RP03.HPEX = Zero
                    }

                    If ((RP4D == Zero))
                    {
                        ^RP04.HPEX = Zero
                    }

                    If ((RP5D == Zero))
                    {
                        ^RP05.HPEX = Zero
                    }

                    If ((RP6D == Zero))
                    {
                        ^RP06.HPEX = Zero
                    }

                    If ((RP7D == Zero))
                    {
                        ^RP07.HPEX = Zero
                    }

                    If ((RP8D == Zero))
                    {
                        ^RP08.HPEX = Zero
                    }

                    If ((RP1D == Zero))
                    {
                        ^RP01.HPSX = One
                    }

                    If ((RP2D == Zero))
                    {
                        ^RP02.HPSX = One
                    }

                    If ((RP3D == Zero))
                    {
                        ^RP03.HPSX = One
                    }

                    If ((RP4D == Zero))
                    {
                        ^RP04.HPSX = One
                    }

                    If ((RP5D == Zero))
                    {
                        ^RP05.HPSX = One
                    }

                    If ((RP6D == Zero))
                    {
                        ^RP06.HPSX = One
                    }

                    If ((RP7D == Zero))
                    {
                        ^RP07.HPSX = One
                    }

                    If ((RP8D == Zero))
                    {
                        ^RP08.HPSX = One
                    }
                }

                Method (NPME, 0, Serialized)
                {
                    If ((RP1D == Zero))
                    {
                        ^RP01.PMEX = Zero
                    }

                    If ((RP2D == Zero))
                    {
                        ^RP02.PMEX = Zero
                    }

                    If ((RP3D == Zero))
                    {
                        ^RP03.PMEX = Zero
                    }

                    If ((RP4D == Zero))
                    {
                        ^RP04.PMEX = Zero
                    }

                    If ((RP5D == Zero))
                    {
                        ^RP05.PMEX = Zero
                    }

                    If ((RP6D == Zero))
                    {
                        ^RP06.PMEX = Zero
                    }

                    If ((RP7D == Zero))
                    {
                        ^RP07.PMEX = Zero
                    }

                    If ((RP8D == Zero))
                    {
                        ^RP08.PMEX = Zero
                    }

                    If ((RP1D == Zero))
                    {
                        ^RP01.PMSX = One
                    }

                    If ((RP2D == Zero))
                    {
                        ^RP02.PMSX = One
                    }

                    If ((RP3D == Zero))
                    {
                        ^RP03.PMSX = One
                    }

                    If ((RP4D == Zero))
                    {
                        ^RP04.PMSX = One
                    }

                    If ((RP5D == Zero))
                    {
                        ^RP05.PMSX = One
                    }

                    If ((RP6D == Zero))
                    {
                        ^RP06.PMSX = One
                    }

                    If ((RP7D == Zero))
                    {
                        ^RP07.PMSX = One
                    }

                    If ((RP8D == Zero))
                    {
                        ^RP08.PMSX = One
                    }
                }

                Device (LPCB)
                {
                    Name (_ADR, 0x001F0000)  // _ADR: Address
                    Scope (\_SB)
                    {
                        OperationRegion (PCI0.LPCB.LPC1, PCI_Config, Zero, 0x0100)
                        Field (PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                        {
                            Offset (0x02), 
                            CDID,   16, 
                            Offset (0x08), 
                            CRID,   8, 
                            Offset (0x60), 
                            PARC,   8, 
                            PBRC,   8, 
                            PCRC,   8, 
                            PDRC,   8, 
                            Offset (0x68), 
                            PERC,   8, 
                            PFRC,   8, 
                            PGRC,   8, 
                            PHRC,   8, 
                            Offset (0xAC), 
                            Offset (0xAD), 
                            Offset (0xAE), 
                            XUSB,   1
                        }

                        Device (LNKA)
                        {
                            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                            Name (_UID, One)  // _UID: Unique ID
                            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                            {
                                PARC |= 0x80
                            }

                            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {1,3,4,5,6,7,10,12,14,15}
                            })
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                Name (RTLA, ResourceTemplate ()
                                {
                                    IRQ (Level, ActiveLow, Shared, )
                                        {}
                                })
                                CreateWordField (RTLA, One, IRQ0)
                                IRQ0 = Zero
                                IRQ0 = (One << (PARC & 0x0F))
                                Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
                            }

                            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                            {
                                CreateWordField (Arg0, One, IRQ0)
                                FindSetRightBit (IRQ0, Local0)
                                Local0--
                                PARC = Local0
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((PARC & 0x80))
                                {
                                    Return (0x09)
                                }
                                Else
                                {
                                    Return (0x0B)
                                }
                            }
                        }

                        Device (LNKB)
                        {
                            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                            Name (_UID, 0x02)  // _UID: Unique ID
                            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                            {
                                PBRC |= 0x80
                            }

                            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {1,3,4,5,6,7,11,12,14,15}
                            })
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                Name (RTLB, ResourceTemplate ()
                                {
                                    IRQ (Level, ActiveLow, Shared, )
                                        {}
                                })
                                CreateWordField (RTLB, One, IRQ0)
                                IRQ0 = Zero
                                IRQ0 = (One << (PBRC & 0x0F))
                                Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
                            }

                            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                            {
                                CreateWordField (Arg0, One, IRQ0)
                                FindSetRightBit (IRQ0, Local0)
                                Local0--
                                PBRC = Local0
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((PBRC & 0x80))
                                {
                                    Return (0x09)
                                }
                                Else
                                {
                                    Return (0x0B)
                                }
                            }
                        }

                        Device (LNKC)
                        {
                            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                            Name (_UID, 0x03)  // _UID: Unique ID
                            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                            {
                                PCRC |= 0x80
                            }

                            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {1,3,4,5,6,7,10,12,14,15}
                            })
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                Name (RTLC, ResourceTemplate ()
                                {
                                    IRQ (Level, ActiveLow, Shared, )
                                        {}
                                })
                                CreateWordField (RTLC, One, IRQ0)
                                IRQ0 = Zero
                                IRQ0 = (One << (PCRC & 0x0F))
                                Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
                            }

                            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                            {
                                CreateWordField (Arg0, One, IRQ0)
                                FindSetRightBit (IRQ0, Local0)
                                Local0--
                                PCRC = Local0
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((PCRC & 0x80))
                                {
                                    Return (0x09)
                                }
                                Else
                                {
                                    Return (0x0B)
                                }
                            }
                        }

                        Device (LNKD)
                        {
                            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                            Name (_UID, 0x04)  // _UID: Unique ID
                            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                            {
                                PDRC |= 0x80
                            }

                            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {1,3,4,5,6,7,11,12,14,15}
                            })
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                Name (RTLD, ResourceTemplate ()
                                {
                                    IRQ (Level, ActiveLow, Shared, )
                                        {}
                                })
                                CreateWordField (RTLD, One, IRQ0)
                                IRQ0 = Zero
                                IRQ0 = (One << (PDRC & 0x0F))
                                Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
                            }

                            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                            {
                                CreateWordField (Arg0, One, IRQ0)
                                FindSetRightBit (IRQ0, Local0)
                                Local0--
                                PDRC = Local0
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((PDRC & 0x80))
                                {
                                    Return (0x09)
                                }
                                Else
                                {
                                    Return (0x0B)
                                }
                            }
                        }

                        Device (LNKE)
                        {
                            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                            Name (_UID, 0x05)  // _UID: Unique ID
                            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                            {
                                PERC |= 0x80
                            }

                            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {1,3,4,5,6,7,10,12,14,15}
                            })
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                Name (RTLE, ResourceTemplate ()
                                {
                                    IRQ (Level, ActiveLow, Shared, )
                                        {}
                                })
                                CreateWordField (RTLE, One, IRQ0)
                                IRQ0 = Zero
                                IRQ0 = (One << (PERC & 0x0F))
                                Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
                            }

                            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                            {
                                CreateWordField (Arg0, One, IRQ0)
                                FindSetRightBit (IRQ0, Local0)
                                Local0--
                                PERC = Local0
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((PERC & 0x80))
                                {
                                    Return (0x09)
                                }
                                Else
                                {
                                    Return (0x0B)
                                }
                            }
                        }

                        Device (LNKF)
                        {
                            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                            Name (_UID, 0x06)  // _UID: Unique ID
                            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                            {
                                PFRC |= 0x80
                            }

                            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {1,3,4,5,6,7,11,12,14,15}
                            })
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                Name (RTLF, ResourceTemplate ()
                                {
                                    IRQ (Level, ActiveLow, Shared, )
                                        {}
                                })
                                CreateWordField (RTLF, One, IRQ0)
                                IRQ0 = Zero
                                IRQ0 = (One << (PFRC & 0x0F))
                                Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
                            }

                            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                            {
                                CreateWordField (Arg0, One, IRQ0)
                                FindSetRightBit (IRQ0, Local0)
                                Local0--
                                PFRC = Local0
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((PFRC & 0x80))
                                {
                                    Return (0x09)
                                }
                                Else
                                {
                                    Return (0x0B)
                                }
                            }
                        }

                        Device (LNKG)
                        {
                            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                            Name (_UID, 0x07)  // _UID: Unique ID
                            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                            {
                                PGRC |= 0x80
                            }

                            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {1,3,4,5,6,7,10,12,14,15}
                            })
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                Name (RTLG, ResourceTemplate ()
                                {
                                    IRQ (Level, ActiveLow, Shared, )
                                        {}
                                })
                                CreateWordField (RTLG, One, IRQ0)
                                IRQ0 = Zero
                                IRQ0 = (One << (PGRC & 0x0F))
                                Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
                            }

                            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                            {
                                CreateWordField (Arg0, One, IRQ0)
                                FindSetRightBit (IRQ0, Local0)
                                Local0--
                                PGRC = Local0
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((PGRC & 0x80))
                                {
                                    Return (0x09)
                                }
                                Else
                                {
                                    Return (0x0B)
                                }
                            }
                        }

                        Device (LNKH)
                        {
                            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                            Name (_UID, 0x08)  // _UID: Unique ID
                            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                            {
                                PHRC |= 0x80
                            }

                            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {1,3,4,5,6,7,11,12,14,15}
                            })
                            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                            {
                                Name (RTLH, ResourceTemplate ()
                                {
                                    IRQ (Level, ActiveLow, Shared, )
                                        {}
                                })
                                CreateWordField (RTLH, One, IRQ0)
                                IRQ0 = Zero
                                IRQ0 = (One << (PHRC & 0x0F))
                                Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
                            }

                            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                            {
                                CreateWordField (Arg0, One, IRQ0)
                                FindSetRightBit (IRQ0, Local0)
                                Local0--
                                PHRC = Local0
                            }

                            Method (_STA, 0, Serialized)  // _STA: Status
                            {
                                If ((PHRC & 0x80))
                                {
                                    Return (0x09)
                                }
                                Else
                                {
                                    Return (0x0B)
                                }
                            }
                        }
                    }

                    OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                    Field (LPC0, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x40), 
                        IOD0,   8, 
                        IOD1,   8, 
                        IOEN,   8, 
                        Offset (0x78), 
                            ,   6, 
                        GR03,   2, 
                        Offset (0x7A), 
                        GR08,   2, 
                        GR09,   2, 
                        GR0A,   2, 
                        GR0B,   2, 
                        Offset (0x7C), 
                            ,   2, 
                        GR19,   2, 
                        Offset (0x80), 
                        Offset (0xB0), 
                        RAEN,   1, 
                            ,   13, 
                        RCBA,   18
                    }

                    Device (DMAC)
                    {
                        Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0000,             // Range Minimum
                                0x0000,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            IO (Decode16,
                                0x0081,             // Range Minimum
                                0x0081,             // Range Maximum
                                0x01,               // Alignment
                                0x11,               // Length
                                )
                            IO (Decode16,
                                0x0093,             // Range Minimum
                                0x0093,             // Range Maximum
                                0x01,               // Alignment
                                0x0D,               // Length
                                )
                            IO (Decode16,
                                0x00C0,             // Range Minimum
                                0x00C0,             // Range Maximum
                                0x01,               // Alignment
                                0x20,               // Length
                                )
                            DMA (Compatibility, NotBusMaster, Transfer8_16, )
                                {4}
                        })
                    }

                    Device (GTPM)
                    {
                        Method (_HID, 0, Serialized)  // _HID: Hardware ID
                        {
                            If ((TVID == 0x15D1))
                            {
                                Return (0x0201D824)
                            }
                            Else
                            {
                                Return (0x310CD041)
                            }
                        }

                        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
                        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x1000)
                        Field (TMMB, ByteAcc, Lock, Preserve)
                        {
                            ACSS,   8, 
                            Offset (0x18), 
                            TSTA,   8, 
                            TBCA,   8, 
                            Offset (0xF00), 
                            TVID,   16, 
                            TDID,   16
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (((ACSS == 0xFF) || (TPMH == One)))
                            {
                                Return (Zero)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            If ((TPMH != One))
                            {
                                Return (ResourceTemplate ()
                                {
                                    Memory32Fixed (ReadOnly,
                                        0xFED40000,         // Address Base
                                        0x00005000,         // Address Length
                                        )
                                })
                            }

                            Return (ResourceTemplate ()
                            {
                                Memory32Fixed (ReadOnly,
                                    0x00000000,         // Address Base
                                    0x00000000,         // Address Length
                                    )
                            })
                        }

                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                            {
                                If ((Arg1 == One))
                                {
                                    If ((Arg2 == Zero))
                                    {
                                        Return (Buffer (0x02)
                                        {
                                             0xFF, 0x01                                       // ..
                                        })
                                    }

                                    If ((Arg2 == One))
                                    {
                                        Return ("1.2")
                                    }

                                    If ((Arg2 == 0x02))
                                    {
                                        CreateDWordField (Arg3, Zero, VREQ)
                                        If ((((VREQ >= Zero) && (VREQ <= 0x0B)) || (
                                            VREQ == 0x0E)))
                                        {
                                            Local0 = (VREQ | 0x3900)
                                            SMBR (0xFA00, Local0, Zero, Zero, Zero, Zero, 0xB2)
                                            Local1 = (OEAX & 0xFF00)
                                            While ((Local1 == 0x2000))
                                            {
                                                SMBR (0xFA00, Local0, Zero, Zero, Zero, Zero, 0xB2)
                                                Local1 = (OEAX & 0xFF00)
                                            }

                                            If ((Local1 == Zero))
                                            {
                                                TPMO = VREQ /* \_SB_.PCI0.LPCB.GTPM._DSM.VREQ */
                                                Return (Zero)
                                            }
                                            Else
                                            {
                                                Return (0x02)
                                            }
                                        }

                                        Return (One)
                                    }

                                    If ((Arg2 == 0x03))
                                    {
                                        Name (BUFF, Package (0x02)
                                        {
                                            Zero, 
                                            Zero
                                        })
                                        BUFF [One] = TPMO /* \TPMO */
                                        Return (BUFF) /* \_SB_.PCI0.LPCB.GTPM._DSM.BUFF */
                                    }

                                    If ((Arg2 == 0x04))
                                    {
                                        Return (0x02)
                                    }

                                    If ((Arg2 == 0x05))
                                    {
                                        Name (BUF1, Package (0x03)
                                        {
                                            Zero, 
                                            Zero, 
                                            Zero
                                        })
                                        Local0 = TPMQ /* \TPMQ */
                                        BUF1 [One] = Local0
                                        Local0 = TPMR /* \TPMR */
                                        If ((Local0 == 0xFFF0))
                                        {
                                            Local0 = 0xFFFFFFF0
                                        }

                                        If ((Local0 == 0xFFF1))
                                        {
                                            Local0 = 0xFFFFFFF1
                                        }

                                        BUF1 [0x02] = Local0
                                        Return (BUF1) /* \_SB_.PCI0.LPCB.GTPM._DSM.BUF1 */
                                    }

                                    If ((Arg2 == 0x06))
                                    {
                                        Return (0x03)
                                    }

                                    If ((Arg2 == 0x07))
                                    {
                                        Local2 = DerefOf (Arg3 [Zero])
                                        If (((((Local2 >= Zero) && (Local2 <= 0x0B)) || 
                                            ((Local2 >= 0x0E) && (Local2 <= 0x10))) || ((Local2 >= 
                                            0x15) && (Local2 <= 0x16))))
                                        {
                                            Local0 = (Local2 | 0x3900)
                                            SMBR (0xFA00, Local0, Zero, Zero, Zero, Zero, 0xB2)
                                            Local1 = (OEAX & 0xFF00)
                                            While ((Local1 == 0x2000))
                                            {
                                                SMBR (0xFA00, Local0, Zero, Zero, Zero, Zero, 0xB2)
                                                Local1 = (OEAX & 0xFF00)
                                            }

                                            If ((Local1 == Zero))
                                            {
                                                TPMO = Local2
                                                Return (Zero)
                                            }
                                            Else
                                            {
                                                Return (0x02)
                                            }
                                        }

                                        Return (One)
                                    }

                                    If ((Arg2 == 0x08))
                                    {
                                        Local0 = DerefOf (Arg3 [Zero])
                                        If (((((Local0 >= Zero) && (Local0 <= 0x0B)) || 
                                            ((Local0 >= 0x0E) && (Local0 <= 0x10))) || ((Local0 >= 
                                            0x15) && (Local0 <= 0x16))))
                                        {
                                            If ((Local0 == Zero))
                                            {
                                                Return (0x04)
                                            }

                                            If ((Local0 == 0x05))
                                            {
                                                Return (0x03)
                                            }

                                            If ((Local0 == 0x0E))
                                            {
                                                Return (0x03)
                                            }

                                            If ((Local0 == 0x0F))
                                            {
                                                Return (0x04)
                                            }

                                            If ((Local0 == 0x10))
                                            {
                                                Return (0x03)
                                            }

                                            If ((Local0 == 0x15))
                                            {
                                                Return (0x03)
                                            }

                                            If ((Local0 == 0x16))
                                            {
                                                Return (0x03)
                                            }

                                            If (PPCR)
                                            {
                                                Return (0x04)
                                            }
                                            Else
                                            {
                                                Return (0x03)
                                            }
                                        }

                                        Return (Zero)
                                    }
                                }
                                ElseIf ((Arg2 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x01                                             // .
                                    })
                                }
                            }
                            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
                            {
                                If ((Arg1 == One))
                                {
                                    If ((Arg2 == Zero))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x03                                             // .
                                        })
                                    }

                                    If ((Arg2 == One))
                                    {
                                        Local0 = DerefOf (Arg3 [Zero])
                                        Local1 = (Local0 & 0xEE)
                                        If (Local1)
                                        {
                                            Return (One)
                                        }

                                        TMOR = (Local0 & One)
                                        TDAD = (Local0 & 0x10)
                                        Return (Zero)
                                    }

                                    Return (One)
                                }

                                If ((Arg2 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x01                                             // .
                                    })
                                }
                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    Device (HPET)
                    {
                        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
                        Name (BUF0, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadOnly,
                                0xFED00000,         // Address Base
                                0x00000400,         // Address Length
                                _Y15)
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((OSYS >= 0x07D1))
                            {
                                If (HPAE)
                                {
                                    Return (0x0F)
                                }
                            }
                            ElseIf (HPAE)
                            {
                                Return (0x0B)
                            }

                            Return (Zero)
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            If (HPAE)
                            {
                                CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y15._BAS, HPT0)  // _BAS: Base Address
                                If ((HPAS == One))
                                {
                                    HPT0 = 0xFED01000
                                }

                                If ((HPAS == 0x02))
                                {
                                    HPT0 = 0xFED02000
                                }

                                If ((HPAS == 0x03))
                                {
                                    HPT0 = 0xFED03000
                                }
                            }

                            Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                        }
                    }

                    Device (IPIC)
                    {
                        Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0020,             // Range Minimum
                                0x0020,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0024,             // Range Minimum
                                0x0024,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0028,             // Range Minimum
                                0x0028,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x002C,             // Range Minimum
                                0x002C,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0030,             // Range Minimum
                                0x0030,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0034,             // Range Minimum
                                0x0034,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0038,             // Range Minimum
                                0x0038,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x003C,             // Range Minimum
                                0x003C,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x00A0,             // Range Minimum
                                0x00A0,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x00A4,             // Range Minimum
                                0x00A4,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x00A8,             // Range Minimum
                                0x00A8,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x00AC,             // Range Minimum
                                0x00AC,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x00B0,             // Range Minimum
                                0x00B0,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x00B4,             // Range Minimum
                                0x00B4,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x00B8,             // Range Minimum
                                0x00B8,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x00BC,             // Range Minimum
                                0x00BC,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x04D0,             // Range Minimum
                                0x04D0,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IRQNoFlags ()
                                {2}
                        })
                    }

                    Device (MATH)
                    {
                        Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x00F0,             // Range Minimum
                                0x00F0,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQ (Edge, ActiveHigh, Exclusive, )
                                {13}
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If (((CDID & 0xF000) == 0x8000))
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }

                    Device (LDRC)
                    {
                        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x002E,             // Range Minimum
                                0x002E,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0061,             // Range Minimum
                                0x0061,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0063,             // Range Minimum
                                0x0063,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0065,             // Range Minimum
                                0x0065,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0067,             // Range Minimum
                                0x0067,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0070,             // Range Minimum
                                0x0070,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0080,             // Range Minimum
                                0x0080,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0092,             // Range Minimum
                                0x0092,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x00B2,             // Range Minimum
                                0x00B2,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x2008,             // Range Minimum
                                0x2008,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IO (Decode16,
                                0xFFFF,             // Range Minimum
                                0xFFFF,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0xFFFF,             // Range Minimum
                                0xFFFF,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0800,             // Range Minimum
                                0x0800,             // Range Maximum
                                0x01,               // Alignment
                                0xFF,               // Length
                                )
                            IO (Decode16,
                                0x0900,             // Range Minimum
                                0x0900,             // Range Maximum
                                0x01,               // Alignment
                                0xFF,               // Length
                                )
                            IO (Decode16,
                                0x0A00,             // Range Minimum
                                0x0A00,             // Range Maximum
                                0x01,               // Alignment
                                0xFF,               // Length
                                )
                            IO (Decode16,
                                0x0B00,             // Range Minimum
                                0x0B00,             // Range Maximum
                                0x01,               // Alignment
                                0xFF,               // Length
                                )
                            IO (Decode16,
                                0x1800,             // Range Minimum
                                0x1800,             // Range Maximum
                                0x01,               // Alignment
                                0xFF,               // Length
                                )
                        })
                    }

                    Device (GEN1)
                    {
                        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Name (BUF0, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x004E,             // Range Minimum
                                0x004E,             // Range Maximum
                                0x01,               // Alignment
                                0x02,               // Length
                                )
                            IO (Decode16,
                                0x0680,             // Range Minimum
                                0x0680,             // Range Maximum
                                0x01,               // Alignment
                                0x80,               // Length
                                )
                            IO (Decode16,
                                0x01E0,             // Range Minimum
                                0x01E0,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                        })
                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPCB.GEN1.BUF0 */
                        }
                    }

                    Device (RTC)
                    {
                        Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0070,             // Range Minimum
                                0x0070,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQ (Edge, ActiveHigh, Exclusive, )
                                {8}
                        })
                    }

                    Device (TIMR)
                    {
                        Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0040,             // Range Minimum
                                0x0040,             // Range Maximum
                                0x01,               // Alignment
                                0x04,               // Length
                                )
                            IO (Decode16,
                                0x0050,             // Range Minimum
                                0x0050,             // Range Maximum
                                0x10,               // Alignment
                                0x04,               // Length
                                )
                            IRQ (Edge, ActiveHigh, Exclusive, )
                                {0}
                        })
                    }

                    Scope (\)
                    {
                        OperationRegion (S_IO, SystemIO, 0x06C0, 0x11)
                        Field (S_IO, ByteAcc, NoLock, Preserve)
                        {
                            PMS0,   8, 
                            PME0,   8, 
                            PMS1,   8, 
                            PMS2,   8, 
                            PMS3,   8, 
                            PME1,   8, 
                            PME2,   8, 
                            PME3,   8, 
                            SMS1,   8, 
                            SMS2,   8, 
                            SME1,   8, 
                            SME2,   8, 
                            Offset (0x0F), 
                            SG40,   1, 
                            SG41,   1, 
                            SG42,   1, 
                            SG43,   1, 
                            SG44,   1, 
                            SG45,   1, 
                            SG46,   1, 
                            SG47,   1
                        }
                    }

                    OperationRegion (LPCB, SystemIO, 0x2E, 0x02)
                    Field (LPCB, ByteAcc, Lock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x02), 
                        CR02,   8, 
                        Offset (0x0C), 
                        CR0C,   8, 
                        Offset (0x24), 
                        CR24,   8, 
                        CR25,   8, 
                        Offset (0x28), 
                        CR28,   8, 
                        Offset (0x3A), 
                        CR3A,   8, 
                        CR3B,   8, 
                        CR3C,   8, 
                        Offset (0x55), 
                        CR55,   8, 
                        Offset (0xAA), 
                        CRAA,   8
                    }

                    Mutex (MTXS, 0x00)
                    Device (UART)
                    {
                        Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (CMCP)
                            {
                                Acquire (MTXS, 0xFFFF)
                                CR55 = Zero
                                Local0 = CR02 /* \_SB_.PCI0.LPCB.CR02 */
                                CRAA = Zero
                                Release (MTXS)
                                If ((Local0 & 0x08))
                                {
                                    Return (0x0F)
                                }

                                Return (0x0D)
                            }

                            Return (Zero)
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            SG46 = Zero
                            Acquire (MTXS, 0xFFFF)
                            CR55 = Zero
                            CR02 = (CR02 & 0xF0)
                            CRAA = Zero
                            Release (MTXS)
                            IOEN &= 0xFE
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (BUF0, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x03F8,             // Range Minimum
                                    0x03F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    _Y16)
                                IRQNoFlags (_Y17)
                                    {4}
                            })
                            If (CMCP)
                            {
                                CreateByteField (BUF0, \_SB.PCI0.LPCB.UART._CRS._Y16._MIN, IOL0)  // _MIN: Minimum Base Address
                                CreateByteField (BUF0, 0x03, IOH0)
                                CreateByteField (BUF0, \_SB.PCI0.LPCB.UART._CRS._Y16._MAX, IOL1)  // _MAX: Maximum Base Address
                                CreateByteField (BUF0, 0x05, IOH1)
                                CreateByteField (BUF0, \_SB.PCI0.LPCB.UART._CRS._Y16._LEN, LEN0)  // _LEN: Length
                                CreateWordField (BUF0, \_SB.PCI0.LPCB.UART._CRS._Y17._INT, IRQW)  // _INT: Interrupts
                                Acquire (MTXS, 0xFFFF)
                                CR55 = Zero
                                IOL0 = (CR24 << 0x02)
                                IOL1 = (CR24 << 0x02)
                                IOH0 = (CR24 >> 0x06)
                                IOH1 = (CR24 >> 0x06)
                                LEN0 = 0x08
                                IRQW = (One << ((CR28 & 0xF0) >> 0x04))
                                CRAA = Zero
                                Release (MTXS)
                            }

                            Return (BUF0) /* \_SB_.PCI0.LPCB.UART._CRS.BUF0 */
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Name (BUF0, ResourceTemplate ()
                            {
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x02E8,             // Range Minimum
                                        0x02E8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {3}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x02F8,             // Range Minimum
                                        0x02F8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {3}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x03E8,             // Range Minimum
                                        0x03E8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {3}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x03F8,             // Range Minimum
                                        0x03F8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {3}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x02E8,             // Range Minimum
                                        0x02E8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {4}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x02F8,             // Range Minimum
                                        0x02F8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {4}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x03E8,             // Range Minimum
                                        0x03E8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {4}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x03F8,             // Range Minimum
                                        0x03F8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {4}
                                }
                                EndDependentFn ()
                            })
                            Return (BUF0) /* \_SB_.PCI0.LPCB.UART._PRS.BUF0 */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IOLO)
                            CreateByteField (Arg0, 0x03, IOHI)
                            CreateWordField (Arg0, 0x09, IRQW)
                            Acquire (MTXS, 0xFFFF)
                            CR55 = Zero
                            CR02 = (CR02 & 0xF0)
                            CR24 = (IOLO >> 0x02)
                            CR24 |= (IOHI << 0x06)
                            CR28 &= 0x0F
                            CR28 |= ((FindSetRightBit (IRQW) - One) << 0x04)
                            IOD0 &= 0xF8
                            If ((IOHI == 0x03))
                            {
                                If ((IOLO == 0xF8))
                                {
                                    IOD0 |= Zero
                                }
                                Else
                                {
                                    IOD0 |= 0x07
                                }
                            }
                            ElseIf ((IOLO == 0xF8))
                            {
                                IOD0 |= One
                            }
                            Else
                            {
                                IOD0 |= 0x05
                            }

                            CR02 = (CR02 | 0x08)
                            CRAA = Zero
                            Release (MTXS)
                            IOEN |= One
                            SG46 = One
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            Acquire (MTXS, 0xFFFF)
                            CR55 = Zero
                            CR02 = (CR02 | 0x08)
                            CRAA = Zero
                            Release (MTXS)
                            SG46 = One
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            SG46 = Zero
                            Acquire (MTXS, 0xFFFF)
                            CR55 = Zero
                            CR02 = (CR02 & 0xF0)
                            CRAA = Zero
                            Release (MTXS)
                        }
                    }

                    Device (URT2)
                    {
                        Name (_HID, EisaId ("PNP0510") /* Generic IRDA-compatible Device */)  // _HID: Hardware ID
                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (CIRP)
                            {
                                Acquire (MTXS, 0xFFFF)
                                CR55 = Zero
                                Local0 = CR02 /* \_SB_.PCI0.LPCB.CR02 */
                                CRAA = Zero
                                Release (MTXS)
                                If ((Local0 & 0x80))
                                {
                                    Return (0x0F)
                                }

                                Return (0x0D)
                            }

                            Return (Zero)
                        }

                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Acquire (MTXS, 0xFFFF)
                            CR55 = Zero
                            CR02 = (CR02 & 0x0F)
                            CR02 = (CR3A & 0xFA)
                            CRAA = Zero
                            Release (MTXS)
                            IOEN &= 0xFD
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (BUF0, ResourceTemplate ()
                            {
                                IO (Decode16,
                                    0x02F8,             // Range Minimum
                                    0x02F8,             // Range Maximum
                                    0x01,               // Alignment
                                    0x08,               // Length
                                    _Y18)
                                IRQNoFlags (_Y19)
                                    {3}
                            })
                            If (CIRP)
                            {
                                CreateByteField (BUF0, \_SB.PCI0.LPCB.URT2._CRS._Y18._MIN, IOL0)  // _MIN: Minimum Base Address
                                CreateByteField (BUF0, \_SB.PCI0.LPCB.URT2._CRS._Y18._MAX, IOL1)  // _MAX: Maximum Base Address
                                CreateWordField (BUF0, \_SB.PCI0.LPCB.URT2._CRS._Y19._INT, IRQW)  // _INT: Interrupts
                                Acquire (MTXS, 0xFFFF)
                                CR55 = Zero
                                IOL0 = (CR25 << 0x02)
                                IOL1 = (CR25 << 0x02)
                                Local1 = Zero
                                Local1 = (CR28 & 0x0F)
                                IRQW = (One << Local1)
                                CRAA = Zero
                                Release (MTXS)
                            }

                            Return (BUF0) /* \_SB_.PCI0.LPCB.URT2._CRS.BUF0 */
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Name (BUF0, ResourceTemplate ()
                            {
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x02E8,             // Range Minimum
                                        0x02E8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {3}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x02F8,             // Range Minimum
                                        0x02F8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {3}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x03E8,             // Range Minimum
                                        0x03E8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {3}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x03F8,             // Range Minimum
                                        0x03F8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {3}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x02E8,             // Range Minimum
                                        0x02E8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {4}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x02F8,             // Range Minimum
                                        0x02F8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {4}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x03E8,             // Range Minimum
                                        0x03E8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {4}
                                }
                                StartDependentFn (0x00, 0x02)
                                {
                                    IO (Decode16,
                                        0x03F8,             // Range Minimum
                                        0x03F8,             // Range Maximum
                                        0x01,               // Alignment
                                        0x08,               // Length
                                        )
                                    IRQNoFlags ()
                                        {4}
                                }
                                EndDependentFn ()
                            })
                            Return (BUF0) /* \_SB_.PCI0.LPCB.URT2._PRS.BUF0 */
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateByteField (Arg0, 0x02, IOLO)
                            CreateByteField (Arg0, 0x03, IOHI)
                            CreateWordField (Arg0, 0x09, IRQW)
                            Acquire (MTXS, 0xFFFF)
                            CR55 = Zero
                            CR02 = (CR02 & 0x0F)
                            CR0C = 0x0E
                            CR25 = (IOLO >> 0x02)
                            CR25 |= (IOHI << 0x06)
                            CR28 &= 0xF0
                            CR28 |= (FindSetRightBit (IRQW) - One)
                            IOD0 &= 0xF8
                            If ((IOHI == 0x03))
                            {
                                If ((IOLO == 0xF8))
                                {
                                    IOD0 |= Zero
                                }
                                Else
                                {
                                    IOD0 |= 0x07
                                }
                            }
                            ElseIf ((IOLO == 0xF8))
                            {
                                IOD0 |= One
                            }
                            Else
                            {
                                IOD0 |= 0x05
                            }

                            CR02 = (CR02 | 0x80)
                            CRAA = Zero
                            Release (MTXS)
                            IOEN |= 0x02
                        }

                        Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                        {
                            Acquire (MTXS, 0xFFFF)
                            CR55 = Zero
                            CR02 = (CR02 | 0x80)
                            CRAA = Zero
                            Release (MTXS)
                        }

                        Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                        {
                            Acquire (MTXS, 0xFFFF)
                            CR55 = Zero
                            CR02 = (CR02 & 0x0F)
                            CRAA = Zero
                            Release (MTXS)
                        }
                    }

                    Device (PS2K)
                    {
                        Method (_HID, 0, Serialized)  // _HID: Hardware ID
                        {
                            If ((OSYS < 0x07DC))
                            {
                                Return (0x0303D041)
                            }
                            Else
                            {
                                Return (0x0774F351)
                            }
                        }

                        Method (_CID, 0, Serialized)  // _CID: Compatible ID
                        {
                            If ((OSYS < 0x07DC))
                            {
                                Return (0x0B03D041)
                            }
                            Else
                            {
                                Return (0x0303D041)
                            }
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x01,               // Alignment
                                0x01,               // Length
                                )
                            IRQ (Edge, ActiveHigh, Exclusive, )
                                {1}
                        })
                    }

                    Device (PS2M)
                    {
                        Method (_HID, 0, Serialized)  // _HID: Hardware ID
                        {
                            If ((SYU2 == One))
                            {
                                Return (0x2002F351)
                            }
                            ElseIf ((SYU4 == One))
                            {
                                Return (0x10109052)
                            }
                            ElseIf ((TPID == Zero))
                            {
                                Return (0x00109052)
                            }
                            Else
                            {
                                Return (0x00039052)
                            }
                        }

                        Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            IRQ (Edge, ActiveHigh, Exclusive, )
                                {12}
                        })
                    }
                }

                Device (SAT0)
                {
                    Name (_ADR, 0x001F0002)  // _ADR: Address
                    OperationRegion (SACS, PCI_Config, 0x40, 0xC0)
                    Field (SACS, DWordAcc, NoLock, Preserve)
                    {
                        PRIT,   16, 
                        SECT,   16, 
                        PSIT,   4, 
                        SSIT,   4, 
                        Offset (0x08), 
                        SYNC,   4, 
                        Offset (0x0A), 
                        SDT0,   2, 
                            ,   2, 
                        SDT1,   2, 
                        Offset (0x0B), 
                        SDT2,   2, 
                            ,   2, 
                        SDT3,   2, 
                        Offset (0x14), 
                        ICR0,   4, 
                        ICR1,   4, 
                        ICR2,   4, 
                        ICR3,   4, 
                        ICR4,   4, 
                        ICR5,   4, 
                        Offset (0x50), 
                        MAPV,   2
                    }
                }

                Device (SAT1)
                {
                    Name (_ADR, 0x001F0005)  // _ADR: Address
                    OperationRegion (SACS, PCI_Config, 0x40, 0xC0)
                    Field (SACS, DWordAcc, NoLock, Preserve)
                    {
                        PRIT,   16, 
                        SECT,   16, 
                        PSIT,   4, 
                        SSIT,   4, 
                        Offset (0x08), 
                        SYNC,   4, 
                        Offset (0x0A), 
                        SDT0,   2, 
                            ,   2, 
                        SDT1,   2, 
                        Offset (0x0B), 
                        SDT2,   2, 
                            ,   2, 
                        SDT3,   2, 
                        Offset (0x14), 
                        ICR0,   4, 
                        ICR1,   4, 
                        ICR2,   4, 
                        ICR3,   4, 
                        ICR4,   4, 
                        ICR5,   4, 
                        Offset (0x50), 
                        MAPV,   2
                    }
                }

                Device (SBUS)
                {
                    Name (_ADR, 0x001F0003)  // _ADR: Address
                    OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
                    Field (SMBP, DWordAcc, NoLock, Preserve)
                    {
                            ,   2, 
                        I2CE,   1
                    }

                    OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
                    Field (SMPB, DWordAcc, NoLock, Preserve)
                    {
                            ,   5, 
                        SBAR,   11
                    }

                    OperationRegion (SMBI, SystemIO, 0xEFA0, 0x10)
                    Field (SMBI, ByteAcc, NoLock, Preserve)
                    {
                        HSTS,   8, 
                        Offset (0x02), 
                        HCON,   8, 
                        HCOM,   8, 
                        TXSA,   8, 
                        DAT0,   8, 
                        DAT1,   8, 
                        HBDR,   8, 
                        PECR,   8, 
                        RXSA,   8, 
                        SDAT,   16
                    }

                    Method (SSXB, 2, Serialized)
                    {
                        If (STRT ())
                        {
                            Return (Zero)
                        }

                        I2CE = Zero
                        HSTS = 0xBF
                        TXSA = Arg0
                        HCOM = Arg1
                        HCON = 0x48
                        If (COMP ())
                        {
                            HSTS |= 0xFF
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (SRXB, 1, Serialized)
                    {
                        If (STRT ())
                        {
                            Return (0xFFFF)
                        }

                        I2CE = Zero
                        HSTS = 0xBF
                        TXSA = (Arg0 | One)
                        HCON = 0x44
                        If (COMP ())
                        {
                            HSTS |= 0xFF
                            Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                        }

                        Return (0xFFFF)
                    }

                    Method (SWRB, 3, Serialized)
                    {
                        If (STRT ())
                        {
                            Return (Zero)
                        }

                        I2CE = Zero
                        HSTS = 0xBF
                        TXSA = Arg0
                        HCOM = Arg1
                        DAT0 = Arg2
                        HCON = 0x48
                        If (COMP ())
                        {
                            HSTS |= 0xFF
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (SRDB, 2, Serialized)
                    {
                        If (STRT ())
                        {
                            Return (0xFFFF)
                        }

                        I2CE = Zero
                        HSTS = 0xBF
                        TXSA = (Arg0 | One)
                        HCOM = Arg1
                        HCON = 0x48
                        If (COMP ())
                        {
                            HSTS |= 0xFF
                            Return (DAT0) /* \_SB_.PCI0.SBUS.DAT0 */
                        }

                        Return (0xFFFF)
                    }

                    Method (SWRW, 3, Serialized)
                    {
                        If (STRT ())
                        {
                            Return (Zero)
                        }

                        I2CE = Zero
                        HSTS = 0xBF
                        TXSA = Arg0
                        HCOM = Arg1
                        DAT1 = (Arg2 & 0xFF)
                        DAT0 = ((Arg2 >> 0x08) & 0xFF)
                        HCON = 0x4C
                        If (COMP ())
                        {
                            HSTS |= 0xFF
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (SRDW, 2, Serialized)
                    {
                        If (STRT ())
                        {
                            Return (0xFFFF)
                        }

                        I2CE = Zero
                        HSTS = 0xBF
                        TXSA = (Arg0 | One)
                        HCOM = Arg1
                        HCON = 0x4C
                        If (COMP ())
                        {
                            HSTS |= 0xFF
                            Return (((DAT0 << 0x08) | DAT1))
                        }

                        Return (0xFFFFFFFF)
                    }

                    Method (SBLW, 4, Serialized)
                    {
                        If (STRT ())
                        {
                            Return (Zero)
                        }

                        I2CE = Arg3
                        HSTS = 0xBF
                        TXSA = Arg0
                        HCOM = Arg1
                        DAT0 = SizeOf (Arg2)
                        Local1 = Zero
                        HBDR = DerefOf (Arg2 [Zero])
                        HCON = 0x54
                        While ((SizeOf (Arg2) > Local1))
                        {
                            Local0 = 0x0FA0
                            While ((!(HSTS & 0x80) && Local0))
                            {
                                Local0--
                                Stall (0x32)
                            }

                            If (!Local0)
                            {
                                KILL ()
                                Return (Zero)
                            }

                            HSTS = 0x80
                            Local1++
                            If ((SizeOf (Arg2) > Local1))
                            {
                                HBDR = DerefOf (Arg2 [Local1])
                            }
                        }

                        If (COMP ())
                        {
                            HSTS |= 0xFF
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (SBLR, 3, Serialized)
                    {
                        Name (TBUF, Buffer (0x0100){})
                        If (STRT ())
                        {
                            Return (Zero)
                        }

                        I2CE = Arg2
                        HSTS = 0xBF
                        TXSA = (Arg0 | One)
                        HCOM = Arg1
                        HCON = 0x54
                        Local0 = 0x0FA0
                        While ((!(HSTS & 0x80) && Local0))
                        {
                            Local0--
                            Stall (0x32)
                        }

                        If (!Local0)
                        {
                            KILL ()
                            Return (Zero)
                        }

                        TBUF [Zero] = DAT0 /* \_SB_.PCI0.SBUS.DAT0 */
                        HSTS = 0x80
                        Local1 = One
                        While ((Local1 < DerefOf (TBUF [Zero])))
                        {
                            Local0 = 0x0FA0
                            While ((!(HSTS & 0x80) && Local0))
                            {
                                Local0--
                                Stall (0x32)
                            }

                            If (!Local0)
                            {
                                KILL ()
                                Return (Zero)
                            }

                            TBUF [Local1] = HBDR /* \_SB_.PCI0.SBUS.HBDR */
                            HSTS = 0x80
                            Local1++
                        }

                        If (COMP ())
                        {
                            HSTS |= 0xFF
                            Return (TBUF) /* \_SB_.PCI0.SBUS.SBLR.TBUF */
                        }

                        Return (Zero)
                    }

                    Method (STRT, 0, Serialized)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            If ((HSTS & 0x40))
                            {
                                Local0--
                                Sleep (One)
                                If ((Local0 == Zero))
                                {
                                    Return (One)
                                }
                            }
                            Else
                            {
                                Local0 = Zero
                            }
                        }

                        Local0 = 0x0FA0
                        While (Local0)
                        {
                            If ((HSTS & One))
                            {
                                Local0--
                                Stall (0x32)
                                If ((Local0 == Zero))
                                {
                                    KILL ()
                                }
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        Return (One)
                    }

                    Method (COMP, 0, Serialized)
                    {
                        Local0 = 0x0FA0
                        While (Local0)
                        {
                            If ((HSTS & 0x02))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Local0--
                                Stall (0x32)
                                If ((Local0 == Zero))
                                {
                                    KILL ()
                                }
                            }
                        }

                        Return (Zero)
                    }

                    Method (KILL, 0, Serialized)
                    {
                        HCON |= 0x02
                        HSTS |= 0xFF
                    }
                }
            }

            Device (DOCK)
            {
                Name (_HID, EisaId ("PNP0A05") /* Generic Container Device */)  // _HID: Hardware ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Local0 = Zero
                    Local1 = Zero
                    If ((OSID < 0x05))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local2 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x0136, Zero, Zero, Zero, Zero, 0xB2)
                        Local0 = (OEAX & 0xFF00)
                        Local1 = OECX /* \OECX */
                        If ((Local2 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }
                    }

                    If ((((Local0 == Zero) && (Local1 == Zero)) || (Local0 != 
                        Zero)))
                    {
                        DLID = DCID /* \DCID */
                        DSRN = DSNB /* \DSNB */
                        Local0 = (DCSS & 0x05)
                        If ((Local0 != 0x05))
                        {
                            Return (Zero)
                        }
                        ElseIf ((0x2851F351 == DLID))
                        {
                            DCKD = One
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_BDN, 0, NotSerialized)  // _BDN: BIOS Dock Name
                {
                    Return (DCID) /* \DCID */
                }

                Method (_UID, 0, NotSerialized)  // _UID: Unique ID
                {
                    Return (DSNB) /* \DSNB */
                }

                Method (_DCK, 1, NotSerialized)  // _DCK: Dock Present
                {
                    If (Arg0)
                    {
                        Local0 = (DCSS & 0x05)
                        If ((Local0 == 0x05))
                        {
                            ^^PDRC.TRP4 = 0x41
                            Reset (DKSQ)
                            If (Wait (DKSQ, 0x0BB8))
                            {
                                Local0 = One
                            }

                            Return (One)
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (One)
                    }
                }

                Method (_EJ0, 1, NotSerialized)  // _EJx: Eject Device, x=0-9
                {
                    If ((BES1 || BES2))
                    {
                        If (DCKD)
                        {
                            DCKD = Zero
                            ^^PDRC.TRP4 = 0x40
                            Reset (DKSQ)
                            If (Wait (DKSQ, 0x1388))
                            {
                                Local0 = One
                            }

                            If (UDNE)
                            {
                                If ((LIDS == Zero))
                                {
                                    Notify (VALZ, 0x90) // Device-Specific
                                }
                            }
                        }

                        DLID = Zero
                        DSRN = Zero
                        If (!IGDE ())
                        {
                            If ((PVID != 0x1002))
                            {
                                If ((OSID < 0x05))
                                {
                                    VGAN ()
                                }
                            }
                        }
                        Else
                        {
                            ^^GFX0.GDCK (Zero)
                        }

                        PNOT ()
                    }
                }

                PowerResource (PDOC, 0x01, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (DSPW) /* \DSPW */
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        DSPW = One
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        DSPW = Zero
                    }
                }

                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    PDOC
                })
                Name (_PR1, Package (0x01)  // _PR1: Power Resources for D1
                {
                    PDOC
                })
            }

            Device (AMW0)
            {
                Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Name (_WDG, Buffer (0x0154)
                {
                    /* 0000 */  0x2C, 0x6A, 0x48, 0x12, 0x2C, 0xA4, 0xDB, 0x40,  // ,jH.,..@
                    /* 0008 */  0x9D, 0x1C, 0x9F, 0x37, 0x4D, 0xD3, 0x8B, 0x89,  // ...7M...
                    /* 0010 */  0x42, 0x41, 0x45, 0x05, 0x5A, 0x98, 0x6C, 0xDE,  // BAE.Z.l.
                    /* 0018 */  0xD0, 0x52, 0x9E, 0x40, 0xAA, 0xE6, 0x2E, 0x45,  // .R.@...E
                    /* 0020 */  0xD4, 0x87, 0xCF, 0x0B, 0x42, 0x42, 0x45, 0x05,  // ....BBE.
                    /* 0028 */  0xDA, 0x1A, 0xAC, 0x7A, 0x70, 0x80, 0x8D, 0x4C,  // ...zp..L
                    /* 0030 */  0xB1, 0x77, 0xF4, 0xCD, 0x37, 0x30, 0x9E, 0x14,  // .w..70..
                    /* 0038 */  0x42, 0x43, 0x2C, 0x05, 0x18, 0x92, 0xD7, 0x37,  // BC,....7
                    /* 0040 */  0x3C, 0x46, 0x4F, 0x42, 0xA7, 0xFB, 0x47, 0x9F,  // <FOB..G.
                    /* 0048 */  0xAD, 0xAC, 0x44, 0x8C, 0x42, 0x44, 0x2C, 0x05,  // ..D.BD,.
                    /* 0050 */  0x89, 0xD7, 0x4A, 0xCA, 0x6C, 0xB6, 0xBF, 0x47,  // ..J.l..G
                    /* 0058 */  0xB0, 0xD4, 0x38, 0x4D, 0xCA, 0x0F, 0x0F, 0xB3,  // ..8M....
                    /* 0060 */  0x42, 0x45, 0x04, 0x05, 0x65, 0xDA, 0x26, 0xDD,  // BE..e.&.
                    /* 0068 */  0xA6, 0x05, 0x38, 0x40, 0xBA, 0xC1, 0xE7, 0xA7,  // ..8@....
                    /* 0070 */  0x73, 0xD8, 0xC5, 0x68, 0x42, 0x46, 0x04, 0x05,  // s..hBF..
                    /* 0078 */  0xE5, 0x87, 0x58, 0xAC, 0xD3, 0xCA, 0x10, 0x48,  // ..X....H
                    /* 0080 */  0xAF, 0x93, 0x32, 0x56, 0x90, 0x4B, 0x04, 0x73,  // ..2V.K.s
                    /* 0088 */  0x42, 0x47, 0x10, 0x05, 0xE8, 0xBE, 0xD7, 0x60,  // BG.....`
                    /* 0090 */  0x7D, 0x0B, 0xAF, 0x40, 0x92, 0xA5, 0xAE, 0xE0,  // }..@....
                    /* 0098 */  0x24, 0xA5, 0x17, 0xFF, 0x42, 0x48, 0x10, 0x05,  // $...BH..
                    /* 00A0 */  0xBC, 0x8C, 0xCE, 0x7B, 0xF5, 0xFA, 0xAD, 0x44,  // ...{...D
                    /* 00A8 */  0xB6, 0x81, 0xB9, 0xFB, 0x2D, 0x56, 0xA2, 0x96,  // ....-V..
                    /* 00B0 */  0x42, 0x49, 0x01, 0x05, 0xAE, 0x02, 0x38, 0x0E,  // BI....8.
                    /* 00B8 */  0x3E, 0x69, 0x59, 0x4F, 0xA5, 0x9D, 0xF9, 0x7D,  // >iYO...}
                    /* 00C0 */  0x34, 0x24, 0x2B, 0x6C, 0x42, 0x4A, 0x45, 0x05,  // 4$+lBJE.
                    /* 00C8 */  0xBE, 0xEF, 0x0E, 0xA1, 0xB4, 0x18, 0xBF, 0x43,  // .......C
                    /* 00D0 */  0xA4, 0xC5, 0x53, 0xC8, 0x9A, 0x75, 0x74, 0xAC,  // ..S..ut.
                    /* 00D8 */  0x42, 0x4B, 0x2C, 0x05, 0x22, 0x01, 0xCB, 0xFB,  // BK,."...
                    /* 00E0 */  0x0A, 0xFB, 0x25, 0x41, 0x87, 0x02, 0xCE, 0xBB,  // ..%A....
                    /* 00E8 */  0x04, 0xFC, 0xEC, 0x93, 0x43, 0x41, 0x03, 0x06,  // ....CA..
                    /* 00F0 */  0xCF, 0xB6, 0xBD, 0xAB, 0xA6, 0xD6, 0x24, 0x4B,  // ......$K
                    /* 00F8 */  0x97, 0x49, 0x8B, 0xFD, 0x13, 0x30, 0xF0, 0xC1,  // .I...0..
                    /* 0100 */  0x43, 0x42, 0x02, 0x06, 0x7C, 0x04, 0x66, 0x29,  // CB..|.f)
                    /* 0108 */  0x43, 0x97, 0xDB, 0x4B, 0xB7, 0x62, 0x18, 0x1F,  // C..K.b..
                    /* 0110 */  0xBF, 0x9B, 0xFF, 0xCA, 0x43, 0x43, 0x02, 0x06,  // ....CC..
                    /* 0118 */  0x7C, 0xE3, 0x3D, 0x31, 0xEC, 0xF1, 0x3B, 0x42,  // |.=1..;B
                    /* 0120 */  0x81, 0x60, 0x00, 0x17, 0x5F, 0x8D, 0xE8, 0x0F,  // .`.._...
                    /* 0128 */  0x43, 0x44, 0x02, 0x06, 0x81, 0x6A, 0x0A, 0x01,  // CD...j..
                    /* 0130 */  0x0A, 0x6D, 0x19, 0x4F, 0x8E, 0xFB, 0xA4, 0xE4,  // .m.O....
                    /* 0138 */  0x7A, 0xB9, 0x3E, 0xA5, 0x44, 0x41, 0x02, 0x06,  // z.>.DA..
                    /* 0140 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                    /* 0148 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                    /* 0150 */  0x41, 0x41, 0x01, 0x00                           // AA..
                })
                Name (RETV, 0xFFFFFFFF)
                Name (RETS, 0xFFFFFFFF)
                Name (CURS, 0xFFFFFFFF)
                Name (RTN0, 0xFFFFFFFF)
                Name (RTN1, 0xFFFFFFFF)
                Name (RTN2, 0xFFFFFFFF)
                Name (RTN3, 0xFFFFFFFF)
                Name (RTN4, 0xFFFFFFFF)
                Name (RTN5, 0xFFFFFFFF)
                Name (INP0, 0xFFFFFFFF)
                Name (INP1, 0xFFFFFFFF)
                Name (INP2, 0xFFFFFFFF)
                Name (INP3, 0xFFFFFFFF)
                Name (INP4, 0xFFFFFFFF)
                Name (INP5, 0xFFFFFFFF)
                Name (SELI, 0xFF)
                Name (SETI, 0xFFFFFFFF)
                Name (SEPP, 0xFF)
                Name (SVPA, Zero)
                Name (SRVA, Zero)
                Mutex (MWMI, 0x07)
                Name (NOPR, Zero)
                Name (PRMT, Buffer (0x06E0){})
                Name (PRMN, Buffer (0x0B){})
                Method (WQBA, 1, NotSerialized)
                {
                    Return (QURA (Arg0))
                }

                Name (PKSV, Buffer (0x06){})
                Name (PKEV, Buffer (0x06){})
                Method (QURA, 1, Serialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WSIT [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    Local2 = DerefOf (Local0 [One])
                    Local3 = DerefOf (Local0 [0x04])
                    Local4 = DerefOf (Local0 [0x02])
                    Debug = Local1
                    If ((Local3 == 0x02))
                    {
                        If ((VTSI == 0x02))
                        {
                            Local3 = 0x08
                        }
                    }

                    If ((Local4 == One))
                    {
                        Concatenate (Local1, ",RO,", Local1)
                    }
                    ElseIf ((Local4 == 0x02))
                    {
                        Concatenate (Local1, ",WO,", Local1)
                    }
                    Else
                    {
                        Concatenate (Local1, ",RW,", Local1)
                    }

                    If ((Local2 == 0x8FFF))
                    {
                        Concatenate (Local1, "NotSupported", Local1)
                        Return (Local1)
                    }

                    If ((Local2 == 0xF000))
                    {
                        Concatenate (Local1, "v", Local1)
                        PKSV = SYSV /* \SYSV */
                        Concatenate (Local1, ToString (PKSV, 0x06, Local2), Local1)
                        Return (Local1)
                    }

                    If ((Local2 == 0xF001))
                    {
                        Concatenate (Local1, "v", Local1)
                        PKEV = ECKV /* \ECKV */
                        Concatenate (Local1, ToString (PKEV, 0x06, Local2), Local1)
                        Return (Local1)
                    }

                    If ((Local2 == 0x9309))
                    {
                        SMBR (0xFA00, Local2, Zero, Zero, Zero, Zero, 0xB2)
                        Local3 = OWSN /* \OWSN */
                        If (Local3)
                        {
                            Name (STRG, Buffer (Local3){})
                            STRG = OWNS /* \OWNS */
                            Concatenate (Local1, ToString (STRG, Local3, Local2), Local1)
                        }
                        Else
                        {
                            Concatenate (Local1, "NotRegistered", Local1)
                        }

                        Return (Local1)
                    }

                    Local4 = DerefOf (Local0 [0x02])
                    If ((Local4 == 0x02))
                    {
                        Concatenate (Local1, "WriteOnly", Local1)
                        Return (Local1)
                    }

                    If ((Local2 >= 0x9300))
                    {
                        INP0 = 0xFA00
                    }
                    Else
                    {
                        INP0 = 0xF300
                    }

                    INP1 = Local2
                    INP2 = Zero
                    INP3 = Zero
                    INP4 = Zero
                    INP5 = Zero
                    If (AGBP (Local0))
                    {
                        WMIS ()
                    }

                    If ((RETS == Zero))
                    {
                        If (AGAP (Local0, Local1))
                        {
                            If ((Local3 == 0xFF))
                            {
                                Local3 = DerefOf (Local0 [0x03])
                                Local4 = DerefOf (SLSI [Local3])
                            }
                            Else
                            {
                                Local4 = DerefOf (SLSS [Local3])
                            }

                            Concatenate (Local1, DerefOf (Local4 [CURS]), Local6)
                        }
                        Else
                        {
                            Concatenate (Local1, BOTP, Local6)
                        }
                    }
                    Else
                    {
                        Local4 = DerefOf (RESC [RETS])
                        Concatenate (Local1, Local4, Local6)
                    }

                    Return (Local6)
                }

                Method (AGBP, 1, Serialized)
                {
                    Local0 = Arg0
                    Local3 = DerefOf (Local0 [0x06])
                    If ((Local3 == One))
                    {
                        INP2 = 0x0800
                        Return (One)
                    }

                    If ((Local3 == 0x06))
                    {
                        INP5 = Zero
                        Return (One)
                    }

                    If ((Local3 == 0x08))
                    {
                        INP5 = 0x0300
                        Return (One)
                    }

                    If ((Local3 == 0x0C))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x0300, Zero, Zero, Zero, Zero, 0xB2)
                        Local2 = (OEDX & 0xE0)
                        If ((Local1 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        If ((Local2 == 0x80))
                        {
                            Return (One)
                        }

                        RETS = One
                        Return (Zero)
                    }

                    Return (One)
                }

                Name (BOTP, "                                             ")
                Method (AGAP, 2, Serialized)
                {
                    Local0 = Arg0
                    Local3 = DerefOf (Local0 [0x07])
                    If ((Local3 == One))
                    {
                        CURS = (RTN2 & One)
                        Return (One)
                    }

                    If ((Local3 == 0x02))
                    {
                        CURS = Zero
                        If ((RTN2 == 0x08))
                        {
                            CURS = One
                        }

                        Return (One)
                    }

                    If ((Local3 == 0x03))
                    {
                        Local4 = (RTN2 & 0x1F)
                        If ((Local4 == 0x02))
                        {
                            CURS = Zero
                            Return (One)
                        }

                        If ((Local4 == 0x08))
                        {
                            CURS = One
                            Return (One)
                        }

                        CURS = 0x02
                        Return (One)
                    }

                    If ((Local3 == 0x04))
                    {
                        Local4 = (RTN2 & 0x003F0000)
                        CURS = (Local4 >> 0x10)
                        Return (One)
                    }

                    If ((Local3 == 0x07))
                    {
                        Local4 = (RTN2 & 0xA1)
                        If ((Local4 == Zero))
                        {
                            CURS = Zero
                            Return (One)
                        }

                        If ((Local4 == 0x21))
                        {
                            CURS = One
                            Return (One)
                        }

                        CURS = 0x02
                        Return (One)
                    }

                    If ((Local3 == 0x09))
                    {
                        Local2 = RTN3 /* \_SB_.PCI0.AMW0.RTN3 */
                        Local3 = RTN2 /* \_SB_.PCI0.AMW0.RTN2 */
                        Local5 = DerefOf (Local0 [0x04])
                        If ((Local5 == 0xFF))
                        {
                            Local5 = DerefOf (Local0 [0x03])
                            Local4 = DerefOf (SLSI [Local5])
                        }
                        Else
                        {
                            Local4 = DerefOf (SLSS [Local5])
                        }

                        Local5 = (Local3 & 0x0F)
                        If ((Local5 == 0x0F))
                        {
                            Local6 = "No BootDevice"
                            BOTP = Local6
                            Return (Zero)
                        }

                        Local6 = DerefOf (Local4 [Local5])
                        Local3 >>= 0x04
                        Local2--
                        While (Local2)
                        {
                            Concatenate (Local6, ",", Local6)
                            Local5 = (Local3 & 0x0F)
                            If ((Local5 == 0x0F))
                            {
                                Break
                            }

                            Concatenate (Local6, DerefOf (Local4 [Local5]), Local6)
                            Local3 >>= 0x04
                            Local2--
                        }

                        BOTP = Local6
                        Return (Zero)
                    }

                    If ((Local3 == 0x0A))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x0300, Zero, Zero, Zero, Zero, 0xB2)
                        Local2 = (OEDX & 0xE0)
                        If ((Local1 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        If ((Local2 == 0x40))
                        {
                            CURS = Zero
                            If ((RTN2 == 0x1250))
                            {
                                CURS = One
                            }
                        }
                        ElseIf ((Local2 == 0x60))
                        {
                            CURS = Zero
                            If ((RTN2 == 0x1270))
                            {
                                CURS = One
                            }
                            ElseIf ((RTN2 == 0x2A70))
                            {
                                CURS = 0x02
                            }
                            ElseIf ((RTN2 == 0x2270))
                            {
                                CURS = 0x03
                            }
                        }
                        ElseIf ((Local2 == 0x80))
                        {
                            CURS = 0x02
                            If ((RTN2 == 0x3290))
                            {
                                CURS = Zero
                            }
                            ElseIf ((RTN2 == 0x1290))
                            {
                                CURS = One
                            }
                        }

                        Return (One)
                    }

                    If ((Local3 == 0x0B))
                    {
                        If ((VTSI == 0x02))
                        {
                            If ((RTN2 == 0x02))
                            {
                                CURS = One
                            }
                        }
                    }

                    If ((Local3 == 0x0C))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x0300, Zero, Zero, Zero, Zero, 0xB2)
                        Local2 = (OEDX & 0xE0)
                        If ((Local1 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        If ((Local2 == 0x80))
                        {
                            Local1 = (RTN2 & 0x0F)
                            CURS = Zero
                            If ((Local1 == 0x02))
                            {
                                CURS = One
                            }
                            ElseIf ((Local1 == 0x04))
                            {
                                CURS = 0x02
                            }
                            ElseIf ((Local1 == 0x08))
                            {
                                CURS = 0x03
                            }
                        }

                        Return (One)
                    }

                    Return (One)
                }

                Method (WQBB, 1, NotSerialized)
                {
                    Return (QURB (Arg0))
                }

                Method (QURB, 1, Serialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WSIT [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    Return (Local1)
                }

                Method (WQBC, 1, NotSerialized)
                {
                    Return (QURC (Arg0))
                }

                Method (QURC, 1, NotSerialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WPOL [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    Local2 = DerefOf (Local0 [One])
                    Local3 = DerefOf (Local0 [0x04])
                    Debug = Local1
                    Concatenate (Local1, ",", Local1)
                    INP0 = 0xFA00
                    INP1 = 0x9320
                    INP2 = Zero
                    INP3 = Local2
                    INP4 = Zero
                    INP5 = Zero
                    WMIS ()
                    If ((RETS == Zero))
                    {
                        If ((Local3 == 0xFF))
                        {
                            Local3 = DerefOf (Local0 [0x03])
                            If ((Local3 == 0xC0))
                            {
                                Local3 = 0x2C
                            }

                            Local4 = DerefOf (SLSI [Local3])
                        }
                        Else
                        {
                            Local4 = DerefOf (SLSS [Local3])
                        }

                        Concatenate (Local1, DerefOf (Local4 [CURS]), Local6)
                    }
                    Else
                    {
                        Local4 = DerefOf (RESC [RETS])
                        Concatenate (Local1, Local4, Local6)
                    }

                    Return (Local6)
                }

                Method (WQBD, 1, NotSerialized)
                {
                    Return (QURD (Arg0))
                }

                Method (QURD, 1, NotSerialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WPOL [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    Return (Local1)
                }

                Method (WQBE, 1, NotSerialized)
                {
                    Return (QURE (Arg0))
                }

                Method (QURE, 1, NotSerialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WPAS [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    Local2 = DerefOf (Local0 [One])
                    Local3 = DerefOf (Local0 [0x04])
                    Debug = Local1
                    Concatenate (Local1, ",", Local1)
                    INP0 = 0xFA00
                    INP1 = 0x9320
                    INP2 = Zero
                    INP3 = Local2
                    INP4 = Zero
                    INP5 = Zero
                    WMIS ()
                    If ((RETS == Zero))
                    {
                        If ((Local3 == 0xFF))
                        {
                            Local3 = DerefOf (Local0 [0x03])
                            Local4 = DerefOf (SLSI [Local3])
                        }
                        Else
                        {
                            Local4 = DerefOf (SLSS [Local3])
                        }

                        Concatenate (Local1, DerefOf (Local4 [CURS]), Local6)
                    }
                    Else
                    {
                        Local4 = DerefOf (RESC [RETS])
                        Concatenate (Local1, Local4, Local6)
                    }

                    Return (Local6)
                }

                Method (WQBF, 1, NotSerialized)
                {
                    Return (QURF (Arg0))
                }

                Method (QURF, 1, NotSerialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WPAS [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    Return (Local1)
                }

                Method (WQBG, 1, NotSerialized)
                {
                    Return (QURG (Arg0))
                }

                Name (SMBD, Buffer (0x46){})
                Method (QURG, 1, NotSerialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WSMB [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    Local2 = DerefOf (Local0 [One])
                    Local3 = DerefOf (Local0 [0x02])
                    Debug = Local1
                    Concatenate (Local1, ",", Local1)
                    SMHA = Zero
                    SMTY = Local2
                    SMOF = Local3
                    SMLE = Zero
                    SMBR (0xFA00, 0xC001, Zero, Zero, Zero, Zero, 0xB2)
                    RETS = (OEAX & 0xFF00)
                    If ((RETS == Zero))
                    {
                        SMBD = SMWD /* \SMWD */
                        Local2 = SMLE /* \SMLE */
                        Concatenate (Local1, ToString (SMBD, Local2, Local3), Local6)
                    }
                    Else
                    {
                        Local4 = DerefOf (RESC [RETS])
                        Concatenate (Local1, Local4, Local6)
                    }

                    Return (Local6)
                }

                Method (WQBH, 1, NotSerialized)
                {
                    Return (QURH (Arg0))
                }

                Method (QURH, 1, NotSerialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WSMB [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    Return (Local1)
                }

                Method (WQBI, 1, NotSerialized)
                {
                    Return (QURI (Arg0))
                }

                Method (QURI, 1, NotSerialized)
                {
                    Local1 = "1.00"
                    Return (Local1)
                }

                Method (WQBJ, 1, NotSerialized)
                {
                    Return (QURJ (Arg0))
                }

                Method (QURJ, 1, Serialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WSIT [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    Local2 = DerefOf (Local0 [0x03])
                    Debug = Local1
                    If ((Local2 == 0xE0))
                    {
                        Local3 = DerefOf (Local0 [0x02])
                        If ((Local3 != One))
                        {
                            Concatenate (Local1, ",StringData", Local1)
                        }

                        Return (Local1)
                    }

                    If ((Local2 == 0x16))
                    {
                        If ((VTSI == 0x02))
                        {
                            Local2 = 0x19
                        }
                    }

                    Local5 = DerefOf (SLSI [Local2])
                    If ((Local2 == 0x24))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local2 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x0157, Zero, Zero, Zero, Zero, 0xB2)
                        Local3 = OESI /* \OESI */
                        If ((Local2 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        While (One)
                        {
                            Local4 = (Local3 & 0x0F)
                            If ((Local4 == 0x0F))
                            {
                                Break
                            }

                            Concatenate (Local1, ",", Local1)
                            Local6 = DerefOf (Local5 [Local4])
                            Concatenate (Local1, Local6, Local1)
                            Local3 >>= 0x04
                        }

                        Return (Local1)
                    }

                    If ((Local2 == 0x18))
                    {
                        Local3 = 0x02
                        Local5 = DerefOf (SLSI [Local2])
                        While (One)
                        {
                            Concatenate (Local1, ",", Local1)
                            Local4 = DerefOf (Local5 [Local3])
                            Concatenate (Local1, Local4, Local1)
                            If ((Local3 == 0x04))
                            {
                                Break
                            }

                            Local3++
                        }

                        Return (Local1)
                    }

                    Local3 = SizeOf (Local5)
                    Local4 = Zero
                    While ((Local4 < Local3))
                    {
                        Concatenate (Local1, ",", Local1)
                        Local6 = DerefOf (Local5 [Local4])
                        Concatenate (Local1, Local6, Local1)
                        Local4++
                    }

                    Return (Local1)
                }

                Method (WQBK, 1, NotSerialized)
                {
                    Return (QURK (Arg0))
                }

                Method (QURK, 1, Serialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WPOL [Local1])
                    Local1 = DerefOf (Local0 [Zero])
                    Local2 = DerefOf (Local0 [0x03])
                    Debug = Local1
                    If ((Local2 == 0xC0))
                    {
                        Local2 = 0x2C
                        Local3 = One
                        Local5 = DerefOf (SLSI [Local2])
                        While (One)
                        {
                            Concatenate (Local1, ",", Local1)
                            Local4 = DerefOf (Local5 [Local3])
                            Concatenate (Local1, Local4, Local1)
                            If ((Local3 == 0x0F))
                            {
                                Break
                            }

                            Local3++
                        }

                        Return (Local1)
                    }

                    Local5 = DerefOf (SLSI [Local2])
                    Local3 = SizeOf (Local5)
                    Local4 = Zero
                    While ((Local4 < Local3))
                    {
                        Concatenate (Local1, ",", Local1)
                        Local6 = DerefOf (Local5 [Local4])
                        Concatenate (Local1, Local6, Local1)
                        Local4++
                    }

                    Return (Local1)
                }

                Method (WMCA, 3, NotSerialized)
                {
                    If ((Arg1 == One))
                    {
                        Local0 = GETP (Arg2, Zero)
                        If (Local0)
                        {
                            Return (DerefOf (RESC [RETS]))
                        }

                        Local0 = FNDI (WSIT)
                        If (Local0)
                        {
                            Return (DerefOf (RESC [RETS]))
                        }

                        Return (QURA (SELI))
                    }

                    If ((Arg1 == 0x02))
                    {
                        Local0 = GETP (Arg2, Zero)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Local0 = FNDI (WSIT)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Local0 = CKPN (WSIT)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Local0 = CHKP (WSIT)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Return (SETA (SELI, SETI))
                    }

                    If ((Arg1 == 0x03))
                    {
                        Local0 = GETP (Arg2, Zero)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Return (SETE ())
                    }

                    Return (DerefOf (RESC [One]))
                }

                Method (SETA, 2, Serialized)
                {
                    Debug = "Set Bios Setting"
                    Local1 = Arg0
                    Local0 = DerefOf (WSIT [Local1])
                    Local1 = DerefOf (Local0 [One])
                    SMBR (0xFA00, 0x9320, Zero, 0x8001, Zero, Zero, 0xB2)
                    If (OECX)
                    {
                        If ((SVPA == Zero))
                        {
                            Return (0x80041062)
                        }
                    }

                    If ((Local1 == 0x8FFF))
                    {
                        Return (0x8004100C)
                    }

                    If ((Local1 == 0x9309))
                    {
                        CreateByteField (PRMN, One, PRMD)
                        Local0 = PRMD /* \_SB_.PCI0.AMW0.SETA.PRMD */
                        OWSN = Local0
                        If (Local0)
                        {
                            Local0 <<= 0x03
                            CreateField (PRMT, 0x0500, Local0, PRAD)
                            OWNS = Zero
                            OWNS = PRAD /* \_SB_.PCI0.AMW0.SETA.PRAD */
                        }

                        SMBR (0xFA00, 0x9389, Zero, Zero, Zero, Zero, 0xB2)
                        Return (Zero)
                    }

                    If ((Local1 >= 0x9300))
                    {
                        Local1 |= 0x80
                        INP0 = 0xFA00
                    }
                    Else
                    {
                        INP0 = 0xF400
                    }

                    INP1 = Local1
                    INP2 = Arg1
                    INP3 = Zero
                    INP4 = Zero
                    INP5 = Zero
                    If (ASBP (Local0))
                    {
                        WMIS ()
                    }
                    Else
                    {
                        Return (RETV) /* \_SB_.PCI0.AMW0.RETV */
                    }

                    ASAP (Local0)
                    Local0 = DerefOf (RESV [RETS])
                    Return (Local0)
                }

                Name (PRVB, 0xFFFFFFFF)
                Method (ASBP, 1, Serialized)
                {
                    Local0 = Arg0
                    Local3 = DerefOf (Local0 [0x08])
                    If ((Local3 == One))
                    {
                        INP2 |= 0x0800
                        Return (One)
                    }

                    If ((Local3 == 0x02))
                    {
                        If ((INP2 == One))
                        {
                            INP2 = 0x08
                        }

                        Return (One)
                    }

                    If ((Local3 == 0x03))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x015C, Zero, Zero, Zero, Zero, 0xB2)
                        Local4 = (OECX & 0xFFFF0000)
                        If ((Local1 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        Local5 = 0x02
                        If ((INP2 == One))
                        {
                            Local5 = 0x08
                        }

                        If ((INP2 == 0x02))
                        {
                            Local5 = 0x10
                        }

                        INP2 = (Local4 | Local5)
                        Return (One)
                    }

                    If ((Local3 == 0x04))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x015C, Zero, Zero, Zero, Zero, 0xB2)
                        Local4 = (OECX & 0x1F)
                        If ((Local1 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        If ((Local4 != 0x02))
                        {
                            RETV = 0x80041003
                            Return (Zero)
                        }

                        Local5 = INP2 /* \_SB_.PCI0.AMW0.INP2 */
                        Local5 <<= 0x10
                        INP2 = (Local5 | Local4)
                        Return (One)
                    }

                    If ((Local3 == 0x05))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x0101, Zero, Zero, Zero, Zero, 0xB2)
                        PRVB = OECX /* \OECX */
                        SMBR (0xF400, 0x0101, Zero, Zero, Zero, Zero, 0xB2)
                        If ((Local1 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        Return (One)
                    }

                    If ((Local3 == 0x06))
                    {
                        INP5 = Zero
                        Return (One)
                    }

                    If ((Local3 == 0x07))
                    {
                        Local1 = Zero
                        If ((INP2 == One))
                        {
                            Local1 = 0x21
                        }

                        If ((INP2 == 0x02))
                        {
                            Local1 = 0x41
                        }

                        INP2 = Local1
                        Return (One)
                    }

                    If ((Local3 == 0x08))
                    {
                        INP5 = 0x0300
                        Return (One)
                    }

                    If ((Local3 == 0x09))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x0157, Zero, Zero, Zero, Zero, 0xB2)
                        Local2 = OEDX /* \OEDX */
                        If ((Local1 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        Local1 = NOPR /* \_SB_.PCI0.AMW0.NOPR */
                        Local1--
                        If ((Local2 != Local1))
                        {
                            RETV = 0x80041008
                            Return (Zero)
                        }

                        Local6 = DerefOf (Local0 [0x03])
                        Local3 = DerefOf (SLSI [Local6])
                        Local6 = 0xFFFFFFFF
                        Local0 = Zero
                        While (Local2)
                        {
                            Local1 = 0xA0
                            Local1 *= Local0
                            Local1 += 0xA0
                            Local4 = Zero
                            While ((Local4 <= 0x07))
                            {
                                Local5 = DerefOf (Local3 [Local4])
                                If (CMPS (PRMT, Local1, Local5, Zero, SizeOf (Local5)))
                                {
                                    Local5 = DerefOf (MSKP [Local0])
                                    Local7 = Local0
                                    Local7 <<= 0x02
                                    Local6 &= Local5
                                    Local5 = Local4
                                    Local5 <<= Local7
                                    Local6 |= Local5
                                    Break
                                }

                                Local4++
                            }

                            If ((Local4 == 0x08))
                            {
                                RETV = 0x80041008
                                Return (Zero)
                            }

                            Local2--
                            Local0++
                        }

                        INP2 = Local6
                        Return (One)
                    }

                    If ((Local3 == 0x0A))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x0300, Zero, Zero, Zero, Zero, 0xB2)
                        Local2 = (OEDX & 0xE0)
                        Local4 = (OECX & 0x0F)
                        If ((Local1 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        If ((Local2 == 0x40))
                        {
                            Local1 = 0x1250
                            If ((INP2 == Zero))
                            {
                                Local1 = 0x3250
                            }
                        }
                        ElseIf ((Local2 == 0x60))
                        {
                            Local1 = 0x3270
                            If ((INP2 == One))
                            {
                                Local1 = 0x1270
                            }
                            ElseIf ((INP2 == 0x02))
                            {
                                Local1 = 0x2A70
                            }
                            ElseIf ((INP2 == 0x03))
                            {
                                Local1 = 0x2270
                            }
                        }
                        ElseIf ((Local2 == 0x80))
                        {
                            Local1 = 0x3290
                            If ((INP2 == One))
                            {
                                Local1 = 0x1290
                            }
                            ElseIf ((INP2 == 0x02))
                            {
                                Local1 = (Local4 | 0x3290)
                            }
                        }

                        INP2 = Local1
                        Return (One)
                    }

                    If ((Local3 == 0x0B))
                    {
                        If ((VTSI == 0x02))
                        {
                            If ((INP2 == One))
                            {
                                INP2 = 0x02
                            }
                        }
                    }

                    If ((Local3 == 0x0C))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        SMBR (0xF300, 0x0300, Zero, Zero, Zero, Zero, 0xB2)
                        Local2 = (OEDX & 0xE0)
                        Local4 = (OECX & 0x3000)
                        Local5 = (OECX & 0x0F)
                        If ((Local1 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        If ((Local4 == 0x3000))
                        {
                            If ((Local5 != Zero))
                            {
                                Local1 = 0x3291
                                If ((INP2 == One))
                                {
                                    Local1 = 0x3292
                                }
                                ElseIf ((INP2 == 0x02))
                                {
                                    Local1 = 0x3294
                                }
                                ElseIf ((INP2 == 0x03))
                                {
                                    Local1 = 0x3298
                                }

                                INP2 = Local1
                                Return (One)
                            }

                            RETV = 0x80041003
                            Return (Zero)
                        }

                        RETV = 0x8004100C
                        Return (Zero)
                    }

                    Return (One)
                }

                Method (ASAP, 1, Serialized)
                {
                    Local0 = Arg0
                    Local3 = DerefOf (Local0 [0x09])
                    If ((Local3 == 0x05))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local0 = (OEAX & 0xFF00)
                        SMBR (0xF400, 0x0101, PRVB, Zero, Zero, Zero, 0xB2)
                        If ((Local0 == Zero))
                        {
                            SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        }

                        Return (One)
                    }

                    Return (One)
                }

                Method (SETE, 0, Serialized)
                {
                    SMBR (0xFA00, 0x9320, Zero, 0x8001, Zero, Zero, 0xB2)
                    If (OECX)
                    {
                        If ((SVPA == Zero))
                        {
                            Return (0x80041062)
                        }
                    }

                    Local0 = KEYC /* \_SB_.PCI0.AMW0.KEYC */
                    CreateField (PRMT, Zero, 0x0500, INAM)
                    CreateByteField (PRMN, Zero, PRMD)
                    Local2 = PRMD /* \_SB_.PCI0.AMW0.SETE.PRMD */
                    If ((Local2 == SizeOf (Local0)))
                    {
                        If (CMPS (INAM, Zero, Local0, Zero, SizeOf (Local0)))
                        {
                            SMBR (0xFA00, 0x9310, Zero, Zero, Zero, Zero, 0xB2)
                            Return (Zero)
                        }
                    }

                    Return (0x80041008)
                }

                Method (WMCB, 3, NotSerialized)
                {
                    If ((Arg1 == One))
                    {
                        Local0 = GETP (Arg2, Zero)
                        If (Local0)
                        {
                            Return (DerefOf (RESC [RETS]))
                        }

                        Local0 = FNDI (WPOL)
                        If (Local0)
                        {
                            Return (DerefOf (RESC [RETS]))
                        }

                        Return (QURC (SELI))
                    }

                    If ((Arg1 == 0x02))
                    {
                        Local0 = GETP (Arg2, Zero)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Local0 = FNDI (WPOL)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Local0 = CKPN (WPOL)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Local0 = CHKP (WPOL)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Return (SETB (SELI, SETI))
                    }

                    Return (DerefOf (RESC [One]))
                }

                Method (SETB, 2, NotSerialized)
                {
                    Local0 = CHKL (WPOL)
                    If (Local0)
                    {
                        Return (Local0)
                    }

                    Local1 = Arg0
                    Local2 = Arg1
                    Local0 = DerefOf (WPOL [Local1])
                    Local1 = DerefOf (Local0 [One])
                    INP0 = 0xFA00
                    INP1 = 0x93A0
                    INP2 = Local2
                    INP3 = Local1
                    INP4 = Zero
                    INP5 = Zero
                    WMIS ()
                    Local0 = DerefOf (RESV [RETS])
                    Return (Local0)
                }

                Method (CHKL, 1, Serialized)
                {
                    If (SVPA)
                    {
                        Return (Zero)
                    }

                    Return (0x80041062)
                }

                Method (WMCC, 3, NotSerialized)
                {
                    If ((Arg1 == One))
                    {
                        Local0 = GETP (Arg2, Zero)
                        If (Local0)
                        {
                            Return (DerefOf (RESC [RETS]))
                        }

                        Local0 = FNDI (WPAS)
                        If (Local0)
                        {
                            Return (DerefOf (RESC [RETS]))
                        }

                        Return (QURE (SELI))
                    }

                    If ((Arg1 == 0x02))
                    {
                        Local0 = GETP (Arg2, Zero)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Local0 = FNDI (WPAS)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Local0 = CKPN (WPAS)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Return (SETC (SELI, SETI))
                    }

                    Return (DerefOf (RESC [One]))
                }

                Method (SETC, 2, NotSerialized)
                {
                    Local0 = CKLM (WPAS)
                    If (Local0)
                    {
                        Return (Local0)
                    }

                    Local1 = Arg0
                    Local2 = Arg1
                    Local0 = DerefOf (WPAS [Local1])
                    Local1 = DerefOf (Local0 [One])
                    INP0 = 0xFA00
                    INP1 = 0x93A0
                    INP2 = Local2
                    INP3 = Local1
                    INP4 = Zero
                    INP5 = Zero
                    PSDS ()
                    WMIS ()
                    Local0 = DerefOf (RESV [RETS])
                    Return (Local0)
                }

                Method (CKLM, 1, Serialized)
                {
                    If (SVPA)
                    {
                        Return (Zero)
                    }

                    Return (0x80041062)
                }

                Method (PSDS, 0, Serialized)
                {
                    CreateByteField (PRMN, One, PPM1)
                    Local1 = PPM1 /* \_SB_.PCI0.AMW0.PSDS.PPM1 */
                    PSD1 = Zero
                    PWS1 = Zero
                    If (Local1)
                    {
                        PWS1 = Local1
                        Local1 <<= 0x03
                        CreateField (PRMT, 0x0500, Local1, PRM1)
                        PSD1 = PRM1 /* \_SB_.PCI0.AMW0.PSDS.PRM1 */
                    }

                    CreateByteField (PRMN, 0x02, PPM2)
                    Local1 = PPM2 /* \_SB_.PCI0.AMW0.PSDS.PPM2 */
                    PSD2 = Zero
                    PWS2 = Zero
                    If (Local1)
                    {
                        PWS2 = Local1
                        Local1 <<= 0x03
                        CreateField (PRMT, 0x0A00, Local1, PRM2)
                        PSD2 = PRM2 /* \_SB_.PCI0.AMW0.PSDS.PRM2 */
                    }

                    CreateByteField (PRMN, 0x03, PPM3)
                    Local1 = PPM3 /* \_SB_.PCI0.AMW0.PSDS.PPM3 */
                    PSD3 = Zero
                    PWS3 = Zero
                    If (Local1)
                    {
                        PWS3 = Local1
                        Local1 <<= 0x03
                        CreateField (PRMT, 0x0F00, Local1, PRM3)
                        PSD3 = PRM3 /* \_SB_.PCI0.AMW0.PSDS.PRM3 */
                    }

                    CreateByteField (PRMN, 0x04, PPM4)
                    Local1 = PPM4 /* \_SB_.PCI0.AMW0.PSDS.PPM4 */
                    PSD4 = Zero
                    PWS4 = Zero
                    If (Local1)
                    {
                        PWS4 = Local1
                        Local1 <<= 0x03
                        CreateField (PRMT, 0x1400, Local1, PRM4)
                        PSD4 = PRM4 /* \_SB_.PCI0.AMW0.PSDS.PRM4 */
                    }
                }

                Method (WMCD, 3, NotSerialized)
                {
                    If ((Arg1 == One))
                    {
                        Local0 = GETP (Arg2, Zero)
                        If (Local0)
                        {
                            Return (DerefOf (RESC [RETS]))
                        }

                        Local0 = FNDI (WSMB)
                        If (Local0)
                        {
                            Return (DerefOf (RESC [RETS]))
                        }

                        Return (QURG (SELI))
                    }

                    If ((Arg1 == 0x02))
                    {
                        Local0 = GETP (Arg2, One)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Local0 = FNDI (WSMB)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Local0 = CKPN (WSMB)
                        If (Local0)
                        {
                            Return (Local0)
                        }

                        Return (SETD (SELI))
                    }

                    Return (DerefOf (RESC [One]))
                }

                Method (SETD, 1, NotSerialized)
                {
                    Local1 = Arg0
                    Local0 = DerefOf (WSMB [Local1])
                    Local2 = DerefOf (Local0 [One])
                    Local3 = DerefOf (Local0 [0x02])
                    Local4 = DerefOf (Local0 [0x03])
                    SMBR (0xFA00, 0x9320, Zero, 0x8001, Zero, Zero, 0xB2)
                    Local5 = OECX /* \OECX */
                    If (Local4)
                    {
                        If ((SRVA == Zero))
                        {
                            Return (0x80041062)
                        }
                        ElseIf (Local5)
                        {
                            If ((SVPA == Zero))
                            {
                                Return (0x80041062)
                            }
                        }
                    }
                    ElseIf (Local5)
                    {
                        If ((SVPA == Zero))
                        {
                            Return (0x80041062)
                        }
                    }

                    SMHA = Zero
                    SMLE = Zero
                    SMTY = Local2
                    SMOF = Local3
                    CreateByteField (PRMN, One, PRMD)
                    Local0 = PRMD /* \_SB_.PCI0.AMW0.SETD.PRMD */
                    If ((Local0 >= 0x40))
                    {
                        Return (0x80041008)
                    }

                    Local0 <<= 0x03
                    CreateField (PRMT, 0x0500, Local0, PRDD)
                    SMWD = Zero
                    SMWD = PRDD /* \_SB_.PCI0.AMW0.SETD.PRDD */
                    INP0 = 0xFA00
                    INP1 = 0xC000
                    INP2 = Zero
                    INP3 = Zero
                    INP4 = Zero
                    INP5 = Zero
                    WMIS ()
                    Local0 = RETS /* \_SB_.PCI0.AMW0.RETS */
                    If ((Local0 == Zero))
                    {
                        Local0 = SMOF /* \SMOF */
                        Local0 <<= 0x08
                        Local0 |= 0x05
                        Local0 <<= 0x08
                        Local0 |= SMTY /* \SMTY */
                        INP0 = 0xFA00
                        INP1 = 0x1100
                        INP2 = Local0
                        INP3 = SMLE /* \SMLE */
                        INP4 = SMHA /* \SMHA */
                        INP5 = Zero
                        WMIS ()
                    }

                    Local0 = DerefOf (RESV [RETS])
                    Return (Local0)
                }

                Method (WMDA, 3, NotSerialized)
                {
                    Local0 = GETP (Arg2, Zero)
                    If (Local0)
                    {
                        Return (Local0)
                    }

                    If ((Arg1 == One))
                    {
                        Return (CHGA ())
                    }

                    If ((Arg1 == 0x02))
                    {
                        Return (CHGB ())
                    }

                    Return (0x8004100C)
                }

                Method (CHGA, 0, Serialized)
                {
                    SMBR (0xFA00, 0x9320, Zero, 0x8001, Zero, Zero, 0xB2)
                    If (OECX)
                    {
                        If ((NOPR == 0x02))
                        {
                            Name (STR1, Buffer (0xA0){})
                            CreateField (PRMT, Zero, 0x0500, OSTR)
                            STR1 = OSTR /* \_SB_.PCI0.AMW0.CHGA.OSTR */
                            Local1 = DerefOf (MDSL [Zero])
                            Local2 = DerefOf (MDSL [One])
                            Local0 = Zero
                            CreateByteField (PRMN, Zero, PRMD)
                            Local3 = PRMD /* \_SB_.PCI0.AMW0.CHGA.PRMD */
                            If ((Local3 == SizeOf (Local1)))
                            {
                                If (CMPS (STR1, Zero, Local1, Zero, SizeOf (Local1)))
                                {
                                    Local0 = 0x02
                                }
                            }
                            ElseIf ((Local3 == SizeOf (Local2)))
                            {
                                If (CMPS (STR1, Zero, Local2, Zero, SizeOf (Local2)))
                                {
                                    Local0 = One
                                }
                            }

                            If ((Local0 == Zero))
                            {
                                Return (0x80041008)
                            }

                            CreateByteField (PRMN, One, STRS)
                            Local1 = STRS /* \_SB_.PCI0.AMW0.CHGA.STRS */
                            Local2 = (Local1 << 0x03)
                            CreateField (PRMT, 0x0500, Local2, PRMS)
                            PSD1 = Zero
                            PSD1 = PRMS /* \_SB_.PCI0.AMW0.CHGA.PRMS */
                            SMBR (0xFA00, 0x9330, Local1, Local0, Zero, Zero, 0xB2)
                            Local1 = (OEAX & 0xFF00)
                            If ((Local1 == Zero))
                            {
                                If ((Local0 == 0x02))
                                {
                                    SVPA = One
                                }
                                Else
                                {
                                    SVPA = Zero
                                }

                                Return (Zero)
                            }

                            Return (0x80045001)
                        }

                        Return (0x80041008)
                    }

                    Return (0x80045002)
                }

                Method (CHGB, 0, Serialized)
                {
                    If ((NOPR == 0x02))
                    {
                        Name (STR1, Buffer (0xA0){})
                        CreateField (PRMT, Zero, 0x0500, OSTR)
                        STR1 = OSTR /* \_SB_.PCI0.AMW0.CHGB.OSTR */
                        Local1 = DerefOf (MDSL [Zero])
                        Local2 = DerefOf (MDSL [One])
                        Local0 = Zero
                        CreateByteField (PRMN, Zero, PRMD)
                        Local3 = PRMD /* \_SB_.PCI0.AMW0.CHGB.PRMD */
                        If ((Local3 == SizeOf (Local1)))
                        {
                            If (CMPS (STR1, Zero, Local1, Zero, SizeOf (Local1)))
                            {
                                Local0 = One
                            }
                        }
                        ElseIf ((Local3 == SizeOf (Local2)))
                        {
                            If (CMPS (STR1, Zero, Local2, Zero, SizeOf (Local2)))
                            {
                                Local0 = 0x02
                            }
                        }

                        If ((Local0 == Zero))
                        {
                            Return (0x80041008)
                        }

                        CreateByteField (PRMN, One, STRS)
                        Local1 = STRS /* \_SB_.PCI0.AMW0.CHGB.STRS */
                        Local2 = (Local1 << 0x03)
                        CreateField (PRMT, 0x0500, Local2, PRMS)
                        PSD1 = Zero
                        PSD1 = PRMS /* \_SB_.PCI0.AMW0.CHGB.PRMS */
                        SMBR (0xFA00, 0x9331, Local1, Zero, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If ((Local1 == Zero))
                        {
                            If ((Local0 == One))
                            {
                                SRVA = One
                            }
                            Else
                            {
                                SRVA = Zero
                            }

                            Return (Zero)
                        }

                        Return (0x80045001)
                    }

                    Return (0x80041008)
                }

                Method (GETP, 2, Serialized)
                {
                    Debug = "Get Parameter"
                    NOPR = Zero
                    PRMT = Zero
                    PRMN = Zero
                    Local0 = Arg0
                    Local1 = SizeOf (Local0)
                    If ((Local1 == Zero))
                    {
                        RETS = 0x02
                        Return (0x80041008)
                    }

                    If ((ObjectType (Local0) != 0x02))
                    {
                        RETS = 0x02
                        Return (0x80041008)
                    }

                    Name (STR1, Buffer (SizeOf (Local0)){})
                    STR1 = Local0
                    Local2 = Zero
                    Local3 = Zero
                    Local4 = Zero
                    While ((Local2 < Local1))
                    {
                        Local5 = DerefOf (STR1 [Local2])
                        If ((Local5 == 0x3B))
                        {
                            If (Local3)
                            {
                                Local0 = NOPR /* \_SB_.PCI0.AMW0.NOPR */
                                PRMN [Local0] = Local3
                            }

                            NOPR++
                            Break
                        }

                        Local0 = One
                        If ((Arg1 == One))
                        {
                            If ((NOPR != Zero))
                            {
                                Local0 = Zero
                            }
                        }

                        If (((Local5 == 0x2C) && (Local0 == One)))
                        {
                            Local0 = NOPR /* \_SB_.PCI0.AMW0.NOPR */
                            PRMN [Local0] = Local3
                            Local4 += 0xA0
                            Local2++
                            Local3 = Zero
                            NOPR++
                        }
                        Else
                        {
                            Local0 = (Local4 + Local3)
                            PRMT [Local0] = Local5
                            Local2++
                            Local3++
                        }
                    }

                    If ((Local5 != 0x3B))
                    {
                        RETS = 0x02
                        Return (0x80041008)
                    }

                    RETS = Zero
                    Return (Zero)
                }

                Method (FNDI, 1, Serialized)
                {
                    Debug = "Find Item name"
                    SELI = 0xFF
                    Local0 = Arg0
                    Local1 = SizeOf (Local0)
                    Local4 = Zero
                    CreateField (PRMT, Zero, 0x0500, INAM)
                    CreateByteField (PRMN, Zero, PRMD)
                    Local2 = PRMD /* \_SB_.PCI0.AMW0.FNDI.PRMD */
                    While ((Local4 < Local1))
                    {
                        Local5 = DerefOf (Local0 [Local4])
                        Local6 = DerefOf (Local5 [Zero])
                        If ((Local2 == SizeOf (Local6)))
                        {
                            If (CMPS (INAM, Zero, Local6, Zero, SizeOf (Local6)))
                            {
                                SELI = Local4
                                RETS = Zero
                                Return (Zero)
                            }
                        }

                        Local4++
                    }

                    RETS = One
                    Return (0x8004100C)
                }

                Method (CKPN, 1, Serialized)
                {
                    Debug = "Check Parameter number"
                    Local0 = Arg0
                    Local1 = DerefOf (Local0 [SELI])
                    Local2 = DerefOf (Local1 [0x05])
                    If ((Local2 == 0xFF))
                    {
                        RETS = Zero
                        Return (Zero)
                    }

                    Local1 = NOPR /* \_SB_.PCI0.AMW0.NOPR */
                    Local1--
                    If ((Local1 != Local2))
                    {
                        RETS = 0x02
                        Return (0x80041008)
                    }

                    RETS = Zero
                    Return (Zero)
                }

                Method (CHKP, 1, Serialized)
                {
                    Debug = "Check Parameter"
                    Local0 = Arg0
                    Local1 = DerefOf (Local0 [SELI])
                    Local2 = DerefOf (Local1 [0x05])
                    Local3 = DerefOf (Local1 [0x03])
                    If ((Local3 >= 0xD0))
                    {
                        SETI = Zero
                        RETS = Zero
                        Return (Zero)
                    }

                    If ((Local3 == 0xC0))
                    {
                        Local3 = 0x2C
                    }

                    Local1 = DerefOf (SLSI [Local3])
                    Local4 = Zero
                    While ((Local4 <= Local2))
                    {
                        Local6 = Local4
                        Local6++
                        Local5 = 0xA0
                        Local5 *= Local6
                        Local0 = Zero
                        Local3 = SizeOf (Local1)
                        While ((Local0 < Local3))
                        {
                            Local6 = DerefOf (Local1 [Local0])
                            If (CMPS (PRMT, Local5, Local6, Zero, SizeOf (Local6)))
                            {
                                SETI = Local0
                                RETS = Zero
                                Return (Zero)
                            }

                            Local0++
                        }

                        Local4++
                    }

                    RETS = 0x02
                    Return (0x80041008)
                }

                Method (CMPS, 5, Serialized)
                {
                    Local0 = Zero
                    Local1 = Arg4
                    Local2 = Arg1
                    Local3 = Arg3
                    Name (STR1, Buffer (SizeOf (Arg0)){})
                    STR1 = Arg0
                    Name (STR2, Buffer (SizeOf (Arg2)){})
                    STR2 = Arg2
                    Local1--
                    While ((Local0 <= Local1))
                    {
                        Local4 = DerefOf (STR1 [Local2])
                        Local5 = DerefOf (STR2 [Local3])
                        If ((Local4 != Local5))
                        {
                            Return (Zero)
                        }

                        Local0++
                        Local2++
                        Local3++
                    }

                    Return (One)
                }

                Method (WMIS, 0, Serialized)
                {
                    RETV = 0xFFFFFFFF
                    RETS = 0xFFFFFFFF
                    CURS = 0xFFFFFFFF
                    RTN0 = 0xFFFFFFFF
                    RTN1 = 0xFFFFFFFF
                    RTN2 = 0xFFFFFFFF
                    RTN3 = 0xFFFFFFFF
                    RTN4 = 0xFFFFFFFF
                    RTN5 = 0xFFFFFFFF
                    Local0 = One
                    If ((INP0 != 0xFA00))
                    {
                        SMBR (0xF100, Zero, Zero, Zero, Zero, Zero, 0xB2)
                        Local0 = (OEAX & 0xFF00)
                    }

                    SMBR (INP0, INP1, INP2, INP3, INP4, INP5, 0xB2)
                    Local1 = (OEAX & 0xFF00)
                    Local2 = One
                    CURS = OECX /* \OECX */
                    RTN0 = OEAX /* \OEAX */
                    RTN1 = OEBX /* \OEBX */
                    RTN2 = OECX /* \OECX */
                    RTN3 = OEDX /* \OEDX */
                    RTN4 = OESI /* \OESI */
                    RTN5 = OEDI /* \OEDI */
                    If ((Local0 == Zero))
                    {
                        SMBR (0xF200, Zero, Zero, Zero, Zero, Zero, 0xB2)
                    }

                    RETV = (Local1 >> 0x08)
                    Local2 = 0x07
                    If ((Local1 == Zero))
                    {
                        Local2 = Zero
                    }
                    ElseIf ((Local1 == 0x8000))
                    {
                        Local2 = One
                    }
                    ElseIf ((Local1 == 0x8300))
                    {
                        Local2 = 0x02
                    }
                    ElseIf ((Local1 == 0x8400))
                    {
                        Local2 = 0x03
                    }
                    ElseIf ((Local1 == 0x8B00))
                    {
                        Local2 = 0x04
                    }
                    ElseIf ((Local1 == 0x8A00))
                    {
                        Local2 = 0x05
                    }

                    RETS = Local2
                }

                Name (WSIT, Package (0x46)
                {
                    Package (0x0B)
                    {
                        "SystemBiosVersion", 
                        0xF000, 
                        One, 
                        0xE0, 
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "ECVersion", 
                        0xF001, 
                        One, 
                        0xE0, 
                        0xFF, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "AMTSetupPrompt", 
                        0x0151, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "Language", 
                        0x0140, 
                        0x03, 
                        0x03, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "SecureBoot", 
                        0x9300, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "TPM", 
                        0x9301, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "ClearTPMOwner", 
                        0x9382, 
                        0x02, 
                        0x2D, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "HideTPM", 
                        0x9303, 
                        0x03, 
                        0x29, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "BootMenu", 
                        0x0167, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "WakeUpOnLAN", 
                        0x0700, 
                        0x03, 
                        0x28, 
                        0x07, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "WakeUpOnLANOnBattery", 
                        0x0703, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "WakeOnKeyboard", 
                        0x0137, 
                        0x03, 
                        0x20, 
                        0x03, 
                        One, 
                        Zero, 
                        0x02, 
                        0x02, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "CriticalBatteryWakeUp", 
                        0x012F, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "PanelOpenPowerOn", 
                        0x010D, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "DynamicCPUFrequencyMode", 
                        0x0132, 
                        0x03, 
                        0x14, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "CoreMultiProcessing", 
                        0x014A, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "IntelTurboBoostsTechnology", 
                        0x0160, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "IntelDisplayPowerManagement", 
                        0x030F, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "eSATA", 
                        0x015A, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "SATAInterfaceSetting", 
                        0x0406, 
                        0x03, 
                        0x06, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "KeyboardBacklightControlMode", 
                        0x015C, 
                        0x03, 
                        0x25, 
                        0xFF, 
                        One, 
                        Zero, 
                        0x03, 
                        0x03, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "BacklightLightingTime", 
                        0x015C, 
                        0x03, 
                        0x26, 
                        0xFF, 
                        One, 
                        Zero, 
                        0x04, 
                        0x04, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "BatterySaveMode", 
                        0x0101, 
                        0x03, 
                        0x10, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "ProcessingSpeed", 
                        0x0102, 
                        0x03, 
                        0x11, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        0x05, 
                        0x05, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "CPUSleepMode", 
                        0x0104, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        0x05, 
                        0x05, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "LCDBrightness", 
                        0x0115, 
                        0x03, 
                        0x12, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        0x05, 
                        0x05, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "CoolingMethod", 
                        0x0122, 
                        0x03, 
                        0x13, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        0x05, 
                        0x05, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "PCIExpressLinkASPM", 
                        0x0143, 
                        0x03, 
                        0x21, 
                        0x04, 
                        One, 
                        0x06, 
                        Zero, 
                        0x06, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "ExecuteDisableBitCapability", 
                        0x013F, 
                        0x03, 
                        0x02, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "VirtualizationTechnology", 
                        0x014B, 
                        0x03, 
                        0x16, 
                        0x02, 
                        One, 
                        Zero, 
                        0x0B, 
                        0x0B, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "TrustedExecutionTechnology", 
                        0x0159, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "IntelAT", 
                        0x9304, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "IntelATSuspend", 
                        0x9305, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "IntelRapidStartTechnology", 
                        0x0705, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "RapidStartEntryAfter", 
                        0x9306, 
                        0x03, 
                        0x2A, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "BeepSound", 
                        0x014D, 
                        0x03, 
                        0x17, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "SleepAndCharge", 
                        0x0150, 
                        0x03, 
                        0x22, 
                        0x05, 
                        One, 
                        Zero, 
                        0x07, 
                        0x07, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "SystemOnCDPChargeMode", 
                        0x0150, 
                        0x03, 
                        0x23, 
                        0x06, 
                        One, 
                        0x08, 
                        Zero, 
                        0x08, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "USBPowerInSleepMode", 
                        0x016C, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "USBSleepAndMusic", 
                        0x015E, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "USBLegacyEmulation", 
                        0x050C, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "USBMemoryBIOSSupportType", 
                        0x0511, 
                        0x03, 
                        0x07, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "ChangeBootOrder", 
                        0x0157, 
                        0x03, 
                        0x24, 
                        0xFF, 
                        0xFF, 
                        Zero, 
                        0x09, 
                        0x09, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "BuiltInLAN", 
                        0x0130, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "WirelessLAN", 
                        0x0152, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "AutoWirelessLANRFSwitching", 
                        0x0168, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "WirelessWAN", 
                        0x0161, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "WiMAX", 
                        0x0163, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "Bluetooth", 
                        0x0162, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "InternalPointingDevice", 
                        0x8FFF, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "WebCamera", 
                        0x0158, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "SDHostController", 
                        0x013C, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "FingerprintSensor", 
                        0x016A, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "InternalUSB30Controller", 
                        0x0169, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "MemoryPerformanceMode", 
                        0x0141, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "SATAControllerMode", 
                        0x0405, 
                        0x03, 
                        0x18, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "BootMode", 
                        0x016B, 
                        0x03, 
                        0x05, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "PowerOnDisplay", 
                        0x0300, 
                        0x03, 
                        0x27, 
                        0xFF, 
                        One, 
                        Zero, 
                        0x0A, 
                        0x0A, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "BootUpNumlockStatus", 
                        0x0164, 
                        0x03, 
                        0x04, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "FunctionButton", 
                        0x0144, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "FunctionButtonBeep", 
                        0x0145, 
                        0x03, 
                        0x15, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "HDMI-CEC", 
                        0x0154, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "RemotePowerOnOff", 
                        0x0155, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "FunctionKeysMode", 
                        0x0522, 
                        0x03, 
                        0x08, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "ShowTPMConfirmationMessage", 
                        0x9307, 
                        0x03, 
                        Zero, 
                        Zero, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "ShowHDDPasswordMenu", 
                        0x9308, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "OwnerString", 
                        0x9309, 
                        0x03, 
                        0xE0, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "PowerOnByAc", 
                        0x930A, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "ExtendedBootDisplayDevice", 
                        0x0300, 
                        0x03, 
                        0x2E, 
                        0xFF, 
                        One, 
                        0x0C, 
                        0x0C, 
                        0x0C, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x0B)
                    {
                        "Reserved", 
                        Zero, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
                Name (WPOL, Package (0x2C)
                {
                    Package (0x08)
                    {
                        "RegisterPassword", 
                        One, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeletePassword", 
                        0x02, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "ChangePassword", 
                        0x03, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "NeverLockPassword", 
                        0x04, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "NeverForceRegisterPassword", 
                        0x17, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "MaxTryCount", 
                        0x08, 
                        0x03, 
                        0x2C, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "MinimumPasswordLength", 
                        0x0C, 
                        0x03, 
                        0xC0, 
                        0xFF, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "BIOSSetup", 
                        0x10, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "BIOSUpdate", 
                        0x11, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "ViewMode", 
                        0x12, 
                        0x03, 
                        Zero, 
                        Zero, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "RegisterHDDPassword", 
                        0x05, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "ChangeHDDPassword", 
                        0x13, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "HDDAutoUnlockS4", 
                        0x07, 
                        0x03, 
                        Zero, 
                        Zero, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "HDDAutoUnlockS5", 
                        0x06, 
                        0x03, 
                        Zero, 
                        Zero, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "ActivateTPM", 
                        0x14, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "OwnerClearTPM", 
                        0x15, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "BluetoothAuthentication", 
                        0x0126, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "FingerprintAuthentication", 
                        0x012C, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "CreateToken", 
                        0x0211, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "RemoveToken", 
                        0x0212, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceSerialPort", 
                        0x30, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceODD", 
                        0x35, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "Device2ndHDD", 
                        0x36, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceBluetooth", 
                        0x37, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceModem", 
                        0x38, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceUSB", 
                        0x39, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DevicePCCard", 
                        0x3B, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceSDCard", 
                        0x3C, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceIEEE1394", 
                        0x3D, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceExpresscard", 
                        0x3E, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceWiredLAN", 
                        0x0112, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceWirelessLAN", 
                        0x0113, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceWirelessWAN", 
                        0x0114, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceMediaSlot", 
                        0x0115, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceESATA", 
                        0x0117, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceWebcam", 
                        0x0118, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "DeviceSmartCard", 
                        0x012D, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "Boot1stHDD", 
                        0x28, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "Boot2ndHDD", 
                        0x29, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "BootODD", 
                        0x2A, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "BootFDD", 
                        0x2B, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "BootLAN", 
                        0x2C, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "BootUSB", 
                        0x2E, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "BootESATA", 
                        0x2F, 
                        0x03, 
                        One, 
                        One, 
                        One, 
                        One, 
                        Zero
                    }
                })
                Name (WPAS, Package (0x04)
                {
                    Package (0x08)
                    {
                        "UserPassword", 
                        0x8000, 
                        0x03, 
                        0x09, 
                        0xFF, 
                        0x02, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "SupervisorPassword", 
                        0x8001, 
                        0x03, 
                        0x09, 
                        0xFF, 
                        0x02, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "UserOnlyHDDPassword", 
                        0x8002, 
                        0x03, 
                        0x09, 
                        0xFF, 
                        0x02, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x08)
                    {
                        "Master+UserHDDPassword", 
                        0x8003, 
                        0x03, 
                        0x09, 
                        0xFF, 
                        0x04, 
                        Zero, 
                        Zero
                    }
                })
                Name (WSMB, Package (0x10)
                {
                    Package (0x07)
                    {
                        "SystemManufacturer", 
                        One, 
                        0x04, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "SystemProductName", 
                        One, 
                        0x05, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "SystemVersion", 
                        One, 
                        0x06, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "SystemSerialNumber", 
                        One, 
                        0x07, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "SystemSkuNumber", 
                        One, 
                        0x19, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "SystemFamily", 
                        One, 
                        0x1A, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "BoardManufacturer", 
                        0x02, 
                        0x04, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "BoardProduct", 
                        0x02, 
                        0x05, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "BoardVersion", 
                        0x02, 
                        0x06, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "BoardSerialNumber", 
                        0x02, 
                        0x07, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "BoardAssetTag", 
                        0x02, 
                        0x08, 
                        Zero, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "ChassisManufacturer", 
                        0x03, 
                        0x04, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "ChassisVersion", 
                        0x03, 
                        0x06, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "ChassisSerialNumber", 
                        0x03, 
                        0x07, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "ChassisAssetTagNumber", 
                        0x03, 
                        0x08, 
                        Zero, 
                        Zero, 
                        One, 
                        Zero
                    }, 

                    Package (0x07)
                    {
                        "OEMStrings", 
                        0x0B, 
                        0x04, 
                        One, 
                        Zero, 
                        One, 
                        Zero
                    }
                })
                Name (SLSI, Package (0x30)
                {
                    Package (0x02)
                    {
                        "Enable", 
                        "Disable"
                    }, 

                    Package (0x02)
                    {
                        "Disable", 
                        "Enable"
                    }, 

                    Package (0x02)
                    {
                        "NotAvailable", 
                        "Available"
                    }, 

                    Package (0x02)
                    {
                        "English", 
                        "French"
                    }, 

                    Package (0x02)
                    {
                        "OFF", 
                        "ON"
                    }, 

                    Package (0x02)
                    {
                        "CSMBoot", 
                        "UEFIBoot"
                    }, 

                    Package (0x02)
                    {
                        "Performance", 
                        "BatteryLife"
                    }, 

                    Package (0x02)
                    {
                        "HDD", 
                        "FDD"
                    }, 

                    Package (0x02)
                    {
                        "StandardF1F12mode", 
                        "SpecialFunctionMode"
                    }, 

                    Package (0x02)
                    {
                        "NotRegistered", 
                        "Registered"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x03)
                    {
                        "UserSetting", 
                        "LowPower", 
                        "FullPower"
                    }, 

                    Package (0x02)
                    {
                        "Low", 
                        "High"
                    }, 

                    Package (0x03)
                    {
                        "Bright", 
                        "SemiBright", 
                        "SuperBright"
                    }, 

                    Package (0x03)
                    {
                        "CoolingOptimized", 
                        "MaximumPerformance", 
                        "BatteryOptimized"
                    }, 

                    Package (0x03)
                    {
                        "DynamicallySwitchable", 
                        "AlwaysHigh", 
                        "AlwaysLow"
                    }, 

                    Package (0x04)
                    {
                        "OFF", 
                        "Low", 
                        "Medium", 
                        "High"
                    }, 

                    Package (0x04)
                    {
                        "Disable", 
                        "VT-xAndVT-d", 
                        "VT-xOnly", 
                        "VT-dOnly"
                    }, 

                    Package (0x04)
                    {
                        "OFF", 
                        "Low", 
                        "Medium", 
                        "High"
                    }, 

                    Package (0x06)
                    {
                        "Reserved", 
                        "Reserved", 
                        "IDEMode", 
                        "OSAHCIMode", 
                        "BIOSAHCIMode", 
                        "Reserved"
                    }, 

                    Package (0x02)
                    {
                        "Disable", 
                        "VT-xOnly"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }, 

                    Package (0x02)
                    {
                        "Disable", 
                        "Enable"
                    }, 

                    Package (0x03)
                    {
                        "Disable", 
                        "Enable", 
                        "Auto"
                    }, 

                    Package (0x03)
                    {
                        "Disable", 
                        "AutoMode", 
                        "Alternate"
                    }, 

                    Package (0x02)
                    {
                        "Disable", 
                        "Enable"
                    }, 

                    Package (0x08)
                    {
                        "FDD", 
                        "HDD/SSD", 
                        "ODD", 
                        "LAN", 
                        "USBMemory", 
                        "HDD2/SSD2", 
                        "eSATAHDD", 
                        "USBODD"
                    }, 

                    Package (0x03)
                    {
                        "TIMER", 
                        "ON", 
                        "OFF"
                    }, 

                    Package (0x3D)
                    {
                        "00", 
                        "01", 
                        "02", 
                        "03", 
                        "04", 
                        "05", 
                        "06", 
                        "07", 
                        "08", 
                        "09", 
                        "10", 
                        "11", 
                        "12", 
                        "13", 
                        "14", 
                        "15", 
                        "16", 
                        "17", 
                        "18", 
                        "19", 
                        "20", 
                        "21", 
                        "22", 
                        "23", 
                        "24", 
                        "25", 
                        "26", 
                        "27", 
                        "28", 
                        "29", 
                        "30", 
                        "31", 
                        "32", 
                        "33", 
                        "34", 
                        "35", 
                        "36", 
                        "37", 
                        "38", 
                        "39", 
                        "40", 
                        "41", 
                        "42", 
                        "43", 
                        "44", 
                        "45", 
                        "46", 
                        "47", 
                        "48", 
                        "49", 
                        "50", 
                        "51", 
                        "52", 
                        "53", 
                        "54", 
                        "55", 
                        "56", 
                        "57", 
                        "58", 
                        "59", 
                        "60"
                    }, 

                    Package (0x03)
                    {
                        "Auto-Selected", 
                        "SystemLCDOnly", 
                        "ExtendedDisplay"
                    }, 

                    Package (0x02)
                    {
                        "Disable", 
                        "Enable"
                    }, 

                    Package (0x02)
                    {
                        "No", 
                        "Yes"
                    }, 

                    Package (0x05)
                    {
                        "Immediately", 
                        "10minutes", 
                        "2hours", 
                        "5hours", 
                        "24hours"
                    }, 

                    Package (0x02)
                    {
                        "False", 
                        "True"
                    }, 

                    Package (0x10)
                    {
                        "UnLimited", 
                        "01", 
                        "02", 
                        "03", 
                        "04", 
                        "05", 
                        "06", 
                        "07", 
                        "08", 
                        "09", 
                        "10", 
                        "11", 
                        "12", 
                        "13", 
                        "14", 
                        "15"
                    }, 

                    Package (0x01)
                    {
                        "Execute"
                    }, 

                    Package (0x04)
                    {
                        "AnalogRGB", 
                        "DisplayPort", 
                        "HDMI", 
                        "DVI"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }
                })
                Name (SLSS, Package (0x0A)
                {
                    Package (0x02)
                    {
                        "Enabled", 
                        "Disabled"
                    }, 

                    Package (0x02)
                    {
                        "Disabled", 
                        "Enabled"
                    }, 

                    Package (0x04)
                    {
                        "Disabled", 
                        "VT-xAndVT-d", 
                        "VT-xOnly", 
                        "VT-dOnly"
                    }, 

                    Package (0x02)
                    {
                        "Disabled", 
                        "Enabled"
                    }, 

                    Package (0x03)
                    {
                        "Disabled", 
                        "Enabled", 
                        "Auto"
                    }, 

                    Package (0x03)
                    {
                        "Disabled", 
                        "AutoMode", 
                        "20AMode"
                    }, 

                    Package (0x02)
                    {
                        "Disabled", 
                        "Enabled"
                    }, 

                    Package (0x02)
                    {
                        "Disabled", 
                        "Enabled"
                    }, 

                    Package (0x02)
                    {
                        "Disabled", 
                        "VT-xOnly"
                    }, 

                    Package (0x02)
                    {
                        "Dummy", 
                        "Dummy"
                    }
                })
                Name (RESC, Package (0x08)
                {
                    "Success", 
                    "NotSupported", 
                    "InputDataError", 
                    "WriteProtectError", 
                    "NotAuthentication", 
                    "AuthenticationFailure", 
                    "PasswordNotRegistered", 
                    "UnKnownError"
                })
                Name (RESV, Package (0x08)
                {
                    Zero, 
                    0x8004100C, 
                    0x80041008, 
                    0x80041003, 
                    0x80041062, 
                    0x80045001, 
                    0x80045002, 
                    0x8004500F
                })
                Name (MDSL, Package (0x02)
                {
                    "Start", 
                    "End"
                })
                Name (KEYC, "Execute")
                Name (MSKP, Package (0x08)
                {
                    0xFFFFFFF0, 
                    0xFFFFFF0F, 
                    0xFFFFF0FF, 
                    0xFFFF0FFF, 
                    0xFFF0FFFF, 
                    0xFF0FFFFF, 
                    0xF0FFFFFF, 
                    0x0FFFFFFF
                })
                Name (WQAA, Buffer (0x0E2F)
                {
                    /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                    /* 0008 */  0x1F, 0x0E, 0x00, 0x00, 0x8A, 0x72, 0x00, 0x00,  // .....r..
                    /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                    /* 0018 */  0x98, 0xCF, 0xB7, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                    /* 0020 */  0x10, 0x23, 0x10, 0x0A, 0x0D, 0x21, 0x02, 0x0B,  // .#...!..
                    /* 0028 */  0x83, 0x50, 0x4C, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PL...EA
                    /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                    /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                    /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                    /* 0048 */  0x31, 0x0E, 0x88, 0x14, 0x40, 0x48, 0x26, 0x84,  // 1...@H&.
                    /* 0050 */  0x44, 0x00, 0x53, 0x21, 0x70, 0x84, 0xA0, 0x5F,  // D.S!p.._
                    /* 0058 */  0x01, 0x08, 0x1D, 0xA2, 0xC9, 0xA0, 0x00, 0xA7,  // ........
                    /* 0060 */  0x08, 0x22, 0x28, 0x55, 0xC0, 0x82, 0x8E, 0xA0,  // ."(U....
                    /* 0068 */  0x68, 0x01, 0xA6, 0xC7, 0xA0, 0x19, 0x54, 0x08,  // h.....T.
                    /* 0070 */  0x22, 0x20, 0x5B, 0x14, 0x20, 0x5B, 0x80, 0x65,  // " [. [.e
                    /* 0078 */  0x01, 0xB6, 0x21, 0xA4, 0x7B, 0x18, 0x54, 0xE4,  // ..!.{.T.
                    /* 0080 */  0x18, 0x50, 0x62, 0xC6, 0x80, 0xD2, 0x39, 0x05,  // .Pb...9.
                    /* 0088 */  0xD9, 0x04, 0xD6, 0x18, 0x0A, 0x45, 0xD1, 0x34,  // .....E.4
                    /* 0090 */  0xA2, 0x24, 0x38, 0xA8, 0x23, 0x88, 0x10, 0xBC,  // .$8.#...
                    /* 0098 */  0x5C, 0x01, 0x92, 0x27, 0x20, 0xCD, 0xC3, 0x90,  // \..' ...
                    /* 00A0 */  0xF5, 0x41, 0x68, 0x08, 0x6C, 0x04, 0x3C, 0x9C,  // .Ah.l.<.
                    /* 00A8 */  0x04, 0x10, 0x26, 0x7B, 0x99, 0x8A, 0x03, 0x83,  // ..&{....
                    /* 00B0 */  0xD2, 0x00, 0x22, 0x39, 0x43, 0x45, 0x01, 0xDB,  // .."9CE..
                    /* 00B8 */  0xEB, 0x44, 0x64, 0x72, 0x9C, 0x54, 0x12, 0x1C,  // .Ddr.T..
                    /* 00C0 */  0x6A, 0x94, 0x96, 0x28, 0xC0, 0xFC, 0xC8, 0x34,  // j..(...4
                    /* 00C8 */  0x91, 0x63, 0x3B, 0xBD, 0x23, 0x0E, 0xC9, 0xA4,  // .c;.#...
                    /* 00D0 */  0x0D, 0x05, 0x35, 0x74, 0x4F, 0xEB, 0xA4, 0xAC,  // ..5tO...
                    /* 00D8 */  0x1D, 0x51, 0x83, 0x32, 0x4C, 0x02, 0x8F, 0x22,  // .Q.2L.."
                    /* 00E0 */  0xB2, 0xD1, 0x38, 0x34, 0x76, 0x18, 0x9E, 0x78,  // ..84v..x
                    /* 00E8 */  0xB0, 0x83, 0x38, 0x8C, 0x43, 0x36, 0x81, 0x27,  // ..8.C6.'
                    /* 00F0 */  0x74, 0xA2, 0x07, 0xF9, 0x4A, 0x50, 0x3C, 0xAA,  // t...JP<.
                    /* 00F8 */  0x30, 0x9A, 0x83, 0x22, 0xF8, 0x47, 0x8D, 0x1D,  // 0..".G..
                    /* 0100 */  0x53, 0xD8, 0xE3, 0x8F, 0x7D, 0x14, 0xA7, 0x51,  // S...}..Q
                    /* 0108 */  0xF8, 0x60, 0x75, 0x06, 0xF0, 0xB8, 0x12, 0x34,  // .`u....4
                    /* 0110 */  0x3A, 0x60, 0x0D, 0xC7, 0x53, 0x2B, 0xE8, 0x22,  // :`..S+."
                    /* 0118 */  0xA0, 0x29, 0xF6, 0x39, 0x06, 0xA1, 0x84, 0xF8,  // .).9....
                    /* 0120 */  0xFF, 0x87, 0x0A, 0x19, 0xD3, 0x90, 0x3D, 0x83,  // ......=.
                    /* 0128 */  0x6B, 0xC0, 0x1A, 0x04, 0x4A, 0x06, 0x84, 0xB0,  // k...J...
                    /* 0130 */  0x82, 0x1F, 0x9D, 0x09, 0xEC, 0x5E, 0x80, 0x31,  // .....^.1
                    /* 0138 */  0x01, 0xCA, 0xC6, 0x23, 0x71, 0x02, 0xB4, 0x1D,  // ...#q...
                    /* 0140 */  0x05, 0x84, 0xF2, 0x2A, 0xD0, 0x16, 0x88, 0x80,  // ...*....
                    /* 0148 */  0xA2, 0xB0, 0x51, 0x19, 0xF4, 0x05, 0x21, 0xCA,  // ..Q...!.
                    /* 0150 */  0x69, 0x9D, 0x51, 0xD4, 0x50, 0x46, 0xA9, 0x51,  // i.Q.PF.Q
                    /* 0158 */  0x80, 0x33, 0x01, 0xDE, 0xE0, 0x84, 0x14, 0x21,  // .3.....!
                    /* 0160 */  0x4A, 0xF4, 0xE3, 0x09, 0x11, 0xAB, 0xFD, 0x53,  // J......S
                    /* 0168 */  0x04, 0x73, 0x70, 0x16, 0x60, 0x91, 0x46, 0x83,  // .sp.`.F.
                    /* 0170 */  0x3A, 0x25, 0xF8, 0x3C, 0xE0, 0x89, 0x9D, 0xD4,  // :%.<....
                    /* 0178 */  0x63, 0x84, 0xE7, 0x1B, 0xE4, 0x1C, 0xCF, 0xEC,  // c.......
                    /* 0180 */  0x49, 0xE1, 0x41, 0xC0, 0x43, 0x66, 0x37, 0x04,  // I.A.Cf7.
                    /* 0188 */  0xB3, 0xEB, 0x64, 0x00, 0xC1, 0x35, 0xA0, 0x06,  // ..d..5..
                    /* 0190 */  0xFA, 0x40, 0xC0, 0xC6, 0x19, 0x0E, 0x33, 0x44,  // .@....3D
                    /* 0198 */  0x4F, 0x37, 0xDC, 0x09, 0x1C, 0x22, 0x03, 0xF4,  // O7..."..
                    /* 01A0 */  0x21, 0xC3, 0x67, 0x01, 0xDC, 0xDC, 0x4E, 0xE6,  // !.g...N.
                    /* 01A8 */  0x41, 0xE0, 0x95, 0xA2, 0xD9, 0x4B, 0x80, 0x0E,  // A....K..
                    /* 01B0 */  0x10, 0x3E, 0x65, 0xB0, 0x61, 0x33, 0x02, 0xCB,  // .>e.a3..
                    /* 01B8 */  0x1F, 0x04, 0x6A, 0x64, 0x86, 0xF6, 0x78, 0x5F,  // ..jd..x_
                    /* 01C0 */  0x36, 0x0C, 0xF9, 0x7C, 0x70, 0x58, 0x4C, 0xEC,  // 6..|pXL.
                    /* 01C8 */  0x69, 0x83, 0x8E, 0x07, 0xFC, 0x27, 0x80, 0xE7,  // i....'..
                    /* 01D0 */  0x0B, 0xDF, 0x16, 0x3C, 0x5F, 0x0F, 0x42, 0xA7,  // ...<_.B.
                    /* 01D8 */  0x0A, 0x0D, 0x1C, 0x37, 0x10, 0x43, 0x3F, 0x16,  // ...7.C?.
                    /* 01E0 */  0x1C, 0xC6, 0x69, 0xF8, 0xDE, 0xE1, 0x23, 0x02,  // ..i...#.
                    /* 01E8 */  0x96, 0xC0, 0xB1, 0x21, 0x64, 0xE1, 0x70, 0x42,  // ...!d.pB
                    /* 01F0 */  0xC7, 0xEE, 0x23, 0x05, 0x3F, 0x4D, 0xB0, 0x33,  // ..#.?M.3
                    /* 01F8 */  0xC1, 0x69, 0x3C, 0x07, 0x78, 0x38, 0xFF, 0xFF,  // .i<.x8..
                    /* 0200 */  0xB3, 0xF2, 0x31, 0xC5, 0xA3, 0x83, 0x0F, 0x88,  // ..1.....
                    /* 0208 */  0xF7, 0x3E, 0x6F, 0x32, 0x82, 0xD3, 0x35, 0xA0,  // .>o2..5.
                    /* 0210 */  0x8F, 0x2A, 0xB8, 0x23, 0x05, 0x5C, 0x8F, 0x53,  // .*.#.\.S
                    /* 0218 */  0x23, 0x27, 0x0A, 0xD8, 0xE7, 0x02, 0xF0, 0x1D,  // #'......
                    /* 0220 */  0x5B, 0x70, 0x27, 0x19, 0x78, 0x07, 0x0E, 0xCC,  // [p'.x...
                    /* 0228 */  0x41, 0x86, 0x0F, 0x07, 0xC6, 0x41, 0x06, 0x78,  // A....A.x
                    /* 0230 */  0x1C, 0x19, 0x3C, 0x04, 0x7E, 0xB2, 0xF0, 0x10,  // ..<.~...
                    /* 0238 */  0xF8, 0x00, 0x5A, 0x9D, 0x20, 0x51, 0x3A, 0x2D,  // ..Z. Q:-
                    /* 0240 */  0xE4, 0x81, 0x07, 0x4C, 0xA3, 0xE0, 0x81, 0xCE,  // ...L....
                    /* 0248 */  0x36, 0x54, 0xF4, 0xF3, 0x40, 0x11, 0x60, 0x50,  // 6T..@.`P
                    /* 0250 */  0xC7, 0x1B, 0x70, 0xFE, 0xFF, 0x8F, 0x37, 0xC0,  // ..p...7.
                    /* 0258 */  0xFB, 0xF0, 0x00, 0x9E, 0xE3, 0x0D, 0x2C, 0x90,  // ......,.
                    /* 0260 */  0xD7, 0x09, 0xCF, 0xE8, 0xED, 0xC0, 0xA7, 0x1B,  // ........
                    /* 0268 */  0xF8, 0xD3, 0x78, 0x05, 0x78, 0xB8, 0x79, 0x19,  // ..x.x.y.
                    /* 0270 */  0x38, 0x9C, 0xD7, 0x99, 0xD6, 0x6E, 0x03, 0xBA,  // 8....n..
                    /* 0278 */  0xD5, 0xC4, 0x78, 0xB9, 0x89, 0x75, 0x4A, 0x4F,  // ..x..uJO
                    /* 0280 */  0x37, 0x0C, 0xEC, 0x14, 0x1E, 0x71, 0x8C, 0x10,  // 7....q..
                    /* 0288 */  0xD4, 0x28, 0xE1, 0x82, 0x04, 0x0B, 0x19, 0xF1,  // .(......
                    /* 0290 */  0x55, 0xC7, 0xE7, 0x9B, 0xE8, 0x4F, 0x38, 0x31,  // U....O81
                    /* 0298 */  0x8F, 0xE7, 0xE9, 0x86, 0xC9, 0x39, 0xDD, 0x00,  // .....9..
                    /* 02A0 */  0x3A, 0xFF, 0xFF, 0xA7, 0x1B, 0xE0, 0x25, 0xE4,  // :.....%.
                    /* 02A8 */  0x74, 0x83, 0x3E, 0x43, 0xF8, 0x76, 0xC0, 0x87,  // t.>C.v..
                    /* 02B0 */  0x8D, 0x3B, 0xCB, 0xF9, 0x68, 0x03, 0x5C, 0x4F,  // .;..h.\O
                    /* 02B8 */  0x2A, 0xF8, 0xA3, 0x0D, 0x98, 0x4E, 0x13, 0xD8,  // *....N..
                    /* 02C0 */  0x33, 0x01, 0xF8, 0x86, 0xF2, 0x64, 0x03, 0xCE,  // 3....d..
                    /* 02C8 */  0xD1, 0x60, 0x0F, 0x36, 0xC0, 0xE9, 0xFF, 0x7F,  // .`.6....
                    /* 02D0 */  0xB0, 0x01, 0x4E, 0x71, 0x4F, 0x35, 0x54, 0xFA,  // ..NqO5T.
                    /* 02D8 */  0xE3, 0x40, 0x01, 0x61, 0x50, 0x07, 0x1B, 0xC0,  // .@.aP...
                    /* 02E0 */  0xD5, 0xC8, 0x71, 0x07, 0x1B, 0xF0, 0x5C, 0xA2,  // ..q...\.
                    /* 02E8 */  0x8C, 0xF8, 0x58, 0xE6, 0xCB, 0x84, 0x91, 0x3C,  // ..X....<
                    /* 02F0 */  0xA2, 0xA7, 0x0E, 0xCF, 0xCF, 0x10, 0x07, 0xE0,  // ........
                    /* 02F8 */  0xB3, 0x0D, 0xFC, 0xBB, 0xCC, 0x23, 0x8D, 0xEF,  // .....#..
                    /* 0300 */  0x03, 0xEF, 0x7F, 0x31, 0x4E, 0xE6, 0xD9, 0xC6,  // ...1N...
                    /* 0308 */  0x17, 0x9A, 0x93, 0x8A, 0xF5, 0x6C, 0xC3, 0x66,  // .....l.f
                    /* 0310 */  0x10, 0x27, 0x6A, 0x94, 0x17, 0x82, 0x80, 0xA1,  // .'j.....
                    /* 0318 */  0x22, 0x44, 0x79, 0xAD, 0x89, 0x15, 0xF7, 0x35,  // "Dy....5
                    /* 0320 */  0xD0, 0x38, 0x21, 0x8E, 0xCF, 0xB7, 0x82, 0x70,  // .8!....p
                    /* 0328 */  0xA1, 0x9E, 0x6D, 0x98, 0xCC, 0xB3, 0x0D, 0x28,  // ..m....(
                    /* 0330 */  0xFE, 0xFF, 0x67, 0x1B, 0x80, 0x03, 0xD2, 0x0E,  // ..g.....
                    /* 0338 */  0x82, 0xA0, 0x7C, 0xD3, 0xF8, 0x78, 0x03, 0x5C,  // ..|..x.\
                    /* 0340 */  0x05, 0x1F, 0x04, 0x41, 0x7E, 0xAB, 0x80, 0xF9,  // ...A~...
                    /* 0348 */  0xFF, 0xBF, 0x55, 0xB0, 0xC3, 0x01, 0x18, 0x8F,  // ..U.....
                    /* 0350 */  0xB3, 0xB8, 0x43, 0x0E, 0x18, 0x46, 0x84, 0x9F,  // ..C..F..
                    /* 0358 */  0x10, 0x8C, 0x73, 0x0E, 0xE0, 0x29, 0xF4, 0x21,  // ..s..).!
                    /* 0360 */  0x87, 0xCA, 0x7F, 0x25, 0x28, 0x26, 0x0C, 0xEA,  // ...%(&..
                    /* 0368 */  0x9C, 0x03, 0xB8, 0x3A, 0x43, 0xE0, 0xFE, 0xFF,  // ...:C...
                    /* 0370 */  0xE7, 0x1C, 0xE0, 0x80, 0xE3, 0xAB, 0x15, 0xEE,  // ........
                    /* 0378 */  0xA4, 0x03, 0xFB, 0x6C, 0xE3, 0xC9, 0x84, 0x38,  // ...l...8
                    /* 0380 */  0xA6, 0x57, 0xC1, 0x67, 0x9B, 0x97, 0x9C, 0xD7,  // .W.g....
                    /* 0388 */  0x1C, 0x1F, 0x07, 0x63, 0x3D, 0x41, 0xB3, 0x83,  // ...c=A..
                    /* 0390 */  0xB4, 0x2F, 0x09, 0x0F, 0x85, 0x46, 0x7C, 0xCF,  // ./...F|.
                    /* 0398 */  0x79, 0x28, 0x08, 0x65, 0x58, 0xC3, 0xBC, 0xF4,  // y(.eX...
                    /* 03A0 */  0x30, 0xCC, 0x40, 0x8F, 0x85, 0x06, 0x79, 0xD2,  // 0.@...y.
                    /* 03A8 */  0x61, 0x42, 0x4F, 0x3A, 0x00, 0x4D, 0x84, 0x1D,  // aBO:.M..
                    /* 03B0 */  0x0A, 0xA1, 0xFD, 0xFF, 0x0F, 0x85, 0x78, 0x11,  // ......x.
                    /* 03B8 */  0xC7, 0x1C, 0xA0, 0x7B, 0x1D, 0x79, 0xCC, 0x01,  // ...{.y..
                    /* 03C0 */  0x4E, 0x97, 0x0A, 0xFC, 0xD9, 0x00, 0x8C, 0x47,  // N......G
                    /* 03C8 */  0x18, 0xDC, 0x41, 0x07, 0xDC, 0x30, 0x4F, 0x88,  // ..A..0O.
                    /* 03D0 */  0x80, 0x9D, 0xFF, 0xFF, 0x51, 0x07, 0x5E, 0xC4,  // ....Q.^.
                    /* 03D8 */  0x73, 0x0E, 0x15, 0xFE, 0x52, 0x50, 0x28, 0x18,  // s...RP(.
                    /* 03E0 */  0xD4, 0x51, 0x07, 0x70, 0x35, 0xDA, 0x47, 0x1D,  // .Q.p5.G.
                    /* 03E8 */  0x30, 0x4E, 0xE6, 0x28, 0x42, 0x46, 0x78, 0xB4,  // 0N.(BFx.
                    /* 03F0 */  0x08, 0x17, 0xE9, 0xA0, 0x1E, 0x25, 0x7C, 0xD9,  // .....%|.
                    /* 03F8 */  0x30, 0x44, 0xC8, 0xE7, 0x1C, 0x30, 0x9C, 0x06,  // 0D...0..
                    /* 0400 */  0x5E, 0x06, 0x0E, 0xE8, 0xD5, 0xC6, 0xA7, 0x9B,  // ^.......
                    /* 0408 */  0x27, 0x9B, 0x33, 0x7A, 0x36, 0xF4, 0x39, 0xE7,  // '.3z6.9.
                    /* 0410 */  0x7D, 0xDA, 0x47, 0x1C, 0x76, 0x1E, 0x78, 0xCE,  // }.G.v.x.
                    /* 0418 */  0x31, 0xD4, 0x89, 0xBD, 0x47, 0x1B, 0xE5, 0x6D,  // 1...G..m
                    /* 0420 */  0x27, 0x66, 0x90, 0x30, 0xC1, 0x0D, 0xF5, 0x28,  // 'f.0...(
                    /* 0428 */  0xED, 0xD3, 0x8E, 0xB1, 0x9E, 0x73, 0x98, 0xB8,  // .....s..
                    /* 0430 */  0x73, 0x0E, 0x50, 0xFC, 0xFF, 0x9F, 0x73, 0x00,  // s.P...s.
                    /* 0438 */  0x87, 0x92, 0x0E, 0x88, 0x50, 0x8E, 0x08, 0xF8,  // ....P...
                    /* 0440 */  0x1B, 0x02, 0x96, 0x60, 0xF0, 0xE3, 0x34, 0xD0,  // ...`..4.
                    /* 0448 */  0x3D, 0xFC, 0xE1, 0x8E, 0x3A, 0xE0, 0x38, 0x52,  // =...:.8R
                    /* 0450 */  0xC0, 0xB8, 0x2B, 0xB0, 0x09, 0xF2, 0x83, 0x01,  // ..+.....
                    /* 0458 */  0xF8, 0x0E, 0x1F, 0x0F, 0x39, 0xB0, 0xFE, 0xFF,  // ....9...
                    /* 0460 */  0x87, 0x1C, 0x58, 0xF3, 0x87, 0x7D, 0xC2, 0x01,  // ..X..}..
                    /* 0468 */  0x3C, 0x9D, 0xA7, 0xF9, 0xF1, 0xC6, 0x91, 0x4E,  // <......N
                    /* 0470 */  0x38, 0x80, 0xFC, 0x13, 0x15, 0xF6, 0x84, 0x83,  // 8.......
                    /* 0478 */  0xFB, 0xFF, 0x9F, 0x70, 0x60, 0x4C, 0x24, 0xC2,  // ...p`L$.
                    /* 0480 */  0x1B, 0xE1, 0xD3, 0xCD, 0xBB, 0xA0, 0x31, 0x5A,  // ......1Z
                    /* 0488 */  0xBB, 0xD9, 0x68, 0x4C, 0x31, 0xC2, 0xF8, 0x84,  // ..hL1...
                    /* 0490 */  0x63, 0x98, 0xA7, 0x1B, 0x9F, 0x70, 0x7C, 0xB4,  // c....p|.
                    /* 0498 */  0x66, 0x28, 0x0F, 0x04, 0x6F, 0xD7, 0x3E, 0x54,  // f(..o.>T
                    /* 04A0 */  0x1B, 0x2D, 0xF4, 0x6B, 0xA1, 0x71, 0xC3, 0x06,  // .-.k.q..
                    /* 04A8 */  0x79, 0xC2, 0x61, 0xD2, 0x4E, 0x38, 0x00, 0x4D,  // y.a.N8.M
                    /* 04B0 */  0x04, 0x9D, 0x70, 0xD0, 0xC3, 0xF5, 0x11, 0x01,  // ..p.....
                    /* 04B8 */  0x7F, 0x43, 0xC0, 0x1D, 0x70, 0x80, 0xC7, 0xFF,  // .C..p...
                    /* 04C0 */  0xFF, 0x80, 0x03, 0x4C, 0x0F, 0x85, 0x60, 0x3F,  // ...L..`?
                    /* 04C8 */  0xE0, 0x80, 0xFD, 0x44, 0x08, 0x58, 0x0B, 0x7A,  // ...D.X.z
                    /* 04D0 */  0xBA, 0x41, 0x45, 0x3B, 0xE0, 0x00, 0xAD, 0xFF,  // .AE;....
                    /* 04D8 */  0xFF, 0x01, 0x07, 0x70, 0x32, 0x83, 0x53, 0x78,  // ...p2.Sx
                    /* 04E0 */  0x91, 0xF1, 0x55, 0x95, 0x9F, 0x19, 0x70, 0x27,  // ..U...p'
                    /* 04E8 */  0x42, 0x30, 0x5C, 0x0F, 0x7C, 0xA1, 0x79, 0xA0,  // B0\.|.y.
                    /* 04F0 */  0x89, 0xF0, 0x52, 0xF3, 0x1C, 0xF0, 0x80, 0xE3,  // ..R.....
                    /* 04F8 */  0x7B, 0xA0, 0x87, 0xF3, 0x5E, 0xF3, 0x80, 0x63,  // {...^..c
                    /* 0500 */  0xAC, 0xA7, 0x9B, 0xE3, 0x7A, 0x90, 0xF6, 0x55,  // ....z..U
                    /* 0508 */  0xF0, 0xC4, 0x42, 0x19, 0xE2, 0x5D, 0xE7, 0xE5,  // ..B..]..
                    /* 0510 */  0xC6, 0x38, 0xC1, 0x02, 0x3E, 0x17, 0xFA, 0x6A,  // .8..>..j
                    /* 0518 */  0xE8, 0x13, 0x21, 0x97, 0x78, 0xC0, 0x01, 0xF4,  // ..!.x...
                    /* 0520 */  0xFE, 0xFF, 0x0F, 0xD2, 0xC0, 0x6B, 0xB8, 0x86,  // .....k..
                    /* 0528 */  0x7E, 0xE9, 0xF5, 0x34, 0x7C, 0xCD, 0xF0, 0x09,  // ~..4|...
                    /* 0530 */  0xCE, 0x73, 0x43, 0x1D, 0xA5, 0x81, 0xEE, 0x69,  // .sC....i
                    /* 0538 */  0x1F, 0x3C, 0x07, 0x1C, 0x7E, 0xA2, 0xC0, 0x8F,  // .<..~...
                    /* 0540 */  0x11, 0x7B, 0x6B, 0x65, 0xA7, 0x0A, 0xDC, 0x21,  // .{ke...!
                    /* 0548 */  0x07, 0xD8, 0xE1, 0x9C, 0xF5, 0xCB, 0xC0, 0xC3,  // ........
                    /* 0550 */  0x0B, 0x9B, 0x0E, 0xFE, 0x90, 0x03, 0xF6, 0xFF,  // ........
                    /* 0558 */  0xFF, 0x21, 0x07, 0xB8, 0xC6, 0x3A, 0xE1, 0x50,  // .!...:.P
                    /* 0560 */  0xD9, 0x8F, 0x04, 0x05, 0x81, 0x41, 0x1D, 0x72,  // .....A.r
                    /* 0568 */  0x00, 0x57, 0x47, 0x2E, 0xF0, 0x1C, 0x72, 0xE0,  // .WG...r.
                    /* 0570 */  0xDE, 0xA9, 0x70, 0x67, 0x1C, 0xD8, 0xB7, 0x9A,  // ..pg....
                    /* 0578 */  0x57, 0x67, 0xDF, 0x69, 0xC2, 0xBF, 0x05, 0x44,  // Wg.i...D
                    /* 0580 */  0x78, 0x1C, 0x34, 0x50, 0x98, 0x40, 0xA1, 0x9E,  // x.4P.@..
                    /* 0588 */  0x09, 0xD9, 0xD8, 0x1E, 0xA2, 0x3D, 0xAD, 0x17,  // .....=..
                    /* 0590 */  0x9C, 0xB7, 0x82, 0x57, 0x1D, 0x63, 0x04, 0x35,  // ...W.c.5
                    /* 0598 */  0x58, 0xA0, 0x37, 0x6A, 0x23, 0x3D, 0xEB, 0x84,  // X.7j#=..
                    /* 05A0 */  0x7D, 0xD4, 0x89, 0xF0, 0x8C, 0xC3, 0x24, 0x9D,  // }.....$.
                    /* 05A8 */  0x71, 0xA0, 0xFC, 0xFF, 0xCF, 0x38, 0x00, 0x27,  // q....8.'
                    /* 05B0 */  0xA4, 0x9C, 0x71, 0xD0, 0x87, 0x08, 0x9F, 0x0E,  // ..q.....
                    /* 05B8 */  0xF8, 0xB0, 0x71, 0xB1, 0x4F, 0x84, 0x40, 0xF7,  // ..q.O.@.
                    /* 05C0 */  0xF4, 0x82, 0x3B, 0xE1, 0x80, 0xF3, 0x38, 0x81,  // ..;...8.
                    /* 05C8 */  0x1B, 0x35, 0xFF, 0xFF, 0x1F, 0x0A, 0xC0, 0x73,  // .5.....s
                    /* 05D0 */  0x92, 0xC1, 0x1D, 0x6E, 0xC0, 0x76, 0x1E, 0x04,  // ...n.v..
                    /* 05D8 */  0xAC, 0x85, 0x3E, 0xD8, 0xD0, 0x08, 0xCF, 0x03,  // ..>.....
                    /* 05E0 */  0xC5, 0x84, 0x41, 0x9D, 0x6D, 0x00, 0x57, 0x73,  // ..A.m.Ws
                    /* 05E8 */  0x7D, 0x78, 0x00, 0xC3, 0xFF, 0xFF, 0x6C, 0x83,  // }x....l.
                    /* 05F0 */  0x1F, 0x3A, 0xF6, 0xF4, 0xE0, 0x69, 0x1B, 0xCF,  // .:...i..
                    /* 05F8 */  0x07, 0x02, 0x5F, 0x5B, 0x0C, 0x55, 0x2B, 0x10,  // .._[.U+.
                    /* 0600 */  0xC1, 0x3C, 0x00, 0x7E, 0xC2, 0x81, 0x7D, 0xBF,  // .<.~..}.
                    /* 0608 */  0xF1, 0x21, 0xC1, 0xD7, 0x66, 0xA3, 0xF8, 0x52,  // .!..f..R
                    /* 0610 */  0xF1, 0x50, 0xF3, 0x3E, 0xE8, 0xC3, 0x8D, 0xC7,  // .P.>....
                    /* 0618 */  0xF6, 0x68, 0xE3, 0x3B, 0x8E, 0xD1, 0x9E, 0x9E,  // .h.;....
                    /* 0620 */  0x7D, 0x88, 0x36, 0xCA, 0xF9, 0xC5, 0x8B, 0xF1,  // }.6.....
                    /* 0628 */  0x84, 0x13, 0xEC, 0xB1, 0xD0, 0x80, 0x51, 0x22,  // ......Q"
                    /* 0630 */  0x05, 0x79, 0xC2, 0x61, 0x22, 0x4F, 0x38, 0x00,  // .y.a"O8.
                    /* 0638 */  0x4D, 0xC4, 0x9D, 0x70, 0xD0, 0x03, 0xF1, 0x09,  // M..p....
                    /* 0640 */  0x0F, 0x7B, 0x43, 0x60, 0xFF, 0xFF, 0x1B, 0x02,  // .{C`....
                    /* 0648 */  0x86, 0xA0, 0x84, 0x53, 0x21, 0xD0, 0x45, 0xF5,  // ...S!.E.
                    /* 0650 */  0x21, 0x07, 0x5C, 0xE7, 0x0A, 0x70, 0x1E, 0x75,  // !.\..p.u
                    /* 0658 */  0x80, 0xDD, 0xA4, 0xD8, 0x24, 0x0E, 0xE8, 0x70,  // ....$..p
                    /* 0660 */  0xF0, 0x47, 0x1D, 0xC0, 0xD3, 0xFF, 0x3F, 0xFA,  // .G....?.
                    /* 0668 */  0x39, 0x87, 0x06, 0x78, 0x24, 0x28, 0x2C, 0x0C,  // 9..x$(,.
                    /* 0670 */  0xEA, 0xA8, 0x03, 0xB8, 0x3A, 0x42, 0x80, 0xE7,  // ....:B..
                    /* 0678 */  0xA8, 0x83, 0xBB, 0x75, 0x61, 0x20, 0xDE, 0x23,  // ...ua .#
                    /* 0680 */  0x8C, 0xE9, 0x4B, 0x28, 0x3B, 0xDF, 0x33, 0xCC,  // ..K(;.3.
                    /* 0688 */  0xE7, 0x17, 0x76, 0x90, 0x60, 0x27, 0x1D, 0xF8,  // ..v.`'..
                    /* 0690 */  0x53, 0x7A, 0x11, 0x78, 0x79, 0x7E, 0xC0, 0x79,  // Sz.xy~.y
                    /* 0698 */  0x1D, 0xF4, 0x89, 0xD0, 0x37, 0x9C, 0x87, 0x68,  // ....7..h
                    /* 06A0 */  0x23, 0x45, 0xF1, 0xD0, 0x9E, 0x75, 0x8C, 0xF3,  // #E...u..
                    /* 06A8 */  0x5E, 0x68, 0x10, 0xDF, 0x75, 0x7C, 0x9E, 0xF6,  // ^h..u|..
                    /* 06B0 */  0x0D, 0xD1, 0x88, 0xF1, 0x9E, 0x0D, 0x0D, 0xF1,  // ........
                    /* 06B8 */  0xC0, 0xE3, 0x2B, 0xC2, 0x93, 0x0E, 0x13, 0x7B,  // ..+....{
                    /* 06C0 */  0xD2, 0x01, 0xAA, 0xFF, 0xFF, 0x93, 0x0E, 0xE0,  // ........
                    /* 06C8 */  0x4E, 0xDA, 0x49, 0x07, 0xCA, 0x5D, 0x8E, 0x0F,  // N.I..]..
                    /* 06D0 */  0xDD, 0x57, 0x90, 0xB8, 0x47, 0x12, 0xE6, 0xF1,  // .W..G...
                    /* 06D8 */  0xC6, 0x37, 0x1D, 0xC4, 0x71, 0x1A, 0xD0, 0x73,  // .7..q..s
                    /* 06E0 */  0xAC, 0x00, 0xDF, 0xE1, 0x00, 0x7C, 0xE7, 0x8F,  // .....|..
                    /* 06E8 */  0xC0, 0xD8, 0xFF, 0xFF, 0x41, 0x07, 0xF6, 0x01,  // ....A...
                    /* 06F0 */  0x86, 0x8F, 0x09, 0x3F, 0x25, 0x38, 0xA7, 0x1D,  // ...?%8..
                    /* 06F8 */  0xC0, 0x94, 0x98, 0x07, 0x83, 0x09, 0x14, 0xE2,  // ........
                    /* 0700 */  0xA1, 0xA0, 0xF8, 0xA7, 0x1D, 0x0A, 0xE3, 0xD3,  // ........
                    /* 0708 */  0x0E, 0xE0, 0xEA, 0x50, 0x83, 0x3B, 0x52, 0x83,  // ...P.;R.
                    /* 0710 */  0x09, 0x25, 0xE2, 0x13, 0x9B, 0x2F, 0x16, 0x46,  // .%.../.F
                    /* 0718 */  0xF2, 0x88, 0xFE, 0xFF, 0x0F, 0x21, 0x9E, 0x9F,  // .....!..
                    /* 0720 */  0x21, 0x0E, 0xC0, 0xE7, 0x1D, 0x70, 0x1E, 0x09,  // !....p..
                    /* 0728 */  0xDE, 0x0E, 0x1F, 0x78, 0x8C, 0xF0, 0x76, 0xE8,  // ...x..v.
                    /* 0730 */  0xCB, 0x8E, 0x81, 0x5E, 0x79, 0xA2, 0x1C, 0xDB,  // ...^y...
                    /* 0738 */  0xF3, 0x8E, 0x2F, 0x3A, 0x51, 0x82, 0x3D, 0xEF,  // ../:Q.=.
                    /* 0740 */  0x18, 0xE6, 0xED, 0xE0, 0x69, 0xD1, 0x10, 0xA1,  // ....i...
                    /* 0748 */  0xA2, 0x44, 0x3C, 0xC4, 0x50, 0x4F, 0x3C, 0x71,  // .D<.PO<q
                    /* 0750 */  0x42, 0x3C, 0x31, 0xFA, 0xBC, 0xC3, 0xA5, 0x9F,  // B<1.....
                    /* 0758 */  0x77, 0x00, 0x9A, 0x88, 0x3C, 0xEF, 0x80, 0xF2,  // w...<...
                    /* 0760 */  0x98, 0xED, 0xF3, 0x0E, 0xFE, 0xFF, 0x7F, 0xDE,  // ........
                    /* 0768 */  0x01, 0x6E, 0xA7, 0x02, 0x9F, 0x77, 0xC0, 0x7C,  // .n...w.|
                    /* 0770 */  0xB5, 0x00, 0xE7, 0x09, 0x01, 0x8C, 0xE7, 0x37,  // .......7
                    /* 0778 */  0xDC, 0x31, 0x1B, 0x1C, 0xC3, 0xC2, 0xCE, 0x0A,  // .1......
                    /* 0780 */  0x7F, 0xEC, 0x01, 0x8C, 0xFD, 0xFF, 0x8F, 0x3D,  // .......=
                    /* 0788 */  0x38, 0xF9, 0x3A, 0x40, 0x98, 0xE0, 0xF7, 0x82,  // 8.:@....
                    /* 0790 */  0x24, 0x3F, 0x1C, 0x28, 0x8C, 0x8F, 0x3D, 0x80,  // $?.(..=.
                    /* 0798 */  0xAB, 0xF1, 0x3C, 0x4D, 0x80, 0xE5, 0x28, 0x06,  // ..<M..(.
                    /* 07A0 */  0xEF, 0x1C, 0x84, 0x3F, 0xEC, 0xC0, 0xB8, 0xE9,  // ...?....
                    /* 07A8 */  0xF8, 0x8A, 0xED, 0xC9, 0x3C, 0xEA, 0x3C, 0x1E,  // ....<.<.
                    /* 07B0 */  0x46, 0x78, 0x47, 0x34, 0x8E, 0x8F, 0x03, 0x0F,  // FxG4....
                    /* 07B8 */  0x3B, 0x86, 0xF2, 0x4D, 0xC7, 0x07, 0x9D, 0xC7,  // ;..M....
                    /* 07C0 */  0x9C, 0x77, 0x46, 0xA3, 0x3C, 0x26, 0x18, 0x30,  // .wF.<&.0
                    /* 07C8 */  0xA2, 0xAF, 0x8C, 0xC6, 0x31, 0xC4, 0x73, 0xA3,  // ....1.s.
                    /* 07D0 */  0x0F, 0x3B, 0x4C, 0xC2, 0xBB, 0x45, 0xA7, 0x12,  // .;L..E..
                    /* 07D8 */  0x1F, 0x76, 0x80, 0xF7, 0xFF, 0xFF, 0xB0, 0x03,  // .v......
                    /* 07E0 */  0x78, 0x92, 0x77, 0x34, 0x01, 0xC5, 0xDD, 0x0E,  // x.w4....
                    /* 07E8 */  0xD6, 0x81, 0x04, 0x30, 0x24, 0x61, 0xE9, 0x3A,  // ...0$a.:
                    /* 07F0 */  0x23, 0x38, 0x16, 0x85, 0x6C, 0x2C, 0xDF, 0x07,  // #8..l,..
                    /* 07F8 */  0x00, 0x1A, 0xEB, 0x09, 0xA0, 0x73, 0x0F, 0x9B,  // .....s..
                    /* 0800 */  0x26, 0x3C, 0x82, 0x31, 0x20, 0x75, 0x36, 0xF2,  // &<.1 u6.
                    /* 0808 */  0x69, 0xC0, 0x01, 0x28, 0x24, 0x8B, 0x46, 0xC3,  // i..($.F.
                    /* 0810 */  0xF2, 0xD0, 0x09, 0x8C, 0xE0, 0x0C, 0x62, 0x40,  // ......b@
                    /* 0818 */  0xA7, 0x3C, 0x49, 0xA0, 0x95, 0x80, 0xE8, 0xFF,  // .<I.....
                    /* 0820 */  0x7F, 0x7A, 0xE2, 0xE7, 0x08, 0xCC, 0x95, 0xC2,  // .z......
                    /* 0828 */  0xAF, 0x3E, 0x4F, 0xDD, 0x17, 0x04, 0x7E, 0x61,  // .>O...~a
                    /* 0830 */  0xF1, 0x68, 0x0C, 0xEE, 0x2B, 0x01, 0xEE, 0x22,  // .h..+.."
                    /* 0838 */  0x02, 0x77, 0x1A, 0x7C, 0x8A, 0xC7, 0x81, 0x51,  // .w.|...Q
                    /* 0840 */  0x73, 0x9D, 0x42, 0x8D, 0xC2, 0x90, 0x0F, 0x27,  // s.B....'
                    /* 0848 */  0x26, 0xB0, 0xAE, 0x33, 0x05, 0xC8, 0xF4, 0xDD,  // &..3....
                    /* 0850 */  0x19, 0x40, 0x01, 0xE4, 0x63, 0x82, 0x6F, 0x05,  // .@..c.o.
                    /* 0858 */  0x6F, 0x0A, 0x6C, 0x0C, 0x2F, 0x06, 0x46, 0x33,  // o.l./.F3
                    /* 0860 */  0x3A, 0x17, 0x3A, 0x76, 0xD4, 0x19, 0xD6, 0x63,  // :.:v...c
                    /* 0868 */  0x37, 0x88, 0xC7, 0xEE, 0xD8, 0x63, 0x47, 0x1F,  // 7....cG.
                    /* 0870 */  0x0A, 0x3C, 0x8F, 0xD7, 0x25, 0x5F, 0x31, 0x7C,  // .<..%_1|
                    /* 0878 */  0x3D, 0xF0, 0x99, 0x00, 0x46, 0xB8, 0xE9, 0xD3,  // =...F...
                    /* 0880 */  0x53, 0x09, 0x7E, 0xD0, 0xC1, 0x5F, 0x15, 0x3C,  // S.~.._.<
                    /* 0888 */  0x15, 0x9F, 0x29, 0xF0, 0xF3, 0x87, 0x37, 0x16,  // ..)...7.
                    /* 0890 */  0xEC, 0xCD, 0x06, 0xC6, 0x48, 0x7C, 0x05, 0xE0,  // ....H|..
                    /* 0898 */  0x83, 0xF0, 0x15, 0x80, 0x8F, 0xD0, 0xE7, 0x10,  // ........
                    /* 08A0 */  0xF8, 0x63, 0x78, 0x06, 0xC0, 0xFC, 0xFF, 0x09,  // .cx.....
                    /* 08A8 */  0x2C, 0xF0, 0x0E, 0x00, 0x72, 0x78, 0xCC, 0xE8,  // ,...rx..
                    /* 08B0 */  0x7D, 0xC6, 0xB1, 0xAC, 0x71, 0xA1, 0x46, 0xEA,  // }...q.F.
                    /* 08B8 */  0x63, 0x12, 0xC3, 0x3E, 0x41, 0xDF, 0x39, 0x0E,  // c..>A.9.
                    /* 08C0 */  0xF4, 0x35, 0xE4, 0x49, 0x0E, 0x03, 0xEB, 0xB1,  // .5.I....
                    /* 08C8 */  0x73, 0x58, 0xA3, 0x85, 0x3D, 0xE4, 0x17, 0x0F,  // sX..=...
                    /* 08D0 */  0x1C, 0x46, 0x58, 0x1F, 0x72, 0xC0, 0x71, 0xA8,  // .FX.r.q.
                    /* 08D8 */  0x83, 0x3F, 0xC7, 0x67, 0x62, 0x60, 0x41, 0xE0,  // .?.gb`A.
                    /* 08E0 */  0x2C, 0x67, 0x13, 0x74, 0x96, 0xD7, 0x83, 0x30,  // ,g.t...0
                    /* 08E8 */  0xD9, 0xD9, 0x04, 0xA6, 0xF6, 0xB3, 0x09, 0x4A,  // .......J
                    /* 08F0 */  0x35, 0x85, 0x74, 0x1D, 0x28, 0x50, 0x4A, 0x0E,  // 5.t.(PJ.
                    /* 08F8 */  0x14, 0x14, 0xC4, 0x80, 0x8E, 0x79, 0xA0, 0x40,  // .....y.@
                    /* 0900 */  0x9F, 0xBE, 0xD8, 0x3D, 0x0E, 0xC6, 0xDD, 0x04,  // ...=....
                    /* 0908 */  0xFC, 0xFF, 0xFF, 0xD1, 0xF2, 0x71, 0xC0, 0xB9,  // .....q..
                    /* 0910 */  0x9B, 0x00, 0x36, 0xC4, 0xCD, 0x1D, 0x25, 0x67,  // ..6...%g
                    /* 0918 */  0xEE, 0x14, 0xC4, 0x73, 0x77, 0x54, 0x08, 0x39,  // ...swT.9
                    /* 0920 */  0xB9, 0x56, 0xA1, 0xF1, 0x4F, 0xD1, 0x37, 0x10,  // .V..O.7.
                    /* 0928 */  0x1F, 0xD7, 0x89, 0x80, 0x60, 0xF7, 0x12, 0x50,  // ....`..P
                    /* 0930 */  0x5C, 0x39, 0x70, 0x73, 0x87, 0x3B, 0x0E, 0xDC,  // \9ps.;..
                    /* 0938 */  0x7D, 0x21, 0xE0, 0x53, 0x86, 0x6F, 0x12, 0xBE,  // }!.S.o..
                    /* 0940 */  0x95, 0x80, 0xFB, 0x24, 0xE7, 0xC3, 0x86, 0xAF,  // ...$....
                    /* 0948 */  0x6D, 0x6F, 0x6F, 0x6F, 0x25, 0xC0, 0xF4, 0xFF,  // mooo%...
                    /* 0950 */  0x7F, 0x2B, 0x81, 0x71, 0x08, 0xF0, 0xAD, 0x04,  // .+.q....
                    /* 0958 */  0x70, 0x72, 0x08, 0x61, 0xB7, 0x12, 0xD8, 0xE9,  // pr.a....
                    /* 0960 */  0x6E, 0x25, 0xA8, 0xC3, 0x80, 0x33, 0xAD, 0x51,  // n%...3.Q
                    /* 0968 */  0xB7, 0x47, 0x0F, 0xCA, 0xC3, 0xF0, 0x21, 0x0D,  // .G....!.
                    /* 0970 */  0x73, 0xCD, 0x87, 0x77, 0x33, 0x01, 0x7C, 0xFF,  // s..w3.|.
                    /* 0978 */  0xFF, 0x6F, 0x26, 0x00, 0x0F, 0xD7, 0xE3, 0x9B,  // .o&.....
                    /* 0980 */  0x09, 0xB8, 0x20, 0x7D, 0x33, 0x01, 0x0E, 0xFF,  // .. }3...
                    /* 0988 */  0xFF, 0x9B, 0x09, 0x78, 0x04, 0x9F, 0x06, 0x40,  // ...x...@
                    /* 0990 */  0x73, 0x17, 0xE1, 0x83, 0x78, 0x18, 0xC1, 0x1E,  // s...x...
                    /* 0998 */  0x4F, 0x60, 0x9E, 0x46, 0x4C, 0x30, 0xAF, 0x8A,  // O`.FL0..
                    /* 09A0 */  0x71, 0x30, 0xC9, 0x43, 0x96, 0xF0, 0x05, 0x53,  // q0.C...S
                    /* 09A8 */  0x18, 0x9F, 0xA7, 0x01, 0x57, 0xE7, 0x44, 0xF0,  // ....W.D.
                    /* 09B0 */  0xDC, 0xF3, 0xE1, 0x9E, 0x8F, 0x7D, 0xA0, 0x86,  // .....}..
                    /* 09B8 */  0x7D, 0x82, 0x78, 0x87, 0xF6, 0x38, 0x42, 0xD4,  // }.x..8B.
                    /* 09C0 */  0x76, 0x93, 0xD0, 0x25, 0xFA, 0x45, 0x3A, 0x4C,  // v..%.E:L
                    /* 09C8 */  0x94, 0x58, 0x21, 0x1E, 0xA8, 0x7D, 0x95, 0x7D,  // .X!..}.}
                    /* 09D0 */  0xAC, 0x88, 0x11, 0xE5, 0xA4, 0x1E, 0xA8, 0x83,  // ........
                    /* 09D8 */  0xC4, 0x78, 0xA5, 0x36, 0x6A, 0xCC, 0x90, 0xAF,  // .x.6j...
                    /* 09E0 */  0xD5, 0x4F, 0x17, 0x11, 0x8E, 0x2D, 0x4C, 0x88,  // .O...-L.
                    /* 09E8 */  0xE0, 0x71, 0x1E, 0xA8, 0xD9, 0xFF, 0x5F, 0xC6,  // .q...._.
                    /* 09F0 */  0x81, 0x1A, 0xA0, 0xC9, 0x31, 0x1E, 0x77, 0x54,  // ....1.wT
                    /* 09F8 */  0x81, 0x77, 0x4C, 0xC0, 0xDF, 0x12, 0xB0, 0x47,  // .wL....G
                    /* 0A00 */  0x6A, 0xC0, 0xCA, 0xFF, 0xFF, 0x48, 0x8D, 0x53,  // j....H.S
                    /* 0A08 */  0xEB, 0x61, 0xFC, 0x2C, 0xDA, 0x0D, 0x0C, 0x75,  // .a.,...u
                    /* 0A10 */  0x10, 0x71, 0xB0, 0x23, 0x35, 0x62, 0xA2, 0xB0,  // .q.#5b..
                    /* 0A18 */  0xCF, 0xD4, 0x00, 0x67, 0xFF, 0xFF, 0x67, 0x6A,  // ...g..gj
                    /* 0A20 */  0xC0, 0x6B, 0xF0, 0x33, 0x35, 0xA0, 0x67, 0x80,  // .k.35.g.
                    /* 0A28 */  0xCF, 0xD4, 0x60, 0x3B, 0x3D, 0xC1, 0xCF, 0x73,  // ..`;=..s
                    /* 0A30 */  0x3A, 0x41, 0xA7, 0x39, 0x54, 0x23, 0x4E, 0x27,  // :A.9T#N'
                    /* 0A38 */  0xB0, 0xFF, 0xFF, 0x77, 0x4D, 0x80, 0xFF, 0xFF,  // ...wM...
                    /* 0A40 */  0xFF, 0xBB, 0x26, 0xB0, 0xBE, 0x97, 0x80, 0xEF,  // ..&.....
                    /* 0A48 */  0x54, 0x0D, 0x7C, 0xEF, 0x25, 0xE0, 0x39, 0x55,  // T.|.%.9U
                    /* 0A50 */  0xF3, 0x7B, 0x09, 0xFC, 0x5C, 0xF7, 0x4C, 0x2A,  // .{..\.L*
                    /* 0A58 */  0xF6, 0x35, 0x20, 0xB1, 0x8B, 0xA5, 0x30, 0xBE,  // .5 ...0.
                    /* 0A60 */  0x67, 0x02, 0x06, 0xFE, 0xFF, 0xF7, 0x4C, 0x30,  // g.....L0
                    /* 0A68 */  0xDD, 0x4E, 0xC0, 0x05, 0x16, 0xE1, 0x29, 0x20,  // .N....) 
                    /* 0A70 */  0x50, 0xB8, 0xA7, 0x01, 0x76, 0xC9, 0x84, 0x7D,  // P...v..}
                    /* 0A78 */  0x8E, 0x38, 0x91, 0xF7, 0xCB, 0x08, 0xA7, 0x72,  // .8.....r
                    /* 0A80 */  0x2E, 0x6F, 0x97, 0xCF, 0x10, 0xEF, 0x97, 0xFC,  // .o......
                    /* 0A88 */  0x36, 0xF1, 0x92, 0xC9, 0x40, 0x43, 0x44, 0x79,  // 6...@CDy
                    /* 0A90 */  0xBC, 0x0B, 0x15, 0x32, 0x6C, 0x94, 0xE7, 0xCB,  // ...2l...
                    /* 0A98 */  0xA7, 0xCC, 0x10, 0x8F, 0x98, 0x8F, 0x99, 0x46,  // .......F
                    /* 0AA0 */  0x8D, 0x61, 0x84, 0xD8, 0xEF, 0x12, 0x2F, 0x99,  // .a..../.
                    /* 0AA8 */  0xEC, 0xED, 0xE0, 0x4B, 0x26, 0xC0, 0x91, 0x13,  // ...K&...
                    /* 0AB0 */  0x40, 0x60, 0xFF, 0xFF, 0xCF, 0x28, 0xB0, 0xCF,  // @`...(..
                    /* 0AB8 */  0x08, 0x70, 0x6E, 0x98, 0x80, 0x1F, 0x85, 0x37,  // .pn....7
                    /* 0AC0 */  0x4C, 0x10, 0xCC, 0x12, 0x7F, 0xA2, 0x33, 0xD2,  // L.....3.
                    /* 0AC8 */  0xF3, 0x8F, 0xCF, 0xD4, 0xBE, 0x61, 0x02, 0xB6,  // .....a..
                    /* 0AD0 */  0xFF, 0xFF, 0x37, 0x4C, 0x80, 0xFF, 0xFF, 0xFF,  // ..7L....
                    /* 0AD8 */  0x1B, 0x26, 0xB0, 0xBD, 0x8E, 0xE0, 0x6F, 0x04,  // .&....o.
                    /* 0AE0 */  0x3E, 0x8F, 0xE0, 0x32, 0x9C, 0x4E, 0x50, 0x83,  // >..2.NP.
                    /* 0AE8 */  0x70, 0x8E, 0x1B, 0x26, 0xE2, 0x4A, 0x03, 0xE3,  // p..&.J..
                    /* 0AF0 */  0x7A, 0x09, 0xB0, 0xE8, 0xFF, 0x7F, 0xBD, 0x04,  // z.......
                    /* 0AF8 */  0xF8, 0x12, 0xF9, 0x7A, 0x09, 0xE8, 0x99, 0xB8,  // ...z....
                    /* 0B00 */  0xAF, 0x97, 0xE0, 0xFA, 0xFF, 0x5F, 0xD4, 0xE0,  // ....._..
                    /* 0B08 */  0xE4, 0xBC, 0x5B, 0x52, 0xC9, 0x4F, 0x01, 0xC9,  // ..[R.O..
                    /* 0B10 */  0x5E, 0x29, 0x85, 0xF1, 0xDD, 0x12, 0x70, 0x75,  // ^)....pu
                    /* 0B18 */  0x6B, 0x02, 0x0F, 0x7A, 0xFC, 0xE7, 0x48, 0x8F,  // k..z..H.
                    /* 0B20 */  0xB0, 0x4F, 0x18, 0x0D, 0xFA, 0xC5, 0x10, 0x7F,  // .O......
                    /* 0B28 */  0xBD, 0x84, 0x7D, 0x8F, 0x78, 0xA4, 0x0C, 0x71,  // ..}.x..q
                    /* 0B30 */  0x1C, 0x8F, 0x0E, 0x31, 0x5E, 0x2F, 0xD9, 0x95,  // ...1^/..
                    /* 0B38 */  0x32, 0x52, 0x9C, 0x28, 0x1E, 0xD3, 0xEB, 0x44,  // 2R.(...D
                    /* 0B40 */  0xAC, 0xD7, 0x4B, 0xDF, 0x2D, 0x7D, 0xCF, 0x34,  // ..K.-}.4
                    /* 0B48 */  0x4A, 0x88, 0x08, 0x61, 0xA2, 0xB6, 0x06, 0x2A,  // J..a...*
                    /* 0B50 */  0xAC, 0xE0, 0xC6, 0x88, 0x14, 0xE6, 0xF5, 0x92,  // ........
                    /* 0B58 */  0x89, 0xB8, 0x5E, 0x02, 0xE5, 0xFF, 0xFF, 0xF5,  // ..^.....
                    /* 0B60 */  0x12, 0x70, 0x76, 0x46, 0x01, 0x07, 0xC4, 0x79,  // .pvF...y
                    /* 0B68 */  0x07, 0x7F, 0x72, 0x64, 0xF7, 0x32, 0xFC, 0x05,  // ..rd.2..
                    /* 0B70 */  0x13, 0xF0, 0xA3, 0xF3, 0x82, 0x49, 0x63, 0xDD,  // .....Ic.
                    /* 0B78 */  0xB9, 0x50, 0x1C, 0x0E, 0x75, 0xC1, 0x44, 0xCC,  // .P..u.D.
                    /* 0B80 */  0x13, 0x66, 0x88, 0x5B, 0x17, 0x4A, 0xFE, 0xFD,  // .f.[.J..
                    /* 0B88 */  0x12, 0x14, 0xFF, 0xFF, 0xFB, 0x25, 0xC0, 0x05,  // .....%..
                    /* 0B90 */  0x99, 0x63, 0x47, 0x09, 0x1B, 0x3B, 0x05, 0xF1,  // .cG..;..
                    /* 0B98 */  0xD8, 0x1D, 0xFA, 0x54, 0x02, 0xE5, 0x7E, 0x89,  // ...T..~.
                    /* 0BA0 */  0x9F, 0x14, 0xEE, 0x7A, 0x09, 0xDC, 0xCE, 0x24,  // ...z...$
                    /* 0BA8 */  0xF8, 0xA3, 0x17, 0xB8, 0xFF, 0xFF, 0x63, 0xC0,  // ......c.
                    /* 0BB0 */  0x5F, 0x2F, 0x01, 0x5E, 0x1C, 0x9D, 0xE0, 0xA7,  // _/.^....
                    /* 0BB8 */  0x39, 0x9B, 0xA0, 0xB3, 0x5C, 0x2F, 0x11, 0x67,  // 9...\/.g
                    /* 0BC0 */  0x13, 0x98, 0x17, 0x4C, 0xC0, 0xC1, 0xFF, 0xFF,  // ...L....
                    /* 0BC8 */  0x82, 0x09, 0x30, 0xFE, 0x5A, 0x82, 0xFD, 0xFF,  // ..0.Z...
                    /* 0BD0 */  0x5F, 0x30, 0x01, 0x23, 0xD7, 0x12, 0xF0, 0x5C,  // _0.#...\
                    /* 0BD8 */  0x30, 0xF9, 0xB5, 0x04, 0x7E, 0xDC, 0x3B, 0x26,  // 0...~.;&
                    /* 0BE0 */  0x15, 0xFC, 0x1A, 0x90, 0xE4, 0xC5, 0x52, 0x18,  // ......R.
                    /* 0BE8 */  0xDF, 0x31, 0x01, 0x57, 0xB7, 0x54, 0xF0, 0xC0,  // .1.W.T..
                    /* 0BF0 */  0xBF, 0x4E, 0xB0, 0x19, 0xBF, 0x35, 0x44, 0xF2,  // .N...5D.
                    /* 0BF8 */  0x94, 0x7D, 0xFD, 0xF3, 0x15, 0x13, 0xE6, 0xFF,  // .}......
                    /* 0C00 */  0xFF, 0x8A, 0xC9, 0x8F, 0x95, 0x86, 0x78, 0x7B,  // ......x{
                    /* 0C08 */  0x78, 0xB4, 0x0C, 0xF1, 0x70, 0xE9, 0x4B, 0x40,  // x...p.K@
                    /* 0C10 */  0x94, 0x33, 0x89, 0xE4, 0x2B, 0xA6, 0x8F, 0x7B,  // .3..+..{
                    /* 0C18 */  0x91, 0x4E, 0xE9, 0x15, 0xD3, 0x87, 0x88, 0x77,  // .N.....w
                    /* 0C20 */  0xCB, 0x67, 0x81, 0x28, 0xC1, 0x62, 0x85, 0x09,  // .g.(.b..
                    /* 0C28 */  0xF1, 0x8C, 0x19, 0x25, 0x50, 0xB8, 0x37, 0x8B,  // ...%P.7.
                    /* 0C30 */  0x38, 0x51, 0x1E, 0x33, 0x5F, 0x31, 0x99, 0x84,  // 8Q.3_1..
                    /* 0C38 */  0x2B, 0x26, 0x40, 0x93, 0x3B, 0x11, 0xEE, 0x94,  // +&@.;...
                    /* 0C40 */  0x02, 0xEF, 0x94, 0xC0, 0x2F, 0x09, 0xF8, 0x1B,  // ..../...
                    /* 0C48 */  0x26, 0xB0, 0xF8, 0xFF, 0xDF, 0x30, 0x81, 0x99,  // &....0..
                    /* 0C50 */  0xE4, 0x1B, 0x26, 0xCD, 0x75, 0xED, 0x42, 0x1D,  // ..&.u.B.
                    /* 0C58 */  0x61, 0x9C, 0xE8, 0xDA, 0x85, 0x98, 0x24, 0x9B,  // a.....$.
                    /* 0C60 */  0xD3, 0x09, 0x3C, 0x53, 0xF8, 0x2E, 0xE5, 0x2B,  // ..<S...+
                    /* 0C68 */  0x06, 0x1F, 0x2D, 0x27, 0xF0, 0xCD, 0x0B, 0x60,  // ..-'...`
                    /* 0C70 */  0xD7, 0xFF, 0xFF, 0xE6, 0x05, 0xF0, 0x22, 0xFC,  // ......".
                    /* 0C78 */  0x01, 0x13, 0xD0, 0x73, 0x3B, 0xC1, 0xDD, 0xBC,  // ...s;...
                    /* 0C80 */  0xC0, 0x71, 0x16, 0x81, 0xF7, 0xFF, 0xBF, 0x12,  // .q......
                    /* 0C88 */  0xF8, 0x2E, 0x82, 0xBB, 0x9B, 0xE0, 0x8E, 0x05,  // ........
                    /* 0C90 */  0x4E, 0x72, 0xC4, 0x84, 0x84, 0x8C, 0xB9, 0x97,  // Nr......
                    /* 0C98 */  0x00, 0xFC, 0xFD, 0xFF, 0xDF, 0x4B, 0x00, 0x6B,  // .....K.k
                    /* 0CA0 */  0x22, 0xD6, 0xA3, 0x13, 0x26, 0xE0, 0x66, 0x3C,  // "...&.f<
                    /* 0CA8 */  0x4F, 0x98, 0x60, 0xBF, 0x9B, 0xC0, 0x9D, 0xDB,  // O.`.....
                    /* 0CB0 */  0xBB, 0x09, 0x46, 0xA1, 0x4D, 0x9F, 0x1A, 0x8D,  // ..F.M...
                    /* 0CB8 */  0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83, 0x5A,  // Z5(S.L.Z
                    /* 0CC0 */  0x7D, 0x2A, 0x35, 0x66, 0x6C, 0xC0, 0xAF, 0x37,  // }*5fl..7
                    /* 0CC8 */  0x5A, 0xAB, 0x46, 0x6D, 0xE9, 0x14, 0x02, 0x71,  // Z.Fm...q
                    /* 0CD0 */  0x94, 0x87, 0x83, 0x40, 0x1C, 0xEB, 0x50, 0x26,  // ...@..P&
                    /* 0CD8 */  0x10, 0x8B, 0x5A, 0x96, 0x40, 0x2C, 0xCE, 0x04,  // ..Z.@,..
                    /* 0CE0 */  0x88, 0xFF, 0xFF, 0x57, 0x18, 0x2D, 0x50, 0x20,  // ...W.-P 
                    /* 0CE8 */  0x8E, 0x0A, 0x42, 0x45, 0xE8, 0x00, 0x61, 0xF2,  // ..BE..a.
                    /* 0CF0 */  0x8C, 0x80, 0xB0, 0x70, 0x20, 0x34, 0xB4, 0x12,  // ...p 4..
                    /* 0CF8 */  0x10, 0x26, 0x46, 0xCB, 0x30, 0x28, 0x08, 0x0D,  // .&F.0(..
                    /* 0D00 */  0xE7, 0x05, 0x84, 0xC5, 0xFD, 0x86, 0x68, 0x10,  // ......h.
                    /* 0D08 */  0xC4, 0x0D, 0x08, 0x13, 0xFF, 0x7C, 0x10, 0x88,  // .....|..
                    /* 0D10 */  0xE3, 0xF8, 0x01, 0xA7, 0xAB, 0x17, 0x88, 0x45,  // .......E
                    /* 0D18 */  0x1A, 0x02, 0x61, 0xA2, 0x1F, 0xA2, 0x02, 0x71,  // ..a....q
                    /* 0D20 */  0x64, 0x10, 0x1A, 0xDE, 0x12, 0x08, 0x93, 0x65,  // d......e
                    /* 0D28 */  0x0A, 0x84, 0x85, 0x02, 0xA1, 0x81, 0x55, 0x81,  // ......U.
                    /* 0D30 */  0x30, 0x21, 0x0F, 0x13, 0x81, 0x38, 0x06, 0x08,  // 0!...8..
                    /* 0D38 */  0x0D, 0xE8, 0x0B, 0x84, 0xC9, 0x78, 0x47, 0x04,  // .....xG.
                    /* 0D40 */  0x21, 0x21, 0x40, 0x68, 0xD0, 0x87, 0xA8, 0x40,  // !!@h...@
                    /* 0D48 */  0x1C, 0xFF, 0x5B, 0x79, 0x48, 0xEC, 0x75, 0x19,  // ..[yH.u.
                    /* 0D50 */  0x84, 0xE8, 0x56, 0x07, 0x71, 0x8B, 0x02, 0x0D,  // ..V.q...
                    /* 0D58 */  0xA2, 0xE1, 0x11, 0x77, 0x40, 0x2C, 0x2A, 0x88,  // ...w@,*.
                    /* 0D60 */  0x4E, 0x93, 0xE4, 0x93, 0x22, 0x20, 0x6B, 0x03,  // N..." k.
                    /* 0D68 */  0x11, 0x90, 0x75, 0xFA, 0x03, 0x62, 0xAA, 0x41,  // ..u..b.A
                    /* 0D70 */  0x04, 0xE4, 0x84, 0x7F, 0x8A, 0x40, 0x24, 0x2E,  // .....@$.
                    /* 0D78 */  0x88, 0x80, 0x1C, 0xFD, 0x6F, 0x10, 0x88, 0x08,  // ....o...
                    /* 0D80 */  0x79, 0x1B, 0x04, 0x22, 0xF2, 0x9F, 0x9D, 0x87,  // y.."....
                    /* 0D88 */  0xC8, 0x40, 0x68, 0xFA, 0x87, 0xA1, 0x00, 0x2D,  // .@h....-
                    /* 0D90 */  0xE5, 0x11, 0x2B, 0x20, 0x4B, 0x54, 0x09, 0xC4,  // ..+ KT..
                    /* 0D98 */  0x04, 0x83, 0x08, 0xC8, 0xC1, 0x3E, 0x1B, 0x81,  // .....>..
                    /* 0DA0 */  0x48, 0x4A, 0x10, 0x01, 0x39, 0xF1, 0x87, 0x21,  // HJ..9..!
                    /* 0DA8 */  0x10, 0xC9, 0x0F, 0xA2, 0x01, 0x11, 0xA3, 0x20,  // ....... 
                    /* 0DB0 */  0x2C, 0x25, 0x08, 0x0D, 0xF8, 0xE1, 0x10, 0xA0,  // ,%......
                    /* 0DB8 */  0xD3, 0x82, 0x08, 0xC8, 0x2A, 0xFE, 0x85, 0x81,  // ....*...
                    /* 0DC0 */  0x88, 0x26, 0x10, 0x01, 0x59, 0xF5, 0x7B, 0x41,  // .&..Y.{A
                    /* 0DC8 */  0x40, 0x8E, 0x00, 0xA2, 0xE3, 0x00, 0xF9, 0x38,  // @......8
                    /* 0DD0 */  0x09, 0xC8, 0xE1, 0x40, 0x74, 0x4C, 0x20, 0xEF,  // ...@tL .
                    /* 0DD8 */  0xC5, 0x20, 0x24, 0x02, 0x08, 0xD5, 0xAF, 0x17,  // . $.....
                    /* 0DE0 */  0xD0, 0xFF, 0x7F, 0x82, 0x61, 0x40, 0x04, 0xE4,  // ....a@..
                    /* 0DE8 */  0x88, 0xBF, 0x91, 0x40, 0x24, 0x30, 0x88, 0x8E,  // ...@$0..
                    /* 0DF0 */  0x04, 0xE4, 0xAD, 0x14, 0x88, 0x68, 0x04, 0x11,  // .....h..
                    /* 0DF8 */  0x90, 0xF5, 0xBE, 0x76, 0x05, 0x64, 0xF5, 0x20,  // ...v.d. 
                    /* 0E00 */  0x02, 0x72, 0xD2, 0x7F, 0xC5, 0xA1, 0xB1, 0x3F,  // .r.....?
                    /* 0E08 */  0x8F, 0x40, 0xAC, 0xF4, 0x61, 0x11, 0x90, 0xC8,  // .@..a...
                    /* 0E10 */  0x06, 0xD1, 0x50, 0x88, 0x6A, 0x20, 0x16, 0x08,  // ..P.j ..
                    /* 0E18 */  0x44, 0x40, 0x0E, 0xFE, 0xBA, 0x14, 0x90, 0x55,  // D@.....U
                    /* 0E20 */  0x3C, 0x30, 0x02, 0x11, 0x45, 0x0F, 0x0E, 0x01,  // <0..E...
                    /* 0E28 */  0x59, 0x1F, 0x88, 0x80, 0xFC, 0xFF, 0x07         // Y......
                })
            }
        }

        Device (VALZ)
        {
            Name (_HID, EisaId ("TOS6208"))  // _HID: Hardware ID
            Name (_DDN, "VALZeneral")  // _DDN: DOS Device Name
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (WAKS)
                {
                    While ((ACVA == Zero)){}
                    WAKS = Zero
                }

                Return (0x0B)
            }

            Method (ENAB, 0, NotSerialized)
            {
                VALF = One
                SYSE = One
            }

            Method (INFO, 0, NotSerialized)
            {
                If ((AFRP != AFWP))
                {
                    Local0 = AFRP /* \AFRP */
                    Name (BUFF, Buffer (0x20){})
                    BUFF = AFIF /* \AFIF */
                    CreateWordField (BUFF, Local0, FFDT)
                    Local2 = FFDT /* \_SB_.VALZ.INFO.FFDT */
                    Local0 += 0x02
                    Local0 &= 0x1F
                    AFRP = Local0
                }
                Else
                {
                    Local2 = Zero
                }

                Return (Local2)
            }

            Method (GHCI, 6, Serialized)
            {
                CreateDWordField (Arg0, Zero, REAX)
                CreateWordField (Arg1, Zero, R_BX)
                Local0 = (REAX & 0xFF00)
                If ((Local0 == 0xFE00))
                {
                    If ((R_BX == 0xC000))
                    {
                        Return (G000 (Local0, R_BX, Arg2, Arg3, Arg4, Arg5))
                    }

                    If ((R_BX == 0xC800))
                    {
                        Return (G800 (Local0, R_BX, Arg2, Arg3, Arg4, Arg5))
                    }

                    If ((R_BX == 0xC801))
                    {
                        Return (G801 (Local0, R_BX, Arg2, Arg3, Arg4, Arg5))
                    }
                }

                If ((Local0 == 0xFF00))
                {
                    If ((R_BX == 0xC000))
                    {
                        Return (G000 (Local0, R_BX, Arg2, Arg3, Arg4, Arg5))
                    }

                    If ((R_BX == 0xC801))
                    {
                        Return (G801 (Local0, R_BX, Arg2, Arg3, Arg4, Arg5))
                    }
                }

                Return (GCH0 (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5))
            }

            Method (AOPC, 1, Serialized)
            {
                Local1 = 0x8300
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    SMBR (0xFA00, 0x3F00, Arg0++, Zero, Zero, Zero, 0xB2)
                    Local1 = OEAX /* \OEAX */
                }

                Return (Local1)
            }

            Method (GOPC, 0, Serialized)
            {
                Acquire (MTXU, 0xFFFF)
                Name (BUFF, Buffer (0x0402){})
                PRES = Zero
                SMBR (0xFA00, 0x3F00, Zero, Zero, Zero, Zero, 0xB2)
                BUFF = PRES /* \PRES */
                Release (MTXU)
                Return (BUFF) /* \_SB_.VALZ.GOPC.BUFF */
            }

            Method (UMAI, 5, Serialized)
            {
                Acquire (MTXU, 0xFFFF)
                Local0 = (Arg0 & 0xFFFF)
                If ((Local0 == 0x0302))
                {
                    Local1 = (Arg3 << 0x10)
                    Local1 |= Arg1
                }
                Else
                {
                    Local1 = Arg1
                }

                Local0 &= 0xFF
                UMSB = Arg2
                UUIB = Arg4
                SMBR (0xFA00, 0x3F01, Arg0, Local1, Zero, Zero, 0xB2)
                Local1 = OEAX /* \OEAX */
                If ((Local1 == Zero))
                {
                    If ((Local0 != One))
                    {
                        Local1 = OEDX /* \OEDX */
                    }
                }

                Release (MTXU)
                Return (Local1)
            }

            Method (GFPD, 0, Serialized)
            {
                Acquire (MTXU, 0xFFFF)
                Name (BUFF, Buffer (0x1000){})
                PRES = Zero
                SMBR (0xFA00, 0x3A00, Zero, Zero, Zero, Zero, 0xB2)
                BUFF = PRES /* \PRES */
                PRES = Zero
                Release (MTXU)
                Return (BUFF) /* \_SB_.VALZ.GFPD.BUFF */
            }

            Scope (\)
            {
                Method (GCH0, 6, Serialized)
                {
                    CreateDWordField (Arg0, Zero, REG0)
                    CreateDWordField (Arg1, Zero, REG1)
                    CreateDWordField (Arg2, Zero, REG2)
                    CreateDWordField (Arg3, Zero, REG3)
                    CreateDWordField (Arg4, Zero, REG4)
                    CreateDWordField (Arg5, Zero, REG5)
                    Acquire (MUTX, 0xFFFF)
                    Local3 = 0x2710
                    Local0 = Zero
                    While (One)
                    {
                        BIOT (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If ((Local1 == 0x2100))
                        {
                            Local0 += 0x32
                            If ((Local0 >= Local3))
                            {
                                Break
                            }
                            Else
                            {
                                Sleep (0x32)
                            }
                        }
                        Else
                        {
                            Break
                        }
                    }

                    Name (BUFF, Package (0x06){})
                    BUFF [Zero] = OEAX /* \OEAX */
                    BUFF [One] = OEBX /* \OEBX */
                    BUFF [0x02] = OECX /* \OECX */
                    BUFF [0x03] = OEDX /* \OEDX */
                    BUFF [0x04] = OESI /* \OESI */
                    BUFF [0x05] = OEDI /* \OEDI */
                    Release (MUTX)
                    Return (BUFF) /* \GCH0.BUFF */
                }

                Method (G000, 6, NotSerialized)
                {
                    Name (BUFF, Package (0x06){})
                    CreateDWordField (Arg2, Zero, RECX)
                    CreateDWordField (Arg3, Zero, REDX)
                    CreateDWordField (Arg4, Zero, RESI)
                    CreateDWordField (Arg5, Zero, REDI)
                    CreateByteField (Arg2, Zero, R_CL)
                    BUFF [Zero] = Zero
                    BUFF [One] = Arg1
                    BUFF [0x02] = RECX /* \G000.RECX */
                    BUFF [0x03] = REDX /* \G000.REDX */
                    BUFF [0x04] = RESI /* \G000.RESI */
                    BUFF [0x05] = REDI /* \G000.REDI */
                    If (GCVS)
                    {
                        If ((Arg0 == 0xFE00))
                        {
                            If ((R_CL == Zero))
                            {
                                Local0 = TNVS /* \TNVS */
                                BUFF [0x02] = Local0
                            }
                            ElseIf ((R_CL == 0x07))
                            {
                                Local0 = DPI0 /* \DPI0 */
                                Local1 = DPI1 /* \DPI1 */
                                BUFF [0x02] = Local0
                                BUFF [0x03] = Local1
                                Local0 = DPI2 /* \DPI2 */
                                Local1 = DPI3 /* \DPI3 */
                                BUFF [0x04] = Local0
                                BUFF [0x05] = Local1
                            }
                            ElseIf ((R_CL == 0x08))
                            {
                                SMBR (0xFA00, 0x3008, Zero, Zero, Zero, Zero, 0xB2)
                                BUFF [0x02] = OECX /* \OECX */
                                BUFF [0x03] = OEDX /* \OEDX */
                                BUFF [0x04] = OESI /* \OESI */
                                BUFF [0x05] = OEDI /* \OEDI */
                            }
                            ElseIf ((R_CL == 0x09))
                            {
                                Local0 = DPE0 /* \DPE0 */
                                Local1 = DPE1 /* \DPE1 */
                                BUFF [0x02] = Local0
                                BUFF [0x03] = Local1
                                Local0 = DPE2 /* \DPE2 */
                                Local1 = DPE3 /* \DPE3 */
                                BUFF [0x04] = Local0
                                BUFF [0x05] = Local1
                            }
                            ElseIf ((R_CL == 0x0A))
                            {
                                Local0 = DPR0 /* \DPR0 */
                                Local1 = DPR1 /* \DPR1 */
                                BUFF [0x02] = Local0
                                BUFF [0x03] = Local1
                                Local0 = DPR2 /* \DPR2 */
                                Local1 = DPR3 /* \DPR3 */
                                BUFF [0x04] = Local0
                                BUFF [0x05] = Local1
                            }
                            Else
                            {
                                BUFF [Zero] = 0x8300
                            }
                        }
                        Else
                        {
                            CreateWordField (Arg3, Zero, R_DX)
                            If ((R_CL == Zero))
                            {
                                If ((R_DX == Zero))
                                {
                                    TNVS = Zero
                                }
                                Else
                                {
                                    TNVS = One
                                }
                            }
                            Else
                            {
                                BUFF [Zero] = 0x8300
                            }
                        }
                    }
                    Else
                    {
                        BUFF [Zero] = 0x8000
                    }

                    Return (BUFF) /* \G000.BUFF */
                }

                Method (G800, 6, NotSerialized)
                {
                    Name (BUFF, Package (0x06){})
                    BUFF [Zero] = Zero
                    BUFF [One] = Arg1
                    BUFF [0x02] = One
                    BUFF [0x03] = Arg3
                    BUFF [0x04] = Arg4
                    BUFF [0x05] = Arg5
                    Return (BUFF) /* \G800.BUFF */
                }

                Method (G801, 6, NotSerialized)
                {
                    CreateDWordField (Arg2, Zero, RECX)
                    CreateDWordField (Arg3, Zero, REDX)
                    CreateDWordField (Arg4, Zero, RESI)
                    CreateDWordField (Arg5, Zero, REDI)
                    Local0 = 0x8300
                    Local1 = RECX /* \G801.RECX */
                    If ((REDX == One))
                    {
                        Local0 = Zero
                        If ((Arg0 == 0xFE00))
                        {
                            Local1 = PULD /* \PULD */
                            Local2 = PULA /* \PULA */
                            Local2 <<= 0x08
                            Local1 |= Local2
                        }
                        Else
                        {
                            Local2 = (Local1 & 0xFF)
                            Local3 = (Local1 >> 0x08)
                            PULD = Local2
                            PULA = Local3
                        }
                    }

                    If ((REDX == 0x02))
                    {
                        Local0 = Zero
                        If ((Arg0 == 0xFE00))
                        {
                            Local1 = BCLD /* \BCLD */
                            Local2 = BCLA /* \BCLA */
                            Local2 <<= 0x08
                            Local1 |= Local2
                        }
                        Else
                        {
                            Local2 = (Local1 & 0xFF)
                            Local3 = (Local1 >> 0x08)
                            BCLD = Local2
                            BCLA = Local3
                        }
                    }

                    Name (BUFF, Package (0x06){})
                    BUFF [Zero] = Local0
                    BUFF [One] = Arg1
                    BUFF [0x02] = Local1
                    BUFF [0x03] = REDX /* \G801.REDX */
                    BUFF [0x04] = RESI /* \G801.RESI */
                    BUFF [0x05] = REDI /* \G801.REDI */
                    Return (BUFF) /* \G801.BUFF */
                }
            }

            Method (VNTF, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0xFFFF)
                Local1 = (Arg0 >> 0x10)
                If ((Local1 == One))
                {
                    PNOT ()
                }
            }

            Method (PLST, 0, NotSerialized)
            {
                Name (BUFF, Buffer (One)
                {
                     0x00                                             // .
                })
                CreateBitField (BUFF, Zero, PNL0)
                CreateBitField (BUFF, One, PNL1)
                PNL0 = PNLS /* \PNLS */
                PNL1 = LIDS /* \LIDS */
                Return (BUFF) /* \_SB_.VALZ.PLST.BUFF */
            }

            Method (MCNT, 0, Serialized)
            {
                Name (BUFF, Buffer (0x08){})
                CreateDWordField (BUFF, Zero, CAPA)
                CreateDWordField (BUFF, 0x04, CURR)
                SMBR (0xFA00, 0x3001, Zero, Zero, Zero, Zero, 0xB2)
                CAPA = OECX /* \OECX */
                CURR = OEDX /* \OEDX */
                Return (BUFF) /* \_SB_.VALZ.MCNT.BUFF */
            }

            Method (MDSP, 0, Serialized)
            {
                Name (BUFF, Buffer (0x08){})
                CreateDWordField (BUFF, Zero, CAPA)
                CreateDWordField (BUFF, 0x04, CURR)
                SMBR (0xFA00, 0x3002, Zero, Zero, Zero, Zero, 0xB2)
                CAPA = OECX /* \OECX */
                CURR = OEDX /* \OEDX */
                Return (BUFF) /* \_SB_.VALZ.MDSP.BUFF */
            }

            Method (VCHG, 1, Serialized)
            {
                HDSP (Arg0)
            }

            Method (VCID, 0, NotSerialized)
            {
                DLID = DCID /* \DCID */
                If (DCID)
                {
                    DCKD = One
                }

                Return (DCID) /* \DCID */
            }

            Method (VUID, 0, NotSerialized)
            {
                DSRN = DSNB /* \DSNB */
                Return (DSNB) /* \DSNB */
            }

            Method (VDCK, 1, NotSerialized)
            {
                If (Arg0)
                {
                    Local0 = (DCSS & 0x05)
                    If ((Local0 == 0x05))
                    {
                        ^^PCI0.PDRC.TRP4 = 0x41
                        Reset (DKSQ)
                        If (Wait (DKSQ, 0x0BB8))
                        {
                            Local0 = One
                        }

                        Return (One)
                    }

                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }

            Method (VEJ0, 1, NotSerialized)
            {
                If (DCKD)
                {
                    DCKD = Zero
                    ^^PCI0.PDRC.TRP4 = 0x40
                    Reset (DKSQ)
                    If (Wait (DKSQ, 0x1388))
                    {
                        Local0 = One
                    }
                }

                DLID = Zero
                DSRN = Zero
                Notify (VALZ, 0x83) // Device-Specific Change
                PNOT ()
            }

            Method (UDSP, 1, NotSerialized)
            {
                UDNE = Arg0
            }

            Method (DLSZ, 0, NotSerialized)
            {
                Return (One)
            }

            Method (DLIB, 0, NotSerialized)
            {
                Name (BUFF, Buffer (0x10)
                {
                    /* 0000 */  0x80, 0x20, 0x03, 0x0C, 0x00, 0x00, 0x00, 0x00,  // . ......
                    /* 0008 */  0x86, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                CreateWordField (BUFF, 0x0A, DID1)
                Local0 = DUSB /* \DUSB */
                If ((Local0 == 0xFF))
                {
                    BUFF [Zero] = Zero
                }
                Else
                {
                    If ((Local0 < 0x08))
                    {
                        BUFF [0x05] = 0xE8
                        DID1 = ^^PCI0.EHC1.DVID /* \_SB_.PCI0.EHC1.DVID */
                    }
                    Else
                    {
                        BUFF [0x05] = 0xD0
                        DID1 = ^^PCI0.EHC2.DVID /* \_SB_.PCI0.EHC2.DVID */
                        Local0 -= 0x08
                    }

                    Local0++
                    BUFF [0x04] = Local0
                }

                Return (BUFF) /* \_SB_.VALZ.DLIB.BUFF */
            }

            Method (ODLS, 0, NotSerialized)
            {
                Return (ODNA) /* \ODNA */
            }

            Method (ODLT, 0, NotSerialized)
            {
                Name (BUFF, Buffer (One){})
                CreateByteField (BUFF, Zero, DTYP)
                If ((^^PCI0.SAT0.PSCC != One))
                {
                    DTYP = 0x02
                }

                Return (BUFF) /* \_SB_.VALZ.ODLT.BUFF */
            }

            Method (ODLB, 0, NotSerialized)
            {
                Name (BUFF, Buffer (0x10){})
                CreateWordField (BUFF, Zero, VNID)
                CreateWordField (BUFF, 0x02, DVID)
                CreateWordField (BUFF, 0x04, SVID)
                CreateWordField (BUFF, 0x06, SSID)
                CreateByteField (BUFF, 0x08, RVID)
                CreateByteField (BUFF, 0x09, PRTN)
                VNID = ^^PCI0.SAT0.VNID /* External reference */
                DVID = ^^PCI0.SAT0.DVID /* External reference */
                SVID = ^^PCI0.SAT0.SVID /* External reference */
                SSID = ^^PCI0.SAT0.SSID /* External reference */
                RVID = ^^PCI0.SAT0.RVID /* External reference */
                If ((^^PCI0.SAT0.PSCC != One))
                {
                    PRTN = ODDP /* \ODDP */
                }

                Return (BUFF) /* \_SB_.VALZ.ODLB.BUFF */
            }

            Method (HMB1, 0, NotSerialized)
            {
                Name (BUFF, Package (0x06){})
                BUFF [Zero] = SNR1 /* \SNR1 */
                BUFF [One] = CCM1 /* \CCM1 */
                BUFF [0x02] = TDT1 /* \TDT1 */
                BUFF [0x03] = TCC1 /* \TCC1 */
                BUFF [0x04] = TDC1 /* \TDC1 */
                BUFF [0x05] = TFC1 /* \TFC1 */
                Return (BUFF) /* \_SB_.VALZ.HMB1.BUFF */
            }

            Method (HMB2, 0, NotSerialized)
            {
                Name (BUFF, Package (0x06){})
                BUFF [Zero] = SNR2 /* \SNR2 */
                BUFF [One] = CCM2 /* \CCM2 */
                BUFF [0x02] = TDT2 /* \TDT2 */
                BUFF [0x03] = TCC2 /* \TCC2 */
                BUFF [0x04] = TDC2 /* \TDC2 */
                BUFF [0x05] = TFC2 /* \TFC2 */
                Return (BUFF) /* \_SB_.VALZ.HMB2.BUFF */
            }

            Method (SMDW, 5, Serialized)
            {
                SMHA = Arg0
                SMOF = Arg1
                SMWD = Arg4
                SMBR (0xFA00, 0xC000, Zero, Zero, Zero, Zero, 0xB2)
                OEAX &= 0xFF00
                If ((OEAX == Zero))
                {
                    Local0 = SMOF /* \SMOF */
                    Local0 <<= 0x08
                    Local0 |= 0x05
                    Local0 <<= 0x08
                    Local0 |= SMTY /* \SMTY */
                    SMBR (0xFA00, 0x1100, Local0, SMLE, SMHA, Zero, 0xB2)
                    OEAX &= 0xFF00
                }

                Return (OEAX) /* \OEAX */
            }
        }

        Device (HAPS)
        {
            Name (_HID, EisaId ("TOS620A"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HAPE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PTLV, 1, NotSerialized)
            {
                Local0 = Arg0
                Local0 |= 0x3500
                SMBR (0xFA00, Local0, Zero, Zero, Zero, Zero, 0xB2)
            }

            Method (RSSS, 0, NotSerialized)
            {
                SMBR (0xFA00, 0x3580, Zero, Zero, Zero, Zero, 0xB2)
            }
        }

        Device (BT)
        {
            Name (_HID, EisaId ("TOS6205"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (BTMD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (BTST, 0, Serialized)
            {
                OESI = Zero
                SMBR (0xFE00, 0x4D, One, 0x7D00, Zero, Zero, 0xB2)
                Local0 = One
                While (Local0)
                {
                    SMBR (0xFE00, 0x4D, 0x0101, 0x7D00, Zero, Zero, 0xB2)
                    Local2 = OESI /* \OESI */
                    Local1 = (OEAX & 0xFF00)
                    If (Local1)
                    {
                        Local1 = (OEAX & 0xFF)
                        If ((Local1 != 0x20))
                        {
                            Local2 = Zero
                            Local0 = Zero
                        }
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }

                Local0 = (Local2 & 0x02)
                Local0 <<= 0x06
                Local1 = (Local2 & 0x04)
                Local1 <<= 0x04
                Local0 |= Local1
                Local3 = (Local2 & 0x10)
                Local3 >>= 0x04
                Local0 |= Local3
                Return (Local0)
            }

            Method (AUSB, 0, Serialized)
            {
                If (BTMD)
                {
                    SMBR (0xFF00, 0x4D, One, 0x7C00, 0x03, Zero, 0xB2)
                    Local0 = One
                    While (Local0)
                    {
                        SMBR (0xFF00, 0x4D, 0x0101, 0x7C00, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If (Local1)
                        {
                            Local1 = (OEAX & 0xFF)
                            If ((Local1 != 0x20))
                            {
                                Local0 = Zero
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }
                }
            }

            Method (DUSB, 0, Serialized)
            {
                If (BTMD)
                {
                    SMBR (0xFF00, 0x4D, One, 0x7C00, 0x04, Zero, 0xB2)
                    Local0 = One
                    While (Local0)
                    {
                        SMBR (0xFF00, 0x4D, 0x0101, 0x7C00, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If (Local1)
                        {
                            Local1 = (OEAX & 0xFF)
                            If ((Local1 != 0x20))
                            {
                                Local0 = Zero
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }
                }
            }

            Method (BTPO, 0, Serialized)
            {
                If (BTMD)
                {
                    SMBR (0xFF00, 0x4D, One, 0x7C00, One, Zero, 0xB2)
                    Local0 = One
                    While (Local0)
                    {
                        SMBR (0xFF00, 0x4D, 0x0101, 0x7C00, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If (Local1)
                        {
                            Local1 = (OEAX & 0xFF)
                            If ((Local1 != 0x20))
                            {
                                Local0 = Zero
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }
                }
            }

            Method (BTPF, 0, Serialized)
            {
                If (BTMD)
                {
                    SMBR (0xFF00, 0x4D, One, 0x7C00, 0x02, Zero, 0xB2)
                    Local0 = One
                    While (Local0)
                    {
                        SMBR (0xFF00, 0x4D, 0x0101, 0x7C00, Zero, Zero, 0xB2)
                        Local1 = (OEAX & 0xFF00)
                        If (Local1)
                        {
                            Local1 = (OEAX & 0xFF)
                            If ((Local1 != 0x20))
                            {
                                Local0 = Zero
                            }
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }
                }
            }

            Method (RLFO, 0, Serialized)
            {
                If (BTMD)
                {
                    SMBR (0xFF00, 0x56, One, 0xFFFE, Zero, Zero, 0xB2)
                }
            }

            Method (RLOC, 0, Serialized)
            {
                If (BTMD)
                {
                    SMBR (0xFF00, 0x56, Zero, 0xFFFE, Zero, Zero, 0xB2)
                }
            }

            Method (RLST, 0, Serialized)
            {
                Local0 = 0xFF
                If (BTMD)
                {
                    SMBR (0xFE00, 0x56, Zero, 0xFFFE, Zero, Zero, 0xB2)
                    Local1 = (OEAX & 0xFF00)
                    If ((Local1 == Zero))
                    {
                        Local0 = (OECX & 0xFFFF)
                    }
                }

                Return (Local0)
            }
        }

        Device (ADP1)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (_STA, 0x0F)  // _STA: Status
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Return (PWRS) /* \PWRS */
            }
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x02, 0x04))
            }

            Name (_STA, 0x0B)  // _STA: Status
        }

        Device (LID)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Return (LIDS) /* \LIDS */
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (Package (0x02)
                {
                    0x14, 
                    0x04
                })
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                EWLD = Arg0
            }
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (BES1)
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Name (BUFF, Package (0x0D){})
                BUFF [Zero] = Zero
                Local2 = BDV1 /* \BDV1 */
                Local0 = (BDC1 * Local2)
                Divide (Local0, 0x03E8, Local1, Local0)
                BUFF [One] = Local0
                Local2 = BPV1 /* \BPV1 */
                If (((BPV1 == 0xFFFFFFFF) || (BLF1 == 0xFFFFFFFF)))
                {
                    Local0 = 0xFFFFFFFF
                }
                Else
                {
                    Local0 = (BLF1 * Local2)
                    Divide (Local0, 0x03E8, Local1, Local0)
                }

                BUFF [0x02] = Local0
                BUFF [0x03] = BTC1 /* \BTC1 */
                BUFF [0x04] = BDV1 /* \BDV1 */
                If (((BPV1 == 0xFFFFFFFF) || (BCW1 == 0xFFFFFFFF)))
                {
                    Local0 = 0xFFFFFFFF
                }
                Else
                {
                    Local0 = (BCW1 * Local2)
                    Divide (Local0, 0x03E8, Local1, Local0)
                }

                BUFF [0x05] = Local0
                If (((BPV1 == 0xFFFFFFFF) || (BCL1 == 0xFFFFFFFF)))
                {
                    Local0 = 0xFFFFFFFF
                }
                Else
                {
                    Local0 = (BCL1 * Local2)
                    Divide (Local0, 0x03E8, Local1, Local0)
                }

                BUFF [0x06] = Local0
                If (((BPV1 == 0xFFFFFFFF) || (BG11 == 0xFFFFFFFF)))
                {
                    Local0 = 0xFFFFFFFF
                }
                Else
                {
                    Local0 = (BG11 * Local2)
                    Divide (Local0, 0x03E8, Local1, Local0)
                }

                BUFF [0x07] = Local0
                If (((BPV1 == 0xFFFFFFFF) || (BG21 == 0xFFFFFFFF)))
                {
                    Local0 = 0xFFFFFFFF
                }
                Else
                {
                    Local0 = (BG21 * Local2)
                    Divide (Local0, 0x03E8, Local1, Local0)
                }

                BUFF [0x08] = Local0
                BUFF [0x09] = BMN1 /* \BMN1 */
                BUFF [0x0A] = BSN1 /* \BSN1 */
                BUFF [0x0B] = BTP1 /* \BTP1 */
                BUFF [0x0C] = BOI1 /* \BOI1 */
                Return (BUFF) /* \_SB_.BAT1._BIF.BUFF */
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If (BES2)
                {
                    Local0 = (BST1 & 0x03)
                    Local1 = (BST2 & 0x03)
                    If ((Local0 || Local1))
                    {
                        Local0 = (BPR1 * BPV1) /* \BPV1 */
                        Divide (Local0, 0x07D0, Local1, Local0)
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                ElseIf ((BST1 && 0x03))
                {
                    Local0 = (BPR1 * BPV1) /* \BPV1 */
                    Divide (Local0, 0x03E8, Local1, Local0)
                }
                Else
                {
                    Local0 = Zero
                }

                Name (BUFF, Package (0x04){})
                BUFF [Zero] = BST1 /* \BST1 */
                BUFF [One] = Local0
                If (((BPV1 == 0xFFFFFFFF) || (BRC1 == 0xFFFFFFFF)))
                {
                    Local0 = 0xFFFFFFFF
                }
                Else
                {
                    Local0 = (BRC1 * BPV1) /* \BPV1 */
                    Divide (Local0, 0x03E8, Local1, Local0)
                }

                If (GP90)
                {
                    If (BSTG)
                    {
                        BUFF [Zero] = 0x05
                        Local2 = BDV1 /* \BDV1 */
                        Local0 = (BCW1 * Local2)
                        Divide (Local0, 0x2710, Local2, Local0)
                        BSTG = Zero
                    }
                    Else
                    {
                        BSTG = One
                    }
                }

                BUFF [0x02] = Local0
                BUFF [0x03] = BPV1 /* \BPV1 */
                Return (BUFF) /* \_SB_.BAT1._BST.BUFF */
            }
        }

        Method (UNDD, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x03)
            Local1 = (Arg0 & 0x0100)
            Local1 >>= 0x03
            Local0 |= Local1
            Local1 = (Arg0 & 0x80)
            Local1 >>= 0x02
            Local0 |= Local1
            Local1 = (Arg0 & 0x40)
            Local0 |= Local1
            Local1 = (Arg0 & 0x10)
            Local1 <<= 0x03
            Local0 |= Local1
            NXDD = Local0
        }

        Method (IPB0, 0, NotSerialized)
        {
            Local0 = (GL06 & 0x40)
            If ((Local0 == Zero))
            {
                Return (Zero)
            }

            Return (One)
        }

        Method (IPB1, 0, NotSerialized)
        {
            Local0 = (GL06 & 0x40)
            If ((Local0 == Zero))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (IPC0, 0, NotSerialized)
        {
            Return (One)
        }

        Method (IPC1, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (IPD0, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (IPD1, 0, NotSerialized)
        {
            Return (One)
        }

        Method (CPC0, 0, NotSerialized)
        {
            Return (One)
        }

        Method (CPC1, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (CPD0, 0, NotSerialized)
        {
            Local0 = (GL06 & 0x10)
            If ((Local0 == Zero))
            {
                Return (Zero)
            }

            Return (One)
        }

        Method (CPD1, 0, NotSerialized)
        {
            Local0 = (GL06 & 0x10)
            If ((Local0 == Zero))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (CPE0, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (CPE1, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (CPF0, 0, NotSerialized)
        {
            Return (Zero)
        }

        Method (CPF1, 0, NotSerialized)
        {
            Return (Zero)
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 0000010C
[008h 0008   1]                     Revision : 05
[009h 0009   1]                     Checksum : FF
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A008C   "
[018h 0024   4]                 Oem Revision : 00000005
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]                 FACS Address : CC095000
[028h 0040   4]                 DSDT Address : CC0C8000
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : F0
[035h 0053   1]           ACPI Disable Value : F1
[036h 0054   1]               S4BIOS Command : F2
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00001800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001850
[04Ch 0076   4]       PM Timer Block Address : 00001808
[050h 0080   4]           GPE0 Block Address : 00001820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 10
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 10
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 0039
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 7E
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 000086A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : FE
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 00000000CC095000
[08Ch 0140   8]                 DSDT Address : 00000000CC0C8000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 03 [DWord Access:32]
[098h 0152   8]                      Address : 0000000000001800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 03 [DWord Access:32]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 03 [DWord Access:32]
[0B0h 0176   8]                      Address : 0000000000001804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 03 [DWord Access:32]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 03 [DWord Access:32]
[0C8h 0200   8]                      Address : 0000000000001850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000001808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 80
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 03 [DWord Access:32]
[0E0h 0224   8]                      Address : 0000000000001820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 03 [DWord Access:32]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 01 [SystemIO]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 03 [DWord Access:32]
[0F8h 0248   8]                      Address : 0000000000001805

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 01 [SystemIO]
[101h 0257   1]                    Bit Width : 08
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 03 [DWord Access:32]
[104h 0260   8]                      Address : 0000000000001801

/**** ACPI table terminates in the middle of a data structure! (dump table) */

Raw Table Data: Length 268 (0x10C)

    0000: 46 41 43 50 0C 01 00 00 05 FF 54 4F 53 48 49 42  // FACP......TOSHIB
    0010: 41 30 30 38 43 20 20 20 05 00 00 00 4C 4F 48 52  // A008C   ....LOHR
    0020: 5F 00 00 00 00 50 09 CC 00 80 0C CC 00 02 09 00  // _....P..........
    0030: B2 00 00 00 F0 F1 F2 00 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 20 18 00 00 00 00 00 00 04 02 01 04 10 00 10 00  //  ...............
    0060: 65 00 39 00 00 00 00 00 01 03 0D 7E 00 03 00 00  // e.9........~....
    0070: A5 86 00 00 01 08 00 00 B2 00 00 00 00 00 00 00  // ................
    0080: FE 00 00 00 00 50 09 CC 00 00 00 00 00 80 0C CC  // .....P..........
    0090: 00 00 00 00 01 20 00 03 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 03 00 00 00 00 00 00 00 00 01 10 00 03  // ................
    00B0: 04 18 00 00 00 00 00 00 01 00 00 03 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 03 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 80 00 03  // . ..............
    00E0: 20 18 00 00 00 00 00 00 01 00 00 03 00 00 00 00  //  ...............
    00F0: 00 00 00 00 01 08 00 03 05 18 00 00 00 00 00 00  // ................
    0100: 01 08 00 03 01 18 00 00 00 00 00 00              // ............


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 5C
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A008C   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000CC8F6818

[034h 0052   2]                Subtable Type : 0001
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]          S3PT Record Address : 00000000CC8F6798

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 5C 54 4F 53 48 49 42  // FPDTD....\TOSHIB
    0010: 41 30 30 38 43 20 20 20 00 00 00 00 4C 4F 48 52  // A008C   ....LOHR
    0020: 5F 00 00 00 00 00 10 01 00 00 00 00 18 68 8F CC  // _............h..
    0030: 00 00 00 00 01 00 10 01 00 00 00 00 98 67 8F CC  // .............g..
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : C5
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A008C   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 00
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 C5 54 4F 53 48 49 42  // HPET8.....TOSHIB
    0010: 41 30 30 38 43 20 20 20 01 00 00 00 4C 4F 48 52  // A008C   ....LOHR
    0020: 5F 00 00 00 01 A2 86 80 00 00 00 00 00 00 D0 FE  // _...............
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 95
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A008C   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 95 54 4F 53 48 49 42  // MCFG<.....TOSHIB
    0010: 41 30 30 38 43 20 20 20 01 00 00 00 4C 4F 48 52  // A008C   ....LOHR
    0020: 5F 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // _...............
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 07
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A008C   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036  49] Software Licensing Structure : \
    01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 \
    1D 00 00 00 57 44 37 59 4E 2D 46 43 4D 32 47 2D \
    46 47 43 43 38 2D 38 32 32 58 59 2D 48 54 38 4D \
    43 

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 07 54 4F 53 48 49 42  // MSDMU.....TOSHIB
    0010: 41 30 30 38 43 20 20 20 00 00 00 00 4C 4F 48 52  // A008C   ....LOHR
    0020: 5F 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // _...............
    0030: 00 00 00 00 1D 00 00 00 57 44 37 59 4E 2D 46 43  // ........WD7YN-FC
    0040: 4D 32 47 2D 46 47 43 43 38 2D 38 32 32 58 59 2D  // M2G-FGCC8-822XY-
    0050: 48 54 38 4D 43                                   // HT8MC


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 6B
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A008C   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 01 D1 F8 E2 \
    2E 9E 56 65 20 B2 3C D6 8C A8 AB EE E9 1D D7 45 \
    EB 6B 72 AD 45 B9 29 86 AE AA 8C 53 39 F4 25 BE \
    B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60 A0 72 47 E6 \
    F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC 1A 6E AF D4 \
    7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90 F5 B0 34 F2 \
    03 C2 9A 7D DD E7 52 4C E8 63 04 6B 00 A7 B5 AB \
    C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A 56 9B D7 45 \
    81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5 01 00 00 00 \
    B6 00 00 00 00 00 02 00 54 4F 53 48 49 42 41 30 \
    30 38 43 20 20 20 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 9E 1A C8 63 3A 5E 1C C5 69 75 47 55 18 4F \
    C2 50 B7 46 B8 F4 6D 11 FD 66 40 F4 3C 70 88 1E \
    B0 1B 24 A4 C5 68 6D B3 84 8C E3 94 DC 3F 04 60 \
    65 22 41 3D A0 67 A9 6C EE 24 8A B6 5D A7 D6 45 \
    FB E8 4E 80 7C C7 C9 15 57 25 90 2F 9A 6D BB E4 \
    50 D0 2F BA 92 03 7F 6E 5A 90 33 B5 0E 36 90 D2 \
    99 EE DC FF 3D 63 F5 E5 6D 9F 14 6F EA 7A 09 EB \
    82 1F DD 0F 6C C0 97 5A 88 A9 28 E3 56 DD 63 B7 \
    2D E7 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 6B 54 4F 53 48 49 42  // SLICv....kTOSHIB
    0010: 41 30 30 38 43 20 20 20 00 00 00 00 4C 4F 48 52  // A008C   ....LOHR
    0020: 5F 00 00 00 00 00 00 00 9C 00 00 00 06 02 00 00  // _...............
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 01 D1 F8 E2 2E 9E 56 65 20 B2 3C D6 8C A8 AB EE  // ......Ve .<.....
    0050: E9 1D D7 45 EB 6B 72 AD 45 B9 29 86 AE AA 8C 53  // ...E.kr.E.)....S
    0060: 39 F4 25 BE B7 D3 F9 D8 F9 C1 90 AB F9 D4 05 60  // 9.%............`
    0070: A0 72 47 E6 F9 09 15 3F 60 C3 C7 0E 09 C9 D1 BC  // .rG....?`.......
    0080: 1A 6E AF D4 7D F3 9D 5F 5A 51 1E 68 C9 F6 3D 90  // .n..}.._ZQ.h..=.
    0090: F5 B0 34 F2 03 C2 9A 7D DD E7 52 4C E8 63 04 6B  // ..4....}..RL.c.k
    00A0: 00 A7 B5 AB C0 6F 35 E9 7A 14 D4 F4 4F 29 F1 6A  // .....o5.z...O).j
    00B0: 56 9B D7 45 81 F3 37 E3 A5 4B FD 53 5B 3C E9 A5  // V..E..7..K.S[<..
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 54 4F 53 48  // ............TOSH
    00D0: 49 42 41 30 30 38 43 20 20 20 57 49 4E 44 4F 57  // IBA008C   WINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 9E 1A C8 63 3A 5E 1C C5 69 75  // .........c:^..iu
    0100: 47 55 18 4F C2 50 B7 46 B8 F4 6D 11 FD 66 40 F4  // GU.O.P.F..m..f@.
    0110: 3C 70 88 1E B0 1B 24 A4 C5 68 6D B3 84 8C E3 94  // <p....$..hm.....
    0120: DC 3F 04 60 65 22 41 3D A0 67 A9 6C EE 24 8A B6  // .?.`e"A=.g.l.$..
    0130: 5D A7 D6 45 FB E8 4E 80 7C C7 C9 15 57 25 90 2F  // ]..E..N.|...W%./
    0140: 9A 6D BB E4 50 D0 2F BA 92 03 7F 6E 5A 90 33 B5  // .m..P./....nZ.3.
    0150: 0E 36 90 D2 99 EE DC FF 3D 63 F5 E5 6D 9F 14 6F  // .6......=c..m..o
    0160: EA 7A 09 EB 82 1F DD 0F 6C C0 97 5A 88 A9 28 E3  // .z......l..Z..(.
    0170: 56 DD 63 B7 2D E7                                // V.c.-.


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_PR_.CPPC, IntObj)
    External (_PR_.CPU0, DeviceObj)
    External (BAOP, UnknownObj)
    External (CFGD, UnknownObj)
    External (DAOP, UnknownObj)
    External (GSVM, UnknownObj)
    External (HPSU, IntObj)
    External (PDC0, UnknownObj)
    External (PULA, IntObj)
    External (PULD, IntObj)
    External (PWRS, IntObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU0)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Local0 = Zero
            If ((GSVM == One))
            {
                If (HPSU)
                {
                    If (PWRS)
                    {
                        Local0 = PULA /* External reference */
                    }
                    Else
                    {
                        Local0 = PULD /* External reference */
                    }
                }

                Local5 = Zero
                If ((DAOP & 0x10))
                {
                    Local5 = 0x07
                }

                If ((BAOP & 0x80))
                {
                    If ((PWRS == Zero))
                    {
                        Local5 = 0x07
                    }

                    If ((BAOP & 0x02))
                    {
                        Local5 = 0x05
                    }
                }

                If ((BAOP & One))
                {
                    Local5 = 0x03
                }

                If ((Local5 != Zero))
                {
                    If (CondRefOf (_PSS))
                    {
                        Local0 = DerefOf (DerefOf (_PSS [Zero]) [Zero])
                        Local1 = SizeOf (_PSS)
                        Local1--
                        Local2 = DerefOf (DerefOf (_PSS [Local1]) [Zero])
                        Local0 = ((Local0 * Local5) / 0x0A)
                        If ((Local2 > Local0))
                        {
                            Return (Local1)
                        }
                        Else
                        {
                            Local3 = Zero
                            While ((Local3 <= Local1))
                            {
                                Local4 = DerefOf (DerefOf (_PSS [Local3]) [Zero])
                                If ((Local4 <= Local0))
                                {
                                    Return (Local3)
                                }

                                Local3++
                            }
                        }
                    }
                }
            }

            If ((Local0 > PPCD))
            {
                Return (Local0)
            }

            Return (PPCD) /* \_PR_.CPU0.PPCD */
        }

        Name (PPCD, Zero)
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            PPCD = \_PR.CPPC /* External reference */
            If (((CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Name (_PSS, Package (0x10)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000009C5, 
                0x00009088, 
                0x0000000A, 
                0x0000000A, 
                0x00001F00, 
                0x00001F00
            }, 

            Package (0x06)
            {
                0x000009C4, 
                0x00009088, 
                0x0000000A, 
                0x0000000A, 
                0x00001900, 
                0x00001900
            }, 

            Package (0x06)
            {
                0x00000960, 
                0x0000892C, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x000081F4, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x000073EE, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00006D20, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x0000667A, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00005FF1, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00005345, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00004D21, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00004722, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00004141, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00003B80, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x0000305E, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00002AFE, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x000025BE, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU0.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU0.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "TOSHIB", "PtidDevc", 0x00001000)
{
    External (_SB_.PCI0.LPCB.H_EC.AMBT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CFSP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.CPAP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.CPUP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.CVRT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.DIM0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.DIM1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.DTMP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.FANT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MCAP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.MCHP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.MFSP, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.PCDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PMAX, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PMDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PPDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.SKNT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.SYAP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.SYSP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSD3, UnknownObj)
    External (DTS1, UnknownObj)
    External (DTS2, UnknownObj)

    Scope (\_SB)
    {
        Device (PTID)
        {
            Name (_HID, EisaId ("INT340E") /* Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (IVER, 0x00020001)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (TMPV, Package (0x33)
            {
                Zero, 
                "CPU Thermal Diode Temperature", 
                0x80000000, 
                Zero, 
                "CPU Core 0 DTS", 
                0x80000000, 
                Zero, 
                "CPU Core 1 DTS", 
                0x80000000, 
                0x03, 
                "CPU VR (IMVP) Temperature", 
                0x80000000, 
                0x03, 
                "Heat Exchanger Fan Temperature", 
                0x80000000, 
                0x03, 
                "Skin Temperature", 
                0x80000000, 
                0x03, 
                "Ambient Temperature", 
                0x80000000, 
                0x02, 
                "DIMM0 Temperature", 
                0x80000000, 
                0x02, 
                "DIMM1 Temperature", 
                0x80000000, 
                Zero, 
                "CPU, MCH & PCH Max Temperature", 
                0x80000000, 
                Zero, 
                "CPU DTS Temperature from PCH", 
                0x80000000, 
                0x05, 
                "MCH DTS Temperature from PCH", 
                0x80000000, 
                0x05, 
                "PCH DTS Temperature from PCH", 
                0x80000000, 
                0x02, 
                "TS-on-DIMM0 Temperature", 
                0x80000000, 
                0x02, 
                "TS-on-DIMM1 Temperature", 
                0x80000000, 
                0x02, 
                "TS-on-DIMM2 Temperature", 
                0x80000000, 
                0x02, 
                "TS-on-DIMM3 Temperature", 
                0x80000000
            })
            Name (PWRV, Package (0x12)
            {
                Zero, 
                "CPU Power", 
                0x80000000, 
                One, 
                "Gfx Core Power", 
                0x80000000, 
                0x0A, 
                "System Power", 
                0x80000000, 
                Zero, 
                "CPU Average Power", 
                0x80000000, 
                One, 
                "Gfx Core Average Power", 
                0x80000000, 
                0x0A, 
                "System Average Power", 
                0x80000000
            })
            Name (OSDV, Package (0x08)
            {
                Zero, 
                "CPU Fan Speed", 
                "RPM", 
                0x80000000, 
                0x05, 
                "GMCH Fan Speed ", 
                "RPM", 
                0x80000000
            })
            Method (TSDD, 0, NotSerialized)
            {
                TMPV [0x02] = ((\_SB.PCI0.LPCB.H_EC.DTMP * 0x0A) + 0x0AAC)
                TMPV [0x05] = ((DTS1 * 0x0A) + 0x0AAC)
                TMPV [0x08] = ((DTS2 * 0x0A) + 0x0AAC)
                TMPV [0x0B] = ((\_SB.PCI0.LPCB.H_EC.CVRT * 0x0A) + 0x0AAC)
                TMPV [0x0E] = ((\_SB.PCI0.LPCB.H_EC.FANT * 0x0A) + 0x0AAC)
                TMPV [0x11] = ((\_SB.PCI0.LPCB.H_EC.SKNT * 0x0A) + 0x0AAC)
                TMPV [0x14] = ((\_SB.PCI0.LPCB.H_EC.AMBT * 0x0A) + 0x0AAC)
                TMPV [0x17] = ((\_SB.PCI0.LPCB.H_EC.DIM0 * 0x0A) + 0x0AAC)
                TMPV [0x1A] = ((\_SB.PCI0.LPCB.H_EC.DIM1 * 0x0A) + 0x0AAC)
                TMPV [0x1D] = ((\_SB.PCI0.LPCB.H_EC.PMAX * 0x0A) + 0x0AAC)
                TMPV [0x20] = ((\_SB.PCI0.LPCB.H_EC.PCDT * 0x0A) + 0x0AAC)
                TMPV [0x23] = ((\_SB.PCI0.LPCB.H_EC.PMDT * 0x0A) + 0x0AAC)
                TMPV [0x26] = ((\_SB.PCI0.LPCB.H_EC.PPDT * 0x0A) + 0x0AAC)
                TMPV [0x29] = ((\_SB.PCI0.LPCB.H_EC.TSD0 * 0x0A) + 0x0AAC)
                TMPV [0x2C] = ((\_SB.PCI0.LPCB.H_EC.TSD1 * 0x0A) + 0x0AAC)
                TMPV [0x2F] = ((\_SB.PCI0.LPCB.H_EC.TSD2 * 0x0A) + 0x0AAC)
                TMPV [0x32] = ((\_SB.PCI0.LPCB.H_EC.TSD3 * 0x0A) + 0x0AAC)
                Return (TMPV) /* \_SB_.PTID.TMPV */
            }

            Method (PSDD, 0, NotSerialized)
            {
                PWRV [0x02] = \_SB.PCI0.LPCB.H_EC.CPUP /* External reference */
                PWRV [0x05] = \_SB.PCI0.LPCB.H_EC.MCHP /* External reference */
                PWRV [0x08] = (\_SB.PCI0.LPCB.H_EC.SYSP * 0x0A)
                PWRV [0x0B] = \_SB.PCI0.LPCB.H_EC.CPAP /* External reference */
                PWRV [0x0E] = \_SB.PCI0.LPCB.H_EC.MCAP /* External reference */
                PWRV [0x11] = (\_SB.PCI0.LPCB.H_EC.SYAP * 0x0A)
                Return (PWRV) /* \_SB_.PTID.PWRV */
            }

            Method (OSDD, 0, NotSerialized)
            {
                OSDV [0x03] = \_SB.PCI0.LPCB.H_EC.CFSP /* External reference */
                OSDV [0x07] = \_SB.PCI0.LPCB.H_EC.MFSP /* External reference */
                Return (OSDV) /* \_SB_.PTID.OSDV */
            }

            Method (SDSP, 0, NotSerialized)
            {
                Return (0x0A)
            }
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "CpuPm", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU0.PPCD, UnknownObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0xCB24A998, 
            0x00000618, 
            "APIST   ", 
            0xCCFF3618, 
            0x000005AA, 
            "CPU0CST ", 
            0xCCFF3C18, 
            0x000003D3, 
            "APCST   ", 
            0xCCFF2D98, 
            0x00000119
        })
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\PDC4, 0x80000000)
        Name (\PDC5, 0x80000000)
        Name (\PDC6, 0x80000000)
        Name (\PDC7, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR)
    {
        OperationRegion (PPMT, SystemMemory, 0xCC094F98, 0x003A)
        Field (PPMT, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CCTP,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL20,   16, 
            PLW0,   8, 
            CTC0,   8, 
            TAR0,   8, 
            PPC0,   8, 
            PL11,   16, 
            PL21,   16, 
            PLW1,   8, 
            CTC1,   8, 
            TAR1,   8, 
            PPC1,   8, 
            PL12,   16, 
            PL22,   16, 
            PLW2,   8, 
            CTC2,   8, 
            TAR2,   8, 
            PPC2,   8, 
            C3MW,   8, 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            C3LT,   16, 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8
        }
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            \_PR.CPU0.PPCD = CPPC /* \_PR_.CPPC */
            Local0 = CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & 0x7A))
            {
                If ((((CFGD & 0x0200) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC1 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC1 & 0x18))
            {
                APCT ()
            }

            PDC0 = PDC1 /* \PDC1 */
            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x7A) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC2 /* \PDC2 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC3 /* \PDC3 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS4)
            CreateDWordField (Arg0, 0x04, CAP4)
            If (((STS4 == 0x06) || (STS4 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS4 & One))
            {
                CAP4 &= 0x0BFF
                Return (Zero)
            }

            PDC4 = ((PDC4 & 0x7FFFFFFF) | CAP4) /* \_PR_.CPU4.GCAP.CAP4 */
            If (((PDC4 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC4 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC4 /* \PDC4 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS5)
            CreateDWordField (Arg0, 0x04, CAP5)
            If (((STS5 == 0x06) || (STS5 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS5 & One))
            {
                CAP5 &= 0x0BFF
                Return (Zero)
            }

            PDC5 = ((PDC5 & 0x7FFFFFFF) | CAP5) /* \_PR_.CPU5.GCAP.CAP5 */
            If (((PDC5 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC5 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC5 /* \PDC5 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS6)
            CreateDWordField (Arg0, 0x04, CAP6)
            If (((STS6 == 0x06) || (STS6 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS6 & One))
            {
                CAP6 &= 0x0BFF
                Return (Zero)
            }

            PDC6 = ((PDC6 & 0x7FFFFFFF) | CAP6) /* \_PR_.CPU6.GCAP.CAP6 */
            If (((PDC6 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC6 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC6 /* \PDC6 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
            Return (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS7)
            CreateDWordField (Arg0, 0x04, CAP7)
            If (((STS7 == 0x06) || (STS7 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS7 & One))
            {
                CAP7 &= 0x0BFF
                Return (Zero)
            }

            PDC7 = ((PDC7 & 0x7FFFFFFF) | CAP7) /* \_PR_.CPU7.GCAP.CAP7 */
            If (((PDC7 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC7 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC7 /* \PDC7 */
            Return (Zero)
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "TOSHIB", "MacUniq1", 0x00001000)
{
    External (_SB_.PCI0.EHC1.HUB0.RMH0.PRT5, DeviceObj)
    External (_SB_.PCI0.EHC1.HUB0.RMH0.PRT6, UnknownObj)
    External (_SB_.PCI0.EHC2.HUB0.RMH0.PRTA, DeviceObj)
    External (_SB_.PCI0.RP06.PXSX, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS06, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS07, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS08, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS09, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS10, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS11, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS12, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS13, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS14, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS15, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SSP1, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SSP2, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SSP3, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SSP4, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SSP5, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SSP6, DeviceObj)

    Scope (\_SB.PCI0.XHC.RHUB.HS01)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS02)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS03)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS04)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS05)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x03, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x1,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x1,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x1,
                PLD_EjectRequired      = 0x1,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS06)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x03, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x1,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x2,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x1,
                PLD_EjectRequired      = 0x1,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS07)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x3,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS08)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x1,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x4,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x1,
                PLD_EjectRequired      = 0x1,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS09)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS10)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS11)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x1,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x5,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x1,
                PLD_EjectRequired      = 0x1,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS12)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS13)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x02, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x1,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x6,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x1,
                PLD_EjectRequired      = 0x1,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS14)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            Zero, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x1,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x7,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x1,
                PLD_EjectRequired      = 0x1,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS15)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.SSP1)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x03, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x1,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x1,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x1,
                PLD_EjectRequired      = 0x1,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.SSP2)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0x03, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x1,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x2,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x1,
                PLD_EjectRequired      = 0x1,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.SSP3)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.SSP4)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            0xFF, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x3,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.SSP5)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.XHC.RHUB.SSP6)
    {
        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
        {
            Zero, 
            0xFF, 
            Zero, 
            Zero
        })
        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
        {
            ToPLD (
                PLD_Revision           = 0x2,
                PLD_IgnoreColor        = 0x1,
                PLD_Red                = 0x0,
                PLD_Green              = 0x0,
                PLD_Blue               = 0x0,
                PLD_Width              = 0x0,
                PLD_Height             = 0x0,
                PLD_UserVisible        = 0x0,
                PLD_Dock               = 0x0,
                PLD_Lid                = 0x0,
                PLD_Panel              = "UNKNOWN",
                PLD_VerticalPosition   = "UPPER",
                PLD_HorizontalPosition = "LEFT",
                PLD_Shape              = "UNKNOWN",
                PLD_GroupOrientation   = 0x0,
                PLD_GroupToken         = 0x0,
                PLD_GroupPosition      = 0x0,
                PLD_Bay                = 0x0,
                PLD_Ejectable          = 0x0,
                PLD_EjectRequired      = 0x0,
                PLD_CabinetNumber      = 0x0,
                PLD_CardCageNumber     = 0x0,
                PLD_Reference          = 0x0,
                PLD_Rotation           = 0x0,
                PLD_Order              = 0x0,
                PLD_VerticalOffset     = 0xFFFF,
                PLD_HorizontalOffset   = 0xFFFF)

        })
    }

    Scope (\_SB.PCI0.EHC2.HUB0.RMH0.PRTA)
    {
        Name (_EJD, "\\_SB.PCI0.DOCK")  // _EJD: Ejection Dependent Device
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS07)
    {
        Name (_EJD, "\\_SB.PCI0.DOCK")  // _EJD: Ejection Dependent Device
    }

    Scope (\_SB.PCI0.XHC.RHUB.SSP4)
    {
        Name (_EJD, "\\_SB.PCI0.DOCK")  // _EJD: Ejection Dependent Device
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS13)
    {
        Name (_EJD, "\\_SB.PCI0.RP06.PXSX")  // _EJD: Ejection Dependent Device
    }

    Scope (\_SB.PCI0.RP06.PXSX)
    {
        Name (_EDL, Package (0x02)  // _EDL: Eject Device List
        {
            \_SB.PCI0.EHC1.HUB0.RMH0.PRT6, 
            \_SB.PCI0.XHC.RHUB.HS13
        })
    }

    Scope (\_SB.PCI0.EHC1.HUB0.RMH0.PRT5)
    {
        Device (WEBC)
        {
            Name (_ADR, 0x06)  // _ADR: Address
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x0,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "FRONT",
                    PLD_VerticalPosition   = "UPPER",
                    PLD_HorizontalPosition = "CENTER",
                    PLD_Shape              = "UNKNOWN",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x0,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xDC,
                    PLD_HorizontalOffset   = 0xBE)

            })
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.HS10)
    {
        Device (WEBC)
        {
            Name (_ADR, 0x0A)  // _ADR: Address
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x0,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "FRONT",
                    PLD_VerticalPosition   = "UPPER",
                    PLD_HorizontalPosition = "CENTER",
                    PLD_Shape              = "UNKNOWN",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x0,
                    PLD_EjectRequired      = 0x0,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xDC,
                    PLD_HorizontalOffset   = 0xBE)

            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "TOSHIB", "SataAhci", 0x00001000)
{
    /*
     * iASL Warning: There were 3 external control methods found during
     * disassembly, but only 0 were resolved (3 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.PCI0.SAT0, DeviceObj)
    External (CODD, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (DVS0, UnknownObj)
    External (DVS1, UnknownObj)
    External (DVS2, UnknownObj)
    External (DVS3, UnknownObj)
    External (GP97, UnknownObj)
    External (GSBS, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (OEEE, UnknownObj)
    External (SBTB, UnknownObj)
    External (SH2X, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (ZPOE, IntObj)

    Name (HD0S, Zero)
    Name (HD1S, Zero)
    Scope (\_SB.PCI0.SAT0)
    {
        OperationRegion (SATC, PCI_Config, Zero, 0x0100)
        Field (SATC, ByteAcc, NoLock, Preserve)
        {
            VNID,   16, 
            DVID,   16, 
            Offset (0x08), 
            RVID,   8, 
            Offset (0x0A), 
            PSCC,   8, 
            Offset (0x2C), 
            SVID,   16, 
            SSID,   16
        }

        Device (PRT0)
        {
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (GB00, Zero)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, W780)
                    If ((W780 & 0x08))
                    {
                        GB00 = 0x10
                    }
                    Else
                    {
                        GB00 = 0x90
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT0.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT0.FDRP */
                }
            }

            Method (_GTF, 0, Serialized)  // _GTF: Get Task File
            {
                If ((((DVS0 == One) && ((FDEV & One) == One)) && 
                    ((FDRP & 0x80) == 0x80)))
                {
                    Name (PIB1, Buffer (0x0E)
                    {
                        /* 0000 */  0x90, 0x03, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10,  // ........
                        /* 0008 */  0x09, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                    })
                    CreateByteField (PIB1, Zero, PBF0)
                    PBF0 = GB00 /* \_SB_.PCI0.SAT0.PRT0.GB00 */
                    Return (PIB1) /* \_SB_.PCI0.SAT0.PRT0._GTF.PIB1 */
                }

                Name (GFF0, Buffer (0x07)
                {
                     0x90, 0x03, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                })
                CreateByteField (GFF0, Zero, GBF0)
                GBF0 = GB00 /* \_SB_.PCI0.SAT0.PRT0.GB00 */
                Return (GFF0) /* \_SB_.PCI0.SAT0.PRT0._GTF.GFF0 */
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                HD0S = Zero
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                HD0S = 0x03
            }

            Method (_PSC, 0, Serialized)  // _PSC: Power State Current
            {
                Return (HD0S) /* \HD0S */
            }

            Device (ESAT)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_RMV, One)  // _RMV: Removal Status
            }
        }

        Device (PRT1)
        {
            Name (_ADR, 0x0001FFFF)  // _ADR: Address
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Name (GB00, Zero)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                If ((SizeOf (Arg0) == 0x0200))
                {
                    CreateWordField (Arg0, 0x9C, W781)
                    If ((W781 & 0x08))
                    {
                        GB00 = 0x10
                    }
                    Else
                    {
                        GB00 = 0x90
                    }

                    CreateByteField (Arg0, 0x9D, BFDS)
                    ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT1.FDEV */
                    CreateByteField (Arg0, 0x9A, BFRP)
                    ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT1.FDRP */
                }
            }

            Method (_GTF, 0, Serialized)  // _GTF: Get Task File
            {
                If ((((DVS1 == One) && ((FDEV & One) == One)) && 
                    ((FDRP & 0x80) == 0x80)))
                {
                    Name (PIB1, Buffer (0x0E)
                    {
                        /* 0000 */  0x90, 0x03, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x10,  // ........
                        /* 0008 */  0x09, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                    })
                    CreateByteField (PIB1, Zero, PBF0)
                    PBF0 = GB00 /* \_SB_.PCI0.SAT0.PRT1.GB00 */
                    Return (PIB1) /* \_SB_.PCI0.SAT0.PRT1._GTF.PIB1 */
                }

                Name (GFF0, Buffer (0x07)
                {
                     0x90, 0x03, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                })
                CreateByteField (GFF0, Zero, GBF0)
                GBF0 = GB00 /* \_SB_.PCI0.SAT0.PRT1.GB00 */
                Return (GFF0) /* \_SB_.PCI0.SAT0.PRT1._GTF.GFF0 */
            }
        }

        Device (PRT2)
        {
            Name (_ADR, 0x0002FFFF)  // _ADR: Address
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                CreateByteField (Arg0, 0x9D, BFDS)
                ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT2.FDEV */
                CreateByteField (Arg0, 0x9A, BFRP)
                ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT2.FDRP */
            }

            Method (_GTF, 0, Serialized)  // _GTF: Get Task File
            {
                If ((((DVS2 == One) && ((FDEV & One) == One)) && 
                    ((FDRP & 0x80) == 0x80)))
                {
                    Name (PIB1, Buffer (0x07)
                    {
                         0x10, 0x09, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                    })
                    Return (PIB1) /* \_SB_.PCI0.SAT0.PRT2._GTF.PIB1 */
                }

                Name (PIB2, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                })
                Return (PIB2) /* \_SB_.PCI0.SAT0.PRT2._GTF.PIB2 */
            }

            Method (XEJ0, 1, NotSerialized)
            {
                GSBS ()
                If ((SBTB == 0x02))
                {
                    SH2X (0x03)
                }
            }

            Name (_PLD, Package (0x10)  // _PLD: Physical Location of Device
            {
                0x81, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x30, 
                0x1C, 
                Zero, 
                0x80, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("bdfaef30-aebb-11de-8a39-0800200c9a66")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (One)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x0F                                             // .
                                    })
                                }
                                Default
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }

                            }
                        }
                        Case (One)
                        {
                            Return (ZPOE) /* External reference */
                        }
                        Case (0x02)
                        {
                            OEEE = Zero
                            GSBS ()
                            If ((SBTB == 0x02))
                            {
                                SH2X (0x03)
                            }

                            CODD (0x0100)
                            Sleep (0xC8)
                            GP97 = Zero
                            OEEE = One
                            Return (One)
                        }
                        Case (0x03)
                        {
                            OEEE = Zero
                            CODD (0x0101)
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (PRT3)
        {
            Name (_ADR, 0x0003FFFF)  // _ADR: Address
            Name (FDEV, Zero)
            Name (FDRP, Zero)
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                CreateByteField (Arg0, 0x9D, BFDS)
                ToInteger (BFDS, FDEV) /* \_SB_.PCI0.SAT0.PRT3.FDEV */
                CreateByteField (Arg0, 0x9A, BFRP)
                ToInteger (BFRP, FDRP) /* \_SB_.PCI0.SAT0.PRT3.FDRP */
            }

            Method (_GTF, 0, Serialized)  // _GTF: Get Task File
            {
                If ((((DVS3 == One) && ((FDEV & One) == One)) && 
                    ((FDRP & 0x80) == 0x80)))
                {
                    Name (PIB1, Buffer (0x07)
                    {
                         0x10, 0x09, 0x00, 0x00, 0x00, 0xA0, 0xEF         // .......
                    })
                    Return (PIB1) /* \_SB_.PCI0.SAT0.PRT3._GTF.PIB1 */
                }

                Name (PIB2, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         // .......
                })
                Return (PIB2) /* \_SB_.PCI0.SAT0.PRT3._GTF.PIB2 */
            }
        }

        Device (PRT4)
        {
            Name (_ADR, 0x0004FFFF)  // _ADR: Address
        }

        Device (PRT5)
        {
            Name (_ADR, 0x0005FFFF)  // _ADR: Address
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "SaSsdt", "SaSsdt ", 0x00003000)
{
    External (_SB_.PCI0, DeviceObj)

    OperationRegion (SANV, SystemMemory, 0xCC094E98, 0x001F)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        SARV,   32, 
        Offset (0x08), 
        BBAR,   32, 
        AUDA,   32, 
        AUDB,   32, 
        AUDC,   32, 
        CADR,   32, 
        CCNT,   8, 
        PCSL,   8, 
        SC7A,   8
    }

    Scope (\_SB.PCI0)
    {
        Device (B0D3)
        {
            Name (_ADR, 0x00030000)  // _ADR: Address
            Name (BARA, 0x80000000)
            Name (TBAR, Zero)
            Name (TCMD, Zero)
            Name (MODB, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((AUVD != 0xFFFF))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((((ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
                    ABAR & 0xFFFFC000) != Zero)))
                {
                    BARA = ABAR /* \_SB_.PCI0.B0D3.ABAR */
                }
            }

            OperationRegion (RPCS, SystemMemory, 0xF8000000, 0x00018040)
            Field (RPCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x18004), 
                ACMD,   8, 
                Offset (0x18010), 
                ABAR,   32
            }

            OperationRegion (RPCZ, PCI_Config, Zero, 0x40)
            Field (RPCZ, DWordAcc, Lock, Preserve)
            {
                AUVD,   16
            }

            Method (ASTR, 0, Serialized)
            {
                If ((((ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
                    ABAR & 0xFFFFC000) != Zero)))
                {
                    BBAR = (ABAR & 0xFFFFFFF0)
                    BBAR += 0x1000
                    OperationRegion (RPCY, SystemMemory, BBAR, 0x25)
                    Field (RPCY, DWordAcc, NoLock, Preserve)
                    {
                        Offset (0x0C), 
                        EM4W,   32, 
                        EMWA,   32, 
                        Offset (0x1C), 
                        ADWA,   32
                    }

                    EMWA = AUDA /* \AUDA */
                    ADWA = AUDB /* \AUDB */
                    EM4W = AUDC /* \AUDC */
                }
            }

            Method (VSTR, 1, Serialized)
            {
                Name (CONT, 0x03E8)
                Name (ADDR, 0x80000000)
                ADDR = Arg0
                OperationRegion (CCDC, SystemMemory, ADDR, 0x04)
                Field (CCDC, ByteAcc, NoLock, Preserve)
                {
                    CDEC,   32
                }

                If ((((ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
                    ABAR & 0xFFFFC000) != Zero)))
                {
                    If ((CDEC != Zero))
                    {
                        BBAR = (ABAR & 0xFFFFFFF0)
                        OperationRegion (IPCV, SystemMemory, BBAR, 0x70)
                        Field (IPCV, DWordAcc, NoLock, Preserve)
                        {
                            Offset (0x60), 
                            AVIC,   32, 
                            Offset (0x68), 
                            AIRS,   16
                        }

                        CONT = 0x03E8
                        While ((((AIRS & One) == One) && (CONT != Zero)))
                        {
                            Stall (One)
                            CONT--
                        }

                        AIRS |= 0x02
                        AVIC = CDEC /* \_SB_.PCI0.B0D3.VSTR.CDEC */
                        AIRS |= One
                        CONT = 0x03E8
                        While ((((AIRS & One) == One) && (CONT != Zero)))
                        {
                            Stall (One)
                            CONT--
                        }
                    }
                }
            }

            Method (CXDC, 0, Serialized)
            {
                Name (IDDX, 0x80000000)
                If (((CADR != Zero) && (CCNT != Zero)))
                {
                    IDDX = CADR /* \CADR */
                    While ((IDDX < (CADR + (CCNT * 0x04))))
                    {
                        VSTR (IDDX)
                        IDDX += 0x04
                    }
                }
            }

            Method (ARST, 0, Serialized)
            {
                If ((((ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
                    ABAR & 0xFFFFC000) != Zero)))
                {
                    BBAR = (ABAR & 0xFFFFFFF0)
                    OperationRegion (IPCV, SystemMemory, BBAR, 0xBF)
                    Field (IPCV, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x08), 
                        CRST,   32, 
                        Offset (0x4C), 
                        CORB,   32, 
                        Offset (0x5C), 
                        RIRB,   32, 
                        Offset (0x80), 
                        OSD1,   32, 
                        Offset (0xA0), 
                        OSD2,   32
                    }

                    CORB &= 0xFFFFFFFD
                    RIRB &= 0xFFFFFFFD
                    OSD1 &= 0xFFFFFFFD
                    OSD2 &= 0xFFFFFFFD
                    CRST &= 0xFFFFFFFE
                }
            }

            Method (AINI, 0, Serialized)
            {
                Name (CONT, 0x03E8)
                If ((((ABAR & 0xFFFFC004) != 0xFFFFC004) && ((
                    ABAR & 0xFFFFC000) != Zero)))
                {
                    BBAR = (ABAR & 0xFFFFFFF0)
                    OperationRegion (IPCV, SystemMemory, BBAR, 0x70)
                    Field (IPCV, DWordAcc, NoLock, Preserve)
                    {
                        GCAP,   16, 
                        Offset (0x08), 
                        GCTL,   32, 
                        Offset (0x0E), 
                        SSTS,   8, 
                        Offset (0x60), 
                        AVIC,   32, 
                        Offset (0x68), 
                        AIRS,   16
                    }

                    GCTL |= One
                    CONT = 0x03E8
                    While ((((GCTL & One) == Zero) && (CONT != Zero)))
                    {
                        Stall (One)
                        CONT--
                    }

                    GCAP &= 0xFFFF
                    SSTS |= 0x0F
                    GCTL &= 0xFFFFFFFE
                    CONT = 0x03E8
                    While ((((GCTL & One) == One) && (CONT != Zero)))
                    {
                        Stall (One)
                        CONT--
                    }

                    GCTL |= One
                    CONT = 0x03E8
                    While ((((GCTL & One) == Zero) && (CONT != Zero)))
                    {
                        Stall (One)
                        CONT--
                    }
                }
            }

            Method (ABWA, 1, Serialized)
            {
                If (Arg0)
                {
                    If ((((BARA & 0x80000000) != 0x80000000) && ((ABAR & 
                        0xFFFFC000) == Zero)))
                    {
                        TBAR = ABAR /* \_SB_.PCI0.B0D3.ABAR */
                        TCMD = ACMD /* \_SB_.PCI0.B0D3.ACMD */
                        ABAR = BARA /* \_SB_.PCI0.B0D3.BARA */
                        ACMD = 0x06
                        MODB = One
                    }
                }
                ElseIf (MODB)
                {
                    If ((ABAR == BARA))
                    {
                        ABAR = TBAR /* \_SB_.PCI0.B0D3.TBAR */
                        ACMD = TCMD /* \_SB_.PCI0.B0D3.TCMD */
                    }
                }
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU4)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU5)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU6)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU7)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (C3LT, IntObj)
    External (C3MW, IntObj)
    External (C6LT, IntObj)
    External (C6MW, IntObj)
    External (C7LT, IntObj)
    External (C7MW, IntObj)
    External (CDLT, IntObj)
    External (CDLV, IntObj)
    External (CDMW, IntObj)
    External (CDPW, IntObj)
    External (CFGD, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C3TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001814, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x01F4
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            Zero, 
            Zero
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, Zero)
        Name (AC3V, Zero)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00){}
        })
        Name (CSTF, Zero)
        Name (GEAR, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                C3TM [0x02] = C3LT /* External reference */
                C6TM [0x02] = C6LT /* External reference */
                C7TM [0x02] = C7LT /* External reference */
                CDTM [0x02] = CDLT /* External reference */
                CDTM [0x03] = CDPW /* External reference */
                DerefOf (CDTM [Zero]) [0x07] = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PDC0 & 0x0200)))
                {
                    C1TM [Zero] = MWES /* \_PR_.CPU0.MWES */
                    C3TM [Zero] = MWES /* \_PR_.CPU0.MWES */
                    C6TM [Zero] = MWES /* \_PR_.CPU0.MWES */
                    C7TM [Zero] = MWES /* \_PR_.CPU0.MWES */
                    CDTM [Zero] = MWES /* \_PR_.CPU0.MWES */
                    DerefOf (C3TM [Zero]) [0x07] = C3MW /* External reference */
                    DerefOf (C6TM [Zero]) [0x07] = C6MW /* External reference */
                    DerefOf (C7TM [Zero]) [0x07] = C7MW /* External reference */
                    DerefOf (CDTM [Zero]) [0x07] = CDMW /* External reference */
                }
                ElseIf (((CFGD & 0x0800) && (PDC0 & 0x0100)))
                {
                    C1TM [Zero] = MWES /* \_PR_.CPU0.MWES */
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            C3ST [One] = C1TM /* \_PR_.CPU0.C1TM */
            If ((CFGD & 0x20))
            {
                C3ST [0x02] = C7TM /* \_PR_.CPU0.C7TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x10))
            {
                C3ST [0x02] = C6TM /* \_PR_.CPU0.C6TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x08))
            {
                C3ST [0x02] = C3TM /* \_PR_.CPU0.C3TM */
                AC2V = Ones
            }

            If ((CFGD & 0x4000))
            {
                C3ST [0x03] = CDTM /* \_PR_.CPU0.CDTM */
                AC3V = Ones
            }

            If ((GEAR == One))
            {
                If ((CFGD & 0x08))
                {
                    C3ST [0x02] = C3TM /* \_PR_.CPU0.C3TM */
                    AC2V = Ones
                    AC3V = Zero
                }
                Else
                {
                    AC2V = Zero
                    AC3V = Zero
                }
            }

            If ((GEAR == 0x02))
            {
                AC2V = Zero
                AC3V = Zero
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_PR_.CPU0.C3ST */
            }
            ElseIf (AC2V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x02])
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            ElseIf (AC3V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x03])
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_PR_.CPU0.C2ST */
            }
            Else
            {
                C1ST [One] = DerefOf (C3ST [One])
                Return (C1ST) /* \_PR_.CPU0.C1ST */
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_PR_.CPU4, DeviceObj)
    External (_PR_.CPU5, DeviceObj)
    External (_PR_.CPU6, DeviceObj)
    External (_PR_.CPU7, DeviceObj)
    External (PDC0, UnknownObj)
    External (TCNT, IntObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU1.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU1.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU2.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU2.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU3.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU3.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU4)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU4.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU4.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU5)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU5.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU5.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU6)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU6.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU6.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }

    Scope (\_PR.CPU7)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Name (PSDF, Zero)
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If (!PSDF)
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
                PSDF = Ones
            }

            If ((PDC0 & 0x0800))
            {
                Return (HPSD) /* \_PR_.CPU7.HPSD */
            }

            Return (SPSD) /* \_PR_.CPU7.SPSD */
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
    }
}



TCPA
----
[000h 0000   4]                    Signature : "TCPA"    [Trusted Computing Platform Alliance table]
[004h 0004   4]                 Table Length : 00000032
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 64
[00Ah 0010   6]                       Oem ID : "TOSHIB"
[010h 0016   8]                 Oem Table ID : "A008C   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "LOHR"
[020h 0032   4]        Asl Compiler Revision : 0000005F

[024h 0036   2]               Platform Class : 0000
[026h 0038   4]         Min Event Log Length : 00010000
[02Ah 0042   8]            Event Log Address : 00000000CC0A8010

Raw Table Data: Length 50 (0x32)

    0000: 54 43 50 41 32 00 00 00 02 64 54 4F 53 48 49 42  // TCPA2....dTOSHIB
    0010: 41 30 30 38 43 20 20 20 00 00 00 00 4C 4F 48 52  // A008C   ....LOHR
    0020: 5F 00 00 00 00 00 00 00 01 00 10 80 0A CC 00 00  // _...............
    0030: 00 00                                            // ..


