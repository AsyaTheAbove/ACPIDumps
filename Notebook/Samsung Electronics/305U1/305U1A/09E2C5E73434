
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20150717-64
Copyright (c) 2000 - 2015 Intel Corporation


Signature  Length      Revision   OemId    OemTableId   OemRevision CompilerId CompilerRevision

   RSDP                          "SECCSD"
   RSDT   0x00000040     0x01    "SECCSD"  "LH43STAR"   0x01072009    "MSFT"     0x00010013
   XSDT   0x0000005C     0x01    "SECCSD"  "LH43STAR"   0x01072009    "AMI "     0x00010013
   DSDT   0x00007A9E     0x02    "SECCSD"  "LH43STAR"   0x00000000    "INTL"     0x20051117
   FACS   0x00000040
   FACP   0x000000F4     0x04    "SECCSD"  "LH43STAR"   0x01072009    "AMI "     0x00010013
   APIC   0x00000062     0x03    "SECCSD"  "LH43STAR"   0x01072009    "AMI "     0x00010013
   MCFG   0x0000003C     0x01    "SECCSD"  "LH43STAR"   0x01072009    "MSFT"     0x00010013
   SLIC   0x00000176     0x01    "SECCSD"  "LH43STAR"   0x01072009    "AMI "     0x00010013
   HPET   0x00000038     0x01    "SECCSD"  "LH43STAR"   0x01072009    "AMI "     0x00000004
   SSDT   0x000003DE     0x01    "AMD   "  "POWERNOW"   0x00000001    "AMD "     0x00000001
   SSDT   0x0000168E     0x02    "AMD   "  "ALIB    "   0x00000001    "MSFT"     0x04000000

Found 12 ACPI tables

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000062
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 4B
[00Ah 0010   6]                       Oem ID : "SECCSD"
[010h 0016   8]                 Oem Table ID : "LH43STAR"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 02
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1

[03Ch 0060   1]                Subtable Type : 01 [I/O APIC]
[03Dh 0061   1]                       Length : 0C
[03Eh 0062   1]                  I/O Apic ID : 03
[03Fh 0063   1]                     Reserved : 00
[040h 0064   4]                      Address : FEC00000
[044h 0068   4]                    Interrupt : 00000000

[048h 0072   1]                Subtable Type : 02 [Interrupt Source Override]
[049h 0073   1]                       Length : 0A
[04Ah 0074   1]                          Bus : 00
[04Bh 0075   1]                       Source : 00
[04Ch 0076   4]                    Interrupt : 00000002
[050h 0080   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[052h 0082   1]                Subtable Type : 02 [Interrupt Source Override]
[053h 0083   1]                       Length : 0A
[054h 0084   1]                          Bus : 00
[055h 0085   1]                       Source : 09
[056h 0086   4]                    Interrupt : 00000009
[05Ah 0090   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[05Ch 0092   1]                Subtable Type : 04 [Local APIC NMI]
[05Dh 0093   1]                       Length : 06
[05Eh 0094   1]                 Processor ID : FF
[05Fh 0095   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[061h 0097   1]         Interrupt Input LINT : 01

Raw Table Data: Length 98 (0x62)

  0000: 41 50 49 43 62 00 00 00 03 4B 53 45 43 43 53 44  // APICb....KSECCSD
  0010: 4C 48 34 33 53 54 41 52 09 20 07 01 41 4D 49 20  // LH43STAR. ..AMI 
  0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
  0030: 01 00 00 00 00 08 02 01 01 00 00 00 01 0C 03 00  // ................
  0040: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
  0050: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 FF 05  // ................
  0060: 00 01                                            // ..


DSDT
----
DefinitionBlock ("dsdt.aml", "DSDT", 2, "SECCSD", "LH43STAR", 0x00000000)
{
    /*
     * iASL Warning: There were 1 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (ALIB, MethodObj)    // Warning: Unresolved method, guessing 2 arguments


    Name (SP1O, 0x164E)
    Name (IO1B, 0x0600)
    Name (IO1L, 0x70)
    Name (IO2B, 0x0680)
    Name (IO2L, 0x20)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP2O, 0x4E)
    Name (SMBB, 0x0B20)
    Name (SMBL, 0x20)
    Name (SMB0, 0x0B00)
    Name (SMBM, 0x10)
    Name (PMBS, 0x0800)
    Name (PMLN, 0xA0)
    Name (SMIO, 0xB2)
    Name (GPBS, Zero)
    Name (GPLN, Zero)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (SPIB, 0xFEC10000)
    Name (SPIL, 0x1000)
    Name (HPTB, 0xFED00000)
    Name (HPTL, 0x1000)
    Name (GIOB, 0xFED80100)
    Name (IOMB, 0xFED80D00)
    Name (SMIB, 0xFED80200)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (PEBS, 0xE0000000)
    Name (PEBL, 0x10000000)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (SMIT, 0xB2)
    Name (OFST, 0x35)
    Name (TPMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (ATIS, 0x55)
    Name (MBEC, Zero)
    Name (OSCM, 0xE3)
    Name (LBR0, 0x05)
    Name (LBR1, 0x06)
    Name (LBR2, 0x0C)
    Name (LBR3, 0x14)
    Name (LBR4, 0x1E)
    Name (LBR5, 0x2D)
    Name (LBR6, 0x3C)
    Name (LBR7, 0x50)
    Name (LBR8, 0x64)
    Name (ECON, Zero)
    Name (DSEN, Zero)
    Name (VDRV, Zero)
    Name (SSMI, 0xB2)
    Name (SWCD, 0xB0)
    Name (PICM, Zero)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
            \_SB.IRQC ()
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == Zero))
        {
            DBG8 = 0xAC
        }

        OSVR = One
        If (CondRefOf (_OSI, Local0))
        {
            If (_OSI ("Linux"))
            {
                OSVR = 0x03
            }

            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = Zero
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = One
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + One)
        Name (BUF0, Buffer (Local0) {})
        Name (BUF1, Buffer (Local0) {})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (Index (BUF0, Local0)) != DerefOf (Index (BUF1, Local0
                ))))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        Index (PRWP, Zero) = Arg0
        Local0 = (SS1 << One)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((One << Arg1) & Local0))
        {
            Index (PRWP, One) = Arg1
        }
        Else
        {
            Local0 >>= One
            If (((OSFL () == One) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, Index (PRWP, One))
            }
            Else
            {
                FindSetRightBit (Local0, Index (PRWP, One))
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    OperationRegion (DEB0, SystemIO, 0x80, One)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0x4C00)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    Name (OSTY, Ones)
    OperationRegion (ACMS, SystemIO, 0x72, 0x10)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        ICMS,   8, 
        DCMS,   8, 
        Offset (0x0E), 
        P80,    8
    }

    IndexField (ICMS, DCMS, ByteAcc, NoLock, Preserve)
    {
        Offset (0x08), 
        BS_A,   32
    }

    OperationRegion (CFGS, SystemMemory, BS_A, 0x0100)
    Field (CFGS, AnyAcc, NoLock, Preserve)
    {
        Offset (0x0C), 
        PCIE,   32, 
        Offset (0x7F), 
            ,   5, 
        GGN2,   1, 
        Offset (0x87), 
        GECE,   1, 
        IR_E,   1, 
        Offset (0x93), 
            ,   5, 
        OSCF,   1, 
        Offset (0x9E), 
        PRS0,   1, 
        DET0,   1, 
        Offset (0xA2), 
        PRS1,   1, 
        DET1,   1, 
        Offset (0xA6), 
        PRS2,   1, 
        DET2,   1, 
        Offset (0xAA), 
        PRS3,   1, 
        DET3,   1, 
        Offset (0xB2), 
            ,   6, 
        ABPS,   1, 
            ,   3, 
        GPPS,   1
    }

    OperationRegion (CMPT, SystemIO, 0x0C50, 0x03)
    Field (CMPT, ByteAcc, NoLock, Preserve)
    {
        CMID,   8, 
            ,   6, 
        GPCT,   2, 
        GP0I,   1, 
        GP1I,   1, 
        GP2I,   1, 
        GP3I,   1, 
        GP4I,   1, 
        GP5I,   1, 
        GP6I,   1, 
        GP7I,   1
    }

    OperationRegion (PCFG, SystemMemory, PCIE, 0x02000000)
    Field (PCFG, AnyAcc, NoLock, Preserve)
    {
        Offset (0x20078), 
        Offset (0x2007A), 
        PMSA,   1, 
        Offset (0x28078), 
        Offset (0x2807A), 
        PMSB,   1, 
        Offset (0x48078), 
        Offset (0x4807A), 
        PMSC,   1, 
        Offset (0x8800A), 
        STCL,   16, 
        Offset (0xA0004), 
        SMIE,   1, 
        SMME,   1, 
        Offset (0xA0008), 
        RVID,   8, 
        Offset (0xA0014), 
        SMB1,   32, 
        Offset (0xA0082), 
            ,   2, 
        G31O,   1, 
        Offset (0xA00E1), 
            ,   6, 
        ACIR,   1, 
        Offset (0xA4004), 
        PCMD,   2, 
        Offset (0xA807A), 
        PMS0,   1, 
        Offset (0xA8088), 
        TLS0,   4, 
        Offset (0xA907A), 
        PMS1,   1, 
        Offset (0xA9088), 
        TLS1,   4, 
        Offset (0xAA07A), 
        PMS2,   1, 
        Offset (0xAA088), 
        TLS2,   4, 
        Offset (0xAB07A), 
        PMS3,   1, 
        Offset (0xAB088), 
        TLS3,   4
    }

    OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
    Field (PMIO, ByteAcc, NoLock, Preserve)
    {
        INPM,   8, 
        DAPM,   8
    }

    IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
    {
        Offset (0x24), 
        MMSO,   32, 
        Offset (0x60), 
        P1EB,   16
    }

    OperationRegion (ERMM, SystemMemory, MMSO, 0x1000)
    Field (ERMM, AnyAcc, NoLock, Preserve)
    {
        Offset (0x132), 
            ,   7, 
        GP51,   1, 
        Offset (0x136), 
            ,   7, 
        GP55,   1, 
        Offset (0x13A), 
            ,   7, 
        GP59,   1, 
        Offset (0x13D), 
        GP62,   8, 
        Offset (0x13F), 
            ,   7, 
        GP64,   1, 
        Offset (0x16A), 
            ,   7, 
        GE11,   1, 
            ,   7, 
        GE12,   1, 
        Offset (0x16E), 
            ,   7, 
        BATS,   1, 
        Offset (0x287), 
            ,   1, 
        CLPS,   1, 
        Offset (0x298), 
            ,   7, 
        G15A,   1, 
        Offset (0x2AF), 
            ,   2, 
        SLPS,   2, 
        Offset (0x376), 
        EPNM,   1, 
        DPPF,   1, 
        Offset (0x3BA), 
            ,   6, 
        PWDE,   1, 
        Offset (0x3BD), 
            ,   5, 
        ALLS,   1, 
        Offset (0x3EF), 
        PHYD,   1, 
            ,   1, 
            ,   1, 
        US5R,   1, 
        Offset (0x3F5), 
        GECD,   1
    }

    OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
    Field (ABIO, DWordAcc, NoLock, Preserve)
    {
        INAB,   32, 
        DAAB,   32
    }

    Method (RDAB, 1, NotSerialized)
    {
        INAB = Arg0
        Return (DAAB) /* \DAAB */
    }

    Method (WTAB, 2, NotSerialized)
    {
        INAB = Arg0
        DAAB = Arg1
    }

    Method (RWAB, 3, NotSerialized)
    {
        Local0 = (RDAB (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        WTAB (Arg0, Local1)
    }

    Method (CABR, 3, NotSerialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (GHPS, 2, NotSerialized)
    {
        If ((Arg0 == Zero))
        {
            If ((Arg1 == Zero))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, Zero)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, Zero)
                DET0 = One
            }

            If ((Arg1 == 0x02))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, Zero)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, Zero)
                DET2 = One
            }

            Stall (0xC8)
        }

        If ((Arg0 == One))
        {
            If ((Arg1 == Zero))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFEFFF, 0x1000)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFEFE, 0x0101)
                DET0 = Zero
            }

            If ((Arg1 == 0x02))
            {
                RWAB (CABR (0x06, Zero, 0xC0), 0xFFFFBFFF, 0x4000)
                RWAB (CABR (One, Zero, 0x65), 0xFFFFFBFB, 0x0404)
                DET2 = Zero
            }

            Stall (0xC8)
        }

        If (GGN2)
        {
            If ((Arg0 == Zero))
            {
                GEN2 ()
                Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                Local0 &= 0xFF
                Local1 = 0x01F4
                While (((Local1 > Zero) && (Local0 != 0x10)))
                {
                    Local0 = RDAB (CABR (0x03, 0x02, 0xA5))
                    Local0 &= 0xFF
                    Local1--
                    Stall (0xC8)
                    Stall (0xC8)
                }

                If ((Local0 != 0x10))
                {
                    GEN1 ()
                }
            }
        }
    }

    Method (GEN2, 0, NotSerialized)
    {
        TLS2 = 0x02
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, One)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        RWAB (CABR (0x03, 0x02, 0xC0), 0xFFFF7FFF, 0x8000)
        RWAB (CABR (0x03, 0x02, 0xA4), 0xDFFFFFFF, 0x20000000)
        Stall (0xC8)
        Stall (0xC8)
    }

    Method (GEN1, 0, NotSerialized)
    {
        TLS2 = One
        RWAB (CABR (0x03, 0x02, 0xA4), 0xFFFFFFFE, Zero)
        RWAB (CABR (0x03, 0x02, 0xA2), 0xFFFFDFFF, 0x2000)
        Stall (0xC8)
        Stall (0xC8)
    }

    OperationRegion (P1E0, SystemIO, P1EB, 0x04)
    Field (P1E0, ByteAcc, NoLock, Preserve)
    {
            ,   14, 
        PEWS,   1, 
        WSTA,   1, 
            ,   14, 
        PEWD,   1
    }

    Method (SPTS, 1, NotSerialized)
    {
        PCMD = One
        P80 = Arg0
        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (SWAK, 1, NotSerialized)
    {
        CPMS ()
        CPMS ()
        PEWS = One
    }

    Method (TRMD, 1, NotSerialized)
    {
    }

    Method (CPMS, 0, NotSerialized)
    {
        If ((EPNM == Zero))
        {
            PMSA = One
            PMSB = One
            PMSC = One
            PMS0 = One
            PMS1 = One
            PMS2 = One
            PMS3 = One
        }
    }

    Scope (_GPE)
    {
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x17)
        {
            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR00, Package (0x17)
        {
            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0007FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }
        })
        Name (PR20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR14, Package (0x02)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }
        })
        Name (AR14, Package (0x02)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }
        })
        Name (PR15, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }
        })
        Name (AR15, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }
        })
        Name (PR16, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }
        })
        Name (AR16, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }
        })
        Name (PR17, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }
        })
        Name (AR17, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }
        })
        Name (PR18, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }
        })
        Name (AR18, Package (0x01)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x14
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {4,7,10,11,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00180000)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Name (CPRB, One)
            Name (LVGA, 0x55)
            Name (BRB, 0x0000)
            Name (BRL, 0x0100)
            Name (IOB, 0x1000)
            Name (IOL, 0xF000)
            Name (MBB, 0xC0000000)
            Name (MBL, 0x40000000)
            Name (MABL, 0x00000000)
            Name (MABH, 0x00000000)
            Name (MALL, 0x00000000)
            Name (MALH, 0x00000000)
            Name (MAML, 0x00000000)
            Name (MAMH, 0x00000000)
            Name (CRS1, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x007F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y00)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x03AF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x03B0,             // Length
                    ,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x03E0,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0918,             // Length
                    ,, , TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y02, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0x0FFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0300,             // Length
                    ,, _Y01, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x02000000,         // Range Minimum
                    0xFFDFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFDFC0000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
            })
            Name (CRS2, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0080,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0080,             // Length
                    ,, _Y06)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y08, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, _Y07, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xFFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x80000000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                BreakPoint
                If (CPRB)
                {
                    CreateWordField (CRS1, \_SB.PCI0._Y00._MIN, MIN0)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y00._MAX, MAX0)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y00._LEN, LEN0)  // _LEN: Length
                    MIN0 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN0 = BRL /* \_SB_.PCI0.BRL_ */
                    Local0 = LEN0 /* \_SB_.PCI0._CRS.LEN0 */
                    MAX0 = (MIN0 + Local0--)
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MIN, MIN1)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._MAX, MAX1)  // _MAX: Maximum Base Address
                    CreateWordField (CRS1, \_SB.PCI0._Y01._LEN, LEN1)  // _LEN: Length
                    If ((IOB == 0x1000))
                    {
                        Local0 = IOL /* \_SB_.PCI0.IOL_ */
                        MAX1 = (IOB + Local0--)
                        Local0 = (MAX1 - MIN1) /* \_SB_.PCI0._CRS.MIN1 */
                        LEN1 = (Local0 + One)
                    }
                    Else
                    {
                        MIN1 = IOB /* \_SB_.PCI0.IOB_ */
                        LEN1 = IOL /* \_SB_.PCI0.IOL_ */
                        Local0 = LEN1 /* \_SB_.PCI0._CRS.LEN1 */
                        MAX1 = (MIN1 + Local0--)
                    }

                    If (((LVGA == One) || (LVGA == 0x55)))
                    {
                        If (VGAF)
                        {
                            CreateWordField (CRS1, \_SB.PCI0._Y02._MIN, IMN1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y02._MAX, IMX1)  // _MAX: Maximum Base Address
                            CreateWordField (CRS1, \_SB.PCI0._Y02._LEN, ILN1)  // _LEN: Length
                            IMN1 = 0x03B0
                            IMX1 = 0x03DF
                            ILN1 = 0x30
                            CreateDWordField (CRS1, \_SB.PCI0._Y03._MIN, VMN1)  // _MIN: Minimum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y03._MAX, VMX1)  // _MAX: Maximum Base Address
                            CreateDWordField (CRS1, \_SB.PCI0._Y03._LEN, VLN1)  // _LEN: Length
                            VMN1 = 0x000A0000
                            VMX1 = 0x000BFFFF
                            VLN1 = 0x00020000
                            VGAF = Zero
                        }
                    }

                    CreateDWordField (CRS1, \_SB.PCI0._Y04._MIN, MIN3)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y04._MAX, MAX3)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS1, \_SB.PCI0._Y04._LEN, LEN3)  // _LEN: Length
                    MIN3 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN3 = MBL /* \_SB_.PCI0.MBL_ */
                    Local0 = LEN3 /* \_SB_.PCI0._CRS.LEN3 */
                    MAX3 = (MIN3 + Local0--)
                    If ((MALH || MALL))
                    {
                        CreateDWordField (CRS1, \_SB.PCI0._Y05._MIN, MN8L)  // _MIN: Minimum Base Address
                        Local0 = (0xB4 + 0x04)
                        CreateDWordField (CRS1, Local0, MN8H)
                        MN8L = MABL /* \_SB_.PCI0.MABL */
                        MN8H = MABH /* \_SB_.PCI0.MABH */
                        CreateDWordField (CRS1, \_SB.PCI0._Y05._MAX, MX8L)  // _MAX: Maximum Base Address
                        Local1 = (0xBC + 0x04)
                        CreateDWordField (CRS1, Local1, MX8H)
                        CreateDWordField (CRS1, \_SB.PCI0._Y05._LEN, LN8L)  // _LEN: Length
                        Local2 = (0xCC + 0x04)
                        CreateDWordField (CRS1, Local2, LN8H)
                        MN8L = MABL /* \_SB_.PCI0.MABL */
                        MN8H = MABH /* \_SB_.PCI0.MABH */
                        LN8L = MALL /* \_SB_.PCI0.MALL */
                        LN8H = MALH /* \_SB_.PCI0.MALH */
                        MX8L = MAML /* \_SB_.PCI0.MAML */
                        MX8H = MAMH /* \_SB_.PCI0.MAMH */
                    }

                    Return (CRS1) /* \_SB_.PCI0.CRS1 */
                }
                Else
                {
                    CreateWordField (CRS2, \_SB.PCI0._Y06._MIN, MIN2)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y06._MAX, MAX2)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y06._LEN, LEN2)  // _LEN: Length
                    MIN2 = BRB /* \_SB_.PCI0.BRB_ */
                    LEN2 = BRL /* \_SB_.PCI0.BRL_ */
                    Local1 = LEN2 /* \_SB_.PCI0._CRS.LEN2 */
                    MAX2 = (MIN2 + Local1--)
                    CreateWordField (CRS2, \_SB.PCI0._Y07._MIN, MIN4)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y07._MAX, MAX4)  // _MAX: Maximum Base Address
                    CreateWordField (CRS2, \_SB.PCI0._Y07._LEN, LEN4)  // _LEN: Length
                    MIN4 = IOB /* \_SB_.PCI0.IOB_ */
                    LEN4 = IOL /* \_SB_.PCI0.IOL_ */
                    Local1 = LEN4 /* \_SB_.PCI0._CRS.LEN4 */
                    MAX4 = (MIN4 + Local1--)
                    If (LVGA)
                    {
                        CreateWordField (CRS2, \_SB.PCI0._Y08._MIN, IMN2)  // _MIN: Minimum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y08._MAX, IMX2)  // _MAX: Maximum Base Address
                        CreateWordField (CRS2, \_SB.PCI0._Y08._LEN, ILN2)  // _LEN: Length
                        IMN2 = 0x03B0
                        IMX2 = 0x03DF
                        ILN2 = 0x30
                        CreateDWordField (CRS2, \_SB.PCI0._Y09._MIN, VMN2)  // _MIN: Minimum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y09._MAX, VMX2)  // _MAX: Maximum Base Address
                        CreateDWordField (CRS2, \_SB.PCI0._Y09._LEN, VLN2)  // _LEN: Length
                        VMN2 = 0x000A0000
                        VMX2 = 0x000BFFFF
                        VLN2 = 0x00020000
                    }

                    CreateDWordField (CRS2, \_SB.PCI0._Y0A._MIN, MIN5)  // _MIN: Minimum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0A._MAX, MAX5)  // _MAX: Maximum Base Address
                    CreateDWordField (CRS2, \_SB.PCI0._Y0A._LEN, LEN5)  // _LEN: Length
                    MIN5 = MBB /* \_SB_.PCI0.MBB_ */
                    LEN5 = MBL /* \_SB_.PCI0.MBL_ */
                    Local1 = LEN5 /* \_SB_.PCI0._CRS.LEN5 */
                    MAX5 = (MIN5 + Local1--)
                    If ((MALH || MALL))
                    {
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MIN, MN9L)  // _MIN: Minimum Base Address
                        Local0 = (0x72 + 0x04)
                        CreateDWordField (CRS2, Local0, MN9H)
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._MAX, MX9L)  // _MAX: Maximum Base Address
                        Local1 = (0x7A + 0x04)
                        CreateDWordField (CRS2, Local1, MX9H)
                        CreateDWordField (CRS2, \_SB.PCI0._Y0B._LEN, LN9L)  // _LEN: Length
                        Local2 = (0x8A + 0x04)
                        CreateDWordField (CRS2, Local2, LN9H)
                        MN9L = MABL /* \_SB_.PCI0.MABL */
                        MN9H = MABH /* \_SB_.PCI0.MABH */
                        LN9L = MALL /* \_SB_.PCI0.MALL */
                        LN9H = MALH /* \_SB_.PCI0.MALH */
                        MX9L = MAML /* \_SB_.PCI0.MAML */
                        MX9H = MAMH /* \_SB_.PCI0.MAMH */
                    }

                    Return (CRS2) /* \_SB_.PCI0.CRS2 */
                }
            }

            Scope (\_SB)
            {
                Scope (PCI0)
                {
                    Method (XCMP, 2, NotSerialized)
                    {
                        If ((0x10 != SizeOf (Arg0)))
                        {
                            Return (Zero)
                        }

                        If ((0x10 != SizeOf (Arg1)))
                        {
                            Return (Zero)
                        }

                        Local0 = Zero
                        While ((Local0 < 0x10))
                        {
                            If ((DerefOf (Index (Arg0, Local0)) != DerefOf (Index (Arg1, Local0
                                ))))
                            {
                                Return (Zero)
                            }

                            Local0++
                        }

                        Return (One)
                    }

                    Device (AMDN)
                    {
                        Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                        Name (_UID, 0xC8)  // _UID: Unique ID
                        Name (_STA, 0x0F)  // _STA: Status
                        Name (NPTR, ResourceTemplate ()
                        {
                            Memory32Fixed (ReadWrite,
                                0x00000000,         // Address Base
                                0x00000000,         // Address Length
                                _Y0C)
                        })
                        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                        {
                            CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y0C._LEN, PL)  // _LEN: Length
                            CreateDWordField (NPTR, \_SB.PCI0.AMDN._Y0C._BAS, PB)  // _BAS: Base Address
                            PB = PEBS /* \PEBS */
                            PL = PEBL /* \PEBL */
                            Return (NPTR) /* \_SB_.PCI0.AMDN.NPTR */
                        }
                    }
                }
            }

            Method (NPTS, 1, NotSerialized)
            {
            }

            Method (NWAK, 1, NotSerialized)
            {
            }

            Device (SMBS)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SMBS, PCI_Config, Zero, 0x0100)
                Field (SMBS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    REV,    8, 
                    Offset (0x62), 
                    I1F,    1, 
                    I12F,   1, 
                        ,   2, 
                    MT3A,   1, 
                    Offset (0xF8), 
                    EIDX,   8, 
                    Offset (0xFC), 
                    EDAT,   32
                }

                IndexField (EIDX, EDAT, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x04), 
                    Offset (0x05), 
                        ,   3, 
                    G39E,   1, 
                    G41E,   1, 
                    Offset (0x06), 
                    Offset (0x07), 
                        ,   3, 
                    G39O,   1, 
                    G41O,   1
                }

                OperationRegion (WIDE, PCI_Config, 0xAD, One)
                Field (WIDE, AnyAcc, NoLock, Preserve)
                {
                    DUM1,   4, 
                    SOPT,   1
                }
            }

            Device (IDEC)
            {
                Name (_ADR, 0x00140001)  // _ADR: Address
                Name (UDMT, Package (0x08)
                {
                    0x78, 
                    0x5A, 
                    0x3C, 
                    0x2D, 
                    0x1E, 
                    0x14, 
                    0x0F, 
                    Zero
                })
                Name (PIOT, Package (0x06)
                {
                    0x0258, 
                    0x0186, 
                    0x010E, 
                    0xB4, 
                    0x78, 
                    Zero
                })
                Name (PITR, Package (0x06)
                {
                    0x99, 
                    0x47, 
                    0x34, 
                    0x22, 
                    0x20, 
                    0x99
                })
                Name (MDMT, Package (0x04)
                {
                    0x01E0, 
                    0x96, 
                    0x78, 
                    Zero
                })
                Name (MDTR, Package (0x04)
                {
                    0x77, 
                    0x21, 
                    0x20, 
                    0xFF
                })
                OperationRegion (IDE, PCI_Config, 0x40, 0x20)
                Field (IDE, AnyAcc, NoLock, Preserve)
                {
                    PPIT,   16, 
                    SPIT,   16, 
                    PMDT,   16, 
                    SMDT,   16, 
                    PPIC,   8, 
                    SPIC,   8, 
                    PPIM,   8, 
                    SPIM,   8, 
                    Offset (0x14), 
                    PUDC,   2, 
                    SUDC,   2, 
                    Offset (0x16), 
                    PUDM,   8, 
                    SUDM,   8
                }

                Method (GETT, 1, NotSerialized)
                {
                    Local0 = (Arg0 & 0x0F)
                    Local1 = (Arg0 >> 0x04)
                    Return ((0x1E * ((Local0 + One) + (Local1 + One)
                        )))
                }

                Method (GTM, 1, NotSerialized)
                {
                    CreateByteField (Arg0, Zero, PIT1)
                    CreateByteField (Arg0, One, PIT0)
                    CreateByteField (Arg0, 0x02, MDT1)
                    CreateByteField (Arg0, 0x03, MDT0)
                    CreateByteField (Arg0, 0x04, PICX)
                    CreateByteField (Arg0, 0x05, UDCX)
                    CreateByteField (Arg0, 0x06, UDMX)
                    Name (BUF, Buffer (0x14)
                    {
                        /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
                        /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  /* ........ */
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           /* .... */
                    })
                    CreateDWordField (BUF, Zero, PIO0)
                    CreateDWordField (BUF, 0x04, DMA0)
                    CreateDWordField (BUF, 0x08, PIO1)
                    CreateDWordField (BUF, 0x0C, DMA1)
                    CreateDWordField (BUF, 0x10, FLAG)
                    If ((PICX & One))
                    {
                        Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                    }

                    PIO0 = GETT (PIT0)
                    PIO1 = GETT (PIT1)
                    If ((UDCX & One))
                    {
                        FLAG |= One
                        DMA0 = DerefOf (Index (UDMT, (UDMX & 0x0F)))
                    }
                    Else
                    {
                        DMA0 = GETT (MDT0)
                    }

                    If ((UDCX & 0x02))
                    {
                        FLAG |= 0x04
                        DMA1 = DerefOf (Index (UDMT, (UDMX >> 0x04)))
                    }
                    Else
                    {
                        DMA1 = GETT (MDT1)
                    }

                    FLAG |= 0x1A
                    Return (BUF) /* \_SB_.PCI0.IDEC.GTM_.BUF_ */
                }

                Method (STM, 3, NotSerialized)
                {
                    CreateDWordField (Arg0, Zero, PIO0)
                    CreateDWordField (Arg0, 0x04, DMA0)
                    CreateDWordField (Arg0, 0x08, PIO1)
                    CreateDWordField (Arg0, 0x0C, DMA1)
                    CreateDWordField (Arg0, 0x10, FLAG)
                    Name (BUF, Buffer (0x07)
                    {
                         0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                    })
                    CreateByteField (BUF, Zero, PIT1)
                    CreateByteField (BUF, One, PIT0)
                    CreateByteField (BUF, 0x02, MDT1)
                    CreateByteField (BUF, 0x03, MDT0)
                    CreateByteField (BUF, 0x04, PIMX)
                    CreateByteField (BUF, 0x05, UDCX)
                    CreateByteField (BUF, 0x06, UDMX)
                    Local0 = Match (PIOT, MLE, PIO0, MTR, Zero, Zero)
                    Divide (Local0, 0x05, Local0)
                    Local1 = Match (PIOT, MLE, PIO1, MTR, Zero, Zero)
                    Divide (Local1, 0x05, Local1)
                    PIMX = ((Local1 << 0x04) | Local0)
                    PIT0 = DerefOf (Index (PITR, Local0))
                    PIT1 = DerefOf (Index (PITR, Local1))
                    If ((FLAG & One))
                    {
                        Local0 = Match (UDMT, MLE, DMA0, MTR, Zero, Zero)
                        Divide (Local0, 0x07, Local0)
                        UDMX |= Local0
                        UDCX |= One
                    }
                    Else
                    {
                        If ((DMA0 != 0xFFFFFFFF))
                        {
                            Local0 = Match (MDMT, MLE, DMA0, MTR, Zero, Zero)
                            MDT0 = DerefOf (Index (MDTR, Local0))
                        }
                    }

                    If ((FLAG & 0x04))
                    {
                        Local0 = Match (UDMT, MLE, DMA1, MTR, Zero, Zero)
                        Divide (Local0, 0x07, Local0)
                        UDMX |= (Local0 << 0x04)
                        UDCX |= 0x02
                    }
                    Else
                    {
                        If ((DMA1 != 0xFFFFFFFF))
                        {
                            Local0 = Match (MDMT, MLE, DMA1, MTR, Zero, Zero)
                            MDT1 = DerefOf (Index (MDTR, Local0))
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.STM_.BUF_ */
                }

                Method (GTF, 2, NotSerialized)
                {
                    CreateByteField (Arg1, Zero, MDT1)
                    CreateByteField (Arg1, One, MDT0)
                    CreateByteField (Arg1, 0x02, PIMX)
                    CreateByteField (Arg1, 0x03, UDCX)
                    CreateByteField (Arg1, 0x04, UDMX)
                    If ((Arg0 == 0xA0))
                    {
                        Local0 = (PIMX & 0x0F)
                        Local1 = MDT0 /* \_SB_.PCI0.IDEC.GTF_.MDT0 */
                        Local2 = (UDCX & One)
                        Local3 = (UDMX & 0x0F)
                    }
                    Else
                    {
                        Local0 = (PIMX >> 0x04)
                        Local1 = MDT1 /* \_SB_.PCI0.IDEC.GTF_.MDT1 */
                        Local2 = (UDCX & 0x02)
                        Local3 = (UDMX >> 0x04)
                    }

                    Name (BUF, Buffer (0x15)
                    {
                        /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x03,  /* ........ */
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xFF, 0xEF, 0x00, 0x00,  /* ........ */
                        /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xF5                     /* ..... */
                    })
                    CreateByteField (BUF, One, PMOD)
                    CreateByteField (BUF, 0x08, DMOD)
                    CreateByteField (BUF, 0x05, CMDA)
                    CreateByteField (BUF, 0x0C, CMDB)
                    CreateByteField (BUF, 0x13, CMDC)
                    CMDA = Arg0
                    CMDB = Arg0
                    CMDC = Arg0
                    PMOD = (Local0 | 0x08)
                    If (Local2)
                    {
                        DMOD = (Local3 | 0x40)
                    }
                    Else
                    {
                        Local4 = Match (MDMT, MLE, GETT (Local1), MTR, Zero, Zero)
                        If ((Local4 < 0x03))
                        {
                            DMOD = (0x20 | Local4)
                        }
                    }

                    Return (BUF) /* \_SB_.PCI0.IDEC.GTF_.BUF_ */
                }

                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        }
                        Else
                        {
                            VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        }

                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            PPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                            PMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                            PPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                            PUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                            PUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                        }
                        Else
                        {
                            SPIT = VPIT /* \_SB_.PCI0.IDEC.PRID._STM.VPIT */
                            SMDT = VMDT /* \_SB_.PCI0.IDEC.PRID._STM.VMDT */
                            SPIM = VPIM /* \_SB_.PCI0.IDEC.PRID._STM.VPIM */
                            SUDC = VUDC /* \_SB_.PCI0.IDEC.PRID._STM.VUDC */
                            SUDM = VUDM /* \_SB_.PCI0.IDEC.PRID._STM.VUDM */
                        }
                    }

                    Device (P_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }
                            Else
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }

                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (P_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }
                            Else
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }

                            Return (GTF (0xB0, BUF))
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIC)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            VPIT = SPIT /* \_SB_.PCI0.IDEC.SPIT */
                            VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                            VPIC = SPIC /* \_SB_.PCI0.IDEC.SPIC */
                            VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                            VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                        }
                        Else
                        {
                            VPIT = PPIT /* \_SB_.PCI0.IDEC.PPIT */
                            VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                            VPIC = PPIC /* \_SB_.PCI0.IDEC.PPIC */
                            VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                            VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                        }

                        Return (GTM (BUF))
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        Name (BUF, Buffer (0x07)
                        {
                             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00         /* ....... */
                        })
                        CreateWordField (BUF, Zero, VPIT)
                        CreateWordField (BUF, 0x02, VMDT)
                        CreateByteField (BUF, 0x04, VPIM)
                        CreateByteField (BUF, 0x05, VUDC)
                        CreateByteField (BUF, 0x06, VUDM)
                        BUF = STM (Arg0, Arg1, Arg2)
                        If (((^^^SMBS.REV >= 0x3A) || ^^^SMBS.SOPT))
                        {
                            SPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                            SMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                            SPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                            SUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                            SUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                        }
                        Else
                        {
                            PPIT = VPIT /* \_SB_.PCI0.IDEC.SECD._STM.VPIT */
                            PMDT = VMDT /* \_SB_.PCI0.IDEC.SECD._STM.VMDT */
                            PPIM = VPIM /* \_SB_.PCI0.IDEC.SECD._STM.VPIM */
                            PUDC = VUDC /* \_SB_.PCI0.IDEC.SECD._STM.VUDC */
                            PUDM = VUDM /* \_SB_.PCI0.IDEC.SECD._STM.VUDM */
                        }
                    }

                    Device (S_D0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }
                            Else
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }

                            Return (GTF (0xA0, BUF))
                        }
                    }

                    Device (S_D1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (BUF, Buffer (0x05)
                            {
                                 0x00, 0x00, 0x00, 0x00, 0x00                     /* ..... */
                            })
                            CreateWordField (BUF, Zero, VMDT)
                            CreateByteField (BUF, 0x02, VPIM)
                            CreateByteField (BUF, 0x03, VUDC)
                            CreateByteField (BUF, 0x04, VUDM)
                            If (((^^^^SMBS.REV >= 0x3A) || ^^^^SMBS.SOPT))
                            {
                                VMDT = SMDT /* \_SB_.PCI0.IDEC.SMDT */
                                VPIM = SPIM /* \_SB_.PCI0.IDEC.SPIM */
                                VUDC = SUDC /* \_SB_.PCI0.IDEC.SUDC */
                                VUDM = SUDM /* \_SB_.PCI0.IDEC.SUDM */
                            }
                            Else
                            {
                                VMDT = PMDT /* \_SB_.PCI0.IDEC.PMDT */
                                VPIM = PPIM /* \_SB_.PCI0.IDEC.PPIM */
                                VUDC = PUDC /* \_SB_.PCI0.IDEC.PUDC */
                                VUDM = PUDM /* \_SB_.PCI0.IDEC.PUDM */
                            }

                            Return (GTF (0xB0, BUF))
                        }
                    }
                }
            }

            Device (SBAZ)
            {
                Name (_ADR, 0x00140002)  // _ADR: Address
                OperationRegion (PCI, PCI_Config, Zero, 0x0100)
                Field (PCI, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x42), 
                    DNSP,   1, 
                    DNSO,   1, 
                    ENSR,   1
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x1B, 0x04))
                }
            }

            Device (SBRG)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (RMBS, PCI_Config, Zero, 0x0100)
                Field (RMBS, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x6C), 
                    LR2S,   16, 
                    LR2E,   16
                }

                Method (SPTS, 1, NotSerialized)
                {
                }

                Method (SWAK, 1, NotSerialized)
                {
                }

                Device (S800)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x0700)  // _UID: Unique ID
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x040B,             // Range Minimum
                            0x040B,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D6,             // Range Minimum
                            0x04D6,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C52,             // Range Minimum
                            0x0C52,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6C,             // Range Minimum
                            0x0C6C,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C6F,             // Range Minimum
                            0x0C6F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD2,             // Range Minimum
                            0x0CD2,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD4,             // Range Minimum
                            0x0CD4,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD6,             // Range Minimum
                            0x0CD6,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD8,             // Range Minimum
                            0x0CD8,             // Range Maximum
                            0x00,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0D)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y10)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0F)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y0E)
                        IO (Decode16,
                            0x0900,             // Range Minimum
                            0x0900,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0910,             // Range Minimum
                            0x0910,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFE00,             // Range Minimum
                            0xFE00,             // Range Maximum
                            0x00,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y11)
                        Memory32Fixed (ReadWrite,
                            0xFEE00000,         // Address Base
                            0x00001000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED80000,         // Address Base
                            0x00010000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED61000,         // Address Base
                            0x00010000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y12)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y13)
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y14)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0D._MIN, PBB)  // _MIN: Minimum Base Address
                        CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0D._MAX, PBH)  // _MAX: Maximum Base Address
                        CreateByteField (CRS, \_SB.PCI0.SBRG.S800._Y0D._LEN, PML)  // _LEN: Length
                        PBB = PMBS /* \PMBS */
                        PBH = PMBS /* \PMBS */
                        PML = PMLN /* \PMLN */
                        If (SMBB)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0E._MIN, SMB1)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0E._MAX, SMH1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.S800._Y0E._LEN, SML1)  // _LEN: Length
                            SMB1 = SMBB /* \SMBB */
                            SMH1 = SMBB /* \SMBB */
                            SML1 = SMBL /* \SMBL */
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0F._MIN, SMB0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y0F._MAX, SMH0)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.S800._Y0F._LEN, SML0)  // _LEN: Length
                            SMB0 = SMB0 /* \_SB_.PCI0.SBRG.S800._CRS.SMB0 */
                            SMH0 = SMB0 /* \_SB_.PCI0.SBRG.S800._CRS.SMB0 */
                            SML0 = SMBM /* \SMBM */
                        }

                        If (GPBS)
                        {
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y10._MIN, IGB)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.SBRG.S800._Y10._MAX, IGH)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.SBRG.S800._Y10._LEN, IGL)  // _LEN: Length
                            IGB = GPBS /* \GPBS */
                            IGH = GPBS /* \GPBS */
                            IGL = GPLN /* \GPLN */
                        }

                        If (APCB)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y11._BAS, APB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y11._LEN, APL)  // _LEN: Length
                            APB = APCB /* \APCB */
                            APL = APCL /* \APCL */
                        }

                        If (SPIB)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y12._BAS, SPIB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y12._LEN, SPIL)  // _LEN: Length
                            SPIB = \SPIB
                            SPIL = \SPIL
                        }

                        If (HPTB)
                        {
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y13._BAS, HXTB)  // _BAS: Base Address
                            CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y13._LEN, HXTL)  // _LEN: Length
                            HXTB = HPTB /* \HPTB */
                            HXTL = HPTL /* \HPTL */
                        }

                        CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y14._BAS, ROMB)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.SBRG.S800._Y14._LEN, ROML)  // _LEN: Length
                        If (LR2S)
                        {
                            ROMB = (LR2S << 0x10)
                            ROML = (((LR2E - LR2S) + One) << 0x10)
                        }
                        Else
                        {
                            ROMB = ROMS /* \ROMS */
                            ROML = (Zero - ROMS) /* \ROMS */
                        }

                        Return (CRS) /* \_SB_.PCI0.SBRG.S800.CRS_ */
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (DMAD)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        DMA (Compatibility, BusMaster, Transfer8, )
                            {4}
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x00,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (RTC0)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (RMSC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0062,             // Range Minimum
                            0x0062,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x00,               // Alignment
                            0x0B,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x0044,             // Range Minimum
                            0x0044,             // Range Maximum
                            0x00,               // Alignment
                            0x1C,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x00,               // Alignment
                            0x0E,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x00A2,             // Range Minimum
                            0x00A2,             // Range Maximum
                            0x00,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00E0,             // Range Minimum
                            0x00E0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((MBEC & 0xFFFF))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.RMSC.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.RMSC.CRS2 */
                        }
                    }
                }

                Device (COPR)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (NBRM)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x99)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (CRS) /* \_SB_.PCI0.SBRG.NBRM.CRS_ */
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }
                }

                Scope (\)
                {
                    Name (KBFG, One)
                }

                Device (PSM0)
                {
                    Name (_HID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (TPTY)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {12}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                }

                Device (PSM1)
                {
                    Name (_HID, EisaId ("ETD0B00"))  // _HID: Hardware ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (TPTY)
                        {
                            Return (Zero)
                        }
                        Else
                        {
                            Return (0x0F)
                        }
                    }

                    Name (_CID, Package (0x02)  // _CID: Compatible ID
                    {
                        EisaId ("SYN0002"), 
                        EisaId ("PNP0F13") /* PS/2 Mouse */
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.SBRG.PSM1.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.SBRG.PSM1.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }
                }

                Scope (\)
                {
                    Name (MSFG, One)
                }

                Device (H_EC)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BFFR, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                        })
                        Return (BFFR) /* \_SB_.PCI0.SBRG.H_EC._CRS.BFFR */
                    }

                    OperationRegion (ECR, EmbeddedControl, Zero, 0xFF)
                    Field (ECR, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x18), 
                        SPTR,   8, 
                        SSTS,   8, 
                        SADR,   8, 
                        SCMD,   8, 
                        SBFR,   256, 
                        SCNT,   8, 
                        Offset (0x80), 
                        B1EX,   1, 
                            ,   1, 
                        ACEX,   1, 
                        Offset (0x81), 
                        SWBE,   1, 
                        DCBE,   1, 
                        Offset (0x82), 
                        WLST,   1, 
                        Offset (0x83), 
                        LSTE,   1, 
                        Offset (0x84), 
                        B1ST,   8, 
                        Offset (0x86), 
                        BRIT,   8, 
                        Offset (0xA0), 
                        B1RR,   32, 
                        B1PV,   32, 
                        B2RR,   32, 
                        B2PV,   32, 
                        B1AF,   32, 
                        B1VL,   32, 
                        B2AF,   32, 
                        B2VL,   32, 
                        CTMP,   8, 
                        Offset (0xC7), 
                        TIST,   8, 
                        Offset (0xD0), 
                        B1TI,   16, 
                        B1SE,   16, 
                        B1CR,   16, 
                        B1TM,   16
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If (((Arg0 == 0x03) && (Arg1 == One)))
                        {
                            ECON = One
                            SPWR = ACEX /* \_SB_.PCI0.SBRG.H_EC.ACEX */
                        }
                    }

                    Name (_GPE, 0x03)  // _GPE: General Purpose Events
                    Method (_Q51, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        P80H = 0x51
                        SPWR = One
                        Notify (ADP1, 0x80) // Status Change
                        SECS (0x96)
                    }

                    Method (_Q52, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        P80H = 0x52
                        SPWR = Zero
                        Notify (ADP1, 0x80) // Status Change
                        SECS (0x96)
                    }

                    Method (_Q53, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Notify (BAT1, One) // Device Check
                        Notify (BAT1, 0x81) // Information Change
                    }

                    Method (_Q54, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Notify (BAT1, One) // Device Check
                        Notify (BAT1, 0x81) // Information Change
                    }

                    Method (_Q5B, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        Notify (SLPB, 0x80) // Status Change
                    }

                    Method (_Q5E, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        SLID = LSTE /* \_SB_.PCI0.SBRG.H_EC.LSTE */
                        Notify (LID, 0x80) // Status Change
                    }

                    Method (_Q5F, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        SLID = LSTE /* \_SB_.PCI0.SBRG.H_EC.LSTE */
                        Notify (LID, 0x80) // Status Change
                    }

                    Method (_Q60, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((B1EX == One))
                        {
                            Notify (BAT1, 0x80) // Status Change
                        }
                    }

                    Method (_Q61, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((B1EX == One))
                        {
                            Notify (BAT1, 0x80) // Status Change
                        }
                    }

                    Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        P80H = 0x63
                        SECS (0x88)
                        If ((OSTP >= 0x07D6))
                        {
                            If (MGVR)
                            {
                                Notify (^^^VGA.LCD, 0x87) // Device-Specific
                            }
                        }
                    }

                    Method (_Q64, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        P80H = 0x64
                        SECS (0x89)
                        If ((OSTP >= 0x07D6))
                        {
                            If (MGVR)
                            {
                                Notify (^^^VGA.LCD, 0x86) // Device-Specific
                            }
                        }
                    }

                    Method (_Q66, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((B1EX == One))
                        {
                            Notify (BAT1, 0x80) // Status Change
                        }
                    }

                    Method (_Q6F, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        If ((GSSR == One))
                        {
                            Local1 = DIAG /* \DIAG */
                            If (Local1)
                            {
                                TZON = Zero
                            }
                            Else
                            {
                                Local0 = TIST /* \_SB_.PCI0.SBRG.H_EC.TIST */
                                TZON = Local0
                            }
                        }
                        Else
                        {
                            If ((GSSR == 0x02)) {}
                            Else
                            {
                                If ((GSSR == 0x03))
                                {
                                    If ((RCNT >= One))
                                    {
                                        If ((RCST < CCST)) {}
                                        Else
                                        {
                                            GSSR = Zero
                                        }
                                    }
                                    Else
                                    {
                                    }
                                }
                                Else
                                {
                                    If ((GSSR == Zero)) {}
                                }
                            }
                        }
                    }

                    Method (_Q73, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        GSSR = One
                        If ((TIST <= 0x02))
                        {
                            Local0 = TIST /* \_SB_.PCI0.SBRG.H_EC.TIST */
                            TZON = Local0
                            Local1 = DIAG /* \DIAG */
                            If (Local1)
                            {
                                Sleep (0x64)
                            }
                            Else
                            {
                            }
                        }
                        Else
                        {
                            TZON = Zero
                        }
                    }

                    Method (_Q7D, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        SECS (0x92)
                    }

                    Method (_Q7E, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        SECS (0x93)
                    }

                    Method (_Q7F, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        SECS (0xF2)
                    }

                    Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query
                    {
                        BreakPoint
                    }
                }

                Scope (\_SB)
                {
                    Device (ADP1)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            If ((ECON == Zero))
                            {
                                Local0 = SECB (0x85, 0x02)
                            }
                            Else
                            {
                                Local0 = ^^PCI0.SBRG.H_EC.ACEX /* \_SB_.PCI0.SBRG.H_EC.ACEX */
                            }

                            Return (Local0)
                        }

                        Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                        {
                            Return (BAT1) /* \_SB_.BAT1 */
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((ECON == Zero))
                            {
                                Local0 = 0x0F
                            }
                            Else
                            {
                                If ((^^PCI0.SBRG.H_EC.ACEX == Zero))
                                {
                                    Local0 = 0x1F
                                }
                                Else
                                {
                                    Local0 = 0x0F
                                }
                            }

                            Return (Local0)
                        }
                    }

                    Device (BAT1)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (BATI, Package (0x0D)
                        {
                            One, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            0x03, 
                            0x0A, 
                            One, 
                            One, 
                            "Unknown", 
                            "Unknown", 
                            "Unknown", 
                            "Unknown"
                        })
                        Method (_BIF, 0, Serialized)  // _BIF: Battery Information
                        {
                            If ((ECON == Zero))
                            {
                                Local0 = SECW (0x82, 0xB0, Zero)
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (BATI, One) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (BATI, One) = Local0
                                }

                                Local0 = SECW (0x82, 0xB2, Zero)
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (BATI, 0x02) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (BATI, 0x02) = Local0
                                }

                                Local0 = SECW (0x82, 0xB4, Zero)
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (BATI, 0x04) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (BATI, 0x04) = Local0
                                }

                                Index (BATI, 0x05) = Zero
                                Local0 = SECW (0x82, 0xB6, Zero)
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (BATI, 0x06) = Zero
                                }
                                Else
                                {
                                    Index (BATI, 0x06) = Local0
                                }

                                If ((RELT == 0xBA))
                                {
                                    Index (BATI, 0x06) = Zero
                                }
                            }
                            Else
                            {
                                Local3 = ^^PCI0.SBRG.H_EC.B1AF /* \_SB_.PCI0.SBRG.H_EC.B1AF */
                                Local4 = ^^PCI0.SBRG.H_EC.B1VL /* \_SB_.PCI0.SBRG.H_EC.B1VL */
                                Local0 = Local3
                                Local0 &= 0xFFFF
                                Local1 = (Local0 << 0x08)
                                Local1 &= 0xFF00
                                Local0 >>= 0x08
                                Local0 |= Local1
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (BATI, One) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (BATI, One) = Local0
                                }

                                Local0 = Local3
                                Local0 >>= 0x10
                                Local0 &= 0xFFFF
                                Local1 = (Local0 << 0x08)
                                Local1 &= 0xFF00
                                Local0 >>= 0x08
                                Local0 |= Local1
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (BATI, 0x02) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (BATI, 0x02) = Local0
                                }

                                Local0 = Local4
                                Local0 &= 0xFFFF
                                Local1 = (Local0 << 0x08)
                                Local1 &= 0xFF00
                                Local0 >>= 0x08
                                Local0 |= Local1
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (BATI, 0x04) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (BATI, 0x04) = Local0
                                }

                                Index (BATI, 0x05) = Zero
                                Local0 = Local4
                                Local0 >>= 0x10
                                Local0 &= 0xFFFF
                                Local1 = (Local0 << 0x08)
                                Local1 &= 0xFF00
                                Local0 >>= 0x08
                                Local0 |= Local1
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (BATI, 0x06) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (BATI, 0x06) = Local0
                                }

                                If ((RELT == 0xBA))
                                {
                                    Index (BATI, 0x06) = Zero
                                }
                            }

                            Index (BATI, 0x09) = ""
                            Index (BATI, 0x0A) = ""
                            Index (BATI, 0x0B) = "LION"
                            Index (BATI, 0x0C) = "SAMSUNG Electronics"
                            Return (BATI) /* \_SB_.BAT1.BATI */
                        }

                        Name (STAT, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Method (_BST, 0, Serialized)  // _BST: Battery Status
                        {
                            If ((ECON == Zero))
                            {
                                Local0 = SECB (0x81, 0x84)
                                If (((Local0 != Zero) && (Local0 != 0x05)))
                                {
                                    If ((SPWR == One))
                                    {
                                        Local0 = 0x02
                                    }
                                    Else
                                    {
                                        Local0 = One
                                    }
                                }

                                Index (STAT, Zero) = Local0
                                Local0 = SECW (0x82, 0xA4, Zero)
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (STAT, One) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    If ((Local0 >= 0x8000))
                                    {
                                        Local0 ^= 0xFFFF
                                        Local0++
                                    }

                                    Index (STAT, One) = Local0
                                }

                                Local0 = SECW (0x82, 0xA2, Zero)
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (STAT, 0x02) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (STAT, 0x02) = Local0
                                }

                                Local0 = SECW (0x82, 0xA6, Zero)
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (STAT, 0x03) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (STAT, 0x03) = Local0
                                }
                            }
                            Else
                            {
                                Local3 = ^^PCI0.SBRG.H_EC.B1RR /* \_SB_.PCI0.SBRG.H_EC.B1RR */
                                Local4 = ^^PCI0.SBRG.H_EC.B1PV /* \_SB_.PCI0.SBRG.H_EC.B1PV */
                                Local0 = Local3
                                Local0 &= 0xFF
                                If (((Local0 != Zero) && (Local0 != 0x05)))
                                {
                                    If ((SPWR == One))
                                    {
                                        Local0 = 0x02
                                    }
                                    Else
                                    {
                                        Local0 = One
                                    }
                                }

                                Index (STAT, Zero) = Local0
                                Local0 = Local4
                                Local0 &= 0xFFFF
                                Local1 = (Local0 << 0x08)
                                Local1 &= 0xFF00
                                Local0 >>= 0x08
                                Local0 |= Local1
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (STAT, One) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    If ((Local0 >= 0x8000))
                                    {
                                        Local0 ^= 0xFFFF
                                        Local0++
                                    }

                                    Index (STAT, One) = Local0
                                }

                                Local0 = Local3
                                Local0 >>= 0x10
                                Local0 &= 0xFFFF
                                Local1 = (Local0 << 0x08)
                                Local1 &= 0xFF00
                                Local0 >>= 0x08
                                Local0 |= Local1
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (STAT, 0x02) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (STAT, 0x02) = Local0
                                }

                                Local0 = Local4
                                Local0 >>= 0x10
                                Local0 &= 0xFFFF
                                Local1 = (Local0 << 0x08)
                                Local1 &= 0xFF00
                                Local0 >>= 0x08
                                Local0 |= Local1
                                If ((Local0 == 0xFFFF))
                                {
                                    Index (STAT, 0x03) = 0xFFFFFFFF
                                }
                                Else
                                {
                                    Index (STAT, 0x03) = Local0
                                }
                            }

                            Return (STAT) /* \_SB_.BAT1.STAT */
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If ((ECON == Zero))
                            {
                                If ((SECB (0x85, Zero) == One))
                                {
                                    Local0 = 0x1F
                                }
                                Else
                                {
                                    Local0 = 0x0F
                                }
                            }
                            Else
                            {
                                If ((^^PCI0.SBRG.H_EC.B1EX == One))
                                {
                                    Local0 = 0x1F
                                }
                                Else
                                {
                                    Local0 = 0x0F
                                }
                            }

                            Return (Local0)
                        }

                        Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                        {
                            Return (_SB) /* \_SB_ */
                        }
                    }

                    Device (LID)
                    {
                        Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                        {
                            Return (SLID) /* \SLID */
                        }
                    }

                    Device (PWRB)
                    {
                        Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                        {
                            0x06, 
                            0x05
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Scope (\_GPE)
                    {
                        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
                        {
                            SLID = One
                            Notify (\_SB.LID, 0x80) // Status Change
                            Notify (\_SB.PWRB, 0x02) // Device Wake
                            SLID = One
                            Notify (\_SB.LID, 0x80) // Status Change
                        }
                    }

                    Device (SLPB)
                    {
                        Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }
                }

                Scope (^SMBS)
                {
                    Mutex (PSMX, 0x00)
                }
            }

            Device (P0PC)
            {
                Name (_ADR, 0x00140004)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x04, 0x04))
                }
            }

            Device (GEC)
            {
                Name (_ADR, 0x00140006)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x13, 0x04))
                }
            }

            Device (UHC1)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Name (_S1D, 0x02)  // _S1D: S1 Device State
                Name (_S2D, 0x02)  // _S2D: S2 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                Name (XPRW, Package (0x02)
                {
                    0x0B, 
                    0x03
                })
                Device (UHCX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSTP >= 0x07D9))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Device (UHC2)
            {
                Name (_ADR, 0x00120002)  // _ADR: Address
                Name (XPRW, Package (0x02)
                {
                    0x0B, 
                    0x03
                })
                Device (EHCX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSTP >= 0x07D9))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Device (USB3)
            {
                Name (_ADR, 0x00130000)  // _ADR: Address
                Name (_S1D, 0x02)  // _S1D: S1 Device State
                Name (_S2D, 0x02)  // _S2D: S2 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                Name (XPRW, Package (0x02)
                {
                    0x0B, 
                    0x03
                })
                Device (UHCX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSTP >= 0x07D9))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Device (UHC4)
            {
                Name (_ADR, 0x00130002)  // _ADR: Address
                Name (XPRW, Package (0x02)
                {
                    0x0B, 
                    0x03
                })
                Device (EHCX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSTP >= 0x07D9))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Device (USB5)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Name (_S1D, 0x02)  // _S1D: S1 Device State
                Name (_S2D, 0x02)  // _S2D: S2 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                Name (XPRW, Package (0x02)
                {
                    0x0B, 
                    0x03
                })
                Device (UHCX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSTP >= 0x07D9))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Device (UHC6)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
                Name (_S1D, 0x02)  // _S1D: S1 Device State
                Name (_S2D, 0x02)  // _S2D: S2 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                Name (XPRW, Package (0x02)
                {
                    0x0B, 
                    0x03
                })
                Device (UHCX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSTP >= 0x07D9))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Device (UHC7)
            {
                Name (_ADR, 0x00140005)  // _ADR: Address
                Name (_S1D, 0x02)  // _S1D: S1 Device State
                Name (_S2D, 0x02)  // _S2D: S2 Device State
                Name (_S3D, 0x02)  // _S3D: S3 Device State
                Name (_S4D, 0x02)  // _S4D: S4 Device State
                Name (XPRW, Package (0x02)
                {
                    0x0B, 
                    0x03
                })
                Device (UHCX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((OSTP >= 0x07D9))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                        {
                            Zero, 
                            0xFF, 
                            Zero, 
                            Zero
                        })
                    }
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
                If ((STCL == 0x0101))
                {
                    Method (_INI, 0, NotSerialized)  // _INI: Initialize
                    {
                    }

                    OperationRegion (SACS, PCI_Config, Zero, 0x40)
                    Field (SACS, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x24), 
                        STB5,   32
                    }

                    Name (SPTM, Buffer (0x14)
                    {
                        /* 0000 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0008 */  0x78, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00,  /* x....... */
                        /* 0010 */  0x1F, 0x00, 0x00, 0x00                           /* .... */
                    })
                    Device (PRID)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (PRIS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x120), 
                                    ,   7, 
                                PMBY,   1, 
                                Offset (0x128), 
                                PMS0,   4, 
                                Offset (0x129), 
                                PMS1,   4, 
                                Offset (0x220), 
                                    ,   7, 
                                PSBY,   1, 
                                Offset (0x228), 
                                PSS0,   4, 
                                Offset (0x229), 
                                PSS1,   4, 
                                Offset (0x2A0), 
                                    ,   7
                            }

                            If (((OSTY == 0x06) || (OSTY == 0x04)))
                            {
                                If (PMS1)
                                {
                                    Local0 = 0x32
                                    While (((PMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (PSS1)
                                {
                                    Local0 = 0x32
                                    While (((PSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            PRIS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            PRIS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (PRIS) /* \_SB_.PCI0.SATA.PRID.PRIS */
                        }

                        Device (P_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x128), 
                                    PMS0,   4, 
                                    Offset (0x129), 
                                    PMS1,   4
                                }

                                If (~(PMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x120), 
                                        ,   7, 
                                    PMBY,   1
                                }

                                Local0 = 0x32
                                While (((PMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D0.S12P */
                            }
                        }

                        Device (P_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x228), 
                                    PSS0,   4, 
                                    Offset (0x229), 
                                    PSS1,   4
                                }

                                If (~(PSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x220), 
                                        ,   7, 
                                    PSBY,   1
                                }

                                Local0 = 0x32
                                While (((PSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.PRID.P_D1.S12P */
                            }
                        }
                    }

                    Device (SECD)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                        {
                            Return (SPTM) /* \_SB_.PCI0.SATA.SPTM */
                        }

                        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                        {
                        }

                        Name (SECS, Zero)
                        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                        {
                            OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                            Field (BAR, AnyAcc, NoLock, Preserve)
                            {
                                Offset (0x1A0), 
                                    ,   7, 
                                SMBY,   1, 
                                Offset (0x1A8), 
                                SMS0,   4, 
                                Offset (0x1A9), 
                                SMS1,   4, 
                                Offset (0x2A0), 
                                    ,   7, 
                                SSBY,   1, 
                                Offset (0x2A8), 
                                SSS0,   4, 
                                Offset (0x2A9), 
                                SSS1,   4, 
                                Offset (0x2AC)
                            }

                            If (((OSTY == 0x06) || (OSTY == 0x04)))
                            {
                                If (SMS1)
                                {
                                    Local0 = 0x32
                                    While (((SMBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }

                                If (SSS1)
                                {
                                    Local0 = 0x32
                                    While (((SSBY == One) && Local0))
                                    {
                                        Sleep (0xFA)
                                        Local0--
                                    }
                                }
                            }

                            SECS = Zero
                        }

                        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                        {
                            SECS = 0x03
                        }

                        Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                        {
                            Return (SECS) /* \_SB_.PCI0.SATA.SECD.SECS */
                        }

                        Device (S_D0)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A8), 
                                    SMS0,   4, 
                                    Offset (0x1A9), 
                                    SMS1,   4
                                }

                                If (~(SMS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x1000)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x1A0), 
                                        ,   7, 
                                    SMBY,   1
                                }

                                Local0 = 0x32
                                While (((SMBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D0.S12P */
                            }
                        }

                        Device (S_D1)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A8), 
                                    SSS0,   4, 
                                    Offset (0x2A9), 
                                    SSS1,   4
                                }

                                If (~(SSS1 == Zero))
                                {
                                    Return (0x0F)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Name (S12P, Zero)
                            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                            {
                                OperationRegion (BAR, SystemMemory, STB5, 0x0400)
                                Field (BAR, AnyAcc, NoLock, Preserve)
                                {
                                    Offset (0x2A0), 
                                        ,   7, 
                                    SSBY,   1
                                }

                                Local0 = 0x32
                                While (((SSBY == One) && Local0))
                                {
                                    Sleep (0xFA)
                                    Local0--
                                }

                                S12P = Zero
                            }

                            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                            {
                                S12P = 0x03
                            }

                            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                            {
                                Return (S12P) /* \_SB_.PCI0.SATA.SECD.S_D1.S12P */
                            }
                        }
                    }
                }
            }

            Device (PE20)
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0F, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR20) /* \_SB_.AR20 */
                    }

                    Return (PR20) /* \_SB_.PR20 */
                }
            }

            Device (PE21)
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x10, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR21) /* \_SB_.AR21 */
                    }

                    Return (PR21) /* \_SB_.PR21 */
                }
            }

            Device (PE22)
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x11, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR22) /* \_SB_.AR22 */
                    }

                    Return (PR22) /* \_SB_.PR22 */
                }
            }

            Device (PE23)
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR23) /* \_SB_.AR23 */
                    }

                    Return (PR23) /* \_SB_.PR23 */
                }

                Device (UB30)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                    Name (XPRW, Package (0x02)
                    {
                        0x12, 
                        0x03
                    })
                }
            }

            Device (GNBD)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Scope (\)
                {
                    OperationRegion (ATFB, SystemMemory, 0xAFB5ED98, 0x0105)
                    Field (ATFB, AnyAcc, NoLock, Preserve)
                    {
                        BCMD,   8, 
                        DID,    32, 
                        INFO,   2048
                    }

                    Field (ATFB, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x05), 
                        INF0,   8, 
                        INF1,   8, 
                        INF2,   8, 
                        INF3,   8, 
                        INF4,   8, 
                        INF5,   8, 
                        INF6,   8, 
                        INF7,   8
                    }

                    Field (ATFB, AnyAcc, NoLock, Preserve)
                    {
                        AccessAs (ByteAcc, 0x00), 
                        Offset (0x05), 
                        INF,    8
                    }
                }

                OperationRegion (NBRV, PCI_Config, 0x08, One)
                Field (NBRV, ByteAcc, NoLock, Preserve)
                {
                    PREV,   8
                }

                OperationRegion (NBBR, PCI_Config, 0x1C, 0x08)
                Field (NBBR, DWordAcc, NoLock, Preserve)
                {
                    BR3L,   32, 
                    BR3H,   32
                }

                OperationRegion (NBBI, PCI_Config, 0x84, 0x04)
                Field (NBBI, DWordAcc, NoLock, Preserve)
                {
                    PARB,   32
                }

                OperationRegion (NBMS, PCI_Config, 0x60, 0x08)
                Field (NBMS, DWordAcc, NoLock, Preserve)
                {
                    MIDX,   32, 
                    MIDR,   32
                }

                Mutex (NBMM, 0x00)
                Method (NBMR, 1, NotSerialized)
                {
                    Acquire (NBMM, 0xFFFF)
                    Local0 = (Arg0 & 0x7F)
                    MIDX = Local0
                    Local0 = MIDR /* \_SB_.PCI0.GNBD.MIDR */
                    MIDX = 0x7F
                    Release (NBMM)
                    Return (Local0)
                }

                Method (NBMW, 2, NotSerialized)
                {
                    Acquire (NBMM, 0xFFFF)
                    Local0 = (Arg0 & 0x7F)
                    Local0 |= 0x80
                    MIDX = Local0
                    MIDR = Arg1
                    MIDX = Local0 &= 0x7F
                    Release (NBMM)
                }

                OperationRegion (NBXP, PCI_Config, 0xE0, 0x08)
                Field (NBXP, DWordAcc, NoLock, Preserve)
                {
                    NBXI,   32, 
                    NBXD,   32
                }

                Mutex (NBXM, 0x00)
                Method (NBXR, 1, NotSerialized)
                {
                    Acquire (NBXM, 0xFFFF)
                    NBXI = Arg0
                    Local0 = NBXD /* \_SB_.PCI0.GNBD.NBXD */
                    NBXI = Zero
                    Release (NBXM)
                    Return (Local0)
                }

                Method (NBXW, 2, NotSerialized)
                {
                    Acquire (NBXM, 0xFFFF)
                    NBXI = Arg0
                    NBXD = Arg1
                    NBXI = Zero
                    Release (NBXM)
                }

                Method (GFXM, 0, NotSerialized)
                {
                    Local0 = NBMR (0x08)
                    Local0 &= 0x0F
                    Return (Local0)
                }

                Method (GPPM, 0, NotSerialized)
                {
                    Local0 = NBMR (0x67)
                    Local0 &= 0xF0
                    Return (Local0)
                }

                Method (GPPX, 0, NotSerialized)
                {
                    Local0 = NBMR (0x2D)
                    Local0 >>= 0x07
                    Local0 &= 0x0F
                    Return (Local0)
                }

                Method (XPTR, 2, NotSerialized)
                {
                    If (((Arg0 < 0x02) && (Arg0 > 0x07)))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Local0 = GPPM ()
                        Local1 = GPPX ()
                        Local0 = One
                        If ((Arg0 < 0x04))
                        {
                            Local1 = (Arg0 + 0x02)
                        }
                        Else
                        {
                            Local1 = (Arg0 + 0x11)
                        }

                        Local0 <<= Local1
                        Local2 = NBMR (0x08)
                        If (Arg1)
                        {
                            Local2 &= ~Local0
                        }
                        Else
                        {
                            Local2 |= Local0
                        }

                        NBMW (0x08, Local2)
                        Return (Ones)
                    }
                }

                Name (PX3L, 0x80000000)
                Name (PX3H, 0x80000000)
                Name (PX3S, 0x10000000)
                Name (PX3K, 0xF0000000)
                Mutex (BR3X, 0x00)
                Method (BR3M, 0, NotSerialized)
                {
                    Local0 = PARB /* \_SB_.PCI0.GNBD.PARB */
                    Local0 >>= 0x10
                    Local0 &= 0x07
                    If (Local0)
                    {
                        Local1 = (One << Local0)
                        Local1 = (0x1000 - Local1)
                        Local1 <<= 0x14
                        PX3K = Local1
                        Local0 = (0x00100000 >> Local0)
                        PX3S = Local0
                    }

                    Acquire (BR3X, 0xFFFF)
                    Local0 = NBMR (Zero)
                    Local0 &= 0xFFFFFFF7
                    NBMW (Zero, Local0)
                    Local0 = BR3L /* \_SB_.PCI0.GNBD.BR3L */
                    Local0 &= PX3K /* \_SB_.PCI0.GNBD.PX3K */
                    PX3L = Local0
                    Local0 = BR3H /* \_SB_.PCI0.GNBD.BR3H */
                    Local0 &= 0xFF
                    PX3H = Local0
                    Local0 = NBMR (Zero)
                    Local0 |= 0x08
                    NBMW (Zero, Local0)
                    Release (BR3X)
                    Return (PX3L) /* \_SB_.PCI0.GNBD.PX3L */
                }

                OperationRegion (NB2, PCI_Config, Zero, 0x0100)
                Field (NB2, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    MI,     32, 
                    MD,     32, 
                    Offset (0x90), 
                    TOM,    32, 
                    OI,     32, 
                    OD,     32, 
                    Offset (0xE0), 
                    LI,     32, 
                    LD,     32
                }

                Device (BROD)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x14)  // _UID: Unique ID
                    Name (UMAS, 0x10000000)
                    Name (CRS, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y15)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (CRS, \_SB.PCI0.GNBD.BROD._Y15._BAS, BAS1)  // _BAS: Base Address
                        CreateDWordField (CRS, \_SB.PCI0.GNBD.BROD._Y15._LEN, LEN1)  // _LEN: Length
                        LEN1 = UMAS /* \_SB_.PCI0.GNBD.BROD.UMAS */
                        BAS1 = (TOM - LEN1) /* \_SB_.PCI0.GNBD.BROD._CRS.LEN1 */
                        Return (CRS) /* \_SB_.PCI0.GNBD.BROD.CRS_ */
                    }
                }
            }

            Device (BR15)
            {
                Name (_ADR, 0x00050000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR15) /* \_SB_.AR15 */
                    }

                    Return (PR15) /* \_SB_.PR15 */
                }
            }

            Device (PCE6)
            {
                Name (_ADR, 0x00060000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16) /* \_SB_.AR16 */
                    }

                    Return (PR16) /* \_SB_.PR16 */
                }
            }

            Device (PCE7)
            {
                Name (_ADR, 0x00070000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR17) /* \_SB_.AR17 */
                    }

                    Return (PR17) /* \_SB_.PR17 */
                }
            }

            Device (PCE8)
            {
                Name (_ADR, 0x00080000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18) /* \_SB_.AR18 */
                    }

                    Return (PR18) /* \_SB_.PR18 */
                }
            }

            Device (PCE4)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
                OperationRegion (XPEX, SystemMemory, 0xE0020100, 0x0100)
                Field (XPEX, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x28), 
                    VC0S,   32
                }

                OperationRegion (PCFG, PCI_Config, Zero, 0x20)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    PCMS,   32, 
                    Offset (0x18), 
                    SBUS,   32
                }

                OperationRegion (XPCB, PCI_Config, 0x58, 0x24)
                Field (XPCB, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x10), 
                    LKCN,   16, 
                    LKST,   16, 
                    Offset (0x1A), 
                        ,   3, 
                    PDC2,   1, 
                        ,   2, 
                    PDS2,   1, 
                    Offset (0x1B), 
                    HPCS,   1, 
                    Offset (0x20), 
                    Offset (0x22), 
                    PMES,   1
                }

                OperationRegion (XPRI, PCI_Config, 0xE0, 0x08)
                Field (XPRI, ByteAcc, NoLock, Preserve)
                {
                    XPIR,   32, 
                    XPID,   32
                }

                Method (XPDL, 0, NotSerialized)
                {
                    Local0 = Zero
                    If ((VC0S & 0x00020000))
                    {
                        Local0 = Ones
                    }

                    Return (Local0)
                }

                Method (XPRD, 1, NotSerialized)
                {
                    XPIR = Arg0
                    Local0 = XPID /* \_SB_.PCI0.PCE4.XPID */
                    XPIR = Zero
                    Return (Local0)
                }

                Method (XPWR, 2, NotSerialized)
                {
                    XPIR = Arg0
                    XPID = Arg1
                    XPIR = Zero
                }

                Method (XPRT, 0, NotSerialized)
                {
                    Local0 = XPRD (0xA2)
                    Local0 &= 0xFFFFFFF8
                    Local1 = (Local0 >> 0x04)
                    Local1 &= 0x07
                    Local0 |= Local1
                    Local0 |= 0x0100
                    XPWR (0xA2, Local0)
                }

                Method (XPPB, 0, NotSerialized)
                {
                    Local0 = _ADR /* \_SB_.PCI0.PCE4._ADR */
                    Local1 = (Local0 >> 0x10)
                    Local1 = (Local1 << 0x03)
                    Local2 = (Local0 & 0x0F)
                    Local3 = (Local1 | Local2)
                    Return (Local3)
                }

                Method (XPCN, 0, NotSerialized)
                {
                    Local1 = Zero
                    Local0 = XPPB ()
                    If ((0x04 > Local0))
                    {
                        Local1 = Zero
                    }

                    If ((0x08 > Local0))
                    {
                        Local1 = 0x00010000
                    }

                    If ((0x0B > Local0))
                    {
                        Local1 = 0x00020000
                    }

                    Return (Local1)
                }

                Method (XPPD, 0, NotSerialized)
                {
                    Local0 = XPPB ()
                    Local2 = ^^GNBD.GPPX ()
                    Local3 = ^^GNBD.GFXM ()
                    Local1 = Zero
                    If ((0x10 == Local0))
                    {
                        Local1 = 0xFFFF
                        If (Local3)
                        {
                            Local1 = 0x0F0F
                        }
                    }

                    If ((0x18 == Local0))
                    {
                        Local1 = 0xF0F0
                    }

                    If ((0x20 == Local0))
                    {
                        Local1 = 0x1010
                    }

                    If ((0x28 == Local0))
                    {
                        Local1 = 0x2020
                    }

                    If ((0x30 == Local0))
                    {
                        Local1 = 0x4040
                    }

                    If ((0x38 == Local0))
                    {
                        Local1 = 0x8080
                    }

                    If ((0x48 == Local0))
                    {
                        Local1 = Zero
                        If ((0x02 == Local2))
                        {
                            Local1 = 0x0303
                        }

                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0101
                        }
                    }

                    If ((0x50 == Local0))
                    {
                        Local1 = Zero
                        If ((0x03 == Local2))
                        {
                            Local1 = 0x0202
                        }
                    }

                    Return (Local1)
                }

                Method (XPLP, 1, NotSerialized)
                {
                    Local1 = XPPD ()
                    If ((Zero != Local1))
                    {
                        Local2 = ^^GNBD.NBXR ((0x65 + XPCN ()))
                        If (Arg0)
                        {
                            Local2 &= ~Local1
                        }
                        Else
                        {
                            Local2 |= Local1
                        }

                        ^^GNBD.NBXW ((0x65 + XPCN ()), Local2)
                    }
                }

                Method (XPR2, 0, NotSerialized)
                {
                    Local0 = LKCN /* \_SB_.PCI0.PCE4.LKCN */
                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    Local0 |= 0x20
                    LKCN = Local0
                    Local1 = 0x64
                    Local2 = One
                    While ((Local1 && Local2))
                    {
                        Sleep (One)
                        Local3 = LKST /* \_SB_.PCI0.PCE4.LKST */
                        If ((Local3 & 0x0800))
                        {
                            Local1--
                        }
                        Else
                        {
                            Local2 = Zero
                        }
                    }

                    Local0 &= 0xFFFFFFDF
                    LKCN = Local0
                    If (!Local2)
                    {
                        Return (Ones)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (XPLL, 1, NotSerialized)
                {
                    Local0 = ^^GNBD.GFXM ()
                    Local1 = XPPB ()
                    Local2 = Zero
                    If ((0x10 == Local1))
                    {
                        Local2 = One
                        Local3 = 0x00770070
                        If (Local0)
                        {
                            Local3 = 0x00330030
                        }
                    }

                    If (((0x18 == Local1) && Local0))
                    {
                        Local2 = One
                        Local3 = 0x00440040
                    }

                    Local0 = ^^GNBD.NBMR (0x07)
                    Local1 = ^^GNBD.NBXR (0x65)
                    If ((Local0 && 0x0201F000))
                    {
                        Local4 = 0x00440040
                        Local5 = Local4
                        If ((~Local1 && 0xF0F0))
                        {
                            Local5 = Zero
                        }
                    }
                    Else
                    {
                        Local4 = 0x00110010
                        Local5 = Local4
                        If ((~Local1 && 0x0F0F))
                        {
                            Local5 = Zero
                        }
                    }

                    If (Local2)
                    {
                        Local6 = (Local3 | Local4)
                        Local0 = (Local5 & Local4)
                        Local7 = (Local3 | Local0)
                        Local0 = ^^GNBD.NBMR (0x2E)
                        If (Arg0)
                        {
                            Local0 &= ~Local6
                        }
                        Else
                        {
                            Local0 |= Local7
                        }

                        ^^GNBD.NBMW (0x2E, Local0)
                    }
                }

                Method (XPPR, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        XPLL (One)
                        XPLP (One)
                        Sleep (0xC8)
                        ^^GNBD.XPTR ((XPPB () << 0x03), One)
                        Sleep (0x14)
                    }
                    Else
                    {
                        ^^GNBD.XPTR ((XPPB () << 0x03), Zero)
                        XPLP (Zero)
                        XPLL (Zero)
                    }

                    Return (Ones)
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }

                    Name (DOSP, Zero)
                    Name (BLVL, Buffer (0x10)
                    {
                        /* 0000 */  0x00, 0x20, 0x30, 0x40, 0x50, 0x58, 0x60, 0x70,  /* . 0@PX`p */
                        /* 0008 */  0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xFF   /* ........ */
                    })
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSP = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x05)
                        {
                            0x00010100, 
                            0x00010110, 
                            0x0200, 
                            0x00010210, 
                            0x00010220
                        })
                    }

                    Device (LCD)
                    {
                        Method (_ADR, 0, NotSerialized)  // _ADR: Address
                        {
                            Return (0x0110)
                        }

                        Name (BRTB, Package (0x08)
                        {
                            0x07, 
                            0x0C, 
                            0x14, 
                            0x1E, 
                            0x2B, 
                            0x3C, 
                            0x50, 
                            0x64
                        })
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            BSUP = 0xB0
                            Return (BRTB) /* \_SB_.PCI0.PCE4.VGA_.LCD_.BRTB */
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            If ((OSTP >= 0x07D6))
                            {
                                Local0 = Zero
                                Local1 = SizeOf (BRTB)
                                Local1--
                                While (((Arg0 > DerefOf (Index (BRTB, Local0))) && (Local0 < Local1)))
                                {
                                    Local0++
                                }

                                Local0++
                                BRTV = Local0
                                SECB (0xA6, BRTV)
                            }
                        }
                    }
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                    OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                    Field (PCFG, DWordAcc, NoLock, Preserve)
                    {
                        DVID,   32, 
                        Offset (0x2C), 
                        SVID,   32, 
                        Offset (0x4C), 
                        SMID,   32
                    }
                }

                Method (XPDT, 1, NotSerialized)
                {
                    If (Arg0)
                    {
                        Local0 = Zero
                        Local2 = Zero
                        While ((Local2 < 0x0F))
                        {
                            PDC2 = One
                            Local4 = One
                            Local5 = 0xC8
                            While ((Local4 && Local5))
                            {
                                Local6 = XPRD (0xA5)
                                Local6 &= 0x7F
                                If (((Local6 >= 0x10) && (Local6 != 0x7F)))
                                {
                                    Local4 = Zero
                                }
                                Else
                                {
                                    Sleep (0x05)
                                    Local5--
                                }
                            }

                            If (!Local4)
                            {
                                Local5 = XPDL ()
                                If (Local5)
                                {
                                    XPRT ()
                                    Sleep (0x05)
                                    Local2++
                                }
                                Else
                                {
                                    INFO = (XPPB () << 0x03)
                                    BCMD = 0x87
                                    ^^SBRG.SMIC = Zero
                                    If ((XPR2 () == Ones))
                                    {
                                        Local0 = One
                                        Local2 = 0x10
                                    }
                                    Else
                                    {
                                        Local0 = Zero
                                        Local2 = 0x10
                                    }
                                }
                            }
                            Else
                            {
                                Local2 = 0x10
                            }
                        }

                        If (!Local0)
                        {
                            XPDT (Zero)
                            XPPR (Zero)
                            Return (Zero)
                        }

                        Return (Ones)
                    }
                    Else
                    {
                        PDC2 = One
                        Local7 = ^VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                        Sleep (0x0A)
                        Local4 = One
                        Local5 = 0x05
                        While ((Local4 && Local5))
                        {
                            Local6 = XPRD (0xA5)
                            Local6 &= 0x7F
                            If ((Local6 <= 0x04))
                            {
                                Local4 = Zero
                            }
                            Else
                            {
                                Local7 = ^VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                                Sleep (0x05)
                                Local5--
                            }
                        }

                        Return (Ones)
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PR14) /* \_SB_.PR14 */
                }
            }

            Device (VGA)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (PCFG, PCI_Config, Zero, 0x50)
                Field (PCFG, DWordAcc, NoLock, Preserve)
                {
                    DVID,   32, 
                    Offset (0x2C), 
                    SVID,   32, 
                    Offset (0x4C), 
                    SMID,   32
                }

                Name (DOSP, Zero)
                Name (BLVL, Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x20, 0x30, 0x40, 0x50, 0x58, 0x60, 0x70,  /* . 0@PX`p */
                    /* 0008 */  0x80, 0x90, 0xA0, 0xB0, 0xC0, 0xD0, 0xE0, 0xFF   /* ........ */
                })
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DOSP = Arg0
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    Return (Package (0x05)
                    {
                        0x00010100, 
                        0x00010110, 
                        0x0200, 
                        0x00010210, 
                        0x00010220
                    })
                }

                Device (LCD)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return (0x0110)
                    }

                    Name (BRTB, Package (0x08)
                    {
                        0x07, 
                        0x0C, 
                        0x14, 
                        0x1E, 
                        0x2B, 
                        0x3C, 
                        0x50, 
                        0x64
                    })
                    Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                    {
                        BSUP = 0xB0
                        Return (BRTB) /* \_SB_.PCI0.VGA_.LCD_.BRTB */
                    }

                    Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                    {
                        If ((OSTP >= 0x07D6))
                        {
                            Local0 = Zero
                            Local1 = SizeOf (BRTB)
                            Local1--
                            While (((Arg0 > DerefOf (Index (BRTB, Local0))) && (Local0 < Local1)))
                            {
                                Local0++
                            }

                            Local0++
                            BRTV = Local0
                            SECB (0xA6, BRTV)
                        }
                    }
                }
            }
        }

        Scope (\_GPE)
        {
            Method (_L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.SBAZ, 0x02) // Device Wake
            }

            Method (_L04, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.P0PC, 0x02) // Device Wake
            }

            Method (_L13, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.GEC, 0x02) // Device Wake
            }

            Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.PE20, 0x02) // Device Wake
            }

            Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.PE21, 0x02) // Device Wake
            }

            Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.PE22, 0x02) // Device Wake
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
        Field (PIRQ, ByteAcc, NoLock, Preserve)
        {
            PIDX,   8, 
            PDAT,   8
        }

        IndexField (PIDX, PDAT, ByteAcc, NoLock, Preserve)
        {
            PIRA,   8, 
            PIRB,   8, 
            PIRC,   8, 
            PIRD,   8, 
            PIRE,   8, 
            PIRF,   8, 
            PIRG,   8, 
            PIRH,   8, 
            Offset (0x10), 
            PIRS,   8, 
            Offset (0x13), 
            HDAD,   8, 
            Offset (0x15), 
            GEC,    8, 
            Offset (0x30), 
            USB1,   8, 
            USB2,   8, 
            USB3,   8, 
            USB4,   8, 
            USB5,   8, 
            USB6,   8, 
            USB7,   8, 
            Offset (0x40), 
            IDE,    8, 
            SATA,   8, 
            Offset (0x50), 
            GPP0,   8, 
            GPP1,   8, 
            GPP2,   8, 
            GPP3,   8
        }

        OperationRegion (KBDD, SystemIO, 0x64, One)
        Field (KBDD, ByteAcc, NoLock, Preserve)
        {
            PD64,   8
        }

        Method (IRQC, 0, NotSerialized)
        {
            INTA (0x1F)
            INTB (0x1F)
            INTC (0x1F)
            INTD (0x1F)
            Local1 = PD64 /* \_SB_.PD64 */
            PIRE = 0x1F
            PIRF = 0x1F
            PIRG = 0x1F
            PIRH = 0x1F
        }

        Method (INTA, 1, NotSerialized)
        {
            PIRA = Arg0
            HDAD = Arg0
            GEC = Arg0
            GPP0 = Arg0
            GPP0 = Arg0
        }

        Method (INTB, 1, NotSerialized)
        {
            PIRB = Arg0
            USB2 = Arg0
            USB4 = Arg0
            USB6 = Arg0
            GPP1 = Arg0
            IDE = Arg0
        }

        Method (INTC, 1, NotSerialized)
        {
            PIRC = Arg0
            USB1 = Arg0
            USB3 = Arg0
            USB5 = Arg0
            USB7 = Arg0
            GPP2 = Arg0
        }

        Method (INTD, 1, NotSerialized)
        {
            PIRD = Arg0
            SATA = Arg0
            GPP3 = Arg0
        }

        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {15}
        })
        Name (IPRA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRB, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Name (IPRD, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {5,10,11}
        })
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRA)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTA (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRA) /* \_SB_.PIRA */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTA (Local0)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRB)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTB (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRB) /* \_SB_.PIRB */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTB (Local0)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRC)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTC (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRC) /* \_SB_.PIRC */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTC (Local0)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRD)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                INTD (0x1F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRD) /* \_SB_.PIRD */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                INTD (Local0)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRE)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRE) /* \_SB_.PIRE */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (PIRE, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRF)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRF) /* \_SB_.PIRF */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRG)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRG) /* \_SB_.PIRG */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (PIRH)
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (0x09)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH = 0x1F
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUFA, One, IRQX)
                IRQX = (One << PIRH) /* \_SB_.PIRH */
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB.PCI0.SBRG)
    {
        Method (RGPM, 0, NotSerialized)
        {
            Local0 = ^^SMBS.GPXC /* \_SB_.PCI0.SMBS.GPXC */
            Local0 &= 0xFFFFFFFFFFFFFF3F
            ^^SMBS.GPXC = Local0
            Local1 = ^^SMBS.CLGP /* \_SB_.PCI0.SMBS.CLGP */
            Return (Local1)
        }
    }

    Scope (_GPE)
    {
        Name (WLAN, One)
        Name (WLST, One)
    }

    Scope (_SB.PCI0.SMBS)
    {
        OperationRegion (LCLM, SystemIO, 0x0C50, 0x03)
        Field (LCLM, ByteAcc, NoLock, Preserve)
        {
            CLMI,   8, 
            CLMD,   8, 
            CLGP,   8
        }

        IndexField (CLMI, CLMD, ByteAcc, NoLock, Preserve)
        {
            IDRG,   8, 
            Offset (0x02), 
            TSTS,   8, 
            TINT,   8, 
            Offset (0x12), 
            I2CC,   8, 
            GPXC,   8
        }

        OperationRegion (GPIO, SystemMemory, GIOB, 0x0100)
        Field (GPIO, AnyAcc, NoLock, Preserve)
        {
            Offset (0x06), 
                ,   5, 
            G06E,   1, 
            G06O,   1, 
            G06I,   1, 
            G07B,   8, 
            Offset (0x0B), 
            G0BB,   8, 
            Offset (0x0E), 
            G0EB,   8, 
            Offset (0x14), 
                ,   5, 
            G14E,   1, 
            G14O,   1, 
            G14I,   1, 
                ,   5, 
            G15E,   1, 
            G15O,   1, 
            G15I,   1, 
            Offset (0x1C), 
                ,   7, 
            G1CI,   1, 
            Offset (0x2D), 
                ,   5, 
            G2DE,   1, 
            G2DO,   1, 
            G2DI,   1, 
            Offset (0x37), 
                ,   5, 
            G37E,   1, 
            G37O,   1, 
            G37I,   1, 
            Offset (0x65), 
                ,   7, 
            GE05,   1, 
            Offset (0x70), 
                ,   7, 
            GE16,   1, 
            Offset (0x76), 
                ,   7, 
            GE22,   1, 
            Offset (0xAF), 
            GAFB,   8, 
            GB0B,   8
        }

        OperationRegion (GPMX, SystemMemory, IOMB, 0x0100)
        Field (GPMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x06), 
            G06M,   8, 
            G07M,   8, 
            Offset (0x0B), 
            G0BM,   8, 
            Offset (0x0E), 
            G0EM,   8, 
            Offset (0x14), 
            G14M,   8, 
            G15M,   8, 
            Offset (0x1C), 
            G1CM,   8, 
            Offset (0x2D), 
            G2DM,   8, 
            Offset (0x37), 
            G37M,   8, 
            Offset (0x70), 
            G70M,   8, 
            Offset (0x76), 
            G76M,   8, 
            Offset (0xAF), 
            GAFM,   8, 
            GB0M,   8
        }

        OperationRegion (GEVT, SystemMemory, SMIB, 0x0100)
        Field (GEVT, AnyAcc, NoLock, Preserve)
        {
                ,   9, 
            GESA,   1, 
            Offset (0x08), 
                ,   5, 
            E05C,   1, 
            Offset (0x09), 
            E08C,   1, 
            E09C,   1, 
            Offset (0x0A), 
                ,   6, 
            E22C,   1
        }
    }

    Scope (_SB.PCI0.GNBD)
    {
    }

    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Scope (_SB.PCI0.SBRG)
    {
        OperationRegion (SMIP, SystemIO, SMIO, One)
        Field (SMIP, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8
        }
    }

    Scope (_GPE)
    {
        Method (_L05, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Name (HPOK, Zero)
            P80H = 0x66
            If (\_SB.PCI0.SMBS.E05C)
            {
                P80H = 0x11CC
                Sleep (0x14)
                Local0 = \_SB.PCI0.SMBS.GE05
                If (Local0)
                {
                    P80H = 0x12CC
                    \_SB.PCI0.SMBS.E05C = Zero
                    Debug = "HotPlug:04: Removal Event"
                    P80H = 0x0F05
                }
            }
            Else
            {
                Sleep (0x14)
                P80H = 0x21CC
                Local0 = \_SB.PCI0.SMBS.GE05
                If (!(Local0 & One))
                {
                    \_SB.PCI0.SMBS.E05C = One
                    Debug = "HotPlug:04: Insertion Event"
                    Sleep (0x64)
                    Sleep (0x64)
                    Sleep (0x14)
                    P80H = 0x0205
                }
            }

            Notify (\_SB.PCI0.PE20, Zero) // Bus Check
        }
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            SOST ()
            TRPS = OSCM /* \OSCM */
            If ((RVID <= 0x13)) {}
        }
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Scope (SBRG)
            {
                Method (RRIO, 4, NotSerialized)
                {
                    Debug = "RRIO"
                }

                Method (RDMA, 3, NotSerialized)
                {
                    Debug = "rDMA"
                }
            }
        }
    }

    Device (HPET)
    {
        Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
        Name (CRS, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0xFED00000,         // Address Base
                0x00000400,         // Address Length
                _Y16)
        })
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            CreateDWordField (CRS, \HPET._Y16._BAS, HPT)  // _BAS: Base Address
            HPT = 0xFED00000
            Return (CRS) /* \HPET.CRS_ */
        }
    }

    Name (WOTB, Zero)
    Name (WSSB, Zero)
    Name (WAXB, Zero)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        DBG8 = Arg0
        If (((Arg0 == 0x04) && (OSFL () == 0x02)))
        {
            Sleep (0x0BB8)
        }

        PTS (Arg0)
        Index (WAKP, Zero) = Zero
        Index (WAKP, One) = Zero
        WSSB = ASSB /* \ASSB */
        WOTB = AOTB /* \AOTB */
        WAXB = AAXB /* \AAXB */
        ASSB = Arg0
        AOTB = OSFL ()
        AAXB = Zero
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        DBG8 = (Arg0 << 0x04)
        WAK (Arg0)
        If (ASSB)
        {
            ASSB = WSSB /* \WSSB */
            AOTB = WOTB /* \WOTB */
            AAXB = WAXB /* \WAXB */
        }

        If (DerefOf (Index (WAKP, Zero)))
        {
            Index (WAKP, One) = Zero
        }
        Else
        {
            Index (WAKP, One) = Arg0
        }

        If ((\_SB.PCI0.SBRG.H_EC.ACEX != SPWR))
        {
            SPWR = \_SB.PCI0.SBRG.H_EC.ACEX
            Notify (\_SB.ADP1, 0x80) // Status Change
        }

        Return (WAKP) /* \WAKP */
    }

    Device (OMSC)
    {
        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
        Name (_UID, 0x0E11)  // _UID: Unique ID
    }

    Device (_SB.RMEM)
    {
        Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
        Name (_UID, One)  // _UID: Unique ID
    }

    Scope (_PR)
    {
        OperationRegion (SSDT, SystemMemory, 0xFFFF0000, 0xFFFF)
        Name (DCOR, 0x02)
        Name (TBLD, 0x04)
        Name (NPSS, 0x05)
        Name (HNDL, 0x80000000)
        Name (APSS, Package (0x0A)
        {
            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x06)
            {
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF, 
                0xFFFF
            }
        })
        Processor (P000, 0x01, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P000._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }

        Processor (P001, 0x02, 0x00000810, 0x06)
        {
            Name (TYPE, 0x80000000)
            Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
            {
                CreateDWordField (Arg0, 0x08, DAT0)
                TYPE = DAT0 /* \_PR_.P001._PDC.DAT0 */
                If (((TBLD == Zero) && (NPSS != Zero)))
                {
                    If ((((TYPE & 0x1B) == 0x1B) || (DCOR == Zero)))
                    {
                        TBLD = One
                        Load (SSDT, HNDL) /* \_PR_.HNDL */
                    }
                }
            }
        }
    }

    If (OSCF)
    {
        Scope (_SB.PCI0)
        {
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, Zero)
                Name (CTRL, Zero)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    CreateDWordField (Arg3, Zero, CDW1)
                    CreateDWordField (Arg3, 0x04, CDW2)
                    CreateDWordField (Arg3, 0x08, CDW3)
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (((SUPP & 0x16) != 0x16))
                    {
                        (CTRL & 0x1E)
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One)) {}
                        If ((CTRL & 0x04))
                        {
                            EPNM = One
                        }
                        Else
                        {
                            EPNM = Zero
                        }

                        If ((CTRL & 0x10)) {}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }
        }
    }

    Scope (_SB.PCI0.VGA)
    {
        Name (PXEN, 0x80000000)
        Name (PXID, 0x00040000)
        Name (PXMX, 0x80000001)
        Name (LCDT, 0x80000000)
        Name (DSCT, 0x80000000)
        Name (AF7E, 0x80000000)
        Name (PXDY, 0x80000000)
        Name (PXFX, 0x80000000)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (0x0F)
        }

        Scope (\_SB.PCI0.VGA)
        {
            Name (ATIB, Buffer (0x0100) {})
            Method (ATIF, 2, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (AF00 ())
                }

                If ((Arg0 == One))
                {
                    Return (AF01 ())
                }

                If ((Arg0 == 0x02))
                {
                    Return (AF02 ())
                }

                If ((Arg0 == 0x03))
                {
                    Return (AF03 (DerefOf (Index (Arg1, 0x02)), DerefOf (Index (Arg1, 0x04))))
                }
                Else
                {
                    CreateWordField (ATIB, Zero, SSZE)
                    CreateWordField (ATIB, 0x02, VERN)
                    CreateDWordField (ATIB, 0x04, NMSK)
                    CreateDWordField (ATIB, 0x08, SFUN)
                    SSZE = Zero
                    VERN = Zero
                    NMSK = Zero
                    SFUN = Zero
                    Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
                }
            }

            Method (AF00, 0, NotSerialized)
            {
                P80H = 0xF0
                CreateWordField (ATIB, Zero, SSZE)
                CreateWordField (ATIB, 0x02, VERN)
                CreateDWordField (ATIB, 0x04, NMSK)
                CreateDWordField (ATIB, 0x08, SFUN)
                SSZE = 0x0C
                VERN = One
                If ((PXEN == 0x80000000))
                {
                    NMSK = 0x11
                }
                Else
                {
                    NMSK = 0x51
                }

                If ((AF7E == 0x80000001))
                {
                    NMSK |= 0x80
                }

                MSKN = NMSK /* \_SB_.PCI0.VGA_.AF00.NMSK */
                SFUN = 0x07
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Name (NCOD, 0x81)
            Method (AF01, 0, NotSerialized)
            {
                P80H = 0xF1
                CreateWordField (ATIB, Zero, SSZE)
                CreateDWordField (ATIB, 0x02, VMSK)
                CreateDWordField (ATIB, 0x06, FLGS)
                VMSK = 0x0B
                SSZE = 0x0A
                VMSK = 0x03
                FLGS = One
                NCOD = 0x81
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Name (PSBR, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           /* .... */
            })
            Name (MSKN, Zero)
            Name (SEXM, Zero)
            Name (STHG, Zero)
            Name (STHI, Zero)
            Name (SFPG, Zero)
            Name (SFPI, Zero)
            Name (SSPS, Zero)
            Name (SSDM, 0x0A)
            Name (SCDY, Zero)
            Name (SACT, Buffer (0x07)
            {
                 0x01, 0x02, 0x08, 0x80, 0x03, 0x09, 0x81         /* ....... */
            })
            Method (AF02, 0, NotSerialized)
            {
                P80H = 0xF2
                CreateBitField (PSBR, Zero, PDSW)
                CreateBitField (PSBR, One, PEXM)
                CreateBitField (PSBR, 0x02, PTHR)
                CreateBitField (PSBR, 0x03, PFPS)
                CreateBitField (PSBR, 0x04, PSPS)
                CreateBitField (PSBR, 0x05, PDCC)
                CreateBitField (PSBR, 0x06, PXPS)
                CreateBitField (PSBR, 0x07, PBRT)
                CreateWordField (ATIB, Zero, SSZE)
                CreateDWordField (ATIB, 0x02, PSBI)
                CreateByteField (ATIB, 0x06, EXPM)
                CreateByteField (ATIB, 0x07, THRM)
                CreateByteField (ATIB, 0x08, THID)
                CreateByteField (ATIB, 0x09, FPWR)
                CreateByteField (ATIB, 0x0A, FPID)
                CreateByteField (ATIB, 0x0B, SPWR)
                CreateByteField (ATIB, 0x0C, BRTL)
                SSZE = 0x0D
                PSBI = PSBR /* \_SB_.PCI0.VGA_.PSBR */
                If (PDSW)
                {
                    P80H = 0x82
                    PDSW = Zero
                }

                If (PEXM)
                {
                    EXPM = SEXM /* \_SB_.PCI0.VGA_.SEXM */
                    SEXM = Zero
                    PEXM = Zero
                }

                If (PTHR)
                {
                    THRM = STHG /* \_SB_.PCI0.VGA_.STHG */
                    THID = STHI /* \_SB_.PCI0.VGA_.STHI */
                    STHG = Zero
                    STHI = Zero
                    PTHR = Zero
                }

                If (PFPS)
                {
                    FPWR = SFPG /* \_SB_.PCI0.VGA_.SFPG */
                    FPWR = SFPI /* \_SB_.PCI0.VGA_.SFPI */
                    SFPG = Zero
                    SFPI = Zero
                    PFPS = Zero
                }

                If (PSPS)
                {
                    SPWR = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                    PSPS = Zero
                }

                If (PXPS)
                {
                    P80H = 0xA2
                    PXPS = Zero
                }

                If (PBRT)
                {
                    P80H = 0xF7
                    PBRT = Zero
                }

                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Method (AF03, 2, NotSerialized)
            {
                P80H = 0xF3
                CreateWordField (ATIB, Zero, SSZE)
                CreateWordField (ATIB, 0x02, SSDP)
                CreateWordField (ATIB, 0x04, SCDP)
                SSDP = Arg0
                SCDP = Arg1
                Name (NXTD, 0x06)
                Name (CIDX, 0x06)
                Local1 = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                Local1 &= 0x8B
                Local2 = SCDP /* \_SB_.PCI0.VGA_.AF03.SCDP */
                If (CondRefOf (^^^LID._LID, Local4))
                {
                    Local2 &= 0xFFFFFFFFFFFFFFFE
                    Local2 |= Local4
                }
                Else
                {
                    Local2 |= One
                }

                P80H = Local2
                Local0 = Zero
                While ((Local0 < SizeOf (SACT)))
                {
                    Local3 = DerefOf (Index (SACT, Local0))
                    If ((Local3 == Local1))
                    {
                        CIDX = Local0
                        Local0 = SizeOf (SACT)
                    }
                    Else
                    {
                        Local0++
                    }
                }

                Local0 = CIDX /* \_SB_.PCI0.VGA_.AF03.CIDX */
                While ((Local0 < SizeOf (SACT)))
                {
                    Local0++
                    If ((Local0 == SizeOf (SACT)))
                    {
                        Local0 = Zero
                    }

                    Local3 = DerefOf (Index (SACT, Local0))
                    If (((Local3 & Local2) == Local3))
                    {
                        NXTD = Local0
                        Local0 = SizeOf (SACT)
                    }
                }

                If ((NXTD == SizeOf (SACT)))
                {
                    SSDP = Zero
                }
                Else
                {
                    Local0 = NXTD /* \_SB_.PCI0.VGA_.AF03.NXTD */
                    Local3 = DerefOf (Index (SACT, Local0))
                    SSDP &= 0xFFFFFFFFFFFFFF74
                    SSDP |= Local3
                }

                SSZE = 0x04
                P80H = SSDP /* \_SB_.PCI0.VGA_.AF03.SSDP */
                Return (ATIB) /* \_SB_.PCI0.VGA_.ATIB */
            }

            Method (AFN0, 0, Serialized)
            {
                If ((MSKN & One))
                {
                    CreateBitField (PSBR, Zero, PDSW)
                    PDSW = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN3, 2, Serialized)
            {
                If ((MSKN & 0x08))
                {
                    Local0 = Arg0
                    SFPI = Local0
                    Local0 = Arg1
                    SFPG = Local0 &= 0x03
                    CreateBitField (PSBR, 0x03, PFPS)
                    PFPS = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN4, 1, Serialized)
            {
                If ((MSKN & 0x10))
                {
                    Local0 = Arg0
                    Local1 = SSPS /* \_SB_.PCI0.VGA_.SSPS */
                    SSPS = Local0
                    If ((Local0 == Local1)) {}
                    Else
                    {
                        CreateBitField (PSBR, 0x04, PSPS)
                        PSPS = One
                        Notify (VGA, NCOD)
                    }
                }
            }

            Method (AFN5, 0, Serialized)
            {
                If ((MSKN & 0x20))
                {
                    CreateBitField (PSBR, 0x05, PDCC)
                    PDCC = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN6, 0, Serialized)
            {
                If ((MSKN & 0x40))
                {
                    CreateBitField (PSBR, 0x06, PXPS)
                    PXPS = One
                    Notify (VGA, NCOD)
                }
            }

            Method (AFN7, 1, Serialized)
            {
                If ((MSKN & 0x80))
                {
                    CreateBitField (PSBR, 0x07, PBRT)
                    PBRT = One
                    CreateByteField (ATIB, 0x0C, BRTL)
                    BRTL = Arg0
                    Notify (VGA, NCOD)
                }
            }

            Name (AT00, Buffer (0xFF) {})
            Name (AT01, Buffer (0x03) {})
            Method (ATCS, 2, Serialized)
            {
                If ((Arg0 == Zero))
                {
                    ATC0 ()
                }

                If ((Arg0 == One))
                {
                    ATC1 ()
                }

                If ((Arg0 == 0x02))
                {
                    ATC2 (Arg1)
                }

                If ((Arg0 == 0x03))
                {
                    ATC3 ()
                }

                If ((Arg0 == 0x04))
                {
                    ATC4 (Arg1)
                }

                Return (AT00) /* \_SB_.PCI0.VGA_.AT00 */
            }

            Method (ATC0, 0, NotSerialized)
            {
                CreateWordField (AT00, Zero, SZZE)
                CreateWordField (AT00, 0x02, INTF)
                CreateDWordField (AT00, 0x04, SUPP)
                SZZE = 0x08
                INTF = One
                SUPP = 0x0F
            }

            Method (ATC1, 0, Serialized)
            {
                CreateWordField (AT00, Zero, SZZE)
                CreateDWordField (AT00, 0x02, VFMK)
                CreateDWordField (AT00, 0x06, FLAG)
                CreateField (AT00, 0x30, One, DOCK)
                SZZE = 0x0A
                VFMK = One
                FLAG = Zero
                DOCK = One
            }

            Method (ATC2, 1, Serialized)
            {
                CreateField (Arg0, 0x10, 0x03, FUCC)
                CreateField (Arg0, 0x13, 0x06, DEVV)
                CreateByteField (Arg0, 0x03, BUSS)
                CreateDWordField (Arg0, 0x04, VFMK)
                CreateDWordField (Arg0, 0x06, FLAG)
                CreateField (Arg0, 0x30, One, ADVC)
                CreateField (Arg0, 0x31, One, WFCM)
                CreateByteField (Arg0, 0x08, RQST)
                CreateByteField (Arg0, 0x09, PFRQ)
                CreateWordField (AT00, Zero, SZZE)
                CreateByteField (AT00, 0x02, RETV)
                SZZE = 0x03
                RETV = One
                AT00 = ALIB (0x02, Arg0)
            }

            Method (ATC3, 0, Serialized)
            {
                CreateWordField (AT00, Zero, SZZE)
                CreateByteField (AT00, 0x02, RETV)
                CreateWordField (AT01, Zero, SZZB)
                CreateByteField (AT01, 0x02, PSPP)
                SZZE = 0x03
                RETV = One
                SZZB = 0x03
                PSPP = One
                AT00 = ALIB (0x03, AT01)
            }

            Method (ATC4, 1, Serialized)
            {
                CreateField (Arg0, 0x10, 0x03, FUCC)
                CreateField (Arg0, 0x13, 0x06, DEVV)
                CreateByteField (Arg0, 0x03, BUSS)
                CreateByteField (Arg0, 0x04, NULN)
                CreateWordField (AT00, Zero, SZZE)
                CreateByteField (AT00, 0x02, NULM)
                SZZE = 0x03
                NULM = One
                AT00 = ALIB (0x04, Arg0)
            }
        }

        Name (ATPB, Buffer (0x0100) {})
        Name (DSID, 0xFFFFFFFF)
        Name (HSID, 0xFFFFFFFF)
        Name (CNT0, Buffer (0x05)
        {
             0x05, 0x00, 0x00, 0x10, 0x01                     /* ..... */
        })
        Name (CNT1, Buffer (0x05)
        {
             0x05, 0x01, 0x00, 0x00, 0x01                     /* ..... */
        })
        Name (CNT2, Buffer (0x05)
        {
             0x07, 0x03, 0x00, 0x10, 0x02                     /* ..... */
        })
        Name (CNT3, Buffer (0x05)
        {
             0x07, 0x07, 0x00, 0x20, 0x02                     /* ... . */
        })
        Name (CNT4, Buffer (0x05)
        {
             0x00, 0x09, 0x00, 0x30, 0x02                     /* ...0. */
        })
        Name (CNT5, Buffer (0x05)
        {
             0x05, 0x00, 0x01, 0x10, 0x01                     /* ..... */
        })
        Name (CNT6, Buffer (0x05)
        {
             0x05, 0x01, 0x01, 0x00, 0x01                     /* ..... */
        })
        Name (CNT7, Buffer (0x05)
        {
             0x07, 0x03, 0x01, 0x10, 0x02                     /* ..... */
        })
        Name (CNT8, Buffer (0x05)
        {
             0x07, 0x07, 0x01, 0x20, 0x02                     /* ... . */
        })
        Name (CNT9, Buffer (0x05)
        {
             0x00, 0x09, 0x01, 0x30, 0x02                     /* ...0. */
        })
        OperationRegion (REVD, SystemMemory, 0xAFB5EE9D, 0x00000008)
        Field (REVD, AnyAcc, NoLock, Preserve)
        {
            SROM,   32, 
            VROM,   32
        }

        Name (TVGA, Buffer (0x0004)
        {
             0x00                                             /* . */
        })
        Method (ATRM, 2, Serialized)
        {
            Local0 = (Arg0 + Arg1)
            If ((Local0 <= SROM))
            {
                Local1 = (Arg1 * 0x08)
                Local2 = (Arg0 * 0x08)
                TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                CreateField (TVGA, Local2, Local1, TEMP)
                Name (RETB, Buffer (Arg1) {})
                RETB = TEMP /* \_SB_.PCI0.VGA_.ATRM.TEMP */
                Return (RETB) /* \_SB_.PCI0.VGA_.ATRM.RETB */
            }
            Else
            {
                If ((Arg0 < SROM))
                {
                    Local3 = (SROM - Arg0)
                    Local1 = (Local3 * 0x08)
                    Local2 = (Arg0 * 0x08)
                    TVGA = VROM /* \_SB_.PCI0.VGA_.VROM */
                    CreateField (TVGA, Local2, Local1, TEM)
                    Name (RETC, Buffer (Local3) {})
                    RETC = TEM /* \_SB_.PCI0.VGA_.ATRM.TEM_ */
                    Return (RETC) /* \_SB_.PCI0.VGA_.ATRM.RETC */
                }
                Else
                {
                    Name (RETD, Buffer (One) {})
                    Return (RETD) /* \_SB_.PCI0.VGA_.ATRM.RETD */
                }
            }
        }

        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Return (PX00 ())
            }

            If ((Arg0 == One))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Index (Arg1, 0x02)))
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Index (Arg1, 0x02)))
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Index (Arg1, 0x02)))
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, VERN)
            CreateDWordField (ATPB, 0x04, SFUN)
            SSZE = Zero
            VERN = Zero
            SFUN = Zero
            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX00, 0, NotSerialized)
        {
            P80H = 0xE0
            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, VERN)
            CreateDWordField (ATPB, 0x04, SFUN)
            SSZE = 0x08
            VERN = One
            If ((PXEN == 0x80000000))
            {
                SFUN = Zero
                Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
            }

            If ((PXMX == 0x80000000))
            {
                SFUN = 0x018F
            }
            Else
            {
                SFUN = 0x0183
            }

            If ((PXDY == 0x80000001))
            {
                SFUN &= 0xFFFFFFFD
            }

            If (((PXDY == 0x80000001) && (PXFX == 0x80000001)))
            {
                SFUN |= 0x02
            }

            Local0 = ^^PCE4.VGA.SVID /* \_SB_.PCI0.PCE4.VGA_.SVID */
            Local1 = ^^PCE4.HDAU.SVID /* \_SB_.PCI0.PCE4.HDAU.SVID */
            If ((Local0 != 0xFFFFFFFF))
            {
                DSID = Local0
            }

            If ((Local1 != 0xFFFFFFFF))
            {
                HSID = Local1
            }

            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX01, 0, NotSerialized)
        {
            P80H = 0xE1
            CreateWordField (ATPB, Zero, SSZE)
            CreateDWordField (ATPB, 0x02, VMSK)
            CreateDWordField (ATPB, 0x06, FLGS)
            SSZE = 0x0A
            VMSK = 0xFF
            If ((PXMX == 0x80000000))
            {
                FLGS = 0x4B
            }
            Else
            {
                FLGS = Zero
                If ((PXDY == 0x80000001))
                {
                    FLGS |= 0x80
                }
            }

            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (ATPB, Zero, SSZE)
            CreateByteField (ATPB, 0x02, PWST)
            SSZE = 0x03
            Local7 = Buffer (0x05) {}
            CreateWordField (Local7, Zero, SZZE)
            CreateField (Local7, 0x10, 0x03, FUCC)
            CreateField (Local7, 0x13, 0x05, DEVV)
            CreateByteField (Local7, 0x03, BUSS)
            CreateByteField (Local7, 0x04, HPST)
            SZZE = 0x05
            BUSS = Zero
            FUCC = Zero
            Local6 = Buffer (0x04) {}
            CreateByteField (Local6, 0x02, HPOX)
            PWST = (Arg0 & One)
            Name (HPOK, Zero)
            If (PWST)
            {
                P80H = 0x11E2
                ^^SMBS.G15O = Zero
                ^^SMBS.G15E = Zero
                ^^SMBS.G2DO = Zero
                ^^SMBS.G2DE = Zero
                Sleep (0x0A)
                ^^SMBS.G2DO = One
                ^^SMBS.G2DE = Zero
                Sleep (0x0A)
                ^^SMBS.G37O = One
                ^^SMBS.G37E = Zero
                Sleep (0x0A)
                ^^SMBS.G1CM = One
                While ((^^SMBS.G1CI == Zero)) {}
                ^^SMBS.G15O = One
                ^^SMBS.G15E = Zero
                P80H = 0x12E2
                HPOK = Zero
                Sleep (0x64)
                Sleep (0x64)
                DEVV = 0x04
                HPST = One
                Local6 = ALIB (0x06, Local7)
                Sleep (0x14)
                Local2 = Zero
                While ((Local2 < 0x0F))
                {
                    ^^PCE4.PDC2 = One
                    Local4 = One
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = ^^PCE4.XPRD (0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Debug = "PXPGfx:04: TrainingState=0x10"
                            Local4 = Zero
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Debug = "PXPGfx:04: Check VC Negotiation Pending"
                        Local5 = ^^PCE4.XPDL ()
                        If (Local5)
                        {
                            Debug = "PXPGfx:04: Retraining Link"
                            ^^PCE4.XPRT ()
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Debug = "PXPGfx:04: Device OK"
                            INFO = 0x20
                            BCMD = 0x87
                            ^^SBRG.SMIC = ATIS /* \ATIS */
                            Local0 = Zero
                            If ((^^PCE4.XPR2 () == Ones))
                            {
                                Local0 = One
                            }

                            If (Local0)
                            {
                                HPOK = One
                                Local2 = 0x10
                            }
                            Else
                            {
                                Debug = "PXPGFx:04: Common Clock Retraining Failed"
                                HPOK = Zero
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Debug = "PXPGfx:04: TrainingState Timeout"
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    P80H = 0x13E2
                    Debug = "PXPGfx:04: Insertion Failed: Disable Training & PowerDown"
                    Local1 = ^^PCE4.VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                    Sleep (0x0A)
                    Local4 = One
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = ^^PCE4.XPRD (0xA5)
                        Local0 &= 0x7F
                        If ((Local0 <= 0x04))
                        {
                            Local4 = Zero
                        }
                        Else
                        {
                            Local1 = ^^PCE4.VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    DEVV = 0x04
                    HPST = Zero
                    ALIB (0x06, Local7)
                }

                P80H = 0x14E2
            }
            Else
            {
                P80H = 0x02E2
                INFO = 0x20
                BCMD = 0x84
                ^^SBRG.SMIC = ATIS /* \ATIS */
                ^^SMBS.G37O = Zero
                ^^SMBS.G37E = Zero
                Sleep (0x0A)
                ^^SMBS.G2DO = Zero
                ^^SMBS.G2DE = Zero
                P80H = 0x03E2
                ^^PCE4.PDC2 = One
                Local1 = ^^PCE4.VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                Sleep (0x0A)
                Local4 = One
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = ^^PCE4.XPRD (0xA5)
                    Local0 &= 0x7F
                    If ((Local0 <= 0x04))
                    {
                        Local4 = Zero
                    }
                    Else
                    {
                        Local1 = ^^PCE4.VGA.DVID /* \_SB_.PCI0.PCE4.VGA_.DVID */
                        Sleep (0x05)
                        Local5--
                    }
                }

                DEVV = 0x04
                HPST = Zero
                ALIB (0x06, Local7)
                HPOK = 0x02
                P80H = 0x04E2
            }

            If (HPOK)
            {
                If (((HPOK == One) && (DSID != 0xFFFFFFFF)))
                {
                    Local1 = DSID /* \_SB_.PCI0.VGA_.DSID */
                    ^^PCE4.VGA.SMID = Local1
                    Sleep (0x0A)
                    Local1 = HSID /* \_SB_.PCI0.VGA_.HSID */
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        ^^PCE4.HDAU.SMID = Local1
                    }

                    Sleep (0x0A)
                }

                Notify (PCE4, Zero) // Bus Check
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, DPSW)
            SSZE = 0x04
            DPSW = (Arg0 & One)
            If (DPSW)
            {
                P80H = 0x02E3
                ^^SMBS.G06O = One
                ^^SMBS.G06E = Zero
            }
            Else
            {
                P80H = 0x01E3
                ^^SMBS.G06O = Zero
                ^^SMBS.G06E = Zero
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            P80H = 0xE4
            CreateWordField (ATPB, Zero, SSZE)
            CreateWordField (ATPB, 0x02, ICSW)
            SSZE = 0x04
            ICSW = (Arg0 & One)
            If (ICSW)
            {
                P80H = 0x02E4
                ^^SMBS.G14O = One
                ^^SMBS.G14E = Zero
            }
            Else
            {
                P80H = 0x01E4
                ^^SMBS.G14O = Zero
                ^^SMBS.G14E = Zero
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            P80H = 0xE8
            CreateWordField (ATPB, Zero, CNUM)
            CreateWordField (ATPB, 0x02, CSSZ)
            CNUM = 0x0A
            CSSZ = 0x05
            CreateField (ATPB, 0x20, 0x28, CTI0)
            CTI0 = CNT0 /* \_SB_.PCI0.VGA_.CNT0 */
            CreateField (ATPB, 0x48, 0x28, CTI1)
            CTI1 = CNT1 /* \_SB_.PCI0.VGA_.CNT1 */
            CreateField (ATPB, 0x70, 0x28, CTI2)
            CreateByteField (CNT2, Zero, FLG2)
            If ((LCDT == 0x80000001))
            {
                If ((DSCT == 0x80000001))
                {
                    FLG2 = Zero
                }

                If ((DSCT == 0x80000002))
                {
                    FLG2 = 0x07
                }
            }

            CTI2 = CNT2 /* \_SB_.PCI0.VGA_.CNT2 */
            CreateField (ATPB, 0x98, 0x28, CTI3)
            CreateByteField (CNT3, Zero, FLG3)
            If ((LCDT == 0x80000000))
            {
                FLG3 = 0x07
            }

            If ((LCDT == 0x80000001))
            {
                FLG3 = Zero
                If ((DSCT == 0x80000002))
                {
                    FLG3 = Zero
                }
            }

            If ((LCDT == 0x80000002))
            {
                FLG3 = Zero
                If ((DSCT == 0x80000002))
                {
                    FLG3 = 0x07
                }
            }

            CTI3 = CNT3 /* \_SB_.PCI0.VGA_.CNT3 */
            CreateField (ATPB, 0xC0, 0x28, CTI4)
            CTI4 = CNT4 /* \_SB_.PCI0.VGA_.CNT4 */
            CreateField (ATPB, 0xE8, 0x28, CTI5)
            CTI5 = CNT5 /* \_SB_.PCI0.VGA_.CNT5 */
            CreateField (ATPB, 0x0110, 0x28, CTI6)
            CTI6 = CNT6 /* \_SB_.PCI0.VGA_.CNT6 */
            CreateField (ATPB, 0x0138, 0x28, CTI7)
            CreateByteField (CNT7, Zero, FLG7)
            If ((LCDT == 0x80000001))
            {
                If ((DSCT == 0x80000001))
                {
                    FLG7 = Zero
                }

                If ((DSCT == 0x80000002))
                {
                    FLG7 = 0x07
                }
            }

            CTI7 = CNT7 /* \_SB_.PCI0.VGA_.CNT7 */
            CreateField (ATPB, 0x0160, 0x28, CTI8)
            CreateByteField (CNT8, Zero, FLG8)
            If ((LCDT == 0x80000000))
            {
                FLG8 = 0x07
            }

            If ((LCDT == 0x80000001))
            {
                FLG8 = Zero
            }

            If ((LCDT == 0x80000002))
            {
                FLG8 = Zero
            }

            If ((DSCT == 0x80000002))
            {
                FLG8 = 0x07
            }

            CTI8 = CNT8 /* \_SB_.PCI0.VGA_.CNT8 */
            CreateField (ATPB, 0x0188, 0x28, CTI9)
            CreateByteField (CNT9, Zero, FLG9)
            If ((DSCT == 0x80000002))
            {
                FLG9 = 0x07
            }

            CTI9 = CNT9 /* \_SB_.PCI0.VGA_.CNT9 */
            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }

        Method (PX09, 0, NotSerialized)
        {
            P80H = 0xE9
            CreateWordField (ATPB, Zero, CNUM)
            CreateWordField (ATPB, 0x02, CSSZ)
            CNUM = Zero
            CSSZ = Zero
            CreateByteField (ATPB, 0x04, ATI0)
            CreateByteField (ATPB, 0x05, HPD0)
            CreateByteField (ATPB, 0x06, DDC0)
            ATI0 = Zero
            HPD0 = Zero
            DDC0 = Zero
            CreateByteField (ATPB, 0x07, ATI1)
            CreateByteField (ATPB, 0x08, HPD1)
            CreateByteField (ATPB, 0x09, DDC1)
            ATI1 = Zero
            HPD1 = Zero
            DDC1 = Zero
            Return (ATPB) /* \_SB_.PCI0.VGA_.ATPB */
        }
    }

    Device (_SB.PCI0.SBRG.TPM)
    {
        Name (_HID, EisaId ("PNP0C31"))  // _HID: Hardware ID
        Name (_STR, Unicode ("TPM 1.2 Device"))  // _STR: Description String
        Name (_UID, One)  // _UID: Unique ID
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            ACCS,   8, 
            Offset (0x18), 
            TSTA,   8, 
            TBCA,   8, 
            Offset (0xF00), 
            TVID,   16, 
            TDID,   16
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((VIDT == 0x8086))
            {
                Return (Zero)
            }
            Else
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.SBRG.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIT, 0x02)
        Field (TSMI, ByteAcc, NoLock, Preserve)
        {
            INQ,    8, 
            DAT,    8
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                _T_0 = ToInteger (Arg2)
                If ((_T_0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             /* . */
                    })
                }
                Else
                {
                    If ((_T_0 == One))
                    {
                        Return ("1.0")
                    }
                    Else
                    {
                        If ((_T_0 == 0x02))
                        {
                            ToInteger (DerefOf (Index (Arg3, Zero)), TMF2) /* \TMF2 */
                            TMF1 = 0x12
                            DAT = TMF1 /* \TMF1 */
                            INQ = OFST /* \OFST */
                            If ((DAT == 0xFF))
                            {
                                Return (0x02)
                            }

                            DAT = TMF2 /* \TMF2 */
                            INQ = OFST /* \OFST */
                            If ((DAT == 0xFF))
                            {
                                Return (0x02)
                            }

                            Return (Zero)
                        }
                        Else
                        {
                            If ((_T_0 == 0x03))
                            {
                                Name (PPI1, Package (0x02)
                                {
                                    Zero, 
                                    Zero
                                })
                                DAT = 0x11
                                INQ = OFST /* \OFST */
                                If ((DAT == 0xFF))
                                {
                                    Return (One)
                                }

                                Index (PPI1, One) = DAT /* \_SB_.PCI0.SBRG.TPM_.DAT_ */
                                Return (PPI1) /* \_SB_.PCI0.SBRG.TPM_._DSM.PPI1 */
                            }
                            Else
                            {
                                If ((_T_0 == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If ((_T_0 == 0x05))
                                    {
                                        Name (PPI2, Package (0x03)
                                        {
                                            Zero, 
                                            Zero, 
                                            Zero
                                        })
                                        DAT = 0x21
                                        INQ = OFST /* \OFST */
                                        Index (PPI2, One) = DAT /* \_SB_.PCI0.SBRG.TPM_.DAT_ */
                                        If ((DAT == 0xFF))
                                        {
                                            Return (0x02)
                                        }

                                        Index (PPI2, One) = DAT /* \_SB_.PCI0.SBRG.TPM_.DAT_ */
                                        DAT = 0x31
                                        INQ = OFST /* \OFST */
                                        If ((DAT == 0xFF))
                                        {
                                            Return (0x02)
                                        }

                                        If ((DAT == 0xFFF0))
                                        {
                                            Index (PPI2, 0x02) = 0xFFFFFFF0
                                        }
                                        Else
                                        {
                                            If ((DAT == 0xFFF1))
                                            {
                                                Index (PPI2, 0x02) = 0xFFFFFFF1
                                            }
                                            Else
                                            {
                                                Index (PPI2, 0x02) = DAT /* \_SB_.PCI0.SBRG.TPM_.DAT_ */
                                            }
                                        }

                                        Return (PPI2) /* \_SB_.PCI0.SBRG.TPM_._DSM.PPI2 */
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x06))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Else
            {
                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
                {
                    Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_1 = ToInteger (Arg2)
                    If ((_T_1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             /* . */
                        })
                    }
                    Else
                    {
                        If ((_T_1 == One))
                        {
                            TMF1 = 0x22
                            DAT = TMF1 /* \TMF1 */
                            INQ = OFST /* \OFST */
                            If ((DAT == 0xFF))
                            {
                                Return (0x02)
                            }

                            ToInteger (DerefOf (Index (Arg3, Zero)), TMF1) /* \TMF1 */
                            DAT = TMF1 /* \TMF1 */
                            INQ = OFST /* \OFST */
                            If ((DAT == 0xFF))
                            {
                                Return (0x02)
                            }

                            Return (Zero)
                        }
                        Else
                        {
                        }
                    }
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             /* . */
            })
        }
    }

    Scope (_SB.PCI0)
    {
        OperationRegion (ITPD, PCI_Config, 0xE8, 0x04)
        Field (ITPD, DWordAcc, NoLock, Preserve)
        {
                ,   15, 
            TPDI,   1
        }

        OperationRegion (TVID, SystemMemory, 0xFED40F00, 0x02)
        Field (TVID, WordAcc, NoLock, Preserve)
        {
            VIDT,   16
        }
    }

    Device (_SB.PCI0.ITPM)
    {
        Name (_HID, "INTC0102")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
        Name (_STR, Unicode ("TPM 1.2 Device"))  // _STR: Description String
        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
        {
            Memory32Fixed (ReadOnly,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                )
        })
        OperationRegion (TSMI, SystemIO, SMIT, 0x02)
        Field (TSMI, ByteAcc, NoLock, Preserve)
        {
            INQ,    8, 
            DAT,    8
        }

        OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
        Field (TPMR, AnyAcc, NoLock, Preserve)
        {
            ACC0,   8
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((ACC0 != 0xFF))
            {
                If ((VIDT == 0x8086))
                {
                    If (TPMF)
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }
            }

            Return (Zero)
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                _T_0 = ToInteger (Arg2)
                If ((_T_0 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x7F                                             /* . */
                    })
                }
                Else
                {
                    If ((_T_0 == One))
                    {
                        Return ("1.0")
                    }
                    Else
                    {
                        If ((_T_0 == 0x02))
                        {
                            ToInteger (DerefOf (Index (Arg3, Zero)), TMF2) /* \TMF2 */
                            TMF1 = 0x12
                            DAT = TMF1 /* \TMF1 */
                            INQ = OFST /* \OFST */
                            If ((DAT == 0xFF))
                            {
                                Return (0x02)
                            }

                            DAT = TMF2 /* \TMF2 */
                            INQ = OFST /* \OFST */
                            If ((DAT == 0xFF))
                            {
                                Return (0x02)
                            }

                            Return (Zero)
                        }
                        Else
                        {
                            If ((_T_0 == 0x03))
                            {
                                Name (PPI1, Package (0x02)
                                {
                                    Zero, 
                                    Zero
                                })
                                DAT = 0x11
                                INQ = OFST /* \OFST */
                                If ((DAT == 0xFF))
                                {
                                    Return (One)
                                }

                                Index (PPI1, One) = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                                Return (PPI1) /* \_SB_.PCI0.ITPM._DSM.PPI1 */
                            }
                            Else
                            {
                                If ((_T_0 == 0x04))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    If ((_T_0 == 0x05))
                                    {
                                        Name (PPI2, Package (0x03)
                                        {
                                            Zero, 
                                            Zero, 
                                            Zero
                                        })
                                        DAT = 0x21
                                        INQ = OFST /* \OFST */
                                        Index (PPI2, One) = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                                        If ((DAT == 0xFF))
                                        {
                                            Return (0x02)
                                        }

                                        Index (PPI2, One) = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                                        DAT = 0x31
                                        INQ = OFST /* \OFST */
                                        If ((DAT == 0xFF))
                                        {
                                            Return (0x02)
                                        }

                                        If ((DAT == 0xFFF0))
                                        {
                                            Index (PPI2, 0x02) = 0xFFFFFFF0
                                        }
                                        Else
                                        {
                                            If ((DAT == 0xFFF1))
                                            {
                                                Index (PPI2, 0x02) = 0xFFFFFFF1
                                            }
                                            Else
                                            {
                                                Index (PPI2, 0x02) = DAT /* \_SB_.PCI0.ITPM.DAT_ */
                                            }
                                        }

                                        Return (PPI2) /* \_SB_.PCI0.ITPM._DSM.PPI2 */
                                    }
                                    Else
                                    {
                                        If ((_T_0 == 0x06))
                                        {
                                            Return (Zero)
                                        }
                                        Else
                                        {
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            Else
            {
                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
                {
                    Name (_T_1, Zero)  // _T_x: Emitted by ASL Compiler
                    _T_1 = ToInteger (Arg2)
                    If ((_T_1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             /* . */
                        })
                    }
                    Else
                    {
                        If ((_T_1 == One))
                        {
                            TMF1 = 0x22
                            DAT = TMF1 /* \TMF1 */
                            INQ = OFST /* \OFST */
                            If ((DAT == 0xFF))
                            {
                                Return (0x02)
                            }

                            ToInteger (DerefOf (Index (Arg3, Zero)), TMF1) /* \TMF1 */
                            DAT = TMF1 /* \TMF1 */
                            INQ = OFST /* \OFST */
                            If ((DAT == 0xFF))
                            {
                                Return (0x02)
                            }

                            Return (Zero)
                        }
                        Else
                        {
                        }
                    }
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             /* . */
            })
        }
    }

    OperationRegion (SNVS, SystemMemory, 0xAFB76F18, 0x0061)
    Field (SNVS, AnyAcc, Lock, Preserve)
    {
        OSTP,   16, 
        SMIS,   8, 
        DB00,   8, 
        DW00,   16, 
        SLID,   8, 
        SPWR,   8, 
        SPBF,   8, 
        LFLG,   8, 
        CXMD,   8, 
        USBW,   8, 
        PVFN,   8, 
        MISC,   8, 
        RTYP,   8, 
        RELT,   8, 
        CPTY,   8, 
        PPCS,   8, 
        DIAG,   8, 
        NIST,   8, 
        RIST,   8, 
        GSSR,   8, 
        RCST,   8, 
        CCST,   8, 
        RCNT,   8, 
        TPTY,   8, 
        BFCC,   16, 
        TZON,   8, 
        LSFK,   8, 
        SSSD,   16, 
        MGVR,   8, 
        SGVR,   8, 
        VGTY,   8, 
        BSUP,   8, 
        BRTV,   8, 
        BNOT,   8, 
        BCNT,   8, 
        SBLC,   8, 
        SLHS,   8, 
        SOPD,   16, 
        Offset (0x30), 
        DTLS,   8, 
        CDLS,   8, 
        PALS,   8, 
        CDSS,   16, 
        NDSS,   16, 
        SDSS,   16, 
        Offset (0x40), 
        CRTP,   8, 
        PTTP,   8, 
        PTC1,   8, 
        PTC2,   8, 
        PTSP,   8, 
        CPUT,   8, 
        COLP,   8, 
        HASS,   8, 
        PPCM,   8, 
        Offset (0x50), 
        Offset (0x54), 
        SDSP,   32, 
        Offset (0x59), 
        Offset (0x5A), 
        Offset (0x5B), 
        Offset (0x5C), 
        Offset (0x5D), 
        Offset (0x5E), 
        Offset (0x5F), 
        Offset (0x60), 
        FLKY,   8
    }

    Mutex (MSEC, 0x00)
    OperationRegion (SECR, SystemIO, SSMI, 0x02)
    Field (SECR, ByteAcc, NoLock, Preserve)
    {
        TRPS,   8
    }

    Method (SECS, 1, Serialized)
    {
        Acquire (MSEC, 0xFFFF)
        SMIS = Arg0
        TRPS = SWCD /* \SWCD */
        Release (MSEC)
    }

    Method (SECB, 2, Serialized)
    {
        Acquire (MSEC, 0xFFFF)
        SMIS = Arg0
        DB00 = Arg1
        TRPS = SWCD /* \SWCD */
        Local0 = DB00 /* \DB00 */
        Release (MSEC)
        Return (Local0)
    }

    Method (SECW, 3, Serialized)
    {
        Acquire (MSEC, 0xFFFF)
        SMIS = Arg0
        DB00 = Arg1
        DW00 = Arg2
        TRPS = SWCD /* \SWCD */
        Local1 = DW00 /* \DW00 */
        Release (MSEC)
        Return (Local1)
    }

    Scope (_SB)
    {
        Method (SOST, 0, Serialized)
        {
            If (CondRefOf (_OSI, Local0))
            {
                OSTP = 0x07D1
                If (_OSI ("Windows 2009"))
                {
                    OSTP = 0x07D9
                }
                Else
                {
                    If (_OSI ("Windows 2006"))
                    {
                        OSTP = 0x07D6
                    }
                    Else
                    {
                        If (_OSI ("Windows 2001 SP2"))
                        {
                            OSTP = 0x07D3
                        }
                        Else
                        {
                            If (_OSI ("Windows 2001 SP1"))
                            {
                                OSTP = 0x07D2
                            }
                        }
                    }
                }
            }
            Else
            {
                If (((SizeOf (_OS) == 0x14) || (SizeOf (_OS) == 0x05)))
                {
                    OSTP = 0x07D0
                }
                Else
                {
                    If ((SizeOf (_OS) == 0x27))
                    {
                        OSTP = 0x07CF
                    }
                    Else
                    {
                        If ((SizeOf (_OS) == 0x12))
                        {
                            OSTP = 0x07CE
                        }
                        Else
                        {
                            OSTP = 0x07CD
                        }
                    }
                }
            }
        }
    }

    Scope (_SB)
    {
        Scope (\_GPE)
        {
            Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
            {
                Notify (\_SB.PCI0.UHC1, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC2, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC4, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB5, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC6, 0x02) // Device Wake
                Notify (\_SB.PCI0.USB3, 0x02) // Device Wake
                Notify (\_SB.PCI0.UHC7, 0x02) // Device Wake
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x03, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x04, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0)
        {
            SPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
            SECS (0xF0)
            SECS (0xFA)
            SECS (0xFB)
        }
    }

    Method (WAK, 1, NotSerialized)
    {
        SWAK (Arg0)
        \_SB.PCI0.NWAK (Arg0)
        If ((Arg0 == 0x03))
        {
            SECS (0xF1)
        }

        If ((Arg0 == 0x04))
        {
            SECS (0xF1)
        }

        If ((Arg0 == 0x04))
        {
            SECS (0xFC)
        }

        SECS (0xD1)
        If ((SLID != \_SB.PCI0.SBRG.H_EC.LSTE))
        {
            SLID = \_SB.PCI0.SBRG.H_EC.LSTE
            Notify (\_SB.LID, 0x80) // Status Change
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : E5
[00Ah 0010   6]                       Oem ID : "SECCSD"
[010h 0016   8]                 Oem Table ID : "LH43STAR"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : AFB7CF80
[028h 0040   4]                 DSDT Address : AFB50158
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000000
[04Ch 0076   4]       PM Timer Block Address : 00000808
[050h 0080   4]           GPE0 Block Address : 00000820
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0002
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 00028525
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 0
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000AFB50158
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000000800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000000804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000000000

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000000808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000820

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

  0000: 46 41 43 50 F4 00 00 00 04 E5 53 45 43 43 53 44  // FACP......SECCSD
  0010: 4C 48 34 33 53 54 41 52 09 20 07 01 41 4D 49 20  // LH43STAR. ..AMI 
  0020: 13 00 01 00 80 CF B7 AF 58 01 B5 AF 01 02 09 00  // ........X.......
  0030: B2 00 00 00 A0 A1 00 00 00 08 00 00 00 00 00 00  // ................
  0040: 04 08 00 00 00 00 00 00 00 00 00 00 08 08 00 00  // ................
  0050: 20 08 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
  0060: 65 00 E9 03 00 04 10 00 01 03 0D 00 32 02 00 00  // e...........2...
  0070: 25 85 02 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // %...............
  0080: 06 00 00 00 00 00 00 00 00 00 00 00 58 01 B5 AF  // ............X...
  0090: 00 00 00 00 01 20 00 00 00 08 00 00 00 00 00 00  // ..... ..........
  00A0: 01 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
  00B0: 04 08 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
  00C0: 00 00 00 00 01 08 00 00 00 00 00 00 00 00 00 00  // ................
  00D0: 01 20 00 00 08 08 00 00 00 00 00 00 01 40 00 00  // . ...........@..
  00E0: 20 08 00 00 00 00 00 00 01 00 00 00 00 00 00 00  //  ...............
  00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

  0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
  0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
  0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 51
[00Ah 0010   6]                       Oem ID : "SECCSD"
[010h 0016   8]                 Oem Table ID : "LH43STAR"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00000004

[024h 0036   4]            Hardware Block ID : FFFFFFFF

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 37EE
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

  0000: 48 50 45 54 38 00 00 00 01 51 53 45 43 43 53 44  // HPET8....QSECCSD
  0010: 4C 48 34 33 53 54 41 52 09 20 07 01 41 4D 49 20  // LH43STAR. ..AMI 
  0020: 04 00 00 00 FF FF FF FF 00 40 00 00 00 00 D0 FE  // .........@......
  0030: 00 00 00 00 00 EE 37 00                          // ......7.


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 5E
[00Ah 0010   6]                       Oem ID : "SECCSD"
[010h 0016   8]                 Oem Table ID : "LH43STAR"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

  0000: 4D 43 46 47 3C 00 00 00 01 5E 53 45 43 43 53 44  // MCFG<....^SECCSD
  0010: 4C 48 34 33 53 54 41 52 09 20 07 01 4D 53 46 54  // LH43STAR. ..MSFT
  0020: 13 00 01 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
  0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


RSDP
----
[000h 0000   8]                    Signature : "RSD PTR "
[008h 0008   1]                     Checksum : 9E
[009h 0009   6]                       Oem ID : "SECCSD"
[00Fh 0015   1]                     Revision : 02
[010h 0016   4]                 RSDT Address : AFB50028
[014h 0020   4]                       Length : 00000024
[018h 0024   8]                 XSDT Address : 00000000AFB50070
[020h 0032   1]            Extended Checksum : 08
[021h 0033   3]                     Reserved : 000000

Raw Table Data: Length 36 (0x24)

  0000: 52 53 44 20 50 54 52 20 9E 53 45 43 43 53 44 02  // RSD PTR .SECCSD.
  0010: 28 00 B5 AF 24 00 00 00 70 00 B5 AF 00 00 00 00  // (...$...p.......
  0020: 08 00 00 00                                      // ....


RSDT
----
[000h 0000   4]                    Signature : "RSDT"    [Root System Description Table]
[004h 0004   4]                 Table Length : 00000040
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 36
[00Ah 0010   6]                       Oem ID : "SECCSD"
[010h 0016   8]                 Oem Table ID : "LH43STAR"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]       ACPI Table Address   0 : AFB500D0
[028h 0040   4]       ACPI Table Address   1 : AFB57CF0
[02Ch 0044   4]       ACPI Table Address   2 : AFB57D58
[030h 0048   4]       ACPI Table Address   3 : AFB57D98
[034h 0052   4]       ACPI Table Address   4 : AFB57F10
[038h 0056   4]       ACPI Table Address   5 : AFB57F48
[03Ch 0060   4]       ACPI Table Address   6 : AFB58328

Raw Table Data: Length 64 (0x40)

  0000: 52 53 44 54 40 00 00 00 01 36 53 45 43 43 53 44  // RSDT@....6SECCSD
  0010: 4C 48 34 33 53 54 41 52 09 20 07 01 4D 53 46 54  // LH43STAR. ..MSFT
  0020: 13 00 01 00 D0 00 B5 AF F0 7C B5 AF 58 7D B5 AF  // .........|..X}..
  0030: 98 7D B5 AF 10 7F B5 AF 48 7F B5 AF 28 83 B5 AF  // .}......H...(...


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : FB
[00Ah 0010   6]                       Oem ID : "SECCSD"
[010h 0016   8]                 Oem Table ID : "LH43STAR"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 33 83 D5 9C \
    67 2F 0C 04 8A 4F 37 22 08 88 FF 6C A7 D2 2F 31 \
    83 BB 52 F0 A5 19 9E ED 14 DF D1 A5 20 A5 AF BA \
    B7 77 73 A5 75 A0 4C 15 B8 A7 90 FB 2B D6 6E D5 \
    D1 1B 5B F0 71 CA E9 03 E3 A1 C6 B5 7E D6 87 89 \
    D2 E7 15 1E 46 FD C2 14 1D 6A 79 0F 9D 39 27 D9 \
    7D 4E 29 4A 43 2A 7E 74 98 72 2C 27 CE AF 35 7A \
    8E BE D1 79 BB DD EB E1 CF C1 35 34 90 3B 45 7F \
    20 96 E0 8A 02 17 38 04 3B 5F 20 B7 01 00 00 00 \
    B6 00 00 00 00 00 02 00 53 45 43 43 53 44 4C 48 \
    34 33 53 54 41 52 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 A6 E2 34 84 0C 89 C6 61 2C 63 96 07 75 4D \
    AF CC 0F 3D A0 35 C0 C2 E9 C9 C8 C2 E8 7A 71 6F \
    BA C1 BB 68 B8 0A B0 33 1A 36 C6 E8 D8 EB 6A 09 \
    3C 97 10 BB 3E 8B 04 C8 1C 8D 3B 95 38 15 58 17 \
    E7 C8 30 D2 3A 38 49 65 42 C1 70 26 8E 12 93 25 \
    D2 26 78 8F 3B 97 AE 37 F4 B5 6D F7 CE C2 56 3A \
    B9 A9 CB F4 34 E0 26 C0 FD C4 68 82 7B 89 B1 9D \
    35 45 AF 93 27 72 6B CA 47 19 B8 52 74 DC AE EF \
    81 8C 

Raw Table Data: Length 374 (0x176)

  0000: 53 4C 49 43 76 01 00 00 01 FB 53 45 43 43 53 44  // SLICv.....SECCSD
  0010: 4C 48 34 33 53 54 41 52 09 20 07 01 41 4D 49 20  // LH43STAR. ..AMI 
  0020: 13 00 01 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
  0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
  0040: 33 83 D5 9C 67 2F 0C 04 8A 4F 37 22 08 88 FF 6C  // 3...g/...O7"...l
  0050: A7 D2 2F 31 83 BB 52 F0 A5 19 9E ED 14 DF D1 A5  // ../1..R.........
  0060: 20 A5 AF BA B7 77 73 A5 75 A0 4C 15 B8 A7 90 FB  //  ....ws.u.L.....
  0070: 2B D6 6E D5 D1 1B 5B F0 71 CA E9 03 E3 A1 C6 B5  // +.n...[.q.......
  0080: 7E D6 87 89 D2 E7 15 1E 46 FD C2 14 1D 6A 79 0F  // ~.......F....jy.
  0090: 9D 39 27 D9 7D 4E 29 4A 43 2A 7E 74 98 72 2C 27  // .9'.}N)JC*~t.r,'
  00A0: CE AF 35 7A 8E BE D1 79 BB DD EB E1 CF C1 35 34  // ..5z...y......54
  00B0: 90 3B 45 7F 20 96 E0 8A 02 17 38 04 3B 5F 20 B7  // .;E. .....8.;_ .
  00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 53 45 43 43  // ............SECC
  00D0: 53 44 4C 48 34 33 53 54 41 52 57 49 4E 44 4F 57  // SDLH43STARWINDOW
  00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
  00F0: 00 00 00 00 00 00 A6 E2 34 84 0C 89 C6 61 2C 63  // ........4....a,c
  0100: 96 07 75 4D AF CC 0F 3D A0 35 C0 C2 E9 C9 C8 C2  // ..uM...=.5......
  0110: E8 7A 71 6F BA C1 BB 68 B8 0A B0 33 1A 36 C6 E8  // .zqo...h...3.6..
  0120: D8 EB 6A 09 3C 97 10 BB 3E 8B 04 C8 1C 8D 3B 95  // ..j.<...>.....;.
  0130: 38 15 58 17 E7 C8 30 D2 3A 38 49 65 42 C1 70 26  // 8.X...0.:8IeB.p&
  0140: 8E 12 93 25 D2 26 78 8F 3B 97 AE 37 F4 B5 6D F7  // ...%.&x.;..7..m.
  0150: CE C2 56 3A B9 A9 CB F4 34 E0 26 C0 FD C4 68 82  // ..V:....4.&...h.
  0160: 7B 89 B1 9D 35 45 AF 93 27 72 6B CA 47 19 B8 52  // {...5E..'rk.G..R
  0170: 74 DC AE EF 81 8C                                // t.....


SSDT1
-----
DefinitionBlock ("ssdt1.aml", "SSDT", 1, "AMD   ", "POWERNOW", 0x00000001)
{

    External (_PR_.P000, DeviceObj)
    External (_PR_.P001, DeviceObj)

    Scope (\_PR.P000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000672, 
                0x000017BB, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000528, 
                0x00000E35, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000339, 
                0x000005AD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000672, 
                0x000017BB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000528, 
                0x00000E35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000339, 
                0x000005AD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001771, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
    }

    Scope (\_PR.P001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000672, 
                0x000017BB, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x00000528, 
                0x00000E35, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000339, 
                0x000005AD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x00000672, 
                0x000017BB, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000528, 
                0x00000E35, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }, 

            Package (0x08)
            {
                0x00000339, 
                0x000005AD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   /* ........ */
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PPC, 0x00)  // _PPC: Performance Present Capabilities
        Name (_CST, Package (0x02)  // _CST: C-States
        {
            0x01, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001771, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0064, 
                0x00000000
            }
        })
    }
}



SSDT2
-----
DefinitionBlock ("ssdt2.aml", "SSDT", 2, "AMD", "ALIB", 0x00000001)
{
    /*
     * iASL Warning: There were 1 external control methods found during
     * disassembly, but additional ACPI tables to resolve these externals
     * were not specified. This resulting disassembler output file may not
     * compile because the disassembler did not know how many arguments
     * to assign to these methods. To specify the tables needed to resolve
     * external control method references, the -e option can be used to
     * specify the filenames. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.ALIC, MethodObj)    // Warning: Unresolved method, guessing 6 arguments


    Scope (\_SB)
    {
        Name (A001, 0x06)
        Name (AD01, 0xE0000000)
        Alias (AD01, A086)
        Name (AD07, Package (0x08)
        {
            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x04, 0x05, 0x04, 0x07, 0x01, 0x30, 0x01, 0x01,  /* .....0.. */
                /* 0008 */  0x02, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x03, 0x00, 0x03, 0x00, 0x30, 0x01, 0x00,  /* .....0.. */
                /* 0008 */  0x02, 0x00                                       /* .. */
            }, 

            Buffer (0x0A)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
                /* 0008 */  0x00, 0x00                                       /* .. */
            }
        })
        Alias (AD07, A087)
        Name (A088, Buffer (0x0100) {})
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x01))
            {
                Return (A026 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (A030 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (A041 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (A066 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (A089 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (A069 (Arg1))
            }

            Return (0x00)
        }

        Method (A089, 0, Serialized)
        {
            Return (0x00)
        }

        Method (A007, 2, Serialized)
        {
            Local0 = (A086 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A090, SystemMemory, Local0, 0x04)
            Field (A090, DWordAcc, NoLock, Preserve)
            {
                A091,   32
            }

            Return (A091) /* \_SB_.A007.A091 */
        }

        Method (A008, 3, Serialized)
        {
            Local0 = (A086 + (Arg0 << 0x0C))
            Local0 += Arg1
            OperationRegion (A090, SystemMemory, Local0, 0x04)
            Field (A090, DWordAcc, NoLock, Preserve)
            {
                A091,   32
            }

            A091 = Arg2
        }

        Method (A052, 4, Serialized)
        {
            Local0 = A007 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A008 (Arg0, Arg1, Local0)
        }

        Mutex (A092, 0x00)
        Method (A053, 2, NotSerialized)
        {
            Acquire (A092, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A008 (Local0, 0xE0, Arg1)
            Local0 = A007 (Local0, 0xE4)
            Release (A092)
            Return (Local0)
        }

        Method (A093, 3, NotSerialized)
        {
            Acquire (A092, 0xFFFF)
            Local0 = ((Arg0 + 0x02) << 0x03)
            A008 (Local0, 0xE0, Arg1)
            A008 (Local0, 0xE4, Arg2)
            Release (A092)
        }

        Method (A050, 4, NotSerialized)
        {
            Local0 = A053 (Arg0, Arg1)
            Local0 = ((Local0 & Arg2) | Arg3)
            A093 (Arg0, Arg1, Local0)
        }

        Mutex (A094, 0x00)
        Method (A042, 3, NotSerialized)
        {
            Acquire (A094, 0xFFFF)
            A008 (Arg0, Arg1, Arg2)
            Local0 = A007 (Arg0, (Arg1 + 0x04))
            Release (A094)
            Return (Local0)
        }

        Method (A043, 4, NotSerialized)
        {
            Acquire (A094, 0xFFFF)
            A008 (Arg0, Arg1, Arg2)
            A008 (Arg0, (Arg1 + 0x04), Arg3)
            Release (A094)
        }

        Method (A028, 5, NotSerialized)
        {
            Local0 = A042 (Arg0, Arg1, Arg2)
            Local0 = ((Local0 & Arg3) | Arg4)
            A043 (Arg0, Arg1, Arg2, Local0)
        }

        Method (A073, 1, NotSerialized)
        {
            Return (DerefOf (Index (A087, Arg0)))
        }

        Method (A059, 2, NotSerialized)
        {
            Local1 = 0x34
            If ((A007 (Arg0, 0x00) == 0xFFFFFFFF))
            {
                Return (0x00)
            }

            Local0 = 0x01
            While ((Local0 == 0x01))
            {
                Local1 = (A007 (Arg0, Local1) & 0xFF)
                If ((Local1 == 0x00))
                {
                    Break
                }

                If (((A007 (Arg0, Local1) & 0xFF) == Arg1))
                {
                    Local0 = 0x00
                }
                Else
                {
                    Local1++
                }
            }

            Return (Local1)
        }

        Method (A058, 2, Serialized)
        {
            OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
            Field (PMIO, ByteAcc, NoLock, Preserve)
            {
                PMRI,   8, 
                PMRD,   8
            }

            IndexField (PMRI, PMRD, ByteAcc, NoLock, Preserve)
            {
                Offset (0xE0), 
                ABAR,   32
            }

            OperationRegion (ACFG, SystemIO, ABAR, 0x08)
            Field (ACFG, DWordAcc, NoLock, Preserve)
            {
                ABIX,   32, 
                ABDA,   32
            }

            Local0 = 0x00
            If ((Arg1 == 0x00))
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A058.ABDA */
                Return (Local0)
            }
            Else
            {
                ABIX = 0x80000068
                Local0 = ABDA /* \_SB_.A058.ABDA */
                Local0 = ((Local0 & 0xFFFFFFFC) | Arg0)
                ABDA = Local0
            }
        }

        Method (A081, 1, NotSerialized)
        {
            Local0 = A042 (0x00, 0x60, 0xCD)
            Arg0++
            Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                 & 0x01000000))
            Local0 = ((Local0 & 0xFD00FFFF) | (Arg0 << 0x10))
            A043 (0x00, 0x60, 0xCD, Local0)
            Local0 = A042 (0x00, 0x60, 0xCE)
            Return (Local0)
        }

        Method (A082, 3, NotSerialized)
        {
            Local0 = A042 (0x00, 0x60, 0xCD)
            Local1 = (Arg1 & 0xFFFF)
            Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                 & 0x01000000))
            Local0 = ((Local0 & 0xFD000000) | (Arg0 << 0x10))
            Local0 |= 0x02000000
            Local0 |= Local1
            A043 (0x00, 0x60, 0xCD, Local0)
            If ((Arg2 == 0x01))
            {
                Local1 = (Arg1 >> 0x10)
                Local0 = ((Local0 & 0xFEFFFFFF) | (~(Local0 & 0x01000000)
                     & 0x01000000))
                Local0 = ((Local0 & 0xFF000000) | ((Arg0 + 0x01) << 0x10
                    ))
                Local0 |= Local1
                A043 (0x00, 0x60, 0xCD, Local0)
            }
        }

        Method (A083, 2, NotSerialized)
        {
            Local0 = ((Arg0 << 0x03) | 0x01)
            A082 (0x03, Local0, 0x01)
            If ((Arg1 && 0x01))
            {
                While (((A081 (0x03) & 0x02) != 0x02)) {}
            }

            If ((Arg1 && 0x02))
            {
                While (((A081 (0x03) & 0x04) != 0x04)) {}
            }

            A082 (0x03, 0x00, 0x01)
        }

        Method (A004, 2, NotSerialized)
        {
            A082 (0x0B, Arg0, 0x00)
            A082 (0x05, Arg1, 0x01)
        }

        Method (A003, 1, NotSerialized)
        {
            A082 (0x0B, Arg0, 0x00)
            Local0 = A081 (0x05)
            Return (Local0)
        }

        Method (A084, 1, NotSerialized)
        {
            Local0 = ((Arg0 & 0xFF) | 0x01865000)
            Local1 = ((Arg0 & 0xFFFFFF00) | 0x04)
            Local2 = ((0x03 << 0x1E) | (0x01 << 0x12))
            A004 (0x8600, Local0)
            A004 (0x8604, Local1)
            A004 (0x8608, Local2)
            If (((Arg0 >> 0x10) == 0xFE00))
            {
                A083 (0x0D, 0x03)
            }

            If (((Arg0 >> 0x10) == 0xFE30))
            {
                A083 (0x0B, 0x03)
            }

            Return (A003 (0x8650))
        }

        Method (A085, 2, NotSerialized)
        {
            Local0 = ((Arg0 & 0xFF) | 0x01865000)
            Local1 = ((Arg0 & 0xFFFFFF00) | 0x04)
            Local2 = ((0x03 << 0x1E) | (0x01 << 0x12))
            Local2 |= (0x01 << 0x10)
            A004 (0x8600, Local0)
            A004 (0x8604, Local1)
            A004 (0x8608, Local2)
            A004 (0x8650, Arg1)
            A083 (0x0B, 0x03)
        }

        Name (AD02, 0x03)
        Alias (AD02, A009)
        Name (AD03, 0x03)
        Alias (AD03, A010)
        Name (AD04, 0x00)
        Alias (AD04, A011)
        Name (AD05, 0x03)
        Alias (AD05, A012)
        Name (AD06, Package (0x08)
        {
            0x00, 
            0x00, 
            0x02, 
            0x00, 
            0x00, 
            0x00, 
            0x02, 
            0x00
        })
        Alias (AD06, A013)
        Name (AD08, Package (0x08)
        {
            0x00, 
            0x00, 
            0x01, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD08, A014)
        Name (A015, 0x00)
        Name (A016, 0x00)
        Name (A017, 0x01)
        Name (A018, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A019, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A020, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (AD09, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Alias (AD09, A021)
        Name (A022, Package (0x08)
        {
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01, 
            0x01
        })
        Name (A023, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A025, 0x00)
        Method (A026, 1, Serialized)
        {
            Local1 = DerefOf (Index (Arg0, 0x02))
            Local0 = A027 ()
            A016 = Local1
            Local2 = ((0x01 << 0x05) | (0x01 << 0x06))
            Local3 = ((A016 << 0x05) | (A017 << 0x06))
            A028 (0x00, 0x60, 0xF4, ~Local2, (Local2 & Local3))
            If ((Local1 == Local0))
            {
                Return (0x00)
            }

            A006 (A016)
            If ((A009 == 0x04))
            {
                A002 (0x01, A027 ())
            }

            If (((A009 <= 0x01) || (A009 >= 0x04)))
            {
                Return (0x00)
            }

            If ((A015 == 0x00))
            {
                Return (0x00)
            }

            A029 ()
            Return (0x00)
        }

        Method (A030, 1, NotSerialized)
        {
            Local7 = A031 (Arg0)
            Local0 = DerefOf (Index (Local7, 0x02))
            If ((Local0 != 0x02))
            {
                Return (Local7)
            }

            A029 ()
            Return (Local7)
        }

        Method (A031, 1, NotSerialized)
        {
            Name (A032, 0x00)
            A025 = 0x00
            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A033)
            A033 = 0x03
            CreateByteField (Local7, 0x02, A034)
            A034 = 0x01
            If (((A009 <= 0x01) || (A009 >= 0x04)))
            {
                Return (Local7)
            }

            If ((A015 == 0x00))
            {
                Return (Local7)
            }

            CreateWordField (Arg0, 0x02, A035)
            CreateWordField (Arg0, 0x04, A036)
            CreateWordField (Arg0, 0x06, A037)
            CreateByteField (Arg0, 0x08, A038)
            CreateByteField (Arg0, 0x09, A039)
            A032 = ((A035 >> 0x08) & 0xFF)
            While ((A025 <= A001))
            {
                If ((A040 (A025) == 0x01))
                {
                    Local1 = A007 (((A025 + 0x02) << 0x03), 0x18)
                    Local2 = ((Local1 >> 0x10) & 0xFF)
                    Local1 = ((Local1 >> 0x08) & 0xFF)
                    If (((A032 >= Local1) && (A032 <= Local2)))
                    {
                        Break
                    }
                }

                A025++
            }

            If ((A025 > A001))
            {
                Return (Local7)
            }

            If ((DerefOf (Index (A018, A025)) == 0x00))
            {
                Index (A018, A025) = A035 /* \_SB_.A031.A035 */
            }
            Else
            {
                If ((DerefOf (Index (A018, A025)) != A035))
                {
                    Return (Local7)
                }
            }

            Index (A023, A025) = 0x00
            If ((A039 == 0x00))
            {
                Index (A018, A025) = 0x00
            }

            If ((A039 == 0x01))
            {
                Index (A023, A025) = 0x01
            }

            If ((A039 == 0x02))
            {
                Index (A020, A025) = 0x01
            }

            If ((A039 == 0x03))
            {
                Index (A020, A025) = 0x02
            }

            If (((A036 & A037) == 0x01))
            {
                Index (A020, A025) = DerefOf (Index (A013, A025))
            }

            A034 = 0x02
            Return (Local7)
        }

        Method (A040, 1, Serialized)
        {
            If ((DerefOf (Index (A013, Arg0)) == 0x00))
            {
                Return (0x00)
            }

            Return (0x01)
        }

        Method (A041, 1, Serialized)
        {
            Local7 = Buffer (0x0100) {}
            Index (Local7, 0x00) = 0x03
            Index (Local7, 0x01) = 0x00
            Index (Local7, 0x02) = 0x00
            A015 = DerefOf (Index (Arg0, 0x02))
            Local0 = A042 (0x00, 0x60, 0xF4)
            If ((A015 == 0x01))
            {
                If (((Local0 & 0x01) == 0x01))
                {
                    Return (Local7)
                }

                Local0 |= 0x01
            }

            If ((A015 == 0x00))
            {
                If (((Local0 & 0x01) == 0x00))
                {
                    Return (Local7)
                }

                Local0 &= ~0x01
            }

            Local0 |= (A009 << 0x01)
            A043 (0x00, 0x60, 0xF4, Local0)
            A044 (RefOf (A019), RefOf (A018))
            A006 (A016)
            If ((A009 == 0x04))
            {
                A002 (0x01, A027 ())
            }

            If (((A009 > 0x01) && (A009 < 0x04)))
            {
                If ((A009 == 0x02))
                {
                    A044 (RefOf (A013), RefOf (A021))
                    A025 = 0x00
                    While ((A025 <= A001))
                    {
                        If ((DerefOf (Index (A014, A025)) != 0x00))
                        {
                            Index (A021, A025) = DerefOf (Index (A014, A025))
                        }

                        A025++
                    }
                }
                Else
                {
                    A044 (RefOf (A022), RefOf (A021))
                }

                A029 ()
            }

            Return (Local7)
        }

        Name (A045, Package (0x08)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Method (A029, 0, Serialized)
        {
            A025 = 0x00
            A044 (RefOf (A022), RefOf (A045))
            While ((A025 <= A001))
            {
                If ((A040 (A025) == 0x01))
                {
                    Index (A045, A025) = A046 (A025)
                }

                A025++
            }

            If ((Match (A023, MEQ, 0x01, MTR, 0x00, 0x00) != Ones))
            {
                A044 (RefOf (A022), RefOf (A045))
            }

            If ((Match (A045, MEQ, 0x02, MTR, 0x00, 0x00) != Ones))
            {
                A047 (A010, 0x01)
                A005 (0x02)
                A002 (0x02, A027 ())
            }

            A025 = 0x00
            While ((A025 <= A001))
            {
                If ((A040 (A025) == 0x00))
                {
                    A025++
                    Continue
                }

                Local0 = DerefOf (Index (A021, A025))
                Local2 = DerefOf (Index (A045, A025))
                If ((Local0 == Local2))
                {
                    A025++
                    Continue
                }

                Index (A021, A025) = Local2
                A048 (A025, Local2)
                A025++
            }

            If ((Match (A045, MEQ, 0x02, MTR, 0x00, 0x00) == Ones))
            {
                A002 (0x01, A027 ())
                A005 (0x01)
                A047 (A011, 0x00)
            }
        }

        Method (A046, 1, NotSerialized)
        {
            Local0 = 0x02
            If ((DerefOf (Index (A018, Arg0)) == 0x00))
            {
                If (((A027 () == 0x01) || (A009 == 0x03)))
                {
                    Local0 = 0x01
                }

                If ((DerefOf (Index (A014, Arg0)) != 0x00))
                {
                    Local0 = DerefOf (Index (A014, Arg0))
                }
            }
            Else
            {
                Local0 = DerefOf (Index (A020, Arg0))
            }

            Return (Local0)
        }

        Method (A048, 2, NotSerialized)
        {
            If ((Arg0 == 0x06))
            {
                A028 (0x00, 0x60, 0x80, ~0x40, 0x40)
            }

            A049 (Arg0, Arg1)
            If ((DerefOf (Index (A018, Arg0)) != 0x00))
            {
                A050 (Arg0, 0xA1, ~0x1000, 0x00)
            }
            Else
            {
                A050 (Arg0, 0xA1, ~0x1000, 0x1000)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = (A007 (Local1, 0x70) & 0x00400000)
            If ((Local3 != 0x00))
            {
                A051 (Arg0)
                Local2 = 0x01
                While (Local2)
                {
                    A052 (Local1, 0x68, ~0x00, 0x20)
                    Sleep (0x1E)
                    While ((A007 (Local1, 0x68) & 0x08000000))
                    {
                        Sleep (0x0A)
                    }

                    Local2 = 0x00
                    If ((Arg1 == 0x01))
                    {
                        Local4 = A053 (Arg0, 0xA4)
                        If (((Local4 & 0x0800) != 0x00))
                        {
                            Local2 = 0x01
                        }
                    }
                }

                A054 (Arg0)
            }
            Else
            {
            }

            If ((Arg0 == 0x06))
            {
                A028 (0x00, 0x60, 0x80, ~0x40, 0x00)
            }
        }

        Name (A055, Package (0x09)
        {
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00, 
            0x00
        })
        Name (A056, 0x00)
        Name (A057, 0x00)
        Method (A051, 1, Serialized)
        {
            A056 = 0x00
            A057 = 0x00
            Local1 = ((Arg0 + 0x02) << 0x03)
            If ((Arg0 == 0x06))
            {
                Index (A055, 0x00) = A058 (0x00, 0x00)
                A058 (0x00, 0x01)
                Return (0x00)
            }

            Local3 = A007 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A007 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A056 = A059 ((Local2 + Local4), 0x10)
                If ((A056 == 0x00))
                {
                    Local4++
                    Continue
                }

                A056 += 0x10
                A057 = A007 ((Local2 + Local4), A056)
                Index (A055, Local4) = (A057 & 0x03)
                A052 ((Local2 + Local4), A056, ~0x03, 0x00)
                Local4++
            }
        }

        Method (A054, 1, Serialized)
        {
            A056 = 0x00
            A057 = 0x00
            If ((Arg0 == 0x06))
            {
                A058 (DerefOf (Index (A055, 0x00)), 0x01)
                Return (0x00)
            }

            Local1 = ((Arg0 + 0x02) << 0x03)
            Local3 = A007 (Local1, 0x18)
            Local3 = ((Local3 >> 0x08) & 0xFF)
            Local2 = (Local3 << 0x08)
            Local3 = A007 (Local2, 0x0C)
            Local3 = ((Local3 >> 0x10) & 0xFF)
            If (((Local3 & 0x80) != 0x00))
            {
                Local0 = 0x07
            }
            Else
            {
                Local0 = 0x00
            }

            Local4 = 0x00
            While ((Local4 <= Local0))
            {
                A056 = A059 ((Local2 + Local4), 0x10)
                If ((A056 == 0x00))
                {
                    Local4++
                    Continue
                }

                A056 += 0x10
                A008 ((Local2 + Local4), A056, DerefOf (Index (A055, Local4)))
                Local4++
            }
        }

        Method (A049, 2, NotSerialized)
        {
            Local0 = ((Arg0 + 0x02) << 0x03)
            If ((Arg1 == 0x01))
            {
                A052 (Local0, 0x88, ~0x2F, 0x21)
                A050 (Arg0, 0xA4, ~0x20000001, 0x00)
            }
            Else
            {
                A050 (Arg0, 0xA4, ~0x20000001, 0x20000001)
                A052 (Local0, 0x88, ~0x2F, 0x02)
            }
        }

        Method (A047, 2, Serialized)
        {
            Local1 = A042 (0x00, 0x60, 0xEA)
            Local1 |= 0x02
            A043 (0x00, 0x60, 0xEA, Local1)
            Local1 &= ~(0x03 << 0x03)
            Local1 |= (Arg0 << 0x03)
            Local2 = (~Local1 & 0x04)
            Local1 = ((Local1 & ~0x04) | Local2)
            A043 (0x00, 0x60, 0xEA, Local1)
            If ((Arg1 != 0x00))
            {
                While (((Local1 << 0x02) != Local2))
                {
                    Local1 = (A042 (0x00, 0x60, 0xEB) & 0x01)
                }
            }
        }

        Method (A044, 2, NotSerialized)
        {
            Local1 = SizeOf (Arg0)
            Local0 = 0x00
            While ((Local0 < Local1))
            {
                Index (DerefOf (Arg1), Local0) = DerefOf (Index (DerefOf (Arg0), Local0))
                Local0++
            }
        }

        Method (A027, 0, NotSerialized)
        {
            Return ((A016 & A017))
        }

        Name (A060, 0x00)
        Name (A061, 0x00)
        Name (A062, 0x00)
        Name (A063, 0x00)
        Name (A064, 0x00)
        Name (A065, 0x00)
        Method (A066, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A033)
            CreateWordField (Local7, 0x02, A067)
            CreateByteField (Arg0, 0x02, A068)
            A033 = 0x03
            A067 = A068 /* \_SB_.A066.A068 */
            Return (Local7)
        }

        Method (A069, 1, Serialized)
        {
            Local0 = DerefOf (Index (Arg0, 0x04))
            Local1 = DerefOf (Index (Arg0, 0x02))
            Local1 = ((Local1 >> 0x03) - 0x02)
            If ((Local0 == 0x01))
            {
                Local2 = 0x06
            }
            Else
            {
                Local2 = 0x04
            }

            Local0 = A070 (Local1, Local2)
            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A033)
            CreateByteField (Local7, 0x02, A034)
            CreateByteField (Local7, 0x03, A071)
            A033 = 0x04
            A034 = 0x00
            A071 = Local0
            Return (Local7)
        }

        Name (A072, Buffer (0x0A)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  /* ........ */
            /* 0008 */  0x00, 0x00                                       /* .. */
        })
        Method (A070, 2, Serialized)
        {
            Local4 = 0x00
            Local7 = A073 (Arg0)
            Local1 = DerefOf (Index (Local7, 0x07))
            If ((Local1 != 0x01))
            {
                Return (Local4)
            }

            Local2 = Arg1
            While ((Local2 != 0x08))
            {
                If ((Local2 == 0x06))
                {
                    Index (A014, Arg0) = 0x00
                    A050 (Arg0, 0xA2, ~0x2000, 0x00)
                    A017 = 0x00
                    A029 ()
                    A074 (Arg0, 0x01)
                    A075 (Arg0, 0x00)
                    Local2 = 0x01
                    Local3 = 0x00
                }

                If ((Local2 == 0x01))
                {
                    Local1 = (A053 (Arg0, 0xA5) & 0x3F)
                    If ((Local1 > 0x04))
                    {
                        Local2 = 0x02
                        Local3 = 0x00
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                    }
                    Else
                    {
                        Local2 = 0x04
                    }
                }

                If ((Local2 == 0x02))
                {
                    Local1 = A053 (Arg0, 0xA5)
                    Local1 &= 0x3F
                    If ((Local1 == 0x10))
                    {
                        Local2 = 0x05
                        Continue
                    }

                    If ((Local3 < 0x50))
                    {
                        Sleep (0x01)
                        Local3++
                        Continue
                    }

                    Local2 = 0x04
                    If ((DerefOf (Index (A014, Arg0)) == 0x01))
                    {
                        Continue
                    }

                    If ((A076 (Arg0) == 0x01))
                    {
                        A050 (Arg0, 0xA2, ~0x2000, 0x2000)
                        Index (A014, Arg0) = 0x01
                        A049 (Arg0, 0x01)
                        Local2 = 0x07
                    }
                }

                If ((Local2 == 0x04))
                {
                    A075 (Arg0, 0x01)
                    A074 (Arg0, 0x00)
                    Index (A014, Arg0) = 0x01
                    Local2 = 0x00
                }

                If ((Local2 == 0x07))
                {
                    If (CondRefOf (\_SB.ALIC, Local6))
                    {
                        Local1 = ((Arg0 + 0x02) << 0x03)
                        \_SB.ALIC (Local1, 0x00, Sleep (0x02), \_SB.ALIC (Local1, 0x01, Local3 = 0x00, 
                            Local2 = 0x01, Continue, Local2 = 0x04), If ((Local2 == 0x05))
                            {
                                Local4 = 0x01
                                Local2 = 0x00
                                A074 (Arg0, 0x02)
                            }, If ((Local2 == 0x00))
                            {
                                A017 = 0x01
                                A029 ()
                                Local2 = 0x08
                            })
                    }
                }
            }

            Return (Local4)
        }

        Method (A074, 2, Serialized)
        {
            Local7 = A073 (Arg0)
            A062 = DerefOf (Index (Local7, 0x02))
            A063 = DerefOf (Index (Local7, 0x03))
            If ((Arg1 == 0x00))
            {
                A077 (Arg0, A062, A063, 0x01)
            }

            If ((Arg1 == 0x01))
            {
                A077 (Arg0, A062, A063, 0x00)
            }

            If ((Arg1 != 0x02))
            {
                Return (0x00)
            }

            Local2 = A078 (Arg0, 0x00)
            If ((A078 (Arg0, 0x01) <= Local2))
            {
                Return (0x00)
            }

            Local1 = A079 (Arg0)
            If ((Local1 == 0x00))
            {
                Local3 = (A062 + Local2)
                Local4 = A063 /* \_SB_.A063 */
            }
            Else
            {
                Local4 = (A063 - Local2)
                Local3 = A062 /* \_SB_.A062 */
            }

            A077 (Arg0, Local3, Local4, 0x01)
            Return (0x00)
        }

        Method (A076, 1, NotSerialized)
        {
            Local1 = Buffer (0x10) {}
            Local0 = 0x00
            While ((Local0 <= 0x03))
            {
                Local2 = A053 (Arg0, (Local0 + 0xA5))
                Index (Local1, (Local0 * 0x04)) = Local2
                Index (Local1, ((Local0 * 0x04) + 0x01)) = (
                    Local2 >> 0x08)
                Index (Local1, ((Local0 * 0x04) + 0x02)) = (
                    Local2 >> 0x10)
                Index (Local1, ((Local0 * 0x04) + 0x03)) = (
                    Local2 >> 0x18)
                Local0++
            }

            Local0 = 0x00
            While ((Local0 < 0x0F))
            {
                If (((DerefOf (Index (Local1, Local0)) == 0x2A) && (DerefOf (Index (
                    Local1, (Local0 + 0x01))) == 0x09)))
                {
                    Return (0x01)
                }

                Local0++
            }

            Return (0x00)
        }

        Method (A079, 1, Serialized)
        {
            Local7 = A073 (Arg0)
            A060 = DerefOf (Index (Local7, 0x00))
            A061 = DerefOf (Index (Local7, 0x01))
            Local0 = 0x00
            If ((A060 > A061))
            {
                Local0 = 0x01
            }

            Local1 = (A053 (Arg0, 0x50) & 0x01)
            Return (((Local0 ^ Local1) & 0x01))
        }

        Method (A075, 2, NotSerialized)
        {
            Local7 = A073 (Arg0)
            A065 = DerefOf (Index (Local7, 0x04))
            A064 = ((DerefOf (Index (Local7, (0x05 + 0x01))) << 
                0x08) | DerefOf (Index (Local7, 0x05)))
            A028 (0x00, 0xE0, ((A064 << 0x10) | (0x0800 + (0x0100 * 
                A065))), ~0x01, Arg1)
        }

        Name (A080, Buffer (0x07)
        {
             0x00, 0x01, 0x02, 0x04, 0x08, 0x0C, 0x10         /* ....... */
        })
        Method (A078, 2, NotSerialized)
        {
            If ((Arg1 == 0x00))
            {
                Local0 = ((A053 (Arg0, 0xA2) >> 0x04) & 0x07)
                Local1 = DerefOf (Index (A080, Local0))
            }
            Else
            {
                Local7 = A073 (Arg0)
                A060 = DerefOf (Index (Local7, 0x00))
                A061 = DerefOf (Index (Local7, 0x01))
                If ((A060 > A061))
                {
                    Local1 = (A060 - A061) /* \_SB_.A061 */
                }
                Else
                {
                    Local1 = (A061 - A060) /* \_SB_.A060 */
                }

                Local1++
            }

            Return (Local1)
        }

        Method (A077, 4, Serialized)
        {
            Local7 = A073 (Arg0)
            A062 = Arg1
            A063 = Arg2
            A064 = ((DerefOf (Index (Local7, (0x05 + 0x01))) << 
                0x08) | DerefOf (Index (Local7, 0x05)))
            If ((A062 > A063))
            {
                Local1 = (A062 - A063) /* \_SB_.A063 */
                Local2 = A063 /* \_SB_.A063 */
            }
            Else
            {
                Local1 = (A063 - A062) /* \_SB_.A062 */
                Local2 = A062 /* \_SB_.A062 */
            }

            Local3 = (((0x01 << (Local1 + 0x01)) - 0x01) << 
                Local2)
            Local4 = ~Local3
            If ((Arg3 == 0x01))
            {
                Local3 = 0x00
            }

            A028 (0x00, 0xE0, ((A064 << 0x10) | 0x8023), Local4, Local3)
            Stall (0x0A)
        }

        Method (A002, 2, NotSerialized)
        {
            Local0 = A003 (0x8490)
            If (((Local0 & 0xF0) != 0x00))
            {
                If ((Arg0 == 0x02))
                {
                    Local0 &= 0xFFFFFFA0
                    Local0 |= 0xA0
                }
                Else
                {
                    If ((Arg1 == 0x00))
                    {
                        Local0 &= 0xFFFFFF60
                        Local0 |= 0x60
                    }
                    Else
                    {
                        Local0 &= 0xFFFFFF20
                        Local0 |= 0x20
                    }
                }

                A004 (0x8490, Local0)
            }
        }

        Method (A005, 1, NotSerialized)
        {
        }

        Name (AD0B, 0x01)
        Method (A006, 1, NotSerialized)
        {
            If ((AD0B == 0x01))
            {
                Local1 = ((0x18 << 0x03) | 0x04)
                Local2 = A007 (Local1, 0x015C)
                If ((Arg0 == 0x00))
                {
                    Local2 |= 0x01
                }
                Else
                {
                    Local2 &= 0xFFFFFFFC
                }

                A008 (Local1, 0x015C, Local2)
            }
        }
    }
}



XSDT
----
[000h 0000   4]                    Signature : "XSDT"    [Extended System Description Table]
[004h 0004   4]                 Table Length : 0000005C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B4
[00Ah 0010   6]                       Oem ID : "SECCSD"
[010h 0016   8]                 Oem Table ID : "LH43STAR"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   8]       ACPI Table Address   0 : 00000000AFB57BF8
[02Ch 0044   8]       ACPI Table Address   1 : 00000000AFB57CF0
[034h 0052   8]       ACPI Table Address   2 : 00000000AFB57D58
[03Ch 0060   8]       ACPI Table Address   3 : 00000000AFB57D98
[044h 0068   8]       ACPI Table Address   4 : 00000000AFB57F10
[04Ch 0076   8]       ACPI Table Address   5 : 00000000AFB57F48
[054h 0084   8]       ACPI Table Address   6 : 00000000AFB58328

Raw Table Data: Length 92 (0x5C)

  0000: 58 53 44 54 5C 00 00 00 01 B4 53 45 43 43 53 44  // XSDT\.....SECCSD
  0010: 4C 48 34 33 53 54 41 52 09 20 07 01 41 4D 49 20  // LH43STAR. ..AMI 
  0020: 13 00 01 00 F8 7B B5 AF 00 00 00 00 F0 7C B5 AF  // .....{.......|..
  0030: 00 00 00 00 58 7D B5 AF 00 00 00 00 98 7D B5 AF  // ....X}.......}..
  0040: 00 00 00 00 10 7F B5 AF 00 00 00 00 48 7F B5 AF  // ............H...
  0050: 00 00 00 00 28 83 B5 AF 00 00 00 00              // ....(.......


