
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20190509
Copyright (c) 2000 - 2019 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x000031C7  0x02  "SaSsdt"  "SaSsdt  "  0x00003000  "INTL"   0x20160527
 02)  MCFG  0x0000003C  0x01  "ALWARE"  "ALIENWRE"  0x01072009  "MSFT"   0x00000097
 03)  APIC  0x000000F4  0x04  "ALWARE"  "ALIENWRE"  0x01072009  "AMI "   0x00010013
 04)  SLIC  0x00000176  0x01  "ALWARE"  "ALIENWRE"  0x01072009  "AMI "   0x00010013
 05)  SSDT  0x00004ABC  0x02  "DptfTa"  "DptfTabl"  0x00001000  "INTL"   0x20160527
 06)  VFCT  0x0000EE84  0x01  "ALWARE"  "ALIENWRE"  0x00000001  "AMD "   0x31504F47
 07)  BOOT  0x00000028  0x01  "ALWARE"  "ALIENWRE"  0x01072009  "AMI "   0x00010013
 08)  SSDT  0x00000FFE  0x02  "INTEL "  "TbtTypeC"  0x00000000  "INTL"   0x20160527
 09)  UEFI  0x00000048  0x01  "ALWARE"  "ALIENWRE"  0x00000002  "    "   0x01000013
 10)  DSDT  0x00043136  0x02  "ALWARE"  "ALIENWRE"  0x01072009  "INTL"   0x20160527
 11)  SSDT  0x00002A71  0x02  "INTEL "  "xh_cfhd4"  0x00000000  "INTL"   0x20160527
 12)  WSMT  0x00000028  0x01  "ALWARE"  "ALIENWRE"  0x01072009  "AMI "   0x00010013
 13)  SSDT  0x00005A6F  0x01  "OemRef"  "OemNvT  "  0x00001000  "INTL"   0x20160527
 14)  LPIT  0x0000005C  0x01  "INTEL "  "ALIENWRE"  0x00000002  "    "   0x01000013
 15)  SSDT  0x0000206D  0x02  "PegSsd"  "PegSsdt "  0x00001000  "INTL"   0x20160527
 16)  DBG2  0x00000054  0x00  "ALWARE"  "ALIENWRE"  0x00000002  "    "   0x01000013
 17)  SSDT  0x0000191C  0x02  "ALWARE"  "UsbCTabl"  0x00001000  "INTL"   0x20160527
 18)  SSDT  0x00001818  0x02  "CpuRef"  "CpuSsdt "  0x00003000  "INTL"   0x20160527
 19)  DMAR  0x000000A8  0x01  "INTEL "  "EDK2    "  0x00000002  "    "   0x01000013
 20)  FACP  0x00000114  0x06  "ALWARE"  "ALIENWRE"  0x01072009  "AMI "   0x00010013
 21)  FPDT  0x00000044  0x01  "ALWARE"  "ALIENWRE"  0x01072009  "AMI "   0x00010013
 22)  SSDT  0x00000425  0x01  "SataRe"  "SataTabl"  0x00001000  "INTL"   0x20160527
 23)  MSDM  0x00000055  0x03  "ALWARE"  "ALIENWRE"  0x01072009  "AMI "   0x00010013
 24)  SSDT  0x000027DE  0x02  "INTEL "  "PtidDevc"  0x00001000  "INTL"   0x20160527
 25)  DBGP  0x00000034  0x01  "ALWARE"  "ALIENWRE"  0x00000002  "    "   0x01000013
 26)  SSDT  0x000005BE  0x02  "PmRef "  "Cpu0Ist "  0x00003000  "INTL"   0x20160527
 27)  HPET  0x00000038  0x01  "INTEL "  "ALIENWRE"  0x00000002  "    "   0x01000013
 28)  SSDT  0x00000F9E  0x02  "INTEL "  "Ther_Rvp"  0x00001000  "INTL"   0x20160527
 29)  FIDT  0x0000009C  0x01  "ALWARE"  "ALIENWRE"  0x01072009  "AMI "   0x00010013
 30)  FACS  0x00000040  0x02
 31)  BGRT  0x00000038  0x01  "ALWARE"  "ALIENWRE"  0x01072009  "AMI "   0x00010013
 32)  SSDT  0x00000C25  0x01  "OemRef"  "OemAti  "  0x00001000  "INTL"   0x20160527
 33)  SSDT  0x00000317  0x02  "PmRef "  "ApHwp   "  0x00003000  "INTL"   0x20160527
 34)  SSDT  0x00000724  0x02  "PmRef "  "HwpLvt  "  0x00003000  "INTL"   0x20160527
 35)  SSDT  0x00000400  0x02  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20160527
 36)  SSDT  0x0000030A  0x02  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20160527
 37)  SSDT  0x00000EF1  0x02  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20160527
 38)  SSDT  0x0000010A  0x02  "PmRef "  "Cpu0Hwp "  0x00003000  "INTL"   0x20160527

Found 38 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : AD
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 01
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 04 [Local APIC NMI]
[035h 0053   1]                       Length : 06
[036h 0054   1]                 Processor ID : 01
[037h 0055   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[039h 0057   1]         Interrupt Input LINT : 01

[03Ah 0058   1]                Subtable Type : 00 [Processor Local APIC]
[03Bh 0059   1]                       Length : 08
[03Ch 0060   1]                 Processor ID : 02
[03Dh 0061   1]                Local Apic ID : 02
[03Eh 0062   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[042h 0066   1]                Subtable Type : 04 [Local APIC NMI]
[043h 0067   1]                       Length : 06
[044h 0068   1]                 Processor ID : 02
[045h 0069   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[047h 0071   1]         Interrupt Input LINT : 01

[048h 0072   1]                Subtable Type : 00 [Processor Local APIC]
[049h 0073   1]                       Length : 08
[04Ah 0074   1]                 Processor ID : 03
[04Bh 0075   1]                Local Apic ID : 04
[04Ch 0076   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[050h 0080   1]                Subtable Type : 04 [Local APIC NMI]
[051h 0081   1]                       Length : 06
[052h 0082   1]                 Processor ID : 03
[053h 0083   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[055h 0085   1]         Interrupt Input LINT : 01

[056h 0086   1]                Subtable Type : 00 [Processor Local APIC]
[057h 0087   1]                       Length : 08
[058h 0088   1]                 Processor ID : 04
[059h 0089   1]                Local Apic ID : 06
[05Ah 0090   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Eh 0094   1]                Subtable Type : 04 [Local APIC NMI]
[05Fh 0095   1]                       Length : 06
[060h 0096   1]                 Processor ID : 04
[061h 0097   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[063h 0099   1]         Interrupt Input LINT : 01

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 05
[067h 0103   1]                Local Apic ID : 08
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 04 [Local APIC NMI]
[06Dh 0109   1]                       Length : 06
[06Eh 0110   1]                 Processor ID : 05
[06Fh 0111   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[071h 0113   1]         Interrupt Input LINT : 01

[072h 0114   1]                Subtable Type : 00 [Processor Local APIC]
[073h 0115   1]                       Length : 08
[074h 0116   1]                 Processor ID : 06
[075h 0117   1]                Local Apic ID : 0A
[076h 0118   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[07Ah 0122   1]                Subtable Type : 04 [Local APIC NMI]
[07Bh 0123   1]                       Length : 06
[07Ch 0124   1]                 Processor ID : 06
[07Dh 0125   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[07Fh 0127   1]         Interrupt Input LINT : 01

[080h 0128   1]                Subtable Type : 00 [Processor Local APIC]
[081h 0129   1]                       Length : 08
[082h 0130   1]                 Processor ID : 07
[083h 0131   1]                Local Apic ID : 01
[084h 0132   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[088h 0136   1]                Subtable Type : 04 [Local APIC NMI]
[089h 0137   1]                       Length : 06
[08Ah 0138   1]                 Processor ID : 07
[08Bh 0139   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[08Dh 0141   1]         Interrupt Input LINT : 01

[08Eh 0142   1]                Subtable Type : 00 [Processor Local APIC]
[08Fh 0143   1]                       Length : 08
[090h 0144   1]                 Processor ID : 08
[091h 0145   1]                Local Apic ID : 03
[092h 0146   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[096h 0150   1]                Subtable Type : 04 [Local APIC NMI]
[097h 0151   1]                       Length : 06
[098h 0152   1]                 Processor ID : 08
[099h 0153   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[09Bh 0155   1]         Interrupt Input LINT : 01

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 09
[09Fh 0159   1]                Local Apic ID : 05
[0A0h 0160   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 04 [Local APIC NMI]
[0A5h 0165   1]                       Length : 06
[0A6h 0166   1]                 Processor ID : 09
[0A7h 0167   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0A9h 0169   1]         Interrupt Input LINT : 01

[0AAh 0170   1]                Subtable Type : 00 [Processor Local APIC]
[0ABh 0171   1]                       Length : 08
[0ACh 0172   1]                 Processor ID : 0A
[0ADh 0173   1]                Local Apic ID : 07
[0AEh 0174   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0B2h 0178   1]                Subtable Type : 04 [Local APIC NMI]
[0B3h 0179   1]                       Length : 06
[0B4h 0180   1]                 Processor ID : 0A
[0B5h 0181   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0B7h 0183   1]         Interrupt Input LINT : 01

[0B8h 0184   1]                Subtable Type : 00 [Processor Local APIC]
[0B9h 0185   1]                       Length : 08
[0BAh 0186   1]                 Processor ID : 0B
[0BBh 0187   1]                Local Apic ID : 09
[0BCh 0188   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0C0h 0192   1]                Subtable Type : 04 [Local APIC NMI]
[0C1h 0193   1]                       Length : 06
[0C2h 0194   1]                 Processor ID : 0B
[0C3h 0195   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0C5h 0197   1]         Interrupt Input LINT : 01

[0C6h 0198   1]                Subtable Type : 00 [Processor Local APIC]
[0C7h 0199   1]                       Length : 08
[0C8h 0200   1]                 Processor ID : 0C
[0C9h 0201   1]                Local Apic ID : 0B
[0CAh 0202   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[0CEh 0206   1]                Subtable Type : 04 [Local APIC NMI]
[0CFh 0207   1]                       Length : 06
[0D0h 0208   1]                 Processor ID : 0C
[0D1h 0209   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0D3h 0211   1]         Interrupt Input LINT : 01

[0D4h 0212   1]                Subtable Type : 01 [I/O APIC]
[0D5h 0213   1]                       Length : 0C
[0D6h 0214   1]                  I/O Apic ID : 02
[0D7h 0215   1]                     Reserved : 00
[0D8h 0216   4]                      Address : FEC00000
[0DCh 0220   4]                    Interrupt : 00000000

[0E0h 0224   1]                Subtable Type : 02 [Interrupt Source Override]
[0E1h 0225   1]                       Length : 0A
[0E2h 0226   1]                          Bus : 00
[0E3h 0227   1]                       Source : 00
[0E4h 0228   4]                    Interrupt : 00000002
[0E8h 0232   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0EAh 0234   1]                Subtable Type : 02 [Interrupt Source Override]
[0EBh 0235   1]                       Length : 0A
[0ECh 0236   1]                          Bus : 00
[0EDh 0237   1]                       Source : 09
[0EEh 0238   4]                    Interrupt : 00000009
[0F2h 0242   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 244 (0xF4)

    0000: 41 50 49 43 F4 00 00 00 04 AD 41 4C 57 41 52 45  // APIC......ALWARE
    0010: 41 4C 49 45 4E 57 52 45 09 20 07 01 41 4D 49 20  // ALIENWRE. ..AMI 
    0020: 13 00 01 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 04 06 01 05 00 01 00 08 02 02 01 00  // ................
    0040: 00 00 04 06 02 05 00 01 00 08 03 04 01 00 00 00  // ................
    0050: 04 06 03 05 00 01 00 08 04 06 01 00 00 00 04 06  // ................
    0060: 04 05 00 01 00 08 05 08 01 00 00 00 04 06 05 05  // ................
    0070: 00 01 00 08 06 0A 01 00 00 00 04 06 06 05 00 01  // ................
    0080: 00 08 07 01 01 00 00 00 04 06 07 05 00 01 00 08  // ................
    0090: 08 03 01 00 00 00 04 06 08 05 00 01 00 08 09 05  // ................
    00A0: 01 00 00 00 04 06 09 05 00 01 00 08 0A 07 01 00  // ................
    00B0: 00 00 04 06 0A 05 00 01 00 08 0B 09 01 00 00 00  // ................
    00C0: 04 06 0B 05 00 01 00 08 0C 0B 01 00 00 00 04 06  // ................
    00D0: 0C 05 00 01 01 0C 02 00 00 00 C0 FE 00 00 00 00  // ................
    00E0: 02 0A 00 00 02 00 00 00 00 00 02 0A 00 09 09 00  // ................
    00F0: 00 00 0D 00                                      // ....


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : BA
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 0000000055B5B018
[030h 0048   4]                Image OffsetX : 00000240
[034h 0052   4]                Image OffsetY : 00000178

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 BA 41 4C 57 41 52 45  // BGRT8.....ALWARE
    0010: 41 4C 49 45 4E 57 52 45 09 20 07 01 41 4D 49 20  // ALIENWRE. ..AMI 
    0020: 13 00 01 00 01 00 01 00 18 B0 B5 55 00 00 00 00  // ...........U....
    0030: 40 02 00 00 78 01 00 00                          // @...x...


BOOT
----
[000h 0000   4]                    Signature : "BOOT"    [Simple Boot Flag Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0D
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   1]          Boot Register Index : 47
[025h 0037   3]                     Reserved : 000000

Raw Table Data: Length 40 (0x28)

    0000: 42 4F 4F 54 28 00 00 00 01 0D 41 4C 57 41 52 45  // BOOT(.....ALWARE
    0010: 41 4C 49 45 4E 57 52 45 09 20 07 01 41 4D 49 20  // ALIENWRE. ..AMI 
    0020: 13 00 01 00 47 00 00 00                          // ....G...


DBG2
----
[000h 0000   4]                    Signature : "DBG2"    [Debug Port table type 2]
[004h 0004   4]                 Table Length : 00000054
[008h 0008   1]                     Revision : 00
[009h 0009   1]                     Checksum : 90
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]                  Info Offset : 0000002C
[028h 0040   4]                   Info Count : 00000001

[02Ch 0044   1]                     Revision : 00
[02Dh 0045   2]                       Length : 0028
[02Fh 0047   1]               Register Count : 01
[030h 0048   2]              Namepath Length : 0002
[032h 0050   2]              Namepath Offset : 0026
[034h 0052   2]              OEM Data Length : 0000 [Optional field not present]
[036h 0054   2]              OEM Data Offset : 0000 [Optional field not present]
[038h 0056   2]                    Port Type : 8000
[03Ah 0058   2]                 Port Subtype : 0000
[03Ch 0060   2]                     Reserved : 0000
[03Eh 0062   2]          Base Address Offset : 0016
[040h 0064   2]          Address Size Offset : 0022

[042h 0066  12]        Base Address Register : [Generic Address Structure]
[042h 0066   1]                     Space ID : 01 [SystemIO]
[043h 0067   1]                    Bit Width : 08
[044h 0068   1]                   Bit Offset : 00
[045h 0069   1]         Encoded Access Width : 00 [Undefined/Legacy]
[046h 0070   8]                      Address : 00000000000003F8

[04Eh 0078   4]                 Address Size : 0000000C

[052h 0082   2]                     Namepath : "."

Raw Table Data: Length 84 (0x54)

    0000: 44 42 47 32 54 00 00 00 00 90 41 4C 57 41 52 45  // DBG2T.....ALWARE
    0010: 41 4C 49 45 4E 57 52 45 02 00 00 00 20 20 20 20  // ALIENWRE....    
    0020: 13 00 00 01 2C 00 00 00 01 00 00 00 00 28 00 01  // ....,........(..
    0030: 02 00 26 00 00 00 00 00 00 80 00 00 00 00 16 00  // ..&.............
    0040: 22 00 01 08 00 00 F8 03 00 00 00 00 00 00 0C 00  // "...............
    0050: 00 00 2E 00                                      // ....


DBGP
----
[000h 0000   4]                    Signature : "DBGP"    [Debug Port table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9D
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   1]               Interface Type : 00
[025h 0037   3]                     Reserved : CCCCCC

[028h 0040  12]          Debug Port Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 01 [SystemIO]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000000003F8


Raw Table Data: Length 52 (0x34)

    0000: 44 42 47 50 34 00 00 00 01 9D 41 4C 57 41 52 45  // DBGP4.....ALWARE
    0010: 41 4C 49 45 4E 57 52 45 02 00 00 00 20 20 20 20  // ALIENWRE....    
    0020: 13 00 00 01 00 CC CC CC 01 08 00 00 F8 03 00 00  // ................
    0030: 00 00 00 00                                      // ....


DMAR
----
[000h 0000   4]                    Signature : "DMAR"    [DMA Remapping table]
[004h 0004   4]                 Table Length : 000000A8
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : CB
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "EDK2    "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   1]           Host Address Width : 26
[025h 0037   1]                        Flags : 01
[026h 0038  10]                     Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048   2]                Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050   2]                       Length : 0018

[034h 0052   1]                        Flags : 00
[035h 0053   1]                     Reserved : 00
[036h 0054   2]           PCI Segment Number : 0000
[038h 0056   8]        Register Base Address : 00000000FED90000

[040h 0064   1]            Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065   1]                 Entry Length : 08
[042h 0066   2]                     Reserved : 0000
[044h 0068   1]               Enumeration ID : 00
[045h 0069   1]               PCI Bus Number : 00

[046h 0070   2]                     PCI Path : 02,00


[048h 0072   2]                Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074   2]                       Length : 0020

[04Ch 0076   1]                        Flags : 01
[04Dh 0077   1]                     Reserved : 00
[04Eh 0078   2]           PCI Segment Number : 0000
[050h 0080   8]        Register Base Address : 00000000FED91000

[058h 0088   1]            Device Scope Type : 03 [IOAPIC Device]
[059h 0089   1]                 Entry Length : 08
[05Ah 0090   2]                     Reserved : 0000
[05Ch 0092   1]               Enumeration ID : 02
[05Dh 0093   1]               PCI Bus Number : 00

[05Eh 0094   2]                     PCI Path : 1E,07


[060h 0096   1]            Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097   1]                 Entry Length : 08
[062h 0098   2]                     Reserved : 0000
[064h 0100   1]               Enumeration ID : 00
[065h 0101   1]               PCI Bus Number : 00

[066h 0102   2]                     PCI Path : 1E,06


[068h 0104   2]                Subtable Type : 0001 [Reserved Memory Region]
[06Ah 0106   2]                       Length : 0020

[06Ch 0108   2]                     Reserved : 0000
[06Eh 0110   2]           PCI Segment Number : 0000
[070h 0112   8]                 Base Address : 0000000059D81000
[078h 0120   8]          End Address (limit) : 0000000059DA0FFF

[080h 0128   1]            Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129   1]                 Entry Length : 08
[082h 0130   2]                     Reserved : 0000
[084h 0132   1]               Enumeration ID : 00
[085h 0133   1]               PCI Bus Number : 00

[086h 0134   2]                     PCI Path : 14,00


[088h 0136   2]                Subtable Type : 0001 [Reserved Memory Region]
[08Ah 0138   2]                       Length : 0020

[08Ch 0140   2]                     Reserved : 0000
[08Eh 0142   2]           PCI Segment Number : 0000
[090h 0144   8]                 Base Address : 000000005D800000
[098h 0152   8]          End Address (limit) : 000000005FFFFFFF

[0A0h 0160   1]            Device Scope Type : 01 [PCI Endpoint Device]
[0A1h 0161   1]                 Entry Length : 08
[0A2h 0162   2]                     Reserved : 0000
[0A4h 0164   1]               Enumeration ID : 00
[0A5h 0165   1]               PCI Bus Number : 00

[0A6h 0166   2]                     PCI Path : 02,00


Raw Table Data: Length 168 (0xA8)

    0000: 44 4D 41 52 A8 00 00 00 01 CB 49 4E 54 45 4C 20  // DMAR......INTEL 
    0010: 45 44 4B 32 20 20 20 20 02 00 00 00 20 20 20 20  // EDK2    ....    
    0020: 13 00 00 01 26 01 00 00 00 00 00 00 00 00 00 00  // ....&...........
    0030: 00 00 18 00 00 00 00 00 00 00 D9 FE 00 00 00 00  // ................
    0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  // .......... .....
    0050: 00 10 D9 FE 00 00 00 00 03 08 00 00 02 00 1E 07  // ................
    0060: 04 08 00 00 00 00 1E 06 01 00 20 00 00 00 00 00  // .......... .....
    0070: 00 10 D8 59 00 00 00 00 FF 0F DA 59 00 00 00 00  // ...Y.......Y....
    0080: 01 08 00 00 00 00 14 00 01 00 20 00 00 00 00 00  // .......... .....
    0090: 00 00 80 5D 00 00 00 00 FF FF FF 5F 00 00 00 00  // ...]......._....
    00A0: 01 08 00 00 00 00 02 00                          // ........


DSDT
----
Firmware Error (ACPI): Could not resolve symbol [^^PEG0.VEID], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^PEG0.PEGP.LCD0], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^PEG0.NVPM], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI0], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI1], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI2], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI3], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI4], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI5], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI6], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI7], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI8], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI9], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGIA], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGIB], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGIC], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGID], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGIE], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGIF], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.CCI0], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.CCI1], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.CCI2], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.CCI3], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS0], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS1], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS2], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS3], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS4], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS5], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS6], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS7], AE_NOT_FOUND (20190509/dswload-388)
Firmware Error (ACPI): Could not resolve symbol [^^PEG0.VEID], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^PEG0.PEGP.LCD0], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^PEG0.NVPM], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI0], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI1], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI2], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI3], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI4], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI5], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI6], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI7], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI8], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGI9], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGIA], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGIB], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGIC], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGID], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGIE], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.MGIF], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.CCI0], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.CCI1], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.CCI2], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.CCI3], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS0], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS1], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS2], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS3], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS4], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS5], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS6], AE_NOT_FOUND (20190509/dswload2-368)
Firmware Error (ACPI): Could not resolve symbol [^^^UBTC.STS7], AE_NOT_FOUND (20190509/dswload2-368)
/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20190509 (64-bit version)
 * Copyright (c) 2000 - 2019 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of dsdt.dat, Thu Feb 20 19:42:04 2020
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x00043136 (274742)
 *     Revision         0x02
 *     Checksum         0x6A
 *     OEM ID           "ALWARE"
 *     OEM Table ID     "ALIENWRE"
 *     OEM Revision     0x01072009 (17244169)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20160527 (538314023)
 */
DefinitionBlock ("", "DSDT", 2, "ALWARE", "ALIENWRE", 0x01072009)
{
    External (_GPE.AL6F, MethodObj)    // 0 Arguments
    External (_GPE.HLVT, MethodObj)    // 0 Arguments
    External (_GPE.ITBH, MethodObj)    // 0 Arguments
    External (_GPE.P0L6, MethodObj)    // 0 Arguments
    External (_GPE.P1L6, MethodObj)    // 0 Arguments
    External (_GPE.P2L6, MethodObj)    // 0 Arguments
    External (_SB_.BGIA, UnknownObj)
    External (_SB_.BGMA, UnknownObj)
    External (_SB_.BGMS, UnknownObj)
    External (_SB_.CFGD, UnknownObj)
    External (_SB_.CPPC, IntObj)
    External (_SB_.DSAE, UnknownObj)
    External (_SB_.DTS1, UnknownObj)
    External (_SB_.DTS2, UnknownObj)
    External (_SB_.DTS3, UnknownObj)
    External (_SB_.DTS4, UnknownObj)
    External (_SB_.DTSE, UnknownObj)
    External (_SB_.DTSF, UnknownObj)
    External (_SB_.DTSI, IntObj)
    External (_SB_.ELNG, UnknownObj)
    External (_SB_.EMNA, UnknownObj)
    External (_SB_.EPCS, UnknownObj)
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.HWPI, IntObj)
    External (_SB_.IETM, DeviceObj)
    External (_SB_.ITBI, IntObj)
    External (_SB_.PCI0.B0D4, DeviceObj)
    External (_SB_.PCI0.B0D4.XPCC, UnknownObj)
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.GFX0.ALSI, UnknownObj)
    External (_SB_.PCI0.GFX0.CBLV, UnknownObj)
    External (_SB_.PCI0.GFX0.CDCK, UnknownObj)
    External (_SB_.PCI0.GFX0.CLID, UnknownObj)
    External (_SB_.PCI0.GFX0.DD1F, DeviceObj)
    External (_SB_.PCI0.GFX0.GLID, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.GSCI, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.GSSE, UnknownObj)
    External (_SB_.PCI0.GFX0.IUEH, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GFX0.STAT, UnknownObj)
    External (_SB_.PCI0.GFX0.TCHE, UnknownObj)
    External (_SB_.PCI0.HDAS.PPMS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.HDAS.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.HDAS.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.HIDW, MethodObj)    // 4 Arguments
    External (_SB_.PCI0.HIWC, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.I2C1.INC1, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ERWT, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPCB.H_EC.CHRG, DeviceObj)
    External (_SB_.PCI0.LPCB.H_EC.XDAT, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PAUD.PUAM, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG0, DeviceObj)
    External (_SB_.PCI0.PEG0.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG0.NVPM, UnknownObj)
    External (_SB_.PCI0.PEG0.PEGP, DeviceObj)
    External (_SB_.PCI0.PEG0.PEGP.LCD0, UnknownObj)
    External (_SB_.PCI0.PEG0.PEGP.NHDA, UnknownObj)
    External (_SB_.PCI0.PEG0.VEID, UnknownObj)
    External (_SB_.PCI0.PEG1, DeviceObj)
    External (_SB_.PCI0.PEG1.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG2, DeviceObj)
    External (_SB_.PCI0.PEG2.HPME, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP01.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP21.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP21.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP21.TBNF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP22.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP23.POFF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP23.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP24.PON_, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT0.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT0.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT1.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT1.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT2.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT2.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT3.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT3.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT4.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT4.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT5.SPOF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.PRT5.SPON, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.SAT0.SATC, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SAT0.SATD, MethodObj)    // 4 Arguments
    External (_SB_.PCI0.SHFG, IntObj)
    External (_SB_.PCI0.XDCI.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XDCI.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.DUAM, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.INIR, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.PS0X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.PS2X, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB.PS3X, MethodObj)    // 0 Arguments
    External (_SB_.PDTS, UnknownObj)
    External (_SB_.PKGA, UnknownObj)
    External (_SB_.POWS, UnknownObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments
    External (_SB_.TRPD, UnknownObj)
    External (_SB_.TRPF, UnknownObj)
    External (_SB_.UBTC.CCI0, UnknownObj)
    External (_SB_.UBTC.CCI1, UnknownObj)
    External (_SB_.UBTC.CCI2, UnknownObj)
    External (_SB_.UBTC.CCI3, UnknownObj)
    External (_SB_.UBTC.MGI0, UnknownObj)
    External (_SB_.UBTC.MGI1, UnknownObj)
    External (_SB_.UBTC.MGI2, UnknownObj)
    External (_SB_.UBTC.MGI3, UnknownObj)
    External (_SB_.UBTC.MGI4, UnknownObj)
    External (_SB_.UBTC.MGI5, UnknownObj)
    External (_SB_.UBTC.MGI6, UnknownObj)
    External (_SB_.UBTC.MGI7, UnknownObj)
    External (_SB_.UBTC.MGI8, UnknownObj)
    External (_SB_.UBTC.MGI9, UnknownObj)
    External (_SB_.UBTC.MGIA, UnknownObj)
    External (_SB_.UBTC.MGIB, UnknownObj)
    External (_SB_.UBTC.MGIC, UnknownObj)
    External (_SB_.UBTC.MGID, UnknownObj)
    External (_SB_.UBTC.MGIE, UnknownObj)
    External (_SB_.UBTC.MGIF, UnknownObj)
    External (_SB_.VMOF, MethodObj)    // 0 Arguments
    External (_SB_.VMON, MethodObj)    // 0 Arguments
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.TZ00, DeviceObj)
    External (_TZ_.TZ01, DeviceObj)
    External (ALSE, UnknownObj)
    External (AMW0, DeviceObj)
    External (ASPM, UnknownObj)
    External (BGIA, IntObj)
    External (BGMA, IntObj)
    External (BGMS, IntObj)
    External (BRTL, UnknownObj)
    External (CRBI, UnknownObj)
    External (DIDX, UnknownObj)
    External (DPPP, IntObj)
    External (ELNG, IntObj)
    External (EMNA, IntObj)
    External (GEN1, DeviceObj)
    External (GEN2, DeviceObj)
    External (GEN3, DeviceObj)
    External (GSMI, UnknownObj)
    External (IGDS, UnknownObj)
    External (LHIH, UnknownObj)
    External (LIDS, UnknownObj)
    External (LLOW, UnknownObj)
    External (M32B, UnknownObj)
    External (M32L, UnknownObj)
    External (M64B, UnknownObj)
    External (M64L, UnknownObj)
    External (MDBG, MethodObj)    // 1 Arguments
    External (MMRP, MethodObj)    // 2 Arguments
    External (MMTB, MethodObj)    // 2 Arguments
    External (NHDA, IntObj)
    External (NVAF, UnknownObj)    // Conflicts with a later declaration
    External (OSDW, UnknownObj)
    External (P0WK, UnknownObj)
    External (P1GP, UnknownObj)
    External (P1WK, UnknownObj)
    External (P2GP, UnknownObj)
    External (P2WK, UnknownObj)
    External (PC00, IntObj)
    External (PC01, UnknownObj)
    External (PC02, UnknownObj)
    External (PC03, UnknownObj)
    External (PC04, UnknownObj)
    External (PC05, UnknownObj)
    External (PC06, UnknownObj)
    External (PC07, UnknownObj)
    External (PC08, UnknownObj)
    External (PC09, UnknownObj)
    External (PC10, UnknownObj)
    External (PC11, UnknownObj)
    External (PC12, UnknownObj)
    External (PC13, UnknownObj)
    External (PC14, UnknownObj)
    External (PC15, UnknownObj)
    External (PLSZ, UnknownObj)    // Conflicts with a later declaration
    External (PMST.PMC4, FieldUnitObj)
    External (SGGP, UnknownObj)
    External (SGMD, UnknownObj)
    External (TBTD, MethodObj)    // 2 Arguments
    External (TBTF, MethodObj)    // 2 Arguments
    External (TPTS, MethodObj)    // 1 Arguments
    External (TPWK, MethodObj)    // 1 Arguments
    External (UBTC, DeviceObj)

    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x8000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (VTBS, 0xFED90000)
    Name (VTLN, 0x4000)
    Name (CPVD, Zero)
    Name (SMIP, 0xB2)
    Name (PMBA, 0x1800)
    Name (SMCR, 0x1830)
    Name (TCBR, 0xFED08000)
    Name (TCLT, 0x1000)
    Name (SMBL, 0x20)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PFTU, 0xB2)
    Name (TBSW, 0xBC)
    Name (TBEF, 0x15)
    Name (TBDM, 0x17)
    Name (TBDB, 0x16)
    Name (TBU0, 0x0A)
    Name (TBU1, 0xFF)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x04)
    Name (FUWS, 0x03)
    Name (FEMD, 0x04)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, Zero)
    Name (SHPC, One)
    Name (PEPM, Zero)
    Name (PEER, Zero)
    Name (PECS, Zero)
    Name (ITKE, Zero)
    Name (MBEC, 0xFFFF)
    Name (CSMI, 0x61)
    Name (SMIA, 0xB2)
    Name (SMIB, 0xB3)
    Name (OFST, 0x35)
    Name (TRST, 0x02)
    Name (TCMF, Zero)
    Name (TMF1, Zero)
    Name (TMF2, Zero)
    Name (TMF3, Zero)
    Name (TTPF, One)
    Name (TTDP, Zero)
    Name (TPMB, 0xFFFFFFFF)
    Name (TPMC, 0xFFFFFFFF)
    Name (TPMM, 0xFED40000)
    Name (FTPM, 0xFFFFFFFF)
    Name (PPIM, 0xFFFF0000)
    Name (PPIL, 0xF0)
    Name (AMDT, Zero)
    Name (TPMF, Zero)
    Name (PPIV, Zero)
    Name (DTP1, Zero)
    Name (FHPP, Zero)
    Name (WSMI, 0x0D)
    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0xC400)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, One)
    OperationRegion (GNVS, SystemMemory, 0x5BCB9000, 0x0866)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        REVN,   8, 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        W381,   8, 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        MEFE,   8, 
        DSTS,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        IDEM,   8, 
        PLID,   8, 
        BTYP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        ECON,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        VFN5,   8, 
        VFN6,   8, 
        VFN7,   8, 
        VFN8,   8, 
        VFN9,   8, 
        ATMC,   8, 
        PTMC,   8, 
        PNHM,   32, 
        TBAL,   32, 
        TBAH,   32, 
        TSOD,   8, 
        PFLV,   8, 
        BREV,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        DDRF,   8, 
        RTD3,   8, 
        PEP0,   8, 
        DPTF,   8, 
        DCFE,   16, 
        SADE,   8, 
        SACT,   8, 
        SAHT,   8, 
        CPUS,   8, 
        CTDP,   8, 
        FND1,   8, 
        AMBD,   8, 
        AMAT,   8, 
        AMPT,   8, 
        AMCT,   8, 
        AMHT,   8, 
        SKDE,   8, 
        SKAT,   8, 
        SKPT,   8, 
        SKCT,   8, 
        SKHT,   8, 
        EFDE,   8, 
        EFAT,   8, 
        EFPT,   8, 
        EFCT,   8, 
        EFHT,   8, 
        VRDE,   8, 
        VRAT,   8, 
        VRPT,   8, 
        VRCT,   8, 
        VRHT,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        PIDE,   8, 
        TRTV,   8, 
        LPOE,   8, 
        LPOP,   8, 
        LPOS,   8, 
        LPOW,   8, 
        LPER,   8, 
        PPSZ,   32, 
        DISE,   8, 
        BGMA,   64, 
        BGMS,   8, 
        BGIA,   16, 
        IRMC,   8, 
        CHEN,   8, 
        S0ID,   8, 
        CTDB,   8, 
        DKSM,   8, 
        Offset (0x1F4), 
        WRFD,   8, 
        WRAT,   8, 
        WRPT,   8, 
        WRCT,   8, 
        WRHT,   8, 
        PWRE,   8, 
        Offset (0x1FC), 
        PPPR,   16, 
        PBPE,   8, 
        VSPE,   8, 
        RFIM,   8, 
        Offset (0x203), 
        XHPR,   8, 
        GBSX,   8, 
        IUBE,   8, 
        IUCE,   8, 
        IUDE,   8, 
        ECNO,   8, 
        AUDD,   16, 
        IC0D,   16, 
        IC1D,   16, 
        IC1S,   16, 
        VRRD,   16, 
        PSCP,   8, 
        RCG0,   16, 
        RCG1,   16, 
        ECDB,   8, 
        P2ME,   8, 
        P2MK,   8, 
        WIRC,   8, 
        WGRC,   8, 
        WWRC,   8, 
        SSH0,   16, 
        SSL0,   16, 
        SSD0,   16, 
        FMH0,   16, 
        FML0,   16, 
        FMD0,   16, 
        FPH0,   16, 
        FPL0,   16, 
        FPD0,   16, 
        HMH0,   16, 
        HML0,   16, 
        HMD0,   16, 
        Offset (0x23D), 
        SSH1,   16, 
        SSL1,   16, 
        SSD1,   16, 
        FMH1,   16, 
        FML1,   16, 
        FMD1,   16, 
        FPH1,   16, 
        FPL1,   16, 
        FPD1,   16, 
        HMH1,   16, 
        HML1,   16, 
        HMD1,   16, 
        Offset (0x256), 
        SSH2,   16, 
        SSL2,   16, 
        SSD2,   16, 
        FMH2,   16, 
        FML2,   16, 
        FMD2,   16, 
        FPH2,   16, 
        FPL2,   16, 
        FPD2,   16, 
        HMH2,   16, 
        HML2,   16, 
        HMD2,   16, 
        Offset (0x26F), 
        SSH3,   16, 
        SSL3,   16, 
        SSD3,   16, 
        FMH3,   16, 
        FML3,   16, 
        FMD3,   16, 
        FPH3,   16, 
        FPL3,   16, 
        FPD3,   16, 
        HMH3,   16, 
        HML3,   16, 
        HMD3,   16, 
        Offset (0x288), 
        SSH4,   16, 
        SSL4,   16, 
        SSD4,   16, 
        FMH4,   16, 
        FML4,   16, 
        FMD4,   16, 
        FPH4,   16, 
        FPL4,   16, 
        FPD4,   16, 
        HMH4,   16, 
        HML4,   16, 
        HMD4,   16, 
        Offset (0x2A1), 
        SSH5,   16, 
        SSL5,   16, 
        SSD5,   16, 
        FMH5,   16, 
        FML5,   16, 
        FMD5,   16, 
        FPH5,   16, 
        FPL5,   16, 
        FPD5,   16, 
        HMH5,   16, 
        HML5,   16, 
        HMD5,   16, 
        Offset (0x2BA), 
        M0C0,   16, 
        M1C0,   16, 
        M0C1,   16, 
        M1C1,   16, 
        M0C2,   16, 
        M1C2,   16, 
        M0C3,   16, 
        M1C3,   16, 
        M0C4,   16, 
        M1C4,   16, 
        M0C5,   16, 
        M1C5,   16, 
        M0C6,   16, 
        M1C6,   16, 
        M0C7,   16, 
        M1C7,   16, 
        M0C8,   16, 
        M1C8,   16, 
        Offset (0x2DF), 
        M0C9,   16, 
        M1C9,   16, 
        M0CA,   16, 
        M1CA,   16, 
        M0CB,   16, 
        M1CB,   16, 
        Offset (0x2EC), 
        GIRQ,   32, 
        DMTP,   8, 
        DMTD,   8, 
        DMSH,   8, 
        SHSB,   8, 
        PLCS,   8, 
        PLVL,   16, 
        WWSD,   8, 
        CVSD,   8, 
        SSDD,   8, 
        INLD,   8, 
        IFAT,   8, 
        IFPT,   8, 
        IFCT,   8, 
        IFHT,   8, 
        USBH,   8, 
        BCV4,   8, 
        WTV0,   8, 
        WTV1,   8, 
        APFU,   8, 
        Offset (0x30A), 
        PEPC,   32, 
        PB1E,   8, 
        GNID,   8, 
        WAND,   8, 
        WWAT,   8, 
        WWPT,   8, 
        WWCT,   8, 
        WWHT,   8, 
        Offset (0x327), 
        MPL0,   16, 
        CHGE,   8, 
        SAC3,   8, 
        AMC3,   8, 
        SKC3,   8, 
        EFC3,   8, 
        VRC3,   8, 
        WLC3,   8, 
        IFC3,   8, 
        WWC3,   8, 
        WGC3,   8, 
        SPST,   8, 
        CA2D,   8, 
        ECLP,   8, 
        SSP1,   8, 
        SSP2,   8, 
        SSP3,   8, 
        SSP4,   8, 
        SSP5,   8, 
        SGE1,   8, 
        SAT1,   8, 
        SPT1,   8, 
        SCT1,   8, 
        SC31,   8, 
        SHT1,   8, 
        SGE2,   8, 
        SAT2,   8, 
        SPT2,   8, 
        SCT2,   8, 
        SC32,   8, 
        SHT2,   8, 
        VSP1,   8, 
        V1AT,   8, 
        V1PV,   8, 
        V1CR,   8, 
        V1C3,   8, 
        V1HT,   8, 
        VSP2,   8, 
        V2AT,   8, 
        V2PV,   8, 
        V2CR,   8, 
        V2C3,   8, 
        V2HT,   8, 
        S1DE,   8, 
        S1AT,   8, 
        S1PT,   8, 
        S1CT,   8, 
        S1HT,   8, 
        S2DE,   8, 
        S2AT,   8, 
        S2PT,   8, 
        S2CT,   8, 
        S2HT,   8, 
        S3DE,   8, 
        S3AT,   8, 
        S3PT,   8, 
        S3CT,   8, 
        S3HT,   8, 
        S4DE,   8, 
        S4AT,   8, 
        S4PT,   8, 
        S4CT,   8, 
        S4HT,   8, 
        S5DE,   8, 
        S5AT,   8, 
        S5PT,   8, 
        S5CT,   8, 
        S5HT,   8, 
        S1S3,   8, 
        S2S3,   8, 
        S3S3,   8, 
        S4S3,   8, 
        S5S3,   8, 
        Offset (0x378), 
        PSME,   8, 
        PDT1,   8, 
        PLM1,   32, 
        PTW1,   32, 
        PDT2,   8, 
        PLM2,   32, 
        PTW2,   32, 
        DDT1,   8, 
        DDP1,   8, 
        DLI1,   16, 
        DPL1,   16, 
        DTW1,   32, 
        DMI1,   16, 
        DMA1,   16, 
        DMT1,   16, 
        DDT2,   8, 
        DDP2,   8, 
        DLI2,   16, 
        DPL2,   16, 
        DTW2,   32, 
        DMI2,   16, 
        DMA2,   16, 
        DMT2,   16, 
        WIFE,   8, 
        DOM1,   8, 
        LIM1,   16, 
        TIM1,   32, 
        DOM2,   8, 
        LIM2,   16, 
        TIM2,   32, 
        DOM3,   8, 
        LIM3,   16, 
        TIM3,   32, 
        TRD0,   8, 
        TRL0,   8, 
        TRD1,   8, 
        TRL1,   8, 
        WDM1,   8, 
        CID1,   16, 
        WDM2,   8, 
        CID2,   16, 
        Offset (0x3FA), 
        APPE,   8, 
        MPL1,   16, 
        MPL2,   16, 
        SDS0,   8, 
        SDS1,   8, 
        SDS2,   8, 
        SDS3,   8, 
        SDS4,   8, 
        SDS5,   8, 
        SDS6,   8, 
        SDS7,   8, 
        SDS8,   8, 
        SDS9,   8, 
        SDSA,   8, 
        WTVX,   8, 
        WITX,   8, 
        GPTD,   8, 
        GDBT,   16, 
        UTKX,   8, 
        SPTD,   8, 
        Offset (0x429), 
        ATLB,   32, 
        SDM0,   8, 
        SDM1,   8, 
        SDM2,   8, 
        SDM3,   8, 
        SDM4,   8, 
        SDM5,   8, 
        SDM6,   8, 
        SDM7,   8, 
        SDM8,   8, 
        SDM9,   8, 
        SDMA,   8, 
        SDMB,   8, 
        Offset (0x43B), 
        USTP,   8, 
        Offset (0x465), 
        GFPS,   32, 
        GFPI,   32, 
        GNSC,   8, 
        GGNR,   32, 
        GBTK,   32, 
        GBTI,   32, 
        GPDI,   32, 
        GPLI,   32, 
        DBUS,   8, 
        CL00,   8, 
        CL01,   8, 
        CL02,   8, 
        CL03,   8, 
        L0EN,   8, 
        L1EN,   8, 
        L2EN,   8, 
        L3EN,   8, 
        CDIV,   8, 
        C0VE,   8, 
        C0TP,   8, 
        C0CV,   8, 
        C0IC,   32, 
        C0GP,   8, 
        C0IB,   8, 
        C0IA,   16, 
        C0P0,   8, 
        C0P1,   8, 
        C0P2,   8, 
        C0P3,   8, 
        C0G0,   8, 
        C0G1,   8, 
        C0G2,   8, 
        C0G3,   8, 
        C0F0,   8, 
        C0F1,   8, 
        C0F2,   8, 
        C0F3,   8, 
        C0A0,   8, 
        C0A1,   8, 
        C0A2,   8, 
        C0A3,   8, 
        C0I0,   8, 
        C0I1,   8, 
        C0I2,   8, 
        C0I3,   8, 
        C0PL,   8, 
        C0W0,   8, 
        C0W1,   8, 
        C0W2,   8, 
        C0W3,   8, 
        C0SP,   8, 
        C0W4,   8, 
        C0W5,   8, 
        C0CS,   8, 
        C1VE,   8, 
        C1TP,   8, 
        C1CV,   8, 
        C1IC,   32, 
        C1GP,   8, 
        C1IB,   8, 
        C1IA,   16, 
        C1P0,   8, 
        C1P1,   8, 
        C1P2,   8, 
        C1P3,   8, 
        C1G0,   8, 
        C1G1,   8, 
        C1G2,   8, 
        C1G3,   8, 
        C1F0,   8, 
        C1F1,   8, 
        C1F2,   8, 
        C1F3,   8, 
        C1A0,   8, 
        C1A1,   8, 
        C1A2,   8, 
        C1A3,   8, 
        C1I0,   8, 
        C1I1,   8, 
        C1I2,   8, 
        C1I3,   8, 
        C1PL,   8, 
        C1W0,   8, 
        C1W1,   8, 
        C1W2,   8, 
        C1W3,   8, 
        C1SP,   8, 
        C1W4,   8, 
        C1W5,   8, 
        C1CS,   8, 
        C2VE,   8, 
        C2TP,   8, 
        C2CV,   8, 
        C2IC,   32, 
        C2GP,   8, 
        C2IB,   8, 
        C2IA,   16, 
        C2P0,   8, 
        C2P1,   8, 
        C2P2,   8, 
        C2P3,   8, 
        C2G0,   8, 
        C2G1,   8, 
        C2G2,   8, 
        C2G3,   8, 
        C2F0,   8, 
        C2F1,   8, 
        C2F2,   8, 
        C2F3,   8, 
        C2A0,   8, 
        C2A1,   8, 
        C2A2,   8, 
        C2A3,   8, 
        C2I0,   8, 
        C2I1,   8, 
        C2I2,   8, 
        C2I3,   8, 
        C2PL,   8, 
        C2W0,   8, 
        C2W1,   8, 
        C2W2,   8, 
        C2W3,   8, 
        C2SP,   8, 
        C2W4,   8, 
        C2W5,   8, 
        C2CS,   8, 
        C3VE,   8, 
        C3TP,   8, 
        C3CV,   8, 
        C3IC,   32, 
        C3GP,   8, 
        C3IB,   8, 
        C3IA,   16, 
        C3P0,   8, 
        C3P1,   8, 
        C3P2,   8, 
        C3P3,   8, 
        C3G0,   8, 
        C3G1,   8, 
        C3G2,   8, 
        C3G3,   8, 
        C3F0,   8, 
        C3F1,   8, 
        C3F2,   8, 
        C3F3,   8, 
        C3A0,   8, 
        C3A1,   8, 
        C3A2,   8, 
        C3A3,   8, 
        C3I0,   8, 
        C3I1,   8, 
        C3I2,   8, 
        C3I3,   8, 
        C3PL,   8, 
        C3W0,   8, 
        C3W1,   8, 
        C3W2,   8, 
        C3W3,   8, 
        C3SP,   8, 
        C3W4,   8, 
        C3W5,   8, 
        C3CS,   8, 
        L0SM,   8, 
        L0H0,   8, 
        L0H1,   8, 
        L0H2,   8, 
        L0H3,   8, 
        L0H4,   8, 
        L0H5,   8, 
        L0H6,   8, 
        L0H7,   8, 
        L0H8,   8, 
        L0PL,   8, 
        L0M0,   8, 
        L0M1,   8, 
        L0M2,   8, 
        L0M3,   8, 
        L0M4,   8, 
        L0M5,   8, 
        L0M6,   8, 
        L0M7,   8, 
        L0M8,   8, 
        L0M9,   8, 
        L0MA,   8, 
        L0MB,   8, 
        L0MC,   8, 
        L0MD,   8, 
        L0ME,   8, 
        L0MF,   8, 
        L0DI,   8, 
        L0BS,   8, 
        L0A0,   16, 
        L0A1,   16, 
        L0A2,   16, 
        L0A3,   16, 
        L0A4,   16, 
        L0A5,   16, 
        L0A6,   16, 
        L0A7,   16, 
        L0A8,   16, 
        L0A9,   16, 
        L0AA,   16, 
        L0AB,   16, 
        L0D0,   8, 
        L0D1,   8, 
        L0D2,   8, 
        L0D3,   8, 
        L0D4,   8, 
        L0D5,   8, 
        L0D6,   8, 
        L0D7,   8, 
        L0D8,   8, 
        L0D9,   8, 
        L0DA,   8, 
        L0DB,   8, 
        L0DV,   8, 
        L0CV,   8, 
        L0LU,   8, 
        L0NL,   8, 
        L0EE,   8, 
        L0VC,   8, 
        L0FS,   8, 
        L0LE,   8, 
        L0DG,   8, 
        L0CK,   32, 
        L0CL,   8, 
        L0PP,   8, 
        L0VR,   8, 
        L1SM,   8, 
        L1H0,   8, 
        L1H1,   8, 
        L1H2,   8, 
        L1H3,   8, 
        L1H4,   8, 
        L1H5,   8, 
        L1H6,   8, 
        L1H7,   8, 
        L1H8,   8, 
        L1PL,   8, 
        L1M0,   8, 
        L1M1,   8, 
        L1M2,   8, 
        L1M3,   8, 
        L1M4,   8, 
        L1M5,   8, 
        L1M6,   8, 
        L1M7,   8, 
        L1M8,   8, 
        L1M9,   8, 
        L1MA,   8, 
        L1MB,   8, 
        L1MC,   8, 
        L1MD,   8, 
        L1ME,   8, 
        L1MF,   8, 
        L1DI,   8, 
        L1BS,   8, 
        L1A0,   16, 
        L1A1,   16, 
        L1A2,   16, 
        L1A3,   16, 
        L1A4,   16, 
        L1A5,   16, 
        L1A6,   16, 
        L1A7,   16, 
        L1A8,   16, 
        L1A9,   16, 
        L1AA,   16, 
        L1AB,   16, 
        L1D0,   8, 
        L1D1,   8, 
        L1D2,   8, 
        L1D3,   8, 
        L1D4,   8, 
        L1D5,   8, 
        L1D6,   8, 
        L1D7,   8, 
        L1D8,   8, 
        L1D9,   8, 
        L1DA,   8, 
        L1DB,   8, 
        L1DV,   8, 
        L1CV,   8, 
        L1LU,   8, 
        L1NL,   8, 
        L1EE,   8, 
        L1VC,   8, 
        L1FS,   8, 
        L1LE,   8, 
        L1DG,   8, 
        L1CK,   32, 
        L1CL,   8, 
        L1PP,   8, 
        L1VR,   8, 
        L2SM,   8, 
        L2H0,   8, 
        L2H1,   8, 
        L2H2,   8, 
        L2H3,   8, 
        L2H4,   8, 
        L2H5,   8, 
        L2H6,   8, 
        L2H7,   8, 
        L2H8,   8, 
        L2PL,   8, 
        L2M0,   8, 
        L2M1,   8, 
        L2M2,   8, 
        L2M3,   8, 
        L2M4,   8, 
        L2M5,   8, 
        L2M6,   8, 
        L2M7,   8, 
        L2M8,   8, 
        L2M9,   8, 
        L2MA,   8, 
        L2MB,   8, 
        L2MC,   8, 
        L2MD,   8, 
        L2ME,   8, 
        L2MF,   8, 
        L2DI,   8, 
        L2BS,   8, 
        L2A0,   16, 
        L2A1,   16, 
        L2A2,   16, 
        L2A3,   16, 
        L2A4,   16, 
        L2A5,   16, 
        L2A6,   16, 
        L2A7,   16, 
        L2A8,   16, 
        L2A9,   16, 
        L2AA,   16, 
        L2AB,   16, 
        L2D0,   8, 
        L2D1,   8, 
        L2D2,   8, 
        L2D3,   8, 
        L2D4,   8, 
        L2D5,   8, 
        L2D6,   8, 
        L2D7,   8, 
        L2D8,   8, 
        L2D9,   8, 
        L2DA,   8, 
        L2DB,   8, 
        L2DV,   8, 
        L2CV,   8, 
        L2LU,   8, 
        L2NL,   8, 
        L2EE,   8, 
        L2VC,   8, 
        L2FS,   8, 
        L2LE,   8, 
        L2DG,   8, 
        L2CK,   32, 
        L2CL,   8, 
        L2PP,   8, 
        L2VR,   8, 
        L3SM,   8, 
        L3H0,   8, 
        L3H1,   8, 
        L3H2,   8, 
        L3H3,   8, 
        L3H4,   8, 
        L3H5,   8, 
        L3H6,   8, 
        L3H7,   8, 
        L3H8,   8, 
        L3PL,   8, 
        L3M0,   8, 
        L3M1,   8, 
        L3M2,   8, 
        L3M3,   8, 
        L3M4,   8, 
        L3M5,   8, 
        L3M6,   8, 
        L3M7,   8, 
        L3M8,   8, 
        L3M9,   8, 
        L3MA,   8, 
        L3MB,   8, 
        L3MC,   8, 
        L3MD,   8, 
        L3ME,   8, 
        L3MF,   8, 
        L3DI,   8, 
        L3BS,   8, 
        L3A0,   16, 
        L3A1,   16, 
        L3A2,   16, 
        L3A3,   16, 
        L3A4,   16, 
        L3A5,   16, 
        L3A6,   16, 
        L3A7,   16, 
        L3A8,   16, 
        L3A9,   16, 
        L3AA,   16, 
        L3AB,   16, 
        L3D0,   8, 
        L3D1,   8, 
        L3D2,   8, 
        L3D3,   8, 
        L3D4,   8, 
        L3D5,   8, 
        L3D6,   8, 
        L3D7,   8, 
        L3D8,   8, 
        L3D9,   8, 
        L3DA,   8, 
        L3DB,   8, 
        L3DV,   8, 
        L3CV,   8, 
        L3LU,   8, 
        L3NL,   8, 
        L3EE,   8, 
        L3VC,   8, 
        L3FS,   8, 
        L3LE,   8, 
        L3DG,   8, 
        L3CK,   32, 
        L3CL,   8, 
        L3PP,   8, 
        L3VR,   8, 
        Offset (0x672), 
        ECR1,   8, 
        I2SC,   8, 
        I2SI,   32, 
        I2SB,   8, 
        ODV0,   8, 
        ODV1,   8, 
        ODV2,   8, 
        ODV3,   8, 
        ODV4,   8, 
        ODV5,   8, 
        UBCB,   32, 
        Offset (0x688), 
        WIFC,   8, 
        Offset (0x690), 
        TPLT,   8, 
        TPLM,   8, 
        TPLB,   8, 
        TPLH,   16, 
        TPLS,   8, 
        TPDT,   8, 
        TPDM,   8, 
        TPDB,   8, 
        TPDH,   16, 
        TPDS,   8, 
        FPTT,   8, 
        FPTM,   8, 
        ADPM,   32, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        HEFE,   8, 
        XDCE,   8, 
        STXE,   8, 
        ST10,   8, 
        ST11,   8, 
        ST12,   8, 
        ST13,   8, 
        ST14,   8, 
        ST15,   8, 
        ST16,   8, 
        ST17,   8, 
        ST18,   8, 
        ST19,   8, 
        ENVM,   8, 
        DHSP,   16, 
        DSSP,   16, 
        DSTP,   8, 
        WRFE,   8, 
        WRC1,   8, 
        WRC2,   8, 
        WRC3,   8, 
        WRC4,   8, 
        AWVI,   32, 
        STDE,   8, 
        STRS,   8, 
        ST20,   8, 
        ST21,   8, 
        ST22,   8, 
        ST23,   8, 
        ST24,   8, 
        ST25,   8, 
        ST26,   8, 
        ST27,   8, 
        ST28,   8, 
        ST29,   8, 
        ST30,   8, 
        ST31,   8, 
        ST32,   8, 
        ST33,   8, 
        ST34,   8, 
        ST35,   8, 
        ST36,   8, 
        ST37,   8, 
        ST38,   8, 
        ST39,   8, 
        ST40,   8, 
        ST41,   8, 
        ST42,   8, 
        ST43,   8, 
        ST44,   8, 
        ST45,   8, 
        ST46,   8, 
        ST47,   8, 
        ST48,   8, 
        ST49,   8, 
        SD11,   8, 
        SD12,   8, 
        SD13,   8, 
        SD14,   8, 
        SD15,   8, 
        SD16,   8, 
        SD21,   8, 
        SD22,   8, 
        SD23,   8, 
        SD24,   8, 
        SD25,   8, 
        SD26,   8, 
        SD31,   8, 
        SD32,   8, 
        SD33,   8, 
        SD34,   8, 
        SD35,   8, 
        SD36,   8, 
        Offset (0x732), 
        SDAA,   8, 
        SDAB,   8, 
        BTSE,   8, 
        BTBR,   8, 
        BED2,   8, 
        BED3,   8, 
        BTLE,   8, 
        Offset (0x73D), 
        COEM,   8, 
        RTVM,   8, 
        USTC,   8, 
        UTCE,   8, 
        HEB1,   32, 
        BATP,   8, 
        TSDB,   8, 
        Offset (0x749), 
        RBY1,   8, 
        RBY2,   8, 
        SCSS,   8, 
        NCTC,   8, 
        NCTI,   8, 
        NCTH,   8, 
        HSIO,   8, 
        ZPOD,   8, 
        RGBC,   8, 
        DPTC,   8, 
        SRSP,   32, 
        CEDS,   8, 
        EHK3,   8, 
        EHK4,   8, 
        EHK5,   8, 
        EHK6,   8, 
        EHK7,   8, 
        EHK8,   8, 
        VBVP,   8, 
        VBVD,   8, 
        VBHB,   8, 
        VBRL,   8, 
        SMSS,   8, 
        ADAS,   8, 
        PPBG,   32, 
        AEAB,   8, 
        AHDB,   8, 
        DPLL,   8, 
        DPHL,   8, 
        PWIG,   8, 
        Offset (0x77D), 
        WTSP,   8, 
        ELPM,   32, 
        ELPS,   32, 
        WGWS,   8, 
        UCSI,   8, 
        UCG1,   32, 
        UCG2,   32, 
        UCG3,   32, 
        UCG4,   32, 
        Offset (0x7A7), 
        SRLD,   8, 
        TTUP,   8, 
        TP1T,   8, 
        TP1P,   8, 
        TP1D,   8, 
        TP2T,   8, 
        TP2P,   8, 
        TP2D,   8, 
        TP3T,   8, 
        TP3P,   8, 
        TP3D,   8, 
        TP4T,   8, 
        TP4P,   8, 
        TP4D,   8, 
        TP5T,   8, 
        TP5P,   8, 
        TP5D,   8, 
        TP6T,   8, 
        TP6P,   8, 
        TP6D,   8, 
        UDGF,   8, 
        UDUP,   8, 
        DBGF,   8, 
        DBUP,   8, 
        XSMI,   32, 
        GSEN,   8, 
        ATDV,   8, 
        BTL2,   8, 
        BTLL,   8, 
        POME,   8, 
        Offset (0x834), 
        MXD1,   32, 
        MXD2,   32, 
        MXD3,   32, 
        MXD4,   32, 
        MXD5,   32, 
        MXD6,   32, 
        MXD7,   32, 
        MXD8,   32, 
        PXFD,   8, 
        EBAS,   32, 
        DGVS,   32, 
        DGVB,   32, 
        HYSS,   32, 
        NVAF,   8
    }

    OperationRegion (DGNA, SystemMemory, 0x5BCBD018, 0x103D)
    Field (DGNA, AnyAcc, Lock, Preserve)
    {
        Offset (0x08), 
        WBUF,   32768
    }

    Field (DGNA, AnyAcc, Lock, Preserve)
    {
        WCMD,   32, 
        WDID,   32, 
        WCCL,   16, 
        WCSE,   16, 
        WCA1,   32, 
        WCA2,   32, 
        WCA3,   32, 
        WCA4,   32, 
        WCR1,   32, 
        WCR2,   32, 
        WCR3,   32, 
        WCR4,   32, 
        WCAA,   32, 
        WCBL,   32, 
        WBUX,   32704, 
        ECSW,   8, 
        GPUF,   8, 
        THML,   8, 
        S3FL,   8, 
        WORG,   8, 
        BRID,   8, 
        WATL,   8, 
        WATH,   8, 
        QCKS,   8, 
        PERS,   8, 
        ECOS,   8, 
        ACSS,   8, 
        WUSB,   8, 
        BUF1,   16, 
        BUF2,   16
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PD00, Package (0x25)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x2E)
        {
            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                One, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR01, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR03, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR10, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR11, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR14, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR15, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR18, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR19, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR1A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR1B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR1C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PD1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR1D, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PD1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR1E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PD1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR1F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PD17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR17, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                D1F2,   1, 
                D1F1,   1, 
                D1F0,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                PMLK,   1, 
                    ,   3, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xDFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xE0000000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y0F, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC800000,         // Range Minimum
                    0xFE7FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Name (EP_B, Zero)
            Name (MH_B, Zero)
            Name (PC_B, Zero)
            Name (PC_L, Zero)
            Name (DM_B, Zero)
            Method (GEPB, 0, Serialized)
            {
                If ((EP_B == Zero))
                {
                    EP_B = (EPBR << 0x0C)
                }

                Return (EP_B) /* \_SB_.PCI0.EP_B */
            }

            Method (GMHB, 0, Serialized)
            {
                If ((MH_B == Zero))
                {
                    MH_B = (MHBR << 0x0F)
                }

                Return (MH_B) /* \_SB_.PCI0.MH_B */
            }

            Method (GPCB, 0, Serialized)
            {
                If ((PC_B == Zero))
                {
                    PC_B = (PXBR << 0x1A)
                }

                Return (PC_B) /* \_SB_.PCI0.PC_B */
            }

            Method (GPCL, 0, Serialized)
            {
                If ((PC_L == Zero))
                {
                    PC_L = (0x10000000 >> PXSZ) /* \_SB_.PCI0.PXSZ */
                }

                Return (PC_L) /* \_SB_.PCI0.PC_L */
            }

            Method (GDMB, 0, Serialized)
            {
                If ((DM_B == Zero))
                {
                    DM_B = (DIBR << 0x0C)
                }

                Return (DM_B) /* \_SB_.PCI0.DM_B */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = GPCL ()
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                PBMX = ((Local0 >> 0x14) - 0x02)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                PBLN = ((Local0 >> 0x14) - One)
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    C0LN = Zero
                }

                If ((PM1L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    C0RW = Zero
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    C4LN = Zero
                }

                If ((PM1H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    C4RW = Zero
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    C8LN = Zero
                }

                If ((PM2L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    C8RW = Zero
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    CCLN = Zero
                }

                If ((PM2H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    CCRW = Zero
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    D0LN = Zero
                }

                If ((PM3L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    D0RW = Zero
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    D4LN = Zero
                }

                If ((PM3H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    D4RW = Zero
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    D8LN = Zero
                }

                If ((PM4L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    D8RW = Zero
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    DCLN = Zero
                }

                If ((PM4H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    DCRW = Zero
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    E0LN = Zero
                }

                If ((PM5L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    E0RW = Zero
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    E4LN = Zero
                }

                If ((PM5H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    E4RW = Zero
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    E8LN = Zero
                }

                If ((PM6L == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    E8RW = Zero
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    ECLN = Zero
                }

                If ((PM6H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    ECRW = Zero
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    F0LN = Zero
                }

                If ((PM0H == One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    F0RW = Zero
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                M1LN = M32L /* External reference */
                M1MN = M32B /* External reference */
                M1MX = ((M1MN + M1LN) - One)
                If ((M64L == Zero))
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, MSLN)  // _LEN: Length
                    MSLN = Zero
                }
                Else
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, M2LN)  // _LEN: Length
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MAX, M2MX)  // _MAX: Maximum Base Address
                    M2LN = M64L /* External reference */
                    M2MN = M64B /* External reference */
                    M2MX = ((M2MN + M2LN) - One)
                }

                Return (BUF0) /* \_SB_.PCI0.BUF0 */
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If ((Arg0 == GUID))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (!NEXP)
                    {
                        CTRL &= 0xFFFFFFF8
                    }

                    If ((TBTS == One))
                    {
                        CTRL &= 0xFFFFFFF7
                    }

                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }

            Scope (\_SB.PCI0)
            {
                Device (GFX0)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                }

                Device (B0D4)
                {
                    Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                    {
                        If (PCIC (Arg0))
                        {
                            Return (PCID (Arg0, Arg1, Arg2, Arg3))
                        }

                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }

                    Name (_ADR, 0x00040000)  // _ADR: Address
                }

                Device (IPU0)
                {
                    Name (_ADR, 0x00050000)  // _ADR: Address
                }
            }

            Scope (\_SB.PCI0)
            {
                Name (PALK, Zero)
                Name (PA0H, Zero)
                Name (PA1H, Zero)
                Name (PA1L, Zero)
                Name (PA2H, Zero)
                Name (PA2L, Zero)
                Name (PA3H, Zero)
                Name (PA3L, Zero)
                Name (PA4H, Zero)
                Name (PA4L, Zero)
                Name (PA5H, Zero)
                Name (PA5L, Zero)
                Name (PA6H, Zero)
                Name (PA6L, Zero)
                Method (NPTS, 1, NotSerialized)
                {
                    PA0H = PM0H /* \_SB_.PCI0.PM0H */
                    PALK = PMLK /* \_SB_.PCI0.PMLK */
                    PA1H = PM1H /* \_SB_.PCI0.PM1H */
                    PA1L = PM1L /* \_SB_.PCI0.PM1L */
                    PA2H = PM2H /* \_SB_.PCI0.PM2H */
                    PA2L = PM2L /* \_SB_.PCI0.PM2L */
                    PA3H = PM3H /* \_SB_.PCI0.PM3H */
                    PA3L = PM3L /* \_SB_.PCI0.PM3L */
                    PA4H = PM4H /* \_SB_.PCI0.PM4H */
                    PA4L = PM4L /* \_SB_.PCI0.PM4L */
                    PA5H = PM5H /* \_SB_.PCI0.PM5H */
                    PA5L = PM5L /* \_SB_.PCI0.PM5L */
                    PA6H = PM6H /* \_SB_.PCI0.PM6H */
                    PA6L = PM6L /* \_SB_.PCI0.PM6L */
                }

                Method (NWAK, 1, NotSerialized)
                {
                    PM0H = PA0H /* \_SB_.PCI0.PA0H */
                    PM1H = PA1H /* \_SB_.PCI0.PA1H */
                    PM1L = PA1L /* \_SB_.PCI0.PA1L */
                    PM2H = PA2H /* \_SB_.PCI0.PA2H */
                    PM2L = PA2L /* \_SB_.PCI0.PA2L */
                    PM3H = PA3H /* \_SB_.PCI0.PA3H */
                    PM3L = PA3L /* \_SB_.PCI0.PA3L */
                    PM4H = PA4H /* \_SB_.PCI0.PA4H */
                    PM4L = PA4L /* \_SB_.PCI0.PA4L */
                    PM5H = PA5H /* \_SB_.PCI0.PA5H */
                    PM5L = PA5L /* \_SB_.PCI0.PA5L */
                    PM6H = PA6H /* \_SB_.PCI0.PA6H */
                    PM6L = PA6L /* \_SB_.PCI0.PA6L */
                    PMLK = PALK /* \_SB_.PCI0.PALK */
                }
            }

            Device (PEG0)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01) /* \_SB_.AR01 */
                    }

                    Return (PD01) /* \_SB_.PD01 */
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (PWAK, 1, Serialized)
                    {
                        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
                        {
                            If ((NVAF == One))
                            {
                                NHDA = One
                            }
                            Else
                            {
                                NHDA = Zero
                            }
                        }
                    }
                }
            }

            Device (PEG1)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR02) /* \_SB_.AR02 */
                    }

                    Return (PD02) /* \_SB_.PD02 */
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (PEG2)
            {
                Name (_ADR, 0x00010002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR03) /* \_SB_.AR03 */
                    }

                    Return (PD03) /* \_SB_.PD03 */
                }

                Device (PEGP)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Method (SPTS, 1, NotSerialized)
                {
                    SLPX = One
                    SLPE = One
                }

                Method (SWAK, 1, NotSerialized)
                {
                    SLPE = Zero
                    If (RTCS){}
                    Else
                    {
                        Notify (PWRB, 0x02) // Device Wake
                    }
                }

                OperationRegion (SMIE, SystemIO, PMBA, 0x04)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   3, 
                    PEXS,   1, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SLPR, SystemIO, SMCR, 0x08)
                Field (SLPR, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    SLPE,   1, 
                        ,   31, 
                    SLPX,   1, 
                    Offset (0x08)
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP01._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP01.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR08) /* \_SB_.AR08 */
                    }

                    Return (PD08) /* \_SB_.PD08 */
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP02._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP02.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR09) /* \_SB_.AR09 */
                    }

                    Return (PD09) /* \_SB_.PD09 */
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP03._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP03.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0A) /* \_SB_.AR0A */
                    }

                    Return (PD0A) /* \_SB_.PD0A */
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP04._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP04.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0B) /* \_SB_.AR0B */
                    }

                    Return (PD0B) /* \_SB_.PD0B */
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP05._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP05.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0C) /* \_SB_.AR0C */
                    }

                    Return (PD0C) /* \_SB_.PD0C */
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP06._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP06.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0D) /* \_SB_.AR0D */
                    }

                    Return (PD0D) /* \_SB_.PD0D */
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP07._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP07.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0E) /* \_SB_.AR0E */
                    }

                    Return (PD0E) /* \_SB_.PD0E */
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP08._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP08.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR0F) /* \_SB_.AR0F */
                    }

                    Return (PD0F) /* \_SB_.PD0F */
                }
            }

            Device (RP09)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP09._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP09.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR10) /* \_SB_.AR10 */
                    }

                    Return (PD10) /* \_SB_.PD10 */
                }
            }

            Device (RP10)
            {
                Name (_ADR, 0x001D0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP10._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP10.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR11) /* \_SB_.AR11 */
                    }

                    Return (PD11) /* \_SB_.PD11 */
                }
            }

            Device (RP11)
            {
                Name (_ADR, 0x001D0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP11._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP11.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR12) /* \_SB_.AR12 */
                    }

                    Return (PD12) /* \_SB_.PD12 */
                }
            }

            Device (RP12)
            {
                Name (_ADR, 0x001D0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP12._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP12.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR13) /* \_SB_.AR13 */
                    }

                    Return (PD13) /* \_SB_.PD13 */
                }
            }

            Device (RP13)
            {
                Name (_ADR, 0x001D0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP13._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP13.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR14) /* \_SB_.AR14 */
                    }

                    Return (PD14) /* \_SB_.PD14 */
                }
            }

            Device (RP14)
            {
                Name (_ADR, 0x001D0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP14._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP14.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR15) /* \_SB_.AR15 */
                    }

                    Return (PD15) /* \_SB_.PD15 */
                }
            }

            Device (RP15)
            {
                Name (_ADR, 0x001D0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP15._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP15.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR16) /* \_SB_.AR16 */
                    }

                    Return (PD16) /* \_SB_.PD16 */
                }
            }

            Device (RP17)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP17._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP17.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR18) /* \_SB_.AR18 */
                    }

                    Return (PD18) /* \_SB_.PD18 */
                }
            }

            Device (RP18)
            {
                Name (_ADR, 0x001B0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP18._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP18.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR19) /* \_SB_.AR19 */
                    }

                    Return (PD19) /* \_SB_.PD19 */
                }
            }

            Device (RP19)
            {
                Name (_ADR, 0x001B0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP19._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP19.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1A) /* \_SB_.AR1A */
                    }

                    Return (PD1A) /* \_SB_.PD1A */
                }
            }

            Device (RP20)
            {
                Name (_ADR, 0x001B0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP20._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP20.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1B) /* \_SB_.AR1B */
                    }

                    Return (PD1B) /* \_SB_.PD1B */
                }
            }

            Device (RP21)
            {
                Name (_ADR, 0x001B0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP21._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP21.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1C) /* \_SB_.AR1C */
                    }

                    Return (PD1C) /* \_SB_.PD1C */
                }
            }

            Device (RP22)
            {
                Name (_ADR, 0x001B0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP22._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP22.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1D) /* \_SB_.AR1D */
                    }

                    Return (PD1D) /* \_SB_.PD1D */
                }
            }

            Device (RP23)
            {
                Name (_ADR, 0x001B0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP23._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP23.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1E) /* \_SB_.AR1E */
                    }

                    Return (PD1E) /* \_SB_.PD1E */
                }
            }

            Device (RP24)
            {
                Name (_ADR, 0x001B0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP24._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP24.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x69, 0x04))
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (((VDID != 0xFFFFFFFF) && (PMSX == One)))
                    {
                        Notify (PXSX, 0x02) // Device Wake
                        PMSX = One
                        PSPX = One
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR1F) /* \_SB_.AR1F */
                    }

                    Return (PD1F) /* \_SB_.PD1F */
                }
            }

            Device (RP16)
            {
                Name (_ADR, 0x001D0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, Zero, 0x0480)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x50), 
                    L0SE,   1, 
                    Offset (0x52), 
                        ,   13, 
                    LASX,   1, 
                    Offset (0x5A), 
                        ,   3, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PSPX,   1, 
                    Offset (0xD8), 
                        ,   30, 
                    HPEX,   1, 
                    PMEX,   1, 
                    Offset (0xE0), 
                        ,   7, 
                    NCB7,   1, 
                    Offset (0xE2), 
                        ,   2, 
                    L23E,   1, 
                    L23R,   1, 
                    Offset (0x420), 
                        ,   30, 
                    DPGE,   1
                }

                Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
                {
                    Offset (0xDC), 
                        ,   30, 
                    HPSX,   1, 
                    PMSX,   1
                }

                Method (L23D, 0, Serialized)
                {
                    If ((NCB7 != One))
                    {
                        Return (Zero)
                    }

                    DPGE = Zero
                    L23R = One
                    Local0 = Zero
                    While (L23R)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = Zero
                    DPGE = One
                    Local0 = Zero
                    While ((LASX == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }
                }

                Method (DL23, 0, Serialized)
                {
                    L23E = One
                    Sleep (0x10)
                    Local0 = Zero
                    While (L23E)
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    NCB7 = One
                }

                Name (LTRV, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Name (OPTS, Buffer (0x02)
                                {
                                     0x00, 0x00                                       // ..
                                })
                                CreateBitField (OPTS, Zero, FUN0)
                                CreateBitField (OPTS, 0x04, FUN4)
                                CreateBitField (OPTS, 0x06, FUN6)
                                CreateBitField (OPTS, 0x08, FUN8)
                                CreateBitField (OPTS, 0x09, FUN9)
                                If ((Arg1 >= 0x02))
                                {
                                    FUN0 = One
                                    If (LTRE)
                                    {
                                        FUN6 = One
                                    }

                                    If (CondRefOf (ECR1))
                                    {
                                        If ((ECR1 == One))
                                        {
                                            If ((Arg1 >= 0x03))
                                            {
                                                FUN8 = One
                                                FUN9 = One
                                            }
                                        }
                                    }
                                }

                                Return (OPTS) /* \_SB_.PCI0.RP16._DSM.OPTS */
                            }
                            Case (0x06)
                            {
                                If ((Arg1 >= 0x02))
                                {
                                    If (LTRZ)
                                    {
                                        If (((LMSL == Zero) || (LNSL == Zero)))
                                        {
                                            If ((PCHS == PCHH))
                                            {
                                                LMSL = 0x0846
                                                LNSL = 0x0846
                                            }
                                            ElseIf ((PCHS == PCHL))
                                            {
                                                LMSL = 0x1003
                                                LNSL = 0x1003
                                            }
                                        }

                                        LTRV [Zero] = ((LMSL >> 0x0A) & 0x07)
                                        LTRV [One] = (LMSL & 0x03FF)
                                        LTRV [0x02] = ((LNSL >> 0x0A) & 0x07)
                                        LTRV [0x03] = (LNSL & 0x03FF)
                                        Return (LTRV) /* \_SB_.PCI0.RP16.LTRV */
                                    }
                                    Else
                                    {
                                        Return (Zero)
                                    }
                                }
                            }
                            Case (0x08)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (One)
                                        }
                                    }
                                }
                            }
                            Case (0x09)
                            {
                                If (CondRefOf (ECR1))
                                {
                                    If ((ECR1 == One))
                                    {
                                        If ((Arg1 >= 0x03))
                                        {
                                            Return (Package (0x05)
                                            {
                                                0xC350, 
                                                Ones, 
                                                Ones, 
                                                0xC350, 
                                                Ones
                                            })
                                        }
                                    }
                                }
                            }

                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Device (PXSX)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (Package (0x02)
                        {
                            0x69, 
                            Zero
                        })
                    }
                }

                Method (HPME, 0, Serialized)
                {
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR17) /* \_SB_.AR17 */
                    }

                    Return (PD17) /* \_SB_.PD17 */
                }
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            TPTS (Arg0)
            \_SB.TPM.TPTS (Arg0)
            RPTS (Arg0)
            \_SB.PCI0.LPCB.SPTS (Arg0)
            \_SB.PCI0.NPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        \_SB.PCI0.NWAK (Arg0)
        \_SB.PCI0.PEG0.PEGP.PWAK (Arg0)
        \_SB.PCI0.LPCB.SWAK (Arg0)
        RWAK (Arg0)
        TPWK (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_SB)
    {
        Processor (PR00, 0x01, 0x00001810, 0x06){}
        Processor (PR01, 0x02, 0x00001810, 0x06){}
        Processor (PR02, 0x03, 0x00001810, 0x06){}
        Processor (PR03, 0x04, 0x00001810, 0x06){}
        Processor (PR04, 0x05, 0x00001810, 0x06){}
        Processor (PR05, 0x06, 0x00001810, 0x06){}
        Processor (PR06, 0x07, 0x00001810, 0x06){}
        Processor (PR07, 0x08, 0x00001810, 0x06){}
        Processor (PR08, 0x09, 0x00001810, 0x06){}
        Processor (PR09, 0x0A, 0x00001810, 0x06){}
        Processor (PR10, 0x0B, 0x00001810, 0x06){}
        Processor (PR11, 0x0C, 0x00001810, 0x06){}
        Processor (PR12, 0x0D, 0x00001810, 0x06){}
        Processor (PR13, 0x0E, 0x00001810, 0x06){}
        Processor (PR14, 0x0F, 0x00001810, 0x06){}
        Processor (PR15, 0x10, 0x00001810, 0x06){}
    }

    Scope (_SB.PR00)
    {
        Name (CPC2, Package (0x15)
        {
            0x15, 
            0x02, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
        Name (CPOC, Package (0x15)
        {
            0x15, 
            0x02, 
            0xFF, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x00000000000000CE, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000771, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x10,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x08,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (SystemMemory, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E7, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000000000E8, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x02,               // Bit Width
                    0x01,               // Bit Offset
                    0x0000000000000777, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x01,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000770, // Address
                    0x04,               // Access Size
                    )
            }, 

            One, 
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x0A,               // Bit Width
                    0x20,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x08,               // Bit Width
                    0x18,               // Bit Offset
                    0x0000000000000774, // Address
                    0x04,               // Access Size
                    )
            }, 

            Zero
        })
    }

    Scope (_SB)
    {
        Device (PAGD)
        {
            Name (_HID, "ACPI000C" /* Processor Aggregator Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Processor Aggregator Device"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_PUR, Package (0x02)  // _PUR: Processor Utilization Request
            {
                One, 
                Zero
            })
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y10)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y11)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y12)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y13)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y14)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y10._BAS, MBR0)  // _BAS: Base Address
                MBR0 = GMHB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._BAS, DBR0)  // _BAS: Base Address
                DBR0 = GDMB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, EBR0)  // _BAS: Base Address
                EBR0 = GEPB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._BAS, XBR0)  // _BAS: Base Address
                XBR0 = GPCB ()
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._LEN, XSZ0)  // _LEN: Length
                XSZ0 = GPCL ()
                If (!HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._BAS, HBAS)  // _BAS: Base Address
                    CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._LEN, HLEN)  // _LEN: Length
                    HBAS = HPTB /* \HPTB */
                    HLEN = 0x0400
                }

                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DIDX & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD1F, Arg0)
        }
    }

    If ((ECR1 == One))
    {
        Scope (_SB.PCI0)
        {
            Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
            Method (PCID, 4, Serialized)
            {
                If ((Arg0 == PCIG))
                {
                    If ((Arg1 >= 0x03))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x01, 0x03                                       // ..
                            })
                        }

                        If ((Arg2 == 0x08))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == One))
            {
                If ((Arg0 == PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }

        Method (IICB, 2, Serialized)
        {
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, _Y15, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PCI0.IICB._Y15._ADR, DAD0)  // _ADR: Address
                    DAD0 = Arg0
                    Return (IIC0) /* \_SB_.PCI0.IICB.IIC0 */
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, _Y16, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PCI0.IICB._Y16._ADR, DAD1)  // _ADR: Address
                    DAD1 = Arg0
                    Return (IIC1) /* \_SB_.PCI0.IICB.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, _Y17, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PCI0.IICB._Y17._ADR, DAD2)  // _ADR: Address
                    DAD2 = Arg0
                    Return (IIC2) /* \_SB_.PCI0.IICB.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, _Y18, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PCI0.IICB._Y18._ADR, DAD3)  // _ADR: Address
                    DAD3 = Arg0
                    Return (IIC3) /* \_SB_.PCI0.IICB.IIC3 */
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, _Y19, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PCI0.IICB._Y19._ADR, DAD4)  // _ADR: Address
                    DAD4 = Arg0
                    Return (IIC4) /* \_SB_.PCI0.IICB.IIC4 */
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C5",
                            0x00, ResourceConsumer, _Y1A, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PCI0.IICB._Y1A._ADR, DAD5)  // _ADR: Address
                    DAD5 = Arg0
                    Return (IIC5) /* \_SB_.PCI0.IICB.IIC5 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (INTB, 3, Serialized)
        {
            Name (INTR, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y1B)
                {
                    0x00000000,
                }
            })
            CreateDWordField (INTR, \_SB.PCI0.INTB._Y1B._INT, NUMI)  // _INT: Interrupts
            NUMI = INUM (Arg0)
            CreateBitField (INTR, \_SB.PCI0.INTB._Y1B._HE, LEVI)  // _HE_: High-Edge
            LEVI = Arg1
            CreateBitField (INTR, \_SB.PCI0.INTB._Y1B._LL, ACTI)  // _LL_: Low Level
            ACTI = Arg2
            Return (INTR) /* \_SB_.PCI0.INTB.INTR */
        }
    }

    Scope (_SB.PCI0.RP01)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, One)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR1 /* \LTR1 */
            LMSL = PML1 /* \PML1 */
            LNSL = PNL1 /* \PNL1 */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (CondRefOf (\_SB.PCI0.RP01.PXSX))
    {
        Scope (_SB.PCI0.RP01.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                If ((TBTS == One))
                {
                    If (((SBNR == TBU0) || (SBNR == TBU1)))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (HPCE) /* \_SB_.PCI0.RP01.HPCE */
                    }
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP01.HPCE */
                }
            }
        }
    }

    Scope (_SB.PCI0.RP02)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x02)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR2 /* \LTR2 */
            LMSL = PML2 /* \PML2 */
            LNSL = PNL2 /* \PNL2 */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP02.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP02.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP02.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP03)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x03)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR3 /* \LTR3 */
            LMSL = PML3 /* \PML3 */
            LNSL = PNL3 /* \PNL3 */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP03.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP03.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP03.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP04)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x04)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR4 /* \LTR4 */
            LMSL = PML4 /* \PML4 */
            LNSL = PNL4 /* \PNL4 */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP04.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP04.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP04.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP05)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x05)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR5 /* \LTR5 */
            LMSL = PML5 /* \PML5 */
            LNSL = PNL5 /* \PNL5 */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (CondRefOf (\_SB.PCI0.RP05.PXSX))
    {
        Scope (_SB.PCI0.RP05.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                If ((TBTS == One))
                {
                    If (((SBNR == TBU0) || (SBNR == TBU1)))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (HPCE) /* \_SB_.PCI0.RP05.HPCE */
                    }
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP05.HPCE */
                }
            }
        }
    }

    Scope (_SB.PCI0.RP06)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x06)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR6 /* \LTR6 */
            LMSL = PML6 /* \PML6 */
            LNSL = PNL6 /* \PNL6 */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP06.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP06.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP06.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP07)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x07)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR7 /* \LTR7 */
            LMSL = PML7 /* \PML7 */
            LNSL = PNL7 /* \PNL7 */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP07.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP07.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP07.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP08)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x08)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR8 /* \LTR8 */
            LMSL = PML8 /* \PML8 */
            LNSL = PNL8 /* \PNL8 */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP08.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP08.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP08.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP09)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x09)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTR9 /* \LTR9 */
            LMSL = PML9 /* \PML9 */
            LNSL = PNL9 /* \PNL9 */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    If (CondRefOf (\_SB.PCI0.RP09.PXSX))
    {
        Scope (_SB.PCI0.RP09.PXSX)
        {
            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                If ((TBTS == One))
                {
                    If (((SBNR == TBU0) || (SBNR == TBU1)))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (HPCE) /* \_SB_.PCI0.RP09.HPCE */
                    }
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP09.HPCE */
                }
            }
        }
    }

    Scope (_SB.PCI0.RP10)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x0A)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRA /* \LTRA */
            LMSL = PMLA /* \PMLA */
            LNSL = PNLA /* \PNLA */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP10.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP10.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP10.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP11)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x0B)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRB /* \LTRB */
            LMSL = PMLB /* \PMLB */
            LNSL = PNLB /* \PNLB */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP11.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP11.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP11.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP12)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x0C)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRC /* \LTRC */
            LMSL = PMLC /* \PMLC */
            LNSL = PNLC /* \PNLC */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP12.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP12.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP12.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP13)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x0D)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRD /* \LTRD */
            LMSL = PMLD /* \PMLD */
            LNSL = PNLD /* \PNLD */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP13.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP13.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP13.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP14)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x0E)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRE /* \LTRE */
            LMSL = PMLE /* \PMLE */
            LNSL = PNLE /* \PNLE */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP14.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP14.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP14.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP15)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x0F)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRF /* \LTRF */
            LMSL = PMLF /* \PMLF */
            LNSL = PNLF /* \PNLF */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP15.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP15.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP15.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP16)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x10)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRG /* \LTRG */
            LMSL = PMLG /* \PMLG */
            LNSL = PNLG /* \PNLG */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP16.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP16.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP16.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP17)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x11)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRH /* \LTRH */
            LMSL = PMLH /* \PMLH */
            LNSL = PNLH /* \PNLH */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP17.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP17.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP17.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP18)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x12)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRI /* \LTRI */
            LMSL = PMLI /* \PMLI */
            LNSL = PNLI /* \PNLI */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP18.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP18.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP18.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP19)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x13)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRJ /* \LTRJ */
            LMSL = PMLJ /* \PMLJ */
            LNSL = PNLJ /* \PNLJ */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP19.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP19.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP19.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP20)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x14)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRK /* \LTRK */
            LMSL = PMLK /* \_SB_.PCI0.PMLK */
            LNSL = PNLK /* \PNLK */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP20.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP20.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP20.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP21)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x15)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRL /* \LTRL */
            LMSL = PMLL /* \PMLL */
            LNSL = PNLL /* \PNLL */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP21.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP21.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP21.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP22)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x16)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRM /* \LTRM */
            LMSL = PMLM /* \PMLM */
            LNSL = PNLM /* \PNLM */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP22.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP22.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP22.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP23)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x17)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRN /* \LTRN */
            LMSL = PMLN /* \PMLN */
            LNSL = PNLN /* \PNLN */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP23.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP23.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP23.HPCE */
            }
        }
    }

    Scope (_SB.PCI0.RP24)
    {
        Name (LTRZ, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Name (SLOT, 0x18)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRZ = LTRO /* \LTRO */
            LMSL = PMLO /* \PMLO */
            LNSL = PNLO /* \PNLO */
        }

        OperationRegion (APXC, PCI_Config, Zero, 0x60)
        Field (APXC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBNR,   8, 
            Offset (0x54), 
                ,   6, 
            HPCE,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (_SB.PCI0.RP24.PXSX)
    {
        Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
        {
            If ((TBTS == One))
            {
                If (((SBNR == TBU0) || (SBNR == TBU1)))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (HPCE) /* \_SB_.PCI0.RP24.HPCE */
                }
            }
            Else
            {
                Return (HPCE) /* \_SB_.PCI0.RP24.HPCE */
            }
        }
    }

    Name (PNVB, 0x5BD26198)
    Name (PNVL, 0x028F)
    OperationRegion (PNVA, SystemMemory, PNVB, PNVL)
    Field (PNVA, AnyAcc, Lock, Preserve)
    {
        PCHS,   16, 
        PCHG,   16, 
        PSTP,   16, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        RPA7,   32, 
        RPA8,   32, 
        RPA9,   32, 
        RPAA,   32, 
        RPAB,   32, 
        RPAC,   32, 
        RPAD,   32, 
        RPAE,   32, 
        RPAF,   32, 
        RPAG,   32, 
        RPAH,   32, 
        RPAI,   32, 
        RPAJ,   32, 
        RPAK,   32, 
        RPAL,   32, 
        RPAM,   32, 
        RPAN,   32, 
        RPAO,   32, 
        NHLA,   64, 
        NHLL,   32, 
        ADFM,   32, 
        SWQ0,   8, 
        SWQ1,   8, 
        SWQ2,   8, 
        SWQ3,   8, 
        DSPM,   32, 
        SBRG,   32, 
        GEI0,   8, 
        GEI1,   8, 
        GEI2,   8, 
        GED0,   8, 
        GED1,   8, 
        GED2,   8, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PML7,   16, 
        PML8,   16, 
        PML9,   16, 
        PMLA,   16, 
        PMLB,   16, 
        PMLC,   16, 
        PMLD,   16, 
        PMLE,   16, 
        PMLF,   16, 
        PMLG,   16, 
        PMLH,   16, 
        PMLI,   16, 
        PMLJ,   16, 
        PMLK,   16, 
        PMLL,   16, 
        PMLM,   16, 
        PMLN,   16, 
        PMLO,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        PNL7,   16, 
        PNL8,   16, 
        PNL9,   16, 
        PNLA,   16, 
        PNLB,   16, 
        PNLC,   16, 
        PNLD,   16, 
        PNLE,   16, 
        PNLF,   16, 
        PNLG,   16, 
        PNLH,   16, 
        PNLI,   16, 
        PNLJ,   16, 
        PNLK,   16, 
        PNLL,   16, 
        PNLM,   16, 
        PNLN,   16, 
        PNLO,   16, 
        XHPC,   8, 
        XRPC,   8, 
        XSPC,   8, 
        XSPA,   8, 
        HPTB,   32, 
        HPTE,   8, 
        SMD0,   8, 
        SMD1,   8, 
        SMD2,   8, 
        SMD3,   8, 
        SMD4,   8, 
        SMD5,   8, 
        SMD6,   8, 
        SMD7,   8, 
        SMD8,   8, 
        SMD9,   8, 
        SMDA,   8, 
        SMDB,   8, 
        SIR0,   8, 
        SIR1,   8, 
        SIR2,   8, 
        SIR3,   8, 
        SIR4,   8, 
        SIR5,   8, 
        SIR6,   8, 
        SIR7,   8, 
        SIR8,   8, 
        SIR9,   8, 
        SIRA,   8, 
        SIRB,   8, 
        SB00,   64, 
        SB01,   64, 
        SB02,   64, 
        SB03,   64, 
        SB04,   64, 
        SB05,   64, 
        SB06,   64, 
        SB07,   64, 
        SB08,   64, 
        SB09,   64, 
        SB0A,   64, 
        SB0B,   64, 
        SB10,   64, 
        SB11,   64, 
        SB12,   64, 
        SB13,   64, 
        SB14,   64, 
        SB15,   64, 
        SB16,   64, 
        SB17,   64, 
        SB18,   64, 
        SB19,   64, 
        SB1A,   64, 
        SB1B,   64, 
        SGIR,   8, 
        GPHD,   8, 
        NIT1,   8, 
        NIT2,   8, 
        NIT3,   8, 
        NPM1,   8, 
        NPM2,   8, 
        NPM3,   8, 
        NPC1,   8, 
        NPC2,   8, 
        NPC3,   8, 
        NL11,   16, 
        NL12,   16, 
        NL13,   16, 
        ND21,   8, 
        ND22,   8, 
        ND23,   8, 
        ND11,   32, 
        ND12,   32, 
        ND13,   32, 
        NLR1,   16, 
        NLR2,   16, 
        NLR3,   16, 
        NLD1,   32, 
        NLD2,   32, 
        NLD3,   32, 
        NEA1,   16, 
        NEA2,   16, 
        NEA3,   16, 
        NEB1,   16, 
        NEB2,   16, 
        NEB3,   16, 
        NEC1,   16, 
        NEC2,   16, 
        NEC3,   16, 
        NRA1,   16, 
        NRA2,   16, 
        NRA3,   16, 
        NMB1,   32, 
        NMB2,   32, 
        NMB3,   32, 
        NMV1,   32, 
        NMV2,   32, 
        NMV3,   32, 
        NPB1,   32, 
        NPB2,   32, 
        NPB3,   32, 
        NPV1,   32, 
        NPV2,   32, 
        NPV3,   32, 
        NRP1,   32, 
        NRP2,   32, 
        NRP3,   32, 
        EMH4,   8, 
        EMDS,   8, 
        CSKU,   8, 
        ITA0,   16, 
        ITA1,   16, 
        ITA2,   16, 
        ITA3,   16, 
        ITS0,   8, 
        ITS1,   8, 
        ITS2,   8, 
        ITS3,   8, 
        PMBS,   16, 
        PWRM,   32, 
        CNVI,   8, 
        VMRC,   8, 
        VM70,   8, 
        VM75,   8, 
        PTHM,   8, 
        PSON,   8, 
        TWMB,   32, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        LTR7,   8, 
        LTR8,   8, 
        LTR9,   8, 
        LTRA,   8, 
        LTRB,   8, 
        LTRC,   8, 
        LTRD,   8, 
        LTRE,   8, 
        LTRF,   8, 
        LTRG,   8, 
        LTRH,   8, 
        LTRI,   8, 
        LTRJ,   8, 
        LTRK,   8, 
        LTRL,   8, 
        LTRM,   8, 
        LTRN,   8, 
        LTRO,   8, 
        GBES,   8, 
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (_SB)
    {
        OperationRegion (ICLK, SystemMemory, (SBRG + 0x00AD8000), 0x82)
        Field (ICLK, AnyAcc, Lock, Preserve)
        {
            CLK1,   8, 
            Offset (0x80), 
            CLK2,   8
        }

        Method (NCLK, 0, NotSerialized)
        {
            Return (0x02)
        }

        Method (CLKC, 2, Serialized)
        {
            Switch (Arg0)
            {
                Case (Zero)
                {
                    Local0 = CLK1 /* \_SB_.CLK1 */
                    CLK1 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                }
                Case (One)
                {
                    Local0 = CLK2 /* \_SB_.CLK2 */
                    CLK2 = ((Local0 & 0xFFFFFFFFFFFFFFFD) | (Arg1 << One))
                }

            }
        }

        Method (CLKF, 2, Serialized)
        {
            Switch (Arg0)
            {
                Case (Zero)
                {
                    Local0 = CLK1 /* \_SB_.CLK1 */
                    CLK1 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                }
                Case (One)
                {
                    Local0 = CLK2 /* \_SB_.CLK2 */
                    CLK2 = ((Local0 & 0xFFFFFFFFFFFFFFFE) | Arg1)
                }

            }
        }
    }

    Scope (_SB)
    {
        Name (GPCL, Package (0x0F)
        {
            Package (0x07)
            {
                0x006E0000, 
                0x19, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                Zero
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x1A, 
                0x0790, 
                0xB4, 
                0x30, 
                0x0144, 
                0x20
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x18, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                0x0100
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                0x60
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x18, 
                0x0780, 
                0xB4, 
                0x2C, 
                0x0144, 
                0x0120
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0790, 
                0xB4, 
                0x30, 
                0x0144, 
                0x80
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x08, 
                0x0930, 
                0xB8, 
                0x40, 
                0x0148, 
                0x40
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0910, 
                0xB8, 
                0x3C, 
                0x0148, 
                0xA0
            }, 

            Package (0x07)
            {
                0x006C0000, 
                0x10, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x28, 
                0x0A90, 
                0xBC, 
                0x48, 
                0x014C, 
                0xC0
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x09, 
                0x09B0, 
                0xBC, 
                0x44, 
                0x014C, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x08, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x0B, 
                0x0680, 
                0xB4, 
                0x24, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x09, 
                0x0900, 
                0xB8, 
                0x38, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x06, 
                0x0990, 
                0xBC, 
                0x40, 
                0x014C, 
                0xFFFF
            }
        })
        Name (GPCH, Package (0x11)
        {
            Package (0x07)
            {
                0x006E0000, 
                0x19, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                Zero
            }, 

            Package (0x07)
            {
                0x006E0000, 
                0x1A, 
                0x0790, 
                0xC4, 
                0x30, 
                0x0144, 
                0x20
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0x40
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x18, 
                0x0780, 
                0xC4, 
                0x2C, 
                0x0144, 
                0x60
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x0D, 
                0x0900, 
                0xC8, 
                0x38, 
                0x0148, 
                0x0100
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x18, 
                0x09D0, 
                0xCC, 
                0x40, 
                0x014C, 
                0x0120
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x08, 
                0x0900, 
                0xC8, 
                0x38, 
                0x0148, 
                0x80
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x18, 
                0x0780, 
                0xC4, 
                0x2C, 
                0x0144, 
                0xE0
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x12, 
                0x0740, 
                0xC8, 
                0x30, 
                0x0148, 
                0x0140
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x0C, 
                0x0860, 
                0xCC, 
                0x3C, 
                0x014C, 
                0x0160
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x18, 
                0x0600, 
                0xC0, 
                0x20, 
                0x0140, 
                0xC0
            }, 

            Package (0x07)
            {
                0x006C0000, 
                0x10, 
                0x0600, 
                0xB0, 
                0x20, 
                0x0140, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x28, 
                0x0A00, 
                0xD0, 
                0x40, 
                0xFFFF, 
                0xA0
            }, 

            Package (0x07)
            {
                0x006B0000, 
                0x09, 
                0x0B50, 
                0xD0, 
                0x4C, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006D0000, 
                0x08, 
                0x0980, 
                0xCC, 
                0x3C, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x0B, 
                0x0600, 
                0xC0, 
                0x20, 
                0xFFFF, 
                0xFFFF
            }, 

            Package (0x07)
            {
                0x006A0000, 
                0x09, 
                0x06B0, 
                0xC4, 
                0x28, 
                0xFFFF, 
                0xFFFF
            }
        })
        Name (RXEV, Package (0x0D)
        {
            Buffer (0x19){}, 
            Buffer (0x1A){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x18){}, 
            Buffer (0x08){}, 
            Buffer (0x18){}, 
            Buffer (0x12){}, 
            Buffer (0x28){}, 
            Buffer (0x18){}, 
            Buffer (0x10){}, 
            Buffer (0x28){}
        })
    }

    Scope (_SB)
    {
        Method (GINF, 2, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Return (DerefOf (DerefOf (GPCL [Arg0]) [Arg1]))
            }
            Else
            {
                Return (DerefOf (DerefOf (GPCH [Arg0]) [Arg1]))
            }
        }

        Method (GMXG, 0, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Return (0x0F)
            }
            Else
            {
                Return (0x11)
            }
        }

        Method (GADR, 2, NotSerialized)
        {
            Local0 = (GINF (Arg0, Zero) + SBRG)
            Local1 = GINF (Arg0, Arg1)
            Return ((Local0 + Local1))
        }

        Method (GNUM, 1, NotSerialized)
        {
            Local0 = GNMB (Arg0)
            Local1 = GGRP (Arg0)
            Return ((GINF (Local1, 0x06) + Local0))
        }

        Method (INUM, 1, NotSerialized)
        {
            Return ((GPC1 (Arg0) & 0x7F))
        }

        Method (GGRP, 1, Serialized)
        {
            Local0 = ((Arg0 & 0x00FF0000) >> 0x10)
            Return (Local0)
        }

        Method (GNMB, 1, Serialized)
        {
            Return ((Arg0 & 0xFFFF))
        }

        Method (GGPE, 1, NotSerialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local2)) | (
                (GEI1 == Local0) && (GED1 == Local2))) | ((GEI2 == Local0) && (GED2 == 
                Local2))))
            {
                Return (0x6F)
            }
            Else
            {
                If (((GEI0 == Local0) && (GED0 == Local2)))
                {
                    Local3 = Zero
                }
                ElseIf (((GEI1 == Local0) && (GED1 == Local2)))
                {
                    Local3 = One
                }
                ElseIf (((GEI2 == Local0) && (GED2 == Local2)))
                {
                    Local3 = 0x02
                }
                Else
                {
                    BreakPoint
                    Return (Zero)
                }

                Return ((((Local3 - Local2) * 0x20) + Local1))
            }
        }

        Method (GPC0, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC0.TEMP */
        }

        Method (SPC0, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (GPC1, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC1.TEMP */
        }

        Method (SPC1, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW1, SystemMemory, Local2, 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (SRXO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   28, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGIV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGIV.TEMP */
        }

        Method (GGOV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGOV.TEMP */
        }

        Method (SGOV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GGII, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGII.TEMP */
        }

        Method (SGII, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   23, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GPMV, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GPMV.TEMP */
        }

        Method (SPMV, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   3, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (GHPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> Local4) & One))
        }

        Method (SHPO, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local3 = (GADR (Local0, 0x03) + ((Local1 >> 0x05) * 0x04))
            Local4 = (Local1 & 0x1F)
            OperationRegion (PREG, SystemMemory, Local3, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            If (Arg1)
            {
                TEMP |= (One << Local4)
            }
            Else
            {
                TEMP &= ~(One << Local4)
            }
        }

        Method (GGPO, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x04) + ((Local1 >> 0x03) * 0x04
                ))
            OperationRegion (PREG, SystemMemory, Local2, 0x04)
            Field (PREG, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (((TEMP >> ((Local1 & 0x07) * 0x04)) & 
                0x03))
        }

        Method (SGRA, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   20, 
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (SGWP, 2, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = ((GADR (Local0, 0x02) + (Local1 * 0x10)) + 
                0x04)
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   10, 
                TEMP,   4, 
                Offset (0x04)
            }

            TEMP = Arg1
        }

        Method (CAGS, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!((((GEI0 == Local0) && (GED0 == Local4)) | (
                (GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (GED2 == 
                Local4))))
            {
                Local3 = GADR (Local0, 0x05)
                If (((Local3 & 0xFFFF) != 0xFFFF))
                {
                    OperationRegion (GPPX, SystemMemory, (Local3 + (Local4 * 0x04)), 0x04)
                    Field (GPPX, AnyAcc, NoLock, Preserve)
                    {
                        STSX,   32
                    }

                    Local2 = (One << (Local1 % 0x20))
                    STSX = Local2
                }
            }
        }

        Method (ISME, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local4 = (Local1 >> 0x05)
            If (!!((((GEI0 == Local0) && (GED0 == Local4)) | 
                ((GEI1 == Local0) && (GED1 == Local4))) | ((GEI2 == Local0) && (
                GED2 == Local4))))
            {
                Return (Zero)
            }

            If (((GADR (Local0, 0x05) & 0xFFFF) == 0xFFFF))
            {
                Return (Zero)
            }

            Local2 = (GADR (Local0, 0x05) + (Local4 * 0x04))
            Local3 = (Local1 & 0x1F)
            OperationRegion (GPPX, SystemMemory, Local2, 0x24)
            Field (GPPX, AnyAcc, NoLock, Preserve)
            {
                STSX,   32, 
                Offset (0x20), 
                GENX,   32
            }

            Return ((((STSX & GENX) >> Local3) & One))
        }

        Method (DIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            If ((RCFG != 0x02))
            {
                DerefOf (RXEV [Local0]) [Local1] = RCFG /* \_SB_.DIPI.RCFG */
                RCFG = 0x02
                RDIS = One
            }
        }

        Method (UIPI, 1, Serialized)
        {
            Local0 = GGRP (Arg0)
            Local1 = GNMB (Arg0)
            Local2 = (GADR (Local0, 0x02) + (Local1 * 0x10))
            OperationRegion (PDW0, SystemMemory, Local2, 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   9, 
                RDIS,   1, 
                    ,   15, 
                RCFG,   2, 
                Offset (0x04)
            }

            Local3 = DerefOf (DerefOf (RXEV [Local0]) [Local1])
            If ((Local3 != 0x02))
            {
                RDIS = Zero
                RCFG = Local3
            }
        }
    }

    Scope (_SB)
    {
        Method (PSD3, 1, Serialized)
        {
            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = One
                    While ((APA0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (One)
                {
                    RAA1 = One
                    While ((APA1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x02)
                {
                    RAA2 = One
                    While ((APA2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x03)
                {
                    RAA3 = One
                    While ((APA3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x04)
                {
                    RPB0 = One
                    While ((APB0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x05)
                {
                    RPB1 = One
                    While ((APB1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x06)
                {
                    RPB2 = One
                    While ((APB2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x07)
                {
                    RPB3 = One
                    While ((APB3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x08)
                {
                    RPC0 = One
                    While ((APC0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x09)
                {
                    RPC1 = One
                    While ((APC1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = One
                    While ((APC2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = One
                    While ((APC3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = One
                    While ((APD0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = One
                    While ((APD1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = One
                    While ((APD2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = One
                    While ((APD3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x10)
                {
                    RPE0 = One
                    While ((APE0 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x11)
                {
                    RPE1 = One
                    While ((APE1 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x12)
                {
                    RPE2 = One
                    While ((APE2 == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x13)
                {
                    RPE3 = One
                    While ((APE3 == Zero))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }

        Method (PSD0, 1, Serialized)
        {
            Switch ((Zero + Arg0--))
            {
                Case (Zero)
                {
                    RAA0 = Zero
                    While ((APA0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (One)
                {
                    RAA1 = Zero
                    While ((APA1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x02)
                {
                    RAA2 = Zero
                    While ((APA2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x03)
                {
                    RAA3 = Zero
                    While ((APA3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x04)
                {
                    RPB0 = Zero
                    While ((APB0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x05)
                {
                    RPB1 = Zero
                    While ((APB1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x06)
                {
                    RPB2 = Zero
                    While ((APB2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x07)
                {
                    RPB3 = Zero
                    While ((APB3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x08)
                {
                    RPC0 = Zero
                    While ((APC0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x09)
                {
                    RPC1 = Zero
                    While ((APC1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0A)
                {
                    RPC2 = Zero
                    While ((APC2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0B)
                {
                    RPC3 = Zero
                    While ((APC3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0C)
                {
                    RPD0 = Zero
                    While ((APD0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0D)
                {
                    RPD1 = Zero
                    While ((APD1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0E)
                {
                    RPD2 = Zero
                    While ((APD2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x0F)
                {
                    RPD3 = Zero
                    While ((APD3 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x10)
                {
                    RPE0 = Zero
                    While ((APE0 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x11)
                {
                    RPE1 = Zero
                    While ((APE1 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x12)
                {
                    RPE2 = Zero
                    While ((APE2 == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x13)
                {
                    RPE3 = Zero
                    While ((APE3 == One))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }

        Method (CSD3, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = One
                    While ((ASAT == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x15)
                {
                    RGBE = One
                    While ((AGBE == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x16)
                {
                    RXHC = One
                    While ((AXHC == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x17)
                {
                    RXDC = One
                    While ((AXDC == Zero))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x18)
                {
                    RUFS = One
                    While ((AUFS == Zero))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }

        Method (CSD0, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x14)
                {
                    RSAT = Zero
                    While ((ASAT == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x15)
                {
                    RGBE = Zero
                    While ((AGBE == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x16)
                {
                    RXHC = Zero
                    While ((AXHC == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x17)
                {
                    RXDC = Zero
                    While ((AXDC == One))
                    {
                        Stall (0x0A)
                    }
                }
                Case (0x18)
                {
                    RUFS = Zero
                    While ((AUFS == One))
                    {
                        Stall (0x0A)
                    }
                }

            }
        }
    }

    Scope (\)
    {
        Method (THEN, 0, Serialized)
        {
            OperationRegion (THBA, SystemMemory, 0xFE200000, 0x10)
            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32
            }

            Return ((DO00 != 0xFFFFFFFF))
        }

        Method (THDA, 2, Serialized)
        {
            Local0 = 0xFE200000
            Local0 += (0x40 * (0x80 * (Arg0 - 0x10)))
            Local0 += (0x40 * Arg1)
            Return (Local0)
        }

        Method (STRD, 3, Serialized)
        {
            If (((Arg1 + Arg2) > SizeOf (Arg0)))
            {
                Return (Zero)
            }

            ToBuffer (Arg0, Local3)
            Local0 = Zero
            Local1 = Zero
            While ((Local1 < Arg2))
            {
                Local2 = DerefOf (Local3 [(Arg1 + Local1)])
                Local0 += (Local2 << (0x08 * Local1))
                Local1++
            }

            Return (Local0)
        }

        Method (THDS, 1, Serialized)
        {
            If (!THEN ())
            {
                Return (Zero)
            }

            Concatenate (Arg0, "\n", Local2)
            Local0 = SizeOf (Local2)
            Local1 = THDA (0x48, 0x0E)
            OperationRegion (THBA, SystemMemory, Local1, 0x40)
            Field (THBA, QWordAcc, NoLock, Preserve)
            {
                QO00,   64
            }

            Field (THBA, DWordAcc, NoLock, Preserve)
            {
                DO00,   32, 
                Offset (0x10), 
                DO10,   32, 
                Offset (0x30), 
                DO30,   32
            }

            Field (THBA, WordAcc, NoLock, Preserve)
            {
                WO00,   16
            }

            Field (THBA, ByteAcc, NoLock, Preserve)
            {
                BO00,   8
            }

            DO10 = 0x01000242
            WO00 = Local0
            Local6 = Zero
            Local7 = Local0
            While ((Local7 >= 0x08))
            {
                QO00 = STRD (Local2, Local6, 0x08)
                Local6 += 0x08
                Local7 -= 0x08
            }

            If ((Local7 >= 0x04))
            {
                DO00 = STRD (Local2, Local6, 0x04)
                Local6 += 0x04
                Local7 -= 0x04
            }

            If ((Local7 >= 0x02))
            {
                WO00 = STRD (Local2, Local6, 0x02)
                Local6 += 0x02
                Local7 -= 0x02
            }

            If ((Local7 >= One))
            {
                BO00 = STRD (Local2, Local6, One)
                Local6 += One
                Local7 -= One
            }

            DO30 = Zero
        }

        Method (THDH, 1, Serialized)
        {
            THDS (ToHexString (Arg0))
        }

        Method (THDD, 1, Serialized)
        {
            THDS (ToDecimalString (Arg0))
        }
    }

    Name (PCHH, One)
    Name (PCHL, 0x02)
    Scope (_SB.PCI0)
    {
        Name (TEMP, Zero)
        Device (PRRE)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "PCHRESV")  // _UID: Unique ID
            Name (_STA, 0x03)  // _STA: Status
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (BUF0, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFD000000,         // Address Base
                        0x006A0000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y1D)
                    Memory32Fixed (ReadWrite,
                        0xFD6F0000,         // Address Base
                        0x00910000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE000000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFE200000,         // Address Base
                        0x00600000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFC7E0000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadOnly,
                        0xFF000000,         // Address Base
                        0x01000000,         // Address Length
                        )
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1C)
                })
                CreateWordField (BUF0, \_SB.PCI0.PRRE._CRS._Y1C._MIN, AMIN)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PCI0.PRRE._CRS._Y1C._MAX, AMAX)  // _MAX: Maximum Base Address
                AMIN = PMBS /* \PMBS */
                AMAX = PMBS /* \PMBS */
                CreateDWordField (BUF0, \_SB.PCI0.PRRE._CRS._Y1D._BAS, GBAS)  // _BAS: Base Address
                CreateDWordField (BUF0, \_SB.PCI0.PRRE._CRS._Y1D._LEN, GLEN)  // _LEN: Length
                If ((PCHS == PCHH))
                {
                    GBAS = (SBRG + 0x006C0000)
                    GLEN = 0x00010000
                }
                Else
                {
                    GBAS = (SBRG + 0x006B0000)
                    GLEN = 0x00020000
                }

                Name (BUF1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00400000,         // Address Length
                        _Y1E)
                })
                CreateDWordField (BUF1, \_SB.PCI0.PRRE._CRS._Y1E._BAS, HDBA)  // _BAS: Base Address
                HDBA = DSPM /* \DSPM */
                If (((PCHS == PCHL) && (PSTP < 0x10)))
                {
                    Return (ConcatenateResTemplate (BUF0, BUF1))
                }

                Return (BUF0) /* \_SB_.PCI0.PRRE._CRS.BUF0 */
            }
        }

        Device (IOTR)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, "IoTraps")  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                Name (BUF0, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y1F)
                })
                Name (BUF1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y20)
                })
                Name (BUF2, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y21)
                })
                Name (BUF3, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x01,               // Alignment
                        0xFF,               // Length
                        _Y22)
                })
                CreateWordField (BUF0, \_SB.PCI0.IOTR._CRS._Y1F._MIN, AMI0)  // _MIN: Minimum Base Address
                CreateWordField (BUF0, \_SB.PCI0.IOTR._CRS._Y1F._MAX, AMA0)  // _MAX: Maximum Base Address
                CreateWordField (BUF1, \_SB.PCI0.IOTR._CRS._Y20._MIN, AMI1)  // _MIN: Minimum Base Address
                CreateWordField (BUF1, \_SB.PCI0.IOTR._CRS._Y20._MAX, AMA1)  // _MAX: Maximum Base Address
                CreateWordField (BUF2, \_SB.PCI0.IOTR._CRS._Y21._MIN, AMI2)  // _MIN: Minimum Base Address
                CreateWordField (BUF2, \_SB.PCI0.IOTR._CRS._Y21._MAX, AMA2)  // _MAX: Maximum Base Address
                CreateWordField (BUF3, \_SB.PCI0.IOTR._CRS._Y22._MIN, AMI3)  // _MIN: Minimum Base Address
                CreateWordField (BUF3, \_SB.PCI0.IOTR._CRS._Y22._MAX, AMA3)  // _MAX: Maximum Base Address
                AMI0 = ITA0 /* \ITA0 */
                AMA0 = ITA0 /* \ITA0 */
                AMI1 = ITA1 /* \ITA1 */
                AMA1 = ITA1 /* \ITA1 */
                AMI2 = ITA2 /* \ITA2 */
                AMA2 = ITA2 /* \ITA2 */
                AMI3 = ITA3 /* \ITA3 */
                AMA3 = ITA3 /* \ITA3 */
                If ((ITS0 == One))
                {
                    ConcatenateResTemplate (Local0, BUF0, Local1)
                    Local0 = Local1
                }

                If ((ITS1 == One))
                {
                    ConcatenateResTemplate (Local0, BUF1, Local1)
                    Local0 = Local1
                }

                If ((ITS2 == One))
                {
                    ConcatenateResTemplate (Local0, BUF2, Local1)
                    Local0 = Local1
                }

                If ((ITS3 == One))
                {
                    ConcatenateResTemplate (Local0, BUF3, Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If (PCIC (Arg0))
            {
                Return (PCID (Arg0, Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        OperationRegion (LPC, PCI_Config, Zero, 0x0100)
        Field (LPC, AnyAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            CDID,   16, 
            Offset (0x08), 
            CRID,   8, 
            Offset (0x80), 
            IOD0,   8, 
            IOD1,   8, 
            Offset (0xA0), 
                ,   9, 
            PRBL,   1, 
            Offset (0xDC), 
                ,   2, 
            ESPI,   1
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SBUS)
        {
            Name (_ADR, 0x001F0004)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB)
    {
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLA, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLA, One, IRQ0)
                IRQ0 = PIRA /* \PIRA */
                Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLB, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {10}
                })
                CreateWordField (RTLB, One, IRQ0)
                IRQ0 = PIRB /* \PIRB */
                Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLC, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLC, One, IRQ0)
                IRQ0 = PIRC /* \PIRC */
                Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLD, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLD, One, IRQ0)
                IRQ0 = PIRD /* \PIRD */
                Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLE, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLE, One, IRQ0)
                IRQ0 = PIRE /* \PIRE */
                Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLF, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLF, One, IRQ0)
                IRQ0 = PIRF /* \PIRF */
                Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLG, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLG, One, IRQ0)
                IRQ0 = PIRG /* \PIRG */
                Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLH, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {11}
                })
                CreateWordField (RTLH, One, IRQ0)
                IRQ0 = PIRH /* \PIRH */
                Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0B)
            }
        }
    }

    Scope (\)
    {
        Method (IPCW, 7, Serialized)
        {
            IBF0 = Arg3
            IBF1 = Arg4
            IBF2 = Arg5
            IBF3 = Arg6
            Local0 = Arg0
            Local0 += (Arg1 << 0x0C)
            Local0 += (Arg2 << 0x10)
            CMDR = Local0
            Local0 = Zero
            While (One)
            {
                If ((!IBSY || (IERR == One)))
                {
                    Break
                }

                If ((Local0 > 0x0A))
                {
                    ADBG ("IPC Busy TO")
                    Break
                }

                Sleep (One)
                Local0++
            }

            If ((IERR == One))
            {
                ADBG ("IPC Error:")
                ADBG (IERC)
                ADBG (Arg0)
                ADBG (Arg1)
                ADBG (Arg2)
                ADBG (Arg3)
                ADBG (Arg4)
                ADBG (Arg5)
                ADBG (Arg6)
            }
        }

        Method (SPCO, 2, Serialized)
        {
            Local0 = (One << Arg0)
            Local1 = (Arg1 << Arg0)
            IPCW (0xA8, Zero, 0x08, Local0, Local1, Zero, Zero)
        }

        Method (PCRR, 2, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            Return (DAT0) /* \PCRR.DAT0 */
        }

        Method (PCRW, 3, Serialized)
        {
            Local0 = ((Arg0 << 0x10) + Arg1)
            Local0 += SBRG
            OperationRegion (PCR0, SystemMemory, Local0, 0x04)
            Field (PCR0, DWordAcc, Lock, Preserve)
            {
                DAT0,   32
            }

            DAT0 = Arg2
        }

        Method (PCRO, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 | Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCRA, 3, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = (Local0 & Arg2)
            PCRW (Arg0, Arg1, Local1)
        }

        Method (PCAO, 4, Serialized)
        {
            Local0 = PCRR (Arg0, Arg1)
            Local1 = ((Local0 & Arg2) | Arg3)
            PCRW (Arg0, Arg1, Local1)
        }

        Name (TCBV, Zero)
        Method (TCBS, 0, NotSerialized)
        {
            If ((TCBV == Zero))
            {
                Local0 = PCRR (0x88, 0x2778)
                TCBV = (Local0 & 0xFFE0)
            }

            Return (TCBV) /* \TCBV */
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x60)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x01), 
            PBSS,   1, 
            Offset (0x40), 
                ,   17, 
            GPEC,   1
        }

        OperationRegion (TCBA, SystemIO, TCBS (), 0x10)
        Field (TCBA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
                ,   9, 
            CPSC,   1
        }

        OperationRegion (PWMR, SystemMemory, PWRM, 0x1E30)
        Field (PWMR, DWordAcc, NoLock, Preserve)
        {
            CMDR,   32, 
            IBSY,   1, 
            IERR,   1, 
                ,   1, 
                ,   1, 
            Offset (0x05), 
            Offset (0x06), 
            IERC,   8, 
            Offset (0x08), 
            Offset (0x80), 
            IBF0,   32, 
            IBF1,   32, 
            IBF2,   32, 
            IBF3,   32, 
            IRBF,   32, 
            Offset (0x10D0), 
            RAA0,   1, 
            RAA1,   1, 
            RAA2,   1, 
            RAA3,   1, 
            RPB0,   1, 
            RPB1,   1, 
            RPB2,   1, 
            RPB3,   1, 
            RPC0,   1, 
            RPC1,   1, 
            RPC2,   1, 
            RPC3,   1, 
            RSAT,   1, 
            RGBE,   1, 
            RXHC,   1, 
            RXDC,   1, 
            RUFS,   1, 
            RPD0,   1, 
            RPD1,   1, 
            RPD2,   1, 
            RPD3,   1, 
            RPE0,   1, 
            RPE1,   1, 
            RPE2,   1, 
            RPE3,   1, 
            RDMI,   1, 
            Offset (0x10D4), 
            APA0,   1, 
            APA1,   1, 
            APA2,   1, 
            APA3,   1, 
            APB0,   1, 
            APB1,   1, 
            APB2,   1, 
            APB3,   1, 
            APC0,   1, 
            APC1,   1, 
            APC2,   1, 
            APC3,   1, 
            ASAT,   1, 
            AGBE,   1, 
            AXHC,   1, 
            AXDC,   1, 
            AUFS,   1, 
            APD0,   1, 
            APD1,   1, 
            APD2,   1, 
            APD3,   1, 
            APE0,   1, 
            APE1,   1, 
            APE2,   1, 
            APE3,   1, 
            ADMI,   1, 
            Offset (0x18E8), 
            PMC4,   32, 
            Offset (0x1B1C), 
                ,   22, 
            XSQD,   1, 
            Offset (0x1E20), 
            GBED,   1, 
            Offset (0x1E28), 
                ,   22, 
            SCFD,   1
        }
    }

    Scope (_SB.PCI0)
    {
    }

    If ((GBES != Zero))
    {
        Scope (_SB.PCI0)
        {
            Device (GLAN)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x6D, 0x04))
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (XHC)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
            Field (XPRT, AnyAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x10), 
                XADL,   32, 
                XADH,   32, 
                Offset (0xA2), 
                    ,   2, 
                D3HE,   1
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("XHCI _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x03)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x03)
            }

            Method (_S3W, 0, NotSerialized)  // _S3W: S3 Device Wake State
            {
                Return (0x03)
            }

            Method (_S4W, 0, NotSerialized)  // _S4W: S4 Device Wake State
            {
                Return (0x03)
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x03))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                If (((^^LPCB.EC0.LIDF == Zero) && (WUSB == One)))
                {
                    ^^LPCB.EC0.UWAK = One
                }
                Else
                {
                    ^^LPCB.EC0.UWAK = Zero
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If (CondRefOf (\_SB.PCI0.XHC.RHUB.INIR))
                {
                    ^RHUB.INIR ()
                }
            }

            Method (USRA, 0, Serialized)
            {
                If ((PCHS == PCHH))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (SSPA, 0, Serialized)
            {
                If ((PCHS == PCHH))
                {
                    Return (0x11)
                }
                Else
                {
                    Return (0x0D)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PCI0.XHC.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PCI0.XHC.PS3X))
                {
                    PS3X ()
                }
            }

            Method (CUID, 1, Serialized)
            {
                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS0X))
                    {
                        CSD0 (0x16)
                        PS0X ()
                    }
                }

                Method (_PS2, 0, Serialized)  // _PS2: Power State 2
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS2X))
                    {
                        PS2X ()
                        CSD3 (0x16)
                    }
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (CondRefOf (\_SB.PCI0.XHC.RHUB.PS3X))
                    {
                        PS3X ()
                        CSD3 (0x16)
                    }
                }

                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (HS02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (HS03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                }

                Device (HS04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                }

                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (HS06)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HS07)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                }

                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                }

                Device (HS09)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                }

                Device (HS10)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                }

                Device (USR1)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((USRA () + Zero))
                    }
                }

                Device (USR2)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((USRA () + One))
                    }
                }

                Device (SS01)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + Zero))
                    }
                }

                Device (SS02)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + One))
                    }
                }

                Device (SS03)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x02))
                    }
                }

                Device (SS04)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x03))
                    }
                }

                Device (SS05)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x04))
                    }
                }

                Device (SS06)
                {
                    Method (_ADR, 0, NotSerialized)  // _ADR: Address
                    {
                        Return ((SSPA () + 0x05))
                    }
                }
            }
        }
    }

    If ((PCHS == PCHH))
    {
        Scope (_SB.PCI0.XHC.RHUB)
        {
            Device (HS11)
            {
                Name (_ADR, 0x0B)  // _ADR: Address
            }

            Device (HS12)
            {
                Name (_ADR, 0x0C)  // _ADR: Address
            }

            Device (HS13)
            {
                Name (_ADR, 0x0D)  // _ADR: Address
            }

            Device (HS14)
            {
                Name (_ADR, 0x0E)  // _ADR: Address
            }

            Device (SS07)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x06))
                }
            }

            Device (SS08)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x07))
                }
            }

            Device (SS09)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x08))
                }
            }

            Device (SS10)
            {
                Method (_ADR, 0, NotSerialized)  // _ADR: Address
                {
                    Return ((SSPA () + 0x09))
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (XDCI)
        {
            Name (_ADR, 0x00140001)  // _ADR: Address
            PowerResource (USBC, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }
            }

            OperationRegion (OTGD, SystemMemory, (GPCB () + 0x000A1000), 0x0100)
            Field (OTGD, DWordAcc, NoLock, Preserve)
            {
                DVID,   16, 
                Offset (0x04), 
                PDBM,   16, 
                Offset (0x10), 
                XDCB,   64
            }

            Field (OTGD, ByteAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                D0I3,   2
            }

            Method (XDBA, 0, NotSerialized)
            {
                Return ((XDCB & 0xFFFFFFFFFFFFFF00))
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511")))
                {
                    If ((Arg1 == One))
                    {
                        Method (SPPS, 2, Serialized)
                        {
                            OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                            Field (XDBW, WordAcc, NoLock, Preserve)
                            {
                                Offset (0x10F810), 
                                Offset (0x10F811), 
                                U2CP,   2, 
                                U3CP,   2, 
                                Offset (0x10F818), 
                                PUPS,   2, 
                                    ,   1, 
                                PURC,   1, 
                                Offset (0x10F81A), 
                                Offset (0x10F81C), 
                                    ,   3, 
                                UXPE,   2, 
                                Offset (0x10F81E)
                            }

                            Local1 = Arg0
                            Local2 = Arg1
                            If ((Local1 == Zero))
                            {
                                UXPE = Zero
                                Local0 = Zero
                                While ((Local0 < 0x0A))
                                {
                                    Stall (0x64)
                                    Local0++
                                }

                                PUPS = Zero
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == Zero) && (U3CP == Zero)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != Zero)){}
                                If ((U3CP != Zero)){}
                                Return (Zero)
                            }

                            If ((Local1 == 0x03))
                            {
                                If ((U2CP != Zero)){}
                                If ((U3CP != Zero)){}
                                PUPS = 0x03
                                Local0 = Zero
                                While ((Local0 < 0x07D0))
                                {
                                    Stall (0x64)
                                    If (((U2CP == 0x03) && (U3CP == 0x03)))
                                    {
                                        Break
                                    }

                                    Local0++
                                }

                                If ((U2CP != 0x03)){}
                                If ((U3CP != 0x03)){}
                                UXPE = Local2
                                Return (Zero)
                            }

                            Return (Zero)
                        }

                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0xB3                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (One)
                            }
                            Case (0x04)
                            {
                                Local1 = DerefOf (Arg3 [Zero])
                                SPPS (Local1, Zero)
                            }
                            Case (0x05)
                            {
                                If (CondRefOf (\_SB.PCI0.LPCB.H_EC.XDAT))
                                {
                                    If ((^^LPCB.H_EC.XDAT () == One))
                                    {
                                        Notify (XDCI, 0x80) // Status Change
                                    }
                                    Else
                                    {
                                        Notify (XDCI, 0x81) // Information Change
                                    }
                                }

                                Return (Zero)
                            }
                            Case (0x07)
                            {
                                OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                Field (XD22, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F818), 
                                    P2PS,   2, 
                                    Offset (0x10F81A)
                                }

                                Local0 = P2PS /* \_SB_.PCI0.XDCI._DSM.P2PS */
                                Return (Local0)
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (_DDN, "CNL PCH XDCI controller")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("CNL PCH XDCI controller"))  // _STR: Description String
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PCI0.XDCI.PS3X))
                {
                    Local2 = XDCB /* \_SB_.PCI0.XDCI.XDCB */
                    Local1 = PDBM /* \_SB_.PCI0.XDCI.PDBM */
                    PDBM &= 0xFFFFFFFFFFFFFFF9
                    XDCB = TWMB /* \TWMB */
                    PDBM = (Local1 | 0x02)
                    OperationRegion (GENR, SystemMemory, (TWMB + 0x0010F81C), 0x04)
                    Field (GENR, WordAcc, NoLock, Preserve)
                    {
                            ,   2, 
                        CPME,   1, 
                        U3EN,   1, 
                        U2EN,   1
                    }

                    CPME = One
                    U2EN = One
                    U3EN = One
                    PDBM &= 0xFFFFFFFFFFFFFFFD
                    XDCB = Local2
                    PDBM = Local1
                    PS3X ()
                    CSD3 (0x17)
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If ((DVID == 0xFFFF))
                {
                    Return (Zero)
                }

                If (CondRefOf (\_SB.PCI0.XDCI.PS0X))
                {
                    Local2 = XDCB /* \_SB_.PCI0.XDCI.XDCB */
                    Local1 = PDBM /* \_SB_.PCI0.XDCI.PDBM */
                    PDBM &= 0xFFFFFFFFFFFFFFF9
                    XDCB = TWMB /* \TWMB */
                    PDBM = (Local1 | 0x02)
                    OperationRegion (GENR, SystemMemory, (TWMB + 0x0010F81C), 0x04)
                    Field (GENR, WordAcc, NoLock, Preserve)
                    {
                            ,   2, 
                        CPME,   1, 
                        U3EN,   1, 
                        U2EN,   1
                    }

                    CPME = Zero
                    U2EN = Zero
                    U3EN = Zero
                    PDBM &= 0xFFFFFFFFFFFFFFFD
                    XDCB = Local2
                    PDBM = Local1
                    PS0X ()
                    CSD0 (0x17)
                }
            }

            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_PR3, 0, NotSerialized)  // _PR3: Power Resources for D3hot
            {
                Return (Package (0x01)
                {
                    USBC
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (HDAS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                If (VMRC)
                {
                    If (CondRefOf (\_SB.VMOF))
                    {
                        VMOF ()
                        XSQD = One
                    }
                }

                If (CondRefOf (\_SB.PCI0.HDAS.PS0X))
                {
                    PS0X ()
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                If (VMRC)
                {
                    If (CondRefOf (\_SB.VMON))
                    {
                        VMON ()
                        XSQD = Zero
                    }
                }

                If (CondRefOf (\_SB.PCI0.HDAS.PS3X))
                {
                    PS3X ()
                }
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y23, AddressRangeACPI, TypeStatic)
            })
            Name (DBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00400000,         // Address Length
                    _Y24)
            })
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                ADBG ("HDAS _INI")
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y23._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y23._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y23._LEN, NLEN)  // _LEN: Length
                NBAS = NHLA /* \NHLA */
                NMAS = (NHLA + (NHLL - One))
                NLEN = NHLL /* \NHLL */
                CreateDWordField (DBUF, \_SB.PCI0.HDAS._Y24._BAS, HDBA)  // _BAS: Base Address
                HDBA = DSPM /* \DSPM */
            }

            Name (_DSD, Package (0x02)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "nhlt-version", 
                        "1.8-0"
                    }
                }
            })
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("HDAS _DSM")
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If (((PCHS == PCHL) && (PSTP < 0x10)))
                            {
                                Return (Buffer (One)
                                {
                                     0x1F                                             // .
                                })
                            }

                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG ("_DSM Fun 1 NHLT")
                            Return (NBUF) /* \_SB_.PCI0.HDAS.NBUF */
                        }
                        Case (0x02)
                        {
                            ADBG ("_DSM Fun 2 FMSK")
                            Return (ADFM) /* \ADFM */
                        }
                        Case (0x03)
                        {
                            ADBG ("_DSM Fun 3 PPMS")
                            If (CondRefOf (\_SB.PCI0.HDAS.PPMS))
                            {
                                Return (PPMS (Arg3))
                            }

                            Return (Zero)
                        }
                        Case (0x04)
                        {
                            ADBG ("_DSM Fun 4 DBUF")
                            Return (DBUF) /* \_SB_.PCI0.HDAS.DBUF */
                        }
                        Default
                        {
                            ADBG ("_DSM Fun NOK")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                ADBG ("_DSM UUID NOK")
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Scope (HDAS)
        {
            Device (SNDW)
            {
                Name (_ADR, 0x40000000)  // _ADR: Address
                Name (_CID, Package (0x02)  // _CID: Compatible ID
                {
                    "PRP00001", 
                    "PNP0A05" /* Generic Container Device */
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0B)
                }

                Method (QCFG, 2, NotSerialized)
                {
                    DerefOf (DerefOf (Arg0 [One]) [Zero]) [One]
                         = Arg1
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    ADBG ("SNDW _INI")
                    QCFG (LNK0, SWQ0)
                    QCFG (LNK1, SWQ1)
                    QCFG (LNK2, SWQ2)
                    QCFG (LNK3, SWQ3)
                }

                Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x02)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-sw-interface-revision", 
                            0x00010000
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-master-count", 
                            0x04
                        }
                    }, 

                    ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                    Package (0x04)
                    {
                        Package (0x02)
                        {
                            "mipi-sdw-link-0-subproperties", 
                            "LNK0"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-1-subproperties", 
                            "LNK1"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-2-subproperties", 
                            "LNK2"
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-link-3-subproperties", 
                            "LNK3"
                        }
                    }
                })
                Name (LNK0, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0A)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x016E3600
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x005B8D80
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x7D
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x02
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK1, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0A)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x016E3600
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x005B8D80
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x7D
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x02
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK2, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0A)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x016E3600
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x005B8D80
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x7D
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x02
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
                Name (LNK3, Package (0x02)
                {
                    ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                    Package (0x0A)
                    {
                        Package (0x02)
                        {
                            "intel-quirk-mask", 
                            Zero
                        }, 

                        Package (0x02)
                        {
                            "intel-sdw-ip-clock", 
                            0x016E3600
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode0-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-stop-mode1-supported", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-clock-frequencies-supported", 
                            Package (0x01)
                            {
                                0x005B8D80
                            }
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-rate", 
                            0xBB80
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-row-size", 
                            0x7D
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-default-frame-col-size", 
                            0x02
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-dynamic-frame-shape", 
                            One
                        }, 

                        Package (0x02)
                        {
                            "mipi-sdw-command-error-threshold", 
                            0x10
                        }
                    }
                })
            }
        }

        Device (SAT0)
        {
            Name (_ADR, 0x00170000)  // _ADR: Address
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }
                ElseIf ((Arg0 == ToUUID ("9cd9cddd-8845-4afd-8392-31c4eb87cabd")))
                {
                    Return (D3AS (Arg1, Arg2, Arg3))
                }
                ElseIf ((CondRefOf (SATC) && CondRefOf (SATD)))
                {
                    If (SATC (Arg0))
                    {
                        Return (SATD (Arg0, Arg1, Arg2, Arg3))
                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                ADBG ("SATA0 Ctrlr D0")
                If ((PCHS == PCHL))
                {
                    If (!SCFD)
                    {
                        CSD0 (0x14)
                    }
                }
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                ADBG ("SATA0 Ctrlr D3")
                If ((PCHS == PCHL))
                {
                    CSD3 (0x14)
                }
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Device (PRT0)
            {
                Name (_ADR, 0xFFFF)  // _ADR: Address
            }

            Device (PRT1)
            {
                Name (_ADR, 0x0001FFFF)  // _ADR: Address
            }

            Device (PRT2)
            {
                Name (_ADR, 0x0002FFFF)  // _ADR: Address
            }

            Device (PRT3)
            {
                Name (_ADR, 0x0003FFFF)  // _ADR: Address
            }

            Device (PRT4)
            {
                Name (_ADR, 0x0004FFFF)  // _ADR: Address
            }

            Device (PRT5)
            {
                Name (_ADR, 0x0005FFFF)  // _ADR: Address
            }

            Device (NVM1)
            {
                Name (_ADR, 0x00C1FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT1 /* \NIT1 */
                    NPMV = NPM1 /* \NPM1 */
                    NPCV = NPC1 /* \NPC1 */
                    NL1V = NL11 /* \NL11 */
                    ND2V = ND21 /* \ND21 */
                    ND1V = ND11 /* \ND11 */
                    NLRV = NLR1 /* \NLR1 */
                    NLDV = NLD1 /* \NLD1 */
                    NEAV = NEA1 /* \NEA1 */
                    NEBV = NEB1 /* \NEB1 */
                    NECV = NEC1 /* \NEC1 */
                    NRAV = NRA1 /* \NRA1 */
                    NMBV = NMB1 /* \NMB1 */
                    NMVV = NMV1 /* \NMV1 */
                    NPBV = NPB1 /* \NPB1 */
                    NPVV = NPV1 /* \NPV1 */
                    NRPN = NRP1 /* \NRP1 */
                    NCRN = Zero
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("_PS3r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("_PS0r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    ADBG (Concatenate ("RPONs: ", ToHexString (_ADR)))
                    If ((ID3C == Zero))
                    {
                        ADBG ("RPON: no D3C")
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                    ADBG (Concatenate ("RPONe: ", ToHexString (_ADR)))
                }

                Method (RPOF, 0, Serialized)
                {
                    ADBG (Concatenate ("RPOFs: ", ToHexString (_ADR)))
                    If ((ID3H == Zero))
                    {
                        ADBG ("RPOF: No D3H")
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    ADBG (Concatenate ("SAVC:", ToHexString (_ADR)))
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD3:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        ADBG ("Skip in D3")
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD0:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        ADBG ("Remap already in D0")
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                            ADBG ("NVD0:  MSIXe")
                        }
                    }
                    Else
                    {
                        ADBG ("Skip remap restore")
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                }
            }

            Device (NVM2)
            {
                Name (_ADR, 0x00C2FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT2 /* \NIT2 */
                    NPMV = NPM2 /* \NPM2 */
                    NPCV = NPC2 /* \NPC2 */
                    NL1V = NL12 /* \NL12 */
                    ND2V = ND22 /* \ND22 */
                    ND1V = ND12 /* \ND12 */
                    NLRV = NLR2 /* \NLR2 */
                    NLDV = NLD2 /* \NLD2 */
                    NEAV = NEA2 /* \NEA2 */
                    NEBV = NEB2 /* \NEB2 */
                    NECV = NEC2 /* \NEC2 */
                    NRAV = NRA2 /* \NRA2 */
                    NMBV = NMB2 /* \NMB2 */
                    NMVV = NMV2 /* \NMV2 */
                    NPBV = NPB2 /* \NPB2 */
                    NPVV = NPV2 /* \NPV2 */
                    NRPN = NRP2 /* \NRP2 */
                    NCRN = One
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("_PS3r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("_PS0r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    ADBG (Concatenate ("RPONs: ", ToHexString (_ADR)))
                    If ((ID3C == Zero))
                    {
                        ADBG ("RPON: no D3C")
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                    ADBG (Concatenate ("RPONe: ", ToHexString (_ADR)))
                }

                Method (RPOF, 0, Serialized)
                {
                    ADBG (Concatenate ("RPOFs: ", ToHexString (_ADR)))
                    If ((ID3H == Zero))
                    {
                        ADBG ("RPOF: No D3H")
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    ADBG (Concatenate ("SAVC:", ToHexString (_ADR)))
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD3:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        ADBG ("Skip in D3")
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD0:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        ADBG ("Remap already in D0")
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                            ADBG ("NVD0:  MSIXe")
                        }
                    }
                    Else
                    {
                        ADBG ("Skip remap restore")
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                }
            }

            Device (NVM3)
            {
                Name (_ADR, 0x00C3FFFF)  // _ADR: Address
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    NITV = NIT3 /* \NIT3 */
                    NPMV = NPM3 /* \NPM3 */
                    NPCV = NPC3 /* \NPC3 */
                    NL1V = NL13 /* \NL13 */
                    ND2V = ND23 /* \ND23 */
                    ND1V = ND13 /* \ND13 */
                    NLRV = NLR3 /* \NLR3 */
                    NLDV = NLD3 /* \NLD3 */
                    NEAV = NEA3 /* \NEA3 */
                    NEBV = NEB3 /* \NEB3 */
                    NECV = NEC3 /* \NEC3 */
                    NRAV = NRA3 /* \NRA3 */
                    NMBV = NMB3 /* \NMB3 */
                    NMVV = NMV3 /* \NMV3 */
                    NPBV = NPB3 /* \NPB3 */
                    NPVV = NPV3 /* \NPV3 */
                    NRPN = NRP3 /* \NRP3 */
                    NCRN = 0x02
                }

                Name (PRBI, Zero)
                Name (PRBD, Zero)
                Name (PCMD, Zero)
                Name (NCRN, Zero)
                Name (NITV, Zero)
                Name (NPMV, Zero)
                Name (NPCV, Zero)
                Name (NL1V, Zero)
                Name (ND2V, Zero)
                Name (ND1V, Zero)
                Name (NLRV, Zero)
                Name (NLDV, Zero)
                Name (NEAV, Zero)
                Name (NEBV, Zero)
                Name (NECV, Zero)
                Name (NRAV, Zero)
                Name (NMBV, Zero)
                Name (NMVV, Zero)
                Name (NPBV, Zero)
                Name (NPVV, Zero)
                Name (NRPN, Zero)
                Name (MXIE, Zero)
                Name (ID3C, Zero)
                Name (ID3H, Zero)
                Name (CSAV, Zero)
                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    ADBG (Concatenate ("_PS3r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD3 ()
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    ADBG (Concatenate ("_PS0r:", ToHexString (_ADR)))
                    If (IR3D ())
                    {
                        Return (Zero)
                    }

                    NVD0 ()
                }

                Method (RL23, 0, NotSerialized)
                {
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x04, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x04))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFFF, 0x08, One)
                }

                Method (RLA, 0, NotSerialized)
                {
                    RDCA (NCRN, 0x0420, 0xBFFFFFFF, Zero, One)
                    RDCA (NCRN, 0xE2, 0xFFFFFFFF, 0x08, One)
                    Sleep (0x10)
                    Local0 = Zero
                    While ((RDCA (NCRN, 0xE2, Zero, Zero, Zero) & 0x08))
                    {
                        If ((Local0 > 0x04))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0420, 0xFFFFFFFF, 0x40000000, One)
                    Local0 = Zero
                    While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                    {
                        If ((Local0 > 0x08))
                        {
                            Break
                        }

                        Sleep (0x10)
                        Local0++
                    }

                    RDCA (NCRN, 0x0324, 0xFFFFFFF7, Zero, One)
                }

                Method (RPON, 0, Serialized)
                {
                    ADBG (Concatenate ("RPONs: ", ToHexString (_ADR)))
                    If ((ID3C == Zero))
                    {
                        ADBG ("RPON: no D3C")
                        Return (Zero)
                    }

                    RSON (NRPN)
                    RLA ()
                    Sleep (0x64)
                    ID3C = Zero
                    ADBG (Concatenate ("RPONe: ", ToHexString (_ADR)))
                }

                Method (RPOF, 0, Serialized)
                {
                    ADBG (Concatenate ("RPOFs: ", ToHexString (_ADR)))
                    If ((ID3H == Zero))
                    {
                        ADBG ("RPOF: No D3H")
                        BreakPoint
                        Return (Zero)
                    }

                    If (!D3CS (NRPN))
                    {
                        Return (Zero)
                    }

                    RL23 ()
                    RSOF (NRPN)
                    ID3C = One
                }

                Method (SAVC, 0, Serialized)
                {
                    ADBG (Concatenate ("SAVC:", ToHexString (_ADR)))
                    PCMD = RDCA (NCRN, 0x04, Zero, Zero, 0x02)
                    If ((NITV == One))
                    {
                        PRBI = 0x24
                        PRBD = RDCA (NCRN, 0x24, Zero, Zero, 0x02)
                    }
                    ElseIf ((NITV == 0x02))
                    {
                        PRBI = 0x10
                        PRBD = RDCA (NCRN, 0x10, Zero, Zero, 0x02)
                        OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                        Field (MCRC, AnyAcc, NoLock, Preserve)
                        {
                            SCSO,   8, 
                            Offset (0x02), 
                            TCSO,   8, 
                                ,   7, 
                            RE,     1
                        }

                        MXIE = RDCA (NCRN, TCSO, Zero, Zero, 0x02)
                    }

                    CSAV = One
                }

                Method (NVD3, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD3:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == One))
                    {
                        ADBG ("Skip in D3")
                        Return (Zero)
                    }

                    SAVC ()
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, 0x03, 0x03)
                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, 0x03, One)
                    ID3H = One
                    Return (Zero)
                }

                Method (NVD0, 0, Serialized)
                {
                    ADBG (Concatenate ("NVD0:", ToHexString (_ADR)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    If ((ID3H == Zero))
                    {
                        ADBG ("Remap already in D0")
                        Return (Zero)
                    }

                    RDCA (NCRN, 0xA4, 0xFFFFFFFC, Zero, One)
                    RDCA (NCRN, (NPMV + 0x04), 0xFFFFFFFC, Zero, 0x03)
                    If ((CSAV == One))
                    {
                        CNRS ()
                        If ((NITV == 0x02))
                        {
                            OperationRegion (MCRC, SystemMemory, (GPCB () + 0x000B833C), 0x04)
                            Field (MCRC, AnyAcc, NoLock, Preserve)
                            {
                                SCSO,   8, 
                                Offset (0x02), 
                                TCSO,   8, 
                                    ,   7, 
                                RE,     1
                            }

                            RDCA (NCRN, TCSO, 0xFFFFFFFF, (MXIE & 0x80000000), 0x03)
                            ADBG ("NVD0:  MSIXe")
                        }
                    }
                    Else
                    {
                        ADBG ("Skip remap restore")
                    }

                    ID3H = Zero
                    Return (Zero)
                }

                Method (CNRS, 0, Serialized)
                {
                    ADBG (Concatenate ("CNRSs ", ToDecimalString (Timer)))
                    If ((NITV == Zero))
                    {
                        Return (Zero)
                    }

                    RDCA (NCRN, 0x10, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x14, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x18, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x1C, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x20, Zero, Zero, 0x03)
                    RDCA (NCRN, 0x24, Zero, Zero, 0x03)
                    RDCA (NCRN, PRBI, Zero, PRBD, 0x03)
                    RDCA (NCRN, 0x04, 0xFFFFFFF8, PCMD, 0x03)
                    If ((NL1V != Zero))
                    {
                        RDCA (NCRN, (NL1V + 0x0C), 0xFFFFFF00, ND2V, 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0x0F, (ND1V & 0xFFFFFFF0), 0x03)
                        RDCA (NCRN, (NL1V + 0x08), 0xFFFFFFFF, ND1V, 0x03)
                    }

                    If ((NLRV != Zero))
                    {
                        RDCA (NCRN, (NLRV + 0x04), 0xFFFFFFFF, NLDV, 0x03)
                    }

                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFEBF, (NEAV & 0xFFFC), 0x03)
                    RDCA (NCRN, (NPCV + 0x28), 0xFFFFFBFF, NECV, 0x03)
                    RDCA (NCRN, (NPCV + 0x08), 0xFFFFFF1F, NEBV, 0x03)
                    RDCA (NCRN, 0x68, 0xFFFFFBFF, NRAV, One)
                    If (((NEAV & 0x40) == 0x40))
                    {
                        RDCA (NCRN, 0x50, 0xFFFFFFDF, 0x20, One)
                        ADBG (Concatenate ("CNRSw ", ToDecimalString (Timer)))
                        While (((RDCA (NCRN, 0x52, Zero, Zero, Zero) & 0x2000) == Zero))
                        {
                            Stall (0x0A)
                        }
                    }

                    ADBG (Concatenate ("CNRSx ", ToDecimalString (Timer)))
                    RDCA (NCRN, (NPCV + 0x10), 0xFFFFFFFC, (NEAV & 0x03), 0x03)
                    If ((NMVV != Zero))
                    {
                        RDCA (NCRN, NMBV, Zero, NMVV, 0x03)
                    }

                    If ((NPVV != Zero))
                    {
                        RDCA (NCRN, NPBV, Zero, NPVV, 0x03)
                    }

                    ADBG (Concatenate ("CNRSe ", ToDecimalString (Timer)))
                }
            }

            Method (RDCA, 5, Serialized)
            {
                OperationRegion (RPAL, SystemMemory, (GPCB () + (0x000B8100 + Arg1)), 0x04)
                Field (RPAL, DWordAcc, Lock, Preserve)
                {
                    RPCD,   32
                }

                OperationRegion (EPAC, SystemMemory, (GPCB () + 0x000B8308), 0x08)
                Field (EPAC, DWordAcc, Lock, Preserve)
                {
                    CAIR,   32, 
                    CADR,   32
                }

                OperationRegion (NCRG, SystemMemory, (GPCB () + 0x000B8FC0), 0x04)
                Field (NCRG, DWordAcc, Lock, Preserve)
                {
                    CRGC,   32
                }

                If ((Arg0 > 0x02))
                {
                    Return (Zero)
                }
                Else
                {
                    CRGC = Arg0
                }

                Switch (ToInteger (Arg4))
                {
                    Case (Zero)
                    {
                        Return (RPCD) /* \_SB_.PCI0.SAT0.RDCA.RPCD */
                    }
                    Case (0x02)
                    {
                        CAIR = Arg1
                        Return (CADR) /* \_SB_.PCI0.SAT0.RDCA.CADR */
                    }
                    Case (One)
                    {
                        Local0 = (Arg2 & RPCD) /* \_SB_.PCI0.SAT0.RDCA.RPCD */
                        Local0 |= Arg3
                        RPCD = Local0
                    }
                    Case (0x03)
                    {
                        CAIR = Arg1
                        Local0 = (Arg2 & CADR) /* \_SB_.PCI0.SAT0.RDCA.CADR */
                        Local0 |= Arg3
                        CADR = Local0
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Method (D3CS, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PCI0.RP05.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PCI0.RP07.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PCI0.RP09.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PCI0.RP11.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PCI0.RP13.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PCI0.RP15.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PCI0.RP17.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PCI0.RP19.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PCI0.RP21.POFF))
                        {
                            Return (One)
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PCI0.RP23.POFF))
                        {
                            Return (One)
                        }
                    }

                }

                Return (Zero)
            }

            Method (RSON, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PCI0.RP05.PON))
                        {
                            ^^RP05.PON ()
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PCI0.RP07.PON))
                        {
                            ^^RP07.PON ()
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PCI0.RP09.PON))
                        {
                            ^^RP09.PON ()
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PCI0.RP11.PON))
                        {
                            ^^RP11.PON ()
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PCI0.RP13.PON))
                        {
                            ^^RP13.PON ()
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PCI0.RP15.PON))
                        {
                            ^^RP15.PON ()
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PCI0.RP17.PON))
                        {
                            ^^RP17.PON ()
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PCI0.RP19.PON))
                        {
                            ^^RP19.PON ()
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PCI0.RP21.PON))
                        {
                            ^^RP21.PON ()
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PCI0.RP23.PON))
                        {
                            ^^RP23.PON ()
                        }
                    }

                }
            }

            Method (RSOF, 1, Serialized)
            {
                Switch (Arg0)
                {
                    Case (0x04)
                    {
                        If (CondRefOf (\_SB.PCI0.RP05.POFF))
                        {
                            ^^RP05.POFF ()
                        }
                    }
                    Case (0x06)
                    {
                        If (CondRefOf (\_SB.PCI0.RP07.POFF))
                        {
                            ^^RP07.POFF ()
                        }
                    }
                    Case (0x08)
                    {
                        If (CondRefOf (\_SB.PCI0.RP09.POFF))
                        {
                            ^^RP09.POFF ()
                        }
                    }
                    Case (0x0A)
                    {
                        If (CondRefOf (\_SB.PCI0.RP11.POFF))
                        {
                            ^^RP11.POFF ()
                        }
                    }
                    Case (0x0C)
                    {
                        If (CondRefOf (\_SB.PCI0.RP13.POFF))
                        {
                            ^^RP13.POFF ()
                        }
                    }
                    Case (0x0E)
                    {
                        If (CondRefOf (\_SB.PCI0.RP15.POFF))
                        {
                            ^^RP15.POFF ()
                        }
                    }
                    Case (0x10)
                    {
                        If (CondRefOf (\_SB.PCI0.RP17.POFF))
                        {
                            ^^RP17.POFF ()
                        }
                    }
                    Case (0x12)
                    {
                        If (CondRefOf (\_SB.PCI0.RP19.POFF))
                        {
                            ^^RP19.POFF ()
                        }
                    }
                    Case (0x14)
                    {
                        If (CondRefOf (\_SB.PCI0.RP21.POFF))
                        {
                            ^^RP21.POFF ()
                        }
                    }
                    Case (0x16)
                    {
                        If (CondRefOf (\_SB.PCI0.RP23.POFF))
                        {
                            ^^RP23.POFF ()
                        }
                    }

                }
            }

            Name (VL0M, Zero)
            Name (VL1M, Zero)
            Name (VL2M, Zero)
            Name (VR3A, One)
            Method (IRM, 1, NotSerialized)
            {
                If ((VL0M & Arg0))
                {
                    Return (One)
                }
                ElseIf ((VL1M & Arg0))
                {
                    Return (One)
                }
                ElseIf ((VL2M & Arg0))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (PD3C, 1, NotSerialized)
            {
                Return ((!VR3A || IRM (Arg0)))
            }

            Scope (PRT0)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (One))
                }
            }

            Scope (PRT1)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x02))
                }
            }

            Scope (PRT2)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x04))
                }
            }

            Scope (PRT3)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x08))
                }
            }

            Scope (PRT4)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x10))
                }
            }

            Scope (PRT5)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x20))
                }
            }

            Scope (NVM1)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x0100))
                }
            }

            Scope (NVM2)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x0200))
                }
            }

            Scope (NVM3)
            {
                Method (IR3D, 0, NotSerialized)
                {
                    Return (PD3C (0x0400))
                }
            }

            Method (RSTD, 5, Serialized)
            {
                If ((Arg0 == ToUUID ("e03e3431-e510-4fa2-abc0-2d7e901245fe")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Name (RBUF, Buffer (One)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (RBUF, Zero, SFUN)
                            SFUN = 0x3F
                            Return (RBUF) /* \_SB_.PCI0.SAT0.RSTD.RBUF */
                        }
                        Case (One)
                        {
                            Arg4 = DerefOf (Arg3 [Zero])
                            Local0 = DerefOf (Arg3 [Zero])
                            ADBG (Concatenate ("RSTD.SET:", ToHexString (Local0)))
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x02)
                        {
                            Local0 = DerefOf (Arg3 [Zero])
                            ADBG (Concatenate ("RSTD.ON:", ToHexString (Local0)))
                            CPON (Local0)
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x03)
                        {
                            Local0 = DerefOf (Arg3 [Zero])
                            ADBG (Concatenate ("RSTD.OFF:", ToHexString (Local0)))
                            CPOF (Local0)
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }
                        Case (0x04)
                        {
                            Name (GETM, Buffer (One)
                            {
                                 0x00                                             // .
                            })
                            CreateByteField (GETM, Zero, GMSK)
                            GMSK = Arg4
                            ADBG (Concatenate ("RSTD.GET:", ToHexString (GMSK)))
                            Return (GETM) /* \_SB_.PCI0.SAT0.RSTD.GETM */
                        }
                        Case (0x05)
                        {
                            VR3A = DerefOf (Arg3 [Zero])
                            ADBG (Concatenate ("RSTD.D3A:", ToHexString (VR3A)))
                            Return (Zero)
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                0x02
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (D3AS, 3, Serialized)
            {
                Switch (Arg1)
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        If ((PSON == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (CPON, 1, Serialized)
            {
                If ((CondRefOf (\_SB.PCI0.SAT0.PRT0.SPON) && (Arg0 & One)))
                {
                    ^PRT0.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT1.SPON) && (Arg0 & 0x02)))
                {
                    ^PRT1.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT2.SPON) && (Arg0 & 0x04)))
                {
                    ^PRT2.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT3.SPON) && (Arg0 & 0x08)))
                {
                    ^PRT3.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT4.SPON) && (Arg0 & 0x10)))
                {
                    ^PRT4.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT5.SPON) && (Arg0 & 0x20)))
                {
                    ^PRT5.SPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM1.RPON) && (Arg0 & 0x0100)))
                {
                    ^NVM1.RPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM1.NVD0) && (Arg0 & 0x0100)))
                {
                    ^NVM1.NVD0 ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM2.RPON) && (Arg0 & 0x0200)))
                {
                    ^NVM2.RPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM2.NVD0) && (Arg0 & 0x0200)))
                {
                    ^NVM2.NVD0 ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM3.RPON) && (Arg0 & 0x0400)))
                {
                    ^NVM3.RPON ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM3.NVD0) && (Arg0 & 0x0400)))
                {
                    ^NVM3.NVD0 ()
                }
            }

            Method (CPOF, 1, Serialized)
            {
                If ((CondRefOf (\_SB.PCI0.SAT0.PRT0.SPOF) && (Arg0 & One)))
                {
                    ^PRT0.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT1.SPOF) && (Arg0 & 0x02)))
                {
                    ^PRT1.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT2.SPOF) && (Arg0 & 0x04)))
                {
                    ^PRT2.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT3.SPOF) && (Arg0 & 0x08)))
                {
                    ^PRT3.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT4.SPOF) && (Arg0 & 0x10)))
                {
                    ^PRT4.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.PRT5.SPOF) && (Arg0 & 0x20)))
                {
                    ^PRT5.SPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM1.NVD3) && (Arg0 & 0x0100)))
                {
                    ^NVM1.NVD3 ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM1.RPOF) && (Arg0 & 0x0100)))
                {
                    ^NVM1.RPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM2.NVD3) && (Arg0 & 0x0200)))
                {
                    ^NVM2.NVD3 ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM2.RPOF) && (Arg0 & 0x0200)))
                {
                    ^NVM2.RPOF ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM3.NVD3) && (Arg0 & 0x0400)))
                {
                    ^NVM3.NVD3 ()
                }

                If ((CondRefOf (\_SB.PCI0.SAT0.NVM3.RPOF) && (Arg0 & 0x0400)))
                {
                    ^NVM3.RPOF ()
                }
            }

            Device (VOL0)
            {
                Name (_ADR, 0x0080FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V0PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V0PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL0M)))
                }

                PowerResource (V0PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG (Concatenate ("VOL0._ON:", ToHexString (VL0M)))
                        If (VR3A)
                        {
                            CPON (VL0M)
                            _STA = One
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG (Concatenate ("VOL0._OFF:", ToHexString (VL0M)))
                        If (VR3A)
                        {
                            CPOF (VL0M)
                            _STA = Zero
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }
                }
            }

            Device (VOL1)
            {
                Name (_ADR, 0x0081FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V1PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V1PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL1M)))
                }

                PowerResource (V1PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG (Concatenate ("VOL1._ON:", ToHexString (VL1M)))
                        If (VR3A)
                        {
                            CPON (VL1M)
                            _STA = One
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG (Concatenate ("VOL1._OFF:", ToHexString (VL1M)))
                        If (VR3A)
                        {
                            CPOF (VL1M)
                            _STA = Zero
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }
                }
            }

            Device (VOL2)
            {
                Name (_ADR, 0x0082FFFF)  // _ADR: Address
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    V2PR
                })
                Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
                {
                    V2PR
                })
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    Return (RSTD (Arg0, Arg1, Arg2, Arg3, RefOf (VL2M)))
                }

                PowerResource (V2PR, 0x00, 0x0000)
                {
                    Name (_STA, One)  // _STA: Status
                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG (Concatenate ("VOL2._ON:", ToHexString (VL2M)))
                        If (VR3A)
                        {
                            CPON (VL2M)
                            _STA = One
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG (Concatenate ("VOL2._OFF:", ToHexString (VL2M)))
                        If (VR3A)
                        {
                            CPOF (VL2M)
                            _STA = Zero
                        }
                        Else
                        {
                            ADBG ("Global RTD3 lock")
                        }
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GPI0)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((GPHD == One))
                {
                    Return ("PNP0C02")
                }

                If ((PCHS == PCHH))
                {
                    Return ("INT3450")
                }

                Return ("INT34BB")
            }

            Name (LINK, "\\_SB.PCI0.GPI0")
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y25)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y26)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y28)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y27)
                    {
                        0x0000000E,
                    }
                })
                Name (CBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00010000,         // Address Length
                        _Y29)
                })
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y25._BAS, COM0)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y26._BAS, COM1)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y27._INT, IRQN)  // _INT: Interrupts
                COM0 = (SBRG + 0x006E0000)
                COM1 = (SBRG + 0x006D0000)
                IRQN = SGIR /* \SGIR */
                If ((PCHS == PCHH))
                {
                    CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y28._BAS, CMH3)  // _BAS: Base Address
                    CMH3 = (SBRG + 0x006B0000)
                    CreateDWordField (CBUF, \_SB.PCI0.GPI0._CRS._Y29._BAS, CMH4)  // _BAS: Base Address
                    CMH4 = (SBRG + 0x006A0000)
                    Return (ConcatenateResTemplate (RBUF, CBUF))
                }
                Else
                {
                    CreateDWordField (RBUF, \_SB.PCI0.GPI0._CRS._Y28._BAS, CML4)  // _BAS: Base Address
                    CML4 = (SBRG + 0x006A0000)
                    Return (RBUF) /* \_SB_.PCI0.GPI0._CRS.RBUF */
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((GPHD == One))
                {
                    Return (0x03)
                }

                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (LPD3, 2, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, Arg0, 0x88)
            Field (ICB1, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                BAR0,   64
            }

            Field (ICB1, ByteAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                PMEC,   8
            }

            PMEC = 0x03
            TEMP = PMEC /* \_SB_.PCI0.LPD3.PMEC */
            If ((Arg1 == One))
            {
                BAR0 = Zero
            }
        }

        Method (LPD0, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            PMEC &= 0xFFFF7FFC
            TEMP = PMEC /* \_SB_.PCI0.LPD0.PMEC */
        }

        Method (LHRV, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x08), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                HRV,    8
            }

            Return (HRV) /* \_SB_.PCI0.LHRV.HRV_ */
        }

        Method (GETD, 1, Serialized)
        {
            OperationRegion (ICB1, SystemMemory, (Arg0 + 0x84), 0x04)
            Field (ICB1, DWordAcc, NoLock, Preserve)
            {
                PMEC,   32
            }

            Return ((PMEC & 0x03))
        }

        Method (LCRS, 3, Serialized)
        {
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y2A)
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, _Y2B)
                {
                    0x00000014,
                }
            })
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y2A._BAS, BVAL)  // _BAS: Base Address
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y2A._LEN, BLEN)  // _LEN: Length
            CreateDWordField (RBUF, \_SB.PCI0.LCRS._Y2B._INT, IRQN)  // _INT: Interrupts
            BVAL = Arg1
            IRQN = Arg2
            If ((Arg0 == 0x03))
            {
                BLEN = 0x08
            }

            Return (RBUF) /* \_SB_.PCI0.LCRS.RBUF */
        }

        Method (LSTA, 1, Serialized)
        {
            If (((Arg0 == Zero) || (Arg0 == 0x03)))
            {
                Return (Zero)
            }

            If (CondRefOf (OSYS))
            {
                If ((OSYS < 0x07DC))
                {
                    Return (Zero)
                }
            }

            Return (0x0F)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SIRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_STA, 0x03)  // _STA: Status
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (ADDB, 3, Serialized)
            {
                Name (BUFF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00001000,         // Address Length
                        _Y2C)
                })
                CreateDWordField (BUFF, \_SB.PCI0.SIRC.ADDB._Y2C._BAS, ADDR)  // _BAS: Base Address
                CreateDWordField (BUFF, \_SB.PCI0.SIRC.ADDB._Y2C._LEN, LENG)  // _LEN: Length
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If (((Arg0 == 0x02) || (Arg0 == 0x03)))
                {
                    ADDR = Arg2
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                If ((Arg0 == 0x03))
                {
                    ADDR = (0x08 + Arg1)
                    LENG = 0x0FF8
                    ConcatenateResTemplate (Local0, BUFF, Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, ADDB (SMD0, SB00, SB10), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD1, SB01, SB11), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD2, SB02, SB12), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD3, SB03, SB13), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD4, SB04, SB14), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD5, SB05, SB15), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD6, SB06, SB16), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD7, SB07, SB17), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD8, SB08, SB18), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMD9, SB09, SB19), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMDA, SB0A, SB1A), Local1)
                Local0 = Local1
                ConcatenateResTemplate (Local0, ADDB (SMDB, SB0B, SB1B), Local1)
                Local0 = Local1
                If ((^^GPI0._STA () == Zero))
                {
                    ConcatenateResTemplate (Local0, ^^GPI0._CRS (), Local1)
                    Local0 = Local1
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C0)
        {
            If ((SMD0 != One))
            {
                Name (_HID, "INT34B2")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB10))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD0, SB00, SIR0))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD0))
                }
            }

            If ((SMD0 == One))
            {
                Name (_ADR, 0x00150000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB10))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB10)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB10, SMD0)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C1)
        {
            If ((SMD1 != One))
            {
                Name (_HID, "INT34B3")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB11))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD1, SB01, SIR1))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD1))
                }
            }

            If ((SMD1 == One))
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB11))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB11)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB11, SMD1)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C2)
        {
            If ((SMD2 != One))
            {
                Name (_HID, "INT34B4")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB12))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD2, SB02, SIR2))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD2))
                }
            }

            If ((SMD2 == One))
            {
                Name (_ADR, 0x00150002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB12))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB12)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB12, SMD2)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C3)
        {
            If ((SMD3 != One))
            {
                Name (_HID, "INT34B5")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB13))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD3, SB03, SIR3))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD3))
                }
            }

            If ((SMD3 == One))
            {
                Name (_ADR, 0x00150003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB13))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB13)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB13, SMD3)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C4)
        {
            If ((SMD4 != One))
            {
                Name (_HID, "INT34B6")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB14))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD4, SB04, SIR4))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD4))
                }
            }

            If ((SMD4 == One))
            {
                Name (_ADR, 0x00190000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB14))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB14)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB14, SMD4)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (I2C5)
        {
            If ((SMD5 != One))
            {
                Name (_HID, "INT34B7")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB15))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD5, SB05, SIR5))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD5))
                }
            }

            If ((SMD5 == One))
            {
                Name (_ADR, 0x00190001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB15))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB15)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB15, SMD5)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI0)
        {
            If ((SMD6 != One))
            {
                Name (_HID, "INT34B0")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB16))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD6, SB06, SIR6))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD6))
                }
            }

            If ((SMD6 == One))
            {
                Name (_ADR, 0x001E0002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB16))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB16)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB16, SMD6)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI1)
        {
            If ((SMD7 != One))
            {
                Name (_HID, "INT34B1")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB17))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD7, SB07, SIR7))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD7))
                }
            }

            If ((SMD7 == One))
            {
                Name (_ADR, 0x001E0003)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB17))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB17)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB17, SMD7)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (SPI2)
        {
            If ((SMD8 != One))
            {
                Name (_HID, "INT34BC")  // _HID: Hardware ID
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB18))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD8, SB08, SIR8))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD8))
                }
            }

            If ((SMD8 == One))
            {
                Name (_ADR, 0x00120006)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
            {
                Return (GETD (SB18))
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                LPD0 (SB18)
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
                LPD3 (SB18, SMD8)
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA00)
        {
            If ((SMD9 != One))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMD9 == 0x03))
                    {
                        Return (0x020CD041)
                    }
                    Else
                    {
                        Return ("INT34B8")
                    }
                }

                Name (_UID, "SerialIoUart0")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart0")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB19))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMD9, SB09, SIR9))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMD9))
                }
            }

            If ((SMD9 == One))
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            If ((SMD9 != 0x03))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB19))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB19)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB19, SMD9)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA01)
        {
            If ((SMDA != One))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMDA == 0x03))
                    {
                        Return (0x020CD041)
                    }
                    Else
                    {
                        Return ("INT34B9")
                    }
                }

                Name (_UID, "SerialIoUart1")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart1")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB1A))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMDA, SB0A, SIRA))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMDA))
                }
            }

            If ((SMDA == One))
            {
                Name (_ADR, 0x001E0001)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            If ((SMDA != 0x03))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB1A))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB1A)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB1A, SMDA)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (UA02)
        {
            If ((SMDB != One))
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((SMDB == 0x03))
                    {
                        Return (0x020CD041)
                    }
                    Else
                    {
                        Return ("INT34BA")
                    }
                }

                Name (_UID, "SerialIoUart2")  // _UID: Unique ID
                Name (_DDN, "SerialIoUart2")  // _DDN: DOS Device Name
                Method (_HRV, 0, NotSerialized)  // _HRV: Hardware Revision
                {
                    Return (LHRV (SB1B))
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (LCRS (SMDB, SB0B, SIRB))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (LSTA (SMDB))
                }
            }

            If ((SMDB == One))
            {
                Name (_ADR, 0x00190002)  // _ADR: Address
                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            If ((SMDB != 0x03))
            {
                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (GETD (SB1B))
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    LPD0 (SB1B)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    LPD3 (SB1B, SMDB)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PUFS)
        {
            Name (_ADR, 0x00120005)  // _ADR: Address
            Name (_DDN, "Intel(R) UFS Controller")  // _DDN: DOS Device Name
            Device (CARD)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }
            }
        }

        Device (PEMC)
        {
            Name (_ADR, 0x001A0000)  // _ADR: Address
            OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
            Field (SCSR, WordAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                PSTA,   32, 
                Offset (0xA2), 
                    ,   2, 
                PGEN,   1
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                Stall (0x32)
                PGEN = Zero
                PSTA &= 0xFFFFFFFC
                TEMP = PSTA /* \_SB_.PCI0.PEMC.PSTA */
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                PGEN = One
                PSTA |= 0x03
                TEMP = PSTA /* \_SB_.PCI0.PEMC.PSTA */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                ADBG (Concatenate ("EMH4=", ToDecimalString (EMH4)))
                If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61")))
                {
                    If ((Arg1 >= Zero))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((EMH4 == One))
                                {
                                    Return (Buffer (0x02)
                                    {
                                         0x61, 0x02                                       // a.
                                    })
                                }

                                Return (Buffer (0x02)
                                {
                                     0x21, 0x02                                       // !.
                                })
                            }
                            Case (0x05)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (0x06)
                            {
                                Return (Buffer (One)
                                {
                                     0x05                                             // .
                                })
                            }
                            Case (0x09)
                            {
                                Switch (EMDS)
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                             // .
                                        })
                                    }
                                    Case (One)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                    Case (0x04)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x04                                             // .
                                        })
                                    }

                                }
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Device (CARD)
            {
                Name (_ADR, 0x08)  // _ADR: Address
                Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                {
                    Return (Zero)
                }
            }
        }

        Device (PSDC)
        {
            Name (_ADR, 0x00140005)  // _ADR: Address
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    GpioInt (Edge, ActiveBoth, SharedAndWake, PullNone, 0x2710,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                    GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0000
                        }
                })
                CreateWordField (SBFI, 0x17, SDIP)
                CreateWordField (SBFI, 0x3F, SDGP)
                If ((PCHS == PCHL))
                {
                    SDIP = GNUM (0x04090027)
                    SDGP = GNUM (0x04090027)
                }
                Else
                {
                    SDIP = GNUM (0x030C0006)
                    SDGP = GNUM (0x030C0006)
                }

                Return (SBFI) /* \_SB_.PCI0.PSDC._CRS.SBFI */
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            OperationRegion (SCSR, PCI_Config, Zero, 0x0100)
            Field (SCSR, WordAcc, NoLock, Preserve)
            {
                Offset (0x84), 
                PSTA,   32, 
                Offset (0xA2), 
                    ,   2, 
                PGEN,   1
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                PGEN = Zero
                PSTA &= 0xFFFFFFFC
                TEMP = PSTA /* \_SB_.PCI0.PSDC.PSTA */
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                PGEN = One
                PSTA |= 0x03
                TEMP = PSTA /* \_SB_.PCI0.PSDC.PSTA */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61")))
                {
                    If ((Arg1 >= Zero))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x19                                             // .
                                })
                            }
                            Case (0x03)
                            {
                                Sleep (0x64)
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (0x04)
                            {
                                Sleep (0x64)
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (ISHD)
        {
            Name (_ADR, 0x00130000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (HECI)
        {
            Name (_ADR, 0x00160000)  // _ADR: Address
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (CNVW)
        {
            Name (_ADR, 0x00140003)  // _ADR: Address
            OperationRegion (CWAR, PCI_Config, Zero, 0x0100)
            Field (CWAR, WordAcc, NoLock, Preserve)
            {
                VDID,   32, 
                    ,   1, 
                WMSE,   1, 
                WBME,   1, 
                Offset (0x10), 
                WBR0,   64, 
                Offset (0x44), 
                    ,   28, 
                WFLR,   1, 
                Offset (0x48), 
                    ,   15, 
                WIFR,   1, 
                Offset (0xCC), 
                WPMS,   32
            }

            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x6D, 0x04))
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
            }

            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    If ((WFLR == One))
                    {
                        WBR0 = Zero
                        WPMS = Zero
                        WBME = Zero
                        WMSE = Zero
                        WIFR = One
                    }
                }
            }

            Name (_PRR, Package (0x01)  // _PRR: Power Resource for Reset
            {
                WRST
            })
        }

        Method (CNIP, 0, NotSerialized)
        {
            If ((^CNVW.VDID != 0xFFFFFFFF))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (SBTE, 1, Serialized)
        {
            If ((PCHS == PCHL))
            {
                Local0 = 0x04090000
            }
            Else
            {
                Local0 = 0x030C0000
            }

            SGOV (Local0, Arg0)
        }

        Method (GBTE, 0, NotSerialized)
        {
            If ((PCHS == PCHL))
            {
                Local0 = 0x04090000
            }
            Else
            {
                Local0 = 0x030C0000
            }

            Return (GGOV (Local0))
        }
    }

    If ((PTHM == 0x02))
    {
        Scope (_SB.PCI0)
        {
            Device (PCHT)
            {
                Name (_HID, "INTC1001")  // _HID: Hardware ID
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadWrite,
                        0xFE100000,         // Address Base
                        0x00100000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFC800000,         // Address Base
                        0x00800000,         // Address Length
                        )
                })
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (HPET)
        {
            Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xFED00000,         // Address Base
                    0x00000400,         // Address Length
                    _Y2D)
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HPTE)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (HPTE)
                {
                    CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y2D._BAS, HPT0)  // _BAS: Base Address
                    HPT0 = HPTB /* \HPTB */
                }

                Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (MATH)
        {
            Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x00F0,             // Range Minimum
                    0x00F0,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {13}
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PCHS == PCHH))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (RTC)
        {
            Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IRQNoFlags ()
                    {8}
            })
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        Device (CWDT)
        {
            Name (_HID, EisaId ("INT3F0D") /* ACPI Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0000,             // Range Minimum
                        0x0000,             // Range Maximum
                        0x04,               // Alignment
                        0x04,               // Length
                        _Y2E)
                })
                CreateWordField (RBUF, \_SB.PCI0.LPCB.CWDT._CRS._Y2E._MIN, OMIN)  // _MIN: Minimum Base Address
                CreateWordField (RBUF, \_SB.PCI0.LPCB.CWDT._CRS._Y2E._MAX, OMAX)  // _MAX: Maximum Base Address
                OMIN = (PMBS + 0x54)
                OMAX = (PMBS + 0x54)
                Return (RBUF) /* \_SB_.PCI0.LPCB.CWDT._CRS.RBUF */
            }
        }
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Name (LDLY, 0x012C)
    Name (TNVB, 0xFFFF0000)
    Name (TNVL, 0xAA55)
    OperationRegion (BNVS, SystemMemory, 0x5BD25000, 0x0043)
    Field (BNVS, AnyAcc, Lock, Preserve)
    {
        TBSF,   8, 
        SOHP,   8, 
        TWIN,   8, 
        GP5F,   8, 
        NOHP,   8, 
        TBSE,   8, 
        WKFN,   8, 
        TBTS,   8, 
        TARS,   8, 
        FPEN,   32, 
        FPG0,   32, 
        FP0L,   8, 
        CPG0,   32, 
        RSG0,   32, 
        RS0L,   8, 
        DTCP,   8, 
        RPS0,   8, 
        RPT0,   8, 
        RPS1,   8, 
        RPT1,   8, 
        RPN0,   8, 
        RPN1,   8, 
        FPG1,   32, 
        FP1L,   8, 
        CPG1,   32, 
        RSG1,   32, 
        RS1L,   8, 
        CGST,   8, 
        DTPT,   8, 
        TRWA,   8, 
        ACDC,   8, 
        DT0E,   8, 
        DT1E,   8, 
        TASP,   8, 
        TL1S,   8, 
        TCLK,   8, 
        TLTR,   8, 
        TPTM,   8, 
        TWAK,   8, 
        TBOD,   16, 
        TSXW,   8, 
        RTBT,   8, 
        RTBC,   8, 
        TBCD,   16
    }

    Name (TRDO, Zero)
    Name (TRD3, Zero)
    Name (TBPE, Zero)
    Name (TOFF, Zero)
    Method (TBON, 0, Serialized)
    {
        TRDO = One
        Switch (ToInteger (RPS0))
        {
            Case (One)
            {
                If (CondRefOf (\_SB.PCI0.RP01.PON))
                {
                    \_SB.PCI0.RP01.PON ()
                }
            }
            Case (0x02)
            {
                If (CondRefOf (\_SB.PCI0.RP02.PON))
                {
                    \_SB.PCI0.RP02.PON ()
                }
            }
            Case (0x03)
            {
                If (CondRefOf (\_SB.PCI0.RP03.PON))
                {
                    \_SB.PCI0.RP03.PON ()
                }
            }
            Case (0x04)
            {
                If (CondRefOf (\_SB.PCI0.RP04.PON))
                {
                    \_SB.PCI0.RP04.PON ()
                }
            }
            Case (0x05)
            {
                If (CondRefOf (\_SB.PCI0.RP05.PON))
                {
                    \_SB.PCI0.RP05.PON ()
                }
            }
            Case (0x06)
            {
                If (CondRefOf (\_SB.PCI0.RP06.PON))
                {
                    \_SB.PCI0.RP06.PON ()
                }
            }
            Case (0x07)
            {
                If (CondRefOf (\_SB.PCI0.RP07.PON))
                {
                    \_SB.PCI0.RP07.PON ()
                }
            }
            Case (0x08)
            {
                If (CondRefOf (\_SB.PCI0.RP08.PON))
                {
                    \_SB.PCI0.RP08.PON ()
                }
            }
            Case (0x09)
            {
                If (CondRefOf (\_SB.PCI0.RP09.PON))
                {
                    \_SB.PCI0.RP09.PON ()
                }
            }
            Case (0x0A)
            {
                If (CondRefOf (\_SB.PCI0.RP10.PON))
                {
                    \_SB.PCI0.RP10.PON ()
                }
            }
            Case (0x0B)
            {
                If (CondRefOf (\_SB.PCI0.RP11.PON))
                {
                    \_SB.PCI0.RP11.PON ()
                }
            }
            Case (0x0C)
            {
                If (CondRefOf (\_SB.PCI0.RP12.PON))
                {
                    \_SB.PCI0.RP12.PON ()
                }
            }
            Case (0x0D)
            {
                If (CondRefOf (\_SB.PCI0.RP13.PON))
                {
                    \_SB.PCI0.RP13.PON ()
                }
            }
            Case (0x0E)
            {
                If (CondRefOf (\_SB.PCI0.RP14.PON))
                {
                    \_SB.PCI0.RP14.PON ()
                }
            }
            Case (0x0F)
            {
                If (CondRefOf (\_SB.PCI0.RP15.PON))
                {
                    \_SB.PCI0.RP15.PON ()
                }
            }
            Case (0x10)
            {
                If (CondRefOf (\_SB.PCI0.RP16.PON))
                {
                    \_SB.PCI0.RP16.PON ()
                }
            }
            Case (0x11)
            {
                If (CondRefOf (\_SB.PCI0.RP17.PON))
                {
                    \_SB.PCI0.RP17.PON ()
                }
            }
            Case (0x12)
            {
                If (CondRefOf (\_SB.PCI0.RP18.PON))
                {
                    \_SB.PCI0.RP18.PON ()
                }
            }
            Case (0x13)
            {
                If (CondRefOf (\_SB.PCI0.RP19.PON))
                {
                    \_SB.PCI0.RP19.PON ()
                }
            }
            Case (0x14)
            {
                If (CondRefOf (\_SB.PCI0.RP20.PON))
                {
                    \_SB.PCI0.RP20.PON ()
                }
            }
            Case (0x15)
            {
                If (CondRefOf (\_SB.PCI0.RP21.PON))
                {
                    \_SB.PCI0.RP21.PON ()
                }
            }
            Case (0x16)
            {
                If (CondRefOf (\_SB.PCI0.RP22.PON))
                {
                    \_SB.PCI0.RP22.PON ()
                }
            }
            Case (0x17)
            {
                If (CondRefOf (\_SB.PCI0.RP23.PON))
                {
                    \_SB.PCI0.RP23.PON ()
                }
            }
            Case (0x18)
            {
                If (CondRefOf (\_SB.PCI0.RP24.PON))
                {
                    \_SB.PCI0.RP24.PON ()
                }
            }

        }

        TRDO = Zero
    }

    Method (TBTD, 2, Serialized)
    {
        ADBG ("TBTD")
        If ((Arg1 == One))
        {
            Switch (ToInteger (Arg0))
            {
                Case (Package (0x08)
                    {
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08
                    }

)
                {
                    Local0 = 0x1C
                }
                Case (Package (0x08)
                    {
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10
                    }

)
                {
                    Local0 = 0x1D
                }
                Case (Package (0x08)
                    {
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18
                    }

)
                {
                    Local0 = 0x1B
                }

            }
        }
        ElseIf ((Arg1 == 0x02))
        {
            Switch (ToInteger (Arg0))
            {
                Case (Package (0x03)
                    {
                        One, 
                        0x02, 
                        0x03
                    }

)
                {
                    Local0 = One
                }

            }
        }
        Else
        {
            Local0 = 0xFF
        }

        ADBG ("Device no")
        ADBG (Local0)
        Return (Local0)
    }

    Method (TBTF, 2, Serialized)
    {
        ADBG ("TBTF")
        If ((Arg1 == One))
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Local0 = (RPA1 & 0x0F)
                }
                Case (0x02)
                {
                    Local0 = (RPA2 & 0x0F)
                }
                Case (0x03)
                {
                    Local0 = (RPA3 & 0x0F)
                }
                Case (0x04)
                {
                    Local0 = (RPA4 & 0x0F)
                }
                Case (0x05)
                {
                    Local0 = (RPA5 & 0x0F)
                }
                Case (0x06)
                {
                    Local0 = (RPA6 & 0x0F)
                }
                Case (0x07)
                {
                    Local0 = (RPA7 & 0x0F)
                }
                Case (0x08)
                {
                    Local0 = (RPA8 & 0x0F)
                }
                Case (0x09)
                {
                    Local0 = (RPA9 & 0x0F)
                }
                Case (0x0A)
                {
                    Local0 = (RPAA & 0x0F)
                }
                Case (0x0B)
                {
                    Local0 = (RPAB & 0x0F)
                }
                Case (0x0C)
                {
                    Local0 = (RPAC & 0x0F)
                }
                Case (0x0D)
                {
                    Local0 = (RPAD & 0x0F)
                }
                Case (0x0E)
                {
                    Local0 = (RPAE & 0x0F)
                }
                Case (0x0F)
                {
                    Local0 = (RPAF & 0x0F)
                }
                Case (0x10)
                {
                    Local0 = (RPAG & 0x0F)
                }
                Case (0x11)
                {
                    Local0 = (RPAH & 0x0F)
                }
                Case (0x12)
                {
                    Local0 = (RPAI & 0x0F)
                }
                Case (0x13)
                {
                    Local0 = (RPAJ & 0x0F)
                }
                Case (0x14)
                {
                    Local0 = (RPAK & 0x0F)
                }
                Case (0x15)
                {
                    Local0 = (RPAL & 0x0F)
                }
                Case (0x16)
                {
                    Local0 = (RPAM & 0x0F)
                }
                Case (0x17)
                {
                    Local0 = (RPAN & 0x0F)
                }
                Case (0x18)
                {
                    Local0 = (RPAO & 0x0F)
                }

            }
        }
        ElseIf ((Arg1 == 0x02))
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Local0 = Zero
                }
                Case (0x02)
                {
                    Local0 = One
                }
                Case (0x03)
                {
                    Local0 = 0x02
                }

            }
        }
        Else
        {
            Local0 = 0xFF
        }

        ADBG ("Function no")
        ADBG (Local0)
        Return (Local0)
    }

    Method (MMRP, 2, Serialized)
    {
        Local0 = \_SB.PCI0.GPCB ()
        Local0 += (TBTD (Arg0, Arg1) << 0x0F)
        Local0 += (TBTF (Arg0, Arg1) << 0x0C)
        Return (Local0)
    }

    Method (MMTB, 2, Serialized)
    {
        ADBG ("MMTB")
        Local0 = \_SB.PCI0.GPCB ()
        Local0 += (TBTD (Arg0, Arg1) << 0x0F)
        Local0 += (TBTF (Arg0, Arg1) << 0x0C)
        OperationRegion (MMMM, SystemMemory, Local0, 0x1A)
        Field (MMMM, AnyAcc, NoLock, Preserve)
        {
            Offset (0x19), 
            SBUS,   8
        }

        Local2 = SBUS /* \MMTB.SBUS */
        Local0 = \_SB.PCI0.GPCB ()
        Local2 *= 0x00100000
        Local0 += Local2
        ADBG ("TBT-US-ADR")
        ADBG (Local0)
        Return (Local0)
    }

    Method (FFTB, 2, Serialized)
    {
        ADBG ("FFTB")
        Local0 = (MMTB (Arg0, Arg1) + 0x0548)
        OperationRegion (PXVD, SystemMemory, Local0, 0x08)
        Field (PXVD, DWordAcc, NoLock, Preserve)
        {
            TB2P,   32, 
            P2TB,   32
        }

        Local1 = TB2P /* \FFTB.TB2P */
        If ((Local1 == 0xFFFFFFFF))
        {
            ADBG ("FFTb 1")
            Return (One)
        }
        Else
        {
            ADBG ("FFTb 0")
            Return (Zero)
        }
    }

    Name (TDMA, 0x80000000)
    Scope (_GPE)
    {
        Method (OSUP, 2, Serialized)
        {
            ADBG ("OSUP")
            Local0 = (Arg0 + 0x0540)
            OperationRegion (PXVD, SystemMemory, Local0, 0x10)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                IT2P,   32, 
                IP2T,   32, 
                DT2P,   32, 
                DP2T,   32
            }

            Local1 = 0x64
            If ((Arg1 == 0x80))
            {
                IP2T = 0x0D
            }
            Else
            {
                DP2T = 0x0D
            }

            While ((Local1 > Zero))
            {
                Local1 = (Local1 - One)
                If ((Arg1 == 0x80))
                {
                    Local2 = IT2P /* \_GPE.OSUP.IT2P */
                }
                Else
                {
                    Local2 = DT2P /* \_GPE.OSUP.DT2P */
                }

                If (((Local2 == 0xFFFFFFFF) && (Arg1 == Zero)))
                {
                    ADBG ("Dev gone")
                    Return (0x02)
                }

                If ((Local2 & One))
                {
                    ADBG ("Cmd acknowledged")
                    Break
                }

                Sleep (0x32)
            }

            If ((Arg1 == 0x80))
            {
                IP2T = Zero
                Local1 = 0x64
                While ((Local1 > Zero))
                {
                    Local1 = (Local1 - One)
                    Local2 = IT2P /* \_GPE.OSUP.IT2P */
                    If ((Local2 & One))
                    {
                        ADBG ("Cmd acknowledged")
                        Break
                    }

                    Sleep (0x32)
                }
            }
            ElseIf ((TRWA == One))
            {
                DP2T = 0x0C
            }
            Else
            {
                DP2T = Zero
            }

            ADBG ("End-of-OSUP")
            Return (One)
        }

        Method (TBFF, 2, Serialized)
        {
            ADBG ("TBFF")
            Local0 = MMTB (Arg0, Arg1)
            OperationRegion (PXVD, SystemMemory, Local0, 0x08)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                VEDI,   32, 
                CMDR,   32
            }

            Local1 = VEDI /* \_GPE.TBFF.VEDI */
            If ((Local1 == 0xFFFFFFFF))
            {
                If ((TWIN != Zero))
                {
                    If ((CMDR == 0xFFFFFFFF))
                    {
                        Return (0x02)
                    }

                    Return (One)
                }
                Else
                {
                    Return (OSUP (Local0, Zero))
                }
            }
            Else
            {
                ADBG ("Dev Present")
                Return (Zero)
            }
        }

        Method (TSUB, 2, Serialized)
        {
            ADBG ("TSUB")
            Local0 = \_SB.PCI0.GPCB ()
            Local0 += (TBTD (Arg0, Arg1) << 0x0F)
            Local0 += (TBTF (Arg0, Arg1) << 0x0C)
            ADBG ("ADR")
            ADBG (Local0)
            OperationRegion (MMMM, SystemMemory, Local0, 0x1A)
            Field (MMMM, AnyAcc, NoLock, Preserve)
            {
                Offset (0x19), 
                SBUS,   8
            }

            ADBG ("Sec Bus")
            ADBG (SBUS)
            Return (SBUS) /* \_GPE.TSUB.SBUS */
        }

        Method (TSUP, 2, Serialized)
        {
            ADBG ("TSUB")
            Local0 = \_SB.PCI0.GPCB ()
            Local0 += (TBTD (Arg0, Arg1) << 0x0F)
            Local0 += (TBTF (Arg0, Arg1) << 0x0C)
            ADBG ("ADR:")
            ADBG (Local0)
            OperationRegion (MMMM, SystemMemory, Local0, 0x30)
            Field (MMMM, AnyAcc, NoLock, Preserve)
            {
                CMDS,   32, 
                Offset (0x19), 
                SBUS,   8, 
                SBU5,   8, 
                Offset (0x1C), 
                SEIO,   32, 
                MMBL,   32, 
                PMBL,   32
            }

            ADBG ("Pmem of TBT RP:")
            ADBG (PMBL)
            Return (PMBL) /* \_GPE.TSUP.PMBL */
        }

        Method (WSUB, 2, Serialized)
        {
            ADBG (Concatenate ("WSUB=", ToHexString (Arg0)))
            ADBG (ToHexString (Timer))
            Local0 = Zero
            Local1 = Zero
            While (One)
            {
                Local1 = TSUP (Arg0, Arg1)
                If ((Local1 > 0x0001FFF1))
                {
                    ADBG ("WSUB-Finished")
                    Break
                }
                Else
                {
                    Local0 += One
                    If ((Local0 > 0x03E8))
                    {
                        Sleep (0x03E8)
                        ADBG ("WSUB-Deadlock")
                    }
                    Else
                    {
                        Sleep (0x10)
                    }
                }
            }

            ADBG (Concatenate ("WSUb=", ToHexString (Local1)))
        }

        Method (WWAK, 0, NotSerialized)
        {
            ADBG ("WWAK")
            Wait (WFEV, 0xFFFF)
            Signal (WFEV)
        }

        Method (NTFY, 2, Serialized)
        {
            ADBG ("NTFY")
            If ((NOHP == One))
            {
                If ((Arg1 == One))
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (One)
                        {
                            ADBG ("Notify RP01")
                            Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                        }
                        Case (0x02)
                        {
                            ADBG ("Notify RP02")
                            Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                        }
                        Case (0x03)
                        {
                            ADBG ("Notify RP03")
                            Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                        }
                        Case (0x04)
                        {
                            ADBG ("Notify RP04")
                            Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                        }
                        Case (0x05)
                        {
                            ADBG ("Notify RP05")
                            Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                        }
                        Case (0x06)
                        {
                            ADBG ("Notify RP06")
                            Notify (\_SB.PCI0.RP06, Zero) // Bus Check
                        }
                        Case (0x07)
                        {
                            ADBG ("Notify RP07")
                            Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                        }
                        Case (0x08)
                        {
                            ADBG ("Notify RP08")
                            Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                        }
                        Case (0x09)
                        {
                            ADBG ("Notify RP09")
                            Notify (\_SB.PCI0.RP09, Zero) // Bus Check
                        }
                        Case (0x0A)
                        {
                            ADBG ("Notify RP10")
                            Notify (\_SB.PCI0.RP10, Zero) // Bus Check
                        }
                        Case (0x0B)
                        {
                            ADBG ("Notify RP11")
                            Notify (\_SB.PCI0.RP11, Zero) // Bus Check
                        }
                        Case (0x0C)
                        {
                            ADBG ("Notify RP12")
                            Notify (\_SB.PCI0.RP12, Zero) // Bus Check
                        }
                        Case (0x0D)
                        {
                            ADBG ("Notify RP13")
                            Notify (\_SB.PCI0.RP13, Zero) // Bus Check
                        }
                        Case (0x0E)
                        {
                            ADBG ("Notify RP14")
                            Notify (\_SB.PCI0.RP14, Zero) // Bus Check
                        }
                        Case (0x0F)
                        {
                            ADBG ("Notify RP15")
                            Notify (\_SB.PCI0.RP15, Zero) // Bus Check
                        }
                        Case (0x10)
                        {
                            ADBG ("Notify RP16")
                            Notify (\_SB.PCI0.RP16, Zero) // Bus Check
                        }
                        Case (0x11)
                        {
                            ADBG ("Notify RP17")
                            Notify (\_SB.PCI0.RP17, Zero) // Bus Check
                        }
                        Case (0x12)
                        {
                            ADBG ("Notify RP18")
                            Notify (\_SB.PCI0.RP18, Zero) // Bus Check
                        }
                        Case (0x13)
                        {
                            ADBG ("Notify RP19")
                            Notify (\_SB.PCI0.RP19, Zero) // Bus Check
                        }
                        Case (0x14)
                        {
                            ADBG ("Notify RP20")
                            Notify (\_SB.PCI0.RP20, Zero) // Bus Check
                        }
                        Case (0x15)
                        {
                            ADBG ("Notify RP21")
                            Notify (\_SB.PCI0.RP21, Zero) // Bus Check
                        }
                        Case (0x16)
                        {
                            ADBG ("Notify RP22")
                            Notify (\_SB.PCI0.RP22, Zero) // Bus Check
                        }
                        Case (0x17)
                        {
                            ADBG ("Notify RP23")
                            Notify (\_SB.PCI0.RP23, Zero) // Bus Check
                        }
                        Case (0x18)
                        {
                            ADBG ("Notify RP24")
                            Notify (\_SB.PCI0.RP24, Zero) // Bus Check
                        }

                    }
                }
                ElseIf ((Arg1 == 0x02))
                {
                    Switch (ToInteger (Arg0))
                    {
                        Case (One)
                        {
                            ADBG ("Notify PEG0")
                            Notify (\_SB.PCI0.PEG0, Zero) // Bus Check
                        }
                        Case (0x02)
                        {
                            ADBG ("Notify PEG1")
                            Notify (\_SB.PCI0.PEG1, Zero) // Bus Check
                        }
                        Case (0x03)
                        {
                            ADBG ("Notify PEG2")
                            Notify (\_SB.PCI0.PEG2, Zero) // Bus Check
                        }

                    }
                }
            }

            P8XH (Zero, 0xC2)
            P8XH (One, 0xC2)
        }

        Method (GNIS, 2, Serialized)
        {
            ADBG ("GNIS")
            If ((GP5F == Zero))
            {
                ADBG ("GNIS_Dis=0")
                Return (Zero)
            }

            Local0 = (MMTB (Arg0, Arg1) + 0x0544)
            OperationRegion (PXVD, SystemMemory, Local0, 0x08)
            Field (PXVD, DWordAcc, NoLock, Preserve)
            {
                HPFI,   1, 
                Offset (0x04), 
                TB2P,   32
            }

            Local1 = TB2P /* \_GPE.GNIS.TB2P */
            ADBG (Concatenate ("TB2P=", ToHexString (Local1)))
            If ((Local1 == 0xFFFFFFFF))
            {
                ADBG ("GNIS=0")
                Return (Zero)
            }

            Local2 = HPFI /* \_GPE.GNIS.HPFI */
            ADBG (Concatenate ("HPFI=", ToHexString (Local2)))
            If ((Local2 == One))
            {
                HPFI = Zero
                ADBG ("GNIS=0")
                Return (Zero)
            }

            ADBG ("GNIS=1")
            Return (One)
        }

        Method (CHKP, 2, Serialized)
        {
            Return (Zero)
        }

        Method (XTBT, 2, Serialized)
        {
            ADBG ("XTBT")
            ADBG ("RP :")
            ADBG (Arg0)
            DTCP = Arg0
            DTPT = Arg1
            If ((Arg0 == RPS0))
            {
                Local0 = One
            }
            ElseIf ((Arg0 == RPS1))
            {
                Local0 = 0x02
            }
            Else
            {
                Local0 = Zero
                Return (Zero)
            }

            If (TRDO)
            {
                ADBG ("Durng TBT_ON")
                Return (Zero)
            }

            If (TRD3)
            {
                ADBG ("During TBT_OFF")
                Return (Zero)
            }

            WWAK ()
            WSUB (Arg0, Arg1)
            If (GNIS (Arg0, Arg1))
            {
                Return (Zero)
            }

            OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
            Field (SPRT, ByteAcc, Lock, Preserve)
            {
                SSMP,   8
            }

            ADBG ("TBT-HP-Handler")
            Acquire (OSUM, 0xFFFF)
            Local1 = TBFF (Arg0, Arg1)
            If ((\_SB.GGOV (0x030A0010) == Zero))
            {
                Sleep (0x09C4)
            }

            If ((Local1 == One))
            {
                Sleep (0x10)
                Release (OSUM)
                ADBG ("OS_Up_Received")
                Return (Zero)
            }

            If ((Local1 == 0x02))
            {
                NTFY (Arg0, Arg1)
                Sleep (0x10)
                Release (OSUM)
                ADBG ("Disconnect")
                Return (Zero)
            }

            If ((SOHP == One))
            {
                ADBG ("TBT SW SMI")
                TBSF = 0x15
                SSMP = TBSW /* \TBSW */
            }

            NTFY (Arg0, Arg1)
            Sleep (0x10)
            Release (OSUM)
            ADBG ("End-of-XTBT")
        }

        Method (_E37, 0, NotSerialized)  // _Exx: Edge-Triggered GPE, xx=0x00-0xFF
        {
            ADBG ("_E37")
            If ((CGST == Zero))
            {
                If ((RPN0 == One))
                {
                    XTBT (RPS0, RPT0)
                }
            }
            ElseIf ((RPN0 == One))
            {
                XTBT (RPS0, RPT0)
            }
            ElseIf ((RPN1 == One))
            {
                XTBT (RPS1, RPT1)
            }

            ADBG ("End-of-_E37")
        }

        Method (BTBT, 0, NotSerialized)
        {
            ADBG ("BTBT")
            If ((CGST == Zero))
            {
                If ((RPN1 == One))
                {
                    XTBT (RPS1, RPT1)
                }
            }

            ADBG ("End-of-BTBT")
        }

        Method (TINI, 4, Serialized)
        {
            ADBG ("TINI")
            If ((Arg0 == Zero))
            {
                If ((Arg3 == 0x03))
                {
                    Local0 = MMRP (Arg1, Arg2)
                    OperationRegion (RP_X, SystemMemory, Local0, 0x20)
                    Field (RP_X, DWordAcc, NoLock, Preserve)
                    {
                        REG0,   32, 
                        REG1,   32, 
                        REG2,   32, 
                        REG3,   32, 
                        REG4,   32, 
                        REG5,   32, 
                        REG6,   32, 
                        REG7,   32
                    }

                    Local1 = REG6 /* \_GPE.TINI.REG6 */
                    Local3 = 0x3F00
                    REG6 = (Local3 + 0x003F0000)
                }

                Local2 = MMTB (Arg1, Arg2)
                OSUP (Local2, Zero)
                If ((Arg3 == 0x03))
                {
                    REG6 = Local1
                }
            }

            ADBG ("End-of-TINI")
        }
    }

    Scope (_SB)
    {
        Method (THDR, 3, Serialized)
        {
            ADBG ("THDR")
            CAGS (Arg0)
            Sleep (0x64)
            \_GPE.XTBT (Arg1, Arg2)
        }
    }

    Scope (_SB)
    {
        Method (CGWR, 2, Serialized)
        {
            If (CondRefOf (\_SB.SGOV))
            {
                SGOV (Arg0, Arg1)
            }
        }

        Method (CGRD, 2, Serialized)
        {
            Local0 = One
            If ((Arg1 == Zero))
            {
                If (CondRefOf (\_SB.GGOV))
                {
                    Local0 = GGOV (Arg0)
                }
            }
            ElseIf ((Arg1 == One))
            {
                If (CondRefOf (\_SB.GGIV))
                {
                    Local0 = GGIV (Arg0)
                }
            }

            Return (Local0)
        }

        Method (WRGP, 2, Serialized)
        {
            Local0 = Arg0
            Local1 = Arg0
            Local0 &= 0xFFFFFFFF
            Local1 >>= 0x20
            If (((Local0 & 0xFF) == One))
            {
                CGWR (Local1, Arg1)
            }
        }

        Method (RDGP, 2, Serialized)
        {
            Local7 = One
            Local0 = Arg0
            Local1 = Arg0
            Local0 &= 0xFFFFFFFF
            Local1 >>= 0x20
            If (((Local0 & 0xFF) == One))
            {
                Local7 = CGRD (Local1, Arg1)
            }

            Return (Local7)
        }
    }

    Scope (_SB)
    {
        Method (TBFP, 2, NotSerialized)
        {
            If (Arg0)
            {
                If ((Arg1 == One))
                {
                    CGWR (FPG0, FP0L)
                }
                Else
                {
                    CGWR (FPG1, FP1L)
                }
            }
            ElseIf ((Arg1 == One))
            {
                CGWR (FPG0, !FP0L)
            }
            Else
            {
                CGWR (FPG1, !FP1L)
            }
        }

        Device (WMTF)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "TBFP")  // _UID: Unique ID
            Name (_WDG, Buffer (0x14)
            {
                /* 0000 */  0x48, 0xFD, 0xCC, 0x86, 0x5E, 0x20, 0x77, 0x4A,  // H...^ wJ
                /* 0008 */  0x9C, 0x48, 0x20, 0x21, 0xCB, 0xED, 0xE3, 0x41,  // .H !...A
                /* 0010 */  0x54, 0x46, 0x01, 0x02                           // TF..
            })
            Method (WMTF, 3, NotSerialized)
            {
                CreateByteField (Arg2, Zero, FP)
                If (FP)
                {
                    TBFP (One, One)
                }
                Else
                {
                    TBFP (Zero, One)
                }
            }
        }
    }

    Scope (_SB)
    {
        Method (PERB, 5, Serialized)
        {
            ADBG ("PERB")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, One)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   8
            }

            Return (TEMP) /* \_SB_.PERB.TEMP */
        }

        Method (PEWB, 6, Serialized)
        {
            ADBG ("PEWB")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, One)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   8
            }

            TEMP = Arg5
        }

        Method (PERW, 5, Serialized)
        {
            ADBG ("PERW")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, 0x02)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   16
            }

            Return (TEMP) /* \_SB_.PERW.TEMP */
        }

        Method (PEWW, 6, Serialized)
        {
            ADBG ("PEWW")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, 0x02)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   16
            }

            TEMP = Arg5
        }

        Method (PERD, 5, Serialized)
        {
            ADBG ("PERD")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, 0x04)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.PERD.TEMP */
        }

        Method (PEWD, 6, Serialized)
        {
            ADBG ("PEWD")
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, 0x04)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg5
        }

        Method (STDC, 5, Serialized)
        {
            ADBG ("STDC")
            Local7 = PERW (Arg0, Arg1, Arg2, Arg3, Zero)
            If ((Local7 == 0xFFFF))
            {
                ADBG ("Referenced device is not present")
                Return (Zero)
            }

            Local0 = PERW (Arg0, Arg1, Arg2, Arg3, 0x06)
            If (((Local0 & 0x10) == Zero))
            {
                ADBG ("No Capabilities linked list is available")
                Return (Zero)
            }

            Local2 = PERB (Arg0, Arg1, Arg2, Arg3, 0x34)
            While (One)
            {
                Local2 &= 0xFC
                If ((Local2 == Zero))
                {
                    ADBG ("Capability ID is not found")
                    Return (Zero)
                }

                Local1 = PERB (Arg0, Arg1, Arg2, Arg3, Local2)
                If ((Arg4 == Local1))
                {
                    ADBG ("Capability ID is found")
                    ADBG ("Capability Offset : ")
                    ADBG (Local2)
                    Return (Local2)
                }

                Local2 = PERB (Arg0, Arg1, Arg2, Arg3, (Local2 + One))
                Return (Zero)
            }
        }
    }

    Scope (\)
    {
        Device (CHUB)
        {
            Name (_HID, EisaId ("INT339B"))  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CHEN == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((ToInteger (Arg1) >= Zero))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Case (One)
                            {
                                Switch (ToInteger (DerefOf (Arg3 [Zero])))
                                {
                                    Case (Zero)
                                    {
                                    }

                                }
                            }

                        }

                        Return (Zero)
                    }

                    Return (Zero)
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Mutex (MUTX, 0x00)
    Mutex (OSUM, 0x00)
    Event (WFEV)
    OperationRegion (PRT0, SystemIO, 0x80, 0x02)
    Field (PRT0, WordAcc, Lock, Preserve)
    {
        P80B,   16
    }

    Name (P80T, Zero)
    Method (D8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80T = ((P80T & 0xFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80T = ((P80T & 0xFF) | (Arg1 << 0x08))
        }

        P80B = P80T /* \P80T */
    }

    Method (P8XH, 2, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            D8XH (Arg0, Arg1)
        }
    }

    Method (ADBG, 1, Serialized)
    {
        If (CondRefOf (MDBG))
        {
            Return (MDBG (Arg0))
        }

        Return (Zero)
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    Method (RPTS, 1, NotSerialized)
    {
        D8XH (Zero, Arg0)
        D8XH (One, Zero)
        ADBG (Concatenate ("_PTS=", ToHexString (Arg0)))
        If ((TBTS == One))
        {
            Reset (WFEV)
            If ((RTBT == One))
            {
                TOFF = Zero
            }
        }

        If ((Arg0 == 0x03))
        {
            If (CondRefOf (\_SB.DTSE))
            {
                If ((\_SB.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x1E)
                }
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((UTCE && (\_SB.GGIV (0x030A0007) == Zero)))
            {
                \_SB.SGOV (0x030A0001, Zero)
                Sleep (0x96)
                Local0 = Zero
                While ((Local0 < 0x0A))
                {
                    If ((\_SB.GGOV (0x030A0006) == One))
                    {
                        Break
                    }
                    Else
                    {
                        Sleep (0x64)
                        Local0++
                    }
                }
            }
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If ((((Arg0 == 0x03) || (Arg0 == 0x04)) || (Arg0 == 0x05)))
        {
            If ((PFLV == 0x02))
            {
                \_SB.SGOV (0x04070017, One)
            }
        }
    }

    Method (PBCL, 0, NotSerialized)
    {
        Return (Package (0x67)
        {
            0x50, 
            0x32, 
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x64
        })
    }

    Method (RWAK, 1, Serialized)
    {
        D8XH (One, 0xAB)
        ADBG ("_WAK")
        If (NEXP)
        {
            If ((OSCC & 0x02))
            {
                NHPG ()
            }

            If ((OSCC & 0x04))
            {
                NPME ()
            }
        }

        If ((Arg0 == 0x03))
        {
            If ((Zero == ACTT))
            {
                If ((ECON == One))
                {
                    \_SB.PCI0.LPCB.H_EC.ECWT (Zero, RefOf (\_SB.PCI0.LPCB.H_EC.CFAN))
                }
            }
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If ((\_SB.PCI0.PEG0.VEID == 0x10DE))
            {
                If (((\_SB.GGIV (0x0302000E) == One) || (\_SB.GGIV (0x0302000F) == One)))
                {
                    \_SB.PCI0.PEG0.PEGP.NHDA = One
                }
                Else
                {
                    \_SB.PCI0.PEG0.PEGP.NHDA = Zero
                }
            }

            If ((GBSX & 0x40))
            {
                \_SB.PCI0.GFX0.IUEH (0x06)
            }

            If ((GBSX & 0x80))
            {
                \_SB.PCI0.GFX0.IUEH (0x07)
            }

            If (CondRefOf (\_SB.DTSE))
            {
                If ((\_SB.DTSE && (TCNT > One)))
                {
                    TRAP (0x02, 0x14)
                }
            }

            If ((TBTS == One))
            {
                If ((RPN0 == One))
                {
                    Acquire (OSUM, 0xFFFF)
                    \_GPE.TINI (Zero, RPS0, RPT0, Arg0)
                    Release (OSUM)
                }

                If ((RPN1 == One))
                {
                    Acquire (OSUM, 0xFFFF)
                    \_GPE.TINI (Zero, RPS1, RPT1, Arg0)
                    Release (OSUM)
                }
            }

            If ((\_SB.PCI0.RP01.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP01, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP02.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP02, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP03.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP03, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP04.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP04, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP05.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP05, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP06.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP06, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP07.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                }
            }

            If ((\_SB.PCI0.RP08.VDID != 0xFFFFFFFF))
            {
                If ((DSTS == Zero))
                {
                    Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                }
            }

            If ((\_SB.PCI0.RP09.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP09, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP10.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP10, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP11.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP11, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP12.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP12, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP13.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP13, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP14.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP14, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP15.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP15, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP16.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP16, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP17.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP17, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP18.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP18, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP19.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP19, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP20.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP20, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP21.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP21, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP22.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP22, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP23.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP23, Zero) // Bus Check
            }

            If ((\_SB.PCI0.RP24.VDID != 0xFFFFFFFF))
            {
                Notify (\_SB.PCI0.RP24, Zero) // Bus Check
            }

            If ((UTCE && (\_SB.GGIV (0x030A0007) == Zero)))
            {
                Local0 = Zero
                While ((Local0 < 0x0A))
                {
                    If ((\_SB.GGOV (0x030A0006) == Zero))
                    {
                        Break
                    }
                    Else
                    {
                        Sleep (0x64)
                        Local0++
                    }
                }
            }
        }

        If ((TBTS == One))
        {
            Signal (WFEV)
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Local0 = (Arg0 * 0x08)
        Local1 = (Arg1 * 0x08)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3) /* \GETB.TBF3 */
    }

    Method (PNOT, 0, Serialized)
    {
        If ((TCNT > One))
        {
            If ((PC00 & 0x08))
            {
                Notify (\_SB.PR00, 0x80) // Performance Capability Change
            }

            If ((PC01 & 0x08))
            {
                Notify (\_SB.PR01, 0x80) // Performance Capability Change
            }

            If ((PC02 & 0x08))
            {
                Notify (\_SB.PR02, 0x80) // Performance Capability Change
            }

            If ((PC03 & 0x08))
            {
                Notify (\_SB.PR03, 0x80) // Performance Capability Change
            }

            If ((PC04 & 0x08))
            {
                Notify (\_SB.PR04, 0x80) // Performance Capability Change
            }

            If ((PC05 & 0x08))
            {
                Notify (\_SB.PR05, 0x80) // Performance Capability Change
            }

            If ((PC06 & 0x08))
            {
                Notify (\_SB.PR06, 0x80) // Performance Capability Change
            }

            If ((PC07 & 0x08))
            {
                Notify (\_SB.PR07, 0x80) // Performance Capability Change
            }

            If ((PC08 & 0x08))
            {
                Notify (\_SB.PR08, 0x80) // Performance Capability Change
            }

            If ((PC09 & 0x08))
            {
                Notify (\_SB.PR09, 0x80) // Performance Capability Change
            }

            If ((PC10 & 0x08))
            {
                Notify (\_SB.PR10, 0x80) // Performance Capability Change
            }

            If ((PC11 & 0x08))
            {
                Notify (\_SB.PR11, 0x80) // Performance Capability Change
            }

            If ((PC12 & 0x08))
            {
                Notify (\_SB.PR12, 0x80) // Performance Capability Change
            }

            If ((PC13 & 0x08))
            {
                Notify (\_SB.PR13, 0x80) // Performance Capability Change
            }

            If ((PC14 & 0x08))
            {
                Notify (\_SB.PR14, 0x80) // Performance Capability Change
            }

            If ((PC15 & 0x08))
            {
                Notify (\_SB.PR15, 0x80) // Performance Capability Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x80) // Performance Capability Change
        }

        If ((TCNT > One))
        {
            If (((PC00 & 0x08) && (PC00 & 0x10)))
            {
                Notify (\_SB.PR00, 0x81) // C-State Change
            }

            If (((PC01 & 0x08) && (PC01 & 0x10)))
            {
                Notify (\_SB.PR01, 0x81) // C-State Change
            }

            If (((PC02 & 0x08) && (PC02 & 0x10)))
            {
                Notify (\_SB.PR02, 0x81) // C-State Change
            }

            If (((PC03 & 0x08) && (PC03 & 0x10)))
            {
                Notify (\_SB.PR03, 0x81) // C-State Change
            }

            If (((PC04 & 0x08) && (PC04 & 0x10)))
            {
                Notify (\_SB.PR04, 0x81) // C-State Change
            }

            If (((PC05 & 0x08) && (PC05 & 0x10)))
            {
                Notify (\_SB.PR05, 0x81) // C-State Change
            }

            If (((PC06 & 0x08) && (PC06 & 0x10)))
            {
                Notify (\_SB.PR06, 0x81) // C-State Change
            }

            If (((PC07 & 0x08) && (PC07 & 0x10)))
            {
                Notify (\_SB.PR07, 0x81) // C-State Change
            }

            If (((PC08 & 0x08) && (PC08 & 0x10)))
            {
                Notify (\_SB.PR08, 0x81) // C-State Change
            }

            If (((PC09 & 0x08) && (PC09 & 0x10)))
            {
                Notify (\_SB.PR09, 0x81) // C-State Change
            }

            If (((PC10 & 0x08) && (PC10 & 0x10)))
            {
                Notify (\_SB.PR10, 0x81) // C-State Change
            }

            If (((PC11 & 0x08) && (PC11 & 0x10)))
            {
                Notify (\_SB.PR11, 0x81) // C-State Change
            }

            If (((PC12 & 0x08) && (PC12 & 0x10)))
            {
                Notify (\_SB.PR12, 0x81) // C-State Change
            }

            If (((PC13 & 0x08) && (PC13 & 0x10)))
            {
                Notify (\_SB.PR13, 0x81) // C-State Change
            }

            If (((PC14 & 0x08) && (PC14 & 0x10)))
            {
                Notify (\_SB.PR14, 0x81) // C-State Change
            }

            If (((PC15 & 0x08) && (PC15 & 0x10)))
            {
                Notify (\_SB.PR15, 0x81) // C-State Change
            }
        }
        Else
        {
            Notify (\_SB.PR00, 0x81) // C-State Change
        }

        If ((ECON == One))
        {
            Notify (\_SB.PCI0.LPCB.H_EC.BAT0, 0x81) // Information Change
            Notify (\_SB.PCI0.LPCB.H_EC.BAT1, 0x81) // Information Change
            Notify (\_SB.PCI0.LPCB.H_EC.BAT2, 0x81) // Information Change
        }

        If ((DPTF == One))
        {
            Notify (\_SB.IETM, 0x86) // Device-Specific
            If ((CHGE == One))
            {
                Notify (\_SB.PCI0.LPCB.H_EC.CHRG, 0x80) // Status Change
            }
        }
    }

    OperationRegion (MBAR, SystemMemory, (\_SB.PCI0.GMHB () + 0x5000), 0x1000)
    Field (MBAR, ByteAcc, NoLock, Preserve)
    {
        Offset (0x938), 
        PWRU,   4, 
        Offset (0x9A0), 
        PPL1,   15, 
        PL1E,   1, 
        CLP1,   1
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        Name (PPUU, Zero)
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
        PLSV = PPL1 /* \PPL1 */
        PLEN = PL1E /* \PL1E */
        CLMP = CLP1 /* \CLP1 */
        If ((PWRU == Zero))
        {
            PPUU = One
        }
        Else
        {
            PPUU = (PWRU-- << 0x02)
        }

        Local0 = (PLVL * PPUU) /* \SPL1.PPUU */
        Local1 = (Local0 / 0x03E8)
        PPL1 = Local1
        PL1E = One
        CLP1 = One
    }

    Method (RPL1, 0, Serialized)
    {
        PPL1 = PLSV /* \PLSV */
        PL1E = PLEN /* \PLEN */
        CLP1 = CLMP /* \CLMP */
        CSEM = Zero
    }

    Name (UAMS, Zero)
    Name (GLCK, Zero)
    Method (GUAM, 1, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (Zero)
            {
                If ((GLCK == One))
                {
                    GLCK = Zero
                    P8XH (Zero, 0xE1)
                    P8XH (One, 0xAB)
                    ADBG ("Exit Resiliency")
                    If (PSCP)
                    {
                        If (CondRefOf (\_SB.PR00._PPC))
                        {
                            \_SB.CPPC = Zero
                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        RPL1 ()
                    }
                }
            }
            Case (One)
            {
                If ((GLCK == Zero))
                {
                    GLCK = One
                    P8XH (Zero, 0xE0)
                    P8XH (One, Zero)
                    ADBG ("Enter Resiliency")
                    If (PSCP)
                    {
                        If ((CondRefOf (\_SB.PR00._PSS) && CondRefOf (\_SB.PR00._PPC)))
                        {
                            If ((PC00 & 0x0400))
                            {
                                \_SB.CPPC = (SizeOf (\_SB.PR00.TPSS) - One)
                            }
                            Else
                            {
                                \_SB.CPPC = (SizeOf (\_SB.PR00.LPSS) - One)
                            }

                            PNOT ()
                        }
                    }

                    If (PLCS)
                    {
                        SPL1 ()
                    }
                }
            }
            Default
            {
                Return (Zero)
            }

        }

        UAMS = (Arg0 && !PWRS)
        P_CS ()
    }

    Method (P_CS, 0, Serialized)
    {
        If (CondRefOf (\_SB.PCI0.PAUD.PUAM))
        {
            \_SB.PCI0.PAUD.PUAM ()
        }

        If ((OSYS == 0x07DC))
        {
            If (CondRefOf (\_SB.PCI0.XHC.DUAM))
            {
                \_SB.PCI0.XHC.DUAM ()
            }
        }
    }

    Method (TRAP, 2, Serialized)
    {
        SMIF = Arg1
        If ((Arg0 == 0x02))
        {
            \_SB.DTSF = Arg1
            \_SB.TRPD = Zero
            Return (\_SB.DTSF) /* External reference */
        }

        If ((Arg0 == 0x04))
        {
            \_SB.TRPF = Zero
        }

        Return (SMIF) /* \SMIF */
    }

    Scope (_SB.PCI0)
    {
        Method (PTMA, 0, NotSerialized)
        {
            Return (BGMA) /* External reference */
        }

        Method (PTMS, 0, NotSerialized)
        {
            Return (BGMS) /* External reference */
        }

        Method (PTIA, 0, NotSerialized)
        {
            Return (BGIA) /* External reference */
        }

        Method (_INI, 0, Serialized)  // _INI: Initialize
        {
            TBPE = One
            OSYS = 0x03E8
            If (CondRefOf (\_OSI, Local0))
            {
                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSYS = 0x07D1
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07D2
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x07D3
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x07D6
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x07D9
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x07DC
                }

                If (_OSI ("Windows 2013"))
                {
                    OSYS = 0x07DD
                }

                If (_OSI ("Windows 2015"))
                {
                    OSYS = 0x07DF
                }

                If (_OSI ("Windows 2016"))
                {
                    OSYS = 0x07E0
                }

                If (_OSI ("Windows 2017"))
                {
                    OSYS = 0x07E1
                }

                If (_OSI ("Windows 2017.2"))
                {
                    OSYS = 0x07E1
                }
            }

            If (CondRefOf (\_SB.DTSE))
            {
                If ((DTSE >= One))
                {
                    DSAE = One
                }
            }

            If ((TBTS == One))
            {
                If ((RPN0 == One))
                {
                    Acquire (OSUM, 0xFFFF)
                    \_GPE.TINI (Zero, RPS0, RPT0, Zero)
                    Release (OSUM)
                }

                If ((RPN1 == One))
                {
                    Acquire (OSUM, 0xFFFF)
                    \_GPE.TINI (Zero, RPS1, RPT1, Zero)
                    Release (OSUM)
                }

                Signal (WFEV)
            }
        }
    }

    Scope (\)
    {
        Method (NHPG, 0, Serialized)
        {
            \_SB.PCI0.RP01.HPEX = Zero
            \_SB.PCI0.RP02.HPEX = Zero
            \_SB.PCI0.RP03.HPEX = Zero
            \_SB.PCI0.RP04.HPEX = Zero
            \_SB.PCI0.RP05.HPEX = Zero
            \_SB.PCI0.RP06.HPEX = Zero
            \_SB.PCI0.RP07.HPEX = Zero
            \_SB.PCI0.RP08.HPEX = Zero
            \_SB.PCI0.RP09.HPEX = Zero
            \_SB.PCI0.RP10.HPEX = Zero
            \_SB.PCI0.RP11.HPEX = Zero
            \_SB.PCI0.RP12.HPEX = Zero
            \_SB.PCI0.RP13.HPEX = Zero
            \_SB.PCI0.RP14.HPEX = Zero
            \_SB.PCI0.RP15.HPEX = Zero
            \_SB.PCI0.RP16.HPEX = Zero
            \_SB.PCI0.RP17.HPEX = Zero
            \_SB.PCI0.RP18.HPEX = Zero
            \_SB.PCI0.RP19.HPEX = Zero
            \_SB.PCI0.RP20.HPEX = Zero
            \_SB.PCI0.RP21.HPEX = Zero
            \_SB.PCI0.RP22.HPEX = Zero
            \_SB.PCI0.RP23.HPEX = Zero
            \_SB.PCI0.RP24.HPEX = Zero
            \_SB.PCI0.RP01.HPSX = One
            \_SB.PCI0.RP02.HPSX = One
            \_SB.PCI0.RP03.HPSX = One
            \_SB.PCI0.RP04.HPSX = One
            \_SB.PCI0.RP05.HPSX = One
            \_SB.PCI0.RP06.HPSX = One
            \_SB.PCI0.RP07.HPSX = One
            \_SB.PCI0.RP08.HPSX = One
            \_SB.PCI0.RP09.HPSX = One
            \_SB.PCI0.RP10.HPSX = One
            \_SB.PCI0.RP11.HPSX = One
            \_SB.PCI0.RP12.HPSX = One
            \_SB.PCI0.RP13.HPSX = One
            \_SB.PCI0.RP14.HPSX = One
            \_SB.PCI0.RP15.HPSX = One
            \_SB.PCI0.RP16.HPSX = One
            \_SB.PCI0.RP17.HPSX = One
            \_SB.PCI0.RP18.HPSX = One
            \_SB.PCI0.RP19.HPSX = One
            \_SB.PCI0.RP20.HPSX = One
            \_SB.PCI0.RP21.HPSX = One
            \_SB.PCI0.RP22.HPSX = One
            \_SB.PCI0.RP23.HPSX = One
            \_SB.PCI0.RP24.HPSX = One
        }

        Method (NPME, 0, Serialized)
        {
            \_SB.PCI0.RP01.PMEX = Zero
            \_SB.PCI0.RP02.PMEX = Zero
            \_SB.PCI0.RP03.PMEX = Zero
            \_SB.PCI0.RP04.PMEX = Zero
            \_SB.PCI0.RP05.PMEX = Zero
            \_SB.PCI0.RP06.PMEX = Zero
            \_SB.PCI0.RP07.PMEX = Zero
            \_SB.PCI0.RP08.PMEX = Zero
            \_SB.PCI0.RP09.PMEX = Zero
            \_SB.PCI0.RP10.PMEX = Zero
            \_SB.PCI0.RP11.PMEX = Zero
            \_SB.PCI0.RP12.PMEX = Zero
            \_SB.PCI0.RP13.PMEX = Zero
            \_SB.PCI0.RP14.PMEX = Zero
            \_SB.PCI0.RP15.PMEX = Zero
            \_SB.PCI0.RP16.PMEX = Zero
            \_SB.PCI0.RP17.PMEX = Zero
            \_SB.PCI0.RP18.PMEX = Zero
            \_SB.PCI0.RP19.PMEX = Zero
            \_SB.PCI0.RP20.PMEX = Zero
            \_SB.PCI0.RP21.PMEX = Zero
            \_SB.PCI0.RP22.PMEX = Zero
            \_SB.PCI0.RP23.PMEX = Zero
            \_SB.PCI0.RP24.PMEX = Zero
            \_SB.PCI0.RP21.PMEX = Zero
            \_SB.PCI0.RP22.PMEX = Zero
            \_SB.PCI0.RP23.PMEX = Zero
            \_SB.PCI0.RP24.PMEX = Zero
            \_SB.PCI0.RP01.PMSX = One
            \_SB.PCI0.RP02.PMSX = One
            \_SB.PCI0.RP03.PMSX = One
            \_SB.PCI0.RP04.PMSX = One
            \_SB.PCI0.RP05.PMSX = One
            \_SB.PCI0.RP06.PMSX = One
            \_SB.PCI0.RP07.PMSX = One
            \_SB.PCI0.RP08.PMSX = One
            \_SB.PCI0.RP09.PMSX = One
            \_SB.PCI0.RP10.PMSX = One
            \_SB.PCI0.RP11.PMSX = One
            \_SB.PCI0.RP12.PMSX = One
            \_SB.PCI0.RP13.PMSX = One
            \_SB.PCI0.RP14.PMSX = One
            \_SB.PCI0.RP15.PMSX = One
            \_SB.PCI0.RP16.PMSX = One
            \_SB.PCI0.RP17.PMSX = One
            \_SB.PCI0.RP18.PMSX = One
            \_SB.PCI0.RP19.PMSX = One
            \_SB.PCI0.RP20.PMSX = One
            \_SB.PCI0.RP21.PMSX = One
            \_SB.PCI0.RP22.PMSX = One
            \_SB.PCI0.RP23.PMSX = One
            \_SB.PCI0.RP24.PMSX = One
        }

        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    OSCP = CAP0 /* \_SB_._OSC.CAP0 */
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If (((SGMD & 0x0F) != 0x02))
                        {
                            If ((RTD3 == Zero))
                            {
                                CAP0 &= 0x3B
                                STS0 |= 0x10
                            }
                        }
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }

        Device (EPC)
        {
            Name (_HID, EisaId ("INT0E0C"))  // _HID: Hardware ID
            Name (_STR, Unicode ("Enclave Page Cache 1.0"))  // _STR: Description String
            Name (_MLS, Package (0x01)  // _MLS: Multiple Language String
            {
                Package (0x02)
                {
                    "en", 
                    Unicode ("Enclave Page Cache 1.0")
                }
            })
            Name (RBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000001, // Length
                    ,, _Y2F, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateQWordField (RBUF, \_SB.EPC._Y2F._MIN, EMIN)  // _MIN: Minimum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y2F._MAX, EMAX)  // _MAX: Maximum Base Address
                CreateQWordField (RBUF, \_SB.EPC._Y2F._LEN, ELEN)  // _LEN: Length
                EMIN = EMNA /* External reference */
                ELEN = ELNG /* External reference */
                EMAX = ((EMNA + ELNG) - One)
                Return (RBUF) /* \_SB_.EPC_.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((EPCS != Zero))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB)
    {
        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_STA, Zero)  // _STA: Status
        }
    }

    If ((ENVM == One))
    {
        Scope (_SB)
        {
            Method (VMON, 0, Serialized)
            {
            }

            Method (VMOF, 0, Serialized)
            {
            }
        }
    }

    Scope (_SB.PCI0.I2C0)
    {
        Device (PA01)
        {
            Name (_HID, "MAX34407")  // _HID: Hardware ID
            Name (_CID, "MAX34407")  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (RBUF) /* \_SB_.PCI0.I2C0.PA01._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (POME)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("4993a436-e1ac-4dc7-b4f8-46a5008fb9e7")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x07                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((Arg1 == Zero))
                        {
                            Name (PBUF, Package (0x08)
                            {
                                "SYSTEM_PWR", 
                                0x02
                            })
                            Return (PBUF) /* \_SB_.PCI0.I2C0.PA01._DSM.PBUF */
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((Arg1 == Zero))
                        {
                            Name (CBUF, Package (0x01)
                            {
                                One
                            })
                            Return (CBUF) /* \_SB_.PCI0.I2C0.PA01._DSM.CBUF */
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }
        }
    }

    Scope (_SB)
    {
        Device (COEX)
        {
            Name (_HID, EisaId ("INT3519"))  // _HID: Hardware ID
            Name (_STR, Unicode ("CoExistence Manager"))  // _STR: Description String
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((COEM == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    OperationRegion (_SB.PCI0.LPCB.LPCR, PCI_Config, 0x80, 0x04)
    Field (\_SB.PCI0.LPCB.LPCR, ByteAcc, NoLock, Preserve)
    {
        CARN,   3, 
            ,   1, 
        CBDR,   3, 
        Offset (0x01), 
        LTDR,   2, 
            ,   2, 
        FDDR,   1, 
        Offset (0x02), 
        CALE,   1, 
        CBLE,   1, 
        LTLE,   1, 
        FDLE,   1, 
        Offset (0x03), 
        GLLE,   1, 
        GHLE,   1, 
        KCLE,   1, 
        MCLE,   1, 
        C1LE,   1, 
        C2LE,   1, 
        Offset (0x04)
    }

    Method (UXDV, 1, Serialized)
    {
        Local0 = 0xFF
        Switch ((Arg0 + Zero))
        {
            Case (0x03F8)
            {
                Local0 = Zero
            }
            Case (0x02F8)
            {
                Local0 = One
            }
            Case (0x0220)
            {
                Local0 = 0x02
            }
            Case (0x0228)
            {
                Local0 = 0x03
            }
            Case (0x0238)
            {
                Local0 = 0x04
            }
            Case (0x02E8)
            {
                Local0 = 0x05
            }
            Case (0x0338)
            {
                Local0 = 0x06
            }
            Case (0x03E8)
            {
                Local0 = 0x07
            }

        }

        Return (Local0)
    }

    Method (RRIO, 4, Serialized)
    {
        Switch ((Arg0 + Zero))
        {
            Case (Zero)
            {
                CALE = Zero
                Local0 = UXDV (Arg2)
                If ((Local0 != 0xFF))
                {
                    CARN = Local0
                }

                If (Arg1)
                {
                    CALE = One
                }
            }
            Case (One)
            {
                CBLE = Zero
                Local0 = UXDV (Arg2)
                If ((Local0 != 0xFF))
                {
                    CBDR = Local0
                }

                If (Arg1)
                {
                    CBLE = One
                }
            }
            Case (0x02)
            {
                LTLE = Zero
                If ((Arg2 == 0x0378))
                {
                    LTDR = Zero
                }

                If ((Arg2 == 0x0278))
                {
                    LTDR = One
                }

                If ((Arg2 == 0x03BC))
                {
                    LTDR = 0x02
                }

                If (Arg1)
                {
                    LTLE = One
                }
            }
            Case (0x03)
            {
                FDLE = Zero
                If ((Arg2 == 0x03F0))
                {
                    FDDR = Zero
                }

                If ((Arg2 == 0x0370))
                {
                    FDDR = One
                }

                If (Arg1)
                {
                    FDLE = One
                }
            }
            Case (0x08)
            {
                If ((Arg2 == 0x0200))
                {
                    If (Arg1)
                    {
                        GLLE = One
                    }
                    Else
                    {
                        GLLE = Zero
                    }
                }

                If ((Arg2 == 0x0208))
                {
                    If (Arg1)
                    {
                        GHLE = One
                    }
                    Else
                    {
                        GHLE = Zero
                    }
                }
            }
            Case (0x09)
            {
                If ((Arg2 == 0x0200))
                {
                    If (Arg1)
                    {
                        GLLE = One
                    }
                    Else
                    {
                        GLLE = Zero
                    }
                }

                If ((Arg2 == 0x0208))
                {
                    If (Arg1)
                    {
                        GHLE = One
                    }
                    Else
                    {
                        GHLE = Zero
                    }
                }
            }
            Case (0x0A)
            {
                If (((Arg2 == 0x60) || (Arg2 == 0x64)))
                {
                    If (Arg1)
                    {
                        KCLE = One
                    }
                    Else
                    {
                        KCLE = Zero
                    }
                }
            }
            Case (0x0B)
            {
                If (((Arg2 == 0x62) || (Arg2 == 0x66)))
                {
                    If (Arg1)
                    {
                        MCLE = One
                    }
                    Else
                    {
                        MCLE = Zero
                    }
                }
            }
            Case (0x0C)
            {
                If ((Arg2 == 0x2E))
                {
                    If (Arg1)
                    {
                        C1LE = One
                    }
                    Else
                    {
                        C1LE = Zero
                    }
                }

                If ((Arg2 == 0x4E))
                {
                    If (Arg1)
                    {
                        C2LE = One
                    }
                    Else
                    {
                        C2LE = Zero
                    }
                }
            }
            Case (0x0D)
            {
                If ((Arg2 == 0x2E))
                {
                    If (Arg1)
                    {
                        C1LE = One
                    }
                    Else
                    {
                        C1LE = Zero
                    }
                }

                If ((Arg2 == 0x4E))
                {
                    If (Arg1)
                    {
                        C2LE = One
                    }
                    Else
                    {
                        C2LE = Zero
                    }
                }
            }

        }
    }

    Method (RDMA, 3, NotSerialized)
    {
    }

    Scope (_GPE)
    {
        Method (_L69, 0, Serialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.PCI0.RP01.HPME ()
            \_SB.PCI0.RP02.HPME ()
            \_SB.PCI0.RP03.HPME ()
            \_SB.PCI0.RP04.HPME ()
            \_SB.PCI0.RP05.HPME ()
            \_SB.PCI0.RP06.HPME ()
            \_SB.PCI0.RP07.HPME ()
            \_SB.PCI0.RP08.HPME ()
            \_SB.PCI0.RP09.HPME ()
            \_SB.PCI0.RP10.HPME ()
            \_SB.PCI0.RP11.HPME ()
            \_SB.PCI0.RP12.HPME ()
            \_SB.PCI0.RP13.HPME ()
            \_SB.PCI0.RP14.HPME ()
            \_SB.PCI0.RP15.HPME ()
            \_SB.PCI0.RP16.HPME ()
            \_SB.PCI0.RP17.HPME ()
            \_SB.PCI0.RP18.HPME ()
            \_SB.PCI0.RP19.HPME ()
            \_SB.PCI0.RP20.HPME ()
            \_SB.PCI0.RP21.HPME ()
            \_SB.PCI0.RP22.HPME ()
            \_SB.PCI0.RP23.HPME ()
            \_SB.PCI0.RP24.HPME ()
            If ((\_SB.PCI0.D1F0 == One))
            {
                \_SB.PCI0.PEG0.HPME ()
                Notify (\_SB.PCI0.PEG0, 0x02) // Device Wake
                Notify (\_SB.PCI0.PEG0.PEGP, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.D1F1 == One))
            {
                \_SB.PCI0.PEG1.HPME ()
                Notify (\_SB.PCI0.PEG1, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.D1F2 == One))
            {
                \_SB.PCI0.PEG2.HPME ()
                Notify (\_SB.PCI0.PEG2, 0x02) // Device Wake
            }
        }

        Method (_L61, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            L01C += One
            P8XH (One, L01C)
            If (((\_SB.PCI0.RP01.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP01.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != One) || 
                    (RPS1 != One))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP01.PDCX)
                {
                    \_SB.PCI0.RP01.PDCX = One
                    \_SB.PCI0.RP01.HPSX = One
                    If (!\_SB.PCI0.RP01.PDSX)
                    {
                        \_SB.PCI0.RP01.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != One) || 
                        (RPS1 != One))))
                    {
                        Notify (\_SB.PCI0.RP01, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP01.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP02.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP02.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x02) || 
                    (RPS1 != 0x02))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP02.PDCX)
                {
                    \_SB.PCI0.RP02.PDCX = One
                    \_SB.PCI0.RP02.HPSX = One
                    If (!\_SB.PCI0.RP02.PDSX)
                    {
                        \_SB.PCI0.RP02.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x02) || 
                        (RPS1 != 0x02))))
                    {
                        Notify (\_SB.PCI0.RP02, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP02.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP03.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP03.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x03) || 
                    (RPS1 != 0x03))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP03.PDCX)
                {
                    \_SB.PCI0.RP03.PDCX = One
                    \_SB.PCI0.RP03.HPSX = One
                    If (!\_SB.PCI0.RP03.PDSX)
                    {
                        \_SB.PCI0.RP03.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x03) || 
                        (RPS1 != 0x03))))
                    {
                        Notify (\_SB.PCI0.RP03, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP03.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP04.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP04.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x04) || 
                    (RPS1 != 0x04))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP04.PDCX)
                {
                    \_SB.PCI0.RP04.PDCX = One
                    \_SB.PCI0.RP04.HPSX = One
                    If (!\_SB.PCI0.RP04.PDSX)
                    {
                        \_SB.PCI0.RP04.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x04) || 
                        (RPS1 != 0x04))))
                    {
                        Notify (\_SB.PCI0.RP04, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP04.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP05.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP05.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x05) || 
                    (RPS1 != 0x05))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP05.PDCX)
                {
                    \_SB.PCI0.RP05.PDCX = One
                    \_SB.PCI0.RP05.HPSX = One
                    If (!\_SB.PCI0.RP05.PDSX)
                    {
                        \_SB.PCI0.RP05.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x05) || 
                        (RPS1 != 0x05))))
                    {
                        Notify (\_SB.PCI0.RP05, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP05.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP06.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP06.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x06) || 
                    (RPS1 != 0x06))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP06.PDCX)
                {
                    \_SB.PCI0.RP06.PDCX = One
                    \_SB.PCI0.RP06.HPSX = One
                    If (!\_SB.PCI0.RP06.PDSX)
                    {
                        \_SB.PCI0.RP06.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x06) || 
                        (RPS1 != 0x06))))
                    {
                        Notify (\_SB.PCI0.RP06, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP06.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP07.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP07.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x07) || 
                    (RPS1 != 0x07))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP07.PDCX)
                {
                    \_SB.PCI0.RP07.PDCX = One
                    \_SB.PCI0.RP07.HPSX = One
                    If (!\_SB.PCI0.RP07.PDSX)
                    {
                        \_SB.PCI0.RP07.L0SE = Zero
                    }

                    If ((PFLV == 0x02))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x07) || 
                            (RPS1 != 0x07))))
                        {
                            Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                        }
                    }
                    ElseIf (ECON)
                    {
                        If (((TBTS != One) || ((RPS0 != 0x07) || 
                            (RPS1 != 0x07))))
                        {
                            Notify (\_SB.PCI0.RP07, Zero) // Bus Check
                        }
                    }
                }
                Else
                {
                    \_SB.PCI0.RP07.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP08.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP08.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x08) || 
                    (RPS1 != 0x08))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP08.PDCX)
                {
                    \_SB.PCI0.RP08.PDCX = One
                    \_SB.PCI0.RP08.HPSX = One
                    If (!\_SB.PCI0.RP08.PDSX)
                    {
                        \_SB.PCI0.RP08.L0SE = Zero
                    }

                    If ((PFLV == 0x02))
                    {
                        If (((TBTS != One) || ((RPS0 != 0x08) || 
                            (RPS1 != 0x08))))
                        {
                            Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                        }
                    }
                    ElseIf (ECON)
                    {
                        If (((TBTS != One) || ((RPS0 != 0x08) || 
                            (RPS1 != 0x08))))
                        {
                            Notify (\_SB.PCI0.RP08, Zero) // Bus Check
                        }
                    }
                }
                Else
                {
                    \_SB.PCI0.RP08.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP09.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP09.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x09) || 
                    (RPS1 != 0x09))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP09.PDCX)
                {
                    \_SB.PCI0.RP09.PDCX = One
                    \_SB.PCI0.RP09.HPSX = One
                    If (!\_SB.PCI0.RP09.PDSX)
                    {
                        \_SB.PCI0.RP09.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x09) || 
                        (RPS1 != 0x09))))
                    {
                        Notify (\_SB.PCI0.RP09, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP09.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP10.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP10.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x0A) || 
                    (RPS1 != 0x0A))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP10.PDCX)
                {
                    \_SB.PCI0.RP10.PDCX = One
                    \_SB.PCI0.RP10.HPSX = One
                    If (!\_SB.PCI0.RP10.PDSX)
                    {
                        \_SB.PCI0.RP10.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x0A) || 
                        (RPS1 != 0x0A))))
                    {
                        Notify (\_SB.PCI0.RP10, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP10.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP11.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP11.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x0B) || 
                    (RPS1 != 0x0B))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP11.PDCX)
                {
                    \_SB.PCI0.RP11.PDCX = One
                    \_SB.PCI0.RP11.HPSX = One
                    If (!\_SB.PCI0.RP11.PDSX)
                    {
                        \_SB.PCI0.RP11.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x0B) || 
                        (RPS1 != 0x0B))))
                    {
                        Notify (\_SB.PCI0.RP11, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP11.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP12.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP12.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x0C) || 
                    (RPS1 != 0x0C))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP12.PDCX)
                {
                    \_SB.PCI0.RP12.PDCX = One
                    \_SB.PCI0.RP12.HPSX = One
                    If (!\_SB.PCI0.RP12.PDSX)
                    {
                        \_SB.PCI0.RP12.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x0C) || 
                        (RPS1 != 0x0C))))
                    {
                        Notify (\_SB.PCI0.RP12, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP12.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP13.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP13.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x0D) || 
                    (RPS1 != 0x0D))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP13.PDCX)
                {
                    \_SB.PCI0.RP13.PDCX = One
                    \_SB.PCI0.RP13.HPSX = One
                    If (!\_SB.PCI0.RP13.PDSX)
                    {
                        \_SB.PCI0.RP13.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x0D) || 
                        (RPS1 != 0x0D))))
                    {
                        Notify (\_SB.PCI0.RP13, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP13.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP14.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP14.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x0E) || 
                    (RPS1 != 0x0E))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP14.PDCX)
                {
                    \_SB.PCI0.RP14.PDCX = One
                    \_SB.PCI0.RP14.HPSX = One
                    If (!\_SB.PCI0.RP14.PDSX)
                    {
                        \_SB.PCI0.RP14.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x0E) || 
                        (RPS1 != 0x0E))))
                    {
                        Notify (\_SB.PCI0.RP14, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP14.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP15.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP15.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x0F) || 
                    (RPS1 != 0x0F))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP15.PDCX)
                {
                    \_SB.PCI0.RP15.PDCX = One
                    \_SB.PCI0.RP15.HPSX = One
                    If (!\_SB.PCI0.RP15.PDSX)
                    {
                        \_SB.PCI0.RP15.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x0F) || 
                        (RPS1 != 0x0F))))
                    {
                        Notify (\_SB.PCI0.RP15, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP15.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP16.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP16.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x10) || 
                    (RPS1 != 0x10))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP16.PDCX)
                {
                    \_SB.PCI0.RP16.PDCX = One
                    \_SB.PCI0.RP16.HPSX = One
                    If (!\_SB.PCI0.RP16.PDSX)
                    {
                        \_SB.PCI0.RP16.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x10) || 
                        (RPS1 != 0x10))))
                    {
                        Notify (\_SB.PCI0.RP16, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP16.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP17.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP17.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x11) || 
                    (RPS1 != 0x11))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP17.PDCX)
                {
                    \_SB.PCI0.RP17.PDCX = One
                    \_SB.PCI0.RP17.HPSX = One
                    If (!\_SB.PCI0.RP17.PDSX)
                    {
                        \_SB.PCI0.RP17.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x11) || 
                        (RPS1 != 0x11))))
                    {
                        Notify (\_SB.PCI0.RP17, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP17.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP18.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP18.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x12) || 
                    (RPS1 != 0x12))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP18.PDCX)
                {
                    \_SB.PCI0.RP18.PDCX = One
                    \_SB.PCI0.RP18.HPSX = One
                    If (!\_SB.PCI0.RP18.PDSX)
                    {
                        \_SB.PCI0.RP18.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x12) || 
                        (RPS1 != 0x12))))
                    {
                        Notify (\_SB.PCI0.RP18, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP18.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP19.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP19.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x13) || 
                    (RPS1 != 0x13))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP19.PDCX)
                {
                    \_SB.PCI0.RP19.PDCX = One
                    \_SB.PCI0.RP19.HPSX = One
                    If (!\_SB.PCI0.RP19.PDSX)
                    {
                        \_SB.PCI0.RP19.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x13) || 
                        (RPS1 != 0x13))))
                    {
                        Notify (\_SB.PCI0.RP19, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP19.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP20.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP20.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x14) || 
                    (RPS1 != 0x14))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP20.PDCX)
                {
                    \_SB.PCI0.RP20.PDCX = One
                    \_SB.PCI0.RP20.HPSX = One
                    If (!\_SB.PCI0.RP20.PDSX)
                    {
                        \_SB.PCI0.RP20.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x14) || 
                        (RPS1 != 0x14))))
                    {
                        Notify (\_SB.PCI0.RP20, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP20.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP21.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP21.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x15) || 
                    (RPS1 != 0x15))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP21.PDCX)
                {
                    \_SB.PCI0.RP21.PDCX = One
                    \_SB.PCI0.RP21.HPSX = One
                    If (!\_SB.PCI0.RP21.PDSX)
                    {
                        \_SB.PCI0.RP21.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x15) || 
                        (RPS1 != 0x15))))
                    {
                        Notify (\_SB.PCI0.RP21, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP21.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP22.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP22.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x16) || 
                    (RPS1 != 0x16))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP22.PDCX)
                {
                    \_SB.PCI0.RP22.PDCX = One
                    \_SB.PCI0.RP22.HPSX = One
                    If (!\_SB.PCI0.RP22.PDSX)
                    {
                        \_SB.PCI0.RP22.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x16) || 
                        (RPS1 != 0x16))))
                    {
                        Notify (\_SB.PCI0.RP22, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP22.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP23.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP23.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x17) || 
                    (RPS1 != 0x17))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP23.PDCX)
                {
                    \_SB.PCI0.RP23.PDCX = One
                    \_SB.PCI0.RP23.HPSX = One
                    If (!\_SB.PCI0.RP23.PDSX)
                    {
                        \_SB.PCI0.RP23.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x17) || 
                        (RPS1 != 0x17))))
                    {
                        Notify (\_SB.PCI0.RP23, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP23.HPSX = One
                }
            }

            If (((\_SB.PCI0.RP24.VDID != 0xFFFFFFFF) && \_SB.PCI0.RP24.HPSX))
            {
                If (((TBTS != One) || ((RPS0 != 0x18) || 
                    (RPS1 != 0x18))))
                {
                    Sleep (0x64)
                }

                If (\_SB.PCI0.RP24.PDCX)
                {
                    \_SB.PCI0.RP24.PDCX = One
                    \_SB.PCI0.RP24.HPSX = One
                    If (!\_SB.PCI0.RP24.PDSX)
                    {
                        \_SB.PCI0.RP24.L0SE = Zero
                    }

                    If (((TBTS != One) || ((RPS0 != 0x18) || 
                        (RPS1 != 0x18))))
                    {
                        Notify (\_SB.PCI0.RP24, Zero) // Bus Check
                    }
                }
                Else
                {
                    \_SB.PCI0.RP24.HPSX = One
                }
            }
        }

        Method (_L62, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            GPEC = Zero
            If (CondRefOf (\_SB.DTSE))
            {
                If ((\_SB.DTSE >= One))
                {
                    If ((\_SB.DTSI == One))
                    {
                        Notify (\_TZ.TZ00, 0x80) // Status Change
                        \_SB.DTSI = Zero
                    }
                }
            }

            If ((\_SB.HWPI == One))
            {
                If (CondRefOf (\_GPE.HLVT))
                {
                    HLVT ()
                }

                \_SB.HWPI = Zero
            }

            If ((\_SB.ITBI == One))
            {
                If (CondRefOf (\_GPE.ITBH))
                {
                    ITBH ()
                }

                \_SB.ITBI = Zero
            }
        }

        Method (_L66, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.GFX0.GSSE && !GSMI))
            {
                \_SB.PCI0.GFX0.GSCI ()
            }
        }

        Method (_L12, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            \_SB.SHPO (0x030A0012, One)
            Notify (\_SB.PCI0.RP21, 0x02) // Device Wake
        }

        Name (PRES, One)
        Method (_L6F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((RTD3 == One))
            {
                If (CondRefOf (\_GPE.AL6F))
                {
                    AL6F ()
                }
            }

            If ((SGGP == One))
            {
                If (CondRefOf (\_GPE.P0L6))
                {
                    P0L6 ()
                }
            }

            If ((P1GP == One))
            {
                If (CondRefOf (\_GPE.P1L6))
                {
                    P1L6 ()
                }
            }

            If ((P2GP == One))
            {
                If (CondRefOf (\_GPE.P2L6))
                {
                    P2L6 ()
                }
            }

            If ((TBTS == One))
            {
                If ((CGST == Zero))
                {
                    If (\_SB.ISME (CPG0))
                    {
                        \_SB.THDR (CPG0, RPS0, RPT0)
                    }

                    If (\_SB.ISME (CPG1))
                    {
                        \_SB.THDR (CPG1, RPS1, RPT1)
                    }
                }
                ElseIf (\_SB.ISME (CPG0))
                {
                    If ((RPN0 == One))
                    {
                        \_SB.THDR (CPG0, RPS0, RPT0)
                    }

                    If ((RPN1 == One))
                    {
                        \_SB.THDR (CPG0, RPS1, RPT1)
                    }
                }
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP01.PXSX))
    {
        Scope (_SB.PCI0.RP01.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x10)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi/WiGig PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi/WiGig PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi/WiGig PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("Wifi/WiGig PR _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR /* \_SB_.PCI0.RP01.PXSX.DCTR */
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI) /* \AWVI */
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS) /* \WGWS */
                }

                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                    DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                    DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                    DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                    DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                    DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                    Return (SPLX) /* \_SB_.PCI0.RP01.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PCI0.RP01.PXSX.WANX */
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                    DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                    Return (WRDX) /* \_SB_.PCI0.RP01.PXSX.WRDX */
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                    DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                    DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                    DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                    DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                    Return (WRDY) /* \_SB_.PCI0.RP01.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    Zero, 
                    Package (0x21)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                    Return (EWRY) /* \_SB_.PCI0.RP01.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    Zero, 
                    Package (0x13)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                    Return (WGDY) /* \_SB_.PCI0.RP01.PXSX.WGDY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PCI0.RP01.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PCI0.RP01.PXSX.GPCX */
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80) // Status Change
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02) // Device Wake
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (WHIT, 0, NotSerialized)
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            "DockOemId", 
                            "DockSkuId", 
                            Zero, 
                            0x02, 
                            0x02
                        }
                    })
                }

                Method (SELF, 0, NotSerialized)
                {
                    Return (Package (0x02)
                    {
                        "PcOemId", 
                        "PcSkuId"
                    })
                }
            }

            If (WWST ())
            {
                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("WWAN PR _RST")
                        SGOV (GGNR, Zero)
                        Sleep (0x14)
                        SGOV (GGNR, One)
                    }
                }
            }

            If (((WIST () || WGST ()) || WWST ()))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX PR _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR /* \_SB_.PCI0.RP01.PXSX.DCTR */
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If ((WIST () || WGST ()))
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (WWST ())
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0.RP02.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP02.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP02.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP02.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP02.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP02.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP02.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP02.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP02.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP02.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP02.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP03.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP03.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP03.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP03.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP03.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP03.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP03.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP03.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP03.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP03.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP03.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP04.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP04.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP04.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP04.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP04.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP04.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP04.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP04.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP04.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP04.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP04.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP05.PXSX))
    {
        Scope (_SB.PCI0.RP05.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x10)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi/WiGig PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi/WiGig PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi/WiGig PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("Wifi/WiGig PR _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR /* \_SB_.PCI0.RP05.PXSX.DCTR */
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI) /* \AWVI */
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS) /* \WGWS */
                }

                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                    DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                    DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                    DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                    DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                    DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                    Return (SPLX) /* \_SB_.PCI0.RP05.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PCI0.RP05.PXSX.WANX */
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                    DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                    Return (WRDX) /* \_SB_.PCI0.RP05.PXSX.WRDX */
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                    DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                    DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                    DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                    DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                    Return (WRDY) /* \_SB_.PCI0.RP05.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    Zero, 
                    Package (0x21)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                    Return (EWRY) /* \_SB_.PCI0.RP05.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    Zero, 
                    Package (0x13)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                    Return (WGDY) /* \_SB_.PCI0.RP05.PXSX.WGDY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PCI0.RP05.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PCI0.RP05.PXSX.GPCX */
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80) // Status Change
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02) // Device Wake
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (WHIT, 0, NotSerialized)
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            "DockOemId", 
                            "DockSkuId", 
                            Zero, 
                            0x02, 
                            0x02
                        }
                    })
                }

                Method (SELF, 0, NotSerialized)
                {
                    Return (Package (0x02)
                    {
                        "PcOemId", 
                        "PcSkuId"
                    })
                }
            }

            If (WWST ())
            {
                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("WWAN PR _RST")
                        SGOV (GGNR, Zero)
                        Sleep (0x14)
                        SGOV (GGNR, One)
                    }
                }
            }

            If (((WIST () || WGST ()) || WWST ()))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX PR _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR /* \_SB_.PCI0.RP05.PXSX.DCTR */
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If ((WIST () || WGST ()))
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (WWST ())
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0.RP06.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP06.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP06.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP06.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP06.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP06.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP06.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP06.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP06.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP06.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP06.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP07.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP07.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP07.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP07.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP07.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP07.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP07.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP07.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP07.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP07.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP07.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP08.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP08.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP08.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP08.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP08.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP08.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP08.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP08.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP08.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP08.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP08.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP09.PXSX))
    {
        Scope (_SB.PCI0.RP09.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x10)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi/WiGig PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi/WiGig PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi/WiGig PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("Wifi/WiGig PR _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR /* \_SB_.PCI0.RP09.PXSX.DCTR */
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI) /* \AWVI */
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS) /* \WGWS */
                }

                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                    DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                    DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                    DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                    DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                    DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                    Return (SPLX) /* \_SB_.PCI0.RP09.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PCI0.RP09.PXSX.WANX */
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                    DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                    Return (WRDX) /* \_SB_.PCI0.RP09.PXSX.WRDX */
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                    DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                    DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                    DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                    DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                    Return (WRDY) /* \_SB_.PCI0.RP09.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    Zero, 
                    Package (0x21)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                    Return (EWRY) /* \_SB_.PCI0.RP09.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    Zero, 
                    Package (0x13)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                    Return (WGDY) /* \_SB_.PCI0.RP09.PXSX.WGDY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PCI0.RP09.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PCI0.RP09.PXSX.GPCX */
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80) // Status Change
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02) // Device Wake
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (WHIT, 0, NotSerialized)
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            "DockOemId", 
                            "DockSkuId", 
                            Zero, 
                            0x02, 
                            0x02
                        }
                    })
                }

                Method (SELF, 0, NotSerialized)
                {
                    Return (Package (0x02)
                    {
                        "PcOemId", 
                        "PcSkuId"
                    })
                }
            }

            If (WWST ())
            {
                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("WWAN PR _RST")
                        SGOV (GGNR, Zero)
                        Sleep (0x14)
                        SGOV (GGNR, One)
                    }
                }
            }

            If (((WIST () || WGST ()) || WWST ()))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX PR _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR /* \_SB_.PCI0.RP09.PXSX.DCTR */
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If ((WIST () || WGST ()))
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (WWST ())
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0.RP10.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP10.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP10.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP10.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP10.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP10.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP10.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP10.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP10.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP10.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP10.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP11.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP11.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP11.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP11.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP11.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP11.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP11.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP11.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP11.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP11.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP11.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP12.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP12.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP12.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP12.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP12.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP12.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP12.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP12.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP12.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP12.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP12.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP13.PXSX))
    {
        Scope (_SB.PCI0.RP13.PXSX)
        {
            OperationRegion (RPXX, PCI_Config, Zero, 0x10)
            Field (RPXX, AnyAcc, NoLock, Preserve)
            {
                VDID,   32
            }

            OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
            Field (FLDR, ByteAcc, NoLock, Preserve)
            {
                DCAP,   32, 
                DCTR,   16
            }

            Method (WIST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x095A8086)
                        {
                            Return (One)
                        }
                        Case (0x095B8086)
                        {
                            Return (One)
                        }
                        Case (0x31658086)
                        {
                            Return (One)
                        }
                        Case (0x31668086)
                        {
                            Return (One)
                        }
                        Case (0x08B18086)
                        {
                            Return (One)
                        }
                        Case (0x08B28086)
                        {
                            Return (One)
                        }
                        Case (0x08B38086)
                        {
                            Return (One)
                        }
                        Case (0x08B48086)
                        {
                            Return (One)
                        }
                        Case (0x24F38086)
                        {
                            Return (One)
                        }
                        Case (0x24F48086)
                        {
                            Return (One)
                        }
                        Case (0x24F58086)
                        {
                            Return (One)
                        }
                        Case (0x24F68086)
                        {
                            Return (One)
                        }
                        Case (0x24FD8086)
                        {
                            Return (One)
                        }
                        Case (0x24FB8086)
                        {
                            Return (One)
                        }
                        Case (0x25268086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WGST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x093C8086)
                        {
                            Return (One)
                        }
                        Case (0x097C8086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (WWST, 0, Serialized)
            {
                If (CondRefOf (VDID))
                {
                    Switch (ToInteger (VDID))
                    {
                        Case (0x73608086)
                        {
                            Return (One)
                        }
                        Default
                        {
                            Return (Zero)
                        }

                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((WIST () || WGST ()))
            {
                PowerResource (WRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("Wifi/WiGig PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("Wifi/WiGig PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("Wifi/WiGig PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("Wifi/WiGig PR _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR /* \_SB_.PCI0.RP13.PXSX.DCTR */
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Method (AWVC, 0, Serialized)
                {
                    Return (AWVI) /* \AWVI */
                }

                Method (WOWG, 0, Serialized)
                {
                    Return (WGWS) /* \WGWS */
                }

                Name (SPLX, Package (0x04)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (SPLC, 0, Serialized)
                {
                    DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                    DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                    DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                    DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                    DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                    DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                    DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                    DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                    DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                    Return (SPLX) /* \_SB_.PCI0.RP13.PXSX.SPLX */
                }

                Name (WANX, Package (0x03)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }, 

                    Package (0x03)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    }
                })
                Method (WAND, 0, Serialized)
                {
                    DerefOf (WANX [One]) [Zero] = Zero
                    DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                    DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                    DerefOf (WANX [0x02]) [Zero] = One
                    DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                    DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                    Return (WANX) /* \_SB_.PCI0.RP13.PXSX.WANX */
                }

                Name (WRDX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }, 

                    Package (0x02)
                    {
                        0x80000000, 
                        0x8000
                    }
                })
                Method (WRDD, 0, Serialized)
                {
                    DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                    DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                    DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                    DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                    Return (WRDX) /* \_SB_.PCI0.RP13.PXSX.WRDX */
                }

                Name (WRDY, Package (0x03)
                {
                    Zero, 
                    Package (0x0C)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }, 

                    Package (0x06)
                    {
                        0x10, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WRDS, 0, Serialized)
                {
                    DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                    DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                    DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                    DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                    DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                    DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                    DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                    DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                    DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                    DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                    DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                    DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                    DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                    DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                    DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                    DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                    Return (WRDY) /* \_SB_.PCI0.RP13.PXSX.WRDY */
                }

                Name (EWRY, Package (0x02)
                {
                    Zero, 
                    Package (0x21)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (EWRD, 0, Serialized)
                {
                    DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                    DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                    DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                    DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                    DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                    DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                    DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                    DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                    DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                    DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                    DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                    DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                    DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                    DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                    DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                    DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                    DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                    DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                    DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                    DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                    DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                    DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                    DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                    DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                    DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                    DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                    DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                    DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                    DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                    DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                    DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                    DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                    Return (EWRY) /* \_SB_.PCI0.RP13.PXSX.EWRY */
                }

                Name (WGDY, Package (0x02)
                {
                    Zero, 
                    Package (0x13)
                    {
                        0x07, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (WGDS, 0, Serialized)
                {
                    DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                    DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                    DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                    DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                    DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                    DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                    DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                    DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                    DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                    DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                    DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                    DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                    DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                    DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                    DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                    DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                    DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                    DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                    Return (WGDY) /* \_SB_.PCI0.RP13.PXSX.WGDY */
                }

                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PCI0.RP13.PXSX.SADX */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PCI0.RP13.PXSX.GPCX */
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }

                        If ((Arg2 == One))
                        {
                            Switch (ToInteger (DerefOf (Arg3 [Zero])))
                            {
                                Case (Zero)
                                {
                                }
                                Case (One)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x80) // Status Change
                                    }
                                }
                                Case (0x02)
                                {
                                }
                                Case (0x03)
                                {
                                }
                                Case (0x04)
                                {
                                    If (CondRefOf (\_SB.SLPB))
                                    {
                                        Notify (SLPB, 0x02) // Device Wake
                                    }
                                }

                            }
                        }

                        Return (Zero)
                    }
                    ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                If ((Arg1 == Zero))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x07                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }
                            Case (One)
                            {
                                Return (WHIT ())
                            }
                            Case (0x02)
                            {
                                Return (SELF ())
                            }
                            Default
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Method (WHIT, 0, NotSerialized)
                {
                    Return (Package (0x01)
                    {
                        Package (0x05)
                        {
                            "DockOemId", 
                            "DockSkuId", 
                            Zero, 
                            0x02, 
                            0x02
                        }
                    })
                }

                Method (SELF, 0, NotSerialized)
                {
                    Return (Package (0x02)
                    {
                        "PcOemId", 
                        "PcSkuId"
                    })
                }
            }

            If (WWST ())
            {
                PowerResource (MRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("WWAN PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("WWAN PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("WWAN PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("WWAN PR _RST")
                        SGOV (GGNR, Zero)
                        Sleep (0x14)
                        SGOV (GGNR, One)
                    }
                }
            }

            If (((WIST () || WGST ()) || WWST ()))
            {
                PowerResource (DRST, 0x05, 0x0000)
                {
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        ADBG ("PXSX PR _STA")
                        Return (One)
                    }

                    Method (_ON, 0, NotSerialized)  // _ON_: Power On
                    {
                        ADBG ("PXSX PR _ON")
                    }

                    Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                    {
                        ADBG ("PXSX PR _OFF")
                    }

                    Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                    {
                        ADBG ("PXSX PR _RST")
                        If ((DCAP & 0x10000000))
                        {
                            Local0 = DCTR /* \_SB_.PCI0.RP13.PXSX.DCTR */
                            Local0 |= 0x8000
                            DCTR = Local0
                        }
                    }
                }

                Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                {
                    If ((WIST () || WGST ()))
                    {
                        If (CondRefOf (WRST))
                        {
                            Return (Package (0x01)
                            {
                                WRST
                            })
                        }
                    }

                    If (WWST ())
                    {
                        If (CondRefOf (MRST))
                        {
                            Return (Package (0x01)
                            {
                                MRST
                            })
                        }
                    }

                    Return (Package (0x01)
                    {
                        DRST
                    })
                }
            }
        }
    }

    Scope (_SB.PCI0.RP14.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP14.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP14.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP14.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP14.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP14.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP14.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP14.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP14.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP14.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP14.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP15.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP15.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP15.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP15.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP15.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP15.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP15.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP15.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP15.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP15.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP15.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP16.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP16.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP16.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP16.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP16.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP16.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP16.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP16.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP16.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP16.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP16.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP17.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP17.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP17.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP17.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP17.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP17.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP17.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP17.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP17.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP17.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP17.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP18.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP18.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP18.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP18.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP18.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP18.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP18.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP18.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP18.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP18.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP18.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP19.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP19.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP19.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP19.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP19.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP19.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP19.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP19.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP19.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP19.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP19.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB.PCI0.RP20.PXSX)
    {
        OperationRegion (RPXX, PCI_Config, Zero, 0x10)
        Field (RPXX, AnyAcc, NoLock, Preserve)
        {
            VDID,   32
        }

        OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
        Field (FLDR, ByteAcc, NoLock, Preserve)
        {
            DCAP,   32, 
            DCTR,   16
        }

        Method (WIST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x095A8086)
                    {
                        Return (One)
                    }
                    Case (0x095B8086)
                    {
                        Return (One)
                    }
                    Case (0x31658086)
                    {
                        Return (One)
                    }
                    Case (0x31668086)
                    {
                        Return (One)
                    }
                    Case (0x08B18086)
                    {
                        Return (One)
                    }
                    Case (0x08B28086)
                    {
                        Return (One)
                    }
                    Case (0x08B38086)
                    {
                        Return (One)
                    }
                    Case (0x08B48086)
                    {
                        Return (One)
                    }
                    Case (0x24F38086)
                    {
                        Return (One)
                    }
                    Case (0x24F48086)
                    {
                        Return (One)
                    }
                    Case (0x24F58086)
                    {
                        Return (One)
                    }
                    Case (0x24F68086)
                    {
                        Return (One)
                    }
                    Case (0x24FD8086)
                    {
                        Return (One)
                    }
                    Case (0x24FB8086)
                    {
                        Return (One)
                    }
                    Case (0x25268086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WGST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x093C8086)
                    {
                        Return (One)
                    }
                    Case (0x097C8086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (WWST, 0, Serialized)
        {
            If (CondRefOf (VDID))
            {
                Switch (ToInteger (VDID))
                {
                    Case (0x73608086)
                    {
                        Return (One)
                    }
                    Default
                    {
                        Return (Zero)
                    }

                }
            }
            Else
            {
                Return (Zero)
            }
        }

        If ((WIST () || WGST ()))
        {
            PowerResource (WRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("Wifi/WiGig PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("Wifi/WiGig PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("Wifi/WiGig PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("Wifi/WiGig PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP20.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (AWVC, 0, Serialized)
            {
                Return (AWVI) /* \AWVI */
            }

            Method (WOWG, 0, Serialized)
            {
                Return (WGWS) /* \WGWS */
            }

            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.RP20.PXSX.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.RP20.PXSX.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.RP20.PXSX.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.RP20.PXSX.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.RP20.PXSX.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.RP20.PXSX.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.RP20.PXSX.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.RP20.PXSX.GPCX */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (PCIC (Arg0))
                {
                    Return (PCID (Arg0, Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Switch (ToInteger (DerefOf (Arg3 [Zero])))
                        {
                            Case (Zero)
                            {
                            }
                            Case (One)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x80) // Status Change
                                }
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                                If (CondRefOf (\_SB.SLPB))
                                {
                                    Notify (SLPB, 0x02) // Device Wake
                                }
                            }

                        }
                    }

                    Return (Zero)
                }
                ElseIf ((Arg0 == ToUUID ("7574eb17-d1a2-4cc2-9929-4a08fcc29107")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x07                                             // .
                                })
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Case (One)
                        {
                            Return (WHIT ())
                        }
                        Case (0x02)
                        {
                            Return (SELF ())
                        }
                        Default
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (WHIT, 0, NotSerialized)
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        "DockOemId", 
                        "DockSkuId", 
                        Zero, 
                        0x02, 
                        0x02
                    }
                })
            }

            Method (SELF, 0, NotSerialized)
            {
                Return (Package (0x02)
                {
                    "PcOemId", 
                    "PcSkuId"
                })
            }
        }

        If (WWST ())
        {
            PowerResource (MRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("WWAN PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("WWAN PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("WWAN PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("WWAN PR _RST")
                    SGOV (GGNR, Zero)
                    Sleep (0x14)
                    SGOV (GGNR, One)
                }
            }
        }

        If (((WIST () || WGST ()) || WWST ()))
        {
            PowerResource (DRST, 0x05, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    ADBG ("PXSX PR _STA")
                    Return (One)
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    ADBG ("PXSX PR _ON")
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    ADBG ("PXSX PR _OFF")
                }

                Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                {
                    ADBG ("PXSX PR _RST")
                    If ((DCAP & 0x10000000))
                    {
                        Local0 = DCTR /* \_SB_.PCI0.RP20.PXSX.DCTR */
                        Local0 |= 0x8000
                        DCTR = Local0
                    }
                }
            }

            Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
            {
                If ((WIST () || WGST ()))
                {
                    If (CondRefOf (WRST))
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }

                If (WWST ())
                {
                    If (CondRefOf (MRST))
                    {
                        Return (Package (0x01)
                        {
                            MRST
                        })
                    }
                }

                Return (Package (0x01)
                {
                    DRST
                })
            }
        }
    }

    Scope (_SB)
    {
        Name (PDAT, Zero)
        Name (DSSI, Zero)
        Method (DSSV, 0, Serialized)
        {
            PDAT = SDAB /* \SDAB */
            PDAT <<= 0x10
            PDAT |= SDAA /* \_SB_.PDAT */
        }

        Device (WFDE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "SampleDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x3C)
            {
                /* 0000 */  0xEF, 0x9D, 0xC4, 0x2B, 0x15, 0x7B, 0x05, 0x4F,  // ...+.{.O
                /* 0008 */  0x8B, 0xB7, 0xEE, 0x37, 0xB9, 0x54, 0x7C, 0x0B,  // ...7.T|.
                /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x3E, 0xA3, 0xFE, 0xA6,  // DE..>...
                /* 0018 */  0xBF, 0xDA, 0xF5, 0x46, 0xBF, 0xC8, 0x46, 0x0D,  // ...F..F.
                /* 0020 */  0x96, 0x1B, 0xEC, 0x9F, 0xD0, 0x00, 0x01, 0x08,  // ........
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 0038 */  0x43, 0x43, 0x01, 0x00                           // CC..
            })
            Method (WMDE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    Return (One)
                }

                If ((Arg1 == 0x02))
                {
                    If ((DSSI == Zero))
                    {
                        DSSV ()
                        DSSI = One
                    }

                    Return (One)
                }

                If ((Arg1 == 0x03))
                {
                    Return (PDAT) /* \_SB_.PDAT */
                }
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD0))
                {
                    Return (PDAT) /* \_SB_.PDAT */
                }

                Return (Zero)
            }

            Name (WQCC, Buffer (0x043D)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x2D, 0x04, 0x00, 0x00, 0xB4, 0x0F, 0x00, 0x00,  // -.......
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xCE, 0x87, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x07, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x24, 0x15, 0x07, 0x85, 0x12, 0x02, 0xA1, 0xFE,  // $.......
                /* 0038 */  0x04, 0xF2, 0x2B, 0x00, 0xA1, 0x43, 0x01, 0x32,  // ..+..C.2
                /* 0040 */  0x05, 0x18, 0x14, 0xE0, 0x14, 0x41, 0x04, 0xBD,  // .....A..
                /* 0048 */  0x0A, 0xB0, 0x29, 0xC0, 0xA4, 0x00, 0x8B, 0x02,  // ..).....
                /* 0050 */  0xB4, 0x0B, 0xB0, 0x2C, 0x40, 0xB7, 0x00, 0xE9,  // ...,@...
                /* 0058 */  0xB0, 0x44, 0x24, 0x38, 0x4A, 0x0C, 0x38, 0x4A,  // .D$8J.8J
                /* 0060 */  0x27, 0xB6, 0x70, 0xC3, 0x06, 0x2F, 0x14, 0x45,  // '.p../.E
                /* 0068 */  0x33, 0x88, 0x92, 0xA0, 0x72, 0x01, 0xBE, 0x11,  // 3...r...
                /* 0070 */  0x04, 0x5E, 0xAE, 0x00, 0xC9, 0x13, 0x90, 0x66,  // .^.....f
                /* 0078 */  0x01, 0x86, 0x05, 0x58, 0x17, 0x20, 0x7B, 0x08,  // ...X. {.
                /* 0080 */  0x54, 0xEA, 0x10, 0x50, 0x72, 0x86, 0x80, 0x1A,  // T..Pr...
                /* 0088 */  0x40, 0xAB, 0x13, 0x10, 0x7E, 0xA5, 0x53, 0x42,  // @...~.SB
                /* 0090 */  0x12, 0x84, 0x33, 0x56, 0xF1, 0xF8, 0x9A, 0x45,  // ..3V...E
                /* 0098 */  0xD3, 0x73, 0x92, 0x73, 0x0C, 0x39, 0x1E, 0x17,  // .s.s.9..
                /* 00A0 */  0x7A, 0x10, 0x3C, 0x84, 0x04, 0x10, 0x26, 0x7B,  // z.<...&{
                /* 00A8 */  0xC8, 0x92, 0x0D, 0x83, 0xD2, 0x30, 0x16, 0xEA,  // .....0..
                /* 00B0 */  0x62, 0xD4, 0xA8, 0x91, 0xB2, 0x01, 0x19, 0xA2,  // b.......
                /* 00B8 */  0x24, 0x38, 0xD4, 0xA8, 0x3D, 0xBB, 0xE6, 0xC7,  // $8..=...
                /* 00C0 */  0xA1, 0xD9, 0xB5, 0x3D, 0x16, 0x02, 0xC9, 0xA4,  // ...=....
                /* 00C8 */  0x0D, 0x05, 0x25, 0x05, 0x42, 0xC2, 0x67, 0x4A,  // ..%.B.gJ
                /* 00D0 */  0x66, 0x14, 0xF1, 0x48, 0x0D, 0x93, 0xC0, 0xA3,  // f..H....
                /* 00D8 */  0x88, 0xEC, 0x19, 0x46, 0x63, 0xD0, 0xD8, 0x61,  // ...Fc..a
                /* 00E0 */  0x78, 0x98, 0xC1, 0x0E, 0xE2, 0x30, 0x8E, 0x39,  // x....0.9
                /* 00E8 */  0x72, 0x02, 0x4F, 0xE8, 0x48, 0x8F, 0xBC, 0xB0,  // r.O.H...
                /* 00F0 */  0x79, 0x0A, 0x35, 0x46, 0x73, 0x50, 0x04, 0xFF,  // y.5FsP..
                /* 00F8 */  0x51, 0x00, 0x2B, 0x11, 0x56, 0xA3, 0x8D, 0x7D,  // Q.+.V..}
                /* 0100 */  0xBE, 0x1E, 0xCD, 0xC1, 0xC6, 0x38, 0x82, 0xE3,  // .....8..
                /* 0108 */  0x4A, 0xF0, 0xFF, 0x0F, 0x13, 0xA4, 0xF7, 0xE9,  // J.......
                /* 0110 */  0x10, 0x41, 0x78, 0x12, 0x3D, 0x0B, 0x61, 0xF5,  // .Ax.=.a.
                /* 0118 */  0x0C, 0x24, 0x9C, 0x10, 0xC7, 0xCD, 0x61, 0x0E,  // .$....a.
                /* 0120 */  0x58, 0x83, 0x40, 0xC9, 0x80, 0x10, 0xE4, 0x33,  // X.@....3
                /* 0128 */  0xC1, 0xD1, 0x99, 0xC0, 0xEE, 0x8F, 0x02, 0xD2,  // ........
                /* 0130 */  0x26, 0x40, 0xE3, 0x1D, 0x40, 0x20, 0x9D, 0x21,  // &@..@ .!
                /* 0138 */  0x08, 0xA4, 0xAD, 0xC1, 0x08, 0xA6, 0x42, 0x28,  // ......B(
                /* 0140 */  0xA1, 0x1C, 0x55, 0x38, 0x5B, 0x43, 0x11, 0x90,  // ..U8[C..
                /* 0148 */  0x6F, 0x05, 0xAF, 0x0F, 0xA1, 0xD8, 0xD4, 0x42,  // o......B
                /* 0150 */  0x1E, 0x5B, 0x90, 0xC6, 0xC0, 0x84, 0x1C, 0x2C,  // .[.....,
                /* 0158 */  0x4C, 0xBC, 0xF6, 0x17, 0xC2, 0x1E, 0x12, 0x3A,  // L......:
                /* 0160 */  0x0B, 0x38, 0xD2, 0x68, 0x50, 0x07, 0x05, 0x9F,  // .8.hP...
                /* 0168 */  0x07, 0x7C, 0x16, 0x78, 0x3E, 0xF0, 0xA8, 0x0E,  // .|.x>...
                /* 0170 */  0xCD, 0x83, 0x3B, 0xB0, 0xC7, 0x87, 0x07, 0x01,  // ..;.....
                /* 0178 */  0x0F, 0x99, 0xDD, 0x10, 0x7C, 0xAE, 0xF0, 0xC9,  // ....|...
                /* 0180 */  0x00, 0xEF, 0x1A, 0x50, 0x57, 0x82, 0x07, 0x02,  // ...PW...
                /* 0188 */  0x36, 0x46, 0xC3, 0xF1, 0x21, 0x7A, 0xB8, 0xE1,  // 6F..!z..
                /* 0190 */  0x4E, 0xE0, 0x10, 0x19, 0xA0, 0x67, 0xF5, 0x2C,  // N....g.,
                /* 0198 */  0x80, 0x1D, 0xD6, 0xC9, 0x3C, 0x08, 0xBC, 0x4B,  // ....<..K
                /* 01A0 */  0x34, 0x7B, 0x8B, 0x20, 0x04, 0xC7, 0xE3, 0x0B,  // 4{. ....
                /* 01A8 */  0x04, 0x9B, 0x70, 0x02, 0xCB, 0x1F, 0x04, 0x6A,  // ..p....j
                /* 01B0 */  0x64, 0x86, 0xF6, 0x74, 0x4F, 0xEB, 0x45, 0xC0,  // d..tO.E.
                /* 01B8 */  0x07, 0x00, 0x13, 0x58, 0x2C, 0x84, 0x14, 0x40,  // ...X,..@
                /* 01C0 */  0x68, 0x3C, 0xE0, 0x57, 0x7C, 0xE8, 0x20, 0xB7,  // h<.W|. .
                /* 01C8 */  0x05, 0xCF, 0xD7, 0x47, 0x13, 0xE6, 0x64, 0x3C,  // ...G..d<
                /* 01D0 */  0xA8, 0x51, 0xF8, 0x14, 0x10, 0xEE, 0xBC, 0x4D,  // .Q.....M
                /* 01D8 */  0xE0, 0xC0, 0x10, 0xFA, 0x5F, 0x58, 0xD4, 0x31,  // ...._X.1
                /* 01E0 */  0x85, 0x9F, 0x26, 0xE8, 0x41, 0x82, 0xA1, 0xB2,  // ..&.A...
                /* 01E8 */  0xFF, 0x3F, 0xC4, 0x91, 0x9C, 0x90, 0x3F, 0x2B,  // .?....?+
                /* 01F0 */  0x1E, 0x18, 0x7C, 0xC1, 0xA7, 0x08, 0x20, 0x03,  // ..|... .
                /* 01F8 */  0x83, 0xBB, 0x42, 0xB0, 0x01, 0xC3, 0xBF, 0x4C,  // ..B....L
                /* 0200 */  0x18, 0xD8, 0x17, 0x89, 0xCA, 0x20, 0xC9, 0x91,  // ..... ..
                /* 0208 */  0xE3, 0x89, 0x06, 0x0C, 0xE8, 0x7D, 0x0E, 0x56,  // .....}.V
                /* 0210 */  0x87, 0x16, 0x83, 0xF9, 0x3E, 0x13, 0xEC, 0xE5,  // ....>...
                /* 0218 */  0xA1, 0x47, 0x20, 0xDD, 0x59, 0xAC, 0x15, 0x42,  // .G .Y..B
                /* 0220 */  0x38, 0xAF, 0x30, 0x3E, 0xD6, 0x00, 0x93, 0x51,  // 8.0>...Q
                /* 0228 */  0x3F, 0xD6, 0x80, 0xED, 0xE4, 0x03, 0x67, 0x00,  // ?.....g.
                /* 0230 */  0x3C, 0x8E, 0x09, 0x10, 0x26, 0xFA, 0x5D, 0x20,  // <...&.] 
                /* 0238 */  0x29, 0x0F, 0x04, 0x0A, 0xE3, 0x23, 0x0D, 0x70,  // )....#.p
                /* 0240 */  0xF9, 0xFF, 0x1F, 0x69, 0x80, 0xDF, 0xC9, 0x00,  // ...i....
                /* 0248 */  0x77, 0x7A, 0x00, 0xCF, 0x84, 0x5E, 0x2B, 0xD8,  // wz...^+.
                /* 0250 */  0xFD, 0xC1, 0xE3, 0x08, 0x12, 0x38, 0xC2, 0x13,  // .....8..
                /* 0258 */  0x11, 0x39, 0xD1, 0x40, 0x3E, 0x35, 0x3C, 0xC2,  // .9.@>5<.
                /* 0260 */  0x3C, 0x07, 0x9C, 0xCE, 0xE1, 0x1C, 0xC9, 0x43,  // <......C
                /* 0268 */  0xC0, 0xEB, 0x8C, 0xBD, 0x21, 0xE9, 0x1E, 0xF3,  // ....!...
                /* 0270 */  0x3A, 0x63, 0xAC, 0x40, 0x27, 0x15, 0xC5, 0xF7,  // :c.@'...
                /* 0278 */  0x99, 0x50, 0x11, 0xA2, 0x45, 0x09, 0x19, 0xE1,  // .P..E...
                /* 0280 */  0x15, 0x22, 0xA4, 0x91, 0xA3, 0x45, 0x8C, 0x12,  // ."...E..
                /* 0288 */  0x3F, 0x64, 0x9C, 0x27, 0x1A, 0x16, 0xEB, 0x28,  // ?d.'...(
                /* 0290 */  0xA0, 0xF3, 0x87, 0x4F, 0x34, 0x80, 0xDF, 0xFF,  // ...O4...
                /* 0298 */  0xFF, 0x89, 0x06, 0xFC, 0xF2, 0x4E, 0x24, 0xA0,  // .....N$.
                /* 02A0 */  0x3B, 0x36, 0x79, 0x0E, 0x21, 0x9E, 0x46, 0x80,  // ;6y.!.F.
                /* 02A8 */  0x8B, 0xF4, 0x47, 0x87, 0x4E, 0x75, 0x64, 0xA1,  // ..G.Nud.
                /* 02B0 */  0xB2, 0xB1, 0x50, 0x0F, 0x82, 0x0A, 0x3F, 0x21,  // ..P...?!
                /* 02B8 */  0xE8, 0xAC, 0x12, 0x37, 0xE6, 0xAB, 0xCA, 0x6B,  // ...7...k
                /* 02C0 */  0x84, 0x4F, 0x6B, 0xBE, 0x4B, 0xB0, 0x41, 0x0B,  // .Ok.K.A.
                /* 02C8 */  0x4E, 0xA7, 0x3D, 0x2E, 0x93, 0x42, 0x22, 0x21,  // N.=..B"!
                /* 02D0 */  0x34, 0x20, 0xC3, 0x59, 0x16, 0x1C, 0x05, 0xF1,  // 4 .Y....
                /* 02D8 */  0xE8, 0x7D, 0xE2, 0xF3, 0x51, 0x08, 0x6E, 0xC4,  // .}..Q.n.
                /* 02E0 */  0xA3, 0x10, 0x3D, 0x2D, 0xE0, 0xC7, 0x72, 0x64,  // ..=-..rd
                /* 02E8 */  0x27, 0xE6, 0x59, 0xF8, 0x70, 0x87, 0x3B, 0x72,  // '.Y.p.;r
                /* 02F0 */  0xC0, 0x1D, 0x1C, 0x5B, 0xE1, 0xF1, 0xFB, 0x02,  // ...[....
                /* 02F8 */  0x10, 0xE4, 0x7C, 0x83, 0x9D, 0xAC, 0x51, 0x5E,  // ..|...Q^
                /* 0300 */  0x11, 0x3C, 0x42, 0xEC, 0x60, 0x7C, 0x4C, 0xE2,  // .<B.`|L.
                /* 0308 */  0xE3, 0xF0, 0xD5, 0xE0, 0x7D, 0xC6, 0x04, 0xEC,  // ....}...
                /* 0310 */  0x0C, 0x04, 0x9E, 0xFF, 0xFF, 0x19, 0x88, 0x0B,  // ........
                /* 0318 */  0x3C, 0x22, 0x80, 0x02, 0xC8, 0x97, 0x02, 0x1F,  // <"......
                /* 0320 */  0x11, 0x1E, 0x0C, 0xD8, 0x1C, 0x9E, 0x12, 0x7C,  // .......|
                /* 0328 */  0xC4, 0x61, 0xF0, 0x3C, 0xDA, 0xA8, 0xA8, 0xAC,  // .a.<....
                /* 0330 */  0x71, 0xA1, 0x06, 0xEB, 0x33, 0x0C, 0xC3, 0x3E,  // q...3..>
                /* 0338 */  0x4F, 0x5F, 0x9A, 0x8E, 0xD2, 0xC7, 0x29, 0x0C,  // O_....).
                /* 0340 */  0xAC, 0x87, 0xCF, 0x61, 0x8D, 0x16, 0xF6, 0xA8,  // ...a....
                /* 0348 */  0x9F, 0x24, 0x7C, 0x0B, 0xF1, 0xCC, 0x8C, 0x11,  // .$|.....
                /* 0350 */  0xD6, 0x47, 0x00, 0x20, 0x76, 0x7C, 0x40, 0x9D,  // .G. v|@.
                /* 0358 */  0x79, 0x7C, 0x6E, 0xF0, 0x88, 0x22, 0x9E, 0xE7,  // y|n.."..
                /* 0360 */  0xDB, 0x8F, 0x2F, 0x1B, 0xA7, 0xE4, 0x01, 0x59,  // ../....Y
                /* 0368 */  0xE2, 0xE9, 0x01, 0x25, 0x8E, 0x42, 0xD2, 0x4E,  // ...%.B.N
                /* 0370 */  0x0F, 0x28, 0x31, 0x70, 0x14, 0xC4, 0xA7, 0x07,  // .(1p....
                /* 0378 */  0x07, 0x3D, 0x3D, 0x40, 0x0F, 0x76, 0x7A, 0x00,  // .==@.vz.
                /* 0380 */  0xC5, 0xA9, 0x00, 0x37, 0x56, 0xB8, 0x63, 0xF3,  // ...7V.c.
                /* 0388 */  0x21, 0xCC, 0x73, 0xC3, 0x1E, 0x1C, 0xC0, 0xF2,  // !.s.....
                /* 0390 */  0xFF, 0x3F, 0x38, 0x00, 0xDF, 0xE1, 0xFA, 0xE0,  // .?8.....
                /* 0398 */  0x00, 0xAE, 0x33, 0x80, 0x0F, 0x0E, 0xE0, 0x3A,  // ..3....:
                /* 03A0 */  0x6E, 0x82, 0x67, 0xF4, 0xEC, 0x08, 0xF3, 0x88,  // n.g.....
                /* 03A8 */  0x63, 0xAC, 0x73, 0x7D, 0xE4, 0xF1, 0x09, 0x00,  // c.s}....
                /* 03B0 */  0x8E, 0x98, 0x73, 0x03, 0x6A, 0xB8, 0x96, 0x7B,  // ..s.j..{
                /* 03B8 */  0x8A, 0x41, 0xDC, 0x11, 0x30, 0x07, 0x18, 0x1F,  // .A..0...
                /* 03C0 */  0x1B, 0xB8, 0x40, 0x0A, 0xC9, 0x3B, 0x36, 0xA0,  // ..@..;6.
                /* 03C8 */  0x04, 0xC1, 0x51, 0x10, 0x8F, 0xD1, 0x61, 0x8F,  // ..Q...a.
                /* 03D0 */  0x0D, 0xD0, 0xC3, 0x1D, 0x1B, 0x40, 0x71, 0xFC,  // .....@q.
                /* 03D8 */  0xC1, 0x9F, 0x38, 0xE0, 0x9F, 0xC3, 0xE0, 0x1C,  // ..8.....
                /* 03E0 */  0x1C, 0xF8, 0xFF, 0xFF, 0xE0, 0x00, 0xF8, 0x08,  // ........
                /* 03E8 */  0x75, 0x70, 0x00, 0x1D, 0x2C, 0x3F, 0x38, 0x80,  // up..,?8.
                /* 03F0 */  0x67, 0xFC, 0xC0, 0x43, 0xA1, 0x4D, 0x9F, 0x1A,  // g..C.M..
                /* 03F8 */  0x8D, 0x5A, 0x35, 0x28, 0x53, 0xA3, 0x4C, 0x83,  // .Z5(S.L.
                /* 0400 */  0x5A, 0x7D, 0x2A, 0x35, 0x66, 0xCC, 0xC6, 0x91,  // Z}*5f...
                /* 0408 */  0x01, 0x25, 0x64, 0x55, 0x1A, 0x96, 0x63, 0x80,  // .%dU..c.
                /* 0410 */  0xF0, 0x47, 0x82, 0x40, 0x1C, 0xD5, 0x02, 0x20,  // .G.@... 
                /* 0418 */  0x8B, 0xE2, 0x01, 0x88, 0x09, 0x59, 0x92, 0x40,  // .....Y.@
                /* 0420 */  0x1C, 0xEF, 0xA8, 0x28, 0x23, 0xE7, 0x06, 0x83,  // ...(#...
                /* 0428 */  0x08, 0xC8, 0x71, 0xD7, 0x28, 0x20, 0x87, 0x07,  // ..q.( ..
                /* 0430 */  0x11, 0x90, 0xE3, 0xAF, 0x43, 0x40, 0x16, 0xA3,  // ....C@..
                /* 0438 */  0x03, 0x88, 0xFD, 0xFF, 0x01                     // .....
            })
        }

        Device (WFTE)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "TestDev")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0x7F, 0xAB, 0x13, 0x1F, 0x20, 0x62, 0x10, 0x42,  // .... b.B
                /* 0008 */  0x8F, 0x8E, 0x8B, 0xB5, 0xE7, 0x1E, 0xE9, 0x69,  // .......i
                /* 0010 */  0x44, 0x45, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // DE..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x43, 0x43, 0x01, 0x00   // ..).CC..
            })
            Method (WMDE, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    PDAT = Arg2
                    Notify (WFDE, 0xD0) // Hardware-Specific
                    Return (PDAT) /* \_SB_.PDAT */
                }
            }

            Name (WQCC, Buffer (0x02F1)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xE1, 0x02, 0x00, 0x00, 0xC2, 0x06, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0xA8, 0x5D, 0x83, 0x00, 0x01, 0x06, 0x18, 0x42,  // .].....B
                /* 0020 */  0x20, 0x14, 0x03, 0x89, 0xC0, 0xA2, 0x69, 0x24,  //  .....i$
                /* 0028 */  0xC7, 0x01, 0x0C, 0x86, 0xCB, 0x72, 0x20, 0xE4,  // .....r .
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x64, 0x01,  // J.C...d.
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xB8, 0x00, 0xE5,  // )..@H...
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xDC, 0x96,  // .|...(..
                /* 0068 */  0x61, 0x44, 0xE0, 0x51, 0x44, 0xB6, 0x50, 0x34,  // aD.QD.P4
                /* 0070 */  0x0A, 0x8D, 0x1D, 0x86, 0x65, 0x82, 0x69, 0x10,  // ....e.i.
                /* 0078 */  0x87, 0x51, 0x36, 0xB2, 0x08, 0x3C, 0xA1, 0x4E,  // .Q6..<.N
                /* 0080 */  0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78, 0x54,  // ... L.xT
                /* 0088 */  0x61, 0x34, 0x07, 0x45, 0x20, 0x43, 0x63, 0xC4,  // a4.E Cc.
                /* 0090 */  0x40, 0x48, 0x22, 0xAC, 0x9C, 0x63, 0x6B, 0x14,  // @H"..ck.
                /* 0098 */  0xA7, 0x71, 0x34, 0xA5, 0x63, 0x68, 0x04, 0xC7,  // .q4.ch..
                /* 00A0 */  0x75, 0x40, 0x06, 0xE9, 0x7D, 0x3A, 0x44, 0xD0,  // u@..}:D.
                /* 00A8 */  0x84, 0x34, 0x8A, 0x68, 0x21, 0xA2, 0x04, 0x3D,  // .4.h!..=
                /* 00B0 */  0x8E, 0x20, 0x81, 0x23, 0x24, 0x30, 0xCC, 0x31,  // . .#$0.1
                /* 00B8 */  0x60, 0x64, 0x40, 0xC8, 0xB3, 0x00, 0xEB, 0x83,  // `d@.....
                /* 00C0 */  0x23, 0x04, 0x76, 0x2F, 0xC0, 0x98, 0x00, 0x8D,  // #.v/....
                /* 00C8 */  0x10, 0x72, 0x26, 0xC0, 0xA0, 0x00, 0x85, 0x02,  // .r&.....
                /* 00D0 */  0xBC, 0xC1, 0xC8, 0x96, 0x00, 0x6D, 0x02, 0x94,  // .....m..
                /* 00D8 */  0x21, 0x68, 0x4A, 0x51, 0x0E, 0x2A, 0x48, 0xB8,  // !hJQ.*H.
                /* 00E0 */  0x28, 0x16, 0x87, 0x26, 0x88, 0x16, 0x51, 0x08,  // (..&..Q.
                /* 00E8 */  0x68, 0x84, 0xD6, 0x60, 0x84, 0x1B, 0x2E, 0x46,  // h..`...F
                /* 00F0 */  0x84, 0x93, 0x8B, 0x1C, 0xA2, 0xFD, 0x41, 0x90,  // ......A.
                /* 00F8 */  0x68, 0x47, 0x01, 0x49, 0x00, 0x51, 0xA4, 0xD1,  // hG.I.Q..
                /* 0100 */  0xA0, 0x86, 0x9F, 0xE0, 0x71, 0xC0, 0x47, 0x81,  // ....q.G.
                /* 0108 */  0x93, 0x3B, 0xA9, 0x13, 0x33, 0xC8, 0x89, 0x1D,  // .;..3...
                /* 0110 */  0x5D, 0x9D, 0xE7, 0x00, 0x32, 0x62, 0x86, 0x95,  // ]...2b..
                /* 0118 */  0xE0, 0xD7, 0xC0, 0x07, 0x03, 0xBC, 0x6B, 0x40,  // ......k@
                /* 0120 */  0xDD, 0x08, 0x9E, 0x07, 0xD8, 0x30, 0xC3, 0x61,  // .....0.a
                /* 0128 */  0x86, 0xE8, 0xD1, 0x86, 0xFB, 0xFF, 0x9F, 0xC0,  // ........
                /* 0130 */  0x21, 0x32, 0x40, 0x0F, 0xED, 0x51, 0x00, 0xEB,  // !2@..Q..
                /* 0138 */  0x70, 0x32, 0x3A, 0x07, 0x94, 0x2A, 0xC0, 0xEC,  // p2:..*..
                /* 0140 */  0x99, 0x40, 0x33, 0x4B, 0x70, 0x3C, 0x3E, 0x00,  // .@3Kp<>.
                /* 0148 */  0x78, 0x3E, 0x27, 0x9C, 0xC0, 0xF2, 0x07, 0x81,  // x>'.....
                /* 0150 */  0x1A, 0x99, 0xA1, 0x3D, 0xE3, 0xD3, 0x7A, 0x0F,  // ...=..z.
                /* 0158 */  0xF0, 0xF1, 0xE0, 0xB0, 0x98, 0x58, 0x08, 0x29,  // .....X.)
                /* 0160 */  0x80, 0xD0, 0x78, 0xC0, 0xAF, 0xF8, 0x68, 0x20,  // ..x...h 
                /* 0168 */  0x84, 0x97, 0x05, 0xCF, 0xD7, 0x87, 0x04, 0x03,  // ........
                /* 0170 */  0x63, 0x07, 0x64, 0xBF, 0x02, 0x10, 0x82, 0xBF,  // c.d.....
                /* 0178 */  0x2E, 0x1C, 0xD1, 0x43, 0x43, 0x84, 0x04, 0x2F,  // ...CC../
                /* 0180 */  0x03, 0x47, 0x50, 0x29, 0xBE, 0xB0, 0x0E, 0x21,  // .GP)...!
                /* 0188 */  0x46, 0xA4, 0x18, 0x51, 0x82, 0xD4, 0x0A, 0xA1,  // F..Q....
                /* 0190 */  0xE9, 0x87, 0x49, 0x50, 0xE4, 0xC9, 0x01, 0x3D,  // ..IP...=
                /* 0198 */  0x02, 0x8E, 0x77, 0x02, 0xC7, 0x13, 0xD9, 0xE3,  // ..w.....
                /* 01A0 */  0x89, 0x72, 0x12, 0x07, 0xE4, 0x33, 0x85, 0x11,  // .r...3..
                /* 01A8 */  0x4E, 0xF3, 0x51, 0xE2, 0xD1, 0xC2, 0x9A, 0x67,  // N.Q....g
                /* 01B0 */  0xA4, 0x13, 0xC3, 0x39, 0xBD, 0x0D, 0x98, 0xA0,  // ...9....
                /* 01B8 */  0xB2, 0xE7, 0x80, 0x8E, 0x1F, 0x56, 0x05, 0x22,  // .....V."
                /* 01C0 */  0x1B, 0x4B, 0xF5, 0x39, 0x83, 0x6A, 0x5E, 0xAE,  // .K.9.j^.
                /* 01C8 */  0x46, 0x74, 0xCC, 0xC7, 0xEA, 0x11, 0x9C, 0xB4,  // Ft......
                /* 01D0 */  0xA7, 0x17, 0xD9, 0x4A, 0xC1, 0x04, 0xEC, 0x61,  // ...J...a
                /* 01D8 */  0x5B, 0x23, 0x85, 0xD4, 0xD0, 0x68, 0x3C, 0x06,  // [#...h<.
                /* 01E0 */  0x77, 0xFE, 0x13, 0x09, 0x05, 0x31, 0xA0, 0xC3,  // w....1..
                /* 01E8 */  0x41, 0xC8, 0xC9, 0x49, 0x00, 0xA5, 0x62, 0xBC,  // A..I..b.
                /* 01F0 */  0xE4, 0x68, 0xC1, 0x08, 0xA6, 0x81, 0xD0, 0xDD,  // .h......
                /* 01F8 */  0xC1, 0xF3, 0xF3, 0x3D, 0x80, 0xDF, 0x4C, 0x7C,  // ...=..L|
                /* 0200 */  0x32, 0x30, 0xB0, 0xEF, 0x13, 0x6F, 0x1C, 0xF0,  // 20...o..
                /* 0208 */  0xFF, 0xFF, 0x37, 0x0E, 0x36, 0x09, 0x8C, 0x9A,  // ..7.6...
                /* 0210 */  0x23, 0x04, 0x9D, 0x02, 0xBF, 0x00, 0xBC, 0x0A,  // #.......
                /* 0218 */  0x98, 0xC0, 0xBA, 0x2E, 0x06, 0xD0, 0x4F, 0x1D,  // ......O.
                /* 0220 */  0x1E, 0xA8, 0xAF, 0x1C, 0x67, 0x63, 0x7D, 0x07,  // ....gc}.
                /* 0228 */  0x03, 0x50, 0x00, 0xF9, 0x22, 0xE0, 0x93, 0xC1,  // .P.."...
                /* 0230 */  0xC3, 0x00, 0xBB, 0x19, 0x18, 0x26, 0x9A, 0xD1,  // .....&..
                /* 0238 */  0xB9, 0xA8, 0x69, 0xA3, 0x64, 0xC0, 0x68, 0xDA,  // ..i.d.h.
                /* 0240 */  0x06, 0xF1, 0xB4, 0x1D, 0x71, 0xDA, 0x68, 0x68,  // ....q.hh
                /* 0248 */  0x5F, 0x05, 0x7C, 0x11, 0x70, 0xA8, 0x61, 0xD3,  // _.|.p.a.
                /* 0250 */  0x3B, 0x07, 0x7E, 0xAE, 0x67, 0x16, 0xD0, 0x93,  // ;.~.g...
                /* 0258 */  0xF0, 0x91, 0xE4, 0xB8, 0xC1, 0x32, 0x0A, 0x06,  // .....2..
                /* 0260 */  0x1E, 0x24, 0x8E, 0x47, 0xC1, 0x26, 0xCE, 0x07,  // .$.G.&..
                /* 0268 */  0xE0, 0x89, 0xF3, 0x71, 0xF9, 0x86, 0x01, 0x7F,  // ...q....
                /* 0270 */  0xE4, 0x58, 0x82, 0x02, 0x67, 0x0E, 0x72, 0x78,  // .X..g.rx
                /* 0278 */  0x4C, 0xB0, 0x51, 0x51, 0x59, 0xE3, 0x42, 0x8D,  // L.QQY.B.
                /* 0280 */  0xD2, 0x57, 0x20, 0x86, 0x7D, 0x82, 0x16, 0x3D,  // .W .}..=
                /* 0288 */  0x48, 0x9D, 0x2F, 0x0E, 0xEA, 0x69, 0xC4, 0x63,  // H./..i.c
                /* 0290 */  0x33, 0xAC, 0xC7, 0xFD, 0xFF, 0x0F, 0x8B, 0x41,  // 3......A
                /* 0298 */  0x0B, 0x7B, 0xB8, 0x2F, 0x22, 0x3E, 0xC5, 0x78,  // .{./">.x
                /* 02A0 */  0x66, 0xC6, 0x08, 0xEB, 0xB1, 0x7B, 0x40, 0x8F,  // f....{@.
                /* 02A8 */  0x10, 0xE0, 0x01, 0x7B, 0x35, 0x39, 0xD3, 0x07,  // ...{59..
                /* 02B0 */  0x97, 0x3F, 0x8E, 0xEA, 0x20, 0x74, 0xDF, 0xE0,  // .?.. t..
                /* 02B8 */  0x28, 0x21, 0x1E, 0x38, 0x30, 0x04, 0x15, 0xDA,  // (!.80...
                /* 02C0 */  0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32, 0x35,  // ....U.25
                /* 02C8 */  0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63, 0xC6,  // .4...Rc.
                /* 02D0 */  0x3C, 0x5C, 0x8E, 0xE8, 0x41, 0x81, 0xBC, 0x13,  // <\..A...
                /* 02D8 */  0x34, 0x42, 0x87, 0x00, 0xA1, 0x42, 0x9E, 0x08,  // 4B...B..
                /* 02E0 */  0x32, 0x72, 0x0F, 0x31, 0x88, 0x80, 0xAC, 0xCC,  // 2r.1....
                /* 02E8 */  0x02, 0x10, 0xD3, 0x09, 0x22, 0x20, 0xFF, 0xFF,  // ...." ..
                /* 02F0 */  0x01                                             // .
            })
        }

        Method (USSV, 1, Serialized)
        {
            PDAT = Arg0
        }

        Method (GSSV, 0, Serialized)
        {
            Return (PDAT) /* \_SB_.PDAT */
        }
    }

    Scope (_SB.PCI0.GFX0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PCI0.IPU0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PCI0.SAT0)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((((S0ID == One) || (OSYS >= 0x07DF)) && (
                (PEPC & 0x03) != Zero)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    If (((S0ID == One) || (OSYS >= 0x07DF)))
    {
        Scope (_SB.PCI0.I2C0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C1)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C2)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C3)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C4)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C5)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.SPI0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.SPI1)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.SPI2)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA00)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA01)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.UA02)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.HECI)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        If ((GBES != Zero))
        {
            Scope (_SB.PCI0.GLAN)
            {
                Name (_DEP, Package (0x01)  // _DEP: Dependencies
                {
                    PEPD
                })
            }
        }
    }

    Scope (_SB.PCI0.XHC)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PCI0.HDAS)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((S0ID == One))
            {
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                Return (Package (0x00){})
            }
        }
    }

    If (CondRefOf (\_SB.PCI0.RP01.PXSX))
    {
        Scope (_SB.PCI0.RP01.PXSX)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If ((PAHC () || PNVM ()))
                {
                    If (((S0ID == One) && (OSYS == 0x07DC)))
                    {
                        If (((PEPC & One) == One))
                        {
                            Return (Package (0x01)
                            {
                                PEPD
                            })
                        }
                    }

                    If (((S0ID == One) && (OSYS >= 0x07DF)))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                Return (Package (0x00){})
            }

            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x06))
                    {
                        If ((PIXX == One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x08))
                    {
                        If ((PIXX == 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP02.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP03.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP04.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    If (CondRefOf (\_SB.PCI0.RP05.PXSX))
    {
        Scope (_SB.PCI0.RP05.PXSX)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If ((PAHC () || PNVM ()))
                {
                    If (((S0ID == One) && (OSYS == 0x07DC)))
                    {
                        If (((PEPC & One) == One))
                        {
                            Return (Package (0x01)
                            {
                                PEPD
                            })
                        }
                    }

                    If (((S0ID == One) && (OSYS >= 0x07DF)))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                Return (Package (0x00){})
            }

            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x06))
                    {
                        If ((PIXX == One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x08))
                    {
                        If ((PIXX == 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP06.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP07.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP08.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    If (CondRefOf (\_SB.PCI0.RP09.PXSX))
    {
        Scope (_SB.PCI0.RP09.PXSX)
        {
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If ((PAHC () || PNVM ()))
                {
                    If (((S0ID == One) && (OSYS == 0x07DC)))
                    {
                        If (((PEPC & One) == One))
                        {
                            Return (Package (0x01)
                            {
                                PEPD
                            })
                        }
                    }

                    If (((S0ID == One) && (OSYS >= 0x07DF)))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                Return (Package (0x00){})
            }

            OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
            Field (PCCX, ByteAcc, NoLock, Preserve)
            {
                PIXX,   8, 
                SCCX,   8, 
                BCCX,   8
            }

            Method (PAHC, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x06))
                    {
                        If ((PIXX == One))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }

            Method (PNVM, 0, Serialized)
            {
                If ((BCCX == One))
                {
                    If ((SCCX == 0x08))
                    {
                        If ((PIXX == 0x02))
                        {
                            Return (One)
                        }
                    }
                }

                Return (Zero)
            }
        }
    }

    Scope (_SB.PCI0.RP10.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP11.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP12.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP13.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP14.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP15.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP16.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP17.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP18.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP19.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PCI0.RP20.PXSX)
    {
        Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
        {
            If ((PAHC () || PNVM ()))
            {
                If (((S0ID == One) && (OSYS == 0x07DC)))
                {
                    If (((PEPC & One) == One))
                    {
                        Return (Package (0x01)
                        {
                            PEPD
                        })
                    }
                }

                If (((S0ID == One) && (OSYS >= 0x07DF)))
                {
                    Return (Package (0x01)
                    {
                        PEPD
                    })
                }
            }

            Return (Package (0x00){})
        }

        OperationRegion (PCCX, PCI_Config, 0x09, 0x04)
        Field (PCCX, ByteAcc, NoLock, Preserve)
        {
            PIXX,   8, 
            SCCX,   8, 
            BCCX,   8
        }

        Method (PAHC, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x06))
                {
                    If ((PIXX == One))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }

        Method (PNVM, 0, Serialized)
        {
            If ((BCCX == One))
            {
                If ((SCCX == 0x08))
                {
                    If ((PIXX == 0x02))
                    {
                        Return (One)
                    }
                }
            }

            Return (Zero)
        }
    }

    Scope (_SB.PR00)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR00 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR00 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR00 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR01)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR01 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR01 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR01 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR02)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR02 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR02 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR02 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR03)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR03 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR03 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR03 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR04)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR04 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR04 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR04 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR05)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR05 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR05 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR05 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR06)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR06 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR06 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR06 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR07)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR07 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR07 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR07 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR08)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR08 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR08 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR08 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR09)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR09 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR09 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR09 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR10)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR10 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR10 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR10 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR11)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR11 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR11 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR11 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR12)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR12 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR12 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR12 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR13)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR13 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR13 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR13 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR14)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR14 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR14 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR14 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB.PR15)
    {
        Method (XDEP, 0, NotSerialized)
        {
            ADBG ("PR15 DEP Call")
            If (((S0ID == One) || (OSYS >= 0x07DF)))
            {
                ADBG ("PR15 DEP")
                Return (Package (0x01)
                {
                    PEPD
                })
            }
            Else
            {
                ADBG ("PR15 DEP NULL")
                Return (Package (0x00){})
            }
        }
    }

    Scope (_SB)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (PPD0, Package (0x03)
            {
                "\\_SB.PCI0.SAT0", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x03)
                    {
                        0xFF, 
                        Zero, 
                        0x81
                    }
                }
            })
            Name (PPD3, Package (0x03)
            {
                "\\_SB.PCI0.SAT0", 
                Zero, 
                Package (0x02)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0xFF, 
                        0x03
                    }
                }
            })
            Name (DEVY, Package (0x3C)
            {
                Package (0x03)
                {
                    "\\_SB.PR00", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR01", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR02", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR03", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR04", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR05", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR06", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR07", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA00", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA01", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.XHC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.HDAS", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PEMC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PSDC", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C4", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C5", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.UA02", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP01.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP02.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP03.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP04.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP05.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP06.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP07.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP08.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP09.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP10.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP11.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP12.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP13.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP14.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP15.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP16.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP17.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP18.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP19.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP20.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SAT0.VOL0", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR08", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR09", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR10", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR11", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR12", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR13", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR14", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PR15", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SPI2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.CNVW", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.IPU0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.HECI", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.GLAN", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.PEG0.PEGP", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }
            })
            Name (BCCD, Package (0x19)
            {
                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT1", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT2", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SAT0.PRT3", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP01.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP02.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP03.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP04.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP05.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP06.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP07.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP08.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP09.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP10.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP11.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP12.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP13.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP14.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP15.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP16.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP17.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP18.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP19.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.RP20.PXSX", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x000186A0
                        }
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07DF) || ((OSYS >= 0x07DC) && (
                    S0ID == One))))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG (Concatenate ("PEPC = ", ToHexString (PEPC)))
                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                             // .
                        })
                    }

                    If ((Arg2 == One))
                    {
                        If ((S0ID == Zero))
                        {
                            Return (Package (0x00){})
                        }

                        If (((PEPC & One) == One))
                        {
                            If (((PEPC & 0x03) == One))
                            {
                                DEVY [0x09] = PPD0 /* \_SB_.PEPD.PPD0 */
                            }
                            ElseIf (((PEPC & 0x03) == 0x03))
                            {
                                DEVY [0x09] = PPD3 /* \_SB_.PEPD.PPD3 */
                            }

                            DerefOf (DEVY [0x09]) [One] = One
                        }
                        ElseIf (((PEPC & 0x03) == 0x02))
                        {
                            DerefOf (DEVY [0x2D]) [One] = One
                        }

                        If (((PEPC & 0x10) == One))
                        {
                            If (CondRefOf (\_SB.PCI0.RP01.PXSX))
                            {
                                If ((^^PCI0.RP01.PXSX.PAHC () || ^^PCI0.RP01.PXSX.PNVM ()))
                                {
                                    DerefOf (DEVY [0x19]) [One] = One
                                }
                            }

                            If ((^^PCI0.RP02.PXSX.PAHC () || ^^PCI0.RP02.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If ((^^PCI0.RP03.PXSX.PAHC () || ^^PCI0.RP03.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If ((^^PCI0.RP04.PXSX.PAHC () || ^^PCI0.RP04.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP05.PXSX))
                            {
                                If ((^^PCI0.RP05.PXSX.PAHC () || ^^PCI0.RP05.PXSX.PNVM ()))
                                {
                                    DerefOf (DEVY [0x1D]) [One] = One
                                }
                            }

                            If ((^^PCI0.RP06.PXSX.PAHC () || ^^PCI0.RP06.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If ((^^PCI0.RP07.PXSX.PAHC () || ^^PCI0.RP07.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If ((^^PCI0.RP08.PXSX.PAHC () || ^^PCI0.RP08.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP09.PXSX))
                            {
                                If ((^^PCI0.RP09.PXSX.PAHC () || ^^PCI0.RP09.PXSX.PNVM ()))
                                {
                                    DerefOf (DEVY [0x21]) [One] = One
                                }
                            }

                            If ((^^PCI0.RP10.PXSX.PAHC () || ^^PCI0.RP10.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If ((^^PCI0.RP11.PXSX.PAHC () || ^^PCI0.RP11.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If ((^^PCI0.RP12.PXSX.PAHC () || ^^PCI0.RP12.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If ((^^PCI0.RP13.PXSX.PAHC () || ^^PCI0.RP13.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If ((^^PCI0.RP14.PXSX.PAHC () || ^^PCI0.RP14.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If ((^^PCI0.RP15.PXSX.PAHC () || ^^PCI0.RP15.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If ((^^PCI0.RP16.PXSX.PAHC () || ^^PCI0.RP16.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If ((^^PCI0.RP17.PXSX.PAHC () || ^^PCI0.RP17.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If ((^^PCI0.RP18.PXSX.PAHC () || ^^PCI0.RP18.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If ((^^PCI0.RP19.PXSX.PAHC () || ^^PCI0.RP19.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If ((^^PCI0.RP20.PXSX.PAHC () || ^^PCI0.RP20.PXSX.PNVM ()))
                            {
                                DerefOf (DEVY [0x2C]) [One] = One
                            }
                        }

                        If (((PEPC & 0x04) == Zero))
                        {
                            DerefOf (DEVY [0x0A]) [One] = Zero
                        }

                        If (((PEPC & 0x08) == Zero))
                        {
                            DerefOf (DEVY [0x0B]) [One] = Zero
                        }

                        If (((PEPC & 0x10) == Zero)){}
                        If (((PEPC & 0x20) == Zero))
                        {
                            DerefOf (DEVY [0x0C]) [One] = Zero
                        }

                        If (((PEPC & 0x40) == Zero))
                        {
                            DerefOf (DEVY [0x0D]) [One] = Zero
                        }

                        If (((PEPC & 0x80) == Zero))
                        {
                            DerefOf (DEVY [0x0E]) [One] = Zero
                        }

                        If (((PEPC & 0x0100) == Zero))
                        {
                            DerefOf (DEVY [0x0F]) [One] = Zero
                        }

                        If (((PEPC & 0x0200) == Zero))
                        {
                            DerefOf (DEVY [0x08]) [One] = Zero
                        }

                        If ((TCNT >= One))
                        {
                            DerefOf (DEVY [Zero]) [One] = One
                        }

                        If ((TCNT >= 0x02))
                        {
                            DerefOf (DEVY [One]) [One] = One
                        }

                        If ((TCNT >= 0x03))
                        {
                            DerefOf (DEVY [0x02]) [One] = One
                        }

                        If ((TCNT >= 0x04))
                        {
                            DerefOf (DEVY [0x03]) [One] = One
                        }

                        If ((TCNT >= 0x05))
                        {
                            DerefOf (DEVY [0x04]) [One] = One
                        }

                        If ((TCNT >= 0x06))
                        {
                            DerefOf (DEVY [0x05]) [One] = One
                        }

                        If ((TCNT >= 0x07))
                        {
                            DerefOf (DEVY [0x06]) [One] = One
                        }

                        If ((TCNT >= 0x08))
                        {
                            DerefOf (DEVY [0x07]) [One] = One
                        }

                        If ((TCNT >= 0x09))
                        {
                            DerefOf (DEVY [0x2E]) [One] = One
                        }

                        If ((TCNT >= 0x0A))
                        {
                            DerefOf (DEVY [0x2F]) [One] = One
                        }

                        If ((TCNT >= 0x0B))
                        {
                            DerefOf (DEVY [0x30]) [One] = One
                        }

                        If ((TCNT >= 0x0C))
                        {
                            DerefOf (DEVY [0x31]) [One] = One
                        }

                        If ((TCNT >= 0x0D))
                        {
                            DerefOf (DEVY [0x32]) [One] = One
                        }

                        If ((TCNT >= 0x0E))
                        {
                            DerefOf (DEVY [0x33]) [One] = One
                        }

                        If ((TCNT >= 0x0F))
                        {
                            DerefOf (DEVY [0x34]) [One] = One
                        }

                        If ((TCNT >= 0x10))
                        {
                            DerefOf (DEVY [0x35]) [One] = One
                        }

                        If (((PEPC & 0x0400) == Zero))
                        {
                            DerefOf (DEVY [Zero]) [One] = Zero
                            DerefOf (DEVY [One]) [One] = Zero
                            DerefOf (DEVY [0x02]) [One] = Zero
                            DerefOf (DEVY [0x03]) [One] = Zero
                            DerefOf (DEVY [0x04]) [One] = Zero
                            DerefOf (DEVY [0x05]) [One] = Zero
                            DerefOf (DEVY [0x06]) [One] = Zero
                            DerefOf (DEVY [0x07]) [One] = Zero
                            DerefOf (DEVY [0x2E]) [One] = Zero
                            DerefOf (DEVY [0x2F]) [One] = Zero
                            DerefOf (DEVY [0x30]) [One] = Zero
                            DerefOf (DEVY [0x31]) [One] = Zero
                            DerefOf (DEVY [0x32]) [One] = Zero
                            DerefOf (DEVY [0x33]) [One] = Zero
                            DerefOf (DEVY [0x34]) [One] = Zero
                            DerefOf (DEVY [0x35]) [One] = Zero
                        }

                        If (((PEPC & 0x0800) == Zero))
                        {
                            DerefOf (DEVY [0x10]) [One] = Zero
                        }

                        If (((PEPC & 0x1000) == Zero))
                        {
                            DerefOf (DEVY [0x11]) [One] = Zero
                        }

                        If (((PEPC & 0x2000) == Zero))
                        {
                            DerefOf (DEVY [0x12]) [One] = Zero
                        }

                        If (((PEPC & 0x4000) == Zero))
                        {
                            DerefOf (DEVY [0x13]) [One] = Zero
                        }

                        If (((PEPC & 0x8000) == Zero))
                        {
                            DerefOf (DEVY [0x14]) [One] = Zero
                        }

                        If (((PEPC & 0x00010000) == Zero))
                        {
                            DerefOf (DEVY [0x15]) [One] = Zero
                        }

                        If (((PEPC & 0x00020000) == Zero))
                        {
                            DerefOf (DEVY [0x16]) [One] = Zero
                        }

                        If (((PEPC & 0x00040000) == Zero))
                        {
                            DerefOf (DEVY [0x17]) [One] = Zero
                        }

                        If (((PEPC & 0x00080000) == Zero))
                        {
                            DerefOf (DEVY [0x18]) [One] = Zero
                        }

                        If (((PEPC & 0x00100000) == Zero))
                        {
                            DerefOf (DEVY [0x36]) [One] = Zero
                        }

                        If (((PEPC & 0x00200000) == Zero))
                        {
                            DerefOf (DEVY [0x38]) [One] = Zero
                        }

                        If (((PEPC & 0x00400000) == Zero))
                        {
                            DerefOf (DEVY [0x39]) [One] = Zero
                        }

                        If ((((PEPC & 0x00800000) == Zero) || (GBES == Zero)))
                        {
                            DerefOf (DEVY [0x3A]) [One] = Zero
                        }

                        If (((PEPC & 0x01000000) != Zero))
                        {
                            DerefOf (DEVY [0x3B]) [One] = One
                        }

                        If ((OSYS >= 0x07DF))
                        {
                            If (CondRefOf (\_SB.PCI0.RP01.PXSX))
                            {
                                If (^^PCI0.RP01.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x19]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x19]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x19]) [One] = One
                                }
                            }

                            If (^^PCI0.RP02.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1A]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1A]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If (^^PCI0.RP03.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1B]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1B]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If (^^PCI0.RP04.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1C]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1C]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP05.PXSX))
                            {
                                If (^^PCI0.RP05.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1D]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x1D]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x1D]) [One] = One
                                }
                            }

                            If (^^PCI0.RP06.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1E]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1E]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If (^^PCI0.RP07.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x1F]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x1F]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If (^^PCI0.RP08.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x20]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x20]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP09.PXSX))
                            {
                                If (^^PCI0.RP09.PXSX.WIST ())
                                {
                                    DerefOf (DerefOf (DerefOf (DEVY [0x21]) [0x02]
                                        ) [One]) [One] = 0x03
                                    DerefOf (DerefOf (DerefOf (DEVY [0x21]) [0x02]
                                        ) [One]) [0x02] = Zero
                                    DerefOf (DEVY [0x21]) [One] = One
                                }
                            }

                            If (^^PCI0.RP10.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x22]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x22]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If (^^PCI0.RP11.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x23]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x23]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If (^^PCI0.RP12.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x24]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x24]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If (^^PCI0.RP13.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x25]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x25]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If (^^PCI0.RP14.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x26]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x26]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If (^^PCI0.RP15.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x27]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x27]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If (^^PCI0.RP16.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x28]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x28]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If (^^PCI0.RP17.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x29]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x29]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If (^^PCI0.RP18.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2A]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2A]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If (^^PCI0.RP19.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2B]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2B]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If (^^PCI0.RP20.PXSX.WIST ())
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x2C]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x2C]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x2C]) [One] = One
                            }

                            If ((^^PCI0.CNVW.VDID != 0xFFFFFFFF))
                            {
                                DerefOf (DerefOf (DerefOf (DEVY [0x37]) [0x02]
                                    ) [One]) [One] = 0x03
                                DerefOf (DerefOf (DerefOf (DEVY [0x37]) [0x02]
                                    ) [One]) [0x02] = Zero
                                DerefOf (DEVY [0x37]) [One] = One
                            }
                        }

                        If (((OSYS >= 0x07DF) && (PWIG == One)))
                        {
                            If (CondRefOf (\_SB.PCI0.RP01.PXSX))
                            {
                                If (^^PCI0.RP01.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x19]) [One] = One
                                }
                            }

                            If (^^PCI0.RP02.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x1A]) [One] = One
                            }

                            If (^^PCI0.RP03.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x1B]) [One] = One
                            }

                            If (^^PCI0.RP04.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x1C]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP05.PXSX))
                            {
                                If (^^PCI0.RP05.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x1D]) [One] = One
                                }
                            }

                            If (^^PCI0.RP06.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x1E]) [One] = One
                            }

                            If (^^PCI0.RP07.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x1F]) [One] = One
                            }

                            If (^^PCI0.RP08.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x20]) [One] = One
                            }

                            If (CondRefOf (\_SB.PCI0.RP09.PXSX))
                            {
                                If (^^PCI0.RP09.PXSX.WGST ())
                                {
                                    DerefOf (DEVY [0x21]) [One] = One
                                }
                            }

                            If (^^PCI0.RP10.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x22]) [One] = One
                            }

                            If (^^PCI0.RP11.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x23]) [One] = One
                            }

                            If (^^PCI0.RP12.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x24]) [One] = One
                            }

                            If (^^PCI0.RP13.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x25]) [One] = One
                            }

                            If (^^PCI0.RP14.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x26]) [One] = One
                            }

                            If (^^PCI0.RP15.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x27]) [One] = One
                            }

                            If (^^PCI0.RP16.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x28]) [One] = One
                            }

                            If (^^PCI0.RP17.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x29]) [One] = One
                            }

                            If (^^PCI0.RP18.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x2A]) [One] = One
                            }

                            If (^^PCI0.RP19.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x2B]) [One] = One
                            }

                            If (^^PCI0.RP20.PXSX.WGST ())
                            {
                                DerefOf (DEVY [0x2C]) [One] = One
                            }
                        }

                        Return (DEVY) /* \_SB_.PEPD.DEVY */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (BCCD) /* \_SB_.PEPD.BCCD */
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((S0ID == One))
                        {
                            D8XH (Zero, 0xC5)
                            D8XH (One, Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((S0ID == One))
                        {
                            D8XH (Zero, 0xC5)
                            D8XH (One, 0xAB)
                            If (((RTBT == One) && CondRefOf (\_SB.PCI0.RP21.TBNF)))
                            {
                                ^^PCI0.RP21.TBNF ()
                            }
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((S0ID == One))
                        {
                            GUAM (One)
                        }

                        ^^PCI0.LPCB.H_EC.ECNT (One)
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((S0ID == One))
                        {
                            GUAM (Zero)
                        }

                        ^^PCI0.LPCB.H_EC.ECNT (Zero)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Device (PSM)
    {
        Name (_HID, EisaId ("INT3420") /* Intel Bluetooth RF Kill */)  // _HID: Hardware ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_STR, Unicode ("Power Sharing Manager"))  // _STR: Description String
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((PSME == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        Name (SPLX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                0x80000000
            }
        })
        Method (SPLC, 0, Serialized)
        {
            DerefOf (SPLX [One]) [Zero] = PDT1 /* \PDT1 */
            DerefOf (SPLX [One]) [One] = PLM1 /* \PLM1 */
            DerefOf (SPLX [One]) [0x02] = PTW1 /* \PTW1 */
            DerefOf (SPLX [0x02]) [Zero] = PDT2 /* \PDT2 */
            DerefOf (SPLX [0x02]) [One] = PLM2 /* \PLM2 */
            DerefOf (SPLX [0x02]) [0x02] = PTW2 /* \PTW2 */
            Return (SPLX) /* \PSM_.SPLX */
        }

        Name (DPLX, Package (0x03)
        {
            Zero, 
            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }, 

            Package (0x03)
            {
                0x80000000, 
                0x80000000, 
                Package (0x06)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            }
        })
        Method (DPLC, 0, Serialized)
        {
            DerefOf (DPLX [One]) [Zero] = DDT1 /* \DDT1 */
            DerefOf (DPLX [One]) [One] = DDP1 /* \DDP1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [Zero]
                 = DLI1 /* \DLI1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [One]
                 = DPL1 /* \DPL1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x02]
                 = DTW1 /* \DTW1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x03]
                 = DMI1 /* \DMI1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x04]
                 = DMA1 /* \DMA1 */
            DerefOf (DerefOf (DPLX [One]) [0x02]) [0x05]
                 = DMT1 /* \DMT1 */
            DerefOf (DPLX [0x02]) [Zero] = DDT2 /* \DDT2 */
            DerefOf (DPLX [0x02]) [One] = DDP2 /* \DDP2 */
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [Zero]
                 = DLI2 /* \DLI2 */
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [One]
                 = DPL2 /* \DPL2 */
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [0x02]
                 = DTW2 /* \DTW2 */
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [0x03]
                 = DMI2 /* \DMI2 */
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [0x04]
                 = DMA2 /* \DMA2 */
            DerefOf (DerefOf (DPLX [0x02]) [0x02]) [0x05]
                 = DMT2 /* \DMT2 */
            Return (DPLX) /* \PSM_.DPLX */
        }
    }

    Scope (_SB)
    {
        Method (BTRK, 1, Serialized)
        {
            SGOV (GBTK, Arg0)
        }

        Method (GBTR, 0, NotSerialized)
        {
            Return (GGOV (GBTK))
        }
    }

    If (\_SB.PCI0.CNIP ())
    {
        Scope (_SB.PCI0.CNVW)
        {
            Name (SPLX, Package (0x04)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (SPLC, 0, Serialized)
            {
                DerefOf (SPLX [One]) [Zero] = DOM1 /* \DOM1 */
                DerefOf (SPLX [One]) [One] = LIM1 /* \LIM1 */
                DerefOf (SPLX [One]) [0x02] = TIM1 /* \TIM1 */
                DerefOf (SPLX [0x02]) [Zero] = DOM2 /* \DOM2 */
                DerefOf (SPLX [0x02]) [One] = LIM2 /* \LIM2 */
                DerefOf (SPLX [0x02]) [0x02] = TIM2 /* \TIM2 */
                DerefOf (SPLX [0x03]) [Zero] = DOM3 /* \DOM3 */
                DerefOf (SPLX [0x03]) [One] = LIM3 /* \LIM3 */
                DerefOf (SPLX [0x03]) [0x02] = TIM3 /* \TIM3 */
                Return (SPLX) /* \_SB_.PCI0.CNVW.SPLX */
            }

            Name (WANX, Package (0x03)
            {
                Zero, 
                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x03)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Method (WAND, 0, Serialized)
            {
                DerefOf (WANX [One]) [Zero] = Zero
                DerefOf (WANX [One]) [One] = TRD0 /* \TRD0 */
                DerefOf (WANX [One]) [0x02] = TRL0 /* \TRL0 */
                DerefOf (WANX [0x02]) [Zero] = One
                DerefOf (WANX [0x02]) [One] = TRD1 /* \TRD1 */
                DerefOf (WANX [0x02]) [0x02] = TRL1 /* \TRL1 */
                Return (WANX) /* \_SB_.PCI0.CNVW.WANX */
            }

            Name (WRDX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }, 

                Package (0x02)
                {
                    0x80000000, 
                    0x8000
                }
            })
            Method (WRDD, 0, Serialized)
            {
                DerefOf (WRDX [One]) [Zero] = WDM1 /* \WDM1 */
                DerefOf (WRDX [One]) [One] = CID1 /* \CID1 */
                DerefOf (WRDX [0x02]) [Zero] = WDM2 /* \WDM2 */
                DerefOf (WRDX [0x02]) [One] = CID2 /* \CID2 */
                Return (WRDX) /* \_SB_.PCI0.CNVW.WRDX */
            }

            Name (WRDY, Package (0x03)
            {
                Zero, 
                Package (0x0C)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }, 

                Package (0x06)
                {
                    0x10, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WRDS, 0, Serialized)
            {
                DerefOf (WRDY [One]) [One] = STXE /* \STXE */
                DerefOf (WRDY [One]) [0x02] = ST10 /* \ST10 */
                DerefOf (WRDY [One]) [0x03] = ST11 /* \ST11 */
                DerefOf (WRDY [One]) [0x04] = ST12 /* \ST12 */
                DerefOf (WRDY [One]) [0x05] = ST13 /* \ST13 */
                DerefOf (WRDY [One]) [0x06] = ST14 /* \ST14 */
                DerefOf (WRDY [One]) [0x07] = ST15 /* \ST15 */
                DerefOf (WRDY [One]) [0x08] = ST16 /* \ST16 */
                DerefOf (WRDY [One]) [0x09] = ST17 /* \ST17 */
                DerefOf (WRDY [One]) [0x0A] = ST18 /* \ST18 */
                DerefOf (WRDY [One]) [0x0B] = ST19 /* \ST19 */
                DerefOf (WRDY [0x02]) [One] = WRFE /* \WRFE */
                DerefOf (WRDY [0x02]) [0x02] = WRC1 /* \WRC1 */
                DerefOf (WRDY [0x02]) [0x03] = WRC2 /* \WRC2 */
                DerefOf (WRDY [0x02]) [0x04] = WRC3 /* \WRC3 */
                DerefOf (WRDY [0x02]) [0x05] = WRC4 /* \WRC4 */
                Return (WRDY) /* \_SB_.PCI0.CNVW.WRDY */
            }

            Name (EWRY, Package (0x02)
            {
                Zero, 
                Package (0x21)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (EWRD, 0, Serialized)
            {
                DerefOf (EWRY [One]) [One] = STDE /* \STDE */
                DerefOf (EWRY [One]) [0x02] = STRS /* \STRS */
                DerefOf (EWRY [One]) [0x03] = ST20 /* \ST20 */
                DerefOf (EWRY [One]) [0x04] = ST21 /* \ST21 */
                DerefOf (EWRY [One]) [0x05] = ST22 /* \ST22 */
                DerefOf (EWRY [One]) [0x06] = ST23 /* \ST23 */
                DerefOf (EWRY [One]) [0x07] = ST24 /* \ST24 */
                DerefOf (EWRY [One]) [0x08] = ST25 /* \ST25 */
                DerefOf (EWRY [One]) [0x09] = ST26 /* \ST26 */
                DerefOf (EWRY [One]) [0x0A] = ST27 /* \ST27 */
                DerefOf (EWRY [One]) [0x0B] = ST28 /* \ST28 */
                DerefOf (EWRY [One]) [0x0C] = ST29 /* \ST29 */
                DerefOf (EWRY [One]) [0x0D] = ST30 /* \ST30 */
                DerefOf (EWRY [One]) [0x0E] = ST31 /* \ST31 */
                DerefOf (EWRY [One]) [0x0F] = ST32 /* \ST32 */
                DerefOf (EWRY [One]) [0x10] = ST33 /* \ST33 */
                DerefOf (EWRY [One]) [0x11] = ST34 /* \ST34 */
                DerefOf (EWRY [One]) [0x12] = ST35 /* \ST35 */
                DerefOf (EWRY [One]) [0x13] = ST36 /* \ST36 */
                DerefOf (EWRY [One]) [0x14] = ST37 /* \ST37 */
                DerefOf (EWRY [One]) [0x15] = ST38 /* \ST38 */
                DerefOf (EWRY [One]) [0x16] = ST39 /* \ST39 */
                DerefOf (EWRY [One]) [0x17] = ST40 /* \ST40 */
                DerefOf (EWRY [One]) [0x18] = ST41 /* \ST41 */
                DerefOf (EWRY [One]) [0x19] = ST42 /* \ST42 */
                DerefOf (EWRY [One]) [0x1A] = ST43 /* \ST43 */
                DerefOf (EWRY [One]) [0x1B] = ST44 /* \ST44 */
                DerefOf (EWRY [One]) [0x1C] = ST45 /* \ST45 */
                DerefOf (EWRY [One]) [0x1D] = ST46 /* \ST46 */
                DerefOf (EWRY [One]) [0x1E] = ST47 /* \ST47 */
                DerefOf (EWRY [One]) [0x1F] = ST48 /* \ST48 */
                DerefOf (EWRY [One]) [0x20] = ST49 /* \ST49 */
                Return (EWRY) /* \_SB_.PCI0.CNVW.EWRY */
            }

            Name (WGDY, Package (0x02)
            {
                Zero, 
                Package (0x13)
                {
                    0x07, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80, 
                    0x80
                }
            })
            Method (WGDS, 0, Serialized)
            {
                DerefOf (WGDY [One]) [One] = SD11 /* \SD11 */
                DerefOf (WGDY [One]) [0x02] = SD12 /* \SD12 */
                DerefOf (WGDY [One]) [0x03] = SD13 /* \SD13 */
                DerefOf (WGDY [One]) [0x04] = SD14 /* \SD14 */
                DerefOf (WGDY [One]) [0x05] = SD15 /* \SD15 */
                DerefOf (WGDY [One]) [0x06] = SD16 /* \SD16 */
                DerefOf (WGDY [One]) [0x07] = SD21 /* \SD21 */
                DerefOf (WGDY [One]) [0x08] = SD22 /* \SD22 */
                DerefOf (WGDY [One]) [0x09] = SD23 /* \SD23 */
                DerefOf (WGDY [One]) [0x0A] = SD24 /* \SD24 */
                DerefOf (WGDY [One]) [0x0B] = SD25 /* \SD25 */
                DerefOf (WGDY [One]) [0x0C] = SD26 /* \SD26 */
                DerefOf (WGDY [One]) [0x0D] = SD31 /* \SD31 */
                DerefOf (WGDY [One]) [0x0E] = SD32 /* \SD32 */
                DerefOf (WGDY [One]) [0x0F] = SD33 /* \SD33 */
                DerefOf (WGDY [One]) [0x10] = SD34 /* \SD34 */
                DerefOf (WGDY [One]) [0x11] = SD35 /* \SD35 */
                DerefOf (WGDY [One]) [0x12] = SD36 /* \SD36 */
                Return (WGDY) /* \_SB_.PCI0.CNVW.WGDY */
            }

            Name (SADX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    0x80000000
                }, 

                Package (0x02)
                {
                    0x12, 
                    0x80000000
                }
            })
            Method (SADS, 0, Serialized)
            {
                DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                Return (SADX) /* \_SB_.PCI0.CNVW.SADX */
            }

            Name (GPCX, Package (0x03)
            {
                Zero, 
                Package (0x02)
                {
                    0x07, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }, 

                Package (0x02)
                {
                    0x12, 
                    Package (0x03)
                    {
                        Zero, 
                        Zero, 
                        Zero
                    }
                }
            })
            Method (GPC, 0, Serialized)
            {
                Return (GPCX) /* \_SB_.PCI0.CNVW.GPCX */
            }
        }

        If ((PCHS == 0x02))
        {
            Scope (_SB.PCI0.XHC.RHUB.HS10)
            {
                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS10.SADX */
                }

                Name (BRDY, Package (0x02)
                {
                    Zero, 
                    Package (0x08)
                    {
                        0x12, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (BRDS, 0, Serialized)
                {
                    DerefOf (BRDY [One]) [One] = BTSE /* \BTSE */
                    DerefOf (BRDY [One]) [0x02] = BTBR /* \BTBR */
                    DerefOf (BRDY [One]) [0x03] = BED2 /* \BED2 */
                    DerefOf (BRDY [One]) [0x04] = BED3 /* \BED3 */
                    DerefOf (BRDY [One]) [0x05] = BTLE /* \BTLE */
                    DerefOf (BRDY [One]) [0x06] = BTL2 /* \BTL2 */
                    DerefOf (BRDY [One]) [0x07] = BTLL /* \BTLL */
                    Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS10.BRDY */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS10.GPCX */
                }
            }
        }
        Else
        {
            Scope (_SB.PCI0.XHC.RHUB.HS14)
            {
                Name (SADX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        0x80000000
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        0x80000000
                    }
                })
                Method (SADS, 0, Serialized)
                {
                    DerefOf (SADX [One]) [One] = ATDV /* \ATDV */
                    DerefOf (SADX [0x02]) [One] = ATDV /* \ATDV */
                    Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS14.SADX */
                }

                Name (BRDY, Package (0x02)
                {
                    Zero, 
                    Package (0x08)
                    {
                        0x12, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80, 
                        0x80
                    }
                })
                Method (BRDS, 0, Serialized)
                {
                    DerefOf (BRDY [One]) [One] = BTSE /* \BTSE */
                    DerefOf (BRDY [One]) [0x02] = BTBR /* \BTBR */
                    DerefOf (BRDY [One]) [0x03] = BED2 /* \BED2 */
                    DerefOf (BRDY [One]) [0x04] = BED3 /* \BED3 */
                    DerefOf (BRDY [One]) [0x05] = BTLE /* \BTLE */
                    DerefOf (BRDY [One]) [0x06] = BTL2 /* \BTL2 */
                    DerefOf (BRDY [One]) [0x07] = BTLL /* \BTLL */
                    Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS14.BRDY */
                }

                Name (GPCX, Package (0x03)
                {
                    Zero, 
                    Package (0x02)
                    {
                        0x07, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        0x12, 
                        Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        }
                    }
                })
                Method (GPC, 0, Serialized)
                {
                    Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS14.GPCX */
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PINR, 2, Serialized)
        {
            Name (GPIR, ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0xFFFF
                    }
            })
            CreateWordField (GPIR, 0x17, PINF)
            PINF = (GINF (Arg1, 0x06) + Arg0)
            Return (GPIR) /* \_SB_.PCI0.PINR.GPIR */
        }

        Method (DSMI, 4, Serialized)
        {
            Local3 = (Arg3 << 0x18)
            Local2 = (Arg2 << 0x10)
            Local1 = (Arg1 << 0x08)
            Local0 = (Local1 | Arg0)
            Local0 |= Local2
            Local0 |= Local3
            Return (Local0)
        }

        Method (GPPI, 4, Serialized)
        {
            Local3 = (Arg3 << 0x18)
            Local2 = (Arg2 << 0x10)
            Local1 = (Arg1 << 0x08)
            Local0 = (Local1 | Arg0)
            Local0 |= Local2
            Local0 |= Local3
            Return (Local0)
        }

        Method (GRID, 1, Serialized)
        {
            Name (BUF, Buffer (0x09){})
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    BUF [Zero] = L0H0 /* \L0H0 */
                    BUF [One] = L0H1 /* \L0H1 */
                    BUF [0x02] = L0H2 /* \L0H2 */
                    BUF [0x03] = L0H3 /* \L0H3 */
                    BUF [0x04] = L0H4 /* \L0H4 */
                    BUF [0x05] = L0H5 /* \L0H5 */
                    BUF [0x06] = L0H6 /* \L0H6 */
                    BUF [0x07] = L0H7 /* \L0H7 */
                    BUF [0x08] = L0H8 /* \L0H8 */
                }
                Case (One)
                {
                    BUF [Zero] = L1H0 /* \L1H0 */
                    BUF [One] = L1H1 /* \L1H1 */
                    BUF [0x02] = L1H2 /* \L1H2 */
                    BUF [0x03] = L1H3 /* \L1H3 */
                    BUF [0x04] = L1H4 /* \L1H4 */
                    BUF [0x05] = L1H5 /* \L1H5 */
                    BUF [0x06] = L1H6 /* \L1H6 */
                    BUF [0x07] = L1H7 /* \L1H7 */
                    BUF [0x08] = L1H8 /* \L1H8 */
                }
                Case (0x02)
                {
                    BUF [Zero] = L2H0 /* \L2H0 */
                    BUF [One] = L2H1 /* \L2H1 */
                    BUF [0x02] = L2H2 /* \L2H2 */
                    BUF [0x03] = L2H3 /* \L2H3 */
                    BUF [0x04] = L2H4 /* \L2H4 */
                    BUF [0x05] = L2H5 /* \L2H5 */
                    BUF [0x06] = L2H6 /* \L2H6 */
                    BUF [0x07] = L2H7 /* \L2H7 */
                    BUF [0x08] = L2H8 /* \L2H8 */
                }
                Default
                {
                    BUF [Zero] = L3H0 /* \L3H0 */
                    BUF [One] = L3H1 /* \L3H1 */
                    BUF [0x02] = L3H2 /* \L3H2 */
                    BUF [0x03] = L3H3 /* \L3H3 */
                    BUF [0x04] = L3H4 /* \L3H4 */
                    BUF [0x05] = L3H5 /* \L3H5 */
                    BUF [0x06] = L3H6 /* \L3H6 */
                    BUF [0x07] = L3H7 /* \L3H7 */
                    BUF [0x08] = L3H8 /* \L3H8 */
                }

            }

            Return (ToString (BUF, Ones))
        }

        Method (HCID, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = L0SM /* \L0SM */
                }
                Case (One)
                {
                    Local0 = L1SM /* \L1SM */
                }
                Case (0x02)
                {
                    Local0 = L2SM /* \L2SM */
                }
                Default
                {
                    Local0 = L3SM /* \L3SM */
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    Return ("INT3471")
                }
                Case (One)
                {
                    Return ("INT33BE")
                }
                Case (0x02)
                {
                    Return ("INT3476")
                }
                Case (0x03)
                {
                    Return ("INT3477")
                }
                Case (0x04)
                {
                    Return ("INT3474")
                }
                Case (0x05)
                {
                    Return ("INT3473")
                }
                Case (0x06)
                {
                    Return ("INT3475")
                }
                Case (0x07)
                {
                    Return ("INT3478")
                }
                Case (0x08)
                {
                    Return ("INT3479")
                }
                Case (0x09)
                {
                    Return ("INT347A")
                }
                Case (0x0A)
                {
                    Return ("INT347B")
                }
                Case (0x0B)
                {
                    Return ("OVTI2742")
                }
                Case (0x0C)
                {
                    Return ("OVTI9234")
                }
                Case (0x0D)
                {
                    Return ("OVTI8856")
                }
                Case (0x0E)
                {
                    Return ("OVTIF860")
                }
                Default
                {
                    Return (GRID (Arg0))
                }

            }
        }

        Method (CDEP, 1, Serialized)
        {
            If ((Arg0 == Zero))
            {
                If ((C0TP == One))
                {
                    Switch (ToInteger (L0BS))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC0, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC0
                            })
                        }

                    }
                }

                If ((C0TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP0
                    })
                }
            }

            If ((Arg0 == One))
            {
                If ((C1TP == One))
                {
                    Switch (ToInteger (L1BS))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC1, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC1
                            })
                        }

                    }
                }

                If ((C1TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP1
                    })
                }
            }

            If ((Arg0 == 0x02))
            {
                If ((C2TP == One))
                {
                    Switch (ToInteger (L2BS))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC2, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC2
                            })
                        }

                    }
                }

                If ((C2TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP2
                    })
                }
            }

            If ((Arg0 == 0x03))
            {
                If ((C3TP == One))
                {
                    Switch (ToInteger (L3BS))
                    {
                        Case (Zero)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C0
                            })
                        }
                        Case (One)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C1
                            })
                        }
                        Case (0x02)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C2
                            })
                        }
                        Case (0x03)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C3
                            })
                        }
                        Case (0x04)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C4
                            })
                        }
                        Case (0x05)
                        {
                            Return (Package (0x02)
                            {
                                DSC3, 
                                I2C5
                            })
                        }
                        Default
                        {
                            Return (Package (0x01)
                            {
                                DSC3
                            })
                        }

                    }
                }

                If ((C3TP > One))
                {
                    Return (Package (0x01)
                    {
                        CLP3
                    })
                }
            }

            Return (Package (0x01)
            {
                PCI0
            })
        }

        Method (CDEG, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Return (Zero)
                }
                Case (One)
                {
                    Return (0x2D)
                }
                Case (0x02)
                {
                    Return (0x5A)
                }
                Case (0x03)
                {
                    Return (0x87)
                }
                Case (0x04)
                {
                    Return (0xB4)
                }
                Case (0x05)
                {
                    Return (0xE1)
                }
                Case (0x06)
                {
                    Return (0x010E)
                }
                Case (0x07)
                {
                    Return (0x013B)
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Device (DSC0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((C0GP > Zero))
                {
                    Local1 = PINR (C0P0, C0G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C0GP > One))
                {
                    Local1 = PINR (C0P1, C0G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C0GP > 0x02))
                {
                    Local1 = PINR (C0P2, C0G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C0GP > 0x03))
                {
                    Local1 = PINR (C0P3, C0G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL00)
                {
                    If ((C0TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C0VE /* \C0VE */
                PAR [One] = C0TP /* \C0TP */
                PAR [0x03] = C0CV /* \C0CV */
                PAR [0x04] = C0IC /* \C0IC */
                PAR [0x06] = C0SP /* \C0SP */
                PAR [0x08] = C0W0 /* \C0W0 */
                PAR [0x09] = C0W1 /* \C0W1 */
                PAR [0x0A] = C0W2 /* \C0W2 */
                PAR [0x0B] = C0W3 /* \C0W3 */
                PAR [0x0C] = C0W4 /* \C0W4 */
                PAR [0x0D] = C0W5 /* \C0W5 */
                PAR [0x0E] = C0CS /* \C0CS */
                Return (PAR) /* \_SB_.PCI0.DSC0.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C0GP) /* \C0GP */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C0F0, ((0x20 * C0G0) + C0P0), C0I0, C0A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C0F1, ((0x20 * C0G1) + C0P1), C0I1, C0A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C0F2, ((0x20 * C0G2) + C0P2), C0I2, C0A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C0F3, ((0x20 * C0G3) + C0P3), C0I3, C0A3))
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((PCHS == PCHL))
                {
                    If ((Arg0 == ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg2 == One))
                        {
                            CLKC (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                One])))
                            CLKF (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                0x02])))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (DSC1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((C1GP > Zero))
                {
                    Local1 = PINR (C1P0, C1G0)
                    ConcatenateResTemplate (Local0, Local1, Local0)
                }

                If ((C1GP > One))
                {
                    Local1 = PINR (C1P1, C1G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C1GP > 0x02))
                {
                    Local1 = PINR (C1P2, C1G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C1GP > 0x03))
                {
                    Local1 = PINR (C1P3, C1G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL01)
                {
                    If ((C1TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C1VE /* \C1VE */
                PAR [One] = C1TP /* \C1TP */
                PAR [0x03] = C1CV /* \C1CV */
                PAR [0x04] = C1IC /* \C1IC */
                PAR [0x06] = C1SP /* \C1SP */
                PAR [0x08] = C1W0 /* \C1W0 */
                PAR [0x09] = C1W1 /* \C1W1 */
                PAR [0x0A] = C1W2 /* \C1W2 */
                PAR [0x0B] = C1W3 /* \C1W3 */
                PAR [0x0C] = C1W4 /* \C1W4 */
                PAR [0x0D] = C1W5 /* \C1W5 */
                PAR [0x0E] = C1CS /* \C1CS */
                Return (PAR) /* \_SB_.PCI0.DSC1.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C1GP) /* \C1GP */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C1F0, ((0x20 * C1G0) + C1P0), C1I0, C1A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C1F1, ((0x20 * C1G1) + C1P1), C1I1, C1A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C1F2, ((0x20 * C1G2) + C1P2), C1I2, C1A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C1F3, ((0x20 * C1G3) + C1P3), C1I3, C1A3))
                    }
                }

                If ((PCHS == PCHL))
                {
                    If ((Arg0 == ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg2 == One))
                        {
                            CLKC (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                One])))
                            CLKF (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                0x02])))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (DSC2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((C2GP > Zero))
                {
                    Local1 = PINR (C2P0, C2G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C2GP > One))
                {
                    Local1 = PINR (C2P1, C2G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C2GP > 0x02))
                {
                    Local1 = PINR (C2P2, C2G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C2GP > 0x03))
                {
                    Local1 = PINR (C2P3, C2G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL02)
                {
                    If ((C2TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C2VE /* \C2VE */
                PAR [One] = C2TP /* \C2TP */
                PAR [0x03] = C2CV /* \C2CV */
                PAR [0x04] = C2IC /* \C2IC */
                PAR [0x06] = C2SP /* \C2SP */
                PAR [0x08] = C2W0 /* \C2W0 */
                PAR [0x09] = C2W1 /* \C2W1 */
                PAR [0x0A] = C2W2 /* \C2W2 */
                PAR [0x0B] = C2W3 /* \C2W3 */
                PAR [0x0C] = C2W4 /* \C2W4 */
                PAR [0x0D] = C2W5 /* \C2W5 */
                PAR [0x0E] = C2CS /* \C2CS */
                Return (PAR) /* \_SB_.PCI0.DSC2.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C2GP) /* \C2GP */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C2F0, ((0x20 * C2G0) + C2P0), C2I0, C2A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C2F1, ((0x20 * C2G1) + C2P1), C2I1, C2A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C2F2, ((0x20 * C2G2) + C2P2), C2I2, C2A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C2F3, ((0x20 * C2G3) + C2P3), C2I3, C2A3))
                    }
                }

                If ((PCHS == PCHL))
                {
                    If ((Arg0 == ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg2 == One))
                        {
                            CLKC (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                One])))
                            CLKF (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                0x02])))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (DSC3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((C3GP > Zero))
                {
                    Local1 = PINR (C3P0, C3G0)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C3GP > One))
                {
                    Local1 = PINR (C3P1, C3G1)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C3GP > 0x02))
                {
                    Local1 = PINR (C3P2, C3G2)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((C3GP > 0x03))
                {
                    Local1 = PINR (C3P3, C3G3)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL03)
                {
                    If ((C3TP == One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C3VE /* \C3VE */
                PAR [One] = C3TP /* \C3TP */
                PAR [0x03] = C3CV /* \C3CV */
                PAR [0x04] = C3IC /* \C3IC */
                PAR [0x06] = C3SP /* \C3SP */
                PAR [0x08] = C3W0 /* \C3W0 */
                PAR [0x09] = C3W1 /* \C3W1 */
                PAR [0x0A] = C3W2 /* \C3W2 */
                PAR [0x0B] = C3W3 /* \C3W3 */
                PAR [0x0C] = C3W4 /* \C3W4 */
                PAR [0x0D] = C3W5 /* \C3W5 */
                PAR [0x0E] = C3CS /* \C3CS */
                Return (PAR) /* \_SB_.PCI0.DSC3.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("79234640-9e10-4fea-a5c1-b5aa8b19756f")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x3F                                             // ?
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (C3GP) /* \C3GP */
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (GPPI (C3F0, ((0x20 * C3G0) + C3P0), C3I0, C3A0))
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (GPPI (C3F1, ((0x20 * C3G1) + C3P1), C3I1, C3A1))
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (GPPI (C3F2, ((0x20 * C3G2) + C3P2), C3I2, C3A2))
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (GPPI (C3F3, ((0x20 * C3G3) + C3P3), C3I3, C3A3))
                    }
                }

                If ((PCHS == PCHL))
                {
                    If ((Arg0 == ToUUID ("82c0d13a-78c5-4244-9bb1-eb8b539a8d11")))
                    {
                        If ((Arg2 == Zero))
                        {
                            If ((Arg1 == Zero))
                            {
                                Return (Buffer (One)
                                {
                                     0x03                                             // .
                                })
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }

                        If ((Arg2 == One))
                        {
                            CLKC (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                One])))
                            CLKF (ToInteger (DerefOf (Arg3 [Zero])), ToInteger (DerefOf (Arg3 [
                                0x02])))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (CLP0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL00)
                {
                    If ((C0IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C0IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, IICB (C0IA, C0IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL00)
                {
                    If ((C0TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C0VE /* \C0VE */
                PAR [One] = C0TP /* \C0TP */
                PAR [0x03] = C0CV /* \C0CV */
                PAR [0x04] = C0IC /* \C0IC */
                PAR [0x06] = C0SP /* \C0SP */
                PAR [0x08] = C0W0 /* \C0W0 */
                PAR [0x09] = C0W1 /* \C0W1 */
                PAR [0x0A] = C0W2 /* \C0W2 */
                PAR [0x0B] = C0W3 /* \C0W3 */
                PAR [0x0C] = C0W4 /* \C0W4 */
                PAR [0x0D] = C0W5 /* \C0W5 */
                Return (PAR) /* \_SB_.PCI0.CLP0.CLDB.PAR_ */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ).......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C0PL /* \C0PL */
                Return (PLDB) /* \_SB_.PCI0.CLP0._PLD.PLDB */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C0IA, Zero, C0IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C0IA, Zero, C0IB)
                        Return (DSMB) /* \_SB_.PCI0.CLP0._DSM.DSMB */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (CLP1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL01)
                {
                    If ((C1IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C1IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, IICB (C1IA, C1IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL01)
                {
                    If ((C1TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C1VE /* \C1VE */
                PAR [One] = C1TP /* \C1TP */
                PAR [0x03] = C1CV /* \C1CV */
                PAR [0x04] = C1IC /* \C1IC */
                PAR [0x06] = C1SP /* \C1SP */
                PAR [0x08] = C1W0 /* \C1W0 */
                PAR [0x09] = C1W1 /* \C1W1 */
                PAR [0x0A] = C1W2 /* \C1W2 */
                PAR [0x0B] = C1W3 /* \C1W3 */
                PAR [0x0C] = C1W4 /* \C1W4 */
                PAR [0x0D] = C1W5 /* \C1W5 */
                Return (PAR) /* \_SB_.PCI0.CLP1.CLDB.PAR_ */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ).......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C1PL /* \C1PL */
                Return (PLDB) /* \_SB_.PCI0.CLP1._PLD.PLDB */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C1IA, Zero, C1IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C1IA, Zero, C1IB)
                        Return (DSMB) /* \_SB_.PCI0.CLP1._DSM.DSMB */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (CLP2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL02)
                {
                    If ((C2IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C2IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, IICB (C2IA, C2IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL02)
                {
                    If ((C2TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x02, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C2VE /* \C2VE */
                PAR [One] = C2TP /* \C2TP */
                PAR [0x03] = C2CV /* \C2CV */
                PAR [0x04] = C2IC /* \C2IC */
                PAR [0x06] = C2SP /* \C2SP */
                PAR [0x08] = C2W0 /* \C2W0 */
                PAR [0x09] = C2W1 /* \C2W1 */
                PAR [0x0A] = C2W2 /* \C2W2 */
                PAR [0x0B] = C2W3 /* \C2W3 */
                PAR [0x0C] = C2W4 /* \C2W4 */
                PAR [0x0D] = C2W5 /* \C2W5 */
                Return (PAR) /* \_SB_.PCI0.CLP2.CLDB.PAR_ */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ).......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C2PL /* \C2PL */
                Return (PLDB) /* \_SB_.PCI0.CLP2._PLD.PLDB */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C2IA, Zero, C2IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C2IA, Zero, C2IB)
                        Return (DSMB) /* \_SB_.PCI0.CLP2._DSM.DSMB */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (CLP3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (CL03)
                {
                    If ((C3IB == 0x02))
                    {
                        Return (Package (0x01)
                        {
                            I2C2
                        })
                    }

                    If ((C3IB == 0x03))
                    {
                        Return (Package (0x01)
                        {
                            I2C3
                        })
                    }
                }

                Return (Package (0x01)
                {
                    PCI0
                })
            }

            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                ConcatenateResTemplate (Local0, IICB (C3IA, C3IB), Local2)
                Local0 = Local2
                Return (Local0)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (CL03)
                {
                    If ((C3TP > One))
                    {
                        Return (0x0F)
                    }
                }

                Return (Zero)
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x00, 0x03, 0x00, 0x00, 0x0A, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                PAR [Zero] = C3VE /* \C3VE */
                PAR [One] = C3TP /* \C3TP */
                PAR [0x03] = C3CV /* \C3CV */
                PAR [0x04] = C3IC /* \C3IC */
                PAR [0x06] = C3SP /* \C3SP */
                PAR [0x08] = C3W0 /* \C3W0 */
                PAR [0x09] = C3W1 /* \C3W1 */
                PAR [0x0A] = C3W2 /* \C3W2 */
                PAR [0x0B] = C3W3 /* \C3W3 */
                PAR [0x0C] = C3W4 /* \C3W4 */
                PAR [0x0D] = C3W5 /* \C3W5 */
                Return (PAR) /* \_SB_.PCI0.CLP3.CLDB.PAR_ */
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x29, 0x0D, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // ).......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                BPOS = C3PL /* \C3PL */
                Return (PLDB) /* \_SB_.PCI0.CLP3._PLD.PLDB */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x07                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (DSMI (0x0B, C3IA, Zero, C3IB))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        I2CC = One
                        DEV0 = DSMI (0x0B, C3IA, Zero, C3IB)
                        Return (DSMB) /* \_SB_.PCI0.CLP3._DSM.DSMB */
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (LNK0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L0EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L0EN)
                {
                    Return (CDEP (L0CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (Zero))
            }

            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                Return (HCID (Zero))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L0M0 /* \L0M0 */
                BUF [One] = L0M1 /* \L0M1 */
                BUF [0x02] = L0M2 /* \L0M2 */
                BUF [0x03] = L0M3 /* \L0M3 */
                BUF [0x04] = L0M4 /* \L0M4 */
                BUF [0x05] = L0M5 /* \L0M5 */
                BUF [0x06] = L0M6 /* \L0M6 */
                BUF [0x07] = L0M7 /* \L0M7 */
                BUF [0x08] = L0M8 /* \L0M8 */
                BUF [0x09] = L0M9 /* \L0M9 */
                BUF [0x0A] = L0MA /* \L0MA */
                BUF [0x0B] = L0MB /* \L0MB */
                BUF [0x0C] = L0MC /* \L0MC */
                BUF [0x0D] = L0MD /* \L0MD */
                BUF [0x0E] = L0ME /* \L0ME */
                BUF [0x0F] = L0MF /* \L0MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L0PL /* \L0PL */
                RPOS = L0DG /* \L0DG */
                Return (PLDB) /* \_SB_.PCI0.LNK0._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((L0DI > Zero))
                {
                    Local1 = IICB (L0A0, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > One))
                {
                    Local1 = IICB (L0A1, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x02))
                {
                    Local1 = IICB (L0A2, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x03))
                {
                    Local1 = IICB (L0A3, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x04))
                {
                    Local1 = IICB (L0A4, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x05))
                {
                    Local1 = IICB (L0A5, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x06))
                {
                    Local1 = IICB (L0A6, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x07))
                {
                    Local1 = IICB (L0A7, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x08))
                {
                    Local1 = IICB (L0A8, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x09))
                {
                    Local1 = IICB (L0A9, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x0A))
                {
                    Local1 = IICB (L0AA, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L0DI > 0x0B))
                {
                    Local1 = IICB (L0AB, L0BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,  // ..iV9...
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,  // .N.} ...
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@......
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                PAR [Zero] = L0DV /* \L0DV */
                PAR [One] = L0CV /* \L0CV */
                PAR [0x18] = CDIV /* \CDIV */
                PAR [0x1C] = L0LU /* \L0LU */
                PAR [0x1D] = L0NL /* \L0NL */
                PAR [0x4E] = L0EE /* \L0EE */
                PAR [0x4F] = L0VC /* \L0VC */
                PAR [0x52] = L0FS /* \L0FS */
                PAR [0x53] = L0LE /* \L0LE */
                PAR [0x54] = CDEG (L0DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L0CK /* \L0CK */
                PAR [0x5A] = L0CL /* \L0CL */
                PAR [0x5F] = L0PP /* \L0PP */
                PAR [0x60] = L0VR /* \L0VR */
                Return (PAR) /* \_SB_.PCI0.LNK0.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L0M0 /* \L0M0 */
                        BUF [One] = L0M1 /* \L0M1 */
                        BUF [0x02] = L0M2 /* \L0M2 */
                        BUF [0x03] = L0M3 /* \L0M3 */
                        BUF [0x04] = L0M4 /* \L0M4 */
                        BUF [0x05] = L0M5 /* \L0M5 */
                        BUF [0x06] = L0M6 /* \L0M6 */
                        BUF [0x07] = L0M7 /* \L0M7 */
                        BUF [0x08] = L0M8 /* \L0M8 */
                        BUF [0x09] = L0M9 /* \L0M9 */
                        BUF [0x0A] = L0MA /* \L0MA */
                        BUF [0x0B] = L0MB /* \L0MB */
                        BUF [0x0C] = L0MC /* \L0MC */
                        BUF [0x0D] = L0MD /* \L0MD */
                        BUF [0x0E] = L0ME /* \L0ME */
                        BUF [0x0F] = L0MF /* \L0MF */
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L0DI /* \L0DI */
                        DEV0 = DSMI (L0D0, L0A0, Zero, L0BS)
                        DEV1 = DSMI (L0D1, L0A1, Zero, L0BS)
                        DEV2 = DSMI (L0D2, L0A2, Zero, L0BS)
                        DEV3 = DSMI (L0D3, L0A3, Zero, L0BS)
                        DEV4 = DSMI (L0D4, L0A4, Zero, L0BS)
                        DEV5 = DSMI (L0D5, L0A5, Zero, L0BS)
                        DEV6 = DSMI (L0D6, L0A6, Zero, L0BS)
                        DEV7 = DSMI (L0D7, L0A7, Zero, L0BS)
                        DEV8 = DSMI (L0D8, L0A8, Zero, L0BS)
                        DEV9 = DSMI (L0D9, L0A9, Zero, L0BS)
                        DEVA = DSMI (L0DA, L0AA, Zero, L0BS)
                        DEVB = DSMI (L0DB, L0AB, Zero, L0BS)
                        Return (DSMB) /* \_SB_.PCI0.LNK0._DSM.DSMB */
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L0DI) /* \L0DI */
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L0DI > Zero))
                        {
                            Return (DSMI (L0D0, L0A0, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L0DI > One))
                        {
                            Return (DSMI (L0D1, L0A1, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L0DI > 0x02))
                        {
                            Return (DSMI (L0D2, L0A2, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L0DI > 0x03))
                        {
                            Return (DSMI (L0D3, L0A3, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L0DI > 0x04))
                        {
                            Return (DSMI (L0D4, L0A4, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L0DI > 0x05))
                        {
                            Return (DSMI (L0D5, L0A5, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L0DI > 0x06))
                        {
                            Return (DSMI (L0D6, L0A6, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L0DI > 0x07))
                        {
                            Return (DSMI (L0D7, L0A7, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L0DI > 0x08))
                        {
                            Return (DSMI (L0D8, L0A8, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L0DI > 0x09))
                        {
                            Return (DSMI (L0D9, L0A9, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L0DI > 0x0A))
                        {
                            Return (DSMI (L0DA, L0AA, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L0DI > 0x0B))
                        {
                            Return (DSMI (L0DB, L0AB, Zero, L0BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (LNK1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L1EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L1EN)
                {
                    Return (CDEP (L1CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (One))
            }

            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                Return (HCID (One))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L1M0 /* \L1M0 */
                BUF [One] = L1M1 /* \L1M1 */
                BUF [0x02] = L1M2 /* \L1M2 */
                BUF [0x03] = L1M3 /* \L1M3 */
                BUF [0x04] = L1M4 /* \L1M4 */
                BUF [0x05] = L1M5 /* \L1M5 */
                BUF [0x06] = L1M6 /* \L1M6 */
                BUF [0x07] = L1M7 /* \L1M7 */
                BUF [0x08] = L1M8 /* \L1M8 */
                BUF [0x09] = L1M9 /* \L1M9 */
                BUF [0x0A] = L1MA /* \L1MA */
                BUF [0x0B] = L1MB /* \L1MB */
                BUF [0x0C] = L1MC /* \L1MC */
                BUF [0x0D] = L1MD /* \L1MD */
                BUF [0x0E] = L1ME /* \L1ME */
                BUF [0x0F] = L1MF /* \L1MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L1PL /* \L1PL */
                RPOS = L1DG /* \L1DG */
                Return (PLDB) /* \_SB_.PCI0.LNK1._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((L1DI > Zero))
                {
                    Local1 = IICB (L1A0, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > One))
                {
                    Local1 = IICB (L1A1, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x02))
                {
                    Local1 = IICB (L1A2, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x03))
                {
                    Local1 = IICB (L1A3, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x04))
                {
                    Local1 = IICB (L1A4, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x05))
                {
                    Local1 = IICB (L1A5, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x06))
                {
                    Local1 = IICB (L1A6, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x07))
                {
                    Local1 = IICB (L1A7, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x08))
                {
                    Local1 = IICB (L1A8, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x09))
                {
                    Local1 = IICB (L1A9, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x0A))
                {
                    Local1 = IICB (L1AA, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L1DI > 0x0B))
                {
                    Local1 = IICB (L1AB, L1BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,  // ..iV9...
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,  // .N.} ...
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@......
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                PAR [Zero] = L1DV /* \L1DV */
                PAR [One] = L1CV /* \L1CV */
                PAR [0x18] = CDIV /* \CDIV */
                PAR [0x1C] = L1LU /* \L1LU */
                PAR [0x1D] = L1NL /* \L1NL */
                PAR [0x4E] = L1EE /* \L1EE */
                PAR [0x4F] = L1VC /* \L1VC */
                PAR [0x52] = L1FS /* \L1FS */
                PAR [0x53] = L1LE /* \L1LE */
                PAR [0x54] = CDEG (L1DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L1CK /* \L1CK */
                PAR [0x5A] = L1CL /* \L1CL */
                PAR [0x5F] = L1PP /* \L1PP */
                PAR [0x60] = L1VR /* \L1VR */
                Return (PAR) /* \_SB_.PCI0.LNK1.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L1M0 /* \L1M0 */
                        BUF [One] = L1M1 /* \L1M1 */
                        BUF [0x02] = L1M2 /* \L1M2 */
                        BUF [0x03] = L1M3 /* \L1M3 */
                        BUF [0x04] = L1M4 /* \L1M4 */
                        BUF [0x05] = L1M5 /* \L1M5 */
                        BUF [0x06] = L1M6 /* \L1M6 */
                        BUF [0x07] = L1M7 /* \L1M7 */
                        BUF [0x08] = L1M8 /* \L1M8 */
                        BUF [0x09] = L1M9 /* \L1M9 */
                        BUF [0x0A] = L1MA /* \L1MA */
                        BUF [0x0B] = L1MB /* \L1MB */
                        BUF [0x0C] = L1MC /* \L1MC */
                        BUF [0x0D] = L1MD /* \L1MD */
                        BUF [0x0E] = L1ME /* \L1ME */
                        BUF [0x0F] = L1MF /* \L1MF */
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L1DI /* \L1DI */
                        DEV0 = DSMI (L1D0, L1A0, Zero, L1BS)
                        DEV1 = DSMI (L1D1, L1A1, Zero, L1BS)
                        DEV2 = DSMI (L1D2, L1A2, Zero, L1BS)
                        DEV3 = DSMI (L1D3, L1A3, Zero, L1BS)
                        DEV4 = DSMI (L1D4, L1A4, Zero, L1BS)
                        DEV5 = DSMI (L1D5, L1A5, Zero, L1BS)
                        DEV6 = DSMI (L1D6, L1A6, Zero, L1BS)
                        DEV7 = DSMI (L1D7, L1A7, Zero, L1BS)
                        DEV8 = DSMI (L1D8, L1A8, Zero, L1BS)
                        DEV9 = DSMI (L1D9, L1A9, Zero, L1BS)
                        DEVA = DSMI (L1DA, L1AA, Zero, L1BS)
                        DEVB = DSMI (L1DB, L1AB, Zero, L1BS)
                        Return (DSMB) /* \_SB_.PCI0.LNK1._DSM.DSMB */
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L1DI) /* \L1DI */
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L1DI > Zero))
                        {
                            Return (DSMI (L1D0, L1A0, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L1DI > One))
                        {
                            Return (DSMI (L1D1, L1A1, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L1DI > 0x02))
                        {
                            Return (DSMI (L1D2, L1A2, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L1DI > 0x03))
                        {
                            Return (DSMI (L1D3, L1A3, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L1DI > 0x04))
                        {
                            Return (DSMI (L1D4, L1A4, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L1DI > 0x05))
                        {
                            Return (DSMI (L1D5, L1A5, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L1DI > 0x06))
                        {
                            Return (DSMI (L1D6, L1A6, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L1DI > 0x07))
                        {
                            Return (DSMI (L1D7, L1A7, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L1DI > 0x08))
                        {
                            Return (DSMI (L1D8, L1A8, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L1DI > 0x09))
                        {
                            Return (DSMI (L1D9, L1A9, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L1DI > 0x0A))
                        {
                            Return (DSMI (L1DA, L1AA, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L1DI > 0x0B))
                        {
                            Return (DSMI (L1DB, L1AB, Zero, L1BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (LNK2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L2EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L2EN)
                {
                    Return (CDEP (L2CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x02))
            }

            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                Return (HCID (0x02))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L2M0 /* \L2M0 */
                BUF [One] = L2M1 /* \L2M1 */
                BUF [0x02] = L2M2 /* \L2M2 */
                BUF [0x03] = L2M3 /* \L2M3 */
                BUF [0x04] = L2M4 /* \L2M4 */
                BUF [0x05] = L2M5 /* \L2M5 */
                BUF [0x06] = L2M6 /* \L2M6 */
                BUF [0x07] = L2M7 /* \L2M7 */
                BUF [0x08] = L2M8 /* \L2M8 */
                BUF [0x09] = L2M9 /* \L2M9 */
                BUF [0x0A] = L2MA /* \L2MA */
                BUF [0x0B] = L2MB /* \L2MB */
                BUF [0x0C] = L2MC /* \L2MC */
                BUF [0x0D] = L2MD /* \L2MD */
                BUF [0x0E] = L2ME /* \L2ME */
                BUF [0x0F] = L2MF /* \L2MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L2PL /* \L2PL */
                RPOS = L2DG /* \L2DG */
                Return (PLDB) /* \_SB_.PCI0.LNK2._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((L2DI > Zero))
                {
                    Local1 = IICB (L2A0, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > One))
                {
                    Local1 = IICB (L2A1, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x02))
                {
                    Local1 = IICB (L2A2, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x03))
                {
                    Local1 = IICB (L2A3, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x04))
                {
                    Local1 = IICB (L2A4, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x05))
                {
                    Local1 = IICB (L2A5, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x06))
                {
                    Local1 = IICB (L2A6, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x07))
                {
                    Local1 = IICB (L2A7, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x08))
                {
                    Local1 = IICB (L2A8, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x09))
                {
                    Local1 = IICB (L2A9, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x0A))
                {
                    Local1 = IICB (L2AA, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L2DI > 0x0B))
                {
                    Local1 = IICB (L2AB, L2BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,  // ..iV9...
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,  // .N.} ...
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@......
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                PAR [Zero] = L2DV /* \L2DV */
                PAR [One] = L2CV /* \L2CV */
                PAR [0x18] = CDIV /* \CDIV */
                PAR [0x1C] = L2LU /* \L2LU */
                PAR [0x1D] = L2NL /* \L2NL */
                PAR [0x4E] = L2EE /* \L2EE */
                PAR [0x4F] = L2VC /* \L2VC */
                PAR [0x52] = L2FS /* \L2FS */
                PAR [0x53] = L2LE /* \L2LE */
                PAR [0x54] = CDEG (L2DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L2CK /* \L2CK */
                PAR [0x5A] = L2CL /* \L2CL */
                PAR [0x5F] = L2PP /* \L2PP */
                PAR [0x60] = L2VR /* \L2VR */
                Return (PAR) /* \_SB_.PCI0.LNK2.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L2M0 /* \L2M0 */
                        BUF [One] = L2M1 /* \L2M1 */
                        BUF [0x02] = L2M2 /* \L2M2 */
                        BUF [0x03] = L2M3 /* \L2M3 */
                        BUF [0x04] = L2M4 /* \L2M4 */
                        BUF [0x05] = L2M5 /* \L2M5 */
                        BUF [0x06] = L2M6 /* \L2M6 */
                        BUF [0x07] = L2M7 /* \L2M7 */
                        BUF [0x08] = L2M8 /* \L2M8 */
                        BUF [0x09] = L2M9 /* \L2M9 */
                        BUF [0x0A] = L2MA /* \L2MA */
                        BUF [0x0B] = L2MB /* \L2MB */
                        BUF [0x0C] = L2MC /* \L2MC */
                        BUF [0x0D] = L2MD /* \L2MD */
                        BUF [0x0E] = L2ME /* \L2ME */
                        BUF [0x0F] = L2MF /* \L2MF */
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L2DI /* \L2DI */
                        DEV0 = DSMI (L2D0, L2A0, Zero, L2BS)
                        DEV1 = DSMI (L2D1, L2A1, Zero, L2BS)
                        DEV2 = DSMI (L2D2, L2A2, Zero, L2BS)
                        DEV3 = DSMI (L2D3, L2A3, Zero, L2BS)
                        DEV4 = DSMI (L2D4, L2A4, Zero, L2BS)
                        DEV5 = DSMI (L2D5, L2A5, Zero, L2BS)
                        DEV6 = DSMI (L2D6, L2A6, Zero, L2BS)
                        DEV7 = DSMI (L2D7, L2A7, Zero, L2BS)
                        DEV8 = DSMI (L2D8, L2A8, Zero, L2BS)
                        DEV9 = DSMI (L2D9, L2A9, Zero, L2BS)
                        DEVA = DSMI (L2DA, L2AA, Zero, L2BS)
                        DEVB = DSMI (L2DB, L2AB, Zero, L2BS)
                        Return (DSMB) /* \_SB_.PCI0.LNK2._DSM.DSMB */
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L2DI) /* \L2DI */
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L2DI > Zero))
                        {
                            Return (DSMI (L2D0, L2A0, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L2DI > One))
                        {
                            Return (DSMI (L2D1, L2A1, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L2DI > 0x02))
                        {
                            Return (DSMI (L2D2, L2A2, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L2DI > 0x03))
                        {
                            Return (DSMI (L2D3, L2A3, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L2DI > 0x04))
                        {
                            Return (DSMI (L2D4, L2A4, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L2DI > 0x05))
                        {
                            Return (DSMI (L2D5, L2A5, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L2DI > 0x06))
                        {
                            Return (DSMI (L2D6, L2A6, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L2DI > 0x07))
                        {
                            Return (DSMI (L2D7, L2A7, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L2DI > 0x08))
                        {
                            Return (DSMI (L2D8, L2A8, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L2DI > 0x09))
                        {
                            Return (DSMI (L2D9, L2A9, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L2DI > 0x0A))
                        {
                            Return (DSMI (L2DA, L2AA, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L2DI > 0x0B))
                        {
                            Return (DSMI (L2DB, L2AB, Zero, L2BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Device (LNK3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (L3EN)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                If (L3EN)
                {
                    Return (CDEP (L3CL))
                }
                Else
                {
                    Return (Package (0x01)
                    {
                        PCI0
                    })
                }
            }

            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Return (HCID (0x03))
            }

            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                Return (HCID (0x03))
            }

            Method (_DDN, 0, NotSerialized)  // _DDN: DOS Device Name
            {
                Name (BUF, Buffer (0x10){})
                BUF [Zero] = L3M0 /* \L3M0 */
                BUF [One] = L3M1 /* \L3M1 */
                BUF [0x02] = L3M2 /* \L3M2 */
                BUF [0x03] = L3M3 /* \L3M3 */
                BUF [0x04] = L3M4 /* \L3M4 */
                BUF [0x05] = L3M5 /* \L3M5 */
                BUF [0x06] = L3M6 /* \L3M6 */
                BUF [0x07] = L3M7 /* \L3M7 */
                BUF [0x08] = L3M8 /* \L3M8 */
                BUF [0x09] = L3M9 /* \L3M9 */
                BUF [0x0A] = L3MA /* \L3MA */
                BUF [0x0B] = L3MB /* \L3MB */
                BUF [0x0C] = L3MC /* \L3MC */
                BUF [0x0D] = L3MD /* \L3MD */
                BUF [0x0E] = L3ME /* \L3ME */
                BUF [0x0F] = L3MF /* \L3MF */
                Return (ToString (BUF, Ones))
            }

            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
            {
                Name (PLDB, Package (0x01)
                {
                    Buffer (0x14)
                    {
                        /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x69, 0x0E, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,  // i.......
                        /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                    }
                })
                CreateByteField (DerefOf (PLDB [Zero]), 0x08, BPOS)
                CreateField (DerefOf (PLDB [Zero]), 0x73, 0x04, RPOS)
                BPOS = L3PL /* \L3PL */
                RPOS = L3DG /* \L3DG */
                Return (PLDB) /* \_SB_.PCI0.LNK3._PLD.PLDB */
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = Buffer (0x02)
                    {
                         0x79, 0x00                                       // y.
                    }
                If ((L3DI > Zero))
                {
                    Local1 = IICB (L3A0, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > One))
                {
                    Local1 = IICB (L3A1, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x02))
                {
                    Local1 = IICB (L3A2, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x03))
                {
                    Local1 = IICB (L3A3, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x04))
                {
                    Local1 = IICB (L3A4, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x05))
                {
                    Local1 = IICB (L3A5, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x06))
                {
                    Local1 = IICB (L3A6, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x07))
                {
                    Local1 = IICB (L3A7, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x08))
                {
                    Local1 = IICB (L3A8, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x09))
                {
                    Local1 = IICB (L3A9, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x0A))
                {
                    Local1 = IICB (L3AA, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                If ((L3DI > 0x0B))
                {
                    Local1 = IICB (L3AB, L3BS)
                    ConcatenateResTemplate (Local0, Local1, Local2)
                    Local0 = Local2
                }

                Return (Local0)
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x00, 0x69, 0x56, 0x39, 0x8A, 0xF7, 0x11,  // ..iV9...
                    /* 0008 */  0xA9, 0x4E, 0x9C, 0x7D, 0x20, 0xEE, 0x0A, 0xB5,  // .N.} ...
                    /* 0010 */  0xCA, 0x40, 0xA3, 0x00, 0x00, 0x00, 0x00, 0x00,  // .@......
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x0A, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                PAR [Zero] = L3DV /* \L3DV */
                PAR [One] = L3CV /* \L3CV */
                PAR [0x18] = CDIV /* \CDIV */
                PAR [0x1C] = L3LU /* \L3LU */
                PAR [0x1D] = L3NL /* \L3NL */
                PAR [0x4E] = L3EE /* \L3EE */
                PAR [0x4F] = L3VC /* \L3VC */
                PAR [0x52] = L3FS /* \L3FS */
                PAR [0x53] = L3LE /* \L3LE */
                PAR [0x54] = CDEG (L3DG)
                CreateDWordField (PAR, 0x56, DAT)
                DAT = L3CK /* \L3CK */
                PAR [0x5A] = L3CL /* \L3CL */
                PAR [0x5F] = L3PP /* \L3PP */
                PAR [0x60] = L3VR /* \L3VR */
                Return (PAR) /* \_SB_.PCI0.LNK3.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (BUF, Buffer (0x10){})
                        BUF [Zero] = L3M0 /* \L3M0 */
                        BUF [One] = L3M1 /* \L3M1 */
                        BUF [0x02] = L3M2 /* \L3M2 */
                        BUF [0x03] = L3M3 /* \L3M3 */
                        BUF [0x04] = L3M4 /* \L3M4 */
                        BUF [0x05] = L3M5 /* \L3M5 */
                        BUF [0x06] = L3M6 /* \L3M6 */
                        BUF [0x07] = L3M7 /* \L3M7 */
                        BUF [0x08] = L3M8 /* \L3M8 */
                        BUF [0x09] = L3M9 /* \L3M9 */
                        BUF [0x0A] = L3MA /* \L3MA */
                        BUF [0x0B] = L3MB /* \L3MB */
                        BUF [0x0C] = L3MC /* \L3MC */
                        BUF [0x0D] = L3MD /* \L3MD */
                        BUF [0x0E] = L3ME /* \L3ME */
                        BUF [0x0F] = L3MF /* \L3MF */
                        Return (ToString (BUF, Ones))
                    }
                }

                If ((Arg0 == ToUUID ("5815c5c8-c47d-477b-9a8d-76173176414b")))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x01                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Name (DSMB, Buffer (0x34){})
                        CreateDWordField (DSMB, Zero, I2CC)
                        CreateDWordField (DSMB, 0x04, DEV0)
                        CreateDWordField (DSMB, 0x08, DEV1)
                        CreateDWordField (DSMB, 0x0C, DEV2)
                        CreateDWordField (DSMB, 0x10, DEV3)
                        CreateDWordField (DSMB, 0x14, DEV4)
                        CreateDWordField (DSMB, 0x18, DEV5)
                        CreateDWordField (DSMB, 0x1C, DEV6)
                        CreateDWordField (DSMB, 0x20, DEV7)
                        CreateDWordField (DSMB, 0x24, DEV8)
                        CreateDWordField (DSMB, 0x28, DEV9)
                        CreateDWordField (DSMB, 0x2C, DEVA)
                        CreateDWordField (DSMB, 0x30, DEVB)
                        I2CC = L3DI /* \L3DI */
                        DEV0 = DSMI (L3D0, L3A0, Zero, L3BS)
                        DEV1 = DSMI (L3D1, L3A1, Zero, L3BS)
                        DEV2 = DSMI (L3D2, L3A2, Zero, L3BS)
                        DEV3 = DSMI (L3D3, L3A3, Zero, L3BS)
                        DEV4 = DSMI (L3D4, L3A4, Zero, L3BS)
                        DEV5 = DSMI (L3D5, L3A5, Zero, L3BS)
                        DEV6 = DSMI (L3D6, L3A6, Zero, L3BS)
                        DEV7 = DSMI (L3D7, L3A7, Zero, L3BS)
                        DEV8 = DSMI (L3D8, L3A8, Zero, L3BS)
                        DEV9 = DSMI (L3D9, L3A9, Zero, L3BS)
                        DEVA = DSMI (L3DA, L3AA, Zero, L3BS)
                        DEVB = DSMI (L3DB, L3AB, Zero, L3BS)
                        Return (DSMB) /* \_SB_.PCI0.LNK3._DSM.DSMB */
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x1F                                       // ..
                        })
                    }

                    If ((Arg2 == One))
                    {
                        Return (L3DI) /* \L3DI */
                    }

                    If ((Arg2 == 0x02))
                    {
                        If ((L3DI > Zero))
                        {
                            Return (DSMI (L3D0, L3A0, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x03))
                    {
                        If ((L3DI > One))
                        {
                            Return (DSMI (L3D1, L3A1, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x04))
                    {
                        If ((L3DI > 0x02))
                        {
                            Return (DSMI (L3D2, L3A2, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x05))
                    {
                        If ((L3DI > 0x03))
                        {
                            Return (DSMI (L3D3, L3A3, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x06))
                    {
                        If ((L3DI > 0x04))
                        {
                            Return (DSMI (L3D4, L3A4, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x07))
                    {
                        If ((L3DI > 0x05))
                        {
                            Return (DSMI (L3D5, L3A5, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L3DI > 0x06))
                        {
                            Return (DSMI (L3D6, L3A6, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x08))
                    {
                        If ((L3DI > 0x07))
                        {
                            Return (DSMI (L3D7, L3A7, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x09))
                    {
                        If ((L3DI > 0x08))
                        {
                            Return (DSMI (L3D8, L3A8, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0A))
                    {
                        If ((L3DI > 0x09))
                        {
                            Return (DSMI (L3D9, L3A9, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0B))
                    {
                        If ((L3DI > 0x0A))
                        {
                            Return (DSMI (L3DA, L3AA, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == 0x0C))
                    {
                        If ((L3DI > 0x0B))
                        {
                            Return (DSMI (L3DB, L3AB, Zero, L3BS))
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0.I2C2)
    {
        Device (CAM0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3471")  // _HID: Hardware ID
            Name (_CID, "INT3471")  // _CID: Compatible ID
            Name (_DDN, "IMX135-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PMIC
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "BACK",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x1,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x000E, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0050, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0051, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0052, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    I2cSerialBusV2 (0x0053, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.PCI0.I2C2.CAM0._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SCSS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .P......
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x03,  // ........
                    /* 0050 */  0x09, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0x36,  // .......6
                    /* 0058 */  0x6E, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // n.......
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                Return (PAR) /* \_SB_.PCI0.I2C2.CAM0.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return ("13P2BAD33")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == One))
                    {
                        Return (0x06)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (0x02001000)
                    }

                    If ((Arg2 == 0x03))
                    {
                        Return (0x02000E01)
                    }

                    If ((Arg2 == 0x04))
                    {
                        Return (0x02005002)
                    }

                    If ((Arg2 == 0x05))
                    {
                        Return (0x02005103)
                    }

                    If ((Arg2 == 0x06))
                    {
                        Return (0x02005204)
                    }

                    If ((Arg2 == 0x07))
                    {
                        Return (0x02005305)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0.I2C4)
    {
        Device (CAM1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3474")  // _HID: Hardware ID
            Name (_CID, "INT3474")  // _CID: Compatible ID
            Name (_DDN, "OV2740-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                ^^I2C2.PMIC
            })
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "FRONT",
                    PLD_VerticalPosition   = "CENTER",
                    PLD_HorizontalPosition = "RIGHT",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x1,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0036, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.PCI0.I2C4.CAM1._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SCSS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (SSDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x6C)
                {
                    /* 0000 */  0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // .P......
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x09, 0x00, 0x02, 0x01, 0x00, 0x01, 0x00, 0xF8,  // ........
                    /* 0058 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00                           // ....
                })
                Return (PAR) /* \_SB_.PCI0.I2C4.CAM1.SSDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("822ace8f-2814-4174-a56b-5f029fe079ee")))
                {
                    Return ("4SF259T2")
                }

                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (0x04003600)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0.I2C2)
    {
        Device (PMIC)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3472")  // _HID: Hardware ID
            Name (_CID, "INT3472")  // _CID: Compatible ID
            Name (_DDN, "PMIC-CRDG2")  // _DDN: DOS Device Name
            Name (_UID, "0")  // _UID: Unique ID
            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
            {
                ToPLD (
                    PLD_Revision           = 0x2,
                    PLD_IgnoreColor        = 0x1,
                    PLD_Red                = 0x0,
                    PLD_Green              = 0x0,
                    PLD_Blue               = 0x0,
                    PLD_Width              = 0x0,
                    PLD_Height             = 0x0,
                    PLD_UserVisible        = 0x1,
                    PLD_Dock               = 0x0,
                    PLD_Lid                = 0x0,
                    PLD_Panel              = "FRONT",
                    PLD_VerticalPosition   = "UPPER",
                    PLD_HorizontalPosition = "CENTER",
                    PLD_Shape              = "VERTICALRECTANGLE",
                    PLD_GroupOrientation   = 0x0,
                    PLD_GroupToken         = 0x0,
                    PLD_GroupPosition      = 0x0,
                    PLD_Bay                = 0x0,
                    PLD_Ejectable          = 0x1,
                    PLD_EjectRequired      = 0x1,
                    PLD_CabinetNumber      = 0x0,
                    PLD_CardCageNumber     = 0x0,
                    PLD_Reference          = 0x0,
                    PLD_Rotation           = 0x0,
                    PLD_Order              = 0x0,
                    PLD_VerticalOffset     = 0xFFFF,
                    PLD_HorizontalOffset   = 0xFFFF)

            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBUF, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x004C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Return (SBUF) /* \_SB_.PCI0.I2C2.PMIC._CRS.SBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((SCSS == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (CLDB, 0, NotSerialized)
            {
                Name (PAR, Buffer (0x20)
                {
                    /* 0000 */  0x00, 0x02, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00,  // ...P....
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                })
                Return (PAR) /* \_SB_.PCI0.I2C2.PMIC.CLDB.PAR_ */
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("26257549-9271-4ca4-bb43-c4899d5a4881")))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (0x07)
                    }

                    If ((Arg2 == One))
                    {
                        Return (One)
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (0x02004C0B)
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Name (HIDG, ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */)
        Name (TP7G, ToUUID ("ef87eb82-f951-46da-84ec-14871ac6f84b"))
        Method (HIDD, 5, Serialized)
        {
            If ((Arg0 == HIDG))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (Arg4)
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TP7D, 6, Serialized)
        {
            If ((Arg0 == TP7G))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == One))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                }

                If ((Arg2 == One))
                {
                    Return (ConcatenateResTemplate (Arg4, Arg5))
                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (I2CM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (IIC0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, _Y30, Exclusive,
                            )
                    })
                    CreateWordField (IIC0, \_SB.PCI0.I2CM._Y30._ADR, DAD0)  // _ADR: Address
                    CreateDWordField (IIC0, \_SB.PCI0.I2CM._Y30._SPE, DSP0)  // _SPE: Speed
                    DAD0 = Arg1
                    DSP0 = Arg2
                    Return (IIC0) /* \_SB_.PCI0.I2CM.IIC0 */
                }
                Case (One)
                {
                    Name (IIC1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, _Y31, Exclusive,
                            )
                    })
                    CreateWordField (IIC1, \_SB.PCI0.I2CM._Y31._ADR, DAD1)  // _ADR: Address
                    CreateDWordField (IIC1, \_SB.PCI0.I2CM._Y31._SPE, DSP1)  // _SPE: Speed
                    DAD1 = Arg1
                    DSP1 = Arg2
                    Return (IIC1) /* \_SB_.PCI0.I2CM.IIC1 */
                }
                Case (0x02)
                {
                    Name (IIC2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, _Y32, Exclusive,
                            )
                    })
                    CreateWordField (IIC2, \_SB.PCI0.I2CM._Y32._ADR, DAD2)  // _ADR: Address
                    CreateDWordField (IIC2, \_SB.PCI0.I2CM._Y32._SPE, DSP2)  // _SPE: Speed
                    DAD2 = Arg1
                    DSP2 = Arg2
                    Return (IIC2) /* \_SB_.PCI0.I2CM.IIC2 */
                }
                Case (0x03)
                {
                    Name (IIC3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, _Y33, Exclusive,
                            )
                    })
                    CreateWordField (IIC3, \_SB.PCI0.I2CM._Y33._ADR, DAD3)  // _ADR: Address
                    CreateDWordField (IIC3, \_SB.PCI0.I2CM._Y33._SPE, DSP3)  // _SPE: Speed
                    DAD3 = Arg1
                    DSP3 = Arg2
                    Return (IIC3) /* \_SB_.PCI0.I2CM.IIC3 */
                }
                Case (0x04)
                {
                    Name (IIC4, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, _Y34, Exclusive,
                            )
                    })
                    CreateWordField (IIC4, \_SB.PCI0.I2CM._Y34._ADR, DAD4)  // _ADR: Address
                    CreateDWordField (IIC4, \_SB.PCI0.I2CM._Y34._SPE, DSP4)  // _SPE: Speed
                    DAD4 = Arg1
                    DSP4 = Arg2
                    Return (IIC4) /* \_SB_.PCI0.I2CM.IIC4 */
                }
                Case (0x05)
                {
                    Name (IIC5, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C5",
                            0x00, ResourceConsumer, _Y35, Exclusive,
                            )
                    })
                    CreateWordField (IIC5, \_SB.PCI0.I2CM._Y35._ADR, DAD5)  // _ADR: Address
                    CreateDWordField (IIC5, \_SB.PCI0.I2CM._Y35._SPE, DSP5)  // _SPE: Speed
                    DAD5 = Arg1
                    DSP5 = Arg2
                    Return (IIC5) /* \_SB_.PCI0.I2CM.IIC5 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (SPIM, 3, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x07)
                {
                    Name (IIC7, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00989680, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.PCI0.SPI1",
                            0x00, ResourceConsumer, _Y36, Exclusive,
                            )
                    })
                    CreateByteField (IIC7, \_SB.PCI0.SPIM._Y36._PHA, DPH7)  // _PHA: Clock Phase
                    CreateDWordField (IIC7, \_SB.PCI0.SPIM._Y36._SPE, DSP7)  // _SPE: Speed
                    DPH7 = Arg1
                    DSP7 = Arg2
                    Return (IIC7) /* \_SB_.PCI0.SPIM.IIC7 */
                }
                Case (0x08)
                {
                    Name (IIC8, ResourceTemplate ()
                    {
                        SpiSerialBusV2 (0x0000, PolarityLow, FourWireMode, 0x08,
                            ControllerInitiated, 0x00989680, ClockPolarityLow,
                            ClockPhaseFirst, "\\_SB.PCI0.SPI2",
                            0x00, ResourceConsumer, _Y37, Exclusive,
                            )
                    })
                    CreateByteField (IIC8, \_SB.PCI0.SPIM._Y37._PHA, DPH8)  // _PHA: Clock Phase
                    CreateDWordField (IIC8, \_SB.PCI0.SPIM._Y37._SPE, DSP8)  // _SPE: Speed
                    DPH8 = Arg1
                    DSP8 = Arg2
                    Return (IIC8) /* \_SB_.PCI0.SPIM.IIC8 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }

        Method (UCMM, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Name (UCM0, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM0) /* \_SB_.PCI0.UCMM.UCM0 */
                }
                Case (One)
                {
                    Name (UCM1, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C1",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM1) /* \_SB_.PCI0.UCMM.UCM1 */
                }
                Case (0x02)
                {
                    Name (UCM2, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C2",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM2) /* \_SB_.PCI0.UCMM.UCM2 */
                }
                Case (0x03)
                {
                    Name (UCM3, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x003F, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0020, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                        I2cSerialBusV2 (0x0027, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C3",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Return (UCM3) /* \_SB_.PCI0.UCMM.UCM3 */
                }
                Default
                {
                    Return (Zero)
                }

            }
        }
    }

    Scope (_SB.PCI0.I2C0)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS0 /* \SDS0 */
            I2CX = Zero
        }

        Device (TPD0)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y38, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y39)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PCI0.I2C0.TPD0._Y38._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PCI0.I2C0.TPD0._Y38._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PCI0.I2C0.TPD0._Y39._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPDI, One)
                }

                INT1 = GNUM (GPDI)
                INT2 = INUM (GPDI)
                If ((TPDM == Zero))
                {
                    SHPO (GPDI, One)
                }

                If ((TPDT == One))
                {
                    _HID = "SYNA2393"
                    HID2 = 0x20
                    Return (Zero)
                }

                If ((TPDT == 0x02))
                {
                    _HID = "06CB2846"
                    HID2 = 0x20
                    Return (Zero)
                }

                If ((TPDT == 0x06))
                {
                    _HID = "ALPS0000"
                    HID2 = 0x20
                    BADR = 0x2C
                    Return (Zero)
                }

                If ((TPDT == 0x05))
                {
                    _HID = "CUST0001"
                    HID2 = TPDH /* \TPDH */
                    BADR = TPDB /* \TPDB */
                    If ((TPDS == Zero))
                    {
                        SPED = 0x000186A0
                    }

                    If ((TPDS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPDS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPDT != Zero) && (I2CN & One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PCI0.I2C0.TPD0.SBFI */
                }

                If ((TPDM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }

        Device (TPL1)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y3A, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, Exclusive, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive, ,, _Y3B)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PCI0.I2C0.TPL1._Y3A._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PCI0.I2C0.TPL1._Y3A._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PCI0.I2C0.TPL1._Y3B._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPLI, One)
                }

                INT1 = GNUM (GPLI)
                INT2 = INUM (GPLI)
                If ((TPLM == Zero))
                {
                    SHPO (GPLI, One)
                }

                If ((TPLT == One))
                {
                    _HID = "ATML3432"
                    HID2 = Zero
                    BADR = 0x4C
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x02))
                {
                    _HID = "ATML2952"
                    HID2 = Zero
                    BADR = 0x4A
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x03))
                {
                    _HID = "ELAN2097"
                    HID2 = One
                    BADR = 0x10
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x04))
                {
                    _HID = "NTRG0001"
                    HID2 = One
                    BADR = 0x07
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x05))
                {
                    _HID = "NTRG0002"
                    HID2 = One
                    BADR = 0x64
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x06))
                {
                    _HID = "WCOM508E"
                    HID2 = One
                    BADR = 0x0A
                    If ((TPLS == Zero))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }

                If ((TPLT == 0x07))
                {
                    _HID = "CUST0000"
                    HID2 = TPLH /* \TPLH */
                    BADR = TPLB /* \TPLB */
                    If ((TPLS == Zero))
                    {
                        SPED = 0x000186A0
                    }

                    If ((TPLS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPLT != Zero) && (I2CN & 0x02)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PCI0.I2C0.TPL1.SBFI */
                }

                If ((TPLM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }

        Device (UCMX)
        {
            Name (_HID, "INT3515")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            If (UTCE)
                            {
                                If ((Arg3 == One))
                                {
                                    PMC4 = (PMC4 & 0xFFFFFFFF7FFFFFFF)
                                }
                                Else
                                {
                                    PMC4 = (PMC4 | 0x80000000)
                                }
                            }
                        }

                    }
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y3C)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y3D)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y3E)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y3F)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.I2C0.UCMX._CRS._Y3C._INT, INT1)  // _INT: Interrupts
                INT1 = INUM (UCG1)
                CreateDWordField (SBFI, \_SB.PCI0.I2C0.UCMX._CRS._Y3D._INT, INT2)  // _INT: Interrupts
                INT2 = INUM (UCG2)
                CreateDWordField (SBFI, \_SB.PCI0.I2C0.UCMX._CRS._Y3E._INT, INT3)  // _INT: Interrupts
                INT3 = INUM (UCG3)
                CreateDWordField (SBFI, \_SB.PCI0.I2C0.UCMX._CRS._Y3F._INT, INT4)  // _INT: Interrupts
                INT4 = INUM (UCG4)
                Return (ConcatenateResTemplate (UCMM (I2CX), SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((UTCE == One) && (I2CN & 0x04)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.I2C1)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS1 /* \SDS1 */
            I2CX = One
            If (CondRefOf (\_SB.PCI0.I2C1.INC1))
            {
                INC1 ()
            }
        }

        Device (TPD0)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y40, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y41)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PCI0.I2C1.TPD0._Y40._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PCI0.I2C1.TPD0._Y40._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PCI0.I2C1.TPD0._Y41._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPDI, One)
                }

                INT1 = GNUM (GPDI)
                INT2 = INUM (GPDI)
                If ((TPDM == Zero))
                {
                    SHPO (GPDI, One)
                }

                If ((TPDT == One))
                {
                    _HID = "SYNA2393"
                    HID2 = 0x20
                    Return (Zero)
                }

                If ((TPDT == 0x02))
                {
                    _HID = "06CB2846"
                    HID2 = 0x20
                    Return (Zero)
                }

                If ((TPDT == 0x06))
                {
                    _HID = "ALPS0000"
                    HID2 = 0x20
                    BADR = 0x2C
                    Return (Zero)
                }

                If ((TPDT == 0x05))
                {
                    _HID = "CUST0001"
                    HID2 = TPDH /* \TPDH */
                    BADR = TPDB /* \TPDB */
                    If ((TPDS == Zero))
                    {
                        SPED = 0x000186A0
                    }

                    If ((TPDS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPDS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPDT != Zero) && (I2CN & One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PCI0.I2C1.TPD0.SBFI */
                }

                If ((TPDM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }

        Device (TPL1)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y42, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, Exclusive, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive, ,, _Y43)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PCI0.I2C1.TPL1._Y42._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PCI0.I2C1.TPL1._Y42._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PCI0.I2C1.TPL1._Y43._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPLI, One)
                }

                INT1 = GNUM (GPLI)
                INT2 = INUM (GPLI)
                If ((TPLM == Zero))
                {
                    SHPO (GPLI, One)
                }

                If ((TPLT == One))
                {
                    _HID = "ATML3432"
                    HID2 = Zero
                    BADR = 0x4C
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x02))
                {
                    _HID = "ATML2952"
                    HID2 = Zero
                    BADR = 0x4A
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x03))
                {
                    _HID = "ELAN2097"
                    HID2 = One
                    BADR = 0x10
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x04))
                {
                    _HID = "NTRG0001"
                    HID2 = One
                    BADR = 0x07
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x05))
                {
                    _HID = "NTRG0002"
                    HID2 = One
                    BADR = 0x64
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x06))
                {
                    _HID = "WCOM508E"
                    HID2 = One
                    BADR = 0x0A
                    If ((TPLS == Zero))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }

                If ((TPLT == 0x07))
                {
                    _HID = "CUST0000"
                    HID2 = TPLH /* \TPLH */
                    BADR = TPLB /* \TPLB */
                    If ((TPLS == Zero))
                    {
                        SPED = 0x000186A0
                    }

                    If ((TPLS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPLT != Zero) && (I2CN & 0x02)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PCI0.I2C1.TPL1.SBFI */
                }

                If ((TPLM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }

        Device (UCMX)
        {
            Name (_HID, "INT3515")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            If (UTCE)
                            {
                                If ((Arg3 == One))
                                {
                                    PMC4 = (PMC4 & 0xFFFFFFFF7FFFFFFF)
                                }
                                Else
                                {
                                    PMC4 = (PMC4 | 0x80000000)
                                }
                            }
                        }

                    }
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y44)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y45)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y46)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y47)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.I2C1.UCMX._CRS._Y44._INT, INT1)  // _INT: Interrupts
                INT1 = INUM (UCG1)
                CreateDWordField (SBFI, \_SB.PCI0.I2C1.UCMX._CRS._Y45._INT, INT2)  // _INT: Interrupts
                INT2 = INUM (UCG2)
                CreateDWordField (SBFI, \_SB.PCI0.I2C1.UCMX._CRS._Y46._INT, INT3)  // _INT: Interrupts
                INT3 = INUM (UCG3)
                CreateDWordField (SBFI, \_SB.PCI0.I2C1.UCMX._CRS._Y47._INT, INT4)  // _INT: Interrupts
                INT4 = INUM (UCG4)
                Return (ConcatenateResTemplate (UCMM (I2CX), SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((UTCE == One) && (I2CN & 0x04)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.I2C2)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS2 /* \SDS2 */
            I2CX = 0x02
        }

        Device (TPD0)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y48, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y49)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PCI0.I2C2.TPD0._Y48._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PCI0.I2C2.TPD0._Y48._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PCI0.I2C2.TPD0._Y49._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPDI, One)
                }

                INT1 = GNUM (GPDI)
                INT2 = INUM (GPDI)
                If ((TPDM == Zero))
                {
                    SHPO (GPDI, One)
                }

                If ((TPDT == One))
                {
                    _HID = "SYNA2393"
                    HID2 = 0x20
                    Return (Zero)
                }

                If ((TPDT == 0x02))
                {
                    _HID = "06CB2846"
                    HID2 = 0x20
                    Return (Zero)
                }

                If ((TPDT == 0x06))
                {
                    _HID = "ALPS0000"
                    HID2 = 0x20
                    BADR = 0x2C
                    Return (Zero)
                }

                If ((TPDT == 0x05))
                {
                    _HID = "CUST0001"
                    HID2 = TPDH /* \TPDH */
                    BADR = TPDB /* \TPDB */
                    If ((TPDS == Zero))
                    {
                        SPED = 0x000186A0
                    }

                    If ((TPDS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPDS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPDT != Zero) && (I2CN & One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PCI0.I2C2.TPD0.SBFI */
                }

                If ((TPDM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }

        Device (TPL1)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y4A, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, Exclusive, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive, ,, _Y4B)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PCI0.I2C2.TPL1._Y4A._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PCI0.I2C2.TPL1._Y4A._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PCI0.I2C2.TPL1._Y4B._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPLI, One)
                }

                INT1 = GNUM (GPLI)
                INT2 = INUM (GPLI)
                If ((TPLM == Zero))
                {
                    SHPO (GPLI, One)
                }

                If ((TPLT == One))
                {
                    _HID = "ATML3432"
                    HID2 = Zero
                    BADR = 0x4C
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x02))
                {
                    _HID = "ATML2952"
                    HID2 = Zero
                    BADR = 0x4A
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x03))
                {
                    _HID = "ELAN2097"
                    HID2 = One
                    BADR = 0x10
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x04))
                {
                    _HID = "NTRG0001"
                    HID2 = One
                    BADR = 0x07
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x05))
                {
                    _HID = "NTRG0002"
                    HID2 = One
                    BADR = 0x64
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x06))
                {
                    _HID = "WCOM508E"
                    HID2 = One
                    BADR = 0x0A
                    If ((TPLS == Zero))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }

                If ((TPLT == 0x07))
                {
                    _HID = "CUST0000"
                    HID2 = TPLH /* \TPLH */
                    BADR = TPLB /* \TPLB */
                    If ((TPLS == Zero))
                    {
                        SPED = 0x000186A0
                    }

                    If ((TPLS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPLT != Zero) && (I2CN & 0x02)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PCI0.I2C2.TPL1.SBFI */
                }

                If ((TPLM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }

        Device (UCMX)
        {
            Name (_HID, "INT3515")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            If (UTCE)
                            {
                                If ((Arg3 == One))
                                {
                                    PMC4 = (PMC4 & 0xFFFFFFFF7FFFFFFF)
                                }
                                Else
                                {
                                    PMC4 = (PMC4 | 0x80000000)
                                }
                            }
                        }

                    }
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y4C)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y4D)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y4E)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y4F)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.I2C2.UCMX._CRS._Y4C._INT, INT1)  // _INT: Interrupts
                INT1 = INUM (UCG1)
                CreateDWordField (SBFI, \_SB.PCI0.I2C2.UCMX._CRS._Y4D._INT, INT2)  // _INT: Interrupts
                INT2 = INUM (UCG2)
                CreateDWordField (SBFI, \_SB.PCI0.I2C2.UCMX._CRS._Y4E._INT, INT3)  // _INT: Interrupts
                INT3 = INUM (UCG3)
                CreateDWordField (SBFI, \_SB.PCI0.I2C2.UCMX._CRS._Y4F._INT, INT4)  // _INT: Interrupts
                INT4 = INUM (UCG4)
                Return (ConcatenateResTemplate (UCMM (I2CX), SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((UTCE == One) && (I2CN & 0x04)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.I2C3)
    {
        Name (I2CN, Zero)
        Name (I2CX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            I2CN = SDS3 /* \SDS3 */
            I2CX = 0x03
        }

        Device (TPD0)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y50, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y51)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PCI0.I2C3.TPD0._Y50._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PCI0.I2C3.TPD0._Y50._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PCI0.I2C3.TPD0._Y51._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPDI, One)
                }

                INT1 = GNUM (GPDI)
                INT2 = INUM (GPDI)
                If ((TPDM == Zero))
                {
                    SHPO (GPDI, One)
                }

                If ((TPDT == One))
                {
                    _HID = "SYNA2393"
                    HID2 = 0x20
                    Return (Zero)
                }

                If ((TPDT == 0x02))
                {
                    _HID = "06CB2846"
                    HID2 = 0x20
                    Return (Zero)
                }

                If ((TPDT == 0x06))
                {
                    _HID = "ALPS0000"
                    HID2 = 0x20
                    BADR = 0x2C
                    Return (Zero)
                }

                If ((TPDT == 0x05))
                {
                    _HID = "CUST0001"
                    HID2 = TPDH /* \TPDH */
                    BADR = TPDB /* \TPDB */
                    If ((TPDS == Zero))
                    {
                        SPED = 0x000186A0
                    }

                    If ((TPDS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPDS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPDT != Zero) && (I2CN & One)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PCI0.I2C3.TPD0.SBFI */
                }

                If ((TPDM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }

        Device (TPL1)
        {
            Name (HID2, Zero)
            Name (SBFB, ResourceTemplate ()
            {
                I2cSerialBusV2 (0x0000, ControllerInitiated, 0x00061A80,
                    AddressingMode7Bit, "NULL",
                    0x00, ResourceConsumer, _Y52, Exclusive,
                    )
            })
            Name (SBFG, ResourceTemplate ()
            {
                GpioInt (Level, ActiveLow, Exclusive, PullDefault, 0x0000,
                    "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0000
                    }
            })
            Name (SBFI, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive, ,, _Y53)
                {
                    0x00000000,
                }
            })
            CreateWordField (SBFB, \_SB.PCI0.I2C3.TPL1._Y52._ADR, BADR)  // _ADR: Address
            CreateDWordField (SBFB, \_SB.PCI0.I2C3.TPL1._Y52._SPE, SPED)  // _SPE: Speed
            CreateWordField (SBFG, 0x17, INT1)
            CreateDWordField (SBFI, \_SB.PCI0.I2C3.TPL1._Y53._INT, INT2)  // _INT: Interrupts
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((OSYS < 0x07DC))
                {
                    SRXO (GPLI, One)
                }

                INT1 = GNUM (GPLI)
                INT2 = INUM (GPLI)
                If ((TPLM == Zero))
                {
                    SHPO (GPLI, One)
                }

                If ((TPLT == One))
                {
                    _HID = "ATML3432"
                    HID2 = Zero
                    BADR = 0x4C
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x02))
                {
                    _HID = "ATML2952"
                    HID2 = Zero
                    BADR = 0x4A
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x03))
                {
                    _HID = "ELAN2097"
                    HID2 = One
                    BADR = 0x10
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x04))
                {
                    _HID = "NTRG0001"
                    HID2 = One
                    BADR = 0x07
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x05))
                {
                    _HID = "NTRG0002"
                    HID2 = One
                    BADR = 0x64
                    SPED = 0x00061A80
                    Return (Zero)
                }

                If ((TPLT == 0x06))
                {
                    _HID = "WCOM508E"
                    HID2 = One
                    BADR = 0x0A
                    If ((TPLS == Zero))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }

                If ((TPLT == 0x07))
                {
                    _HID = "CUST0000"
                    HID2 = TPLH /* \TPLH */
                    BADR = TPLB /* \TPLB */
                    If ((TPLS == Zero))
                    {
                        SPED = 0x000186A0
                    }

                    If ((TPLS == One))
                    {
                        SPED = 0x00061A80
                    }

                    If ((TPLS == 0x02))
                    {
                        SPED = 0x000F4240
                    }

                    Return (Zero)
                }
            }

            Name (_HID, "XXXX0000")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == HIDG))
                {
                    Return (HIDD (Arg0, Arg1, Arg2, Arg3, HID2))
                }

                If ((Arg0 == TP7G))
                {
                    Return (TP7D (Arg0, Arg1, Arg2, Arg3, SBFB, SBFG))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((TPLT != Zero) && (I2CN & 0x02)))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((OSYS < 0x07DC))
                {
                    Return (SBFI) /* \_SB_.PCI0.I2C3.TPL1.SBFI */
                }

                If ((TPLM == Zero))
                {
                    Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFG))
                }

                Return (ConcatenateResTemplate (I2CM (I2CX, BADR, SPED), SBFI))
            }
        }

        Device (UCMX)
        {
            Name (_HID, "INT3515")  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Case (One)
                        {
                            If (UTCE)
                            {
                                If ((Arg3 == One))
                                {
                                    PMC4 = (PMC4 & 0xFFFFFFFF7FFFFFFF)
                                }
                                Else
                                {
                                    PMC4 = (PMC4 | 0x80000000)
                                }
                            }
                        }

                    }
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y54)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y55)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y56)
                    {
                        0x00000000,
                    }
                    Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, _Y57)
                    {
                        0x00000000,
                    }
                })
                CreateDWordField (SBFI, \_SB.PCI0.I2C3.UCMX._CRS._Y54._INT, INT1)  // _INT: Interrupts
                INT1 = INUM (UCG1)
                CreateDWordField (SBFI, \_SB.PCI0.I2C3.UCMX._CRS._Y55._INT, INT2)  // _INT: Interrupts
                INT2 = INUM (UCG2)
                CreateDWordField (SBFI, \_SB.PCI0.I2C3.UCMX._CRS._Y56._INT, INT3)  // _INT: Interrupts
                INT3 = INUM (UCG3)
                CreateDWordField (SBFI, \_SB.PCI0.I2C3.UCMX._CRS._Y57._INT, INT4)  // _INT: Interrupts
                INT4 = INUM (UCG4)
                Return (ConcatenateResTemplate (UCMM (I2CX), SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((UTCE == One) && (I2CN & 0x04)))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.SPI1)
    {
        Name (SPIP, Zero)
        Name (SPIX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            SPIP = SDS7 /* \SDS7 */
            SPIX = 0x07
        }

        If ((SMD7 != Zero))
        {
            Device (FPNT)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((FPTT == One))
                    {
                        Return ("FPC1011")
                    }

                    If ((FPTT == 0x02))
                    {
                        Return ("FPC1020")
                    }

                    If ((FPTT == 0x03))
                    {
                        Return ("VFSI6101")
                    }

                    If ((FPTT == 0x04))
                    {
                        Return ("VFSI7500")
                    }

                    If ((FPTT == 0x05))
                    {
                        Return ("EGIS0300")
                    }

                    If ((FPTT == 0x06))
                    {
                        Return ("FPC1021")
                    }

                    Return ("FPNT_DIS")
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SHPO (GFPI, One)
                    SHPO (GFPS, One)
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((FPTT != Zero) && (SPIP == One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Name (IBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y58)
                        {
                            0x00000000,
                        }
                    })
                    Name (GBUF, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, _Y59,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    Name (UBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (BBUF, 0x17, SPIN)
                    CreateWordField (GBUF, 0x17, GPIN)
                    CreateDWordField (IBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y58._INT, IPIN)  // _INT: Interrupts
                    CreateWordField (UBUF, 0x17, UPIN)
                    CreateBitField (IBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y58._LL, ILVL)  // _LL_: Low Level
                    CreateBitField (IBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y58._HE, ITRG)  // _HE_: High-Edge
                    CreateField (GBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y59._POL, 0x02, GLVL)  // _POL: Polarity
                    CreateBitField (GBUF, \_SB.PCI0.SPI1.FPNT._CRS._Y59._MOD, GTRG)  // _MOD: Mode
                    SPIN = GNUM (GFPS)
                    GPIN = GNUM (GFPI)
                    IPIN = INUM (GFPI)
                    UPIN = GNUM (GFPI)
                    If (((FPTT == 0x02) || (FPTT == 0x06)))
                    {
                        ILVL = Zero
                        ITRG = One
                        GLVL = Zero
                        GTRG = One
                    }

                    If ((FPTT == 0x04))
                    {
                        ILVL = Zero
                        ITRG = One
                    }

                    Switch (ToInteger (FPTT))
                    {
                        Case (One)
                        {
                            Local1 = 0x00989680
                            Local0 = Zero
                        }
                        Case (0x02)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Case (0x03)
                        {
                            Local1 = 0x007A1200
                            Local0 = One
                        }
                        Case (0x04)
                        {
                            Local1 = 0x007A1200
                            Local0 = Zero
                        }
                        Case (0x05)
                        {
                            Local1 = 0x00F42400
                            Local0 = Zero
                        }
                        Case (0x06)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Default
                        {
                        }

                    }

                    If ((FPTT == One))
                    {
                        Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                    }

                    If (((FPTT == 0x04) && (FPTM == Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                            )))
                    }

                    If (((FPTT == 0x04) && (FPTM != Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                            )))
                    }

                    If ((FPTM == Zero))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                    }

                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
                }
            }
        }
    }

    Scope (_SB.PCI0.SPI2)
    {
        Name (SPIP, Zero)
        Name (SPIX, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            SPIP = SDS8 /* \SDS8 */
            SPIX = 0x08
        }

        If ((SMD8 != Zero))
        {
            Device (FPNT)
            {
                Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
                {
                    If ((FPTT == One))
                    {
                        Return ("FPC1011")
                    }

                    If ((FPTT == 0x02))
                    {
                        Return ("FPC1020")
                    }

                    If ((FPTT == 0x03))
                    {
                        Return ("VFSI6101")
                    }

                    If ((FPTT == 0x04))
                    {
                        Return ("VFSI7500")
                    }

                    If ((FPTT == 0x05))
                    {
                        Return ("EGIS0300")
                    }

                    If ((FPTT == 0x06))
                    {
                        Return ("FPC1021")
                    }

                    Return ("FPNT_DIS")
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    SHPO (GFPI, One)
                    SHPO (GFPS, One)
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((FPTT != Zero) && (SPIP == One)))
                    {
                        Return (0x0F)
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (BBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0008
                            }
                    })
                    Name (IBUF, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, ExclusiveAndWake, ,, _Y5A)
                        {
                            0x00000000,
                        }
                    })
                    Name (GBUF, ResourceTemplate ()
                    {
                        GpioInt (Level, ActiveLow, ExclusiveAndWake, PullDefault, 0x0000,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, _Y5B,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    Name (UBUF, ResourceTemplate ()
                    {
                        GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x0000
                            }
                    })
                    CreateWordField (BBUF, 0x17, SPIN)
                    CreateWordField (GBUF, 0x17, GPIN)
                    CreateDWordField (IBUF, \_SB.PCI0.SPI2.FPNT._CRS._Y5A._INT, IPIN)  // _INT: Interrupts
                    CreateWordField (UBUF, 0x17, UPIN)
                    CreateBitField (IBUF, \_SB.PCI0.SPI2.FPNT._CRS._Y5A._LL, ILVL)  // _LL_: Low Level
                    CreateBitField (IBUF, \_SB.PCI0.SPI2.FPNT._CRS._Y5A._HE, ITRG)  // _HE_: High-Edge
                    CreateField (GBUF, \_SB.PCI0.SPI2.FPNT._CRS._Y5B._POL, 0x02, GLVL)  // _POL: Polarity
                    CreateBitField (GBUF, \_SB.PCI0.SPI2.FPNT._CRS._Y5B._MOD, GTRG)  // _MOD: Mode
                    SPIN = GNUM (GFPS)
                    GPIN = GNUM (GFPI)
                    IPIN = INUM (GFPI)
                    UPIN = GNUM (GFPI)
                    If (((FPTT == 0x02) || (FPTT == 0x06)))
                    {
                        ILVL = Zero
                        ITRG = One
                        GLVL = Zero
                        GTRG = One
                    }

                    If ((FPTT == 0x04))
                    {
                        ILVL = Zero
                        ITRG = One
                    }

                    Switch (ToInteger (FPTT))
                    {
                        Case (One)
                        {
                            Local1 = 0x00989680
                            Local0 = Zero
                        }
                        Case (0x02)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Case (0x03)
                        {
                            Local1 = 0x007A1200
                            Local0 = One
                        }
                        Case (0x04)
                        {
                            Local1 = 0x007A1200
                            Local0 = Zero
                        }
                        Case (0x05)
                        {
                            Local1 = 0x00F42400
                            Local0 = Zero
                        }
                        Case (0x06)
                        {
                            Local1 = 0x002DC6C0
                            Local0 = Zero
                        }
                        Default
                        {
                        }

                    }

                    If ((FPTT == One))
                    {
                        Return (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF))
                    }

                    If (((FPTT == 0x04) && (FPTM == Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, GBUF
                            )))
                    }

                    If (((FPTT == 0x04) && (FPTM != Zero)))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), ConcatenateResTemplate (UBUF, IBUF
                            )))
                    }

                    If ((FPTM == Zero))
                    {
                        Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), GBUF))
                    }

                    Return (ConcatenateResTemplate (ConcatenateResTemplate (SPIM (SPIX, Local0, Local1), BBUF), IBUF))
                }
            }
        }
    }

    Method (PKG1, 1, Serialized)
    {
        Name (PKG, Package (0x01)
        {
            Zero
        })
        PKG [Zero] = Arg0
        Return (PKG) /* \PKG1.PKG_ */
    }

    Method (PKG3, 3, Serialized)
    {
        Name (PKG, Package (0x03)
        {
            Zero, 
            Zero, 
            Zero
        })
        PKG [Zero] = Arg0
        PKG [One] = Arg1
        PKG [0x02] = Arg2
        Return (PKG) /* \PKG3.PKG_ */
    }

    If (USTP)
    {
        Scope (_SB.PCI0.I2C0)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH0, SSL0, SSD0))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH0, FML0, FMD0))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH0, FPL0, FPD0))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH0, HML0, HMD0))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C0))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C0))
            }
        }

        Scope (_SB.PCI0.I2C1)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH1, SSL1, SSD1))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH1, FML1, FMD1))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH1, FPL1, FPD1))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH1, HML1, HMD1))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C1))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C1))
            }
        }

        Scope (_SB.PCI0.I2C2)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH2, SSL2, SSD2))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH2, FML2, FMD2))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH2, FPL2, FPD2))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH2, HML2, HMD2))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C2))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C2))
            }
        }

        Scope (_SB.PCI0.I2C3)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH3, SSL3, SSD3))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH3, FML3, FMD3))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH3, FPL3, FPD3))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH3, HML3, HMD3))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C3))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C3))
            }
        }

        Scope (_SB.PCI0.I2C4)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH4, SSL4, SSD4))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH4, FML4, FMD4))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH4, FPL4, FPD4))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH4, HML4, HMD4))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C4))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C4))
            }
        }

        Scope (_SB.PCI0.I2C5)
        {
            Method (SSCN, 0, NotSerialized)
            {
                Return (PKG3 (SSH5, SSL5, SSD5))
            }

            Method (FMCN, 0, NotSerialized)
            {
                Return (PKG3 (FMH5, FML5, FMD5))
            }

            Method (FPCN, 0, NotSerialized)
            {
                Return (PKG3 (FPH5, FPL5, FPD5))
            }

            Method (HMCN, 0, NotSerialized)
            {
                Return (PKG3 (HMH5, HML5, HMD5))
            }

            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C5))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C5))
            }
        }

        Scope (_SB.PCI0.SPI0)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C6))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C6))
            }
        }

        Scope (_SB.PCI0.SPI1)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C7))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C7))
            }
        }

        Scope (_SB.PCI0.SPI2)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C8))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C8))
            }
        }

        Scope (_SB.PCI0.UA00)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0C9))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1C9))
            }
        }

        Scope (_SB.PCI0.UA01)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CA))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CA))
            }
        }

        Scope (_SB.PCI0.UA02)
        {
            Method (M0D3, 0, NotSerialized)
            {
                Return (PKG1 (M0CB))
            }

            Method (M1D3, 0, NotSerialized)
            {
                Return (PKG1 (M1CB))
            }
        }
    }

    Scope (_SB.PCI0.HDAS.SNDW)
    {
        Device (SWD0)
        {
            Name (_ADR, 0x000010025D070100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0E)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD1)
        {
            Name (_ADR, 0x000110025D070100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0E)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD2)
        {
            Name (_ADR, 0x000210025D070100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0E)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD3)
        {
            Name (_ADR, 0x000310025D070100)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0E)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD4)
        {
            Name (_ADR, 0x000010025D070000)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0E)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD5)
        {
            Name (_ADR, 0x000110025D070000)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0E)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD6)
        {
            Name (_ADR, 0x000210025D070000)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0E)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }

        Device (SWD7)
        {
            Name (_ADR, 0x000310025D070000)  // _ADR: Address
            Name (_DSD, Package (0x04)  // _DSD: Device-Specific Data
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0E)
                {
                    Package (0x02)
                    {
                        "intel-endpoints-num", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sw-interface-revision", 
                        0x00010000
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-wake-up-unavailable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-test-mode-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clock-stop-mode1-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-clockstopprepare-sm-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-clockstopprepare-hard-reset-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-highPHY-capable", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-paging-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bank-delay-support", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port15-read-behavior", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-master-count", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-source-port-list", 
                        0x04
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-sink-port-list", 
                        0x04
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x11)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-0", 
                        "EPD0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-descriptor-1", 
                        "EPD1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-0-subproperties", 
                        "LNK0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-1-subproperties", 
                        "LNK1"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-2-subproperties", 
                        "LNK2"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-link-3-subproperties", 
                        "LNK3"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-0-subproperties", 
                        "DP0"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-1-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-2-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-3-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-4-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-5-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-6-source-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-7-sink-subproperties", 
                        "DPN"
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-dp-8-source-subproperties", 
                        "DPN"
                    }
                }
            })
            Name (EPD0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN0"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM0"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF0"
                    }
                }
            })
            Name (WFX0, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0005DC00, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX1, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x000BB800, 
                    0x08, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX2, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX3, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    0x02, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                0x03, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX0"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX1"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX2"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX3"
                    }
                }
            })
            Name (ECF0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN0, Buffer (0x2F)
            {
                /* 0000 */  0xE2, 0x1C, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x03, 0x00, 0x00, 0x00, 0x8C, 0xC9, 0xB3,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (EPD1, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x06)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-type", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-id", 
                        Buffer (0x10)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                        }
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-mask", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-group-position", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-direction", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-pin-descr", 
                        "EPN1"
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x02)
                {
                    Package (0x02)
                    {
                        "intel-endpoint-formats", 
                        "EFM1"
                    }, 

                    Package (0x02)
                    {
                        "intel-endpoint-config", 
                        "ECF1"
                    }
                }
            })
            Name (WFX4, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x0002EE00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX5, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0005DC00, 
                    0x04, 
                    0x20, 
                    0x16
                }, 

                0x18, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX6, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0xBB80, 
                    0x00017700, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (WFX7, Package (0x04)
            {
                Package (0x07)
                {
                    0xFFFE, 
                    One, 
                    0x00017700, 
                    0x0002EE00, 
                    0x02, 
                    0x10, 
                    0x16
                }, 

                0x10, 
                One, 
                Buffer (0x10)
                {
                    /* 0000 */  0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,  // ........
                    /* 0008 */  0x80, 0x00, 0x00, 0xAA, 0x00, 0x38, 0x9B, 0x71   // .....8.q
                }
            })
            Name (EFM1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x04)
                {
                    Package (0x02)
                    {
                        "wfx-0", 
                        "WFX4"
                    }, 

                    Package (0x02)
                    {
                        "wfx-1", 
                        "WFX5"
                    }, 

                    Package (0x02)
                    {
                        "wfx-2", 
                        "WFX6"
                    }, 

                    Package (0x02)
                    {
                        "wfx-3", 
                        "WFX7"
                    }
                }
            })
            Name (ECF1, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x00){}
            })
            Name (EPN1, Buffer (0x2F)
            {
                /* 0000 */  0xE1, 0x1B, 0xF2, 0xDF, 0x0F, 0xF7, 0xD0, 0x11,  // ........
                /* 0008 */  0xB9, 0x17, 0x00, 0xA0, 0xC9, 0x22, 0x31, 0x96,  // ....."1.
                /* 0010 */  0x01, 0x01, 0x00, 0x00, 0x00, 0x99, 0x8C, 0xE8,  // ........
                /* 0018 */  0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x0A, 0x00, 0x00, 0x00, 0x01, 0x00         // .......
            })
            Name (DP0, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-flow-controlled", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-imp-def-response-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dp0-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-bpt-supported", 
                        One
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-bra-mode", 
                        "BRA0"
                    }
                }
            })
            Name (BRA0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x05)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "bra-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-max-data-per-frame", 
                        0x01D6
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-bra-mode-min-us-between-transactions", 
                        Zero
                    }
                }
            })
            Name (DPN, Package (0x04)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x0D)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-max-wordlength", 
                        0x40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-min-wordlength", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-wordlength-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-data-port-type", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-grouping-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-simplified-channel-prepare-sm", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-imp-def-dpn-interrupts-supported", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-min-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-max-channel-number", 
                        0x02
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-channel-number-list", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-modes-supported", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-block-packing-mode", 
                        One
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-port-encoding-type", 
                        Zero
                    }
                }, 

                ToUUID ("dbb8e3e6-5886-4ba6-8795-1319f52a966b"), 
                Package (0x01)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-port-audio-mode-0", 
                        "AM0"
                    }
                }
            })
            Name (AM0, Package (0x02)
            {
                ToUUID ("daffd814-6eba-4d8c-8a91-bc9bbf4aa301") /* Device Properties for _DSD */, 
                Package (0x08)
                {
                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-bus-frequency", 
                        0x016E3600
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-bus-frequency", 
                        0x00249F00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-bus-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-max-sampling-frequency", 
                        0x0002EE00
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-min-sampling-frequency", 
                        0x1F40
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-sampling-frequency-configs", 
                        Package (0x01)
                        {
                            Zero
                        }
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-prepare-channel-behavior", 
                        Zero
                    }, 

                    Package (0x02)
                    {
                        "mipi-sdw-audio-mode-glitchless-transitions", 
                        Zero
                    }
                }
            })
        }
    }

    If ((I2SB == Zero))
    {
        Scope (_SB.PCI0.I2C0)
        {
            Device (HDAC)
            {
                Name (_HID, "INT0000")  // _HID: Hardware ID
                Name (_CID, "INT0000")  // _CID: Compatible ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((I2SC == One))
                    {
                        _HID = "INT34C2"
                        _CID = "INT34C2"
                        CADR = 0x1C
                        Return (Zero)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((I2SC != Zero) && (CDIS != One)))
                    {
                        Return (0x0F)
                    }

                    If ((CDIS == One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CDIS = Zero
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    CDIS = One
                }
            }
        }
    }
    ElseIf ((I2SB == One))
    {
        Scope (_SB.PCI0.I2C1)
        {
            Device (HDAC)
            {
                Name (_HID, "INT0000")  // _HID: Hardware ID
                Name (_CID, "INT0000")  // _CID: Compatible ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((I2SC == One))
                    {
                        _HID = "INT34C2"
                        _CID = "INT34C2"
                        CADR = 0x1C
                        Return (Zero)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((I2SC != Zero) && (CDIS != One)))
                    {
                        Return (0x0F)
                    }

                    If ((CDIS == One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CDIS = Zero
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    CDIS = One
                }
            }
        }
    }
    ElseIf ((I2SB == 0x02))
    {
        Scope (_SB.PCI0.I2C2)
        {
            Device (HDAC)
            {
                Name (_HID, "INT0000")  // _HID: Hardware ID
                Name (_CID, "INT0000")  // _CID: Compatible ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((I2SC == One))
                    {
                        _HID = "INT34C2"
                        _CID = "INT34C2"
                        CADR = 0x1C
                        Return (Zero)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((I2SC != Zero) && (CDIS != One)))
                    {
                        Return (0x0F)
                    }

                    If ((CDIS == One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CDIS = Zero
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    CDIS = One
                }
            }
        }
    }
    ElseIf ((I2SB == 0x03))
    {
        Scope (_SB.PCI0.I2C3)
        {
            Device (HDAC)
            {
                Name (_HID, "INT0000")  // _HID: Hardware ID
                Name (_CID, "INT0000")  // _CID: Compatible ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((I2SC == One))
                    {
                        _HID = "INT34C2"
                        _CID = "INT34C2"
                        CADR = 0x1C
                        Return (Zero)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((I2SC != Zero) && (CDIS != One)))
                    {
                        Return (0x0F)
                    }

                    If ((CDIS == One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CDIS = Zero
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    CDIS = One
                }
            }
        }
    }
    ElseIf ((I2SB == 0x04))
    {
        Scope (_SB.PCI0.I2C4)
        {
            Device (HDAC)
            {
                Name (_HID, "INT0000")  // _HID: Hardware ID
                Name (_CID, "INT0000")  // _CID: Compatible ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((I2SC == One))
                    {
                        _HID = "INT34C2"
                        _CID = "INT34C2"
                        CADR = 0x1C
                        Return (Zero)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((I2SC != Zero) && (CDIS != One)))
                    {
                        Return (0x0F)
                    }

                    If ((CDIS == One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CDIS = Zero
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    CDIS = One
                }
            }
        }
    }
    ElseIf ((I2SB == 0x05))
    {
        Scope (_SB.PCI0.I2C5)
        {
            Device (HDAC)
            {
                Name (_HID, "INT0000")  // _HID: Hardware ID
                Name (_CID, "INT0000")  // _CID: Compatible ID
                Name (_DDN, "Intel(R) Smart Sound Technology Audio Codec")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (CADR, Zero)
                Name (CDIS, Zero)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((I2SC == One))
                    {
                        _HID = "INT34C2"
                        _CID = "INT34C2"
                        CADR = 0x1C
                        Return (Zero)
                    }
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (ConcatenateResTemplate (IICB (CADR, I2SB), INTB (I2SI, Zero, Zero)))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((I2SC != Zero) && (CDIS != One)))
                    {
                        Return (0x0F)
                    }

                    If ((CDIS == One))
                    {
                        Return (0x0D)
                    }

                    Return (Zero)
                }

                Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                {
                    CDIS = Zero
                }

                Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                {
                    CDIS = One
                }
            }
        }
    }

    Scope (_SB.PCI0.HDAS)
    {
        Method (PPMS, 1, Serialized)
        {
            If ((Arg0 == ToUUID ("7c708106-3aff-40fe-88be-8c999b3f7445")))
            {
                Return ((ADPM & 0x04))
            }

            If ((Arg0 == ToUUID ("ec774fa9-28d3-424a-90e4-69f984f1eeb7")))
            {
                Return ((ADPM & 0x0100))
            }

            If ((Arg0 == ACCG (AG1L, AG1H)))
            {
                Return ((ADPM & 0x20000000))
            }

            If ((Arg0 == ACCG (AG2L, AG2H)))
            {
                Return ((ADPM & 0x40000000))
            }

            If ((Arg0 == ACCG (AG3L, AG3H)))
            {
                Return ((ADPM & 0x80000000))
            }

            Return (Zero)
        }

        Method (ACCG, 2, NotSerialized)
        {
            Name (GBUF, Buffer (0x10){})
            Concatenate (Arg0, Arg1, GBUF) /* \_SB_.PCI0.HDAS.ACCG.GBUF */
            Return (GBUF) /* \_SB_.PCI0.HDAS.ACCG.GBUF */
        }
    }

    Method (HIDW, 4, Serialized)
    {
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
        {
            If ((Arg2 == Zero))
            {
                If ((Arg1 == Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Else
                {
                    Return (Zero)
                }
            }

            If ((Arg2 == One))
            {
                Switch (ToInteger (DerefOf (Arg3 [Zero])))
                {
                    Case (Zero)
                    {
                        If (CondRefOf (\_SB.HIDD.HPEM))
                        {
                            P8XH (Zero, 0x5C)
                        }
                    }
                    Case (One)
                    {
                        If (CondRefOf (\_SB.SLPB))
                        {
                            Notify (\_SB.SLPB, 0x80) // Status Change
                            P8XH (Zero, 0x5D)
                        }
                    }
                    Case (0x02)
                    {
                    }
                    Case (0x03)
                    {
                    }

                }

                Return (Zero)
            }
            Else
            {
                Return (Zero)
            }
        }
        Else
        {
            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Method (HIWC, 1, NotSerialized)
    {
        If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37")))
        {
            Return (One)
        }

        Return (Zero)
    }

    Scope (\)
    {
        PowerResource (PIN, 0x00, 0x0000)
        {
            Method (STA, 1, Serialized)
            {
                If ((\_SB.GGOV (DerefOf (Arg0 [Zero])) == DerefOf (Arg0 [One]
                    )))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (ON, 1, Serialized)
            {
                ADBG (Concatenate ("PINH GPIO=", ToHexString (DerefOf (Arg0 [Zero]))))
                \_SB.SGOV (DerefOf (Arg0 [Zero]), DerefOf (Arg0 [One]))
            }

            Method (OFF, 1, Serialized)
            {
                ADBG (Concatenate ("PINL GPIO=", ToHexString (DerefOf (Arg0 [Zero]))))
                \_SB.SGOV (DerefOf (Arg0 [Zero]), ~DerefOf (Arg0 [One])
                    )
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
            }
        }
    }

    Device (ALSD)
    {
        Name (_HID, "ACPI0008" /* Ambient Light Sensor Device */)  // _HID: Hardware ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((ALSE == 0x02))
            {
                Return (0x0B)
            }

            Return (Zero)
        }

        Method (_ALI, 0, NotSerialized)  // _ALI: Ambient Light Illuminance
        {
            Return (((LHIH << 0x08) | LLOW))
        }

        Name (_ALR, Package (0x05)  // _ALR: Ambient Light Response
        {
            Package (0x02)
            {
                0x46, 
                Zero
            }, 

            Package (0x02)
            {
                0x49, 
                0x0A
            }, 

            Package (0x02)
            {
                0x55, 
                0x50
            }, 

            Package (0x02)
            {
                0x64, 
                0x012C
            }, 

            Package (0x02)
            {
                0x96, 
                0x03E8
            }
        })
    }

    If ((GBES != Zero))
    {
        Scope (_SB.PCI0.GLAN)
        {
            Method (FGEN, 0, Serialized)
            {
                Return (GSEN) /* \GSEN */
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (H_EC)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                ^^^GFX0.CLID = 0x03
                Return (Zero)
            }

            Name (ECAV, Zero)
            Name (B1ST, 0x32)
            Name (B2ST, 0x36)
            Name (CFAN, 0x03)
            Name (CMDR, 0x3A)
            Name (DOCK, 0x30)
            Name (PLMX, One)
            Name (PECH, 0x83)
            Name (PECL, 0x82)
            Name (PENV, 0x44)
            Name (PINV, 0x43)
            Name (PPSH, 0x42)
            Name (PPSL, 0x41)
            Name (PSTP, 0x45)
            Name (RPWR, 0x03)
            Name (LSTE, 0x03)
            Name (VPWR, 0x30)
            Name (WTMS, 0xC4)
            Name (AWT2, 0xC5)
            Name (AWT1, 0xC6)
            Name (AWT0, 0xC7)
            Name (DLED, 0x78)
            Name (SPT2, 0xC8)
            Name (PB10, 0x78)
            Name (IWCW, 0xA0)
            Name (IWCR, 0xA0)
            Name (PVOL, 0xE8)
            Name (PWRT, 0x79)
            Method (ECRD, 1, Serialized)
            {
                Local0 = DerefOf (Arg0)
                Switch (ToInteger (Local0))
                {
                    Case (0x32)
                    {
                        Return (Zero)
                    }
                    Case (0x36)
                    {
                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        Return (Zero)
                    }
                    Case (0x3A)
                    {
                        Return (Zero)
                    }
                    Case (0x30)
                    {
                        Return (Zero)
                    }
                    Case (One)
                    {
                        Return (Zero)
                    }
                    Case (0x83)
                    {
                        Return (Zero)
                    }
                    Case (0x82)
                    {
                        Return (Zero)
                    }
                    Case (0x44)
                    {
                        Return (Zero)
                    }
                    Case (0x43)
                    {
                        Return (Zero)
                    }
                    Case (0x42)
                    {
                        Return (Zero)
                    }
                    Case (0x41)
                    {
                        Return (Zero)
                    }
                    Case (0x45)
                    {
                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        Return (Zero)
                    }
                    Case (0x03)
                    {
                        Return (Zero)
                    }
                    Case (0x30)
                    {
                        Return (Zero)
                    }
                    Case (0xC4)
                    {
                        Return (Zero)
                    }
                    Case (0xC5)
                    {
                        Return (Zero)
                    }
                    Case (0xC6)
                    {
                        Return (Zero)
                    }
                    Case (0xC7)
                    {
                        Return (Zero)
                    }
                    Case (0x78)
                    {
                        Return (Zero)
                    }
                    Case (0xC8)
                    {
                        Return (Zero)
                    }
                    Case (0x78)
                    {
                        Return (Zero)
                    }
                    Case (0xA0)
                    {
                        Return (Zero)
                    }
                    Case (0xA0)
                    {
                        Return (Zero)
                    }
                    Case (0xE8)
                    {
                        Return (Zero)
                    }
                    Case (0x79)
                    {
                        Return (Zero)
                    }

                }

                Return (Zero)
            }

            Method (ECWT, 2, Serialized)
            {
                Local0 = DerefOf (Arg0)
                Switch (ToInteger (Local0))
                {
                    Case (0x32)
                    {
                    }
                    Case (0x36)
                    {
                    }
                    Case (0x03)
                    {
                    }
                    Case (0x3A)
                    {
                    }
                    Case (0x30)
                    {
                    }
                    Case (One)
                    {
                    }
                    Case (0x83)
                    {
                    }
                    Case (0x82)
                    {
                    }
                    Case (0x44)
                    {
                    }
                    Case (0x43)
                    {
                    }
                    Case (0x42)
                    {
                    }
                    Case (0x41)
                    {
                    }
                    Case (0x45)
                    {
                    }
                    Case (0x03)
                    {
                    }
                    Case (0x03)
                    {
                    }
                    Case (0x30)
                    {
                    }
                    Case (0xC4)
                    {
                    }
                    Case (0xC5)
                    {
                    }
                    Case (0xC6)
                    {
                    }
                    Case (0xC7)
                    {
                    }
                    Case (0x78)
                    {
                    }
                    Case (0xC8)
                    {
                    }
                    Case (0x78)
                    {
                    }
                    Case (0xA0)
                    {
                    }
                    Case (0xA0)
                    {
                    }
                    Case (0xE8)
                    {
                    }
                    Case (0x79)
                    {
                    }

                }
            }

            Method (ECMD, 1, Serialized)
            {
            }

            Method (ECNT, 1, Serialized)
            {
            }

            Device (BAT0)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }
            }

            Device (BAT1)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    Return (BST1 ())
                }
            }

            Device (BAT2)
            {
                Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (Zero)
                }

                Method (_BST, 0, NotSerialized)  // _BST: Battery Status
                {
                    Return (BST2 ())
                }
            }
        }
    }

    Scope (\)
    {
        Field (GNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x20), 
            B1SC,   8, 
            Offset (0x23), 
            B1SS,   8
        }
    }

    Scope (\)
    {
        Field (GNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x21), 
            B2SC,   8, 
            Offset (0x24), 
            B2SS,   8
        }
    }

    Device (_SB.PCI0.DOCK)
    {
        Name (_HID, "ABCD0000")  // _HID: Hardware ID
        Name (_CID, EisaId ("PNP0C15") /* Docking Station */)  // _CID: Compatible ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            Return (Zero)
        }
    }

    Scope (_SB)
    {
        Method (PWPR, 0, Serialized)
        {
        }

        Method (PWRR, 0, Serialized)
        {
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Return (One)
            }
        }
    }

    Scope (_SB.PCI0.LPCB.H_EC)
    {
        Method (BST1, 0, NotSerialized)
        {
            Name (PKG1, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Return (PKG1) /* \_SB_.PCI0.LPCB.H_EC.BST1.PKG1 */
        }

        Method (BST2, 0, NotSerialized)
        {
            Name (PKG2, Package (0x04)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Return (PKG2) /* \_SB_.PCI0.LPCB.H_EC.BST2.PKG2 */
        }
    }

    OperationRegion (ABNV, SystemMemory, 0x5BCA5000, 0x0016)
    Field (ABNV, AnyAcc, Lock, Preserve)
    {
        ABMA,   64, 
        ABMS,   8, 
        ABIA,   16, 
        ABIL,   16, 
        ABRA,   32, 
        ABRS,   16, 
        ABFW,   8, 
        ABTS,   16
    }

    Scope (_SB.PCI0)
    {
        Device (PS2M)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((PLSZ == 0x15))
                {
                    Return (0x76088C11)
                }
                Else
                {
                    Return (0x77088C11)
                }
            }

            Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (CRS1, ResourceTemplate ()
            {
                IRQNoFlags ()
                    {12}
            })
            Name (CRS2, ResourceTemplate ()
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {12}
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((IOST & 0x0400))
                {
                    Return (CRS1) /* \_SB_.PCI0.PS2M.CRS1 */
                }
                Else
                {
                    Return (CRS2) /* \_SB_.PCI0.PS2M.CRS2 */
                }
            }

            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    IRQNoFlags ()
                        {12}
                }
                EndDependentFn ()
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                MSFG = Arg0
            }
        }

        Scope (\)
        {
            Name (MSFG, One)
        }
    }

    Device (_SB.TPM)
    {
        Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
        {
            If (TCMF)
            {
                Return (0x01013469)
            }
            ElseIf ((TTDP == Zero))
            {
                Return (0x310CD041)
            }
            Else
            {
                Return ("MSFT0101")
            }
        }

        Method (_STR, 0, NotSerialized)  // _STR: Description String
        {
            If ((TTDP == Zero))
            {
                Return (Unicode ("TPM 1.2 Device"))
            }
            Else
            {
                Return (Unicode ("TPM 2.0 Device"))
            }
        }

        Name (_UID, One)  // _UID: Unique ID
        Name (CRST, ResourceTemplate ()
        {
            Memory32Fixed (ReadOnly,
                0x00000000,         // Address Base
                0x00001000,         // Address Length
                _Y5C)
            Memory32Fixed (ReadOnly,
                0xFED70000,         // Address Base
                0x00001000,         // Address Length
                _Y5D)
        })
        Name (CRSD, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y5E)
        })
        Name (CRSI, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0xFED40000,         // Address Base
                0x00005000,         // Address Length
                _Y5F)
        })
        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
        {
            If ((AMDT == One))
            {
                CreateDWordField (CRST, \_SB.TPM._Y5C._BAS, MTFB)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y5C._LEN, LTFB)  // _LEN: Length
                MTFB = TPMB /* \TPMB */
                LTFB = 0x1000
                CreateDWordField (CRST, \_SB.TPM._Y5D._BAS, MTFC)  // _BAS: Base Address
                CreateDWordField (CRST, \_SB.TPM._Y5D._LEN, LTFC)  // _LEN: Length
                MTFC = TPMC /* \TPMC */
                LTFC = 0x1000
                Return (CRST) /* \_SB_.TPM_.CRST */
            }
            Else
            {
                If ((DTP1 == One))
                {
                    CreateDWordField (CRSD, \_SB.TPM._Y5E._BAS, MTFE)  // _BAS: Base Address
                    CreateDWordField (CRSD, \_SB.TPM._Y5E._LEN, LTFE)  // _LEN: Length
                    MTFE = 0xFED40000
                    LTFE = 0x5000
                    Return (CRSD) /* \_SB_.TPM_.CRSD */
                }
                ElseIf ((TTPF == One))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y5F._BAS, MTFD)  // _BAS: Base Address
                    CreateDWordField (CRSI, \_SB.TPM._Y5F._LEN, LTFD)  // _LEN: Length
                    MTFD = 0xFED40000
                    LTFD = 0x5000
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }
                ElseIf ((TTPF == Zero))
                {
                    CreateDWordField (CRSI, \_SB.TPM._Y5F._BAS, MTFF)  // _BAS: Base Address
                    MTFF = TPMM /* \TPMM */
                    Return (CRSI) /* \_SB_.TPM_.CRSI */
                }

                MTFE = Zero
                LTFE = Zero
                Return (CRSI) /* \_SB_.TPM_.CRSI */
            }

            Return (CRSI) /* \_SB_.TPM_.CRSI */
        }

        OperationRegion (TMMB, SystemMemory, 0xFED40000, 0x5000)
        Field (TMMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x04), 
            LCST,   32, 
            Offset (0x40), 
            CREQ,   32, 
            CSTS,   32, 
            Offset (0x4C), 
            SCMD,   32
        }

        OperationRegion (CRBD, SystemMemory, TPMM, 0x48)
        Field (CRBD, AnyAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            HERR,   32, 
            Offset (0x40), 
            HCMD,   32, 
            HSTS,   32
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((TTDP == Zero))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }
            ElseIf ((TTDP == One))
            {
                If (TPMF)
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Return (Zero)
        }

        Method (STRT, 3, Serialized)
        {
            OperationRegion (TPMR, SystemMemory, FTPM, 0x1000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                FERR,   32, 
                Offset (0x0C), 
                BEGN,   32
            }

            Name (TIMR, Zero)
            If ((ToInteger (Arg0) != Zero)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    TIMR = Zero
                    If ((AMDT == One))
                    {
                        While (((BEGN == One) && (TIMR < 0x0200)))
                        {
                            If ((BEGN == One))
                            {
                                Sleep (One)
                                TIMR++
                            }
                        }
                    }
                    ElseIf ((((HSTS & 0x02) | (HSTS & One)
                        ) == 0x03))
                    {
                        HCMD = One
                    }
                    Else
                    {
                        FERR = One
                        BEGN = Zero
                    }

                    Return (Zero)
                }

            }

            Return (One)
        }

        Method (CRYF, 3, Serialized)
        {
            If ((ToInteger (Arg0) != One)){}
            Switch (ToInteger (Arg1))
            {
                Case (Zero)
                {
                    Return (Buffer (One)
                    {
                         0x03                                             // .
                    })
                }
                Case (One)
                {
                    Name (TPMV, Package (0x02)
                    {
                        One, 
                        Package (0x02)
                        {
                            One, 
                            0x20
                        }
                    })
                    If ((_STA () == Zero))
                    {
                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    Return (TPMV) /* \_SB_.TPM_.CRYF.TPMV */
                }

            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.TPM)
    {
        OperationRegion (TSMI, SystemIO, SMIA, One)
        Field (TSMI, ByteAcc, NoLock, Preserve)
        {
            SMI,    8
        }

        OperationRegion (ATNV, SystemMemory, PPIM, PPIL)
        Field (ATNV, AnyAcc, NoLock, Preserve)
        {
            RQST,   32, 
            RCNT,   32, 
            ERRO,   32, 
            FLAG,   32, 
            MISC,   32, 
            OPTN,   32, 
            SRSP,   32
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        If ((PPIV == Zero))
                        {
                            Return ("1.2")
                        }
                        Else
                        {
                            Return ("1.3")
                        }
                    }
                    Case (0x02)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        SRSP = Zero
                        FLAG = 0x02
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x03)
                    {
                        Name (PPI1, Package (0x02)
                        {
                            Zero, 
                            Zero
                        })
                        PPI1 [One] = RQST /* \_SB_.TPM_.RQST */
                        Return (PPI1) /* \_SB_.TPM_._DSM.PPI1 */
                    }
                    Case (0x04)
                    {
                        Return (TRST) /* \TRST */
                    }
                    Case (0x05)
                    {
                        Name (PPI2, Package (0x03)
                        {
                            Zero, 
                            Zero, 
                            Zero
                        })
                        SRSP = Zero
                        FLAG = 0x05
                        SMI = OFST /* \OFST */
                        PPI2 [One] = RCNT /* \_SB_.TPM_.RCNT */
                        PPI2 [0x02] = ERRO /* \_SB_.TPM_.ERRO */
                        Return (PPI2) /* \_SB_.TPM_._DSM.PPI2 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x07
                        OPTN = Zero
                        If ((RQST == 0x17))
                        {
                            ToInteger (DerefOf (Arg3 [One]), OPTN) /* \_SB_.TPM_.OPTN */
                        }

                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Case (0x08)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x08
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }
            ElseIf ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        RQST = DerefOf (Arg3 [Zero])
                        FLAG = 0x09
                        TMF1 = OFST /* \OFST */
                        SRSP = Zero
                        SMI = TMF1 /* \TMF1 */
                        Return (SRSP) /* \_SB_.TPM_.SRSP */
                    }
                    Default
                    {
                    }

                }
            }

            If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8")))
            {
                Return (CRYF (Arg1, Arg2, Arg3))
            }

            If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4")))
            {
                Return (STRT (Arg1, Arg2, Arg3))
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (TPTS, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (0x04)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }
                Case (0x05)
                {
                    RQST = Zero
                    FLAG = 0x09
                    SRSP = Zero
                    SMI = OFST /* \OFST */
                }

            }
        }
    }

    Scope (_SB)
    {
        Device (AMW0)
        {
            Mutex (WMIX, 0x01)
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Method (STBY, 3, NotSerialized)
            {
                CreateByteField (Arg0, Arg1, TMP)
                TMP = Arg2
            }

            Method (STWD, 3, NotSerialized)
            {
                CreateWordField (Arg0, Arg1, TMP)
                TMP = Arg2
            }

            Method (STDW, 3, NotSerialized)
            {
                CreateDWordField (Arg0, Arg1, TMP)
                TMP = Arg2
            }

            Method (CLBY, 1, NotSerialized)
            {
                Local0 = Zero
                While ((Local0 < SizeOf (Arg0)))
                {
                    STBY (Arg0, Local0, Zero)
                    Local0++
                }
            }

            Name (_WDG, Buffer (0x8C)
            {
                /* 0000 */  0xBC, 0xDC, 0x9D, 0x8D, 0x97, 0xA9, 0xDA, 0x11,  // ........
                /* 0008 */  0xB0, 0x12, 0xB6, 0x22, 0xA1, 0xEF, 0x54, 0x92,  // ..."..T.
                /* 0010 */  0x41, 0x41, 0x01, 0x00, 0xCE, 0x93, 0x05, 0xA8,  // AA......
                /* 0018 */  0x97, 0xA9, 0xDA, 0x11, 0xB0, 0x12, 0xB6, 0x22,  // ......."
                /* 0020 */  0xA1, 0xEF, 0x54, 0x92, 0x42, 0x41, 0x01, 0x02,  // ..T.BA..
                /* 0028 */  0x70, 0x76, 0x8C, 0xDD, 0xB5, 0x1C, 0xDB, 0x11,  // pv......
                /* 0030 */  0xA9, 0x8B, 0x66, 0x9A, 0x0C, 0x20, 0x00, 0x08,  // ..f.. ..
                /* 0038 */  0x42, 0x43, 0x01, 0x02, 0x94, 0x59, 0xBB, 0x9D,  // BC...Y..
                /* 0040 */  0x97, 0xA9, 0xDA, 0x11, 0xB0, 0x12, 0xB6, 0x22,  // ......."
                /* 0048 */  0xA1, 0xEF, 0x54, 0x92, 0xD0, 0x00, 0x01, 0x08,  // ..T.....
                /* 0050 */  0xE0, 0x6C, 0x77, 0xA3, 0x88, 0x1E, 0xDB, 0x11,  // .lw.....
                /* 0058 */  0xA9, 0x8B, 0x08, 0x00, 0x20, 0x0C, 0x9A, 0x66,  // .... ..f
                /* 0060 */  0x42, 0x43, 0x01, 0x00, 0x21, 0x12, 0x90, 0x05,  // BC..!...
                /* 0068 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0070 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x4F, 0x01, 0x00,  // ..).MO..
                /* 0078 */  0x28, 0x07, 0xBD, 0x77, 0x34, 0x2E, 0x8C, 0x47,  // (..w4..G
                /* 0080 */  0xB6, 0x25, 0x67, 0xF0, 0x2A, 0x7E, 0x48, 0x97,  // .%g.*~H.
                /* 0088 */  0x42, 0x44, 0x01, 0x02                           // BD..
            })
            Name (INFO, Buffer (0x80){})
            CreateWordField (INFO, Zero, INF0)
            CreateWordField (INFO, 0x02, INF1)
            CreateWordField (INFO, 0x04, INF2)
            CreateWordField (INFO, 0x06, INF3)
            CreateWordField (INFO, 0x08, INF4)
            CreateWordField (INFO, 0x0A, INF5)
            CreateWordField (INFO, 0x0C, INF6)
            CreateWordField (INFO, 0x0E, INF7)
            Name (ECD0, Zero)
            Method (WED0, 1, NotSerialized)
            {
                ECD0 = Arg0
                Return (Arg0)
            }

            Method (WCAA, 1, NotSerialized)
            {
                Return (Arg0)
            }

            Method (WQAA, 1, NotSerialized)
            {
                Acquire (WMIX, 0xFFFF)
                CLBY (INFO)
                If ((Arg0 != Zero))
                {
                    Local1 = INFO /* \_SB_.AMW0.INFO */
                }
                Else
                {
                    STDW (INFO, Zero, 0x4C4C4544)
                    STDW (INFO, 0x04, 0x494D5720)
                    STDW (INFO, 0x08, Zero)
                    STDW (INFO, 0x0C, 0x1000)
                    Local1 = INFO /* \_SB_.AMW0.INFO */
                }

                Release (WMIX)
                Return (Local1)
            }

            Method (WSAA, 2, NotSerialized)
            {
                Return (Arg1)
            }

            Method (WMI, 2, NotSerialized)
            {
                Return (AMWM (Arg0, Arg1))
            }

            Method (WMBA, 3, NotSerialized)
            {
                CreateDWordField (Arg2, 0x28, WBUF)
                Local1 = (WBUF + 0x2C)
                If ((Local1 <= 0x1000))
                {
                    Local0 = WMI (Arg2, Local1)
                }

                Return (Local0)
            }

            Method (WMBC, 3, NotSerialized)
            {
                Return (Arg2)
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xD0))
                {
                    Return (INFO) /* \_SB_.AMW0.INFO */
                }

                CLBY (INFO)
                INFO = Arg0
                Return (INFO) /* \_SB_.AMW0.INFO */
            }

            Name (WQMO, Buffer (0x0789)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x79, 0x07, 0x00, 0x00, 0x70, 0x2C, 0x00, 0x00,  // y...p,..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0xD5, 0x95, 0x00, 0x01, 0x06, 0x18, 0x42,  // (......B
                /* 0020 */  0x10, 0x13, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,  // ..."!...
                /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,  // ..,...8.
                /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,  // ..@H..J.
                /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,  // ........
                /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,  // ...`P.S.
                /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,  // ..*.....
                /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,  // ,.......
                /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,  // ......(1
                /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,  // .(......
                /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,  // P.. J...
                /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,  // .F.x..$O
                /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,  // @....`].
                /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,  // .!P.C@..
                /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,  // .j..N@..
                /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,  // N.I..X..
                /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,  // k.M.I.1.
                /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0x40, 0x0A, 0x40,  // x\.A.@.@
                /* 00A8 */  0x58, 0x78, 0x08, 0x45, 0x80, 0x41, 0x49, 0x18,  // Xx.E.AI.
                /* 00B0 */  0x0B, 0x75, 0x31, 0x6A, 0xD4, 0x48, 0xD9, 0x80,  // .u1j.H..
                /* 00B8 */  0x0C, 0x51, 0xDA, 0xA8, 0xD1, 0x03, 0x3A, 0xBF,  // .Q....:.
                /* 00C0 */  0x23, 0x39, 0xBB, 0xA3, 0x3B, 0x92, 0x04, 0x46,  // #9..;..F
                /* 00C8 */  0x3D, 0xA6, 0x63, 0x2C, 0x6C, 0x46, 0x42, 0x8D,  // =.c,lFB.
                /* 00D0 */  0xD1, 0x1C, 0x14, 0x81, 0xC6, 0x0D, 0xDA, 0x12,  // ........
                /* 00D8 */  0x61, 0x35, 0xAE, 0xD8, 0x67, 0x66, 0xE1, 0xC3,  // a5..gf..
                /* 00E0 */  0x12, 0xC6, 0x11, 0x1C, 0x58, 0x82, 0x46, 0xD1,  // ....X.F.
                /* 00E8 */  0x34, 0xC7, 0xB3, 0x0D, 0x91, 0xE0, 0x20, 0x42,  // 4..... B
                /* 00F0 */  0x63, 0x64, 0x40, 0xC8, 0xF3, 0xB0, 0x05, 0x7A,  // cd@....z
                /* 00F8 */  0xE4, 0x09, 0xEC, 0x1E, 0x51, 0x0A, 0x11, 0x34,  // ....Q..4
                /* 0100 */  0xDF, 0x13, 0xA9, 0x51, 0x80, 0x36, 0x0C, 0xD9,  // ...Q.6..
                /* 0108 */  0x3A, 0x1B, 0x68, 0xA8, 0xB1, 0x1A, 0x43, 0x11,  // :.h...C.
                /* 0110 */  0x44, 0x84, 0xA0, 0x51, 0x0C, 0x16, 0x21, 0x54,  // D..Q..!T
                /* 0118 */  0x88, 0xFF, 0x7F, 0x94, 0xA8, 0xA7, 0x14, 0x24,  // .......$
                /* 0120 */  0x6A, 0x65, 0x20, 0x42, 0x0B, 0x66, 0x04, 0x66,  // je B.f.f
                /* 0128 */  0x7F, 0x10, 0x24, 0xC6, 0x99, 0x41, 0x87, 0x05,  // ..$..A..
                /* 0130 */  0xCB, 0x00, 0x91, 0x11, 0x41, 0xA3, 0x61, 0x67,  // ....A.ag
                /* 0138 */  0x01, 0x0F, 0xC7, 0x33, 0x69, 0x7E, 0x62, 0x1A,  // ...3i~b.
                /* 0140 */  0x9C, 0x09, 0xC6, 0x86, 0x90, 0x06, 0x08, 0x89,  // ........
                /* 0148 */  0x3A, 0x38, 0x50, 0x02, 0x4B, 0x19, 0x38, 0xB1,  // :8P.K.8.
                /* 0150 */  0x3D, 0x2E, 0x8D, 0xEF, 0x8C, 0xA3, 0x86, 0x38,  // =......8
                /* 0158 */  0xF5, 0x33, 0xF3, 0x3F, 0xC2, 0x5B, 0xF0, 0x11,  // .3.?.[..
                /* 0160 */  0x80, 0x8F, 0xC1, 0x83, 0x3D, 0x84, 0x80, 0x47,  // ....=..G
                /* 0168 */  0xC8, 0xCE, 0x00, 0x06, 0xC4, 0x7B, 0x9F, 0x34,  // .....{.4
                /* 0170 */  0x99, 0x8B, 0xCF, 0x02, 0x30, 0x86, 0x0F, 0xD7,  // ....0...
                /* 0178 */  0xF8, 0x28, 0x34, 0x1E, 0x76, 0x3E, 0x60, 0xE3,  // .(4.v>`.
                /* 0180 */  0xE2, 0xF0, 0x3E, 0x14, 0x9C, 0x70, 0xB1, 0x20,  // ..>..p. 
                /* 0188 */  0x0A, 0x00, 0x21, 0x59, 0xE7, 0x03, 0xF4, 0xAC,  // ..!Y....
                /* 0190 */  0x8F, 0x2D, 0xE0, 0xC3, 0x40, 0xB3, 0x77, 0x08,  // .-..@.w.
                /* 0198 */  0x42, 0xF0, 0x22, 0xE0, 0xA3, 0x83, 0x8F, 0x1B,  // B.".....
                /* 01A0 */  0x1E, 0xF7, 0xF3, 0x06, 0x18, 0x0E, 0x07, 0x1E,  // ........
                /* 01A8 */  0x8E, 0x4F, 0x1B, 0xC0, 0x65, 0x04, 0x5C, 0xDA,  // .O..e.\.
                /* 01B0 */  0x93, 0xC2, 0x04, 0x92, 0xFC, 0x04, 0x90, 0x18,  // ........
                /* 01B8 */  0x18, 0xD4, 0x81, 0xC0, 0x07, 0x0B, 0xB8, 0x92,  // ........
                /* 01C0 */  0xE0, 0x50, 0xC3, 0xF3, 0xC4, 0x1E, 0x10, 0xFE,  // .P......
                /* 01C8 */  0xFF, 0x47, 0x79, 0x22, 0x2F, 0x06, 0x9E, 0xFE,  // .Gy"/...
                /* 01D0 */  0x63, 0x00, 0x8C, 0x03, 0x82, 0xA7, 0x75, 0x52,  // c.....uR
                /* 01D8 */  0xBE, 0x79, 0x3C, 0x48, 0x78, 0x50, 0x61, 0x12,  // .y<HxPa.
                /* 01E0 */  0xF8, 0x94, 0xC0, 0xD0, 0xF8, 0x71, 0x03, 0xAC,  // .....q..
                /* 01E8 */  0xA3, 0xC6, 0x1F, 0x10, 0xE0, 0x9D, 0x24, 0xCE,  // ......$.
                /* 01F0 */  0xAF, 0xCF, 0x01, 0xE8, 0xD0, 0x70, 0x8A, 0x0C,  // .....p..
                /* 01F8 */  0xE4, 0x35, 0xE0, 0xA4, 0x4F, 0xC9, 0xE3, 0x4B,  // .5..O..K
                /* 0200 */  0xE0, 0x33, 0x07, 0xEC, 0xBB, 0xC1, 0x61, 0x1C,  // .3....a.
                /* 0208 */  0x4C, 0x88, 0x08, 0xEF, 0x01, 0x4F, 0x1D, 0xBE,  // L....O..
                /* 0210 */  0x6B, 0x3C, 0x0A, 0x04, 0x8A, 0xD0, 0xDB, 0x99,  // k<......
                /* 0218 */  0x83, 0x9E, 0x42, 0x8C, 0x12, 0xED, 0xAC, 0xC2,  // ..B.....
                /* 0220 */  0x3C, 0x70, 0x44, 0xF1, 0x91, 0xC3, 0x08, 0xEF,  // <pD.....
                /* 0228 */  0x1E, 0xBE, 0x13, 0x3C, 0x80, 0xB4, 0x36, 0x39,  // ...<..69
                /* 0230 */  0xE1, 0x06, 0x7A, 0xE6, 0x60, 0xD1, 0xCE, 0x2C,  // ..z.`..,
                /* 0238 */  0xB2, 0x00, 0xA2, 0x48, 0xA3, 0x41, 0x9D, 0x11,  // ...H.A..
                /* 0240 */  0x7C, 0x1A, 0xF0, 0xB4, 0x9E, 0x62, 0x7C, 0x94,  // |....b|.
                /* 0248 */  0x30, 0xC8, 0x19, 0x1E, 0xD8, 0x73, 0xC2, 0x63,  // 0....s.c
                /* 0250 */  0x80, 0x07, 0xCC, 0xEE, 0x07, 0x3E, 0x4E, 0xF8,  // .....>N.
                /* 0258 */  0x5C, 0x80, 0x77, 0x0D, 0xA8, 0x19, 0xFA, 0xB0,  // \.w.....
                /* 0260 */  0x01, 0xE7, 0xD0, 0x81, 0x3F, 0x4D, 0xE0, 0x0F,  // ....?M..
                /* 0268 */  0x16, 0xF8, 0xF1, 0xF8, 0x9A, 0xC3, 0x26, 0x9C,  // ......&.
                /* 0270 */  0xC0, 0xF2, 0x07, 0x81, 0x1A, 0x99, 0xA1, 0x3D,  // .......=
                /* 0278 */  0xCB, 0xD3, 0x7A, 0x0D, 0xF0, 0x69, 0xC7, 0x04,  // ..z..i..
                /* 0280 */  0x3E, 0x6F, 0xF8, 0xFF, 0xFF, 0xCF, 0xF1, 0x78,  // >o.....x
                /* 0288 */  0xC0, 0xAF, 0xF8, 0x74, 0x41, 0xEE, 0x0A, 0x9E,  // ...tA...
                /* 0290 */  0xAF, 0xCF, 0x2E, 0xCC, 0xC6, 0x78, 0x50, 0xA3,  // .....xP.
                /* 0298 */  0xF0, 0x01, 0x07, 0x77, 0x76, 0xF1, 0x11, 0xC0,  // ...wv...
                /* 02A0 */  0x67, 0x17, 0xE0, 0x39, 0x89, 0x67, 0x09, 0xF0,  // g..9.g..
                /* 02A8 */  0x1E, 0x02, 0x7C, 0x22, 0x89, 0xF7, 0xB0, 0x05,  // ..|"....
                /* 02B0 */  0x63, 0xC4, 0x78, 0xC8, 0x33, 0xAE, 0x7A, 0x18,  // c.x.3.z.
                /* 02B8 */  0xBA, 0x08, 0x58, 0xDD, 0x7D, 0x05, 0x75, 0xF4,  // ..X.}.u.
                /* 02C0 */  0x02, 0x13, 0xD4, 0x6B, 0x06, 0xEE, 0xF4, 0x02,  // ...k....
                /* 02C8 */  0x7C, 0x4E, 0x59, 0xF0, 0xFE, 0xFF, 0xA7, 0x2C,  // |NY....,
                /* 02D0 */  0xE0, 0x7E, 0x55, 0xE0, 0x47, 0x14, 0x30, 0x40,  // .~U.G.0@
                /* 02D8 */  0x76, 0x76, 0x3A, 0x11, 0xC2, 0x7B, 0xC9, 0x73,  // vv:..{.s
                /* 02E0 */  0x88, 0x6F, 0x57, 0x3E, 0x98, 0x04, 0x79, 0x0E,  // .oW>..y.
                /* 02E8 */  0x88, 0xF0, 0x94, 0xC5, 0xEF, 0x03, 0x51, 0x62,  // ......Qb
                /* 02F0 */  0x1E, 0x50, 0xA4, 0x28, 0x46, 0x0C, 0xF2, 0x84,  // .P.(F...
                /* 02F8 */  0xE5, 0xEB, 0x49, 0x0C, 0x43, 0x07, 0x0B, 0x17,  // ..I.C...
                /* 0300 */  0x3E, 0xC2, 0x53, 0x16, 0x60, 0xF1, 0x92, 0x85,  // >.S.`...
                /* 0308 */  0x39, 0x65, 0xC1, 0x7C, 0x1B, 0xF8, 0x94, 0x05,  // 9e.|....
                /* 0310 */  0x8E, 0xFF, 0xFF, 0x29, 0x0B, 0x5C, 0xE3, 0x7E,  // ...).\.~
                /* 0318 */  0xCA, 0x02, 0x66, 0xD2, 0x9F, 0x02, 0x3E, 0xD5,  // ..f...>.
                /* 0320 */  0xF8, 0x09, 0xA0, 0xE8, 0x07, 0x0B, 0x0A, 0xE3,  // ........
                /* 0328 */  0x53, 0x16, 0xE0, 0x4A, 0xDE, 0x01, 0x01, 0x34,  // S..J...4
                /* 0330 */  0x67, 0x27, 0xDF, 0x16, 0x0C, 0x76, 0xCC, 0xBE,  // g'...v..
                /* 0338 */  0x64, 0xF8, 0x94, 0x08, 0x86, 0x43, 0x86, 0xEF,  // d....C..
                /* 0340 */  0x54, 0x87, 0xF2, 0xC8, 0xF1, 0x14, 0xE0, 0x23,  // T......#
                /* 0348 */  0x16, 0xD8, 0xE3, 0x1C, 0x03, 0x74, 0x5C, 0xF1,  // .....t\.
                /* 0350 */  0x11, 0xCB, 0xFF, 0xFF, 0x23, 0x16, 0xC0, 0x8D,  // ....#...
                /* 0358 */  0x03, 0x08, 0xFE, 0xD4, 0x01, 0xEB, 0x1E, 0x10,  // ........
                /* 0360 */  0xD6, 0x87, 0x0E, 0xE0, 0x21, 0xFB, 0x21, 0xA0,  // ....!.!.
                /* 0368 */  0x33, 0x8C, 0x25, 0x83, 0xC8, 0xC6, 0xB9, 0x86,  // 3.%.....
                /* 0370 */  0x8E, 0xD1, 0xE2, 0x17, 0xAA, 0x9B, 0x42, 0xEC,  // ......B.
                /* 0378 */  0x83, 0xE1, 0xB2, 0x81, 0x04, 0xEA, 0xE1, 0x5A,  // .......Z
                /* 0380 */  0x30, 0x85, 0x44, 0xD1, 0x68, 0x34, 0x06, 0x26,  // 0.D.h4.&
                /* 0388 */  0x30, 0x82, 0x33, 0x88, 0x01, 0x9D, 0x11, 0x42,  // 0.3....B
                /* 0390 */  0x87, 0x32, 0x9C, 0x8A, 0xF3, 0x10, 0xEA, 0xFF,  // .2......
                /* 0398 */  0x4F, 0x30, 0xD4, 0x8D, 0x89, 0xCE, 0xCE, 0xF3,  // O0......
                /* 03A0 */  0xE7, 0xB7, 0x11, 0x9F, 0x08, 0x0C, 0xEC, 0x2B,  // .......+
                /* 03A8 */  0xC4, 0x5B, 0x06, 0x58, 0x86, 0xE5, 0xC5, 0x3D,  // .[.X...=
                /* 03B0 */  0x01, 0x1C, 0xE3, 0x49, 0x26, 0xA8, 0xE6, 0x58,  // ...I&..X
                /* 03B8 */  0x83, 0x9A, 0x83, 0xAF, 0x02, 0x6F, 0x64, 0x26,  // .....od&
                /* 03C0 */  0xF0, 0x15, 0x0C, 0x6C, 0xA7, 0x19, 0x8C, 0xBE,  // ...l....
                /* 03C8 */  0x3B, 0x01, 0x28, 0x80, 0x7C, 0x14, 0xF0, 0x7D,  // ;.(.|..}
                /* 03D0 */  0xF9, 0x6D, 0x80, 0xCD, 0xE2, 0x95, 0xD9, 0x68,  // .m.....h
                /* 03D8 */  0x3E, 0x7F, 0x22, 0x86, 0x8E, 0x12, 0x33, 0x74,  // >."...3t
                /* 03E0 */  0x0A, 0xE2, 0xA1, 0x3B, 0xE8, 0xD0, 0xD1, 0xC7,  // ...;....
                /* 03E8 */  0x01, 0x9F, 0xAC, 0x70, 0xC1, 0x0E, 0x5F, 0xD0,  // ...p.._.
                /* 03F0 */  0x26, 0x77, 0xB4, 0x27, 0xE6, 0x59, 0x78, 0x9E,  // &w.'.Yx.
                /* 03F8 */  0xB8, 0xB9, 0x83, 0xE9, 0x88, 0x04, 0x63, 0xF0,  // ......c.
                /* 0400 */  0x98, 0xC9, 0x83, 0x59, 0xE0, 0xE4, 0x41, 0xF1,  // ...Y..A.
                /* 0408 */  0xFF, 0x9F, 0x3C, 0x4C, 0x78, 0x4C, 0xD8, 0xC3,  // ..<LxL..
                /* 0410 */  0x21, 0x3D, 0x74, 0x78, 0x64, 0x7C, 0x9C, 0x3E,  // !=txd|.>
                /* 0418 */  0xFD, 0x30, 0xEC, 0xD3, 0x39, 0x97, 0xA2, 0x67,  // .0..9..g
                /* 0420 */  0xA4, 0x3B, 0xC6, 0x33, 0x17, 0x06, 0xD6, 0x23,  // .;.3...#
                /* 0428 */  0xE7, 0xB0, 0x46, 0x0B, 0x7B, 0xC0, 0xCF, 0x21,  // ..F.{..!
                /* 0430 */  0xBE, 0xC3, 0xF8, 0xC0, 0xC3, 0x60, 0x7D, 0x7A,  // .....`}z
                /* 0438 */  0x01, 0xC7, 0xF1, 0x0B, 0xFE, 0x69, 0x00, 0x3C,  // .....i.<
                /* 0440 */  0x07, 0x10, 0x8F, 0xE1, 0x05, 0x84, 0x13, 0x14,  // ........
                /* 0448 */  0x7D, 0xFE, 0xA5, 0x42, 0x17, 0x27, 0x99, 0x30,  // }..B.'.0
                /* 0450 */  0xA8, 0xD3, 0x14, 0xE0, 0xEA, 0xF4, 0x06, 0x9E,  // ........
                /* 0458 */  0xAB, 0x3E, 0xEE, 0x2C, 0x85, 0xFB, 0xFF, 0x9F,  // .>.,....
                /* 0460 */  0xA5, 0x60, 0x1C, 0x7E, 0x7D, 0x81, 0xF7, 0x5D,  // .`.~}..]
                /* 0468 */  0xCA, 0x08, 0x07, 0xF2, 0x2C, 0x05, 0xF6, 0xF8,  // ....,...
                /* 0470 */  0xCF, 0x10, 0x1D, 0x02, 0x7C, 0x96, 0x02, 0xF8,  // ....|...
                /* 0478 */  0x21, 0xE4, 0x4C, 0x09, 0xE5, 0x3C, 0x83, 0x0B,  // !.L..<..
                /* 0480 */  0x7E, 0xA6, 0x04, 0x5A, 0xFF, 0xFF, 0x53, 0x08,  // ~..Z..S.
                /* 0488 */  0xF8, 0x8F, 0x11, 0x3E, 0xE2, 0xC0, 0x3D, 0x54,  // ...>..=T
                /* 0490 */  0xF2, 0x00, 0x87, 0x30, 0x28, 0x87, 0x4A, 0xB8,  // ...0(.J.
                /* 0498 */  0xC7, 0x5F, 0x70, 0x1C, 0x8E, 0xF9, 0x39, 0x03,  // ._p...9.
                /* 04A0 */  0x77, 0x24, 0x03, 0x1E, 0xA7, 0x67, 0xDC, 0x28,  // w$...g.(
                /* 04A8 */  0x3D, 0x04, 0x3E, 0x80, 0x56, 0xE7, 0x46, 0x4E,  // =.>.V.FN
                /* 04B0 */  0x3E, 0xA7, 0x84, 0x3B, 0x12, 0xF0, 0x29, 0xE1,  // >..;..).
                /* 04B8 */  0x06, 0x80, 0x09, 0x70, 0xCE, 0x04, 0xD4, 0xFC,  // ...p....
                /* 04C0 */  0xFF, 0xCF, 0x99, 0x80, 0x01, 0x90, 0x08, 0xEF,  // ........
                /* 04C8 */  0x0A, 0x51, 0xDF, 0x93, 0x0D, 0xF1, 0x9C, 0xCC,  // .Q......
                /* 04D0 */  0x70, 0x5E, 0x22, 0x1E, 0x61, 0x9E, 0x93, 0xC1,  // p^".a...
                /* 04D8 */  0x79, 0xCE, 0x04, 0xF8, 0xF2, 0xFF, 0x3F, 0xD6,  // y.....?.
                /* 04E0 */  0xC3, 0xBE, 0x29, 0x04, 0x7F, 0x0A, 0x01, 0x26,  // ..)....&
                /* 04E8 */  0xE2, 0xCF, 0x99, 0x54, 0xF8, 0x39, 0x13, 0xDA,  // ...T.9..
                /* 04F0 */  0x5C, 0x3C, 0x6D, 0x9F, 0x33, 0x01, 0xAE, 0xFD,  // \<m.3...
                /* 04F8 */  0xFF, 0xCF, 0x99, 0x80, 0xFF, 0xC8, 0xE7, 0x4C,  // .......L
                /* 0500 */  0x40, 0xCF, 0x91, 0x0A, 0x77, 0xCE, 0x04, 0xC3,  // @...w...
                /* 0508 */  0x38, 0xDF, 0x9F, 0x0C, 0xF2, 0x3C, 0xE2, 0x03,  // 8....<..
                /* 0510 */  0x81, 0x8F, 0x32, 0x2C, 0xC6, 0x39, 0x93, 0x9E,  // ..2,.9..
                /* 0518 */  0x7B, 0x2C, 0x1C, 0x06, 0x75, 0xBE, 0xF0, 0xFF,  // {,..u...
                /* 0520 */  0xFF, 0x40, 0x05, 0x78, 0x3A, 0xC0, 0x79, 0xC8,  // .@.x:.y.
                /* 0528 */  0xE0, 0x38, 0x30, 0x9C, 0xC1, 0x29, 0x44, 0x8B,  // .80..)D.
                /* 0530 */  0x70, 0xC6, 0x07, 0x1C, 0xE3, 0x95, 0xC0, 0x28,  // p......(
                /* 0538 */  0x01, 0xCF, 0xDB, 0x10, 0x51, 0x8F, 0xCA, 0x17,  // ....Q...
                /* 0540 */  0x08, 0x83, 0x04, 0x7A, 0x37, 0xF0, 0x3D, 0x81,  // ...z7.=.
                /* 0548 */  0x03, 0x7B, 0x02, 0xC6, 0x88, 0x17, 0x22, 0xE8,  // .{....".
                /* 0550 */  0xF3, 0x95, 0xCF, 0x4B, 0x31, 0x5E, 0x00, 0x8E,  // ...K1^..
                /* 0558 */  0x8A, 0x9D, 0xB0, 0x60, 0x1F, 0x24, 0x5E, 0x3E,  // ...`.$^>
                /* 0560 */  0x3D, 0x9E, 0x73, 0x7B, 0xDE, 0x78, 0x8A, 0x09,  // =.s{.x..
                /* 0568 */  0xF2, 0x66, 0xF5, 0x98, 0xF1, 0x2C, 0xF1, 0xD2,  // .f...,..
                /* 0570 */  0xE9, 0x13, 0x16, 0x47, 0xF1, 0xE1, 0xCA, 0x50,  // ...G...P
                /* 0578 */  0x2F, 0x5A, 0x46, 0x3C, 0xCB, 0x20, 0x8F, 0x9F,  // /ZF<. ..
                /* 0580 */  0x06, 0x89, 0x16, 0xCC, 0x08, 0xEC, 0x84, 0xC5,  // ........
                /* 0588 */  0xA2, 0x3E, 0x4E, 0x74, 0xAA, 0xF0, 0x09, 0x0B,  // .>Nt....
                /* 0590 */  0x38, 0xFE, 0xFF, 0x4F, 0x58, 0x80, 0x3B, 0x39,  // 8..OX.;9
                /* 0598 */  0xA7, 0x4F, 0x28, 0xB8, 0x6F, 0x24, 0x3E, 0x20,  // .O(.o$> 
                /* 05A0 */  0x3C, 0xCF, 0x92, 0xD3, 0x27, 0xD0, 0x3D, 0x9B,  // <...'.=.
                /* 05A8 */  0x80, 0x67, 0x64, 0x4F, 0x13, 0x8F, 0x14, 0x9E,  // .gdO....
                /* 05B0 */  0xD1, 0xD3, 0x86, 0x67, 0xF1, 0x0E, 0xE0, 0xAB,  // ...g....
                /* 05B8 */  0x4F, 0xB8, 0x07, 0x50, 0xB8, 0x83, 0xF6, 0x01,  // O..P....
                /* 05C0 */  0x14, 0x5C, 0xA7, 0x33, 0xDC, 0x41, 0x0D, 0x26,  // .\.3.A.&
                /* 05C8 */  0xFE, 0xFF, 0xFF, 0x04, 0x42, 0x1D, 0x14, 0xD6,  // ....B...
                /* 05D0 */  0xE8, 0x10, 0x84, 0xE3, 0xCB, 0x83, 0xCF, 0x6B,  // .......k
                /* 05D8 */  0xC0, 0xE4, 0x30, 0x84, 0x78, 0x98, 0xF9, 0x40,  // ..0.x..@
                /* 05E0 */  0x43, 0xC5, 0x2E, 0x95, 0x9E, 0x69, 0x00, 0x6E,  // C....i.n
                /* 05E8 */  0x8D, 0xEB, 0x99, 0x06, 0xF6, 0xFF, 0xFF, 0x4C,  // .......L
                /* 05F0 */  0x03, 0x3F, 0xDE, 0x21, 0x14, 0xA0, 0xC9, 0xF1,  // .?.!....
                /* 05F8 */  0xE1, 0x61, 0x04, 0x4C, 0xC7, 0x82, 0xD0, 0x46,  // .a.L...F
                /* 0600 */  0x7A, 0x61, 0xF0, 0xA9, 0xC1, 0x90, 0xEF, 0x0A,  // za......
                /* 0608 */  0x1E, 0xA3, 0x27, 0xE1, 0xC3, 0x28, 0x50, 0xF1,  // ..'..(P.
                /* 0610 */  0x30, 0x56, 0x96, 0xED, 0x30, 0x8A, 0x3A, 0x14,  // 0V..0.:.
                /* 0618 */  0x38, 0x0F, 0x95, 0x6E, 0xD8, 0x0F, 0x15, 0xC6,  // 8..n....
                /* 0620 */  0xFF, 0xFF, 0x1F, 0xC3, 0xE3, 0x84, 0xC7, 0x70,  // .......p
                /* 0628 */  0x12, 0x91, 0x0E, 0x8B, 0x11, 0x4C, 0x70, 0x20,  // .....Lp 
                /* 0630 */  0x45, 0x69, 0xA7, 0x90, 0xB2, 0x63, 0x24, 0x4A,  // Ei...c$J
                /* 0638 */  0xCB, 0x31, 0x92, 0x82, 0xF8, 0x18, 0xC9, 0x95,  // .1......
                /* 0640 */  0x9C, 0x06, 0x50, 0x3A, 0x8E, 0x3D, 0x64, 0x9C,  // ..P:.=d.
                /* 0648 */  0x18, 0x82, 0xB9, 0x4E, 0xA4, 0xD0, 0x67, 0xF3,  // ...N..g.
                /* 0650 */  0x16, 0x09, 0x9E, 0x79, 0xF9, 0x70, 0x71, 0x1C,  // ...y.pq.
                /* 0658 */  0x98, 0x4D, 0xBE, 0x60, 0x62, 0x4E, 0xA5, 0x30,  // .M.`bN.0
                /* 0660 */  0x75, 0xDD, 0x7E, 0x40, 0x73, 0xDE, 0x78, 0x67,  // u.~@s.xg
                /* 0668 */  0xF5, 0x95, 0x14, 0x58, 0x08, 0x9C, 0x3C, 0x4A,  // ...X..<J
                /* 0670 */  0xD2, 0xE4, 0x29, 0x88, 0x27, 0xEF, 0xB8, 0x93,  // ..).'...
                /* 0678 */  0x47, 0xCF, 0xC4, 0x93, 0xC7, 0x12, 0x0C, 0x77,  // G......w
                /* 0680 */  0x27, 0x05, 0xC5, 0xCD, 0x01, 0x3F, 0x7C, 0xB0,  // '....?|.
                /* 0688 */  0xFE, 0xFF, 0xEF, 0xA5, 0xB0, 0x6F, 0x1C, 0xF0,  // .....o..
                /* 0690 */  0xC7, 0x8F, 0xBD, 0x95, 0x02, 0x13, 0x09, 0x63,  // .......c
                /* 0698 */  0xD7, 0xAD, 0x14, 0x70, 0x83, 0xEA, 0xF3, 0x00,  // ...p....
                /* 06A0 */  0x38, 0xEE, 0x21, 0xEC, 0xB4, 0xE4, 0x8B, 0x98,  // 8.!.....
                /* 06A8 */  0x41, 0x22, 0xBE, 0xAA, 0xB0, 0x41, 0xB1, 0xA3,  // A"...A..
                /* 06B0 */  0x12, 0x3B, 0x9D, 0x3C, 0x2A, 0xC1, 0x4A, 0x77,  // .;.<*.Jw
                /* 06B8 */  0x3B, 0x41, 0x8D, 0xC4, 0x69, 0xDE, 0x0F, 0x9A,  // ;A..i...
                /* 06C0 */  0xFA, 0x2B, 0xC0, 0xCB, 0x09, 0xB0, 0xF9, 0xFF,  // .+......
                /* 06C8 */  0x5F, 0x4E, 0x00, 0xFE, 0xFF, 0xFF, 0x2F, 0x27,  // _N..../'
                /* 06D0 */  0xC0, 0x43, 0xC6, 0xE5, 0x04, 0x74, 0xC7, 0x00,  // .C...t..
                /* 06D8 */  0x5F, 0x4E, 0x80, 0xEB, 0xE9, 0x0F, 0x77, 0x1E,  // _N....w.
                /* 06E0 */  0x80, 0x3B, 0xCC, 0x53, 0xF3, 0xCC, 0x83, 0x3D,  // .;.S...=
                /* 06E8 */  0x10, 0xFA, 0x78, 0x02, 0x4E, 0x82, 0x0A, 0x6D,  // ..x.N..m
                /* 06F0 */  0xFA, 0xD4, 0x68, 0xD4, 0xAA, 0x41, 0x99, 0x1A,  // ..h..A..
                /* 06F8 */  0x65, 0x1A, 0xD4, 0xEA, 0x53, 0xA9, 0x31, 0x63,  // e...S.1c
                /* 0700 */  0x86, 0xC6, 0xE3, 0x55, 0x6B, 0xD8, 0x0E, 0xB5,  // ...Uk...
                /* 0708 */  0x72, 0x81, 0x58, 0xD2, 0x67, 0x43, 0x20, 0x16,  // r.X.gC .
                /* 0710 */  0x75, 0x32, 0x13, 0x88, 0xE3, 0x9A, 0x00, 0x61,  // u2.....a
                /* 0718 */  0xC2, 0xD7, 0x27, 0x10, 0xC7, 0x06, 0xA1, 0x62,  // ..'....b
                /* 0720 */  0xFF, 0x25, 0x32, 0x32, 0x58, 0x83, 0x08, 0xC8,  // .%22X...
                /* 0728 */  0x21, 0x7C, 0x00, 0xB1, 0x48, 0x20, 0x02, 0x27,  // !|..H .'
                /* 0730 */  0xCF, 0x0A, 0x81, 0x12, 0x27, 0x20, 0x4C, 0xF6,  // ....' L.
                /* 0738 */  0x73, 0x53, 0x20, 0x96, 0xE9, 0x05, 0x84, 0x85,  // sS .....
                /* 0740 */  0x04, 0xA1, 0xD2, 0xCC, 0x80, 0x33, 0x9D, 0x20,  // .....3. 
                /* 0748 */  0x02, 0xB2, 0xE4, 0xFF, 0x88, 0x80, 0xFC, 0xFF,  // ........
                /* 0750 */  0x0F, 0x00, 0x22, 0x20, 0x0B, 0xD1, 0x03, 0xC2,  // .." ....
                /* 0758 */  0x62, 0x80, 0xD0, 0x58, 0x7E, 0x40, 0x58, 0x1C,  // b..X~@X.
                /* 0760 */  0x45, 0x20, 0x4C, 0x8C, 0xA3, 0x41, 0xD0, 0x27,  // E L..A.'
                /* 0768 */  0xA9, 0xC0, 0x9D, 0x18, 0x44, 0x40, 0x56, 0xA0,  // ....D@V.
                /* 0770 */  0x09, 0x88, 0xE9, 0x01, 0x11, 0x90, 0xD5, 0xBF,  // ........
                /* 0778 */  0x85, 0x05, 0xE4, 0x28, 0x20, 0x02, 0x72, 0x34,  // ...( .r4
                /* 0780 */  0x53, 0x40, 0x2C, 0x28, 0x88, 0x80, 0xFC, 0xFF,  // S@,(....
                /* 0788 */  0x07                                             // .
            })
        }

        Mutex (PSMX, 0x02)
        Method (AMWM, 2, NotSerialized)
        {
            Acquire (PSMX, 0xFFFF)
            WCMD = "QSET"
            WDID = Arg1
            WBUF = Arg0
            SMIC = WSMI /* \WSMI */
            Name (RETB, Buffer (0x1000){})
            RETB = WBUF /* \WBUF */
            Release (PSMX)
            Return (RETB) /* \_SB_.AMWM.RETB */
        }

        Method (FOWM, 2, NotSerialized)
        {
            Acquire (PSMX, 0xFFFF)
            WCMD = "QSED"
            WCCL = Arg0
            WCSE = Arg1
            SMIC = WSMI /* \WSMI */
            Name (RETB, Buffer (0x1000){})
            RETB = WBUF /* \WBUF */
            Release (PSMX)
            Return (RETB) /* \_SB_.FOWM.RETB */
        }
    }

    Scope (_SB.PCI0)
    {
        Device (A_CC)
        {
            Name (XYZD, Zero)
            Name (_HID, "KIOX0095")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (XYZD)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Name (BUF2, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Edge, ActiveHigh, Exclusive, ,, )
                {
                    0x00000017,
                }
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Return (BUF2) /* \_SB_.PCI0.A_CC.BUF2 */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                Return (BUF2) /* \_SB_.PCI0.A_CC.BUF2 */
            }
        }
    }

    Scope (\)
    {
        OperationRegion (COMP, SystemMemory, 0x5BD26818, 0x0200)
        Field (COMP, AnyAcc, Lock, Preserve)
        {
            RSR0,   32, 
            BDDD,   8, 
            CPFB,   8, 
            PBTI,   8, 
            BRLV,   8, 
            CAVR,   8, 
            TJMA,   16, 
            CORE,   8, 
            TPDF,   8, 
            TPLF,   8, 
            TPDD,   8, 
            TMUD,   8, 
            CTUR,   8, 
            CG17,   8, 
            CG18,   8, 
            CG19,   8, 
            CG20,   8, 
            CG21,   8, 
            CG22,   8, 
            CG23,   8, 
            CG24,   8, 
            CG25,   8, 
            CG26,   8, 
            CG27,   8, 
            CG28,   8, 
            CG29,   8, 
            CG30,   8, 
            CG31,   8, 
            SFNO,   16, 
            STDT,   16, 
            BFDT,   1024, 
            ESMS,   8, 
            ESMB,   256, 
            PLSZ,   8, 
            PNVD,   8, 
            GSYC,   8, 
            PROC,   8, 
            RSR1,   440, 
            EFD1,   80, 
            PLFW,   16, 
            EFD2,   928, 
            DMR0,   32, 
            DMR1,   32, 
            DMR2,   32, 
            DMRR,   32, 
            DOMS,   8, 
            THMP,   8, 
            MFGM,   8, 
            OCSS,   8, 
            OCBS,   8, 
            RSR2,   856
        }

        Mutex (CFMX, 0x00)
        Scope (_SB)
        {
            OperationRegion (SMIO, SystemIO, 0xB2, 0x02)
            Field (SMIO, ByteAcc, NoLock, Preserve)
            {
                SMIC,   8, 
                SMID,   8
            }

            Method (CSMI, 2, NotSerialized)
            {
                Acquire (CFMX, 0xFFFF)
                SMID = Arg1
                SMIC = Arg0
                Release (CFMX)
            }
        }

        Scope (_SB.PCI0.LPCB.RTC)
        {
            OperationRegion (RCM0, SystemCMOS, Zero, 0x10)
            Field (RCM0, ByteAcc, NoLock, Preserve)
            {
                AccessAs (ByteAcc, 0x00), 
                RTCS,   8, 
                Offset (0x02), 
                RTCM,   8, 
                Offset (0x04), 
                RTCH,   8, 
                Offset (0x06), 
                RTCW,   8, 
                RTCD,   8
            }
        }

        Scope (_SB)
        {
            Device (PWRB)
            {
                Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                Method (PKG2, 2, Serialized)
                {
                    Name (PKG, Package (0x02)
                    {
                        Zero, 
                        Zero
                    })
                    PKG [Zero] = Arg0
                    PKG [One] = Arg1
                    Return (PKG) /* \_SB_.PWRB.PKG2.PKG_ */
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Name (GPEB, Zero)
                    GPEB = GGPE (0x030B0003)
                    Return (PKG2 (GPEB, 0x04))
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Method (ECOK, 0, NotSerialized)
        {
            If ((^EC0.OKEC == One))
            {
                Return (One)
            }
            Else
            {
                Return (Zero)
            }
        }

        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_GPE, 0x14)  // _GPE: General Purpose Events
            Name (OKEC, One)
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
            })
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    OKEC = Arg1
                    OSTP ()
                    ECFG (One)
                }
            }

            OperationRegion (ECMM, SystemMemory, 0xFC7E0800, 0x1000)
            Field (ECMM, AnyAcc, Lock, Preserve)
            {
                Offset (0x0B), 
                    ,   5, 
                CLED,   1, 
                Offset (0x0E), 
                    ,   2, 
                DKIN,   1, 
                DOUT,   1, 
                Offset (0x17), 
                FWT1,   8, 
                FWT2,   8, 
                TSSR,   8, 
                CPUP,   8, 
                PCHP,   8, 
                GPTP,   8, 
                CVRP,   8, 
                GVRP,   8, 
                MEMP,   8, 
                Offset (0x2B), 
                OSDW,   8, 
                Offset (0x3E), 
                GPSR,   1, 
                Offset (0x5D), 
                ERIB,   16, 
                Offset (0x61), 
                SMST,   8, 
                SMAD,   8, 
                SMCM,   8, 
                SMD0,   256, 
                BCNT,   8, 
                SMAA,   24, 
                SMBN,   8, 
                Offset (0xA0), 
                Offset (0xA1), 
                    ,   1, 
                VIDO,   1, 
                TOUP,   1, 
                Offset (0xA2), 
                ODTS,   8, 
                OSTY,   4, 
                    ,   2, 
                ECRD,   1, 
                ADPT,   1, 
                PWAK,   1, 
                MWAK,   1, 
                LWAK,   1, 
                RWAK,   1, 
                WWAK,   1, 
                UWAK,   1, 
                KWAK,   1, 
                TPWK,   1, 
                CCAC,   1, 
                AOAC,   1, 
                BLAC,   1, 
                PSRC,   1, 
                BOAC,   1, 
                LCAC,   1, 
                AAAC,   1, 
                ACAC,   1, 
                S3ST,   1, 
                S3RM,   1, 
                S4ST,   1, 
                S4RM,   1, 
                S5ST,   1, 
                S5RM,   1, 
                CSST,   1, 
                CSRM,   1, 
                OSTT,   8, 
                OSST,   8, 
                THLT,   8, 
                TCNL,   8, 
                MODE,   1, 
                    ,   2, 
                INIT,   1, 
                FAN1,   1, 
                FAN2,   1, 
                FANT,   1, 
                SKNM,   1, 
                SDTM,   8, 
                FSSN,   4, 
                FANU,   4, 
                PCVL,   6, 
                SWTO,   1, 
                TTHR,   1, 
                TTHM,   1, 
                THTL,   1, 
                TFCT,   1, 
                NPST,   5, 
                CTMP,   8, 
                CTML,   8, 
                MEMT,   8, 
                SKTB,   8, 
                SKTC,   8, 
                DPOT,   8, 
                CVRT,   8, 
                GVRT,   8, 
                    ,   1, 
                LIDF,   1, 
                PMEE,   1, 
                PWBE,   1, 
                RNGE,   1, 
                BTWE,   1, 
                Offset (0xB9), 
                BRTS,   8, 
                S35M,   1, 
                S35S,   1, 
                    ,   1, 
                MSFG,   1, 
                FFEN,   1, 
                FFST,   1, 
                Offset (0xBB), 
                WLAT,   1, 
                BTAT,   1, 
                WLEX,   1, 
                BTEX,   1, 
                KLSW,   1, 
                WLOK,   1, 
                AT3G,   1, 
                EX3G,   1, 
                PJID,   8, 
                CPUJ,   3, 
                CPNM,   3, 
                GATY,   2, 
                Offset (0xC0), 
                BTY0,   1, 
                BAM0,   1, 
                Offset (0xC1), 
                BST0,   8, 
                BRC0,   16, 
                Offset (0xC6), 
                BPV0,   16, 
                BDV0,   16, 
                BDC0,   16, 
                BFC0,   16, 
                GAU0,   8, 
                BAT0,   8, 
                BPC0,   16, 
                BAC0,   16, 
                BCG0,   16, 
                BFCB,   16, 
                BTPB,   16, 
                BOL0,   1, 
                BFS0,   1, 
                Offset (0xDB), 
                ORRF,   1, 
                Offset (0xDC), 
                Offset (0xDD), 
                Offset (0x104), 
                F1RP,   8, 
                Offset (0x12B), 
                F2RP,   8
            }

            OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
            Field (ERAM, ByteAcc, Lock, Preserve)
            {
                Offset (0x5F), 
                ERBD,   8, 
                SMPR,   8, 
                Offset (0x62)
            }

            OperationRegion (CCLK, SystemIO, 0x1810, 0x04)
            Field (CCLK, DWordAcc, NoLock, Preserve)
            {
                    ,   1, 
                DUTY,   3, 
                THEN,   1, 
                Offset (0x01), 
                FTT,    1, 
                    ,   8, 
                TSTS,   1
            }

            Method (FANG, 1, NotSerialized)
            {
                Local0 = EIDR (Arg0)
                Return (Local0)
            }

            Method (FANW, 2, NotSerialized)
            {
                EIDW (Arg0, Arg1)
                Return (Arg1)
            }

            Method (TUVR, 1, NotSerialized)
            {
                Return (0x05)
            }

            Method (THRO, 1, NotSerialized)
            {
                ITHR (Arg0)
            }

            Method (CLCK, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    THEN = Zero
                    FTT = Zero
                }
                Else
                {
                    DUTY = Arg0
                    THEN = One
                }

                Return (THEN) /* \_SB_.PCI0.LPCB.EC0_.THEN */
            }

            Method (PCLK, 0, NotSerialized)
            {
                IPCL ()
            }

            Method (ITHR, 1, NotSerialized)
            {
                If ((Arg0 == Zero))
                {
                    Return (0xFF)
                }
                ElseIf ((Arg0 == One))
                {
                    Return (DUTY) /* \_SB_.PCI0.LPCB.EC0_.DUTY */
                }
                ElseIf ((Arg0 == 0x02))
                {
                    Return (TTHR) /* \_SB_.PCI0.LPCB.EC0_.TTHR */
                }
                Else
                {
                    Return (0xFF)
                }
            }

            Method (IPCL, 0, NotSerialized)
            {
                Local0 = PCVL /* \_SB_.PCI0.LPCB.EC0_.PCVL */
                CPPC = Local0
                PNOT ()
            }

            Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x62
                ^^^^HIDD.NRBT ()
            }

            Method (_Q45, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x45
                Debug = "=====QUERY_45====="
                Sleep (0x03E8)
                Notify (PEG1, Zero) // Bus Check
                Sleep (0x01F4)
                OSMI (0x80)
                If (CLED)
                {
                    Notify (PEG1, Zero) // Bus Check
                    DKIN = One
                }

                If ((^^^PEG0.VEID == 0x1002))
                {
                    Notify (^^^PEG0.PEGP, 0x81) // Information Change
                }
            }

            Method (_Q46, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x46
                Debug = "=====QUERY_46====="
                Notify (PEG1, Zero) // Bus Check
                CLED = Zero
                DOUT = One
                If ((^^^PEG0.VEID == 0x1002))
                {
                    Notify (^^^PEG0.PEGP, 0x81) // Information Change
                }
            }

            Method (_Q67, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x67
                Debug = "=====QUERY_67====="
                Sleep (0x64)
                Notify (PEG1, Zero) // Bus Check
            }

            Method (_Q55, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x55
            }

            Method (_Q56, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x56
                If ((^^^PEG0.VEID == 0x10DE))
                {
                    Notify (^^^PEG0.PEGP, 0xD3) // Hardware-Specific
                }
            }

            Method (_Q57, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x57
                If ((^^^PEG0.VEID == 0x10DE))
                {
                    Notify (^^^PEG0.PEGP, 0xD4) // Hardware-Specific
                }
            }

            Method (_Q58, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x58
                If ((^^^PEG0.VEID == 0x10DE))
                {
                    Notify (^^^PEG0.PEGP, 0xD5) // Hardware-Specific
                }
            }

            Method (_Q5A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x5A
                If ((^^^PEG0.VEID == 0x10DE))
                {
                    Notify (^^^PEG0.PEGP, 0xD1) // Hardware-Specific
                }
            }

            Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "=====QUERY_11====="
                P80H = 0x11
                Notify (^^^PEG0.PEGP.LCD0, 0x87) // Device-Specific
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "=====QUERY_12====="
                P80H = 0x12
                Notify (^^^PEG0.PEGP.LCD0, 0x86) // Device-Specific
            }

            Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "=====QUERY_15====="
                P80H = 0x15
                If (IGDS)
                {
                    Local0 = LIDF /* \_SB_.PCI0.LPCB.EC0_.LIDF */
                    Local0 = ~Local0
                    Local0 &= One
                    Local0 += 0x02
                    If (^^^GFX0.GLID (Local0))
                    {
                        ^^^GFX0.CLID |= 0x80000000 /* External reference */
                    }
                }

                Notify (LID0, 0x80) // Status Change
            }

            Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "=====QUERY_1D====="
                P80H = 0x1D
            }

            Method (_Q1E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "=====QUERY_1E====="
                P80H = 0x1E
                If (CTUR)
                {
                    If ((TFCT == Zero))
                    {
                        CSMI (0xDA, Zero)
                    }
                    Else
                    {
                        CSMI (0xDA, One)
                    }
                }
            }

            Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x20
                Debug = "=====QUERY_20====="
                If ((DPPP == One))
                {
                    Local0 = RefOf (DPOT)
                    If ((Local0 & 0x04))
                    {
                        Notify (GEN3, 0x90) // Device-Specific
                    }

                    If ((Local0 & 0x02))
                    {
                        Notify (GEN2, 0x90) // Device-Specific
                    }

                    If ((Local0 & One))
                    {
                        Notify (GEN1, 0x90) // Device-Specific
                    }
                }
            }

            Method (_Q24, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "=====QUERY_24====="
                P80H = 0x24
                Sleep (0x03E8)
                Notify (BAT1, 0x80) // Status Change
            }

            Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "=====QUERY_25====="
                P80H = 0x25
                Sleep (0x03E8)
                Notify (BAT1, 0x81) // Information Change
                Sleep (0x03E8)
                Notify (BAT1, 0x80) // Status Change
            }

            Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Debug = "=====QUERY_37====="
                P80H = 0x37
                Notify (ACAD, 0x80) // Status Change
                Sleep (0x03E8)
                Notify (BAT1, 0x80) // Status Change
                PWRS = ADPT /* \_SB_.PCI0.LPCB.EC0_.ADPT */
                PNOT ()
                If ((^^^PEG0.VEID == 0x10DE))
                {
                    If (ADPT)
                    {
                        ASPM = Zero
                        ^^^PEG0.NVPM = Zero
                    }
                    Else
                    {
                        ASPM = 0x03
                        ^^^PEG0.NVPM = 0x03
                    }
                }

                If ((^^^PEG0.VEID == 0x1002))
                {
                    Notify (^^^PEG0.PEGP, 0x81) // Information Change
                }
            }

            Method (_Q47, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x47
                If ((OSYS >= 0x07DF))
                {
                    Local0 = 0x0A
                }

                While (Local0)
                {
                    Local0--
                    Notify (^^^PEG0.PEGP.LCD0, 0x87) // Device-Specific
                    Sleep (0x32)
                }
            }

            Method (_Q5F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                P80H = 0x5F
                ^^^^AMW0.INF0 = 0x03
                ^^^^AMW0.INF1 = Zero
                If ((OSDW == One))
                {
                    P80H = Zero
                    ^^^^AMW0.INF2 = 0xE000
                    Notify (AMW0, 0xD0) // Hardware-Specific
                }
                ElseIf ((OSDW == 0x02))
                {
                    P80H = One
                    ^^^^AMW0.INF2 = 0xE001
                    Notify (AMW0, 0xD0) // Hardware-Specific
                }
                ElseIf ((OSDW == 0x04))
                {
                    P80H = 0x02
                    ^^^^AMW0.INF2 = 0xE002
                    Notify (AMW0, 0xD0) // Hardware-Specific
                }
                ElseIf ((OSDW == 0x08))
                {
                    P80H = 0x03
                    ^^^^AMW0.INF2 = 0xE003
                    Notify (AMW0, 0xD0) // Hardware-Specific
                }
                ElseIf ((OSDW == 0x10))
                {
                    P80H = 0x04
                    ^^^^AMW0.INF2 = 0xE004
                    Notify (AMW0, 0xD0) // Hardware-Specific
                }
                ElseIf ((OSDW == 0x20))
                {
                    P80H = 0x05
                    ^^^^AMW0.INF2 = 0xE005
                    Notify (AMW0, 0xD0) // Hardware-Specific
                }
                Else
                {
                    P80H = 0x88
                }

                OSDW = Zero
            }

            Name (CTSL, Package (0x19)
            {
                0x10, 
                0x12, 
                0x13, 
                0x14, 
                0x15, 
                0x16, 
                0x17, 
                0x20, 
                0x21, 
                0x22, 
                0x24, 
                0x25, 
                0x26, 
                0x28, 
                0x90, 
                0x91, 
                0xFE, 
                0x92, 
                0x93, 
                0x94, 
                0x95, 
                0x96, 
                0x97, 
                0x98, 
                0x99
            })
            Mutex (CFMX, 0x00)
            Method (CFUN, 4, Serialized)
            {
                Name (ESRC, 0x05)
                If ((DerefOf (Arg0 [Zero]) == 0x15))
                {
                    CreateWordField (Arg1, Zero, SFUN)
                    If ((SFUN == 0x9001)){}
                    ElseIf ((SFUN == 0x9002))
                    {
                        STDT = Zero
                        BFDT = Zero
                        BFDT = Zero
                        STDT = One
                    }
                    ElseIf ((SFUN == 0x9000))
                    {
                        ESMC (Arg2)
                        If ((ESMS != 0xFF))
                        {
                            Local1 = Buffer (0x80){}
                            Local1 [Zero] = 0x80
                            Local1 [One] = ESMS /* \ESMS */
                            Local3 = ESMB /* \ESMB */
                            Local1 [0x02] = DerefOf (Local3 [Zero])
                            Local1 [0x03] = DerefOf (Local3 [One])
                            Local1 [0x04] = DerefOf (Local3 [0x02])
                            Local1 [0x05] = DerefOf (Local3 [0x03])
                            Local1 [0x06] = DerefOf (Local3 [0x04])
                            Local1 [0x07] = DerefOf (Local3 [0x05])
                            Local1 [0x08] = DerefOf (Local3 [0x06])
                            Local1 [0x09] = DerefOf (Local3 [0x07])
                            Local1 [0x0A] = DerefOf (Local3 [0x08])
                            Local1 [0x0B] = DerefOf (Local3 [0x09])
                            Local1 [0x0C] = DerefOf (Local3 [0x0A])
                            Local1 [0x0D] = DerefOf (Local3 [0x0B])
                            Local1 [0x0E] = DerefOf (Local3 [0x0C])
                            Local1 [0x0F] = DerefOf (Local3 [0x0D])
                            Local1 [0x10] = DerefOf (Local3 [0x0E])
                            Local1 [0x11] = DerefOf (Local3 [0x0F])
                            Local1 [0x12] = DerefOf (Local3 [0x10])
                            Local1 [0x13] = DerefOf (Local3 [0x11])
                            Local1 [0x14] = DerefOf (Local3 [0x12])
                            Local1 [0x15] = DerefOf (Local3 [0x13])
                            Local1 [0x16] = DerefOf (Local3 [0x14])
                            Local1 [0x17] = DerefOf (Local3 [0x15])
                            Local1 [0x18] = DerefOf (Local3 [0x16])
                            Local1 [0x19] = DerefOf (Local3 [0x17])
                            Local1 [0x1A] = DerefOf (Local3 [0x18])
                            Local1 [0x1B] = DerefOf (Local3 [0x19])
                            Local1 [0x1C] = DerefOf (Local3 [0x1A])
                            Local1 [0x1D] = DerefOf (Local3 [0x1B])
                            Local1 [0x1E] = DerefOf (Local3 [0x1C])
                            Local1 [0x1F] = DerefOf (Local3 [0x1D])
                            Local1 [0x20] = DerefOf (Local3 [0x1E])
                            Local1 [0x21] = DerefOf (Local3 [0x1F])
                            BFDT = Local1
                            STDT = One
                        }
                        Else
                        {
                            STDT = 0x8000
                        }
                    }
                    Else
                    {
                        SFNO = Arg1
                        BFDT = Arg2
                        CSMI (0xCE, Arg0)
                    }
                }
                ElseIf ((Match (CTSL, MEQ, DerefOf (Arg0 [Zero]), 
                    MTR, Zero, Zero) != Ones))
                {
                    SFNO = Arg1
                    BFDT = Arg2
                    CSMI (0xCE, Arg0)
                }
                Else
                {
                    STDT = 0x8000
                }
            }

            Name (OCSL, Package (0x04)
            {
                0x80, 
                0x81, 
                0x82, 
                0x90
            })
            Method (PFUN, 4, Serialized)
            {
                If ((Match (OCSL, MEQ, DerefOf (Arg0 [Zero]), MTR, 
                    Zero, Zero) != Ones))
                {
                    SFNO = Arg1
                    BFDT = Arg2
                    CSMI (0xCF, Arg0)
                }
                Else
                {
                    STDT = Zero
                }
            }

            Method (CMFC, 4, Serialized)
            {
                Name (RTVL, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Debug = "=== In CMFC method ==="
                If ((ObjectType (Arg0) == One))
                {
                    RTVL [Zero] = 0x8000
                }
                ElseIf ((DerefOf (Arg0 [Zero]) < 0xFF))
                {
                    Local1 = Buffer (0x82){}
                    CreateWordField (Local1, Zero, RTST)
                    CreateField (Local1, 0x10, 0x0400, RTDT)
                    If (((ToInteger (Arg0) <= 0x90) && (ToInteger (Arg0
                        ) >= 0x80)))
                    {
                        PFUN (Arg0, Arg1, Arg2, Arg3)
                    }
                    Else
                    {
                        CFUN (Arg0, Arg1, Arg2, Arg3)
                    }

                    RTST = STDT /* \STDT */
                    RTDT = BFDT /* \BFDT */
                    Return (Local1)
                }
                Else
                {
                    RTVL [Zero] = 0x8000
                }

                Return (RTVL) /* \_SB_.PCI0.LPCB.EC0_.CMFC.RTVL */
            }

            Mutex (FAMX, 0x00)
            Method (EIDR, 1, Serialized)
            {
                Acquire (FAMX, 0xFFFF)
                ERIB = Arg0
                Local0 = ERRD (0x5F)
                Release (FAMX)
                Return (Local0)
            }

            Method (EIDW, 2, Serialized)
            {
                Acquire (FAMX, 0xFFFF)
                ERIB = Arg0
                ERWT (0x5F, Arg1)
                Release (FAMX)
            }

            OperationRegion (ECCD, SystemMemory, 0xFC7E0800, 0x1000)
            Field (ECCD, AnyAcc, Lock, Preserve)
            {
                Offset (0x580), 
                Offset (0x582), 
                ECTB,   1, 
                ECTE,   1, 
                Offset (0x583), 
                ERN1,   8, 
                ERN2,   8, 
                ERN3,   8, 
                ERN4,   8, 
                ERN5,   8, 
                ERN6,   8, 
                ERN7,   8, 
                ERN8,   8, 
                ECMD,   8, 
                EDT1,   8, 
                EDT2,   8, 
                EDT3,   8, 
                EDT4,   8, 
                EDT5,   8, 
                    ,   1
            }

            Method (ERWT, 2, Serialized)
            {
                Local0 = Buffer (0x08){}
                Local0 [Zero] = 0xB1
                Local0 [One] = Arg0
                Local0 [0x02] = Arg1
                ERCD (Local0)
            }

            Method (ERRD, 1, Serialized)
            {
                Local0 = Buffer (0x08){}
                Local0 [Zero] = 0xB0
                Local0 [One] = Arg0
                Return (ERCD (Local0))
            }

            Mutex (CSMX, 0x00)
            Method (ERCD, 1, Serialized)
            {
                Acquire (CSMX, 0xFFFF)
                Name (ESRC, 0x64)
                ECTB = One
                ECMD = DerefOf (Arg0 [Zero])
                EDT1 = DerefOf (Arg0 [One])
                EDT2 = DerefOf (Arg0 [0x02])
                ECTE = One
                While (((ESRC != Zero) && (ECTE != Zero)))
                {
                    Sleep (0x0A)
                    ESRC -= One
                }

                Local0 = ERN1 /* \_SB_.PCI0.LPCB.EC0_.ERN1 */
                ECTB = Zero
                Release (CSMX)
                Return (Local0)
            }

            Method (SBAT, 2, NotSerialized)
            {
                Local0 = Buffer (0x08){}
                Local0 [Zero] = Arg0
                Local0 [One] = 0x16
                Local0 [0x02] = Arg1
                Local0 [0x03] = Zero
                Local0 [0x04] = Zero
                ESMC (Local0)
            }

            Method (SBA2, 2, NotSerialized)
            {
                Local0 = Buffer (0x08){}
                Local0 [Zero] = Arg0
                Local0 [One] = 0x36
                Local0 [0x02] = Arg1
                Local0 [0x03] = Zero
                Local0 [0x04] = Zero
                ESMC (Local0)
            }

            Mutex (ESCX, 0x00)
            Method (ESMC, 1, NotSerialized)
            {
                Acquire (ESCX, 0xFFFF)
                Name (ESRC, 0x05)
                SMD0 = Zero
                SMAD = DerefOf (Arg0 [One])
                SMCM = DerefOf (Arg0 [0x02])
                SMBN = DerefOf (Arg0 [0x03])
                Local4 = DerefOf (Arg0 [0x04])
                Local5 = Zero
                BCNT = Local4
                If ((Local4 != Zero))
                {
                    Local1 = SMD0 /* \_SB_.PCI0.LPCB.EC0_.SMD0 */
                    While (~(Local4 == Local5))
                    {
                        Local1 [Local5] = DerefOf (Arg0 [(0x05 + Local5)]
                            )
                        Local5 += One
                    }

                    SMD0 = Local1
                }

                SMPR = DerefOf (Arg0 [Zero])
                While ((~(ESRC == Zero) && ~((SMST & 0x80
                    ) == 0x80)))
                {
                    Sleep (0x14)
                    ESRC -= One
                }

                If ((SMST == 0x80))
                {
                    ESMB = SMD0 /* \_SB_.PCI0.LPCB.EC0_.SMD0 */
                    ESMS = BCNT /* \_SB_.PCI0.LPCB.EC0_.BCNT */
                }
                Else
                {
                    Debug = "====== Sent EC SMBus command time out. ======"
                    ESMS = 0xFF
                }

                Release (ESCX)
            }
        }

        Scope (\_SB.PCI0.LPCB)
        {
            Method (GBMN, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (GUBS, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (GUBT, 0, NotSerialized)
            {
                Local0 = "Li-Ion"
                Return (Local0)
            }

            Method (GUBI, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (BMN2, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (UBS2, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (UBT2, 0, NotSerialized)
            {
                Local0 = "Li-Ion"
                Return (Local0)
            }

            Method (UBI2, 0, NotSerialized)
            {
                Return (Zero)
            }
        }

        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (BMDL, Zero)
            Name (BASC, One)
            Name (BFFW, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (ECOK ())
                {
                    If (^^EC0.BOL0)
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (0x1F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Return (BIFX (Zero))
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                Return (BIFX (One))
            }

            Method (BIFX, 1, NotSerialized)
            {
                Name (STAX, Package (0x14)
                {
                    Zero, 
                    One, 
                    0x1770, 
                    0x1770, 
                    One, 
                    0x2A30, 
                    0x0258, 
                    0xB4, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero, 
                    0x0108, 
                    0x0EC4, 
                    "PABAS0241231", 
                    "41167", 
                    "Li-Ion", 
                    "COMPAL "
                })
                Name (STAF, Package (0x0D)
                {
                    One, 
                    0x1770, 
                    0x1770, 
                    One, 
                    0x2A30, 
                    0x0258, 
                    0xB4, 
                    0x0108, 
                    0x0EC4, 
                    "PABAS0241231", 
                    "41167", 
                    "Li-Ion", 
                    "COMPAL "
                })
                If (ECOK ())
                {
                    BFFW = ^^EC0.ORRF /* \_SB_.PCI0.LPCB.EC0_.ORRF */
                    If ((^^EC0.BAM0 == Zero))
                    {
                        BASC = 0x0A
                    }

                    STAX [One] = ^^EC0.BAM0 /* \_SB_.PCI0.LPCB.EC0_.BAM0 */
                    Local0 = ^^EC0.BDC0 /* \_SB_.PCI0.LPCB.EC0_.BDC0 */
                    BMDL = Local0
                    STAX [0x02] = (^^EC0.BDC0 * BASC)
                    STAX [0x05] = ^^EC0.BDV0 /* \_SB_.PCI0.LPCB.EC0_.BDV0 */
                    If ((BFFW == One))
                    {
                        Local2 = ^^EC0.BFCB /* \_SB_.PCI0.LPCB.EC0_.BFCB */
                    }
                    Else
                    {
                        Local2 = ^^EC0.BFC0 /* \_SB_.PCI0.LPCB.EC0_.BFC0 */
                    }

                    Local2 = (Local2 * BASC)
                    STAX [0x03] = Local2
                    Divide (Local2, 0x64, Local0, Local1)
                    Local1 *= 0x0A
                    STAX [0x06] = Local1
                    Divide (Local2, 0x64, Local0, Local1)
                    Local1 *= 0x03
                    STAX [0x07] = Local1
                    STAF [Zero] = DerefOf (STAX [One])
                    STAF [One] = DerefOf (STAX [0x02])
                    STAF [0x02] = DerefOf (STAX [0x03])
                    STAF [0x03] = DerefOf (STAX [0x04])
                    STAF [0x04] = DerefOf (STAX [0x05])
                    STAF [0x05] = DerefOf (STAX [0x06])
                    STAF [0x06] = DerefOf (STAX [0x07])
                    STAF [0x07] = DerefOf (STAX [0x0E])
                    STAF [0x08] = DerefOf (STAX [0x0F])
                    STAF [0x09] = DerefOf (STAX [0x10])
                    STAF [0x0A] = DerefOf (STAX [0x11])
                    STAF [0x0B] = DerefOf (STAX [0x12])
                    STAF [0x0C] = DerefOf (STAX [0x13])
                    If ((Arg0 == One))
                    {
                        Return (STAX) /* \_SB_.PCI0.LPCB.BAT1.BIFX.STAX */
                    }
                    Else
                    {
                        Return (STAF) /* \_SB_.PCI0.LPCB.BAT1.BIFX.STAF */
                    }
                }
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                Name (PBST, Package (0x04)
                {
                    Zero, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0x1770
                })
                If (ECOK ())
                {
                    PBST [Zero] = ^^EC0.BST0 /* \_SB_.PCI0.LPCB.EC0_.BST0 */
                    If ((^^EC0.BAC0 >> 0x0F))
                    {
                        Local4 = ((~^^EC0.BAC0 & 0xFFFF) + One)
                    }
                    Else
                    {
                        Local4 = ^^EC0.BAC0 /* \_SB_.PCI0.LPCB.EC0_.BAC0 */
                    }

                    If ((^^EC0.BAM0 == Zero))
                    {
                        Local4 = ((Local4 * ^^EC0.BPV0) / 0x03E8)
                    }

                    PBST [One] = Local4
                    PBST [0x02] = (^^EC0.BRC0 * BASC)
                    PBST [0x03] = ^^EC0.BPV0 /* \_SB_.PCI0.LPCB.EC0_.BPV0 */
                    If ((^^EC0.BDC0 != BMDL))
                    {
                        Notify (BAT1, 0x81) // Information Change
                    }
                }

                Return (PBST) /* \_SB_.PCI0.LPCB.BAT1._BST.PBST */
            }

            Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
            {
                Local0 = (Arg0 / BASC)
                ^^EC0.BTPB = Local0
            }
        }

        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Local0 = ^^EC0.ADPT /* \_SB_.PCI0.LPCB.EC0_.ADPT */
                Return (Local0)
            }
        }

        Method (OSTP, 0, NotSerialized)
        {
            Local1 = One
            If ((OSYS == 0x07D1))
            {
                Local1 = Zero
            }

            If ((OSYS == 0x07D2))
            {
                Local1 = Zero
            }

            If ((OSYS == 0x07D6))
            {
                Local1 = One
            }

            If ((OSYS == 0x03E8))
            {
                Local1 = 0x02
            }

            If ((OSYS == 0x07D9))
            {
                Local1 = 0x03
            }

            If ((OSYS == 0x07DC))
            {
                Local1 = 0x04
            }

            If ((OSYS == 0x07DD))
            {
                Local1 = 0x05
            }

            If ((OSYS == 0x07DF))
            {
                Local1 = 0x06
            }

            If ((OSYS == 0x07E0))
            {
                Local1 = 0x06
            }

            If ((OSYS == 0x07E1))
            {
                Local1 = 0x06
            }

            If ((OSYS == 0x07E2))
            {
                Local1 = 0x07
            }

            ^EC0.OSTY = Local1
        }

        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Name (PLID, One)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Local0 = ^^EC0.LIDF /* \_SB_.PCI0.LPCB.EC0_.LIDF */
                If (Local0)
                {
                    Return (Zero)
                }

                Return (One)
            }
        }

        Method (ECFG, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                ^EC0.ECRD = One
            }
            Else
            {
                ^EC0.ECRD = Zero
            }
        }
    }

    Method (OPTS, 1, Serialized)
    {
        If (Arg0)
        {
            \_SB.PCI0.LPCB.ECFG (Zero)
            \_SB.PCI0.LPCB.LID0.PLID = \_SB.PCI0.LPCB.EC0.LIDF
        }

        \_SB.PCI0.LPCB.EC0.LWAK = Zero
        If ((Arg0 == 0x03))
        {
            \_SB.PCI0.LPCB.EC0.S3ST = One
            \_SB.PCI0.LPCB.EC0.P80H = 0x83
            If (\_SB.PCI0.LPCB.EC0.ADPT)
            {
                \_SB.PCI0.LPCB.EC0.LWAK = One
            }
            Else
            {
                \_SB.PCI0.LPCB.EC0.LWAK = Zero
            }
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.LPCB.EC0.S4ST = One
            \_SB.PCI0.LPCB.EC0.P80H = 0x84
        }

        If ((Arg0 == 0x05))
        {
            \_SB.PCI0.LPCB.EC0.S5ST = One
            \_SB.PCI0.LPCB.EC0.P80H = 0x85
        }
    }

    OperationRegion (PMES, SystemIO, 0x1800, 0x60)
    Field (PMES, ByteAcc, NoLock, Preserve)
    {
        Offset (0x01), 
        SPBS,   1, 
        Offset (0x02), 
        SPBE,   16
    }

    Method (OWAK, 1, Serialized)
    {
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.LPCB.ECFG (One)
        }

        If ((Arg0 == 0x03))
        {
            Local1 = Buffer (0x03)
                {
                     0x40, 0x00, 0x00                                 // @..
                }
            \_SB.PCI0.LPCB.EC0.ERCD (Local1)
            \_SB.PCI0.LPCB.EC0.S3RM = One
            \_SB.PCI0.LPCB.EC0.P80H = 0xC3
            SPBS = One
            Sleep (0x0A)
            SPBE = 0x4120
            \_SB.OSMI (0x80)
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.LPCB.EC0.S4RM = One
            \_SB.PCI0.LPCB.EC0.P80H = 0xC4
            \_SB.PCI0.LPCB.OSTP ()
        }

        If ((Arg0 == 0x05))
        {
            \_SB.PCI0.LPCB.EC0.S5RM = One
            \_SB.PCI0.LPCB.EC0.P80H = 0xC5
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.SHFG = One
            If ((\_SB.PCI0.LPCB.EC0.LIDF != \_SB.PCI0.LPCB.LID0.PLID))
            {
                If (IGDS)
                {
                    If ((\_SB.PCI0.LPCB.EC0.LIDF == One))
                    {
                        \_SB.PCI0.GFX0.CLID = 0x80000000
                    }

                    If ((\_SB.PCI0.LPCB.EC0.LIDF == Zero))
                    {
                        \_SB.PCI0.GFX0.CLID = 0x80000003
                    }
                }

                Notify (\_SB.PCI0.LPCB.LID0, 0x80) // Status Change
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Mutex (ECMT, 0x00)
        OperationRegion (USEC, SystemMemory, 0xFC7E0250, 0x30)
        Field (USEC, ByteAcc, Lock, Preserve)
        {
            VER1,   8, 
            VER2,   8, 
            RSV1,   8, 
            RSV2,   8, 
            CCI0,   8, 
            CCI1,   8, 
            CCI2,   8, 
            CCI3,   8, 
            CTL0,   8, 
            CTL1,   8, 
            CTL2,   8, 
            CTL3,   8, 
            CTL4,   8, 
            CTL5,   8, 
            CTL6,   8, 
            CTL7,   8, 
            MGI0,   8, 
            MGI1,   8, 
            MGI2,   8, 
            MGI3,   8, 
            MGI4,   8, 
            MGI5,   8, 
            MGI6,   8, 
            MGI7,   8, 
            MGI8,   8, 
            MGI9,   8, 
            MGIA,   8, 
            MGIB,   8, 
            MGIC,   8, 
            MGID,   8, 
            MGIE,   8, 
            MGIF,   8, 
            MGO0,   8, 
            MGO1,   8, 
            MGO2,   8, 
            MGO3,   8, 
            MGO4,   8, 
            MGO5,   8, 
            MGO6,   8, 
            MGO7,   8, 
            MGO8,   8, 
            MGO9,   8, 
            MGOA,   8, 
            MGOB,   8, 
            MGOC,   8, 
            MGOD,   8, 
            MGOE,   8, 
            MGOF,   8
        }

        Method (ECRU, 1, Serialized)
        {
            Local0 = Acquire (ECMT, 0x03E8)
            If ((Local0 == Zero))
            {
                If (ECOK ())
                {
                    Local1 = DerefOf (Arg0)
                    Release (ECMT)
                    Return (Local1)
                }
            }

            Release (ECMT)
            Return (Zero)
        }

        Method (ECWT, 2, Serialized)
        {
            Local0 = Acquire (ECMT, 0x03E8)
            If ((Local0 == Zero))
            {
                If (ECOK ())
                {
                    Arg1 = Arg0
                }
            }

            Release (ECMT)
        }

        Method (UCEV, 0, Serialized)
        {
            ^^^^UBTC.MGI0 = MGI0 /* \_SB_.PCI0.LPCB.EC0_.MGI0 */
            ^^^^UBTC.MGI1 = MGI1 /* \_SB_.PCI0.LPCB.EC0_.MGI1 */
            ^^^^UBTC.MGI2 = MGI2 /* \_SB_.PCI0.LPCB.EC0_.MGI2 */
            ^^^^UBTC.MGI3 = MGI3 /* \_SB_.PCI0.LPCB.EC0_.MGI3 */
            ^^^^UBTC.MGI4 = MGI4 /* \_SB_.PCI0.LPCB.EC0_.MGI4 */
            ^^^^UBTC.MGI5 = MGI5 /* \_SB_.PCI0.LPCB.EC0_.MGI5 */
            ^^^^UBTC.MGI6 = MGI6 /* \_SB_.PCI0.LPCB.EC0_.MGI6 */
            ^^^^UBTC.MGI7 = MGI7 /* \_SB_.PCI0.LPCB.EC0_.MGI7 */
            ^^^^UBTC.MGI8 = MGI8 /* \_SB_.PCI0.LPCB.EC0_.MGI8 */
            ^^^^UBTC.MGI9 = MGI9 /* \_SB_.PCI0.LPCB.EC0_.MGI9 */
            ^^^^UBTC.MGIA = MGIA /* \_SB_.PCI0.LPCB.EC0_.MGIA */
            ^^^^UBTC.MGIB = MGIB /* \_SB_.PCI0.LPCB.EC0_.MGIB */
            ^^^^UBTC.MGIC = MGIC /* \_SB_.PCI0.LPCB.EC0_.MGIC */
            ^^^^UBTC.MGID = MGID /* \_SB_.PCI0.LPCB.EC0_.MGID */
            ^^^^UBTC.MGIE = MGIE /* \_SB_.PCI0.LPCB.EC0_.MGIE */
            ^^^^UBTC.MGIF = MGIF /* \_SB_.PCI0.LPCB.EC0_.MGIF */
            ^^^^UBTC.CCI0 = CCI0 /* \_SB_.PCI0.LPCB.EC0_.CCI0 */
            ^^^^UBTC.CCI1 = CCI1 /* \_SB_.PCI0.LPCB.EC0_.CCI1 */
            ^^^^UBTC.CCI2 = CCI2 /* \_SB_.PCI0.LPCB.EC0_.CCI2 */
            ^^^^UBTC.CCI3 = CCI3 /* \_SB_.PCI0.LPCB.EC0_.CCI3 */
            Notify (UBTC, 0x80) // Status Change
        }

        Method (_Q21, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            UCEV ()
        }

        OperationRegion (DEBB, SystemIO, 0x80, One)
        Field (DEBB, ByteAcc, NoLock, Preserve)
        {
            P80H,   8
        }
    }

    Scope (_SB)
    {
        Device (HIDD)
        {
            Name (_HID, "INT33D5")  // _HID: Hardware ID
            Name (HBSY, Zero)
            Name (HIDX, Zero)
            Name (HMDE, Zero)
            Name (HRDY, Zero)
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (HDDM, 0, Serialized)
            {
                Name (DPKG, Package (0x04)
                {
                    0x11111111, 
                    0x22222222, 
                    0x33333333, 
                    0x44444444
                })
                Return (DPKG) /* \_SB_.HIDD.HDDM.DPKG */
            }

            Method (HDEM, 0, Serialized)
            {
                HBSY = Zero
                If ((HMDE == Zero))
                {
                    Return (HIDX) /* \_SB_.HIDD.HIDX */
                }

                Return (HMDE) /* \_SB_.HIDD.HMDE */
            }

            Method (HDMM, 0, Serialized)
            {
                Return (HMDE) /* \_SB_.HIDD.HMDE */
            }

            Method (HDSM, 1, Serialized)
            {
                HRDY = Arg0
            }

            Method (HPEM, 1, Serialized)
            {
                HBSY = One
                If ((HMDE == Zero))
                {
                    HIDX = Arg0
                }
                Else
                {
                    HIDX = Arg0
                }

                Notify (HIDD, 0xC0) // Hardware-Specific
                Local0 = Zero
                While (((Local0 < 0xFA) && HBSY))
                {
                    Sleep (0x04)
                    Local0++
                }

                If ((HBSY == One))
                {
                    HBSY = Zero
                    HIDX = Zero
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (NRBT, 0, NotSerialized)
            {
                If ((HRDY == One))
                {
                    HIDX = 0x08
                    Notify (HIDD, 0xC0) // Hardware-Specific
                }
            }

            Name (HEB2, Zero)
            Method (HEBC, 0, Serialized)
            {
                Return (HEB1) /* \HEB1 */
            }

            Method (HEEC, 0, Serialized)
            {
                If ((AHDB == One))
                {
                    Return (HEB2) /* \_SB_.HIDD.HEB2 */
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("eeec56b3-4442-408f-a792-4edd4d758054")))
                {
                    If ((One == ToInteger (Arg1)))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Return (Buffer (0x02)
                                {
                                     0xFF, 0x01                                       // ..
                                })
                            }
                            Case (One)
                            {
                            }
                            Case (0x02)
                            {
                                Return (HDMM ())
                            }
                            Case (0x03)
                            {
                                HDSM (DerefOf (Arg3 [Zero]))
                            }
                            Case (0x04)
                            {
                                Return (HDEM ())
                            }
                            Case (0x05)
                            {
                            }
                            Case (0x06)
                            {
                            }
                            Case (0x07)
                            {
                                Return (HEBC ())
                            }
                            Case (0x08)
                            {
                            }

                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (ASMI, SystemIO, 0xB2, 0x02)
        Field (ASMI, ByteAcc, NoLock, Preserve)
        {
            CSMC,   8, 
            CSMD,   8
        }

        Mutex (PFMX, 0x00)
        Method (OSMI, 1, NotSerialized)
        {
            Acquire (PFMX, 0xFFFF)
            CSMD = Arg0
            CSMC = 0xE3
            Release (PFMX)
        }
    }

    Scope (_SB)
    {
        Device (AMW1)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "AWCC")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0xCE, 0x91, 0x05, 0xA7, 0x97, 0xA9, 0xDA, 0x11,  // ........
                /* 0008 */  0xB0, 0x12, 0xB6, 0x22, 0xA1, 0xEF, 0x54, 0x92,  // ..."..T.
                /* 0010 */  0x41, 0x58, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AX..!...
                /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x4D, 0x46, 0x01, 0x00   // ..).MF..
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (DOME, Zero)
            Method (WMAX, 3, Serialized)
            {
                DMR0 = Arg0
                DMR1 = Arg1
                DMR2 = Arg2
                DMRR = Zero
                If ((DMR1 == 0x0E))
                {
                    If ((DMR2 == Zero))
                    {
                        DOME = One
                        DOMS = One
                    }
                    Else
                    {
                        DOME = Zero
                        DOMS = Zero
                    }
                }

                CreateByteField (Arg2, Zero, DM20)
                CreateByteField (Arg2, One, DM21)
                CreateByteField (Arg2, 0x02, DM22)
                CreateByteField (Arg2, 0x03, DM23)
                Local0 = Zero
                Switch (DMR1)
                {
                    Case (0x0D)
                    {
                        OSMI (0x99)
                        Local0 = DMRR /* \DMRR */
                        ^^PCI0.B0D4.XPCC = Zero
                        Notify (^^PCI0.B0D4, 0x83) // Device-Specific Change
                        Break
                    }
                    Case (0x0E)
                    {
                        OSMI (0x99)
                        Local0 = DMRR /* \DMRR */
                        ^^PCI0.B0D4.XPCC = Zero
                        Notify (^^PCI0.B0D4, 0x83) // Device-Specific Change
                        Break
                    }
                    Case (0x0F)
                    {
                        OSMI (0x99)
                        Local0 = DMRR /* \DMRR */
                        Break
                    }
                    Case (0x13)
                    {
                        Switch (DM20)
                        {
                            Case (One)
                            {
                                If ((DM21 == 0x32))
                                {
                                    Local0 = One
                                }
                                ElseIf ((DM21 == 0x33))
                                {
                                    Local0 = One
                                }
                                Else
                                {
                                    Local0 = Zero
                                }

                                Break
                            }
                            Case (0x02)
                            {
                                If ((DM21 == 0x32))
                                {
                                    If ((DM22 == Zero))
                                    {
                                        Local0 = One
                                    }
                                    Else
                                    {
                                        Local0 = 0xFFFFFFFF
                                    }
                                }
                                ElseIf ((DM21 == 0x33))
                                {
                                    If ((DM22 == Zero))
                                    {
                                        Local0 = 0x06
                                    }
                                    Else
                                    {
                                        Local0 = 0xFFFFFFFF
                                    }
                                }
                                Else
                                {
                                    Local0 = Zero
                                }

                                Break
                            }
                            Default
                            {
                                Local0 = 0xFFFFFFFF
                                Break
                            }

                        }

                        Break
                    }
                    Case (0x14)
                    {
                        Switch (DM20)
                        {
                            Case (One)
                            {
                                Local0 = One
                                Break
                            }
                            Case (0x02)
                            {
                                Local0 = 0x04000202
                                Break
                            }
                            Case (0x03)
                            {
                                If ((DM21 == Zero))
                                {
                                    Local0 = 0x32
                                }
                                ElseIf ((DM21 == One))
                                {
                                    Local0 = 0x33
                                }
                                ElseIf ((DM21 == 0x02))
                                {
                                    Local0 = 0x0101
                                }
                                ElseIf ((DM21 == 0x03))
                                {
                                    Local0 = 0x0106
                                }
                                ElseIf ((DM21 == 0x04))
                                {
                                    Local0 = 0x96
                                    If ((^^PCI0.PEG0.VEID == 0x1002))
                                    {
                                        Notify (^^PCI0.PEG0.PEGP, 0x81) // Information Change
                                    }
                                }
                                ElseIf ((DM21 == 0x05))
                                {
                                    Local0 = 0x97
                                    If ((^^PCI0.PEG0.VEID == 0x1002))
                                    {
                                        Notify (^^PCI0.PEG0.PEGP, 0x81) // Information Change
                                    }
                                }
                                ElseIf ((DM21 == 0x06))
                                {
                                    Local0 = 0x98
                                    If ((^^PCI0.PEG0.VEID == 0x1002))
                                    {
                                        Notify (^^PCI0.PEG0.PEGP, 0x81) // Information Change
                                    }
                                }
                                ElseIf ((DM21 == 0x07))
                                {
                                    Local0 = 0x99
                                    If ((^^PCI0.PEG0.VEID == 0x1002))
                                    {
                                        Notify (^^PCI0.PEG0.PEGP, 0x81) // Information Change
                                    }
                                }
                                Else
                                {
                                    Local0 = 0xFFFFFFFF
                                }

                                Break
                            }
                            Case (0x04)
                            {
                                If ((DM21 == One))
                                {
                                    Local0 = ^^PCI0.LPCB.EC0.CTMP /* \_SB_.PCI0.LPCB.EC0_.CTMP */
                                }
                                ElseIf ((DM21 == 0x06))
                                {
                                    Local0 = ^^PCI0.LPCB.EC0.SKTC /* \_SB_.PCI0.LPCB.EC0_.SKTC */
                                }
                                Else
                                {
                                    Local0 = 0xFFFFFFFF
                                }

                                Break
                            }
                            Case (0x05)
                            {
                                If ((DM21 == 0x32))
                                {
                                    Local0 = (^^PCI0.LPCB.EC0.F1RP * 0x64)
                                }
                                ElseIf ((DM21 == 0x33))
                                {
                                    Local0 = (^^PCI0.LPCB.EC0.F2RP * 0x64)
                                }
                                Else
                                {
                                    Local0 = 0xFFFFFFFF
                                }

                                Break
                            }
                            Case (0x06)
                            {
                                If ((PLSZ == 0x15))
                                {
                                    If ((DM21 == 0x32))
                                    {
                                        Local2 = (^^PCI0.LPCB.EC0.F1RP * 0x2710)
                                        Divide (Local2, 0x10CC, Local3, Local0)
                                    }
                                    ElseIf ((DM21 == 0x33))
                                    {
                                        Local2 = (^^PCI0.LPCB.EC0.F2RP * 0x2710)
                                        Divide (Local2, 0x1324, Local3, Local0)
                                    }
                                    Else
                                    {
                                        Local0 = 0xFFFFFFFF
                                    }
                                }
                                ElseIf ((DM21 == 0x32))
                                {
                                    Local2 = (^^PCI0.LPCB.EC0.F1RP * 0x2710)
                                    Divide (Local2, 0x1068, Local3, Local0)
                                }
                                ElseIf ((DM21 == 0x33))
                                {
                                    Local2 = (^^PCI0.LPCB.EC0.F2RP * 0x2710)
                                    Divide (Local2, 0x1130, Local3, Local0)
                                }
                                Else
                                {
                                    Local0 = 0xFFFFFFFF
                                }

                                Break
                            }
                            Case (0x07)
                            {
                                Local0 = Zero
                                Break
                            }
                            Case (0x08)
                            {
                                If ((DM21 == 0x32))
                                {
                                    Local0 = Zero
                                }
                                ElseIf ((DM21 == 0x33))
                                {
                                    Local0 = Zero
                                }
                                Else
                                {
                                    Local0 = 0xFFFFFFFF
                                }

                                Break
                            }
                            Case (0x09)
                            {
                                If ((PLSZ == 0x15))
                                {
                                    If ((DM21 == 0x32))
                                    {
                                        Local0 = 0x10CC
                                    }
                                    ElseIf ((DM21 == 0x33))
                                    {
                                        Local0 = 0x1324
                                    }
                                    Else
                                    {
                                        Local0 = 0xFFFFFFFF
                                    }
                                }
                                ElseIf ((DM21 == 0x32))
                                {
                                    Local0 = 0x1068
                                }
                                ElseIf ((DM21 == 0x33))
                                {
                                    Local0 = 0x1130
                                }
                                Else
                                {
                                    Local0 = 0xFFFFFFFF
                                }

                                Break
                            }
                            Default
                            {
                                Local0 = 0xFFFFFFFF
                                Break
                            }

                        }

                        Break
                    }
                    Case (0x15)
                    {
                        Switch (DM20)
                        {
                            Case (One)
                            {
                                OSMI (0x99)
                                Notify (^^PCI0.B0D4, 0x83) // Device-Specific Change
                                If ((^^PCI0.PEG0.VEID == 0x10DE))
                                {
                                    Notify (^^PCI0.PEG0.PEGP, 0xC0) // Hardware-Specific
                                }

                                If ((^^PCI0.PEG0.VEID == 0x1002))
                                {
                                    Notify (^^PCI0.PEG0.PEGP, 0x81) // Information Change
                                }

                                Local0 = DMRR /* \DMRR */
                                Break
                            }
                            Case (0x02)
                            {
                                If ((DM21 == 0x32))
                                {
                                    ^^PCI0.LPCB.EC0.FWT1 = DM22 /* \_SB_.AMW1.WMAX.DM22 */
                                    Local0 = Zero
                                }
                                ElseIf ((DM21 == 0x33))
                                {
                                    ^^PCI0.LPCB.EC0.FWT2 = DM22 /* \_SB_.AMW1.WMAX.DM22 */
                                    Local0 = Zero
                                }
                                Else
                                {
                                    Local0 = 0xFFFFFFFF
                                }

                                Break
                            }
                            Default
                            {
                                Local0 = 0xFFFFFFFF
                                Break
                            }

                        }

                        Break
                    }
                    Case (0x20)
                    {
                        OSMI (0x99)
                        Local0 = DMRR /* \DMRR */
                        Break
                    }
                    Case (0x21)
                    {
                        Local0 = 0x02
                        Break
                    }
                    Case (0x22)
                    {
                        OSMI (0x99)
                        Local0 = DMRR /* \DMRR */
                        Break
                    }
                    Default
                    {
                        Local0 = 0xFFFFFFFF
                        Break
                    }

                }

                Return (Local0)
            }

            Name (WQMF, Buffer (0x051B)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0x0B, 0x05, 0x00, 0x00, 0xA4, 0x1D, 0x00, 0x00,  // ........
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x18, 0x44, 0x8E, 0x00, 0x01, 0x06, 0x18, 0x42,  // .D.....B
                /* 0020 */  0x20, 0xE4, 0x03, 0x89, 0xC0, 0x82, 0x69, 0x24,  //  .....i$
                /* 0028 */  0xC8, 0x01, 0x0C, 0x46, 0x03, 0x88, 0xD8, 0xEC,  // ...F....
                /* 0030 */  0x82, 0x89, 0x09, 0x10, 0x01, 0x21, 0xAF, 0x02,  // .....!..
                /* 0038 */  0x6C, 0x0A, 0x30, 0x09, 0xA2, 0xFE, 0xFD, 0x21,  // l.0....!
                /* 0040 */  0x4A, 0x82, 0x43, 0x09, 0x81, 0x90, 0x44, 0x01,  // J.C...D.
                /* 0048 */  0xE6, 0x05, 0xE8, 0x16, 0x60, 0x58, 0x80, 0x6D,  // ....`X.m
                /* 0050 */  0x01, 0xA6, 0x05, 0x38, 0x86, 0xA4, 0xD2, 0xC0,  // ...8....
                /* 0058 */  0x29, 0x81, 0xA5, 0x40, 0x48, 0xA8, 0x00, 0xE5,  // )..@H...
                /* 0060 */  0x02, 0x7C, 0x0B, 0xD0, 0x8E, 0x28, 0xC9, 0x02,  // .|...(..
                /* 0068 */  0x2C, 0xC3, 0x88, 0xC0, 0xA3, 0x88, 0x6C, 0x34,  // ,.....l4
                /* 0070 */  0x0E, 0x8D, 0x1D, 0x86, 0x65, 0x82, 0x69, 0x10,  // ....e.i.
                /* 0078 */  0x87, 0x51, 0x36, 0xB2, 0x08, 0x3C, 0xA1, 0x4E,  // .Q6..<.N
                /* 0080 */  0x05, 0xC8, 0x15, 0x20, 0x4C, 0x80, 0x78, 0x54,  // ... L.xT
                /* 0088 */  0x61, 0x34, 0x07, 0x45, 0xC6, 0x13, 0x1A, 0x23,  // a4.E...#
                /* 0090 */  0x06, 0x88, 0xC0, 0x76, 0x8E, 0xAD, 0x51, 0x9C,  // ...v..Q.
                /* 0098 */  0x46, 0xE1, 0x02, 0xA4, 0x63, 0x68, 0x04, 0xC7,  // F...ch..
                /* 00A0 */  0x75, 0x80, 0x5C, 0x90, 0x00, 0x8D, 0x02, 0xAC,  // u.\.....
                /* 00A8 */  0x03, 0x09, 0x30, 0x1A, 0x86, 0xE0, 0x40, 0x8E,  // ..0...@.
                /* 00B0 */  0x00, 0x23, 0x03, 0x42, 0x9E, 0x21, 0x35, 0x34,  // .#.B.!54
                /* 00B8 */  0x13, 0xD8, 0xBD, 0x00, 0x83, 0x02, 0xBC, 0xCD,  // ........
                /* 00C0 */  0x45, 0xD6, 0x06, 0x23, 0x63, 0x02, 0x1C, 0x0A,  // E..#c...
                /* 00C8 */  0xB0, 0x28, 0xC0, 0x16, 0x92, 0x60, 0x22, 0xC4,  // .(...`".
                /* 00D0 */  0x8A, 0x12, 0x29, 0xC2, 0xC9, 0x04, 0x8A, 0x52,  // ..)....R
                /* 00D8 */  0x21, 0xA4, 0x60, 0x2A, 0x43, 0x21, 0xDA, 0x40,  // !.`*C!.@
                /* 00E0 */  0x84, 0x10, 0x2B, 0x50, 0xDC, 0x83, 0x89, 0x7E,  // ..+P...~
                /* 00E8 */  0x6E, 0x71, 0x03, 0xB5, 0x3F, 0x08, 0x12, 0xF0,  // nq..?...
                /* 00F0 */  0x20, 0x20, 0x09, 0x20, 0x8A, 0x34, 0x1A, 0xD4,  //   . .4..
                /* 00F8 */  0xE0, 0x13, 0x3C, 0x0C, 0x78, 0x60, 0x07, 0x75,  // ..<.x`.u
                /* 0100 */  0x7C, 0xA7, 0x75, 0xB2, 0x27, 0xE6, 0x21, 0xD6,  // |.u.'.!.
                /* 0108 */  0x79, 0x0A, 0x20, 0xE3, 0x65, 0x58, 0x09, 0x7E,  // y. .eX.~
                /* 0110 */  0x0C, 0x7C, 0x2C, 0xC0, 0xBB, 0x06, 0xD4, 0x7D,  // .|,....}
                /* 0118 */  0xE0, 0x69, 0x80, 0xCD, 0x33, 0x1C, 0x66, 0x88,  // .i..3.f.
                /* 0120 */  0x1E, 0x71, 0xB8, 0x13, 0x38, 0x44, 0xF6, 0xFF,  // .q..8D..
                /* 0128 */  0x07, 0xF4, 0xC4, 0x1E, 0x04, 0xB0, 0x73, 0x3C,  // ......s<
                /* 0130 */  0x99, 0xB3, 0x2E, 0x55, 0x80, 0xD9, 0x13, 0x81,  // ...U....
                /* 0138 */  0xA6, 0x96, 0xE0, 0x78, 0x3C, 0x7C, 0xCF, 0xE7,  // ...x<|..
                /* 0140 */  0x84, 0x13, 0x58, 0xFE, 0x20, 0x50, 0x23, 0x33,  // ..X. P#3
                /* 0148 */  0xB4, 0x67, 0x79, 0xFC, 0xEC, 0x70, 0x70, 0x58,  // .gy..ppX
                /* 0150 */  0x4C, 0x2C, 0x84, 0x14, 0x40, 0x68, 0x3C, 0xE0,  // L,..@h<.
                /* 0158 */  0x57, 0x7C, 0x27, 0x10, 0xC2, 0xAB, 0x82, 0xE7,  // W|'.....
                /* 0160 */  0xEB, 0xC3, 0x83, 0x81, 0xB1, 0x03, 0xB2, 0x5F,  // ......._
                /* 0168 */  0x01, 0x08, 0xC1, 0xDF, 0x1A, 0x8E, 0xE8, 0x91,  // ........
                /* 0170 */  0x21, 0xC2, 0x31, 0xF9, 0x96, 0x10, 0x28, 0xC2,  // !.1...(.
                /* 0178 */  0x23, 0x04, 0x9B, 0x43, 0xF8, 0xD3, 0x2A, 0x7A,  // #..C..*z
                /* 0180 */  0x06, 0x9A, 0xCD, 0x9B, 0x02, 0x0C, 0x91, 0x47,  // .......G
                /* 0188 */  0x07, 0xF4, 0x20, 0xF8, 0x49, 0xE0, 0x0C, 0xA2,  // .. .I...
                /* 0190 */  0x9F, 0xD0, 0x41, 0x9C, 0x4C, 0x94, 0x07, 0x05,  // ..A.L...
                /* 0198 */  0x8F, 0xCF, 0x63, 0x32, 0xFC, 0xB3, 0xC4, 0xB3,  // ..c2....
                /* 01A0 */  0x85, 0x35, 0x4F, 0x4A, 0x73, 0x38, 0xAD, 0x17,  // .5OJs8..
                /* 01A8 */  0x02, 0x0F, 0x41, 0x66, 0x20, 0x9A, 0x38, 0x57,  // ..Af .8W
                /* 01B0 */  0x78, 0xB5, 0xB2, 0xB1, 0x5A, 0x1F, 0x2F, 0xA8,  // x...Z./.
                /* 01B8 */  0xB8, 0x63, 0x82, 0x94, 0x4E, 0x88, 0xC0, 0x1E,  // .c..N...
                /* 01C0 */  0xC0, 0xC9, 0x9C, 0x46, 0x9F, 0x23, 0x27, 0x30,  // ...F.#'0
                /* 01C8 */  0x67, 0x14, 0xFE, 0x11, 0xC3, 0x57, 0x83, 0xD7,  // g....W..
                /* 01D0 */  0x00, 0x86, 0xE9, 0x6B, 0x45, 0xA4, 0x68, 0x27,  // ...kE.h'
                /* 01D8 */  0x61, 0x09, 0xE0, 0x3A, 0x94, 0xF0, 0xF0, 0x10,  // a..:....
                /* 01E0 */  0x8A, 0x3E, 0x2E, 0x3A, 0x0C, 0x87, 0x05, 0xA3,  // .>.:....
                /* 01E8 */  0x20, 0x3E, 0x09, 0x38, 0x08, 0x84, 0x9C, 0x1C,  //  >.8....
                /* 01F0 */  0x0A, 0x50, 0x47, 0x01, 0x8F, 0xEB, 0x10, 0x8E,  // .PG.....
                /* 01F8 */  0xE2, 0x21, 0x84, 0xCD, 0xE2, 0xC9, 0x01, 0xD6,  // .!......
                /* 0200 */  0x58, 0x8E, 0xEA, 0xFF, 0x7F, 0x2C, 0x9E, 0x85,  // X....,..
                /* 0208 */  0xE1, 0xFC, 0x55, 0xA1, 0x70, 0xE4, 0x46, 0xF0,  // ..U.p.F.
                /* 0210 */  0x02, 0x62, 0x02, 0x76, 0x32, 0x80, 0x7F, 0xEB,  // .b.v2...
                /* 0218 */  0xF0, 0x04, 0x4F, 0xA1, 0xB3, 0x3B, 0x86, 0x08,  // ..O..;..
                /* 0220 */  0x2C, 0xF0, 0x64, 0x00, 0x0A, 0x20, 0x5F, 0x03,  // ,.d.. _.
                /* 0228 */  0x3C, 0xDB, 0x47, 0x01, 0x36, 0x87, 0x10, 0x61,  // <.G.6..a
                /* 0230 */  0xA2, 0x19, 0x1E, 0xB3, 0x52, 0x5B, 0xE0, 0x90,  // ....R[..
                /* 0238 */  0xAC, 0x71, 0xA1, 0x4E, 0x06, 0x3E, 0x26, 0xC0,  // .q.N.>&.
                /* 0240 */  0x18, 0xD4, 0x4B, 0x84, 0x6D, 0xC0, 0xD2, 0x91,  // ..K.m...
                /* 0248 */  0x72, 0x58, 0xA3, 0x85, 0x3D, 0xE0, 0x07, 0x08,  // rX..=...
                /* 0250 */  0x5F, 0x3E, 0x3C, 0x33, 0x63, 0x84, 0xF5, 0xB1,  // _><3c...
                /* 0258 */  0x03, 0x1C, 0x80, 0x78, 0xEF, 0x37, 0x0E, 0x32,  // ...x.7.2
                /* 0260 */  0x01, 0x03, 0x32, 0xC1, 0x27, 0x19, 0xD0, 0x1C,  // ..2.'...
                /* 0268 */  0x18, 0x70, 0xA3, 0x78, 0x60, 0x80, 0x87, 0xF6,  // .p.x`...
                /* 0270 */  0xC2, 0x80, 0xD3, 0x75, 0x38, 0xF0, 0x6A, 0x75,  // ...u8.ju
                /* 0278 */  0x86, 0xE0, 0xA2, 0x0E, 0x3F, 0x7E, 0x2B, 0x68,  // ....?~+h
                /* 0280 */  0xE2, 0xC7, 0xE0, 0x1B, 0x84, 0xEF, 0x00, 0xAD,  // ........
                /* 0288 */  0xCE, 0x53, 0xB7, 0x98, 0x10, 0x61, 0x62, 0xC5,  // .S...ab.
                /* 0290 */  0x39, 0x16, 0x1F, 0x4D, 0x7C, 0xF7, 0x30, 0xC1,  // 9..M|.0.
                /* 0298 */  0xD8, 0x07, 0x08, 0x7A, 0x70, 0x70, 0x60, 0x12,  // ...zpp`.
                /* 02A0 */  0x85, 0x3E, 0x40, 0xA0, 0x62, 0x1E, 0x20, 0x28,  // .>@.b. (
                /* 02A8 */  0x88, 0xFF, 0xFF, 0x80, 0xCE, 0x70, 0x80, 0x40,  // .....p.@
                /* 02B0 */  0xAB, 0x38, 0x40, 0x20, 0x0E, 0x09, 0xBE, 0x08,  // .8@ ....
                /* 02B8 */  0xBC, 0x0F, 0xB0, 0x89, 0x7A, 0xCE, 0xFC, 0xCA,  // ....z...
                /* 02C0 */  0xE4, 0xD9, 0x19, 0xD8, 0x6A, 0xEE, 0x05, 0x28,  // ....j..(
                /* 02C8 */  0x30, 0x5F, 0x1F, 0x30, 0x23, 0xF4, 0xF1, 0x01,  // 0_.0#...
                /* 02D0 */  0x4C, 0xFA, 0x6E, 0x0F, 0x20, 0x47, 0xE7, 0x47,  // L.n. G.G
                /* 02D8 */  0x0F, 0xE0, 0x3D, 0x14, 0x1F, 0x3D, 0x80, 0xF7,  // ..=..=..
                /* 02E0 */  0x68, 0x7D, 0xF4, 0x00, 0x97, 0x8E, 0xA3, 0x07,  // h}......
                /* 02E8 */  0xEA, 0xFF, 0x7F, 0xF4, 0x00, 0x8E, 0xA3, 0x7B,  // .......{
                /* 02F0 */  0xF4, 0x00, 0xCB, 0x39, 0x83, 0x5D, 0x3C, 0x7C,  // ...9.]<|
                /* 02F8 */  0xCE, 0xC0, 0x22, 0xBD, 0x67, 0x60, 0x8F, 0x11,  // ..".g`..
                /* 0300 */  0x96, 0x77, 0x14, 0x42, 0x8D, 0xD1, 0xC2, 0x1E,  // .w.B....
                /* 0308 */  0x04, 0xC2, 0x7C, 0x74, 0x62, 0x98, 0x0F, 0x1E,  // ..|tb...
                /* 0310 */  0xEC, 0xAE, 0x14, 0xE6, 0x38, 0x42, 0x9D, 0x40,  // ....8B.@
                /* 0318 */  0x90, 0x77, 0xA3, 0x68, 0x81, 0xC2, 0x44, 0x79,  // .w.h..Dy
                /* 0320 */  0xC2, 0x62, 0x07, 0x21, 0x80, 0x03, 0xC3, 0xF5,  // .b.!....
                /* 0328 */  0xFF, 0xFF, 0xF8, 0x00, 0x2E, 0x1F, 0xC7, 0x07,  // ........
                /* 0330 */  0xA0, 0x7B, 0x82, 0xF3, 0xF1, 0x01, 0x1C, 0xC7,  // .{......
                /* 0338 */  0x05, 0xCC, 0xF9, 0x81, 0xDD, 0x11, 0x7D, 0x5D,  // ......}]
                /* 0340 */  0xC0, 0x22, 0xF9, 0xBC, 0xC0, 0x4E, 0x35, 0xE4,  // ."...N5.
                /* 0348 */  0x18, 0x84, 0x3A, 0x16, 0x58, 0xC4, 0x4B, 0x41,  // ..:.X.KA
                /* 0350 */  0x1E, 0xE7, 0x4A, 0xC0, 0x3D, 0x89, 0x47, 0x0A,  // ..J.=.G.
                /* 0358 */  0x5F, 0x06, 0x7D, 0x25, 0x32, 0xC6, 0x33, 0x10,  // _.}%2.3.
                /* 0360 */  0x60, 0xF7, 0xFF, 0x7F, 0x06, 0x02, 0xF8, 0x10,  // `.......
                /* 0368 */  0xFB, 0xD4, 0x01, 0xBA, 0x11, 0xFB, 0xD4, 0x01,  // ........
                /* 0370 */  0x5C, 0xE7, 0xF8, 0xD4, 0x01, 0x96, 0x43, 0x06,  // \.....C.
                /* 0378 */  0xBB, 0x72, 0xB0, 0xDB, 0x9C, 0x4F, 0x19, 0xD8,  // .r...O..
                /* 0380 */  0x3B, 0x84, 0x0F, 0x72, 0xEC, 0xFF, 0x7F, 0x90,  // ;..r....
                /* 0388 */  0xC3, 0x8F, 0xFA, 0x3C, 0xDF, 0xEB, 0x3C, 0xBD,  // ...<..<.
                /* 0390 */  0x07, 0x61, 0x0F, 0xFE, 0x79, 0xD6, 0x17, 0x90,  // .a..y...
                /* 0398 */  0xD8, 0x46, 0xF2, 0x40, 0x30, 0xA7, 0x0E, 0x80,  // .F.@0...
                /* 03A0 */  0xC7, 0xFF, 0xFF, 0x83, 0x1C, 0x70, 0x3A, 0xA6,  // .....p:.
                /* 03A8 */  0xFB, 0x20, 0x07, 0x38, 0x39, 0x67, 0x60, 0x67,  // . .89g`g
                /* 03B0 */  0xF1, 0x9C, 0x01, 0xEB, 0xDC, 0xC1, 0x64, 0x9C,  // ......d.
                /* 03B8 */  0x3B, 0x50, 0x1C, 0x96, 0x71, 0xEE, 0x80, 0x72,  // ;P..q..r
                /* 03C0 */  0x1A, 0x05, 0x1C, 0xFE, 0xFF, 0x8F, 0x4E, 0x00,  // ......N.
                /* 03C8 */  0xCF, 0xAC, 0x1C, 0x9D, 0x00, 0x2D, 0xFF, 0xFF,  // .....-..
                /* 03D0 */  0x53, 0x07, 0xFE, 0x2A, 0x0A, 0x63, 0x2C, 0x3A,  // S..*.c,:
                /* 03D8 */  0x3A, 0x41, 0x39, 0x46, 0x9D, 0xEA, 0x93, 0xE9,  // :A9F....
                /* 03E0 */  0x29, 0x9C, 0xD4, 0xEB, 0x87, 0x27, 0xF0, 0x30,  // )....'.0
                /* 03E8 */  0x75, 0xF2, 0xEF, 0xA6, 0x1E, 0x44, 0xF0, 0xE7,  // u....D..
                /* 03F0 */  0x84, 0x08, 0x67, 0xE9, 0xA1, 0x93, 0x53, 0x07,  // ..g...S.
                /* 03F8 */  0x40, 0xCF, 0xFF, 0xFF, 0x21, 0x16, 0xB8, 0x7F,  // @...!...
                /* 0400 */  0x22, 0x7C, 0x88, 0x05, 0x9C, 0x9C, 0x33, 0x3C,  // "|....3<
                /* 0408 */  0x86, 0xF7, 0x0C, 0x1C, 0xCE, 0x83, 0x06, 0x47,  // .......G
                /* 0410 */  0x09, 0xF4, 0xA2, 0x81, 0x39, 0x78, 0x30, 0x61,  // ....9x0a
                /* 0418 */  0x67, 0x6A, 0x94, 0xA4, 0x93, 0x87, 0x5F, 0x04,  // gj...._.
                /* 0420 */  0x1A, 0xF7, 0x71, 0xB1, 0x43, 0x87, 0x91, 0x9F,  // ..q.C...
                /* 0428 */  0x43, 0x0C, 0xF2, 0x2C, 0x75, 0x06, 0xFC, 0x16,  // C..,u...
                /* 0430 */  0xEB, 0x13, 0x35, 0x60, 0xE1, 0xFF, 0x7F, 0xA2,  // ..5`....
                /* 0438 */  0x06, 0xFE, 0xE7, 0x38, 0xF0, 0x19, 0x3A, 0xC7,  // ...8..:.
                /* 0440 */  0x01, 0x5A, 0x0E, 0x0B, 0x7C, 0x10, 0x2F, 0x0B,  // .Z..|./.
                /* 0448 */  0x18, 0x98, 0xA7, 0x05, 0x9F, 0x1F, 0x30, 0xC7,  // ......0.
                /* 0450 */  0x51, 0xB8, 0x03, 0xE0, 0xB0, 0x7C, 0x1C, 0x41,  // Q....|.A
                /* 0458 */  0x5E, 0x06, 0x3C, 0xF7, 0x63, 0x30, 0xC4, 0x03,  // ^.<.c0..
                /* 0460 */  0xC1, 0xD3, 0x03, 0x3B, 0x04, 0x01, 0x9F, 0xFF,  // ...;....
                /* 0468 */  0xFF, 0x71, 0x14, 0xE0, 0xB2, 0xA2, 0x73, 0x07,  // .q....s.
                /* 0470 */  0x28, 0xFF, 0xFF, 0xE7, 0x0E, 0x60, 0x7B, 0x03,  // (....`{.
                /* 0478 */  0xC2, 0x00, 0x1E, 0xBD, 0x8F, 0xD5, 0x3E, 0x68,  // ......>h
                /* 0480 */  0x60, 0x8E, 0x11, 0x56, 0x68, 0xD3, 0xA7, 0x46,  // `..Vh..F
                /* 0488 */  0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3, 0xA0,  // .V...(..
                /* 0490 */  0x56, 0x9F, 0x4A, 0x8D, 0x19, 0x1B, 0x91, 0x25,  // V.J....%
                /* 0498 */  0xBC, 0x14, 0x34, 0x60, 0x07, 0x00, 0xA1, 0x22,  // ..4`..."
                /* 04A0 */  0x24, 0x40, 0x34, 0x72, 0x16, 0x32, 0x88, 0x80,  // $@4r.2..
                /* 04A8 */  0xAC, 0xF0, 0x5F, 0x21, 0x20, 0xCB, 0x05, 0x11,  // .._! ...
                /* 04B0 */  0x90, 0x85, 0x79, 0x00, 0x62, 0x32, 0x41, 0x04,  // ..y.b2A.
                /* 04B8 */  0x64, 0xD1, 0x26, 0x80, 0x58, 0x04, 0x10, 0x01,  // d.&.X...
                /* 04C0 */  0x39, 0xC7, 0x2A, 0x05, 0xE4, 0x50, 0x20, 0x02,  // 9.*..P .
                /* 04C8 */  0xB2, 0xFC, 0x75, 0x0A, 0xC8, 0x61, 0x40, 0x04,  // ..u..a@.
                /* 04D0 */  0xE4, 0x44, 0x3A, 0x80, 0x58, 0x3C, 0x10, 0x01,  // .D:.X<..
                /* 04D8 */  0x39, 0x88, 0x0F, 0x20, 0x16, 0x0B, 0x44, 0x40,  // 9.. ..D@
                /* 04E0 */  0xCE, 0x46, 0x23, 0x20, 0x07, 0xA5, 0x10, 0x90,  // .F# ....
                /* 04E8 */  0x23, 0x29, 0x01, 0x62, 0x01, 0x41, 0x04, 0xE4,  // #).b.A..
                /* 04F0 */  0x94, 0x0F, 0x5E, 0x01, 0x39, 0x32, 0x88, 0x80,  // ..^.92..
                /* 04F8 */  0x1C, 0xEE, 0xBD, 0x28, 0x20, 0x47, 0x05, 0x11,  // ...( G..
                /* 0500 */  0x90, 0x63, 0x7B, 0x01, 0x62, 0x22, 0x56, 0x2F,  // .c{.b"V/
                /* 0508 */  0x20, 0xAB, 0xF9, 0x8A, 0x08, 0xC8, 0xD2, 0x40,  //  ......@
                /* 0510 */  0x34, 0x50, 0xE2, 0x66, 0xA0, 0x14, 0x44, 0x40,  // 4P.f..D@
                /* 0518 */  0xFE, 0xFF, 0x03                                 // ...
            })
        }
    }

    Scope (_SB.PCI0.I2C0)
    {
        Device (I2CD)
        {
            Name (_HID, "DELL0876")  // _HID: Hardware ID
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((PLSZ == 0x17))
                {
                    _HID = "DELL0877"
                    Return (Zero)
                }
            }

            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (0x20)
                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (SBFI, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.PCI0.I2C0",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                    GpioInt (Level, ActiveLow, Exclusive, PullDefault, 0x0000,
                        "\\_SB.PCI0.GPI0", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0064
                        }
                })
                Return (SBFI) /* \_SB_.PCI0.I2C0.I2CD._CRS.SBFI */
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (CMS2, SystemIO, 0x72, 0x02)
        Field (CMS2, ByteAcc, NoLock, Preserve)
        {
            CMSI,   8, 
            CMSD,   8
        }

        Method (CMSW, 2, NotSerialized)
        {
            CMSI = Arg0
            CMSD = Arg1
        }

        Method (CMSR, 1, NotSerialized)
        {
            CMSI = Arg0
            Return (CMSD) /* \_SB_.CMSD */
        }
    }

    Method (TPTS, 1, Serialized)
    {
        OPTS (Arg0)
    }

    Method (TPWK, 1, Serialized)
    {
        OWAK (Arg0)
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (PS2K)
        {
            Name (_HID, "MSFT0001")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IRQNoFlags ()
                    {1}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    IO (Decode16,
                        0x0060,             // Range Minimum
                        0x0060,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IO (Decode16,
                        0x0064,             // Range Minimum
                        0x0064,             // Range Maximum
                        0x00,               // Alignment
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                }
                EndDependentFn ()
            })
            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                KBFG = Arg0
            }
        }

        Scope (\)
        {
            Name (KBFG, One)
        }
    }
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : 64
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]                 FACS Address : 5BD26100
[028h 0040   4]                 DSDT Address : 5B81A260
[02Ch 0044   1]                        Model : 00
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00001800
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001804
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001850
[04Ch 0076   4]       PM Timer Block Address : 00001808
[050h 0080   4]           GPE0 Block Address : 00001860
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 20
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 10
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0065
[062h 0098   2]                   C3 Latency : 0039
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 00
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0012
               Legacy Devices Supported (V2) : 0
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0003C6A5
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 1
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 1
                Remote Power-on capable (V4) : 1
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 00000000000000B2

[080h 0128   1]         Value to cause reset : C5
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 01
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 000000005B81A260
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000001800

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000001804

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000001850

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000001808

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 80
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 01 [Byte Access:8]
[0E0h 0224   8]                      Address : 0000000000001860

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 01 [Byte Access:8]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 01 [SystemIO]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 03 [DWord Access:32]
[0F8h 0248   8]                      Address : 0000000000001804

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 01 [SystemIO]
[101h 0257   1]                    Bit Width : 08
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 03 [DWord Access:32]
[104h 0260   8]                      Address : 0000000000001800

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 64 41 4C 57 41 52 45  // FACP.....dALWARE
    0010: 41 4C 49 45 4E 57 52 45 09 20 07 01 41 4D 49 20  // ALIENWRE. ..AMI 
    0020: 13 00 01 00 00 61 D2 5B 60 A2 81 5B 00 02 09 00  // .....a.[`..[....
    0030: B2 00 00 00 A0 A1 00 00 00 18 00 00 00 00 00 00  // ................
    0040: 04 18 00 00 00 00 00 00 50 18 00 00 08 18 00 00  // ........P.......
    0050: 60 18 00 00 00 00 00 00 04 02 01 04 20 00 10 00  // `........... ...
    0060: 65 00 39 00 00 04 10 00 00 00 0D 00 32 12 00 00  // e.9.........2...
    0070: A5 C6 03 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0080: C5 00 00 01 00 00 00 00 00 00 00 00 60 A2 81 5B  // ............`..[
    0090: 00 00 00 00 01 20 00 02 00 18 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 18 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 18 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 18 00 00 00 00 00 00 01 80 00 01  // . ..............
    00E0: 60 18 00 00 00 00 00 00 01 00 00 01 00 00 00 00  // `...............
    00F0: 00 00 00 00 01 08 00 03 04 18 00 00 00 00 00 00  // ................
    0100: 01 08 00 03 00 18 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 36E7E305
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 02
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 05 E3 E7 36 00 00 00 00  // FACS@......6....
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FIDT
----
[000h 0000   4]                    Signature : "FIDT"    
[004h 0004   4]                 Table Length : 0000009C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 1B
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


**** Unknown ACPI table signature [FIDT]


Raw Table Data: Length 156 (0x9C)

    0000: 46 49 44 54 9C 00 00 00 01 1B 41 4C 57 41 52 45  // FIDT......ALWARE
    0010: 41 4C 49 45 4E 57 52 45 09 20 07 01 41 4D 49 20  // ALIENWRE. ..AMI 
    0020: 13 00 01 00 24 46 49 44 04 78 00 44 44 52 35 31  // ....$FID.x.DDR51
    0030: 30 31 34 00 B6 E0 BC 91 AA DF 04 79 0F 4F 9A 2E  // 014........y.O..
    0040: CC B1 B9 52 30 35 00 31 33 00 30 30 00 31 34 00  // ...R05.13.00.14.
    0050: E3 07 0A 15 14 03 34 FF FF 41 4C 57 41 52 45 41  // ......4..ALWAREA
    0060: 4C 49 45 4E 57 52 45 31 00 00 00 FF FF FF FF FF  // LIENWRE1........
    0070: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0080: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0090: FF FF FF FF FF FF FF FF FF FF FF FF              // ............


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000044
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : DD
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013


[024h 0036   2]                Subtable Type : 0001
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]          S3PT Record Address : 000000005C13F030

[034h 0052   2]                Subtable Type : 0000
[036h 0054   1]                       Length : 10
[037h 0055   1]                     Revision : 01
[038h 0056   4]                     Reserved : 00000000
[03Ch 0060   8]     FPDT Boot Record Address : 000000005C13F050

Raw Table Data: Length 68 (0x44)

    0000: 46 50 44 54 44 00 00 00 01 DD 41 4C 57 41 52 45  // FPDTD.....ALWARE
    0010: 41 4C 49 45 4E 57 52 45 09 20 07 01 41 4D 49 20  // ALIENWRE. ..AMI 
    0020: 13 00 01 00 01 00 10 01 00 00 00 00 30 F0 13 5C  // ............0..\
    0030: 00 00 00 00 00 00 10 01 00 00 00 00 50 F0 13 5C  // ............P..\
    0040: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : D6
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 D6 49 4E 54 45 4C 20  // HPET8.....INTEL 
    0010: 41 4C 49 45 4E 57 52 45 02 00 00 00 20 20 20 20  // ALIENWRE....    
    0020: 13 00 00 01 01 A2 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 80 00 00                          // ........


LPIT
----
[000h 0000   4]                    Signature : "LPIT"    [Low Power Idle Table]
[004h 0004   4]                 Table Length : 0000005C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 58
[00Ah 0010   6]                       Oem ID : "INTEL "
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036   4]                Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040   4]                       Length : 00000038
[02Ch 0044   2]                    Unique ID : 0000
[02Eh 0046   2]                     Reserved : 0000
[030h 0048   4]        Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052  12]                Entry Trigger : [Generic Address Structure]
[034h 0052   1]                     Space ID : 7F [FunctionalFixedHW]
[035h 0053   1]                    Bit Width : 01
[036h 0054   1]                   Bit Offset : 02
[037h 0055   1]         Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056   8]                      Address : 0000000000000060

[040h 0064   4]                    Residency : 00007530
[044h 0068   4]                      Latency : 00000BB8
[048h 0072  12]            Residency Counter : [Generic Address Structure]
[048h 0072   1]                     Space ID : 00 [SystemMemory]
[049h 0073   1]                    Bit Width : 20
[04Ah 0074   1]                   Bit Offset : 00
[04Bh 0075   1]         Encoded Access Width : 03 [DWord Access:32]
[04Ch 0076   8]                      Address : 00000000FE00193C

[054h 0084   8]            Counter Frequency : 000000000000256C


Raw Table Data: Length 92 (0x5C)

    0000: 4C 50 49 54 5C 00 00 00 01 58 49 4E 54 45 4C 20  // LPIT\....XINTEL 
    0010: 41 4C 49 45 4E 57 52 45 02 00 00 00 20 20 20 20  // ALIENWRE....    
    0020: 13 00 00 01 00 00 00 00 38 00 00 00 00 00 00 00  // ........8.......
    0030: 00 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    0040: 30 75 00 00 B8 0B 00 00 00 20 00 03 3C 19 00 FE  // 0u....... ..<...
    0050: 00 00 00 00 6C 25 00 00 00 00 00 00              // ....l%......


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B2
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "MSFT"
[020h 0032   4]        Asl Compiler Revision : 00000097

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000E0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : FF
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 B2 41 4C 57 41 52 45  // MCFG<.....ALWARE
    0010: 41 4C 49 45 4E 57 52 45 09 20 07 01 4D 53 46 54  // ALIENWRE. ..MSFT
    0020: 97 00 00 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 FF 00 00 00 00              // ............


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : AE
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036  49] Software Licensing Structure : \
    01 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 \
    1D 00 00 00 54 4A 4E 33 4B 2D 46 36 59 36 37 2D \
    39 46 52 4B 39 2D 36 44 4A 57 39 2D 33 52 52 37 \
    44 

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 AE 41 4C 57 41 52 45  // MSDMU.....ALWARE
    0010: 41 4C 49 45 4E 57 52 45 09 20 07 01 41 4D 49 20  // ALIENWRE. ..AMI 
    0020: 13 00 01 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 54 4A 4E 33 4B 2D 46 36  // ........TJN3K-F6
    0040: 59 36 37 2D 39 46 52 4B 39 2D 36 44 4A 57 39 2D  // Y67-9FRK9-6DJW9-
    0050: 33 52 52 37 44                                   // 3RR7D


SLIC
----
[000h 0000   4]                    Signature : "SLIC"    [Software Licensing Description Table]
[004h 0004   4]                 Table Length : 00000176
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 85
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036 338] Software Licensing Structure : \
    00 00 00 00 9C 00 00 00 06 02 00 00 00 24 00 00 \
    52 53 41 31 00 04 00 00 01 00 01 00 1B 24 73 DF \
    1D 89 5B DE 2F C3 93 90 98 45 7E 58 CB A0 0B 43 \
    FA F4 A2 9A 38 D9 27 6C 22 9A 77 7B 01 6C 84 32 \
    40 1D F0 34 B3 F9 B6 83 BB BB 91 06 11 FE BA 69 \
    B2 4F E5 57 BB F8 D6 89 94 08 63 67 4E 34 D0 26 \
    EF C2 D2 A8 D4 E4 C5 6F 7B 26 14 D6 90 8D C4 A5 \
    51 72 69 11 47 05 94 BB 58 43 E7 F2 18 9A E7 84 \
    0E 99 14 A4 96 1C 3A 8A 73 6A 03 14 39 C4 28 D5 \
    FC B9 DD 86 A1 96 67 AB BC DA 7D E1 01 00 00 00 \
    B6 00 00 00 00 00 02 00 41 4C 57 41 52 45 41 4C \
    49 45 4E 57 52 45 57 49 4E 44 4F 57 53 20 01 00 \
    02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 \
    00 00 55 35 96 8D 4E 4F C5 41 74 AA D0 FD 8E AD \
    49 73 1E F9 DE 26 A3 29 1E 7E 47 39 70 E4 A2 16 \
    B2 05 8D 4F 89 0C 59 52 5D DD C2 68 E9 F3 E8 1A \
    B5 3A 9D 42 59 C3 81 91 76 60 A8 D2 2B 34 FA 6C \
    32 75 BC 09 D0 F2 21 B4 C4 62 BD 70 8D F7 DF 7B \
    D1 C9 77 BA 31 69 92 BB 87 8C 95 82 B0 78 5B E7 \
    B7 1B FF C3 D5 63 B1 59 97 8B A9 5A EF 13 CE 90 \
    A5 70 36 AF 10 6E ED C4 34 C8 7E DB 87 0E 7A D5 \
    7F 62 

Raw Table Data: Length 374 (0x176)

    0000: 53 4C 49 43 76 01 00 00 01 85 41 4C 57 41 52 45  // SLICv.....ALWARE
    0010: 41 4C 49 45 4E 57 52 45 09 20 07 01 41 4D 49 20  // ALIENWRE. ..AMI 
    0020: 13 00 01 00 00 00 00 00 9C 00 00 00 06 02 00 00  // ................
    0030: 00 24 00 00 52 53 41 31 00 04 00 00 01 00 01 00  // .$..RSA1........
    0040: 1B 24 73 DF 1D 89 5B DE 2F C3 93 90 98 45 7E 58  // .$s...[./....E~X
    0050: CB A0 0B 43 FA F4 A2 9A 38 D9 27 6C 22 9A 77 7B  // ...C....8.'l".w{
    0060: 01 6C 84 32 40 1D F0 34 B3 F9 B6 83 BB BB 91 06  // .l.2@..4........
    0070: 11 FE BA 69 B2 4F E5 57 BB F8 D6 89 94 08 63 67  // ...i.O.W......cg
    0080: 4E 34 D0 26 EF C2 D2 A8 D4 E4 C5 6F 7B 26 14 D6  // N4.&.......o{&..
    0090: 90 8D C4 A5 51 72 69 11 47 05 94 BB 58 43 E7 F2  // ....Qri.G...XC..
    00A0: 18 9A E7 84 0E 99 14 A4 96 1C 3A 8A 73 6A 03 14  // ..........:.sj..
    00B0: 39 C4 28 D5 FC B9 DD 86 A1 96 67 AB BC DA 7D E1  // 9.(.......g...}.
    00C0: 01 00 00 00 B6 00 00 00 00 00 02 00 41 4C 57 41  // ............ALWA
    00D0: 52 45 41 4C 49 45 4E 57 52 45 57 49 4E 44 4F 57  // REALIENWREWINDOW
    00E0: 53 20 01 00 02 00 00 00 00 00 00 00 00 00 00 00  // S ..............
    00F0: 00 00 00 00 00 00 55 35 96 8D 4E 4F C5 41 74 AA  // ......U5..NO.At.
    0100: D0 FD 8E AD 49 73 1E F9 DE 26 A3 29 1E 7E 47 39  // ....Is...&.).~G9
    0110: 70 E4 A2 16 B2 05 8D 4F 89 0C 59 52 5D DD C2 68  // p......O..YR]..h
    0120: E9 F3 E8 1A B5 3A 9D 42 59 C3 81 91 76 60 A8 D2  // .....:.BY...v`..
    0130: 2B 34 FA 6C 32 75 BC 09 D0 F2 21 B4 C4 62 BD 70  // +4.l2u....!..b.p
    0140: 8D F7 DF 7B D1 C9 77 BA 31 69 92 BB 87 8C 95 82  // ...{..w.1i......
    0150: B0 78 5B E7 B7 1B FF C3 D5 63 B1 59 97 8B A9 5A  // .x[......c.Y...Z
    0160: EF 13 CE 90 A5 70 36 AF 10 6E ED C4 34 C8 7E DB  // .....p6..n..4.~.
    0170: 87 0E 7A D5 7F 62                                // ..z..b


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "SaSsdt", "SaSsdt ", 0x00003000)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.B0D3, DeviceObj)
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.GFX0.HDOS, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GFX0.HNOT, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.IPU0, DeviceObj)
    External (CPSC, UnknownObj)
    External (DSEN, UnknownObj)
    External (ECON, IntObj)
    External (GUAM, MethodObj)    // 1 Arguments
    External (OSYS, IntObj)
    External (PBCL, MethodObj)    // 0 Arguments
    External (PNHM, IntObj)
    External (S0ID, UnknownObj)

    OperationRegion (SANV, SystemMemory, 0x5BD26598, 0x01F4)
    Field (SANV, AnyAcc, Lock, Preserve)
    {
        ASLB,   32, 
        IMON,   8, 
        IGDS,   8, 
        IBTT,   8, 
        IPAT,   8, 
        IPSC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        GSMI,   8, 
        PAVP,   8, 
        CADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        DIDX,   32, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        NXDX,   32, 
        LIDS,   8, 
        KSV0,   32, 
        KSV1,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        ALFP,   8, 
        IPTP,   8, 
        EDPV,   8, 
        SGMD,   8, 
        SGFL,   8, 
        SGGP,   8, 
        HRE0,   8, 
        HRG0,   32, 
        HRA0,   8, 
        PWE0,   8, 
        PWG0,   32, 
        PWA0,   8, 
        P1GP,   8, 
        HRE1,   8, 
        HRG1,   32, 
        HRA1,   8, 
        PWE1,   8, 
        PWG1,   32, 
        PWA1,   8, 
        P2GP,   8, 
        HRE2,   8, 
        HRG2,   32, 
        HRA2,   8, 
        PWE2,   8, 
        PWG2,   32, 
        PWA2,   8, 
        DLPW,   16, 
        DLHR,   16, 
        EECP,   8, 
        XBAS,   32, 
        GBAS,   16, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        LTRX,   8, 
        OBFX,   8, 
        LTRY,   8, 
        OBFY,   8, 
        LTRZ,   8, 
        OBFZ,   8, 
        LTRW,   8, 
        OBFA,   8, 
        SMSL,   16, 
        SNSL,   16, 
        P0UB,   8, 
        P1UB,   8, 
        P2UB,   8, 
        P3UB,   8, 
        PCSL,   8, 
        PBGE,   8, 
        M64B,   64, 
        M64L,   64, 
        CPEX,   32, 
        EEC1,   8, 
        EEC2,   8, 
        SBN0,   8, 
        SBN1,   8, 
        SBN2,   8, 
        M32B,   32, 
        M32L,   32, 
        P0WK,   32, 
        P1WK,   32, 
        P2WK,   32, 
        VTDS,   8, 
        VTB1,   32, 
        VTB2,   32, 
        VTB3,   32, 
        VE1V,   16, 
        VE2V,   16, 
        SBN3,   8, 
        P3GP,   8, 
        HRE3,   8, 
        HRG3,   32, 
        HRA3,   8, 
        PWE3,   8, 
        PWG3,   32, 
        PWA3,   8, 
        P3WK,   32, 
        EEC3,   8, 
        RPIN,   8, 
        RPBA,   32, 
        Offset (0x1F4)
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            DSEN = (Arg0 & 0x07)
            If (((Arg0 & 0x03) == Zero))
            {
                If (CondRefOf (HDOS))
                {
                    HDOS ()
                }
            }
        }

        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            If ((IPTP == One))
            {
                NDID = One
            }
            Else
            {
                NDID = Zero
            }

            If ((DIDL != Zero))
            {
                DID1 = SDDL (DIDL)
            }

            If ((DDL2 != Zero))
            {
                DID2 = SDDL (DDL2)
            }

            If ((DDL3 != Zero))
            {
                DID3 = SDDL (DDL3)
            }

            If ((DDL4 != Zero))
            {
                DID4 = SDDL (DDL4)
            }

            If ((DDL5 != Zero))
            {
                DID5 = SDDL (DDL5)
            }

            If ((DDL6 != Zero))
            {
                DID6 = SDDL (DDL6)
            }

            If ((DDL7 != Zero))
            {
                DID7 = SDDL (DDL7)
            }

            If ((DDL8 != Zero))
            {
                DID8 = SDDL (DDL8)
            }

            If ((DDL9 != Zero))
            {
                DID9 = SDDL (DDL9)
            }

            If ((DD10 != Zero))
            {
                DIDA = SDDL (DD10)
            }

            If ((DD11 != Zero))
            {
                DIDB = SDDL (DD11)
            }

            If ((DD12 != Zero))
            {
                DIDC = SDDL (DD12)
            }

            If ((DD13 != Zero))
            {
                DIDD = SDDL (DD13)
            }

            If ((DD14 != Zero))
            {
                DIDE = SDDL (DD14)
            }

            If ((DD15 != Zero))
            {
                DIDF = SDDL (DD15)
            }

            If ((NDID == One))
            {
                Name (TMP1, Package (0x01)
                {
                    0xFFFFFFFF
                })
                If ((IPTP == One))
                {
                    TMP1 [Zero] = 0x00023480
                }
                Else
                {
                    TMP1 [Zero] = (0x00010000 | DID1)
                }

                Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
            }

            If ((NDID == 0x02))
            {
                Name (TMP2, Package (0x02)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP2 [Zero] = (0x00010000 | DID1)
                If ((IPTP == One))
                {
                    TMP2 [One] = 0x00023480
                }
                Else
                {
                    TMP2 [One] = (0x00010000 | DID2)
                }

                Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
            }

            If ((NDID == 0x03))
            {
                Name (TMP3, Package (0x03)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP3 [Zero] = (0x00010000 | DID1)
                TMP3 [One] = (0x00010000 | DID2)
                If ((IPTP == One))
                {
                    TMP3 [0x02] = 0x00023480
                }
                Else
                {
                    TMP3 [0x02] = (0x00010000 | DID3)
                }

                Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
            }

            If ((NDID == 0x04))
            {
                Name (TMP4, Package (0x04)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP4 [Zero] = (0x00010000 | DID1)
                TMP4 [One] = (0x00010000 | DID2)
                TMP4 [0x02] = (0x00010000 | DID3)
                If ((IPTP == One))
                {
                    TMP4 [0x03] = 0x00023480
                }
                Else
                {
                    TMP4 [0x03] = (0x00010000 | DID4)
                }

                Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
            }

            If ((NDID == 0x05))
            {
                Name (TMP5, Package (0x05)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP5 [Zero] = (0x00010000 | DID1)
                TMP5 [One] = (0x00010000 | DID2)
                TMP5 [0x02] = (0x00010000 | DID3)
                TMP5 [0x03] = (0x00010000 | DID4)
                If ((IPTP == One))
                {
                    TMP5 [0x04] = 0x00023480
                }
                Else
                {
                    TMP5 [0x04] = (0x00010000 | DID5)
                }

                Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
            }

            If ((NDID == 0x06))
            {
                Name (TMP6, Package (0x06)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP6 [Zero] = (0x00010000 | DID1)
                TMP6 [One] = (0x00010000 | DID2)
                TMP6 [0x02] = (0x00010000 | DID3)
                TMP6 [0x03] = (0x00010000 | DID4)
                TMP6 [0x04] = (0x00010000 | DID5)
                If ((IPTP == One))
                {
                    TMP6 [0x05] = 0x00023480
                }
                Else
                {
                    TMP6 [0x05] = (0x00010000 | DID6)
                }

                Return (TMP6) /* \_SB_.PCI0.GFX0._DOD.TMP6 */
            }

            If ((NDID == 0x07))
            {
                Name (TMP7, Package (0x07)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP7 [Zero] = (0x00010000 | DID1)
                TMP7 [One] = (0x00010000 | DID2)
                TMP7 [0x02] = (0x00010000 | DID3)
                TMP7 [0x03] = (0x00010000 | DID4)
                TMP7 [0x04] = (0x00010000 | DID5)
                TMP7 [0x05] = (0x00010000 | DID6)
                If ((IPTP == One))
                {
                    TMP7 [0x06] = 0x00023480
                }
                Else
                {
                    TMP7 [0x06] = (0x00010000 | DID7)
                }

                Return (TMP7) /* \_SB_.PCI0.GFX0._DOD.TMP7 */
            }

            If ((NDID == 0x08))
            {
                Name (TMP8, Package (0x08)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP8 [Zero] = (0x00010000 | DID1)
                TMP8 [One] = (0x00010000 | DID2)
                TMP8 [0x02] = (0x00010000 | DID3)
                TMP8 [0x03] = (0x00010000 | DID4)
                TMP8 [0x04] = (0x00010000 | DID5)
                TMP8 [0x05] = (0x00010000 | DID6)
                TMP8 [0x06] = (0x00010000 | DID7)
                If ((IPTP == One))
                {
                    TMP8 [0x07] = 0x00023480
                }
                Else
                {
                    TMP8 [0x07] = (0x00010000 | DID8)
                }

                Return (TMP8) /* \_SB_.PCI0.GFX0._DOD.TMP8 */
            }

            If ((NDID == 0x09))
            {
                Name (TMP9, Package (0x09)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMP9 [Zero] = (0x00010000 | DID1)
                TMP9 [One] = (0x00010000 | DID2)
                TMP9 [0x02] = (0x00010000 | DID3)
                TMP9 [0x03] = (0x00010000 | DID4)
                TMP9 [0x04] = (0x00010000 | DID5)
                TMP9 [0x05] = (0x00010000 | DID6)
                TMP9 [0x06] = (0x00010000 | DID7)
                TMP9 [0x07] = (0x00010000 | DID8)
                If ((IPTP == One))
                {
                    TMP9 [0x08] = 0x00023480
                }
                Else
                {
                    TMP9 [0x08] = (0x00010000 | DID9)
                }

                Return (TMP9) /* \_SB_.PCI0.GFX0._DOD.TMP9 */
            }

            If ((NDID == 0x0A))
            {
                Name (TMPA, Package (0x0A)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPA [Zero] = (0x00010000 | DID1)
                TMPA [One] = (0x00010000 | DID2)
                TMPA [0x02] = (0x00010000 | DID3)
                TMPA [0x03] = (0x00010000 | DID4)
                TMPA [0x04] = (0x00010000 | DID5)
                TMPA [0x05] = (0x00010000 | DID6)
                TMPA [0x06] = (0x00010000 | DID7)
                TMPA [0x07] = (0x00010000 | DID8)
                TMPA [0x08] = (0x00010000 | DID9)
                If ((IPTP == One))
                {
                    TMPA [0x09] = 0x00023480
                }
                Else
                {
                    TMPA [0x09] = (0x00010000 | DIDA)
                }

                Return (TMPA) /* \_SB_.PCI0.GFX0._DOD.TMPA */
            }

            If ((NDID == 0x0B))
            {
                Name (TMPB, Package (0x0B)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPB [Zero] = (0x00010000 | DID1)
                TMPB [One] = (0x00010000 | DID2)
                TMPB [0x02] = (0x00010000 | DID3)
                TMPB [0x03] = (0x00010000 | DID4)
                TMPB [0x04] = (0x00010000 | DID5)
                TMPB [0x05] = (0x00010000 | DID6)
                TMPB [0x06] = (0x00010000 | DID7)
                TMPB [0x07] = (0x00010000 | DID8)
                TMPB [0x08] = (0x00010000 | DID9)
                TMPB [0x09] = (0x00010000 | DIDA)
                If ((IPTP == One))
                {
                    TMPB [0x0A] = 0x00023480
                }
                Else
                {
                    TMPB [0x0A] = (0x00010000 | DIDB)
                }

                Return (TMPB) /* \_SB_.PCI0.GFX0._DOD.TMPB */
            }

            If ((NDID == 0x0C))
            {
                Name (TMPC, Package (0x0C)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPC [Zero] = (0x00010000 | DID1)
                TMPC [One] = (0x00010000 | DID2)
                TMPC [0x02] = (0x00010000 | DID3)
                TMPC [0x03] = (0x00010000 | DID4)
                TMPC [0x04] = (0x00010000 | DID5)
                TMPC [0x05] = (0x00010000 | DID6)
                TMPC [0x06] = (0x00010000 | DID7)
                TMPC [0x07] = (0x00010000 | DID8)
                TMPC [0x08] = (0x00010000 | DID9)
                TMPC [0x09] = (0x00010000 | DIDA)
                TMPC [0x0A] = (0x00010000 | DIDB)
                If ((IPTP == One))
                {
                    TMPC [0x0B] = 0x00023480
                }
                Else
                {
                    TMPC [0x0B] = (0x00010000 | DIDC)
                }

                Return (TMPC) /* \_SB_.PCI0.GFX0._DOD.TMPC */
            }

            If ((NDID == 0x0D))
            {
                Name (TMPD, Package (0x0D)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPD [Zero] = (0x00010000 | DID1)
                TMPD [One] = (0x00010000 | DID2)
                TMPD [0x02] = (0x00010000 | DID3)
                TMPD [0x03] = (0x00010000 | DID4)
                TMPD [0x04] = (0x00010000 | DID5)
                TMPD [0x05] = (0x00010000 | DID6)
                TMPD [0x06] = (0x00010000 | DID7)
                TMPD [0x07] = (0x00010000 | DID8)
                TMPD [0x08] = (0x00010000 | DID9)
                TMPD [0x09] = (0x00010000 | DIDA)
                TMPD [0x0A] = (0x00010000 | DIDB)
                TMPD [0x0B] = (0x00010000 | DIDC)
                If ((IPTP == One))
                {
                    TMPD [0x0C] = 0x00023480
                }
                Else
                {
                    TMPD [0x0C] = (0x00010000 | DIDD)
                }

                Return (TMPD) /* \_SB_.PCI0.GFX0._DOD.TMPD */
            }

            If ((NDID == 0x0E))
            {
                Name (TMPE, Package (0x0E)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPE [Zero] = (0x00010000 | DID1)
                TMPE [One] = (0x00010000 | DID2)
                TMPE [0x02] = (0x00010000 | DID3)
                TMPE [0x03] = (0x00010000 | DID4)
                TMPE [0x04] = (0x00010000 | DID5)
                TMPE [0x05] = (0x00010000 | DID6)
                TMPE [0x06] = (0x00010000 | DID7)
                TMPE [0x07] = (0x00010000 | DID8)
                TMPE [0x08] = (0x00010000 | DID9)
                TMPE [0x09] = (0x00010000 | DIDA)
                TMPE [0x0A] = (0x00010000 | DIDB)
                TMPE [0x0B] = (0x00010000 | DIDC)
                TMPE [0x0C] = (0x00010000 | DIDD)
                If ((IPTP == One))
                {
                    TMPE [0x0D] = 0x00023480
                }
                Else
                {
                    TMPE [0x0D] = (0x00010000 | DIDE)
                }

                Return (TMPE) /* \_SB_.PCI0.GFX0._DOD.TMPE */
            }

            If ((NDID == 0x0F))
            {
                Name (TMPF, Package (0x0F)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPF [Zero] = (0x00010000 | DID1)
                TMPF [One] = (0x00010000 | DID2)
                TMPF [0x02] = (0x00010000 | DID3)
                TMPF [0x03] = (0x00010000 | DID4)
                TMPF [0x04] = (0x00010000 | DID5)
                TMPF [0x05] = (0x00010000 | DID6)
                TMPF [0x06] = (0x00010000 | DID7)
                TMPF [0x07] = (0x00010000 | DID8)
                TMPF [0x08] = (0x00010000 | DID9)
                TMPF [0x09] = (0x00010000 | DIDA)
                TMPF [0x0A] = (0x00010000 | DIDB)
                TMPF [0x0B] = (0x00010000 | DIDC)
                TMPF [0x0C] = (0x00010000 | DIDD)
                TMPF [0x0D] = (0x00010000 | DIDE)
                If ((IPTP == One))
                {
                    TMPF [0x0E] = 0x00023480
                }
                Else
                {
                    TMPF [0x0E] = (0x00010000 | DIDF)
                }

                Return (TMPF) /* \_SB_.PCI0.GFX0._DOD.TMPF */
            }

            If ((NDID == 0x10))
            {
                Name (TMPG, Package (0x10)
                {
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF, 
                    0xFFFFFFFF
                })
                TMPG [Zero] = (0x00010000 | DID1)
                TMPG [One] = (0x00010000 | DID2)
                TMPG [0x02] = (0x00010000 | DID3)
                TMPG [0x03] = (0x00010000 | DID4)
                TMPG [0x04] = (0x00010000 | DID5)
                TMPG [0x05] = (0x00010000 | DID6)
                TMPG [0x06] = (0x00010000 | DID7)
                TMPG [0x07] = (0x00010000 | DID8)
                TMPG [0x08] = (0x00010000 | DID9)
                TMPG [0x09] = (0x00010000 | DIDA)
                TMPG [0x0A] = (0x00010000 | DIDB)
                TMPG [0x0B] = (0x00010000 | DIDC)
                TMPG [0x0C] = (0x00010000 | DIDD)
                TMPG [0x0D] = (0x00010000 | DIDE)
                TMPG [0x0E] = (0x00010000 | DIDF)
                TMPG [0x0F] = 0x00023480
                Return (TMPG) /* \_SB_.PCI0.GFX0._DOD.TMPG */
            }

            Return (Package (0x01)
            {
                0x0400
            })
        }

        Device (DD01)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID1) == 0x0400))
                {
                    EDPV = One
                    NXDX = NXD1 /* \NXD1 */
                    DIDX = DID1 /* \DID1 */
                    Return (One)
                }

                If ((DID1 == Zero))
                {
                    Return (One)
                }
                Else
                {
                    Return ((0xFFFF & DID1))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (CDDS (DID1))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD1) /* \NXD1 */
                }

                Return (NDDS (DID1))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD02)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID2) == 0x0400))
                {
                    EDPV = 0x02
                    NXDX = NXD2 /* \NXD2 */
                    DIDX = DID2 /* \DID2 */
                    Return (0x02)
                }

                If ((DID2 == Zero))
                {
                    Return (0x02)
                }
                Else
                {
                    Return ((0xFFFF & DID2))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((LIDS == Zero))
                {
                    Return (Zero)
                }

                Return (CDDS (DID2))
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD2) /* \NXD2 */
                }

                Return (NDDS (DID2))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD03)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID3) == 0x0400))
                {
                    EDPV = 0x03
                    NXDX = NXD3 /* \NXD3 */
                    DIDX = DID3 /* \DID3 */
                    Return (0x03)
                }

                If ((DID3 == Zero))
                {
                    Return (0x03)
                }
                Else
                {
                    Return ((0xFFFF & DID3))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID3 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID3))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD3) /* \NXD3 */
                }

                Return (NDDS (DID3))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD04)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID4) == 0x0400))
                {
                    EDPV = 0x04
                    NXDX = NXD4 /* \NXD4 */
                    DIDX = DID4 /* \DID4 */
                    Return (0x04)
                }

                If ((DID4 == Zero))
                {
                    Return (0x04)
                }
                Else
                {
                    Return ((0xFFFF & DID4))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID4 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID4))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD4) /* \NXD4 */
                }

                Return (NDDS (DID4))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD05)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID5) == 0x0400))
                {
                    EDPV = 0x05
                    NXDX = NXD5 /* \NXD5 */
                    DIDX = DID5 /* \DID5 */
                    Return (0x05)
                }

                If ((DID5 == Zero))
                {
                    Return (0x05)
                }
                Else
                {
                    Return ((0xFFFF & DID5))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID5 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID5))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD5) /* \NXD5 */
                }

                Return (NDDS (DID5))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD06)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID6) == 0x0400))
                {
                    EDPV = 0x06
                    NXDX = NXD6 /* \NXD6 */
                    DIDX = DID6 /* \DID6 */
                    Return (0x06)
                }

                If ((DID6 == Zero))
                {
                    Return (0x06)
                }
                Else
                {
                    Return ((0xFFFF & DID6))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID6 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID6))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD6) /* \NXD6 */
                }

                Return (NDDS (DID6))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD07)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID7) == 0x0400))
                {
                    EDPV = 0x07
                    NXDX = NXD7 /* \NXD7 */
                    DIDX = DID7 /* \DID7 */
                    Return (0x07)
                }

                If ((DID7 == Zero))
                {
                    Return (0x07)
                }
                Else
                {
                    Return ((0xFFFF & DID7))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID7 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID7))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD7) /* \NXD7 */
                }

                Return (NDDS (DID7))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD08)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID8) == 0x0400))
                {
                    EDPV = 0x08
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DID8 /* \DID8 */
                    Return (0x08)
                }

                If ((DID8 == Zero))
                {
                    Return (0x08)
                }
                Else
                {
                    Return ((0xFFFF & DID8))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID8 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID8))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DID8))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD09)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DID9) == 0x0400))
                {
                    EDPV = 0x09
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DID9 /* \DID9 */
                    Return (0x09)
                }

                If ((DID9 == Zero))
                {
                    Return (0x09)
                }
                Else
                {
                    Return ((0xFFFF & DID9))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DID9 == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DID9))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DID9))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0A)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDA) == 0x0400))
                {
                    EDPV = 0x0A
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDA /* \DIDA */
                    Return (0x0A)
                }

                If ((DIDA == Zero))
                {
                    Return (0x0A)
                }
                Else
                {
                    Return ((0xFFFF & DIDA))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDA == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDA))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDA))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0B)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDB) == 0x0400))
                {
                    EDPV = 0x0B
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDB /* \DIDB */
                    Return (0x0B)
                }

                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return ((0xFFFF & DIDB))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDB == Zero))
                {
                    Return (0x0B)
                }
                Else
                {
                    Return (CDDS (DIDB))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDB))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0C)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDC) == 0x0400))
                {
                    EDPV = 0x0C
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDC /* \DIDC */
                    Return (0x0C)
                }

                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return ((0xFFFF & DIDC))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0C)
                }
                Else
                {
                    Return (CDDS (DIDC))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDC))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0D)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDD) == 0x0400))
                {
                    EDPV = 0x0D
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDD /* \DIDD */
                    Return (0x0D)
                }

                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return ((0xFFFF & DIDD))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDD == Zero))
                {
                    Return (0x0D)
                }
                Else
                {
                    Return (CDDS (DIDD))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDD))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0E)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDE) == 0x0400))
                {
                    EDPV = 0x0E
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDE /* \DIDE */
                    Return (0x0E)
                }

                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return ((0xFFFF & DIDE))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDE == Zero))
                {
                    Return (0x0E)
                }
                Else
                {
                    Return (CDDS (DIDE))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDE))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD0F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If (((0x0F00 & DIDF) == 0x0400))
                {
                    EDPV = 0x0F
                    NXDX = NXD8 /* \NXD8 */
                    DIDX = DIDF /* \DIDF */
                    Return (0x0F)
                }

                If ((DIDF == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return ((0xFFFF & DIDF))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((DIDC == Zero))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (CDDS (DIDF))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXD8) /* \NXD8 */
                }

                Return (NDDS (DIDF))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }
        }

        Device (DD1F)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                If ((EDPV == Zero))
                {
                    Return (0x1F)
                }
                Else
                {
                    Return ((0xFFFF & DIDX))
                }
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                If ((EDPV == Zero))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (CDDS (DIDX))
                }
            }

            Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
            {
                If ((((SGMD & 0x7F) == One) && CondRefOf (SNXD)))
                {
                    Return (NXDX) /* \NXDX */
                }

                Return (NDDS (DIDX))
            }

            Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
            {
                DSST (Arg0)
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                If (CondRefOf (\PBCL))
                {
                    PBCL ()
                }
                Else
                {
                    Return (Package (0x67)
                    {
                        0x50, 
                        0x32, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
                If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                {
                    \_SB.PCI0.GFX0.AINT (One, Arg0)
                    BRTL = Arg0
                }
            }

            Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
            {
                Return (BRTL) /* \BRTL */
            }
        }

        Method (SDDL, 1, NotSerialized)
        {
            NDID++
            Local0 = (Arg0 & 0x0F0F)
            Local1 = (0x80000000 | Local0)
            If ((DIDL == Local0))
            {
                Return (Local1)
            }

            If ((DDL2 == Local0))
            {
                Return (Local1)
            }

            If ((DDL3 == Local0))
            {
                Return (Local1)
            }

            If ((DDL4 == Local0))
            {
                Return (Local1)
            }

            If ((DDL5 == Local0))
            {
                Return (Local1)
            }

            If ((DDL6 == Local0))
            {
                Return (Local1)
            }

            If ((DDL7 == Local0))
            {
                Return (Local1)
            }

            If ((DDL8 == Local0))
            {
                Return (Local1)
            }

            If ((DDL9 == Local0))
            {
                Return (Local1)
            }

            If ((DD10 == Local0))
            {
                Return (Local1)
            }

            If ((DD11 == Local0))
            {
                Return (Local1)
            }

            If ((DD12 == Local0))
            {
                Return (Local1)
            }

            If ((DD13 == Local0))
            {
                Return (Local1)
            }

            If ((DD14 == Local0))
            {
                Return (Local1)
            }

            If ((DD15 == Local0))
            {
                Return (Local1)
            }

            Return (Zero)
        }

        Method (CDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (0x1D)
            }

            If ((CADL == Local0))
            {
                Return (0x1F)
            }

            If ((CAL2 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL3 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL4 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL5 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL6 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL7 == Local0))
            {
                Return (0x1F)
            }

            If ((CAL8 == Local0))
            {
                Return (0x1F)
            }

            Return (0x1D)
        }

        Method (NDDS, 1, NotSerialized)
        {
            Local0 = (Arg0 & 0x0F0F)
            If ((Zero == Local0))
            {
                Return (Zero)
            }

            If ((NADL == Local0))
            {
                Return (One)
            }

            If ((NDL2 == Local0))
            {
                Return (One)
            }

            If ((NDL3 == Local0))
            {
                Return (One)
            }

            If ((NDL4 == Local0))
            {
                Return (One)
            }

            If ((NDL5 == Local0))
            {
                Return (One)
            }

            If ((NDL6 == Local0))
            {
                Return (One)
            }

            If ((NDL7 == Local0))
            {
                Return (One)
            }

            If ((NDL8 == Local0))
            {
                Return (One)
            }

            Return (Zero)
        }

        Method (DSST, 1, NotSerialized)
        {
            If (((Arg0 & 0xC0000000) == 0xC0000000))
            {
                CSTE = NSTE /* \NSTE */
            }
        }

        Scope (\_SB.PCI0)
        {
            OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
            Field (MCHP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x14), 
                AUDE,   8, 
                Offset (0x60), 
                TASM,   10, 
                Offset (0x62)
            }
        }

        OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
        Field (IGDP, AnyAcc, NoLock, Preserve)
        {
            Offset (0x10), 
                ,   1, 
            GIVD,   1, 
                ,   2, 
            GUMA,   3, 
            Offset (0x12), 
            Offset (0x14), 
                ,   4, 
            GMFN,   1, 
            Offset (0x18), 
            Offset (0xA4), 
            ASLE,   8, 
            Offset (0xA8), 
            GSSE,   1, 
            GSSB,   14, 
            GSES,   1, 
            Offset (0xB0), 
                ,   12, 
            CDVL,   1, 
            Offset (0xB2), 
            Offset (0xB5), 
            LBPC,   8, 
            Offset (0xBC), 
            ASLS,   32
        }

        OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
        Field (IGDM, AnyAcc, NoLock, Preserve)
        {
            SIGN,   128, 
            SIZE,   32, 
            OVER,   32, 
            SVER,   256, 
            VVER,   128, 
            GVER,   128, 
            MBOX,   32, 
            DMOD,   32, 
            PCON,   32, 
            DVER,   64, 
            Offset (0x100), 
            DRDY,   32, 
            CSTS,   32, 
            CEVT,   32, 
            Offset (0x120), 
            DIDL,   32, 
            DDL2,   32, 
            DDL3,   32, 
            DDL4,   32, 
            DDL5,   32, 
            DDL6,   32, 
            DDL7,   32, 
            DDL8,   32, 
            CPDL,   32, 
            CPL2,   32, 
            CPL3,   32, 
            CPL4,   32, 
            CPL5,   32, 
            CPL6,   32, 
            CPL7,   32, 
            CPL8,   32, 
            CADL,   32, 
            CAL2,   32, 
            CAL3,   32, 
            CAL4,   32, 
            CAL5,   32, 
            CAL6,   32, 
            CAL7,   32, 
            CAL8,   32, 
            NADL,   32, 
            NDL2,   32, 
            NDL3,   32, 
            NDL4,   32, 
            NDL5,   32, 
            NDL6,   32, 
            NDL7,   32, 
            NDL8,   32, 
            ASLP,   32, 
            TIDX,   32, 
            CHPD,   32, 
            CLID,   32, 
            CDCK,   32, 
            SXSW,   32, 
            EVTS,   32, 
            CNOT,   32, 
            NRDY,   32, 
            DDL9,   32, 
            DD10,   32, 
            DD11,   32, 
            DD12,   32, 
            DD13,   32, 
            DD14,   32, 
            DD15,   32, 
            CPL9,   32, 
            CP10,   32, 
            CP11,   32, 
            CP12,   32, 
            CP13,   32, 
            CP14,   32, 
            CP15,   32, 
            Offset (0x200), 
            SCIE,   1, 
            GEFC,   4, 
            GXFC,   3, 
            GESF,   8, 
            Offset (0x204), 
            PARM,   32, 
            DSLP,   32, 
            Offset (0x300), 
            ARDY,   32, 
            ASLC,   32, 
            TCHE,   32, 
            ALSI,   32, 
            BCLP,   32, 
            PFIT,   32, 
            CBLV,   32, 
            BCLM,   320, 
            CPFM,   32, 
            EPFM,   32, 
            PLUT,   592, 
            PFMB,   32, 
            CCDV,   32, 
            PCFT,   32, 
            SROT,   32, 
            IUER,   32, 
            FDSS,   64, 
            FDSP,   32, 
            STAT,   32, 
            Offset (0x400), 
            RVBT,   49152, 
            PHED,   32, 
            BDDC,   2048
        }

        Name (DBTB, Package (0x15)
        {
            Zero, 
            0x07, 
            0x38, 
            0x01C0, 
            0x0E00, 
            0x3F, 
            0x01C7, 
            0x0E07, 
            0x01F8, 
            0x0E38, 
            0x0FC0, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            Zero, 
            0x7000, 
            0x7007, 
            0x7038, 
            0x71C0, 
            0x7E00
        })
        Name (CDCT, Package (0x05)
        {
            Package (0x02)
            {
                0xE4, 
                0x0140
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }, 

            Package (0x02)
            {
                Zero, 
                Zero
            }, 

            Package (0x02)
            {
                0xDE, 
                0x014D
            }
        })
        Name (SUCC, One)
        Name (NVLD, 0x02)
        Name (CRIT, 0x04)
        Name (NCRT, 0x06)
        Method (GSCI, 0, Serialized)
        {
            Method (GBDA, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = 0x0659
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    PARM = 0x00300482
                    If ((S0ID == One))
                    {
                        PARM |= 0x0100
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    PARM &= 0xEFFF0000
                    PARM &= (DerefOf (DBTB [IBTT]) << 0x10)
                    PARM |= IBTT /* \_SB_.PCI0.GFX0.PARM */
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    PARM = IPSC /* \IPSC */
                    PARM |= (IPAT << 0x08)
                    PARM += 0x0100
                    PARM |= (LIDS << 0x10)
                    PARM += 0x00010000
                    PARM |= (IBIA << 0x14)
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    PARM = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                    PARM ^= One
                    PARM |= (GMFN << One)
                    PARM |= 0x1800
                    PARM |= (IDMS << 0x11)
                    PARM |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                        0x15) /* \_SB_.PCI0.GFX0.PARM */
                    GESF = One
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    PARM = Zero
                    If (ISSC)
                    {
                        PARM |= 0x03
                    }

                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    PARM = KSV0 /* \KSV0 */
                    GESF = KSV1 /* \KSV1 */
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                GESF = Zero
                Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
            }

            Method (SBCB, 0, Serialized)
            {
                If ((GESF == Zero))
                {
                    PARM = Zero
                    PARM = 0x000F87DD
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == One))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x03))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x04))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x05))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x07))
                {
                    If (((S0ID == One) && (OSYS < 0x07DF)))
                    {
                        If (((PARM & 0xFF) == One))
                        {
                            \GUAM (One)
                        }

                        If (((PARM & 0xFF) == Zero))
                        {
                            \GUAM (Zero)
                        }
                    }

                    If ((PARM == Zero))
                    {
                        Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                        If ((0x80000000 & Local0))
                        {
                            CLID &= 0x0F
                            GLID (CLID)
                        }
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x08))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x09))
                {
                    IBTT = (PARM & 0xFF)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0A))
                {
                    IPSC = (PARM & 0xFF)
                    If (((PARM >> 0x08) & 0xFF))
                    {
                        IPAT = ((PARM >> 0x08) & 0xFF)
                        IPAT--
                    }

                    IBIA = ((PARM >> 0x14) & 0x07)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x0B))
                {
                    IF1E = ((PARM >> One) & One)
                    If ((PARM & 0x0001E000))
                    {
                        IDMS = ((PARM >> 0x0D) & 0x0F)
                    }
                    Else
                    {
                        IDMS = ((PARM >> 0x11) & 0x0F)
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x10))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x11))
                {
                    PARM = (LIDS << 0x08)
                    PARM += 0x0100
                    GESF = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x12))
                {
                    If ((PARM & One))
                    {
                        If (((PARM >> One) == One))
                        {
                            ISSC = One
                        }
                        Else
                        {
                            GESF = Zero
                            Return (CRIT) /* \_SB_.PCI0.GFX0.CRIT */
                        }
                    }
                    Else
                    {
                        ISSC = Zero
                    }

                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x13))
                {
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                If ((GESF == 0x14))
                {
                    PAVP = (PARM & 0x0F)
                    GESF = Zero
                    PARM = Zero
                    Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
                }

                GESF = Zero
                Return (SUCC) /* \_SB_.PCI0.GFX0.SUCC */
            }

            If ((GEFC == 0x04))
            {
                GXFC = GBDA ()
            }

            If ((GEFC == 0x06))
            {
                GXFC = SBCB ()
            }

            GEFC = Zero
            CPSC = One
            GSSE = Zero
            SCIE = Zero
            Return (Zero)
        }

        Method (PDRD, 0, NotSerialized)
        {
            Return (!DRDY)
        }

        Method (PSTS, 0, NotSerialized)
        {
            If ((CSTS > 0x02))
            {
                Sleep (ASLP)
            }

            Return ((CSTS == 0x03))
        }

        Method (GNOT, 2, NotSerialized)
        {
            If (PDRD ())
            {
                Return (One)
            }

            CEVT = Arg0
            CSTS = 0x03
            If (((CHPD == Zero) && (Arg1 == Zero)))
            {
                Notify (\_SB.PCI0.GFX0, Arg1)
            }

            If (CondRefOf (HNOT))
            {
                HNOT (Arg0)
            }
            Else
            {
                Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
            }

            Return (Zero)
        }

        Method (GHDS, 1, NotSerialized)
        {
            TIDX = Arg0
            Return (GNOT (One, Zero))
        }

        Method (GLID, 1, NotSerialized)
        {
            If ((Arg0 == One))
            {
                CLID = 0x03
            }
            Else
            {
                CLID = Arg0
            }

            If (GNOT (0x02, Zero))
            {
                CLID |= 0x80000000
                Return (One)
            }

            Return (Zero)
        }

        Method (GDCK, 1, NotSerialized)
        {
            CDCK = Arg0
            Return (GNOT (0x04, Zero))
        }

        Method (PARD, 0, NotSerialized)
        {
            If (!ARDY)
            {
                Sleep (ASLP)
            }

            Return (!ARDY)
        }

        Method (IUEH, 1, Serialized)
        {
            IUER &= 0xC0
            IUER ^= (One << Arg0)
            If ((Arg0 <= 0x04))
            {
                Return (AINT (0x05, Zero))
            }
            Else
            {
                Return (AINT (Arg0, Zero))
            }
        }

        Method (AINT, 2, NotSerialized)
        {
            If (!(TCHE & (One << Arg0)))
            {
                Return (One)
            }

            If (PARD ())
            {
                Return (One)
            }

            If (((Arg0 >= 0x05) && (Arg0 <= 0x07)))
            {
                ASLC = (One << Arg0)
                ASLE = One
                Local2 = Zero
                While (((Local2 < 0xFA) && (ASLC != Zero)))
                {
                    Sleep (0x04)
                    Local2++
                }

                Return (Zero)
            }

            If ((Arg0 == 0x02))
            {
                If (CPFM)
                {
                    Local0 = (CPFM & 0x0F)
                    Local1 = (EPFM & 0x0F)
                    If ((Local0 == One))
                    {
                        If ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        ElseIf ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        Else
                        {
                            PFIT = One
                        }
                    }

                    If ((Local0 == 0x06))
                    {
                        If ((Local1 & 0x08))
                        {
                            PFIT = 0x08
                        }
                        ElseIf ((Local1 & One))
                        {
                            PFIT = One
                        }
                        Else
                        {
                            PFIT = 0x06
                        }
                    }

                    If ((Local0 == 0x08))
                    {
                        If ((Local1 & One))
                        {
                            PFIT = One
                        }
                        ElseIf ((Local1 & 0x06))
                        {
                            PFIT = 0x06
                        }
                        Else
                        {
                            PFIT = 0x08
                        }
                    }
                }
                Else
                {
                    PFIT ^= 0x07
                }

                PFIT |= 0x80000000
                ASLC = 0x04
            }
            ElseIf ((Arg0 == One))
            {
                BCLP = ((Arg1 * 0xFF) / 0x64)
                BCLP |= 0x80000000
                ASLC = 0x02
            }
            ElseIf ((Arg0 == Zero))
            {
                ALSI = Arg1
                ASLC = One
            }
            Else
            {
                Return (One)
            }

            ASLE = One
            Return (Zero)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("3e5b41c6-eb1d-4260-9d15-c71fbadae414")))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "iGfx Supported Functions Bitmap "
                            Return (0x0001E7FF)
                        }
                    }
                    Case (One)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = " Adapter Power State Notification "
                            If (((S0ID == One) && (OSYS < 0x07DF)))
                            {
                                If (((DerefOf (Arg3 [Zero]) & 0xFF) == One))
                                {
                                    \GUAM (One)
                                }

                                Local0 = (DerefOf (Arg3 [One]) & 0xFF)
                                If ((Local0 == Zero))
                                {
                                    \GUAM (Zero)
                                }
                            }

                            If ((DerefOf (Arg3 [Zero]) == Zero))
                            {
                                Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                                If ((0x80000000 & Local0))
                                {
                                    CLID &= 0x0F
                                    GLID (CLID)
                                }
                            }

                            Return (One)
                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Display Power State Notification "
                            Return (One)
                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "BIOS POST Completion Notification "
                            Return (One)
                        }
                    }
                    Case (0x04)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Pre-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x05)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "Post-Hires Set Mode "
                            Return (One)
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetDisplayDeviceNotification"
                            Return (One)
                        }
                    }
                    Case (0x07)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetBootDevicePreference "
                            IBTT = (DerefOf (Arg3 [Zero]) & 0xFF)
                            Return (One)
                        }
                    }
                    Case (0x08)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "SetPanelPreference "
                            IPSC = (DerefOf (Arg3 [Zero]) & 0xFF)
                            If ((DerefOf (Arg3 [One]) & 0xFF))
                            {
                                IPAT = (DerefOf (Arg3 [One]) & 0xFF)
                                IPAT--
                            }

                            IBIA = ((DerefOf (Arg3 [0x02]) >> 0x04) & 0x07)
                            Return (One)
                        }
                    }
                    Case (0x09)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "FullScreenDOS "
                            Return (One)
                        }
                    }
                    Case (0x0A)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "APM Complete "
                            Local0 = (LIDS << 0x08)
                            Local0 += 0x0100
                            Return (Local0)
                        }
                    }
                    Case (0x0D)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetBootDisplayPreference "
                            Local0 = ((DerefOf (Arg3 [0x03]) << 0x18) | (DerefOf (
                                Arg3 [0x02]) << 0x10))
                            Local0 &= 0xEFFF0000
                            Local0 &= (DerefOf (DBTB [IBTT]) << 0x10)
                            Local0 |= IBTT
                            Return (Local0)
                        }
                    }
                    Case (0x0E)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetPanelDetails "
                            Local0 = IPSC /* \IPSC */
                            Local0 |= (IPAT << 0x08)
                            Local0 += 0x0100
                            Local0 |= (LIDS << 0x10)
                            Local0 += 0x00010000
                            Local0 |= (IBIA << 0x14)
                            Return (Local0)
                        }
                    }
                    Case (0x0F)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetInternalGraphics "
                            Local0 = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                            Local0 ^= One
                            Local0 |= (GMFN << One)
                            Local0 |= 0x1800
                            Local0 |= (IDMS << 0x11)
                            Local0 |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                0x15)
                            Return (Local0)
                        }
                    }
                    Case (0x10)
                    {
                        If ((Arg1 == One))
                        {
                            Debug = "GetAKSV "
                            Name (KSVP, Package (0x02)
                            {
                                0x80000000, 
                                0x8000
                            })
                            KSVP [Zero] = KSV0 /* \KSV0 */
                            KSVP [One] = KSV1 /* \KSV1 */
                            Return (KSVP) /* \_SB_.PCI0.GFX0._DSM.KSVP */
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Device (IPUA)
        {
            Name (_ADR, 0x3480)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((IPTP == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (\_SB.PCI0.IPU0)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("9a9e6ab4-e3fc-475d-ad1c-c4789e4cfe90")))
            {
                If ((Arg2 == Zero))
                {
                    If ((Arg1 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x07                                             // .
                        })
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                If ((Arg2 == One))
                {
                    Return (0x64503C19)
                }

                If ((Arg2 == 0x02))
                {
                    Return (0xFFF0783C)
                }

                Return (Zero)
            }
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "INTEL ", "PtidDevc", 0x00001000)
{
    External (_SB_.DTS1, UnknownObj)
    External (_SB_.DTS2, UnknownObj)
    External (_SB_.DTS3, UnknownObj)
    External (_SB_.DTS4, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1CI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1DC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1DI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1FC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1FV, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B1RC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2CI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2DI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2FC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2FV, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2MH, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2ML, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.B2RC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.BMAX, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.BPWR, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CFS2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CFSP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CMDR, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.CPUP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.ECAV, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.ECMD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECWT, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPCB.H_EC.GTVR, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MCPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MCTD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MDT0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MFSP, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MGPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MGTD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MMPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MMTL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.MPOL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NCPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NCTD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NGPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NGTD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NMTL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.NPOL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PCAD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDT3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEC3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECD, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECH, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PECI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEHI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PENV, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEPM, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PEWL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PMAX, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PPDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PPWR, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRCS, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRFC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS0, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PRS4, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PWFC, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PWRL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TMPL, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR1, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR2, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR3, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR4, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR5, UnknownObj)
    External (_SB_.PDTS, UnknownObj)
    External (_TZ_.TZ00._TMP, UnknownObj)
    External (PAMT, UnknownObj)
    External (TSDB, UnknownObj)

    Scope (\_SB)
    {
        Device (PTID)
        {
            Name (_HID, EisaId ("INT340E") /* Motherboard Resources */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
            Name (IVER, 0x00030000)
            Name (_STA, 0x0F)  // _STA: Status
            Method (TSDL, 0, NotSerialized)
            {
                If ((TSDB == One))
                {
                    Return (TSD2) /* \_SB_.PTID.TSD2 */
                }

                Return (TSD1) /* \_SB_.PTID.TSD1 */
            }

            Name (TSD1, Package (0x26)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "DIMM0_hotspot_U4C1", 
                0x03, 
                "DIMM1_hotspot_Q4D1", 
                0x03, 
                "IMVP_conn_Q7C1", 
                0x03, 
                "board_hotspot1_U3G3", 
                0x03, 
                "board_hotspot2_Q3G1", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TZ00 _TMP", 
                0x03, 
                "SDRAM_hotspot_RT5B1", 
                0x03, 
                "NGFF_slot_RT6G1", 
                0x03, 
                "IMVP_conn_RT7D1", 
                0x03, 
                "board_hotspot3_RT8F1"
            })
            Name (TSD2, Package (0x26)
            {
                Zero, 
                "CPU Core 0 DTS", 
                Zero, 
                "CPU Core 1 DTS", 
                Zero, 
                "CPU Core 2 DTS", 
                Zero, 
                "CPU Core 3 DTS", 
                Zero, 
                "CPU Core Package DTS", 
                0x03, 
                "A-Skin Hotspot U21", 
                0x03, 
                "A-Skin Hotspot U21 IR", 
                0x03, 
                "B-Skin Hotspot U1", 
                0x03, 
                "B-Skin Hotspot U1 IR", 
                Zero, 
                "CPU Package Temperature", 
                0x05, 
                "PCH DTS Temperature from PCH", 
                Zero, 
                "CPU PECI reading", 
                0x05, 
                "SA DTS Temperature from PCH", 
                0x02, 
                "TZ00 _TMP", 
                0x03, 
                "SoC VR Thermsitor RT11", 
                0x03, 
                "Memory Thermistor RT9", 
                0x03, 
                "GNSS Board Ambient Thermistor R4", 
                0x03, 
                "System VR Thermistor RT10", 
                0x03, 
                "A-Skin MipiCam Thermistor RT8"
            })
            Name (PSDL, Package (0x26)
            {
                0x0B, 
                "Platform Power (mW)", 
                0x0B, 
                "Brick Power cW(100ths)", 
                0x0B, 
                "Battery Discharge Power cW(100ths)", 
                0x0B, 
                "Platform Average Power (mW)", 
                0x0B, 
                "Brick Average Power cW(0.01)", 
                0x0B, 
                "Battery Discharge Average Power cW(0.01)", 
                0x0C, 
                "Battery 1 Design Capacity (mWh)", 
                0x0C, 
                "Battery 1 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 1 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 1 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 1 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery 2 Remaining Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Charge Capacity (mWh)", 
                0x0C, 
                "Battery 2 Full Resolution Voltage (mV)", 
                0x0C, 
                "Battery 2 Full Resolution Discharge Current (mA)", 
                0x0C, 
                "Battery 2 Full Resolution Charge Current (mA)", 
                0x0C, 
                "Battery Pack 1 maximum power (mW)", 
                0x0C, 
                "Battery Pack 2 maximum power (mW)"
            })
            Method (OSDL, 0, NotSerialized)
            {
                If ((TSDB == One))
                {
                    Return (OSD2) /* \_SB_.PTID.OSD2 */
                }

                Return (OSD1) /* \_SB_.PTID.OSD1 */
            }

            Name (OSD1, Package (0x15)
            {
                0x04, 
                "CPU Fan Duty Cycle", 
                "RAW", 
                0x04, 
                "CPU Fan #1 Speed", 
                "RPM", 
                0x03, 
                "Skin Temp 0", 
                "RAW", 
                0x03, 
                "Thermistor 1 ", 
                "RAW", 
                0x03, 
                "Thermistor 2 ", 
                "RAW", 
                0x03, 
                "Thermistor 3 ", 
                "RAW", 
                0x03, 
                "Thermistor 4 ", 
                "RAW"
            })
            Name (OSD2, Package (0x18)
            {
                0x04, 
                "CPU Fan Duty Cycle", 
                "RAW", 
                0x04, 
                "CPU Fan #1 Speed", 
                "RPM", 
                0x03, 
                "Skin Temp 0", 
                "RAW", 
                0x03, 
                "Thermistor 1 ", 
                "RAW", 
                0x03, 
                "Thermistor 2 ", 
                "RAW", 
                0x03, 
                "Thermistor 3 ", 
                "RAW", 
                0x03, 
                "Thermistor 4 ", 
                "RAW", 
                0x03, 
                "Thermistor 5 ", 
                "RAW"
            })
            Method (TSDD, 0, Serialized)
            {
                If ((TSDB == One))
                {
                    Name (TMPX, Package (0x13)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    })
                    TMPX [Zero] = ((\_SB.DTS1 * 0x0A) + 0x0AAC)
                    TMPX [One] = ((\_SB.DTS2 * 0x0A) + 0x0AAC)
                    TMPX [0x02] = ((\_SB.DTS3 * 0x0A) + 0x0AAC)
                    TMPX [0x03] = ((\_SB.DTS4 * 0x0A) + 0x0AAC)
                    TMPX [0x04] = ((\_SB.PDTS * 0x0A) + 0x0AAC)
                    If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                    {
                        TMPX [0x06] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR2)) + 0x0AAC)
                        TMPX [0x07] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR3)) + 0x0AAC)
                        TMPX [0x08] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR4)) + 0x0AAC)
                        TMPX [0x09] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR5)) + 0x0AAC)
                        TMPX [0x09] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PMAX)) * 0x0A) + 
                            0x0AAC)
                        TMPX [0x0A] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PPDT)) * 0x0A) + 
                            0x0AAC)
                        TMPX [0x0B] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PECH)) * 0x0A) + 
                            0x0AAC)
                    }

                    TMPX [0x0D] = \_TZ.TZ00._TMP /* External reference */
                    Return (TMPX) /* \_SB_.PTID.TSDD.TMPX */
                }

                Name (TMPV, Package (0x14)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                TMPV [Zero] = ((\_SB.DTS1 * 0x0A) + 0x0AAC)
                TMPV [One] = ((\_SB.DTS2 * 0x0A) + 0x0AAC)
                TMPV [0x02] = ((\_SB.DTS3 * 0x0A) + 0x0AAC)
                TMPV [0x03] = ((\_SB.DTS4 * 0x0A) + 0x0AAC)
                TMPV [0x04] = ((\_SB.PDTS * 0x0A) + 0x0AAC)
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    TMPV [0x05] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR1)) + 0x0AAC)
                    TMPV [0x06] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR2)) + 0x0AAC)
                    TMPV [0x07] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR3)) + 0x0AAC)
                    TMPV [0x08] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR4)) + 0x0AAC)
                    TMPV [0x09] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR5)) + 0x0AAC)
                    TMPV [0x0A] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PMAX)) * 0x0A) + 
                        0x0AAC)
                    TMPV [0x0B] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PPDT)) * 0x0A) + 
                        0x0AAC)
                    TMPV [0x0C] = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PECH)) * 0x0A) + 
                        0x0AAC)
                }

                TMPV [0x0E] = \_TZ.TZ00._TMP /* External reference */
                Return (TMPV) /* \_SB_.PTID.TSDD.TMPV */
            }

            Method (PSDD, 0, Serialized)
            {
                Name (PWRV, Package (0x13)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                })
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    PWRV [Zero] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.CPUP))
                    PWRV [One] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.BPWR)) * 0x0A)
                    PWRV [0x02] = (\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PPWR)) * 0x0A)
                    PWRV [0x06] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1DC))
                    PWRV [0x07] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1RC))
                    PWRV [0x08] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1FC))
                    PWRV [0x09] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1FV))
                    PWRV [0x0A] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1DI))
                    PWRV [0x0B] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B1CI))
                    PWRV [0x0C] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2RC))
                    PWRV [0x0D] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2FC))
                    PWRV [0x0E] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2FV))
                    PWRV [0x0F] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2DI))
                    PWRV [0x10] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2CI))
                    Local0 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.BMAX))
                    If (Local0)
                    {
                        Local0 = ~Local0 |= 0xFFFF0000
                        Local0 = (Local0 += One * 0x0A)
                    }

                    PWRV [0x11] = Local0
                    Local0 = ((\_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2MH)) << 0x08) + \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.B2ML)))
                    If (Local0)
                    {
                        Local0 = ~Local0 |= 0xFFFF0000
                        Local0 = (Local0 += One * 0x0A)
                    }

                    PWRV [0x12] = Local0
                }

                Return (PWRV) /* \_SB_.PTID.PSDD.PWRV */
            }

            Method (OSDD, 0, Serialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    If ((TSDB == One))
                    {
                        Name (OSD2, Package (0x08)
                        {
                            0x80000000, 
                            0x80000000, 
                            0x80000000, 
                            0x80000000, 
                            0x80000000, 
                            0x80000000, 
                            0x80000000, 
                            0x80000000
                        })
                        OSD2 [Zero] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PENV))
                        OSD2 [One] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.CFSP))
                        OSD2 [0x02] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.TSR3))
                        Return (OSD2) /* \_SB_.PTID.OSDD.OSD2 */
                    }

                    Name (OSD1, Package (0x07)
                    {
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000, 
                        0x80000000
                    })
                    OSD1 [Zero] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PENV))
                    OSD1 [One] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.CFSP))
                    Return (OSD1) /* \_SB_.PTID.OSDD.OSD1 */
                }

                Return (Package (0x00){})
            }

            Method (SDSP, 0, NotSerialized)
            {
                Return (0x0A)
            }

            Name (PADA, Package (0x0A)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x1A, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Name (PADD, Package (0x0A)
            {
                0x02, 
                0x06A4, 
                0x06A0, 
                0x1A, 
                0x62, 
                0x63, 
                0x60, 
                0x61, 
                0x65, 
                0x64
            })
            Method (PADT, 0, NotSerialized)
            {
                If (PAMT)
                {
                    Return (PADA) /* \_SB_.PTID.PADA */
                }

                Return (PADD) /* \_SB_.PTID.PADD */
            }

            Method (RPMD, 0, Serialized)
            {
                Name (MTMP, Buffer (0x1A){})
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    MTMP [0x06] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PCAD))
                    MTMP [0x07] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEWL))
                    MTMP [0x08] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PWRL))
                    MTMP [0x09] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PECD))
                    MTMP [0x0A] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEHI))
                    MTMP [0x0B] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PECI))
                    MTMP [0x0C] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEPL))
                    MTMP [0x0D] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEPM))
                    MTMP [0x0E] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PWFC))
                    MTMP [0x0F] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PECC))
                    MTMP [0x10] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PDT0))
                    MTMP [0x11] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PDT1))
                    MTMP [0x12] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PDT2))
                    MTMP [0x13] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PDT3))
                    MTMP [0x14] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRFC))
                    MTMP [0x15] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRS0))
                    MTMP [0x16] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRS1))
                    MTMP [0x17] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRS2))
                    MTMP [0x18] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRS3))
                    MTMP [0x19] = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRS4))
                }

                Return (MTMP) /* \_SB_.PTID.RPMD.MTMP */
            }

            Method (WPMD, 1, NotSerialized)
            {
                If ((SizeOf (Arg0) != 0x1A))
                {
                    Return (0xFFFFFFFF)
                }

                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x06]), RefOf (\_SB.PCI0.LPCB.H_EC.PCAD))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x07]), RefOf (\_SB.PCI0.LPCB.H_EC.PEWL))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x08]), RefOf (\_SB.PCI0.LPCB.H_EC.PWRL))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x09]), RefOf (\_SB.PCI0.LPCB.H_EC.PECD))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0A]), RefOf (\_SB.PCI0.LPCB.H_EC.PEHI))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0B]), RefOf (\_SB.PCI0.LPCB.H_EC.PECI))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0C]), RefOf (\_SB.PCI0.LPCB.H_EC.PEPL))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0D]), RefOf (\_SB.PCI0.LPCB.H_EC.PEPM))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0E]), RefOf (\_SB.PCI0.LPCB.H_EC.PWFC))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x0F]), RefOf (\_SB.PCI0.LPCB.H_EC.PECC))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x10]), RefOf (\_SB.PCI0.LPCB.H_EC.PDT0))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x11]), RefOf (\_SB.PCI0.LPCB.H_EC.PDT1))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x12]), RefOf (\_SB.PCI0.LPCB.H_EC.PDT2))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x13]), RefOf (\_SB.PCI0.LPCB.H_EC.PDT3))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x14]), RefOf (\_SB.PCI0.LPCB.H_EC.PRFC))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x15]), RefOf (\_SB.PCI0.LPCB.H_EC.PRS0))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x16]), RefOf (\_SB.PCI0.LPCB.H_EC.PRS1))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x17]), RefOf (\_SB.PCI0.LPCB.H_EC.PRS2))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x18]), RefOf (\_SB.PCI0.LPCB.H_EC.PRS3))
                    \_SB.PCI0.LPCB.H_EC.ECWT (DerefOf (Arg0 [0x19]), RefOf (\_SB.PCI0.LPCB.H_EC.PRS4))
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x67)
                }

                Return (Zero)
            }

            Method (ISPC, 0, NotSerialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x65)
                }

                Return (Zero)
            }

            Method (ENPC, 0, NotSerialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    \_SB.PCI0.LPCB.H_EC.ECMD (0x66)
                }

                Return (Zero)
            }

            Method (RPCS, 0, NotSerialized)
            {
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    Local0 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PRCS))
                }

                Return (Local0)
            }

            Method (RPEC, 0, NotSerialized)
            {
                Local0 = Zero
                If ((\_SB.PCI0.LPCB.H_EC.ECAV == One))
                {
                    Local1 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEC0))
                    Local0 |= Local1
                    Local1 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEC1))
                    Local0 |= (Local1 << 0x08)
                    Local1 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEC2))
                    Local0 |= (Local1 << 0x10)
                    Local1 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PEC3))
                    Local0 |= (Local1 << 0x18)
                }

                Return (Local0)
            }
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Ist", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (PC00, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.CPPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            If (((CFGD & One) && (PC00 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((\_SB.OSCP & 0x0400))
            {
                Return (TPSS) /* \_SB_.PR00.TPSS */
            }
            Else
            {
                Return (LPSS) /* \_SB_.PR00.LPSS */
            }
        }

        Name (LPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000899, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x00002900, 
                0x00002900
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x0000A518, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009A9D, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x0000920B, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000087F6, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00007FBF, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00007613, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00006E34, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000064E4, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00005D5C, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x0000546D, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x00004D3F, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000044AE, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00003C4D, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000359B, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Name (TPSS, Package (0x10)
        {
            Package (0x06)
            {
                0x00000899, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x00002900, 
                0x00002900
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x0000AFC8, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x0000A518, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00009A9D, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x0000920B, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x000087F6, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00007FBF, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00007613, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00006E34, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000064E4, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00005D5C, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x0000546D, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x00004D3F, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000044AE, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00003C4D, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x0000359B, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = Zero
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR00.HPSD */
            }

            Return (SPSD) /* \_SB_.PR00.SPSD */
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "INTEL ", "Ther_Rvp", 0x00001000)
{
    External (_SB_.AAC0, UnknownObj)
    External (_SB_.ACRT, UnknownObj)
    External (_SB_.APSV, UnknownObj)
    External (_SB_.DTS1, UnknownObj)
    External (_SB_.DTS2, UnknownObj)
    External (_SB_.DTS3, UnknownObj)
    External (_SB_.DTS4, UnknownObj)
    External (_SB_.DTSE, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.ECAV, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.ECMD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECRD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.H_EC.ECWT, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPCB.H_EC.PECH, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PECL, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PENV, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PLMX, FieldUnitObj)
    External (_SB_.PDTS, UnknownObj)
    External (_SB_.PKGA, UnknownObj)
    External (_SB_.PR00, UnknownObj)
    External (_SB_.PR01, UnknownObj)
    External (_SB_.PR02, UnknownObj)
    External (_SB_.PR03, UnknownObj)
    External (_SB_.PR04, UnknownObj)
    External (_SB_.PR05, UnknownObj)
    External (_SB_.PR06, UnknownObj)
    External (_SB_.PR07, UnknownObj)
    External (_SB_.PR08, UnknownObj)
    External (_SB_.PR09, UnknownObj)
    External (_SB_.PR10, UnknownObj)
    External (_SB_.PR11, UnknownObj)
    External (_SB_.PR12, UnknownObj)
    External (_SB_.PR13, UnknownObj)
    External (_SB_.PR14, UnknownObj)
    External (_SB_.PR15, UnknownObj)
    External (AC0F, IntObj)
    External (AC1F, IntObj)
    External (ACT1, IntObj)
    External (ACTT, IntObj)
    External (CRTT, IntObj)
    External (CTYP, IntObj)
    External (ECON, IntObj)
    External (PSVT, IntObj)
    External (TC1V, IntObj)
    External (TC2V, IntObj)
    External (TCNT, IntObj)
    External (TSPV, IntObj)
    External (VFN0, IntObj)
    External (VFN1, IntObj)
    External (VFN2, IntObj)
    External (VFN3, IntObj)
    External (VFN4, IntObj)

    Scope (\_TZ)
    {
        Name (ETMD, One)
        Event (FCET)
        Name (FCRN, Zero)
        Mutex (FCMT, 0x00)
        Name (CVF0, Zero)
        Name (CVF1, Zero)
        Name (CVF2, Zero)
        Name (CVF3, Zero)
        Name (CVF4, Zero)
        Mutex (FMT0, 0x00)
        Mutex (FMT1, 0x00)
        Mutex (FMT2, 0x00)
        Mutex (FMT3, 0x00)
        Mutex (FMT4, 0x00)
        PowerResource (FN00, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local1 = Zero
                Local0 = Acquire (FMT0, 0x03E8)
                If ((Local0 == Zero))
                {
                    Local1 = CVF0 /* \_TZ_.CVF0 */
                    Release (FMT0)
                }

                Return (Local1)
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                Local0 = Acquire (FMT0, 0x03E8)
                If ((Local0 == Zero))
                {
                    CVF0 = One
                    Release (FMT0)
                }

                FNCL ()
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                Local0 = Acquire (FMT0, 0x03E8)
                If ((Local0 == Zero))
                {
                    CVF0 = Zero
                    Release (FMT0)
                }

                FNCL ()
            }
        }

        Device (FAN0)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN00
            })
        }

        PowerResource (FN01, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local1 = Zero
                Local0 = Acquire (FMT1, 0x03E8)
                If ((Local0 == Zero))
                {
                    Local1 = CVF1 /* \_TZ_.CVF1 */
                    Release (FMT1)
                }

                Return (Local1)
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                Local0 = Acquire (FMT1, 0x03E8)
                If ((Local0 == Zero))
                {
                    CVF1 = One
                    Release (FMT1)
                }

                FNCL ()
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                Local0 = Acquire (FMT1, 0x03E8)
                If ((Local0 == Zero))
                {
                    CVF1 = Zero
                    Release (FMT1)
                }

                FNCL ()
            }
        }

        Device (FAN1)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN01
            })
        }

        PowerResource (FN02, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local1 = Zero
                Local0 = Acquire (FMT2, 0x03E8)
                If ((Local0 == Zero))
                {
                    Local1 = CVF2 /* \_TZ_.CVF2 */
                    Release (FMT2)
                }

                Return (Local1)
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                Local0 = Acquire (FMT2, 0x03E8)
                If ((Local0 == Zero))
                {
                    CVF2 = One
                    Release (FMT2)
                }

                FNCL ()
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                Local0 = Acquire (FMT2, 0x03E8)
                If ((Local0 == Zero))
                {
                    CVF2 = Zero
                    Release (FMT2)
                }

                FNCL ()
            }
        }

        Device (FAN2)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN02
            })
        }

        PowerResource (FN03, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local1 = Zero
                Local0 = Acquire (FMT3, 0x03E8)
                If ((Local0 == Zero))
                {
                    Local1 = CVF3 /* \_TZ_.CVF3 */
                    Release (FMT3)
                }

                Return (Local1)
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                Local0 = Acquire (FMT3, 0x03E8)
                If ((Local0 == Zero))
                {
                    CVF3 = One
                    Release (FMT3)
                }

                FNCL ()
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                Local0 = Acquire (FMT3, 0x03E8)
                If ((Local0 == Zero))
                {
                    CVF3 = Zero
                    Release (FMT3)
                }

                FNCL ()
            }
        }

        Device (FAN3)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN03
            })
        }

        PowerResource (FN04, 0x00, 0x0000)
        {
            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Local1 = Zero
                Local0 = Acquire (FMT4, 0x03E8)
                If ((Local0 == Zero))
                {
                    Local1 = CVF4 /* \_TZ_.CVF4 */
                    Release (FMT4)
                }

                Return (Local1)
            }

            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                Local0 = Acquire (FMT4, 0x03E8)
                If ((Local0 == Zero))
                {
                    CVF4 = One
                    Release (FMT4)
                }

                FNCL ()
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                Local0 = Acquire (FMT4, 0x03E8)
                If ((Local0 == Zero))
                {
                    CVF4 = Zero
                    Release (FMT4)
                }

                FNCL ()
            }
        }

        Device (FAN4)
        {
            Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                FN04
            })
        }

        Method (FNCL, 0, NotSerialized)
        {
            Local5 = Acquire (FCMT, 0x03E8)
            If ((Local5 == Zero))
            {
                Local6 = FCRN /* \_TZ_.FCRN */
                Release (FCMT)
            }

            If ((Local6 != Zero))
            {
                Signal (FCET)
            }
            Else
            {
                Local5 = Acquire (FCMT, 0x03E8)
                If ((Local5 == Zero))
                {
                    FCRN = One
                    Release (FCMT)
                }

                Local5 = Zero
                While ((Local5 < 0x04))
                {
                    If ((Wait (FCET, 0x05) != Zero))
                    {
                        Local5 = 0x04
                    }
                    Else
                    {
                        Local5++
                    }
                }

                Local5 = Acquire (FCMT, 0x03E8)
                If ((Local5 == Zero))
                {
                    FCRN = Zero
                    Release (FCMT)
                }
            }

            Local0 = Zero
            Local1 = Zero
            Local2 = Zero
            Local3 = Zero
            Local4 = Zero
            Local5 = Acquire (FMT0, 0x03E8)
            If ((Local5 == Zero))
            {
                Local0 = CVF0 /* \_TZ_.CVF0 */
                Release (FMT0)
            }

            Local5 = Acquire (FMT1, 0x03E8)
            If ((Local5 == Zero))
            {
                Local1 = CVF1 /* \_TZ_.CVF1 */
                Release (FMT1)
            }

            Local5 = Acquire (FMT2, 0x03E8)
            If ((Local5 == Zero))
            {
                Local2 = CVF2 /* \_TZ_.CVF2 */
                Release (FMT2)
            }

            Local5 = Acquire (FMT3, 0x03E8)
            If ((Local5 == Zero))
            {
                Local3 = CVF3 /* \_TZ_.CVF3 */
                Release (FMT3)
            }

            Local5 = Acquire (FMT4, 0x03E8)
            If ((Local5 == Zero))
            {
                Local4 = CVF4 /* \_TZ_.CVF4 */
                Release (FMT4)
            }

            \VFN0 = Local0
            \VFN1 = Local1
            \VFN2 = Local2
            \VFN3 = Local3
            \VFN4 = Local4
            If ((\_SB.PCI0.LPCB.H_EC.ECAV && ETMD))
            {
                If (((Local0 != Zero) && (Local1 != Zero)))
                {
                    \_SB.PCI0.LPCB.H_EC.ECWT (AC0F, RefOf (\_SB.PCI0.LPCB.H_EC.PENV))
                }
                ElseIf (((Local0 == Zero) && (Local1 != Zero)))
                {
                    \_SB.PCI0.LPCB.H_EC.ECWT (AC1F, RefOf (\_SB.PCI0.LPCB.H_EC.PENV))
                }
                Else
                {
                    \_SB.PCI0.LPCB.H_EC.ECWT (Zero, RefOf (\_SB.PCI0.LPCB.H_EC.PENV))
                }

                \_SB.PCI0.LPCB.H_EC.ECMD (0x1A)
            }
        }

        ThermalZone (TZ00)
        {
            Name (PTMP, 0x0BB8)
            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                \CTYP = Arg0
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If (CondRefOf (\_SB.ACRT))
                {
                    If ((\_SB.ACRT != Zero))
                    {
                        Return ((0x0AAC + (\_SB.ACRT * 0x0A)))
                    }
                }

                Return ((0x0AAC + (\CRTT * 0x0A)))
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CondRefOf (\_SB.AAC0))
                {
                    If ((\_SB.AAC0 != Zero))
                    {
                        Return ((0x0AAC + (\_SB.AAC0 * 0x0A)))
                    }
                }

                Return ((0x0AAC + (\ACTT * 0x0A)))
            }

            Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                Return ((0x0AAC + (\ACT1 * 0x0A)))
            }

            Method (_AC2, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (((0x0AAC + (\ACT1 * 0x0A)) - 0x32))
            }

            Method (_AC3, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (((0x0AAC + (\ACT1 * 0x0A)) - 0x64))
            }

            Method (_AC4, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                Return (((0x0AAC + (\ACT1 * 0x0A)) - 0x96))
            }

            Name (_AL0, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN0
            })
            Name (_AL1, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN1
            })
            Name (_AL2, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN2
            })
            Name (_AL3, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN3
            })
            Name (_AL4, Package (0x01)  // _ALx: Active List, x=0-9
            {
                FAN4
            })
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (!ETMD)
                {
                    Return (0x0BB8)
                }

                If (CondRefOf (\_SB.DTSE))
                {
                    If ((\_SB.DTSE == 0x03))
                    {
                        Return ((0x0B10 + (\CRTT * 0x0A)))
                    }
                }

                If (CondRefOf (\_SB.DTSE))
                {
                    If ((\_SB.DTSE == One))
                    {
                        If ((\_SB.PKGA == One))
                        {
                            Local0 = \_SB.PDTS /* External reference */
                            Return ((0x0AAC + (Local0 * 0x0A)))
                        }

                        Local0 = \_SB.DTS1 /* External reference */
                        If ((\_SB.DTS2 > Local0))
                        {
                            Local0 = \_SB.DTS2 /* External reference */
                        }

                        If ((\_SB.DTS3 > Local0))
                        {
                            Local0 = \_SB.DTS3 /* External reference */
                        }

                        If ((\_SB.DTS4 > Local0))
                        {
                            Local0 = \_SB.DTS4 /* External reference */
                        }

                        Return ((0x0AAC + (Local0 * 0x0A)))
                    }
                }

                If (\ECON)
                {
                    Local0 = \_SB.PCI0.LPCB.H_EC.ECRD (RefOf (\_SB.PCI0.LPCB.H_EC.PLMX))
                    Local0 = (0x0AAC + (Local0 * 0x0A))
                    PTMP = Local0
                    Return (Local0)
                }

                Return (0x0BC2)
            }

            Method (XPSL, 0, Serialized)
            {
                If ((\TCNT == 0x10))
                {
                    Return (Package (0x10)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03, 
                        \_SB.PR04, 
                        \_SB.PR05, 
                        \_SB.PR06, 
                        \_SB.PR07, 
                        \_SB.PR08, 
                        \_SB.PR09, 
                        \_SB.PR10, 
                        \_SB.PR11, 
                        \_SB.PR12, 
                        \_SB.PR13, 
                        \_SB.PR14, 
                        \_SB.PR15
                    })
                }

                If ((\TCNT == 0x0E))
                {
                    Return (Package (0x0E)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03, 
                        \_SB.PR04, 
                        \_SB.PR05, 
                        \_SB.PR06, 
                        \_SB.PR07, 
                        \_SB.PR08, 
                        \_SB.PR09, 
                        \_SB.PR10, 
                        \_SB.PR11, 
                        \_SB.PR12, 
                        \_SB.PR13
                    })
                }

                If ((\TCNT == 0x0C))
                {
                    Return (Package (0x0C)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03, 
                        \_SB.PR04, 
                        \_SB.PR05, 
                        \_SB.PR06, 
                        \_SB.PR07, 
                        \_SB.PR08, 
                        \_SB.PR09, 
                        \_SB.PR10, 
                        \_SB.PR11
                    })
                }

                If ((\TCNT == 0x0A))
                {
                    Return (Package (0x0A)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03, 
                        \_SB.PR04, 
                        \_SB.PR05, 
                        \_SB.PR06, 
                        \_SB.PR07, 
                        \_SB.PR08, 
                        \_SB.PR09
                    })
                }

                If ((\TCNT == 0x08))
                {
                    Return (Package (0x08)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03, 
                        \_SB.PR04, 
                        \_SB.PR05, 
                        \_SB.PR06, 
                        \_SB.PR07
                    })
                }

                If ((\TCNT == 0x07))
                {
                    Return (Package (0x07)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03, 
                        \_SB.PR04, 
                        \_SB.PR05, 
                        \_SB.PR06
                    })
                }

                If ((\TCNT == 0x06))
                {
                    Return (Package (0x06)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03, 
                        \_SB.PR04, 
                        \_SB.PR05
                    })
                }

                If ((\TCNT == 0x05))
                {
                    Return (Package (0x05)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03, 
                        \_SB.PR04
                    })
                }

                If ((\TCNT == 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02, 
                        \_SB.PR03
                    })
                }

                If ((\TCNT == 0x03))
                {
                    Return (Package (0x03)
                    {
                        \_SB.PR00, 
                        \_SB.PR01, 
                        \_SB.PR02
                    })
                }

                If ((\TCNT == 0x02))
                {
                    Return (Package (0x02)
                    {
                        \_SB.PR00, 
                        \_SB.PR01
                    })
                }

                Return (Package (0x01)
                {
                    \_SB.PR00
                })
            }

            Method (XPSV, 0, Serialized)
            {
                If (CondRefOf (\_SB.APSV))
                {
                    If ((\_SB.APSV != Zero))
                    {
                        Return ((0x0AAC + (\_SB.APSV * 0x0A)))
                    }
                }

                Return ((0x0AAC + (\PSVT * 0x0A)))
            }

            Method (XTC1, 0, Serialized)
            {
                Return (\TC1V) /* External reference */
            }

            Method (XTC2, 0, Serialized)
            {
                Return (\TC2V) /* External reference */
            }

            Method (XTSP, 0, Serialized)
            {
                Return (\TSPV) /* External reference */
            }
        }
    }
}



SSDT13
------
DefinitionBlock ("", "SSDT", 1, "OemRef", "OemAti", 0x00001000)
{
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ADPT, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.CLED, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.LIDF, UnknownObj)
    External (_SB_.PCI0.P0LS, IntObj)
    External (_SB_.PCI0.PEG0, DeviceObj)
    External (_SB_.PCI0.PEG0.PEGP, DeviceObj)
    External (_SB_.PCI0.PEG1, UnknownObj)
    External (_SB_.PCI0.PEG1.PEGP, DeviceObj)
    External (_SB_.PCI0.PEG1.VEID, UnknownObj)
    External (_SB_.PCI0.PGOF, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PGON, MethodObj)    // 1 Arguments
    External (EBAS, UnknownObj)
    External (HYSS, UnknownObj)
    External (NVAF, UnknownObj)
    External (OSYS, UnknownObj)
    External (SGMD, UnknownObj)
    External (TBDT, UnknownObj)
    External (THMP, UnknownObj)
    External (XBAS, UnknownObj)

    Scope (\_SB.PCI0.PEG0)
    {
        OperationRegion (DSID, SystemMemory, EBAS, 0x0500)
        Field (DSID, DWordAcc, Lock, Preserve)
        {
            AVID,   16
        }
    }

    If ((\_SB.PCI0.PEG0.AVID == 0x1002))
    {
        Scope (\_SB.PCI0.PEG0)
        {
            OperationRegion (MSID, SystemMemory, EBAS, 0x0500)
            Field (MSID, DWordAcc, Lock, Preserve)
            {
                VEID,   16, 
                DEID,   16, 
                Offset (0x40), 
                NVID,   32, 
                Offset (0x4C), 
                ATID,   32, 
                Offset (0x48B), 
                    ,   1, 
                NHDA,   1
            }

            OperationRegion (RPCX, SystemMemory, ((\XBAS + 0x8000) + Zero), 0x1000)
            Field (RPCX, ByteAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                CMDR,   8, 
                Offset (0x19), 
                PRBN,   8, 
                Offset (0x84), 
                D0ST,   2, 
                Offset (0xAA), 
                CEDR,   1, 
                Offset (0xB0), 
                ASPM,   2, 
                    ,   2, 
                LNKD,   1, 
                Offset (0xC9), 
                    ,   2, 
                LREN,   1, 
                Offset (0x216), 
                LNKS,   4
            }

            PowerResource (PG00, 0x00, 0x0000)
            {
                Name (_STA, One)  // _STA: Status
                Method (_ON, 0, Serialized)  // _ON_: Power On
                {
                    If ((OSYS > 0x07D9))
                    {
                        PGON (Zero)
                        CMDR |= 0x07
                        D0ST = Zero
                        While ((\_SB.PCI0.P0LS < 0x03))
                        {
                            Sleep (One)
                        }

                        If ((VEID == 0x10DE))
                        {
                            NVID = HYSS /* External reference */
                            If ((NVAF == One))
                            {
                                NHDA = One
                            }
                            Else
                            {
                                NHDA = Zero
                            }
                        }

                        If ((VEID == 0x1002))
                        {
                            ATID = HYSS /* External reference */
                        }

                        _STA = One
                    }
                }

                Method (_OFF, 0, Serialized)  // _OFF: Power Off
                {
                    If ((OSYS > 0x07D9))
                    {
                        PGOF (Zero)
                        _STA = Zero
                    }
                }
            }

            Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
            {
                PG00
            })
            Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
            {
                PG00
            })
            Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
            {
                PG00
            })
        }

        Scope (\_SB.PCI0.PEG0.PEGP)
        {
            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                \_SB.PCI0.PGON (Zero)
                Notify (\_SB.PCI0.PEG0, Zero) // Bus Check
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                \_SB.PCI0.PGOF (Zero)
                Notify (\_SB.PCI0.PEG0, Zero) // Bus Check
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
            {
                Return (Package (0x03)
                {
                    0x0110, 
                    0x0210, 
                    0x0220
                })
            }

            Device (LCD0)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    Return (0x0110)
                }

                Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                {
                    Return (Package (0x67)
                    {
                        0x50, 
                        0x32, 
                        Zero, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }
            }
        }
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Name (TMP1, Buffer (0x0100)
                {
                     0x00                                             // .
                })
                CreateWordField (TMP1, Zero, F0SS)
                CreateWordField (TMP1, 0x02, F0IV)
                CreateDWordField (TMP1, 0x04, F0SF)
                F0SS = 0x08
                F0IV = One
                F0SF = One
                Return (TMP1) /* \_SB_.PCI0.GFX0.ATPX.TMP1 */
            }

            If ((Arg0 == One))
            {
                Name (TMP2, Buffer (0x0100)
                {
                     0x00                                             // .
                })
                CreateWordField (TMP2, Zero, F1SS)
                CreateDWordField (TMP2, 0x02, F1VM)
                CreateDWordField (TMP2, 0x06, F1FG)
                F1SS = 0x0A
                F1VM = 0x0003FFFF
                F1FG = 0x00031800
                Return (TMP2) /* \_SB_.PCI0.GFX0.ATPX.TMP2 */
            }
        }

        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == Zero))
            {
                Name (TMP0, Buffer (0x0100)
                {
                     0x00                                             // .
                })
                CreateWordField (TMP0, Zero, F0SS)
                CreateWordField (TMP0, 0x02, F0IV)
                CreateDWordField (TMP0, 0x04, F0SN)
                CreateDWordField (TMP0, 0x08, F0SF)
                F0SS = 0x0C
                F0IV = One
                F0SN = 0x0A00
                F0SF = 0x00100003
                If ((\_SB.PCI0.PEG0.AVID == 0x1002))
                {
                    F0SN = 0x1F84
                    F0SF = 0x800B
                    If (\_SB.PCI0.LPCB.EC0.CLED)
                    {
                        F0SN = 0x1F84
                        F0SF = 0x0010800B
                    }
                }
                Else
                {
                    F0SN = 0x0F84
                    F0SF = 0x0010800B
                }

                Return (TMP0) /* \_SB_.PCI0.GFX0.ATIF.TMP0 */
            }

            If ((Arg0 == One))
            {
                Name (TMP1, Buffer (0x0100)
                {
                     0x00                                             // .
                })
                CreateWordField (TMP1, Zero, F1SS)
                CreateDWordField (TMP1, 0x02, F1VF)
                CreateDWordField (TMP1, 0x06, F1FG)
                F1SS = 0x0A
                F1VF = 0x03
                F1FG = One
                Return (TMP1) /* \_SB_.PCI0.GFX0.ATIF.TMP1 */
            }

            If ((Arg0 == 0x02))
            {
                Name (PSBR, Buffer (0x04)
                {
                     0x00                                             // .
                })
                CreateBitField (PSBR, Zero, PDSW)
                CreateBitField (PSBR, One, PEXM)
                CreateBitField (PSBR, 0x02, PTHR)
                CreateBitField (PSBR, 0x03, PFPS)
                CreateBitField (PSBR, 0x04, PSPS)
                CreateBitField (PSBR, 0x05, PDCC)
                CreateBitField (PSBR, 0x06, PXPS)
                CreateBitField (PSBR, 0x07, PBRT)
                CreateBitField (PSBR, 0x08, DCSC)
                CreateBitField (PSBR, 0x09, RESE)
                CreateBitField (PSBR, 0x0A, RESR)
                CreateBitField (PSBR, 0x0B, RESS)
                CreateBitField (PSBR, 0x0C, PPLR)
                Name (TMP2, Buffer (0x0100)
                {
                     0x00                                             // .
                })
                CreateWordField (TMP2, Zero, F2SS)
                CreateDWordField (TMP2, 0x02, F2PR)
                CreateByteField (TMP2, 0x06, F2EM)
                CreateByteField (TMP2, 0x07, F2TG)
                CreateByteField (TMP2, 0x08, F2SI)
                CreateByteField (TMP2, 0x09, F2FG)
                CreateByteField (TMP2, 0x0A, F2FI)
                CreateByteField (TMP2, 0x0B, F2SP)
                CreateByteField (TMP2, 0x0C, BRTL)
                CreateByteField (TMP2, 0x0D, TRGC)
                CreateDWordField (TMP2, 0x0E, PPLV)
                F2SS = 0x12
                PSPS = One
                PPLR = One
                F2PR = PSBR /* \_SB_.PCI0.GFX0.ATIF.PSBR */
                F2TG = 0x02
                F2SP = Zero
                TRGC = 0x02
                If ((\THMP == 0x96))
                {
                    PPLV = 0x4100
                }
                Else
                {
                    PPLV = 0x5500
                }

                Return (TMP2) /* \_SB_.PCI0.GFX0.ATIF.TMP2 */
            }

            If ((Arg0 == 0x04))
            {
                Name (TMP4, Buffer (0x0100)
                {
                     0x00                                             // .
                })
                CreateWordField (TMP4, Zero, F4SS)
                CreateByteField (TMP4, 0x02, F4LS)
                F4SS = 0x03
                If (\_SB.PCI0.LPCB.EC0.LIDF)
                {
                    F4LS |= One
                }
                Else
                {
                    F4LS = Zero
                }
            }

            If ((Arg0 == 0x10))
            {
                Return (Buffer (0x1C)
                {
                    /* 0000 */  0x1C, 0x00, 0x00, 0x00, 0x00, 0x64, 0x32, 0x0C,  // .....d2.
                    /* 0008 */  0xFF, 0x09, 0x0A, 0x24, 0x14, 0x3C, 0x1E, 0x54,  // ...$.<.T
                    /* 0010 */  0x28, 0x6C, 0x32, 0x84, 0x3C, 0x9C, 0x46, 0xB4,  // (l2.<.F.
                    /* 0018 */  0x50, 0xCC, 0x5A, 0xE4                           // P.Z.
                })
            }

            If ((Arg0 == 0x14))
            {
                Name (TM20, Buffer (0x0100)
                {
                     0x00                                             // .
                })
                OperationRegion (DGFX, SystemMemory, TBDT, 0x3E)
                Field (DGFX, ByteAcc, NoLock, Preserve)
                {
                    TBDS,   16, 
                    RPBN,   16, 
                    RPDN,   16, 
                    RPFN,   16, 
                    RPVI,   16, 
                    RPDI,   16, 
                    HUBN,   16, 
                    HUDN,   16, 
                    HUFN,   16, 
                    HUVI,   16, 
                    HUDI,   16, 
                    HDBN,   16, 
                    HDDN,   16, 
                    HDFN,   16, 
                    HDVI,   16, 
                    HDDI,   16, 
                    EUBN,   16, 
                    EUDN,   16, 
                    EUFN,   16, 
                    EUVI,   16, 
                    EUDI,   16, 
                    EDBN,   16, 
                    EDDN,   16, 
                    EDFN,   16, 
                    EDVI,   16, 
                    EDDI,   16, 
                    EPBN,   16, 
                    EPDN,   16, 
                    EPFN,   16, 
                    EPVI,   16, 
                    EPDI,   16
                }

                CreateWordField (TM20, Zero, F20S)
                CreateWordField (TM20, 0x02, P0BN)
                CreateWordField (TM20, 0x04, P0DN)
                CreateWordField (TM20, 0x06, P0FN)
                CreateWordField (TM20, 0x08, P0VI)
                CreateWordField (TM20, 0x0A, P0DI)
                CreateWordField (TM20, 0x0C, P1BN)
                CreateWordField (TM20, 0x0E, P1DN)
                CreateWordField (TM20, 0x10, P1FN)
                CreateWordField (TM20, 0x12, P1VI)
                CreateWordField (TM20, 0x14, P1DI)
                CreateWordField (TM20, 0x16, P2BN)
                CreateWordField (TM20, 0x18, P2DN)
                CreateWordField (TM20, 0x1A, P2FN)
                CreateWordField (TM20, 0x1C, P2VI)
                CreateWordField (TM20, 0x1E, P2DI)
                CreateWordField (TM20, 0x20, P3BN)
                CreateWordField (TM20, 0x22, P3DN)
                CreateWordField (TM20, 0x24, P3FN)
                CreateWordField (TM20, 0x26, P3VI)
                CreateWordField (TM20, 0x28, P3DI)
                CreateWordField (TM20, 0x2A, P4BN)
                CreateWordField (TM20, 0x2C, P4DN)
                CreateWordField (TM20, 0x2E, P4FN)
                CreateWordField (TM20, 0x30, P4VI)
                CreateWordField (TM20, 0x32, P4DI)
                CreateWordField (TM20, 0x34, P5BN)
                CreateWordField (TM20, 0x36, P5DN)
                CreateWordField (TM20, 0x38, P5FN)
                CreateWordField (TM20, 0x3A, P5VI)
                CreateWordField (TM20, 0x3C, P5DI)
                F20S = TBDS /* \_SB_.PCI0.GFX0.ATIF.TBDS */
                P0BN = RPBN /* \_SB_.PCI0.GFX0.ATIF.RPBN */
                P0DN = RPDN /* \_SB_.PCI0.GFX0.ATIF.RPDN */
                P0FN = RPFN /* \_SB_.PCI0.GFX0.ATIF.RPFN */
                P0VI = RPVI /* \_SB_.PCI0.GFX0.ATIF.RPVI */
                P0DI = RPDI /* \_SB_.PCI0.GFX0.ATIF.RPDI */
                P1BN = HUBN /* \_SB_.PCI0.GFX0.ATIF.HUBN */
                P1DN = HUDN /* \_SB_.PCI0.GFX0.ATIF.HUDN */
                P1FN = HUFN /* \_SB_.PCI0.GFX0.ATIF.HUFN */
                P1VI = HUVI /* \_SB_.PCI0.GFX0.ATIF.HUVI */
                P1DI = HUDI /* \_SB_.PCI0.GFX0.ATIF.HUDI */
                P2BN = HDBN /* \_SB_.PCI0.GFX0.ATIF.HDBN */
                P2DN = HDDN /* \_SB_.PCI0.GFX0.ATIF.HDDN */
                P2FN = HDFN /* \_SB_.PCI0.GFX0.ATIF.HDFN */
                P2VI = HDVI /* \_SB_.PCI0.GFX0.ATIF.HDVI */
                P2DI = HDDI /* \_SB_.PCI0.GFX0.ATIF.HDDI */
                P3BN = EUBN /* \_SB_.PCI0.GFX0.ATIF.EUBN */
                P3DN = EUDN /* \_SB_.PCI0.GFX0.ATIF.EUDN */
                P3FN = EUFN /* \_SB_.PCI0.GFX0.ATIF.EUFN */
                P3VI = EUVI /* \_SB_.PCI0.GFX0.ATIF.EUVI */
                P3DI = EUDI /* \_SB_.PCI0.GFX0.ATIF.EUDI */
                P4BN = EDBN /* \_SB_.PCI0.GFX0.ATIF.EDBN */
                P4DN = EDDN /* \_SB_.PCI0.GFX0.ATIF.EDDN */
                P4FN = EDFN /* \_SB_.PCI0.GFX0.ATIF.EDFN */
                P4VI = EDVI /* \_SB_.PCI0.GFX0.ATIF.EDVI */
                P4DI = EDDI /* \_SB_.PCI0.GFX0.ATIF.EDDI */
                P5BN = EPBN /* \_SB_.PCI0.GFX0.ATIF.EPBN */
                P5DN = EPDN /* \_SB_.PCI0.GFX0.ATIF.EPDN */
                P5FN = EPFN /* \_SB_.PCI0.GFX0.ATIF.EPFN */
                P5VI = EPVI /* \_SB_.PCI0.GFX0.ATIF.EPVI */
                P5DI = EPDI /* \_SB_.PCI0.GFX0.ATIF.EPDI */
                Return (TM20) /* \_SB_.PCI0.GFX0.ATIF.TM20 */
            }

            If ((Arg0 == 0x15))
            {
                Name (TM21, Buffer (0x0100)
                {
                     0x00                                             // .
                })
                CreateWordField (TM21, Zero, F21N)
                CreateWordField (TM21, 0x02, F21S)
                CreateWordField (TM21, 0x04, EGP1)
                CreateWordField (TM21, 0x06, EGB1)
                F21N = One
                F21S = 0x08
                EGP1 = One
                EGB1 = 0x02
                Return (TM21) /* \_SB_.PCI0.GFX0.ATIF.TM21 */
            }
        }
    }

    Scope (\_SB.PCI0.PEG1.PEGP)
    {
        Method (_ON, 0, Serialized)  // _ON_: Power On
        {
            Notify (\_SB.PCI0.PEG1, Zero) // Bus Check
        }

        Method (_OFF, 0, Serialized)  // _OFF: Power Off
        {
            Notify (\_SB.PCI0.PEG1, Zero) // Bus Check
        }

        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Return (0x0F)
        }
    }
}



SSDT14
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApHwp", 0x00003000)
{
    External (_SB_.PR00, ProcessorObj)
    External (_SB_.PR00._CPC, MethodObj)    // 0 Arguments
    External (_SB_.PR01, ProcessorObj)
    External (_SB_.PR02, ProcessorObj)
    External (_SB_.PR03, ProcessorObj)
    External (_SB_.PR04, ProcessorObj)
    External (_SB_.PR05, ProcessorObj)
    External (_SB_.PR06, ProcessorObj)
    External (_SB_.PR07, ProcessorObj)
    External (_SB_.PR08, ProcessorObj)
    External (_SB_.PR09, ProcessorObj)
    External (_SB_.PR10, ProcessorObj)
    External (_SB_.PR11, ProcessorObj)
    External (_SB_.PR12, ProcessorObj)
    External (_SB_.PR13, ProcessorObj)
    External (_SB_.PR14, ProcessorObj)
    External (_SB_.PR15, ProcessorObj)

    Scope (\_SB.PR01)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            Return (\_SB.PR00._CPC ())
        }
    }
}



SSDT15
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "HwpLvt", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR01, ProcessorObj)
    External (_SB_.PR02, ProcessorObj)
    External (_SB_.PR03, ProcessorObj)
    External (_SB_.PR04, ProcessorObj)
    External (_SB_.PR05, ProcessorObj)
    External (_SB_.PR06, ProcessorObj)
    External (_SB_.PR07, ProcessorObj)
    External (_SB_.PR08, ProcessorObj)
    External (_SB_.PR09, ProcessorObj)
    External (_SB_.PR10, ProcessorObj)
    External (_SB_.PR11, ProcessorObj)
    External (_SB_.PR12, ProcessorObj)
    External (_SB_.PR13, ProcessorObj)
    External (_SB_.PR14, ProcessorObj)
    External (_SB_.PR15, ProcessorObj)
    External (TCNT, FieldUnitObj)

    Scope (\_GPE)
    {
        Method (HLVT, 0, Serialized)
        {
            Name (NTVL, 0x83)
            If (((\_SB.CFGD & 0x02000000) && (\_SB.OSCP & 0x1000)))
            {
                NTVL = 0x85
            }

            Switch (ToInteger (TCNT))
            {
                Case (0x10)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                    Notify (\_SB.PR02, NTVL)
                    Notify (\_SB.PR03, NTVL)
                    Notify (\_SB.PR04, NTVL)
                    Notify (\_SB.PR05, NTVL)
                    Notify (\_SB.PR06, NTVL)
                    Notify (\_SB.PR07, NTVL)
                    Notify (\_SB.PR08, NTVL)
                    Notify (\_SB.PR09, NTVL)
                    Notify (\_SB.PR10, NTVL)
                    Notify (\_SB.PR11, NTVL)
                    Notify (\_SB.PR12, NTVL)
                    Notify (\_SB.PR13, NTVL)
                    Notify (\_SB.PR14, NTVL)
                    Notify (\_SB.PR15, NTVL)
                }
                Case (0x0E)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                    Notify (\_SB.PR02, NTVL)
                    Notify (\_SB.PR03, NTVL)
                    Notify (\_SB.PR04, NTVL)
                    Notify (\_SB.PR05, NTVL)
                    Notify (\_SB.PR06, NTVL)
                    Notify (\_SB.PR07, NTVL)
                    Notify (\_SB.PR08, NTVL)
                    Notify (\_SB.PR09, NTVL)
                    Notify (\_SB.PR10, NTVL)
                    Notify (\_SB.PR11, NTVL)
                    Notify (\_SB.PR12, NTVL)
                    Notify (\_SB.PR13, NTVL)
                }
                Case (0x0C)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                    Notify (\_SB.PR02, NTVL)
                    Notify (\_SB.PR03, NTVL)
                    Notify (\_SB.PR04, NTVL)
                    Notify (\_SB.PR05, NTVL)
                    Notify (\_SB.PR06, NTVL)
                    Notify (\_SB.PR07, NTVL)
                    Notify (\_SB.PR08, NTVL)
                    Notify (\_SB.PR09, NTVL)
                    Notify (\_SB.PR10, NTVL)
                    Notify (\_SB.PR11, NTVL)
                }
                Case (0x0A)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                    Notify (\_SB.PR02, NTVL)
                    Notify (\_SB.PR03, NTVL)
                    Notify (\_SB.PR04, NTVL)
                    Notify (\_SB.PR05, NTVL)
                    Notify (\_SB.PR06, NTVL)
                    Notify (\_SB.PR07, NTVL)
                    Notify (\_SB.PR08, NTVL)
                    Notify (\_SB.PR09, NTVL)
                }
                Case (0x08)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                    Notify (\_SB.PR02, NTVL)
                    Notify (\_SB.PR03, NTVL)
                    Notify (\_SB.PR04, NTVL)
                    Notify (\_SB.PR05, NTVL)
                    Notify (\_SB.PR06, NTVL)
                    Notify (\_SB.PR07, NTVL)
                }
                Case (0x07)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                    Notify (\_SB.PR02, NTVL)
                    Notify (\_SB.PR03, NTVL)
                    Notify (\_SB.PR04, NTVL)
                    Notify (\_SB.PR05, NTVL)
                    Notify (\_SB.PR06, NTVL)
                }
                Case (0x06)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                    Notify (\_SB.PR02, NTVL)
                    Notify (\_SB.PR03, NTVL)
                    Notify (\_SB.PR04, NTVL)
                    Notify (\_SB.PR05, NTVL)
                }
                Case (0x05)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                    Notify (\_SB.PR02, NTVL)
                    Notify (\_SB.PR03, NTVL)
                    Notify (\_SB.PR04, NTVL)
                }
                Case (0x04)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                    Notify (\_SB.PR02, NTVL)
                    Notify (\_SB.PR03, NTVL)
                }
                Case (0x03)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                    Notify (\_SB.PR02, NTVL)
                }
                Case (0x02)
                {
                    Notify (\_SB.PR00, NTVL)
                    Notify (\_SB.PR01, NTVL)
                }
                Default
                {
                    Notify (\_SB.PR00, NTVL)
                }

            }
        }
    }
}



SSDT16
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_SB_.PR00, DeviceObj)
    External (C3LT, UnknownObj)
    External (C3MW, UnknownObj)
    External (C6LT, UnknownObj)
    External (C6MW, UnknownObj)
    External (C7LT, UnknownObj)
    External (C7MW, UnknownObj)
    External (CDLT, UnknownObj)
    External (CDLV, UnknownObj)
    External (CDMW, UnknownObj)
    External (CDPW, UnknownObj)
    External (CFGD, UnknownObj)
    External (FEMD, UnknownObj)
    External (FMBL, UnknownObj)
    External (PC00, UnknownObj)
    External (PFLV, UnknownObj)
    External (PWRS, UnknownObj)

    Scope (\_SB.PR00)
    {
        Name (C1TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            One, 
            One, 
            0x03E8
        })
        Name (C3TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001814, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x01F4
        })
        Name (C6TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001815, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0x015E
        })
        Name (C7TM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x02, 
            Zero, 
            0xC8
        })
        Name (CDTM, Package (0x04)
        {
            ResourceTemplate ()
            {
                Register (SystemIO, 
                    0x08,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000001816, // Address
                    ,)
            }, 

            0x03, 
            Zero, 
            Zero
        })
        Name (MWES, ResourceTemplate ()
        {
            Register (FFixedHW, 
                0x01,               // Bit Width
                0x02,               // Bit Offset
                0x0000000000000000, // Address
                0x01,               // Access Size
                )
        })
        Name (AC2V, Zero)
        Name (AC3V, Zero)
        Name (C3ST, Package (0x04)
        {
            0x03, 
            Package (0x00){}, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C2ST, Package (0x03)
        {
            0x02, 
            Package (0x00){}, 
            Package (0x00){}
        })
        Name (C1ST, Package (0x02)
        {
            One, 
            Package (0x00){}
        })
        Name (CSTF, Zero)
        Method (_CST, 0, Serialized)  // _CST: C-States
        {
            If (!CSTF)
            {
                C3TM [0x02] = C3LT /* External reference */
                C6TM [0x02] = C6LT /* External reference */
                C7TM [0x02] = C7LT /* External reference */
                CDTM [0x02] = CDLT /* External reference */
                CDTM [0x03] = CDPW /* External reference */
                DerefOf (CDTM [Zero]) [0x07] = CDLV /* External reference */
                If (((CFGD & 0x0800) && (PC00 & 0x0200)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C6TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C7TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    CDTM [Zero] = MWES /* \_SB_.PR00.MWES */
                    C3TM [Zero] = MWES /* \_SB_.PR00.MWES */
                    DerefOf (C3TM [Zero]) [0x07] = C3MW /* External reference */
                    DerefOf (C6TM [Zero]) [0x07] = C6MW /* External reference */
                    DerefOf (C7TM [Zero]) [0x07] = C7MW /* External reference */
                    DerefOf (CDTM [Zero]) [0x07] = CDMW /* External reference */
                }
                ElseIf (((CFGD & 0x0800) && (PC00 & 0x0100)))
                {
                    C1TM [Zero] = MWES /* \_SB_.PR00.MWES */
                }

                CSTF = Ones
            }

            AC2V = Zero
            AC3V = Zero
            C3ST [One] = C1TM /* \_SB_.PR00.C1TM */
            If ((CFGD & 0x20))
            {
                C3ST [0x02] = C7TM /* \_SB_.PR00.C7TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x10))
            {
                C3ST [0x02] = C6TM /* \_SB_.PR00.C6TM */
                AC2V = Ones
            }
            ElseIf ((CFGD & 0x08))
            {
                C3ST [0x02] = C3TM /* \_SB_.PR00.C3TM */
                AC2V = Ones
            }

            If ((CFGD & 0x4000))
            {
                C3ST [0x03] = CDTM /* \_SB_.PR00.CDTM */
                AC3V = Ones
            }

            If ((AC2V && AC3V))
            {
                Return (C3ST) /* \_SB_.PR00.C3ST */
            }
            ElseIf (AC2V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x02])
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            ElseIf (AC3V)
            {
                C2ST [One] = DerefOf (C3ST [One])
                C2ST [0x02] = DerefOf (C3ST [0x03])
                DerefOf (C2ST [0x02]) [One] = 0x02
                Return (C2ST) /* \_SB_.PR00.C2ST */
            }
            Else
            {
                C1ST [One] = DerefOf (C3ST [One])
                Return (C1ST) /* \_SB_.PR00.C1ST */
            }
        }
    }
}



SSDT17
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApCst", 0x00003000)
{
    External (_SB_.PR00._CST, UnknownObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)

    Scope (\_SB.PR01)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_SB.PR00._CST) /* External reference */
        }
    }
}



SSDT18
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApIst", 0x00003000)
{
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00._PCT, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PPC, MethodObj)    // 0 Arguments
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (PC00, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR01)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = One
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR01.HPSD */
            }

            Return (SPSD) /* \_SB_.PR01.SPSD */
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x02
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR02.HPSD */
            }

            Return (SPSD) /* \_SB_.PR02.SPSD */
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x03
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR03.HPSD */
            }

            Return (SPSD) /* \_SB_.PR03.SPSD */
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x04
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR04.HPSD */
            }

            Return (SPSD) /* \_SB_.PR04.SPSD */
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x05
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR05.HPSD */
            }

            Return (SPSD) /* \_SB_.PR05.SPSD */
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x06
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR06.HPSD */
            }

            Return (SPSD) /* \_SB_.PR06.SPSD */
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x07
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR07.HPSD */
            }

            Return (SPSD) /* \_SB_.PR07.SPSD */
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x08
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR08.HPSD */
            }

            Return (SPSD) /* \_SB_.PR08.SPSD */
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x09
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR09.HPSD */
            }

            Return (SPSD) /* \_SB_.PR09.SPSD */
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0A
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR10.HPSD */
            }

            Return (SPSD) /* \_SB_.PR10.SPSD */
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0B
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR11.HPSD */
            }

            Return (SPSD) /* \_SB_.PR11.SPSD */
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0C
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR12.HPSD */
            }

            Return (SPSD) /* \_SB_.PR12.SPSD */
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0D
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR13.HPSD */
            }

            Return (SPSD) /* \_SB_.PR13.SPSD */
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0E
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR14.HPSD */
            }

            Return (SPSD) /* \_SB_.PR14.SPSD */
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_SB.PR00._PPC ())
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_SB.PR00._PCT ())
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_SB.PR00._PSS ())
        }

        Name (HPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFE, 
                0x80
            }
        })
        Name (SPSD, Package (0x01)
        {
            Package (0x05)
            {
                0x05, 
                Zero, 
                Zero, 
                0xFC, 
                0x80
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            If ((\_SB.CFGD & 0x02000000))
            {
                DerefOf (HPSD [Zero]) [0x02] = 0x0F
                DerefOf (HPSD [Zero]) [0x04] = One
            }
            Else
            {
                DerefOf (HPSD [Zero]) [0x04] = TCNT /* External reference */
                DerefOf (SPSD [Zero]) [0x04] = TCNT /* External reference */
            }

            If ((PC00 & 0x0800))
            {
                Return (HPSD) /* \_SB_.PR15.HPSD */
            }

            Return (SPSD) /* \_SB_.PR15.SPSD */
        }
    }
}



SSDT19
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Hwp", 0x00003000)
{
    External (_SB_.CFGD, IntObj)
    External (_SB_.HWPV, IntObj)
    External (_SB_.ITBM, IntObj)
    External (_SB_.LMPS, IntObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR00.CPC2, PkgObj)
    External (_SB_.PR00.CPOC, PkgObj)
    External (CPC2, IntObj)
    External (CPOC, IntObj)
    External (TCNT, FieldUnitObj)

    Scope (\_SB.PR00)
    {
        Method (_CPC, 0, NotSerialized)  // _CPC: Continuous Performance Control
        {
            If ((\_SB.CFGD & 0x01000000))
            {
                Return (CPOC) /* External reference */
            }
            Else
            {
                If (((\_SB.CFGD & 0x02000000) && (\_SB.ITBM == Zero)))
                {
                    DerefOf (CPC2 [0x02]) = \_SB.LMPS /* External reference */
                }

                Return (CPC2) /* External reference */
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "DptfTa", "DptfTabl", 0x00001000)
{
    External (_SB_.AAC0, FieldUnitObj)
    External (_SB_.ACRT, FieldUnitObj)
    External (_SB_.APSV, FieldUnitObj)
    External (_SB_.CBMI, FieldUnitObj)
    External (_SB_.CFGD, FieldUnitObj)
    External (_SB_.CLVL, FieldUnitObj)
    External (_SB_.CPPC, FieldUnitObj)
    External (_SB_.CTC0, FieldUnitObj)
    External (_SB_.CTC1, FieldUnitObj)
    External (_SB_.CTC2, FieldUnitObj)
    External (_SB_.OSCP, IntObj)
    External (_SB_.PAGD, DeviceObj)
    External (_SB_.PAGD._PUR, PkgObj)
    External (_SB_.PAGD._STA, MethodObj)    // 0 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.B0D4, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.CTMP, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CVRT, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.GVRT, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MEMT, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.SKTC, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.TSSR, IntObj)
    External (_SB_.PCI0.LPCB.ECOK, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.H_EC, DeviceObj)
    External (_SB_.PCI0.LPCB.H_EC.ACUR, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.AP01, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.AP02, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.AP10, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.APKP, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.APKT, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.ARTG, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.AVOL, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.B1FC, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.B1RC, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.BICC, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.BMAX, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.CFAN, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.CFSP, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.CHGR, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.CMDR, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.CPUP, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.CTYP, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.ECAV, IntObj)
    External (_SB_.PCI0.LPCB.H_EC.ECF2, OpRegionObj)
    External (_SB_.PCI0.LPCB.H_EC.FCHG, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.HYST, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.LSOC, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.NPWR, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PBSS, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PECH, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PENV, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PINV, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PLMX, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PMAX, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PPSH, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PPSL, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PPWR, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PROP, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PSOC, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PSTP, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.PWRT, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.TSHT, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.TSI_, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.TSLT, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR1, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR2, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR3, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR4, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.TSR5, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.TSSR, FieldUnitObj)
    External (_SB_.PCI0.LPCB.H_EC.VMIN, FieldUnitObj)
    External (_SB_.PCI0.MHBR, FieldUnitObj)
    External (_SB_.PL10, FieldUnitObj)
    External (_SB_.PL11, FieldUnitObj)
    External (_SB_.PL12, FieldUnitObj)
    External (_SB_.PL20, FieldUnitObj)
    External (_SB_.PL21, FieldUnitObj)
    External (_SB_.PL22, FieldUnitObj)
    External (_SB_.PLW0, FieldUnitObj)
    External (_SB_.PLW1, FieldUnitObj)
    External (_SB_.PLW2, FieldUnitObj)
    External (_SB_.PR00, ProcessorObj)
    External (_SB_.PR00._PSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TPC, IntObj)
    External (_SB_.PR00._TSD, MethodObj)    // 0 Arguments
    External (_SB_.PR00._TSS, MethodObj)    // 0 Arguments
    External (_SB_.PR00.LPSS, PkgObj)
    External (_SB_.PR00.TPSS, PkgObj)
    External (_SB_.PR00.TSMC, PkgObj)
    External (_SB_.PR00.TSMF, PkgObj)
    External (_SB_.PR01, ProcessorObj)
    External (_SB_.PR02, ProcessorObj)
    External (_SB_.PR03, ProcessorObj)
    External (_SB_.PR04, ProcessorObj)
    External (_SB_.PR05, ProcessorObj)
    External (_SB_.PR06, ProcessorObj)
    External (_SB_.PR07, ProcessorObj)
    External (_SB_.PR08, ProcessorObj)
    External (_SB_.PR09, ProcessorObj)
    External (_SB_.PR10, ProcessorObj)
    External (_SB_.PR11, ProcessorObj)
    External (_SB_.PR12, ProcessorObj)
    External (_SB_.PR13, ProcessorObj)
    External (_SB_.PR14, ProcessorObj)
    External (_SB_.PR15, ProcessorObj)
    External (_SB_.SLPB, DeviceObj)
    External (_SB_.TAR0, FieldUnitObj)
    External (_SB_.TAR1, FieldUnitObj)
    External (_SB_.TAR2, FieldUnitObj)
    External (_TZ_.ETMD, IntObj)
    External (_TZ_.TZ00, ThermalZoneObj)
    External (_TZ_.TZ01, ThermalZoneObj)
    External (ACTT, IntObj)
    External (APPE, IntObj)
    External (ATMC, IntObj)
    External (ATPC, IntObj)
    External (CA2D, IntObj)
    External (CHGE, IntObj)
    External (CPUS, IntObj)
    External (CRTT, IntObj)
    External (CTDP, IntObj)
    External (DCFE, IntObj)
    External (DISE, IntObj)
    External (DPAP, IntObj)
    External (DPCP, IntObj)
    External (DPHL, IntObj)
    External (DPLL, IntObj)
    External (DPPP, IntObj)
    External (DPTF, IntObj)
    External (FND1, IntObj)
    External (HIDW, MethodObj)    // 4 Arguments
    External (HIWC, MethodObj)    // 1 Arguments
    External (LPER, IntObj)
    External (LPOE, IntObj)
    External (LPOP, IntObj)
    External (LPOS, IntObj)
    External (LPOW, IntObj)
    External (MPL0, IntObj)
    External (MPL1, IntObj)
    External (MPL2, IntObj)
    External (OCBS, IntObj)
    External (OCSS, IntObj)
    External (ODV0, IntObj)
    External (ODV1, IntObj)
    External (ODV2, IntObj)
    External (ODV3, IntObj)
    External (ODV4, IntObj)
    External (ODV5, IntObj)
    External (P8XH, MethodObj)    // 2 Arguments
    External (PBPE, IntObj)
    External (PC00, IntObj)
    External (PIDE, IntObj)
    External (PNHM, IntObj)
    External (PPPR, IntObj)
    External (PPSZ, IntObj)
    External (PSVT, IntObj)
    External (PTMC, IntObj)
    External (PTPC, IntObj)
    External (PWRE, IntObj)
    External (PWRS, IntObj)
    External (RFIM, IntObj)
    External (S2AT, IntObj)
    External (S2CT, IntObj)
    External (S2DE, IntObj)
    External (S2HT, IntObj)
    External (S2PT, IntObj)
    External (S2S3, IntObj)
    External (S3AT, IntObj)
    External (S3CT, IntObj)
    External (S3DE, IntObj)
    External (S3HT, IntObj)
    External (S3PT, IntObj)
    External (S3S3, IntObj)
    External (S4AT, IntObj)
    External (S4CT, IntObj)
    External (S4DE, IntObj)
    External (S4HT, IntObj)
    External (S4PT, IntObj)
    External (S4S3, IntObj)
    External (S5AT, IntObj)
    External (S5CT, IntObj)
    External (S5DE, IntObj)
    External (S5HT, IntObj)
    External (S5PT, IntObj)
    External (S5S3, IntObj)
    External (SAC3, IntObj)
    External (SACT, IntObj)
    External (SADE, IntObj)
    External (SAHT, IntObj)
    External (SAT1, IntObj)
    External (SAT2, IntObj)
    External (SC31, IntObj)
    External (SC32, IntObj)
    External (SCT1, IntObj)
    External (SCT2, IntObj)
    External (SGE1, IntObj)
    External (SGE2, IntObj)
    External (SHT1, IntObj)
    External (SHT2, IntObj)
    External (SPT1, IntObj)
    External (SPT2, IntObj)
    External (SSP2, IntObj)
    External (SSP3, IntObj)
    External (SSP4, IntObj)
    External (SSP5, IntObj)
    External (TCNT, IntObj)
    External (THMP, IntObj)
    External (TRTV, IntObj)
    External (TSOD, IntObj)
    External (V1AT, IntObj)
    External (V1C3, IntObj)
    External (V1CR, IntObj)
    External (V1HT, IntObj)
    External (V1PV, IntObj)
    External (V2AT, IntObj)
    External (V2C3, IntObj)
    External (V2CR, IntObj)
    External (V2HT, IntObj)
    External (V2PV, IntObj)
    External (VSP1, IntObj)
    External (VSP2, IntObj)
    External (VSPE, IntObj)
    External (WAND, IntObj)
    External (WLC3, IntObj)
    External (WRAT, IntObj)
    External (WRCT, IntObj)
    External (WRFD, IntObj)
    External (WRHT, IntObj)
    External (WRPT, IntObj)
    External (WTSP, IntObj)
    External (WWAT, IntObj)
    External (WWC3, IntObj)
    External (WWCT, IntObj)
    External (WWHT, IntObj)
    External (WWPT, IntObj)

    Scope (\_SB)
    {
        Device (IETM)
        {
            Name (_HID, EisaId ("INT3400") /* Intel Dynamic Power Performance Management */)  // _HID: Hardware ID
            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If (CondRefOf (HIWC))
                {
                    If (HIWC (Arg0))
                    {
                        If (CondRefOf (HIDW))
                        {
                            Return (HIDW (Arg0, Arg1, Arg2, Arg3))
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((DPTF == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (TMPP, Package (0x0C)
            {
                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            })
            Name (PTRP, Zero)
            Name (PSEM, Zero)
            Name (ATRP, Zero)
            Name (ASEM, Zero)
            Name (YTRP, Zero)
            Name (YSEM, Zero)
            Method (IDSP, 0, Serialized)
            {
                Name (TMPI, Zero)
                If (((\DPPP == 0x02) && CondRefOf (DP2P)))
                {
                    TMPP [TMPI] = DerefOf (DP2P [Zero])
                    TMPI++
                }

                If (((\DPPP == One) && CondRefOf (DPSP)))
                {
                    TMPP [TMPI] = DerefOf (DPSP [Zero])
                    TMPI++
                }

                If (((\DPAP == One) && CondRefOf (DASP)))
                {
                    TMPP [TMPI] = DerefOf (DASP [Zero])
                    TMPI++
                }

                If (((\DPAP == 0x02) && CondRefOf (DA2P)))
                {
                    TMPP [TMPI] = DerefOf (DA2P [Zero])
                    TMPI++
                }

                If (((\DPCP == One) && CondRefOf (DCSP)))
                {
                    TMPP [TMPI] = DerefOf (DCSP [Zero])
                    TMPI++
                }

                If (((\RFIM == One) && CondRefOf (RFIP)))
                {
                    TMPP [TMPI] = DerefOf (RFIP [Zero])
                    TMPI++
                }

                If (CondRefOf (CTSP))
                {
                    If (((\SADE == One) && (\CTDP == One)))
                    {
                        TMPP [TMPI] = DerefOf (CTSP [Zero])
                        TMPI++
                    }
                }

                If (((\PBPE == One) && CondRefOf (POBP)))
                {
                    TMPP [TMPI] = DerefOf (POBP [Zero])
                    TMPI++
                }

                If (((\APPE == One) && CondRefOf (DAPP)))
                {
                    TMPP [TMPI] = DerefOf (DAPP [Zero])
                    TMPI++
                }

                If (((\VSPE == One) && CondRefOf (DVSP)))
                {
                    TMPP [TMPI] = DerefOf (DVSP [Zero])
                    TMPI++
                }

                If (((\PIDE == One) && CondRefOf (DPID)))
                {
                    TMPP [TMPI] = DerefOf (DPID [Zero])
                    TMPI++
                }

                Return (TMPP) /* \_SB_.IETM.TMPP */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (NUMP, Zero)
                Name (UID2, Buffer (0x10)
                {
                    /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                    /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                })
                CreateDWordField (Arg3, Zero, STS1)
                CreateDWordField (Arg3, 0x04, CAP1)
                IDSP ()
                NUMP = SizeOf (TMPP)
                CreateDWordField (Arg0, Zero, IID0)
                CreateDWordField (Arg0, 0x04, IID1)
                CreateDWordField (Arg0, 0x08, IID2)
                CreateDWordField (Arg0, 0x0C, IID3)
                CreateDWordField (UID2, Zero, EID0)
                CreateDWordField (UID2, 0x04, EID1)
                CreateDWordField (UID2, 0x08, EID2)
                CreateDWordField (UID2, 0x0C, EID3)
                While (NUMP)
                {
                    UID2 = DerefOf (TMPP [(NUMP - One)])
                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        Break
                    }

                    NUMP--
                }

                If ((NUMP == Zero))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x06
                    Return (Arg3)
                }

                If ((Arg1 != One))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x0A
                    Return (Arg3)
                }

                If ((Arg2 != 0x02))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x02
                    Return (Arg3)
                }

                If (((\DPPP == 0x02) && CondRefOf (\_SB.APSV)))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_SB.APSV /* External reference */
                    }

                    If (CondRefOf (DP2P))
                    {
                        UID2 = DerefOf (DP2P [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.APSV = 0x6E
                            }
                            Else
                            {
                                \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }

                            If (CondRefOf (\TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPPP == One) && CondRefOf (\_SB.APSV)))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_SB.APSV /* External reference */
                    }

                    If (CondRefOf (DPSP))
                    {
                        UID2 = DerefOf (DPSP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.APSV = 0x6E
                            }
                            Else
                            {
                                \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }

                            If (CondRefOf (\TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\PIDE == One) && CondRefOf (\_SB.APSV)))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \_SB.APSV /* External reference */
                    }

                    If (CondRefOf (DPID))
                    {
                        UID2 = DerefOf (DPID [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.APSV = 0x6E
                            }
                            Else
                            {
                                \_SB.APSV = PTRP /* \_SB_.IETM.PTRP */
                            }

                            If (CondRefOf (\TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPAP == One) && CondRefOf (\_SB.AAC0)))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \_SB.AAC0 /* External reference */
                    }

                    If (CondRefOf (DASP))
                    {
                        UID2 = DerefOf (DASP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.AAC0 = 0x6E
                                \_TZ.ETMD = Zero
                            }
                            Else
                            {
                                \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                                \_TZ.ETMD = One
                            }

                            If (CondRefOf (\TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPAP == 0x02) && CondRefOf (\_SB.AAC0)))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \_SB.AAC0 /* External reference */
                    }

                    If (CondRefOf (DA2P))
                    {
                        UID2 = DerefOf (DA2P [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.AAC0 = 0x6E
                                \_TZ.ETMD = Zero
                            }
                            Else
                            {
                                \_SB.AAC0 = ATRP /* \_SB_.IETM.ATRP */
                                \_TZ.ETMD = One
                            }

                            If (CondRefOf (\TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                If (((\DPCP == One) && CondRefOf (\_SB.ACRT)))
                {
                    If ((YSEM == Zero))
                    {
                        YSEM = One
                        YTRP = \_SB.ACRT /* External reference */
                    }

                    If (CondRefOf (DCSP))
                    {
                        UID2 = DerefOf (DCSP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \_SB.ACRT = 0xD2
                            }
                            Else
                            {
                                \_SB.ACRT = YTRP /* \_SB_.IETM.YTRP */
                            }

                            If (CondRefOf (\TZ.TZ00))
                            {
                                Notify (\_TZ.TZ00, 0x81) // Information Change
                            }

                            If (CondRefOf (\TZ.TZ01))
                            {
                                Notify (\_TZ.TZ01, 0x81) // Information Change
                            }
                        }

                        Return (Arg3)
                    }
                }

                Return (Arg3)
            }

            Method (DCFG, 0, NotSerialized)
            {
                Return (\DCFE) /* External reference */
            }

            Name (ODVX, Package (0x06)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (ODVP, 0, Serialized)
            {
                ODVX [Zero] = \ODV0 /* External reference */
                ODVX [One] = \ODV1 /* External reference */
                ODVX [0x02] = \ODV2 /* External reference */
                ODVX [0x03] = \ODV3 /* External reference */
                ODVX [0x04] = \ODV4 /* External reference */
                ODVX [0x05] = \ODV5 /* External reference */
                Return (ODVX) /* \_SB_.IETM.ODVX */
            }
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Mutex (PATM, 0x00)
        Method (_QF1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            P8XH (Zero, 0xF1)
            Local0 = \_SB.PCI0.LPCB.EC0.TSSR /* External reference */
            If (Local1 = (Local0 & 0x20))
            {
                Notify (\_SB.PCI0.LPCB.EC0.SEN5, 0x90) // Device-Specific
            }

            If (Local1 = (Local0 & 0x10))
            {
                Notify (\_SB.PCI0.LPCB.EC0.SEN4, 0x90) // Device-Specific
            }

            If (Local1 = (Local0 & 0x08))
            {
                Notify (\_SB.PCI0.LPCB.EC0.SEN3, 0x90) // Device-Specific
            }

            If (Local1 = (Local0 & 0x04))
            {
                Notify (\_SB.PCI0.LPCB.EC0.SEN2, 0x90) // Device-Specific
            }

            If (Local1 = (Local0 & One))
            {
                Notify (\_SB.PCI0.B0D4, 0x90) // Device-Specific
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Method (KTOC, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return (((Arg0 - 0x0AAC) / 0x0A))
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (CTOK, 1, Serialized)
        {
            Return (((Arg0 * 0x0A) + 0x0AAC))
        }

        Method (C10K, 1, Serialized)
        {
            Name (TMP1, Buffer (0x10)
            {
                 0x00                                             // .
            })
            CreateByteField (TMP1, Zero, TMPL)
            CreateByteField (TMP1, One, TMPH)
            Local0 = (Arg0 + 0x0AAC)
            TMPL = (Local0 & 0xFF)
            TMPH = ((Local0 & 0xFF00) >> 0x08)
            ToInteger (TMP1, Local1)
            Return (Local1)
        }

        Method (K10C, 1, Serialized)
        {
            If ((Arg0 > 0x0AAC))
            {
                Return ((Arg0 - 0x0AAC))
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB.PCI0.B0D4)
    {
        Name (PFLG, Zero)
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If ((\SADE == One))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }

        OperationRegion (MBAR, SystemMemory, ((MHBR << 0x0F) + 0x5000), 0x1000)
        Field (MBAR, ByteAcc, NoLock, Preserve)
        {
            Offset (0x930), 
            PTDP,   15, 
            Offset (0x932), 
            PMIN,   15, 
            Offset (0x934), 
            PMAX,   15, 
            Offset (0x936), 
            TMAX,   7, 
            Offset (0x938), 
            PWRU,   4, 
            Offset (0x939), 
            EGYU,   5, 
            Offset (0x93A), 
            TIMU,   4, 
            Offset (0x958), 
            Offset (0x95C), 
            LPMS,   1, 
            CTNL,   2, 
            Offset (0x978), 
            PCTP,   8, 
            Offset (0x998), 
            RP0C,   8, 
            RP1C,   8, 
            RPNC,   8, 
            Offset (0xF3C), 
            TRAT,   8, 
            Offset (0xF40), 
            PTD1,   15, 
            Offset (0xF42), 
            TRA1,   8, 
            Offset (0xF44), 
            PMX1,   15, 
            Offset (0xF46), 
            PMN1,   15, 
            Offset (0xF48), 
            PTD2,   15, 
            Offset (0xF4A), 
            TRA2,   8, 
            Offset (0xF4C), 
            PMX2,   15, 
            Offset (0xF4E), 
            PMN2,   15, 
            Offset (0xF50), 
            CTCL,   2, 
                ,   29, 
            CLCK,   1, 
            MNTR,   8
        }

        Name (XPCC, Zero)
        Method (PPCC, 0, Serialized)
        {
            If ((\THMP == 0x96))
            {
                DTM1 ()
            }
            ElseIf ((\THMP == 0x97))
            {
                DTM2 ()
            }
            ElseIf ((\THMP == 0x98))
            {
                DTM3 ()
            }
            ElseIf ((\THMP == 0x99))
            {
                DTM4 ()
            }

            Return (NPCC) /* \_SB_.PCI0.B0D4.NPCC */
        }

        Name (NPCC, Package (0x03)
        {
            0x02, 
            Package (0x06)
            {
                Zero, 
                0x3A98, 
                0xEA60, 
                0x6D60, 
                0x7D00, 
                0x03E8
            }, 

            Package (0x06)
            {
                One, 
                0xDBBA, 
                0x00015F90, 
                Zero, 
                Zero, 
                0x03E8
            }
        })
        Method (CPNU, 2, Serialized)
        {
            Name (CNVT, Zero)
            Name (PPUU, Zero)
            Name (RMDR, Zero)
            If ((PWRU == Zero))
            {
                PPUU = One
            }
            Else
            {
                PPUU = (PWRU-- << 0x02)
            }

            Divide (Arg0, PPUU, RMDR, CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
            If ((Arg1 == Zero))
            {
                Return (CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
            }
            Else
            {
                CNVT *= 0x03E8
                RMDR *= 0x03E8
                RMDR /= PPUU
                CNVT += RMDR /* \_SB_.PCI0.B0D4.CPNU.RMDR */
                Return (CNVT) /* \_SB_.PCI0.B0D4.CPNU.CNVT */
            }
        }

        Method (DTM1, 0, NotSerialized)
        {
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = 0xAFC8
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = 0xEA60
        }

        Method (DTM2, 0, NotSerialized)
        {
            If (((\OCSS == One) || (\OCBS == One)))
            {
                DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = 0x0001ADB0
                DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = 0x0001ADB0
            }
            Else
            {
                DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = 0xEA60
                DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = 0x00017700
            }
        }

        Method (DTM3, 0, NotSerialized)
        {
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = 0x0001ADB0
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = 0x0001ADB0
        }

        Method (DTM4, 0, NotSerialized)
        {
            If (((\OCSS == One) || (\OCBS == One)))
            {
                DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = 0x0001ADB0
                DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = 0x0001ADB0
            }
            Else
            {
                DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = 0xEA60
                DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = 0x00017700
            }
        }

        Method (CPL0, 0, NotSerialized)
        {
            \_SB.PCI0.B0D4.NPCC [Zero] = 0x02
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [One] = \MPL0 /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = CPNU (\_SB.PL10, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x03] = (\_SB.PLW0 * 0x03E8)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x04] = ((\_SB.PLW0 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [One] = CPNU (\_SB.PL20, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = CPNU (\_SB.PL20, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Method (CPL1, 0, NotSerialized)
        {
            \_SB.PCI0.B0D4.NPCC [Zero] = 0x02
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [One] = \MPL1 /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = CPNU (\_SB.PL11, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x03] = (\_SB.PLW1 * 0x03E8)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x04] = ((\_SB.PLW1 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [One] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = CPNU (\_SB.PL21, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Method (CPL2, 0, NotSerialized)
        {
            \_SB.PCI0.B0D4.NPCC [Zero] = 0x02
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [Zero] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [One] = \MPL2 /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x02] = CPNU (\_SB.PL12, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x03] = (\_SB.PLW2 * 0x03E8)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x04] = ((\_SB.PLW2 * 0x03E8
                ) + 0x0FA0)
            DerefOf (\_SB.PCI0.B0D4.NPCC [One]) [0x05] = PPSZ /* External reference */
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [Zero] = One
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [One] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x02] = CPNU (\_SB.PL22, One)
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x03] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x04] = Zero
            DerefOf (\_SB.PCI0.B0D4.NPCC [0x02]) [0x05] = PPSZ /* External reference */
        }

        Name (LSTM, Zero)
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (SPPC, 1, Serialized)
        {
            If (CondRefOf (\_SB.CPPC))
            {
                \_SB.CPPC = Arg0
            }

            Switch (ToInteger (\TCNT))
            {
                Case (0x10)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                    Notify (\_SB.PR12, 0x80) // Status Change
                    Notify (\_SB.PR13, 0x80) // Status Change
                    Notify (\_SB.PR14, 0x80) // Status Change
                    Notify (\_SB.PR15, 0x80) // Status Change
                }
                Case (0x0E)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                    Notify (\_SB.PR12, 0x80) // Status Change
                    Notify (\_SB.PR13, 0x80) // Status Change
                }
                Case (0x0C)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                    Notify (\_SB.PR10, 0x80) // Status Change
                    Notify (\_SB.PR11, 0x80) // Status Change
                }
                Case (0x0A)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                    Notify (\_SB.PR08, 0x80) // Status Change
                    Notify (\_SB.PR09, 0x80) // Status Change
                }
                Case (0x08)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                    Notify (\_SB.PR07, 0x80) // Status Change
                }
                Case (0x07)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                    Notify (\_SB.PR06, 0x80) // Status Change
                }
                Case (0x06)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                    Notify (\_SB.PR05, 0x80) // Status Change
                }
                Case (0x05)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                    Notify (\_SB.PR04, 0x80) // Status Change
                }
                Case (0x04)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                    Notify (\_SB.PR03, 0x80) // Status Change
                }
                Case (0x03)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                    Notify (\_SB.PR02, 0x80) // Status Change
                }
                Case (0x02)
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                    Notify (\_SB.PR01, 0x80) // Status Change
                }
                Default
                {
                    Notify (\_SB.PR00, 0x80) // Status Change
                }

            }
        }

        Name (TLPO, Package (0x06)
        {
            One, 
            One, 
            Zero, 
            One, 
            One, 
            0x02
        })
        Method (CLPO, 0, NotSerialized)
        {
            TLPO [One] = LPOE /* External reference */
            If (CondRefOf (\_SB.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    Local1 = SizeOf (\_SB.PR00.TPSS)
                }
                Else
                {
                    Local1 = SizeOf (\_SB.PR00.LPSS)
                }
            }
            Else
            {
                Local1 = Zero
            }

            If ((LPOP < Local1))
            {
                TLPO [0x02] = LPOP /* External reference */
            }
            Else
            {
                Local1--
                TLPO [0x02] = Local1
            }

            TLPO [0x03] = LPOS /* External reference */
            TLPO [0x04] = LPOW /* External reference */
            TLPO [0x05] = LPER /* External reference */
            Return (TLPO) /* \_SB_.PCI0.B0D4.TLPO */
        }

        Method (SPUR, 1, NotSerialized)
        {
            If ((Arg0 <= \TCNT))
            {
                If ((\_SB.PAGD._STA () == 0x0F))
                {
                    \_SB.PAGD._PUR [One] = Arg0
                    Notify (\_SB.PAGD, 0x80) // Status Change
                }
            }
        }

        Name (AEXL, Package (0x04)
        {
            "svchost.exe", 
            "dllhost.exe", 
            "smss.exe", 
            "WinSAT.exe"
        })
        Method (PCCC, 0, Serialized)
        {
            PCCX [Zero] = One
            Switch (ToInteger (CPNU (PTDP, Zero)))
            {
                Case (0x39)
                {
                    DerefOf (PCCX [One]) [Zero] = 0xA7F8
                    DerefOf (PCCX [One]) [One] = 0x00017318
                }
                Case (0x2F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x9858
                    DerefOf (PCCX [One]) [One] = 0x00014C08
                }
                Case (0x25)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x7148
                    DerefOf (PCCX [One]) [One] = 0xD6D8
                }
                Case (0x19)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x3E80
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0F)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x7D00
                }
                Case (0x0B)
                {
                    DerefOf (PCCX [One]) [Zero] = 0x36B0
                    DerefOf (PCCX [One]) [One] = 0x61A8
                }
                Default
                {
                    DerefOf (PCCX [One]) [Zero] = 0xFF
                    DerefOf (PCCX [One]) [One] = 0xFF
                }

            }

            Return (PCCX) /* \_SB_.PCI0.B0D4.PCCX */
        }

        Name (PCCX, Package (0x02)
        {
            0x80000000, 
            Package (0x02)
            {
                0x80000000, 
                0x80000000
            }
        })
        Name (KEFF, Package (0x1E)
        {
            Package (0x02)
            {
                0x01BC, 
                Zero
            }, 

            Package (0x02)
            {
                0x01CF, 
                0x27
            }, 

            Package (0x02)
            {
                0x01E1, 
                0x4B
            }, 

            Package (0x02)
            {
                0x01F3, 
                0x6C
            }, 

            Package (0x02)
            {
                0x0206, 
                0x8B
            }, 

            Package (0x02)
            {
                0x0218, 
                0xA8
            }, 

            Package (0x02)
            {
                0x022A, 
                0xC3
            }, 

            Package (0x02)
            {
                0x023D, 
                0xDD
            }, 

            Package (0x02)
            {
                0x024F, 
                0xF4
            }, 

            Package (0x02)
            {
                0x0261, 
                0x010B
            }, 

            Package (0x02)
            {
                0x0274, 
                0x011F
            }, 

            Package (0x02)
            {
                0x032C, 
                0x01BD
            }, 

            Package (0x02)
            {
                0x03D7, 
                0x0227
            }, 

            Package (0x02)
            {
                0x048B, 
                0x026D
            }, 

            Package (0x02)
            {
                0x053E, 
                0x02A1
            }, 

            Package (0x02)
            {
                0x05F7, 
                0x02C6
            }, 

            Package (0x02)
            {
                0x06A8, 
                0x02E6
            }, 

            Package (0x02)
            {
                0x075D, 
                0x02FF
            }, 

            Package (0x02)
            {
                0x0818, 
                0x0311
            }, 

            Package (0x02)
            {
                0x08CF, 
                0x0322
            }, 

            Package (0x02)
            {
                0x179C, 
                0x0381
            }, 

            Package (0x02)
            {
                0x2DDC, 
                0x039C
            }, 

            Package (0x02)
            {
                0x44A8, 
                0x039E
            }, 

            Package (0x02)
            {
                0x5C35, 
                0x0397
            }, 

            Package (0x02)
            {
                0x747D, 
                0x038D
            }, 

            Package (0x02)
            {
                0x8D7F, 
                0x0382
            }, 

            Package (0x02)
            {
                0xA768, 
                0x0376
            }, 

            Package (0x02)
            {
                0xC23B, 
                0x0369
            }, 

            Package (0x02)
            {
                0xDE26, 
                0x035A
            }, 

            Package (0x02)
            {
                0xFB7C, 
                0x034A
            }
        })
        Name (CEUP, Package (0x06)
        {
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000, 
            0x80000000
        })
        Method (TMPX, 0, Serialized)
        {
            If (\_SB.PCI0.LPCB.ECOK ())
            {
                Return (\_SB.IETM.CTOK (\_SB.PCI0.LPCB.EC0.CTMP))
            }
            Else
            {
                Return (0x0BB8)
            }
        }

        Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
        {
            LSTM = Arg0
            Notify (\_SB.PCI0.B0D4, 0x91) // Device-Specific
        }

        Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
        {
            Return (0x0ADE)
        }

        Name (PTYP, Zero)
        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                Return (\_SB.PR00._PSS ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x06)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            If (CondRefOf (\_SB.PR00._TSS))
            {
                Return (\_SB.PR00._TSS ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x05)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x05)
                    {
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            If (CondRefOf (\_SB.PR00._TPC))
            {
                Return (\_SB.PR00._TPC) /* External reference */
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((CondRefOf (\PC00) && (\PC00 != 0x80000000)))
            {
                If ((\PC00 & 0x04))
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }
                    })
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x05,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000001810, // Address
                                ,)
                        }
                    })
                }
            }
            Else
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (CondRefOf (\_SB.PR00._TSD))
            {
                Return (\_SB.PR00._TSD ())
            }
            Else
            {
                Return (Package (0x02)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }, 

                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        Zero, 
                        Zero
                    }
                })
            }
        }

        Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
        {
            If ((CondRefOf (\_SB.PR00._TSS) && CondRefOf (\_SB.CFGD)))
            {
                If ((\_SB.CFGD & 0x2000))
                {
                    Return ((SizeOf (\_SB.PR00.TSMF) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.TSMC) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
        {
            If (CondRefOf (\_SB.PR00._PSS))
            {
                If ((\_SB.OSCP & 0x0400))
                {
                    Return ((SizeOf (\_SB.PR00.TPSS) - One))
                }
                Else
                {
                    Return ((SizeOf (\_SB.PR00.LPSS) - One))
                }
            }
            Else
            {
                Return (Zero)
            }
        }

        Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
        {
            Return (\CPUS) /* External reference */
        }

        Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If ((\ATMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Local1 = \_SB.IETM.CTOK (\ATMC)
            If ((LSTM >= Local1))
            {
                Return ((Local1 - 0x14))
            }
            Else
            {
                Return (Local1)
            }
        }

        Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If ((\ATMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Local0 = \_SB.IETM.CTOK (\ATMC)
            Local0 -= 0x32
            If ((LSTM >= Local0))
            {
                Return ((Local0 - 0x14))
            }
            Else
            {
                Return (Local0)
            }
        }

        Method (_AC2, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If ((\ATMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Local0 = \_SB.IETM.CTOK (\ATMC)
            Local0 -= 0x64
            If ((LSTM >= Local0))
            {
                Return ((Local0 - 0x14))
            }
            Else
            {
                Return (Local0)
            }
        }

        Method (_AC3, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If ((\ATMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Local0 = \_SB.IETM.CTOK (\ATMC)
            Local0 -= 0x96
            If ((LSTM >= Local0))
            {
                Return ((Local0 - 0x14))
            }
            Else
            {
                Return (Local0)
            }
        }

        Method (_AC4, 0, Serialized)  // _ACx: Active Cooling, x=0-9
        {
            If ((\ATMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Local0 = \_SB.IETM.CTOK (\ATMC)
            Local0 -= 0xC8
            If ((LSTM >= Local0))
            {
                Return ((Local0 - 0x14))
            }
            Else
            {
                Return (Local0)
            }
        }

        Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
        {
            If ((\PTMC == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Return (\_SB.IETM.CTOK (\PTMC))
        }

        Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
        {
            If ((\SACT == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Return (\_SB.IETM.CTOK (\SACT))
        }

        Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
        {
            If ((\SAC3 == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Return (\_SB.IETM.CTOK (\SAC3))
        }

        Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
        {
            If ((\SAHT == Zero))
            {
                Return (0xFFFFFFFF)
            }

            Return (\_SB.IETM.CTOK (\SAHT))
        }
    }

    Scope (\_SB.IETM)
    {
        Name (CTSP, Package (0x01)
        {
            ToUUID ("e145970a-e4c1-4d73-900e-c9c5a69dd067")
        })
    }

    Scope (\_SB.PCI0.B0D4)
    {
        Method (TDPL, 0, Serialized)
        {
            Name (AAAA, Zero)
            Name (BBBB, Zero)
            Name (CCCC, Zero)
            Local0 = CTNL /* \_SB_.PCI0.B0D4.CTNL */
            If (((Local0 == One) || (Local0 == 0x02)))
            {
                Local0 = \_SB.CLVL /* External reference */
            }
            Else
            {
                Return (Package (0x01)
                {
                    Zero
                })
            }

            If ((CLCK == One))
            {
                Local0 = One
            }

            AAAA = CPNU (\_SB.PL10, One)
            BBBB = CPNU (\_SB.PL11, One)
            CCCC = CPNU (\_SB.PL12, One)
            Name (TMP1, Package (0x01)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Name (TMP2, Package (0x02)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            Name (TMP3, Package (0x03)
            {
                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }, 

                Package (0x05)
                {
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000, 
                    0x80000000
                }
            })
            If ((Local0 == 0x03))
            {
                If ((AAAA > BBBB))
                {
                    If ((AAAA > CCCC))
                    {
                        If ((BBBB > CCCC))
                        {
                            Local3 = Zero
                            LEV0 = Zero
                            Local4 = One
                            LEV1 = One
                            Local5 = 0x02
                            LEV2 = 0x02
                        }
                        Else
                        {
                            Local3 = Zero
                            LEV0 = Zero
                            Local5 = One
                            LEV1 = 0x02
                            Local4 = 0x02
                            LEV2 = One
                        }
                    }
                    Else
                    {
                        Local5 = Zero
                        LEV0 = 0x02
                        Local3 = One
                        LEV1 = Zero
                        Local4 = 0x02
                        LEV2 = One
                    }
                }
                ElseIf ((BBBB > CCCC))
                {
                    If ((AAAA > CCCC))
                    {
                        Local4 = Zero
                        LEV0 = One
                        Local3 = One
                        LEV1 = Zero
                        Local5 = 0x02
                        LEV2 = 0x02
                    }
                    Else
                    {
                        Local4 = Zero
                        LEV0 = One
                        Local5 = One
                        LEV1 = 0x02
                        Local3 = 0x02
                        LEV2 = Zero
                    }
                }
                Else
                {
                    Local5 = Zero
                    LEV0 = 0x02
                    Local4 = One
                    LEV1 = One
                    Local3 = 0x02
                    LEV2 = Zero
                }

                Local1 = (\_SB.TAR0 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local3]) [Zero] = AAAA /* \_SB_.PCI0.B0D4.TDPL.AAAA */
                DerefOf (TMP3 [Local3]) [One] = Local2
                DerefOf (TMP3 [Local3]) [0x02] = \_SB.CTC0 /* External reference */
                DerefOf (TMP3 [Local3]) [0x03] = Local1
                DerefOf (TMP3 [Local3]) [0x04] = Zero
                Local1 = (\_SB.TAR1 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local4]) [Zero] = BBBB /* \_SB_.PCI0.B0D4.TDPL.BBBB */
                DerefOf (TMP3 [Local4]) [One] = Local2
                DerefOf (TMP3 [Local4]) [0x02] = \_SB.CTC1 /* External reference */
                DerefOf (TMP3 [Local4]) [0x03] = Local1
                DerefOf (TMP3 [Local4]) [0x04] = Zero
                Local1 = (\_SB.TAR2 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP3 [Local5]) [Zero] = CCCC /* \_SB_.PCI0.B0D4.TDPL.CCCC */
                DerefOf (TMP3 [Local5]) [One] = Local2
                DerefOf (TMP3 [Local5]) [0x02] = \_SB.CTC2 /* External reference */
                DerefOf (TMP3 [Local5]) [0x03] = Local1
                DerefOf (TMP3 [Local5]) [0x04] = Zero
                Return (TMP3) /* \_SB_.PCI0.B0D4.TDPL.TMP3 */
            }

            If ((Local0 == 0x02))
            {
                If ((AAAA > BBBB))
                {
                    Local3 = Zero
                    Local4 = One
                    LEV0 = Zero
                    LEV1 = One
                    LEV2 = Zero
                }
                Else
                {
                    Local4 = Zero
                    Local3 = One
                    LEV0 = One
                    LEV1 = Zero
                    LEV2 = Zero
                }

                Local1 = (\_SB.TAR0 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP2 [Local3]) [Zero] = AAAA /* \_SB_.PCI0.B0D4.TDPL.AAAA */
                DerefOf (TMP2 [Local3]) [One] = Local2
                DerefOf (TMP2 [Local3]) [0x02] = \_SB.CTC0 /* External reference */
                DerefOf (TMP2 [Local3]) [0x03] = Local1
                DerefOf (TMP2 [Local3]) [0x04] = Zero
                Local1 = (\_SB.TAR1 + One)
                Local2 = (Local1 * 0x64)
                DerefOf (TMP2 [Local4]) [Zero] = BBBB /* \_SB_.PCI0.B0D4.TDPL.BBBB */
                DerefOf (TMP2 [Local4]) [One] = Local2
                DerefOf (TMP2 [Local4]) [0x02] = \_SB.CTC1 /* External reference */
                DerefOf (TMP2 [Local4]) [0x03] = Local1
                DerefOf (TMP2 [Local4]) [0x04] = Zero
                Return (TMP2) /* \_SB_.PCI0.B0D4.TDPL.TMP2 */
            }

            If ((Local0 == One))
            {
                Switch (ToInteger (\_SB.CBMI))
                {
                    Case (Zero)
                    {
                        Local1 = (\_SB.TAR0 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = AAAA /* \_SB_.PCI0.B0D4.TDPL.AAAA */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC0 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = Zero
                        LEV1 = Zero
                        LEV2 = Zero
                    }
                    Case (One)
                    {
                        Local1 = (\_SB.TAR1 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = BBBB /* \_SB_.PCI0.B0D4.TDPL.BBBB */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC1 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = One
                        LEV1 = One
                        LEV2 = One
                    }
                    Case (0x02)
                    {
                        Local1 = (\_SB.TAR2 + One)
                        Local2 = (Local1 * 0x64)
                        DerefOf (TMP1 [Zero]) [Zero] = CCCC /* \_SB_.PCI0.B0D4.TDPL.CCCC */
                        DerefOf (TMP1 [Zero]) [One] = Local2
                        DerefOf (TMP1 [Zero]) [0x02] = \_SB.CTC2 /* External reference */
                        DerefOf (TMP1 [Zero]) [0x03] = Local1
                        DerefOf (TMP1 [Zero]) [0x04] = Zero
                        LEV0 = 0x02
                        LEV1 = 0x02
                        LEV2 = 0x02
                    }

                }

                Return (TMP1) /* \_SB_.PCI0.B0D4.TDPL.TMP1 */
            }

            Return (Zero)
        }

        Name (MAXT, Zero)
        Method (TDPC, 0, NotSerialized)
        {
            Return (MAXT) /* \_SB_.PCI0.B0D4.MAXT */
        }

        Name (LEV0, Zero)
        Name (LEV1, Zero)
        Name (LEV2, Zero)
        Method (STDP, 1, Serialized)
        {
            If ((Arg0 >= \_SB.CLVL))
            {
                Return (Zero)
            }

            Switch (ToInteger (Arg0))
            {
                Case (Zero)
                {
                    Local0 = LEV0 /* \_SB_.PCI0.B0D4.LEV0 */
                }
                Case (One)
                {
                    Local0 = LEV1 /* \_SB_.PCI0.B0D4.LEV1 */
                }
                Case (0x02)
                {
                    Local0 = LEV2 /* \_SB_.PCI0.B0D4.LEV2 */
                }

            }

            Switch (ToInteger (Local0))
            {
                Case (Zero)
                {
                    CPL0 ()
                }
                Case (One)
                {
                    CPL1 ()
                }
                Case (0x02)
                {
                    CPL2 ()
                }

            }

            Notify (\_SB.PCI0.B0D4, 0x83) // Device-Specific Change
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Device (SEN2)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "SEN2")  // _UID: Unique ID
            Name (_STR, Unicode ("GPU"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S2DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPCB.ECOK ())
                {
                    Return (\_SB.IETM.CTOK (\_SB.PCI0.LPCB.EC0.SKTC))
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, Zero)
            Name (GTSH, 0x14)
            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (\_SB.PCI0.LPCB.EC0.SEN2, 0x91) // Device-Specific
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\SSP2) /* External reference */
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S2PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (\S2PT)
                }
                Else
                {
                    If ((\S2AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (\S2AT)
                }

                If ((LSTM >= Local1))
                {
                    Return ((Local1 - 0x14))
                }
                Else
                {
                    Return (Local1)
                }
            }

            Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S2PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }
                }
                ElseIf ((\S2AT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return ((_AC0 () - 0x64))
            }

            Method (_AC2, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S2PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }
                }
                ElseIf ((\S2AT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return ((_AC1 () - 0x64))
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((\S2AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (\S2AT))
                }
                Else
                {
                    If ((\S2PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (\S2PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((\S2CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S2CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((\S2S3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S2S3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((\S2HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S2HT))
            }
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Device (SEN3)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "SEN3")  // _UID: Unique ID
            Name (_STR, Unicode ("CPU_VR"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S3DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPCB.ECOK ())
                {
                    Return (\_SB.IETM.CTOK (\_SB.PCI0.LPCB.EC0.CVRT))
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, Zero)
            Name (GTSH, 0x14)
            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (\_SB.PCI0.LPCB.EC0.SEN3, 0x91) // Device-Specific
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\SSP3) /* External reference */
            }

            Method (_AC3, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S3PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (\S3PT)
                }
                Else
                {
                    If ((\S3AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (\S3AT)
                }

                If ((LSTM >= Local1))
                {
                    Return ((Local1 - 0x14))
                }
                Else
                {
                    Return (Local1)
                }
            }

            Method (_AC4, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S3PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }
                }
                ElseIf ((\S3AT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return ((_AC3 () - 0x64))
            }

            Method (_AC5, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S3PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }
                }
                ElseIf ((\S3AT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return ((_AC4 () - 0x64))
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((\S3AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (\S3AT))
                }
                Else
                {
                    If ((\S3PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (\S3PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((\S3CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S3CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((\S3S3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S3S3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((\S3HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S3HT))
            }
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Device (SEN4)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "SEN4")  // _UID: Unique ID
            Name (_STR, Unicode ("GPU_VR"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S4DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPCB.ECOK ())
                {
                    Return (\_SB.IETM.CTOK (\_SB.PCI0.LPCB.EC0.GVRT))
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, Zero)
            Name (GTSH, 0x14)
            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (\_SB.PCI0.LPCB.EC0.SEN4, 0x91) // Device-Specific
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\SSP4) /* External reference */
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S4PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (\S4PT)
                }
                Else
                {
                    If ((\S4AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (\S4AT)
                }

                If ((LSTM >= Local1))
                {
                    Return ((Local1 - 0x14))
                }
                Else
                {
                    Return (Local1)
                }
            }

            Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S2PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }
                }
                ElseIf ((\S2AT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return ((_AC0 () - 0x64))
            }

            Method (_AC2, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S2PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }
                }
                ElseIf ((\S2AT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return ((_AC1 () - 0x64))
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((\S4AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (\S4AT))
                }
                Else
                {
                    If ((\S4PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (\S4PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((\S4CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S4CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((\S4S3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S4S3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((\S4HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S4HT))
            }
        }
    }

    Scope (\_SB.PCI0.LPCB.EC0)
    {
        Device (SEN5)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "SEN5")  // _UID: Unique ID
            Name (_STR, Unicode ("Thermistor Memory"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (CTYP, Zero)
            Name (PFLG, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S5DE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.PCI0.LPCB.ECOK ())
                {
                    Return (\_SB.IETM.CTOK (\_SB.PCI0.LPCB.EC0.MEMT))
                }
                Else
                {
                    Return (0x0BB8)
                }
            }

            Name (PATC, Zero)
            Name (GTSH, 0x14)
            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (\_SB.PCI0.LPCB.EC0.SEN5, 0x91) // Device-Specific
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\SSP5) /* External reference */
            }

            Method (_AC0, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S5PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (\S5PT)
                }
                Else
                {
                    If ((\S5AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Local1 = \_SB.IETM.CTOK (\S5AT)
                }

                If ((LSTM >= Local1))
                {
                    Return ((Local1 - 0x14))
                }
                Else
                {
                    Return (Local1)
                }
            }

            Method (_AC1, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S2PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }
                }
                ElseIf ((\S2AT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return ((_AC0 () - 0x64))
            }

            Method (_AC2, 0, Serialized)  // _ACx: Active Cooling, x=0-9
            {
                If (CTYP)
                {
                    If ((\S2PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }
                }
                ElseIf ((\S2AT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return ((_AC1 () - 0x64))
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If (CTYP)
                {
                    If ((\S5AT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (\S5AT))
                }
                Else
                {
                    If ((\S5PT == Zero))
                    {
                        Return (0xFFFFFFFF)
                    }

                    Return (\_SB.IETM.CTOK (\S5PT))
                }
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((\S5CT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S5CT))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                If ((\S5S3 == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S5S3))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                If ((\S5HT == Zero))
                {
                    Return (0xFFFFFFFF)
                }

                Return (\_SB.IETM.CTOK (\S5HT))
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Name (TRT0, Package (0x05)
        {
            Package (0x08)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.B0D4, 
                0xC8, 
                0x02, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN2, 
                0xC8, 
                0x02, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN3, 
                0xC8, 
                0x02, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN4, 
                0xC8, 
                0x02, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN5, 
                0xC8, 
                0x02, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }
        })
        Method (USP1, 0, NotSerialized)
        {
            DerefOf (\_SB.IETM.TRT0 [Zero]) [0x03] = \CPUS /* External reference */
            DerefOf (\_SB.IETM.TRT0 [One]) [0x03] = \SSP2 /* External reference */
            DerefOf (\_SB.IETM.TRT0 [0x02]) [0x03] = \SSP3 /* External reference */
            DerefOf (\_SB.IETM.TRT0 [0x03]) [0x03] = \SSP4 /* External reference */
            DerefOf (\_SB.IETM.TRT0 [0x04]) [0x03] = \SSP5 /* External reference */
        }

        Method (TRTR, 0, NotSerialized)
        {
            Return (\TRTV) /* External reference */
        }

        Method (_TRT, 0, NotSerialized)  // _TRT: Thermal Relationship Table
        {
            USP1 ()
            Return (TRT0) /* \_SB_.IETM.TRT0 */
        }
    }

    Scope (\_SB.IETM)
    {
        Name (PTTL, 0x14)
        Name (PSVP, Package (0x06)
        {
            0x02, 
            Package (0x0C)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.B0D4, 
                0x02, 
                0x02, 
                0x0E80, 
                0x09, 
                0x00010000, 
                "MAX", 
                0x01F4, 
                0x0A, 
                0x0A, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN2, 
                0x02, 
                0x02, 
                0x0E58, 
                0x09, 
                0x00010000, 
                "MAX", 
                0x01F4, 
                0x0A, 
                0x0A, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN3, 
                One, 
                0x02, 
                0x0E30, 
                0x09, 
                0x00010000, 
                "MAX", 
                0x01F4, 
                0x0A, 
                0x0A, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN4, 
                One, 
                0x02, 
                0x0DFE, 
                0x09, 
                0x00010000, 
                "MAX", 
                0x01F4, 
                0x0A, 
                0x0A, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PCI0.B0D4, 
                \_SB.PCI0.LPCB.EC0.SEN5, 
                One, 
                0x02, 
                0x0E30, 
                0x09, 
                0x00010000, 
                "MAX", 
                0x01F4, 
                0x0A, 
                0x0A, 
                Zero
            }
        })
        Method (USP2, 0, NotSerialized)
        {
            DerefOf (\_SB.IETM.PSVP [One]) [0x03] = \CPUS /* External reference */
            DerefOf (\_SB.IETM.PSVP [0x02]) [0x03] = \SSP2 /* External reference */
            DerefOf (\_SB.IETM.PSVP [0x03]) [0x03] = \SSP3 /* External reference */
            DerefOf (\_SB.IETM.PSVP [0x04]) [0x03] = \SSP4 /* External reference */
            DerefOf (\_SB.IETM.PSVP [0x05]) [0x03] = \SSP5 /* External reference */
        }

        Method (UPT2, 0, NotSerialized)
        {
            DerefOf (\_SB.IETM.PSVP [One]) [0x04] = \_SB.IETM.CTOK (\PTMC)
            DerefOf (\_SB.IETM.PSVP [0x02]) [0x04] = \_SB.IETM.CTOK (\S2PT)
            DerefOf (\_SB.IETM.PSVP [0x03]) [0x04] = \_SB.IETM.CTOK (\S3PT)
            DerefOf (\_SB.IETM.PSVP [0x04]) [0x04] = \_SB.IETM.CTOK (\S4PT)
            DerefOf (\_SB.IETM.PSVP [0x05]) [0x04] = \_SB.IETM.CTOK (\S5PT)
        }

        Method (USS2, 0, NotSerialized)
        {
            DerefOf (\_SB.IETM.PSVP [One]) [0x08] = \PPSZ /* External reference */
            DerefOf (\_SB.IETM.PSVP [0x02]) [0x08] = \PPSZ /* External reference */
            DerefOf (\_SB.IETM.PSVP [0x03]) [0x08] = \PPSZ /* External reference */
            DerefOf (\_SB.IETM.PSVP [0x04]) [0x08] = \PPSZ /* External reference */
            DerefOf (\_SB.IETM.PSVP [0x05]) [0x08] = \PPSZ /* External reference */
        }

        Method (PSVT, 0, NotSerialized)
        {
            USP2 ()
            UPT2 ()
            USS2 ()
            Return (PSVP) /* \_SB_.IETM.PSVP */
        }
    }

    Scope (\_SB.IETM)
    {
        Name (DP2P, Package (0x01)
        {
            ToUUID ("9e04115a-ae87-4d1c-9500-0f3e340bfe75")
        })
        Name (DPSP, Package (0x01)
        {
            ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3")
        })
        Name (DASP, Package (0x01)
        {
            ToUUID ("3a95c389-e4b8-4629-a526-c52c88626bae")
        })
        Name (DA2P, Package (0x01)
        {
            ToUUID ("0e56fab6-bdfc-4e8c-8246-40ecfd4d74ea")
        })
        Name (DCSP, Package (0x01)
        {
            ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a")
        })
        Name (RFIP, Package (0x01)
        {
            ToUUID ("c4ce1849-243a-49f3-b8d5-f97002f38e6a")
        })
        Name (POBP, Package (0x01)
        {
            ToUUID ("f5a35014-c209-46a4-993a-eb56de7530a1")
        })
        Name (DAPP, Package (0x01)
        {
            ToUUID ("63be270f-1c11-48fd-a6f7-3af253ff3e2d")
        })
        Name (DVSP, Package (0x01)
        {
            ToUUID ("6ed722a7-9240-48a5-b479-31eef723d7cf")
        })
        Name (DPID, Package (0x01)
        {
            ToUUID ("42496e14-bc1b-46e8-a798-ca915464426f")
        })
    }

    Scope (\_SB.IETM)
    {
        Method (GDDV, 0, Serialized)
        {
            Return (Package (0x01)
            {
                Buffer (0x017F)
                {
                    /* 0000 */  0xE5, 0x1F, 0x94, 0x00, 0x00, 0x00, 0x00, 0x02,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x40, 0x67, 0x64, 0x64, 0x76,  // ...@gddv
                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x4F, 0x45, 0x4D, 0x20,  // ....OEM 
                    /* 0030 */  0x45, 0x6D, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64,  // Embedded
                    /* 0038 */  0x20, 0x44, 0x61, 0x74, 0x61, 0x56, 0x61, 0x75,  //  DataVau
                    /* 0040 */  0x6C, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // lt......
                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x21, 0x27, 0x73, 0xE6,  // ....!'s.
                    /* 0070 */  0x10, 0x52, 0x5C, 0xAC, 0x87, 0xA8, 0x4E, 0xC2,  // .R\...N.
                    /* 0078 */  0x61, 0x22, 0xB7, 0x21, 0xF4, 0xEA, 0x60, 0xC1,  // a".!..`.
                    /* 0080 */  0x99, 0xBB, 0xA8, 0x9F, 0xA6, 0x6B, 0x0B, 0x73,  // .....k.s
                    /* 0088 */  0xE1, 0x42, 0xC0, 0x4F, 0xEB, 0x00, 0x00, 0x00,  // .B.O....
                    /* 0090 */  0x52, 0x45, 0x50, 0x4F, 0x5D, 0x00, 0x00, 0x00,  // REPO]...
                    /* 0098 */  0x01, 0x94, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 00A0 */  0x00, 0x00, 0x72, 0x87, 0xCD, 0xFF, 0x6D, 0x24,  // ..r...m$
                    /* 00A8 */  0x47, 0xDB, 0x3D, 0x24, 0x92, 0xB4, 0x16, 0x6F,  // G.=$...o
                    /* 00B0 */  0x45, 0xD8, 0xC3, 0xF5, 0x66, 0x14, 0x9F, 0x22,  // E...f.."
                    /* 00B8 */  0xD7, 0xF7, 0xDE, 0x67, 0x90, 0x9A, 0xA2, 0x0D,  // ...g....
                    /* 00C0 */  0x39, 0x25, 0xAD, 0xC3, 0x1A, 0xAD, 0x52, 0x0B,  // 9%....R.
                    /* 00C8 */  0x75, 0x38, 0xE1, 0xA4, 0x14, 0x43, 0x9C, 0xF1,  // u8...C..
                    /* 00D0 */  0x7A, 0xD3, 0x23, 0x3E, 0x0C, 0xFD, 0x9C, 0xBB,  // z.#>....
                    /* 00D8 */  0x48, 0x8A, 0x0C, 0x3A, 0x02, 0xFF, 0x4B, 0x8D,  // H..:..K.
                    /* 00E0 */  0xC0, 0x54, 0x72, 0x0C, 0x61, 0xE9, 0x8A, 0x92,  // .Tr.a...
                    /* 00E8 */  0x65, 0x6D, 0xFB, 0x84, 0x3B, 0x27, 0xE6, 0x18,  // em..;'..
                    /* 00F0 */  0xDA, 0x84, 0x22, 0xC5, 0x23, 0xE7, 0x49, 0x75,  // ..".#.Iu
                    /* 00F8 */  0xA1, 0x99, 0xC3, 0x7E, 0x71, 0x2C, 0x02, 0xCC,  // ...~q,..
                    /* 0100 */  0x76, 0x57, 0x44, 0xC6, 0x05, 0xB7, 0xEF, 0x65,  // vWD....e
                    /* 0108 */  0xDA, 0x69, 0x05, 0x5B, 0x43, 0x1F, 0x9E, 0x9B,  // .i.[C...
                    /* 0110 */  0x04, 0xF8, 0x02, 0xB5, 0x37, 0x7F, 0x63, 0xDC,  // ....7.c.
                    /* 0118 */  0xD9, 0x38, 0xA6, 0xB6, 0x43, 0x1F, 0x4D, 0x94,  // .8..C.M.
                    /* 0120 */  0x8C, 0xF3, 0xDE, 0x9E, 0x39, 0x6D, 0xF0, 0x25,  // ....9m.%
                    /* 0128 */  0x53, 0xE9, 0x37, 0x09, 0x7D, 0x18, 0x8A, 0x76,  // S.7.}..v
                    /* 0130 */  0x00, 0x78, 0x70, 0x41, 0x58, 0xF7, 0x5C, 0x92,  // .xpAX.\.
                    /* 0138 */  0xD1, 0xD4, 0xAD, 0xF7, 0xE4, 0xDC, 0xB0, 0x80,  // ........
                    /* 0140 */  0x97, 0x51, 0xE8, 0x2F, 0x99, 0x0F, 0x54, 0xB6,  // .Q./..T.
                    /* 0148 */  0xB7, 0x9C, 0x8E, 0x3F, 0xE5, 0xE5, 0x71, 0xF5,  // ...?..q.
                    /* 0150 */  0x08, 0xB0, 0xED, 0x11, 0x3A, 0xBD, 0xB2, 0x52,  // ....:..R
                    /* 0158 */  0x2A, 0x0B, 0x55, 0x39, 0xE1, 0x26, 0x70, 0x46,  // *.U9.&pF
                    /* 0160 */  0xF8, 0x75, 0x3E, 0x4B, 0x5A, 0x87, 0x7B, 0x63,  // .u>KZ.{c
                    /* 0168 */  0x03, 0x3A, 0xEB, 0xB6, 0x70, 0xEC, 0xCC, 0x83,  // .:..p...
                    /* 0170 */  0x34, 0xD4, 0xF9, 0xD6, 0x81, 0x60, 0xAB, 0xC9,  // 4....`..
                    /* 0178 */  0x29, 0x0C, 0xEB, 0xC6, 0x62, 0x83, 0x00         // )...b..
                }
            })
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "INTEL ", "TbtTypeC", 0x00000000)
{
    External (_SB_.PCI0.RP01.PXSX, DeviceObj)
    External (_SB_.PCI0.RP05.PXSX, DeviceObj)
    External (_SB_.PCI0.RP09.PXSX, DeviceObj)
    External (_SB_.UBTC.RUCC, MethodObj)    // 2 Arguments
    External (DPM1, IntObj)
    External (DPM2, IntObj)
    External (DPM3, IntObj)
    External (NDUS, IntObj)
    External (NTUS, IntObj)
    External (RPS0, IntObj)
    External (RPS1, IntObj)
    External (TBTS, IntObj)
    External (TP1D, IntObj)
    External (TP1P, IntObj)
    External (TP1T, IntObj)
    External (TP2D, IntObj)
    External (TP2P, IntObj)
    External (TP2T, IntObj)
    External (TP3D, IntObj)
    External (TP3P, IntObj)
    External (TP3T, IntObj)
    External (TP4D, IntObj)
    External (TP4P, IntObj)
    External (TP4T, IntObj)
    External (TP5D, IntObj)
    External (TP5P, IntObj)
    External (TP5T, IntObj)
    External (TP6D, IntObj)
    External (TP6P, IntObj)
    External (TP6T, IntObj)

    If (((TBTS == One) && ((RPS0 == One) || (RPS1 == One))))
    {
        If (CondRefOf (\_SB.PCI0.RP01.PXSX))
        {
            Scope (\_SB.PCI0.RP01.PXSX)
            {
                Name (TURP, One)
                Device (TBDU)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Device (XHC)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (RHUB)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (SLMS, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return ((TP1D & One))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return ((TP2D & One))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return ((TP3D & One))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return ((TP4D & One))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return ((TP5D & One))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return ((TP6D & One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (FPCP, 2, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (\_SB.UBTC.RUCC (One, Arg1))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                }
                                ElseIf ((Arg1 == One))
                                {
                                    Return (TUPC (Zero, Zero))
                                }
                                Else
                                {
                                    Return (TPLD (Zero, Zero))
                                }
                            }

                            Method (FPSP, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (TPLD, 2, Serialized)
                            {
                                Name (PCKG, Package (0x01)
                                {
                                    Buffer (0x10){}
                                })
                                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                REV = One
                                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                VISI = Arg0
                                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                GPOS = Arg1
                                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                SHAP = One
                                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                WID = 0x08
                                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                HGT = 0x03
                                Return (PCKG) /* \_SB_.PCI0.RP01.PXSX.TBDU.XHC_.RHUB.TPLD.PCKG */
                            }

                            Method (TUPC, 2, Serialized)
                            {
                                Name (PCKG, Package (0x04)
                                {
                                    One, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                PCKG [Zero] = Arg0
                                PCKG [One] = Arg1
                                Return (PCKG) /* \_SB_.PCI0.RP01.PXSX.TBDU.XHC_.RHUB.TUPC.PCKG */
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (SS01)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (One, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (One, 0x02))
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (SS02)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (0x02, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (0x02, 0x02))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x05) || (RPS1 == 0x05))))
    {
        If (CondRefOf (\_SB.PCI0.RP05.PXSX))
        {
            Scope (\_SB.PCI0.RP05.PXSX)
            {
                Name (TURP, 0x05)
                Device (TBDU)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Device (XHC)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (RHUB)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (SLMS, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return ((TP1D & One))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return ((TP2D & One))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return ((TP3D & One))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return ((TP4D & One))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return ((TP5D & One))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return ((TP6D & One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (FPCP, 2, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (\_SB.UBTC.RUCC (One, Arg1))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                }
                                ElseIf ((Arg1 == One))
                                {
                                    Return (TUPC (Zero, Zero))
                                }
                                Else
                                {
                                    Return (TPLD (Zero, Zero))
                                }
                            }

                            Method (FPSP, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (TPLD, 2, Serialized)
                            {
                                Name (PCKG, Package (0x01)
                                {
                                    Buffer (0x10){}
                                })
                                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                REV = One
                                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                VISI = Arg0
                                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                GPOS = Arg1
                                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                SHAP = One
                                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                WID = 0x08
                                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                HGT = 0x03
                                Return (PCKG) /* \_SB_.PCI0.RP05.PXSX.TBDU.XHC_.RHUB.TPLD.PCKG */
                            }

                            Method (TUPC, 2, Serialized)
                            {
                                Name (PCKG, Package (0x04)
                                {
                                    One, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                PCKG [Zero] = Arg0
                                PCKG [One] = Arg1
                                Return (PCKG) /* \_SB_.PCI0.RP05.PXSX.TBDU.XHC_.RHUB.TUPC.PCKG */
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (SS01)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (One, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (One, 0x02))
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (SS02)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (0x02, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (0x02, 0x02))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    If (((TBTS == One) && ((RPS0 == 0x09) || (RPS1 == 0x09))))
    {
        If (CondRefOf (\_SB.PCI0.RP09.PXSX))
        {
            Scope (\_SB.PCI0.RP09.PXSX)
            {
                Name (TURP, 0x09)
                Device (TBDU)
                {
                    Name (_ADR, 0x00020000)  // _ADR: Address
                    Device (XHC)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (RHUB)
                        {
                            Name (_ADR, Zero)  // _ADR: Address
                            Method (SLMS, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return ((TP1D & One))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return ((TP2D & One))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return ((TP3D & One))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return ((TP4D & One))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return ((TP5D & One))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return ((TP6D & One))
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (FPCP, 2, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (\_SB.UBTC.RUCC (One, Arg1))
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x02, Arg1))
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x03, Arg1))
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x04, Arg1))
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x05, Arg1))
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (\_SB.UBTC.RUCC (0x06, Arg1))
                                }
                                ElseIf ((Arg1 == One))
                                {
                                    Return (TUPC (Zero, Zero))
                                }
                                Else
                                {
                                    Return (TPLD (Zero, Zero))
                                }
                            }

                            Method (FPSP, 1, Serialized)
                            {
                                Local0 = (TURP << 0x02)
                                Local0 |= One
                                If ((((TP1D >> One) == Local0) && (Arg0 == TP1T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP2D >> One) == Local0) && (Arg0 == TP2T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP3D >> One) == Local0) && (Arg0 == TP3T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP4D >> One) == Local0) && (Arg0 == TP4T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP5D >> One) == Local0) && (Arg0 == TP5T)))
                                {
                                    Return (One)
                                }
                                ElseIf ((((TP6D >> One) == Local0) && (Arg0 == TP6T)))
                                {
                                    Return (One)
                                }
                                Else
                                {
                                    Return (Zero)
                                }
                            }

                            Method (TPLD, 2, Serialized)
                            {
                                Name (PCKG, Package (0x01)
                                {
                                    Buffer (0x10){}
                                })
                                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                                REV = One
                                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                                VISI = Arg0
                                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                                GPOS = Arg1
                                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                                SHAP = One
                                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                                WID = 0x08
                                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                                HGT = 0x03
                                Return (PCKG) /* \_SB_.PCI0.RP09.PXSX.TBDU.XHC_.RHUB.TPLD.PCKG */
                            }

                            Method (TUPC, 2, Serialized)
                            {
                                Name (PCKG, Package (0x04)
                                {
                                    One, 
                                    Zero, 
                                    Zero, 
                                    Zero
                                })
                                PCKG [Zero] = Arg0
                                PCKG [One] = Arg1
                                Return (PCKG) /* \_SB_.PCI0.RP09.PXSX.TBDU.XHC_.RHUB.TUPC.PCKG */
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (HS01)
                                {
                                    Name (_ADR, One)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (One) == Zero))
                                        {
                                            Return (FPCP (One, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (HS02)
                                {
                                    Name (_ADR, 0x02)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, One))
                                        }
                                        Else
                                        {
                                            Return (TUPC (Zero, Zero))
                                        }
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        If ((SLMS (0x02) == Zero))
                                        {
                                            Return (FPCP (0x02, 0x02))
                                        }
                                        Else
                                        {
                                            Return (TPLD (Zero, Zero))
                                        }
                                    }
                                }
                            }

                            If ((FPSP (One) == One))
                            {
                                Device (SS01)
                                {
                                    Name (_ADR, 0x03)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (One, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (One, 0x02))
                                    }
                                }
                            }

                            If ((FPSP (0x02) == One))
                            {
                                Device (SS02)
                                {
                                    Name (_ADR, 0x04)  // _ADR: Address
                                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                                    {
                                        Return (FPCP (0x02, One))
                                    }

                                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                                    {
                                        Return (FPCP (0x02, 0x02))
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "INTEL", "xh_cfhd4", 0x00000000)
{
    External (_SB_.PCI0.RP01.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP02.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP03.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP04.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP05.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP06.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP07.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP08.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP09.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP10.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP11.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP12.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP13.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP14.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP15.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP16.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP17.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP18.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP19.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.RP20.PXSX.WIST, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.XHC_.RHUB, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS06, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS07, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS08, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS09, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS10, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS11, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS12, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS13, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.HS14, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS01, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS02, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS03, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS04, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS05, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS06, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS07, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS08, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS09, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.SS10, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.USR1, DeviceObj)
    External (_SB_.PCI0.XHC_.RHUB.USR2, DeviceObj)
    External (_SB_.UBTC.RUCC, MethodObj)    // 2 Arguments
    External (ATDV, UnknownObj)
    External (BED2, UnknownObj)
    External (BED3, UnknownObj)
    External (BTBR, UnknownObj)
    External (BTL2, UnknownObj)
    External (BTLE, UnknownObj)
    External (BTLL, UnknownObj)
    External (BTSE, UnknownObj)

    Name (NHSP, 0x0E)
    Name (NSSP, 0x0A)
    Name (DBPN, 0x0E)
    Scope (\_SB.PCI0.XHC.RHUB)
    {
        Name (H1CN, One)
        Name (H1VS, One)
        Name (H1TC, Zero)
        Name (H1CR, Zero)
        Name (H2CN, One)
        Name (H2VS, One)
        Name (H2TC, Zero)
        Name (H2CR, Zero)
        Name (H3CN, One)
        Name (H3VS, One)
        Name (H3TC, Zero)
        Name (H3CR, Zero)
        Name (H4CN, Zero)
        Name (H4VS, Zero)
        Name (H4TC, Zero)
        Name (H4CR, Zero)
        Name (H5CN, Zero)
        Name (H5VS, Zero)
        Name (H5TC, Zero)
        Name (H5CR, Zero)
        Name (H6CN, Zero)
        Name (H6VS, Zero)
        Name (H6TC, Zero)
        Name (H6CR, Zero)
        Name (H7CN, One)
        Name (H7VS, One)
        Name (H7TC, Zero)
        Name (H7CR, Zero)
        Name (H8CN, One)
        Name (H8VS, One)
        Name (H8TC, One)
        Name (H8CR, One)
        Name (H9CN, Zero)
        Name (H9VS, Zero)
        Name (H9TC, Zero)
        Name (H9CR, Zero)
        Name (HACN, Zero)
        Name (HAVS, Zero)
        Name (HATC, Zero)
        Name (HACR, Zero)
        Name (HBCN, Zero)
        Name (HBVS, Zero)
        Name (HBTC, Zero)
        Name (HBCR, Zero)
        Name (HCCN, Zero)
        Name (HCVS, Zero)
        Name (HCTC, Zero)
        Name (HCCR, Zero)
        Name (HDCN, Zero)
        Name (HDVS, Zero)
        Name (HDTC, Zero)
        Name (HDCR, Zero)
        Name (HECN, Zero)
        Name (HEVS, Zero)
        Name (HETC, Zero)
        Name (HECR, Zero)
        Name (S1CN, One)
        Name (S1VS, One)
        Name (S1CP, 0x08)
        Name (S1TC, One)
        Name (S1CR, One)
        Name (S2CN, Zero)
        Name (S2VS, Zero)
        Name (S2CP, Zero)
        Name (S2TC, Zero)
        Name (S2CR, Zero)
        Name (S3CN, Zero)
        Name (S3VS, Zero)
        Name (S3CP, Zero)
        Name (S3TC, Zero)
        Name (S3CR, Zero)
        Name (S4CN, Zero)
        Name (S4VS, Zero)
        Name (S4CP, Zero)
        Name (S4TC, Zero)
        Name (S4CR, Zero)
        Name (S5CN, Zero)
        Name (S5VS, Zero)
        Name (S5CP, Zero)
        Name (S5TC, Zero)
        Name (S5CR, Zero)
        Name (S6CN, One)
        Name (S6VS, One)
        Name (S6CP, One)
        Name (S6TC, Zero)
        Name (S6CR, Zero)
        Name (S7CN, One)
        Name (S7VS, One)
        Name (S7CP, 0x02)
        Name (S7TC, Zero)
        Name (S7CR, Zero)
        Name (S8CN, One)
        Name (S8VS, One)
        Name (S8CP, 0x03)
        Name (S8TC, Zero)
        Name (S8CR, Zero)
        Name (S9CN, Zero)
        Name (S9VS, Zero)
        Name (S9CP, Zero)
        Name (S9TC, Zero)
        Name (S9CR, Zero)
        Name (SACN, Zero)
        Name (SAVS, Zero)
        Name (SACP, Zero)
        Name (SATC, Zero)
        Name (SACR, Zero)
        Method (GPLD, 2, Serialized)
        {
            Name (PCKG, Package (0x01)
            {
                Buffer (0x10){}
            })
            CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
            REV = One
            CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
            VISI = Arg0
            CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
            GPOS = Arg1
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.GPLD.PCKG */
        }

        Method (TPLD, 2, Serialized)
        {
            Name (PCKG, Package (0x01)
            {
                Buffer (0x10){}
            })
            CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
            REV = One
            CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
            VISI = Arg0
            CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
            GPOS = Arg1
            CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
            SHAP = One
            CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
            WID = 0x08
            CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
            HGT = 0x03
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.TPLD.PCKG */
        }

        Method (GUPC, 1, Serialized)
        {
            Name (PCKG, Package (0x04)
            {
                Zero, 
                0xFF, 
                Zero, 
                Zero
            })
            PCKG [Zero] = Arg0
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.GUPC.PCKG */
        }

        Method (TUPC, 1, Serialized)
        {
            Name (PCKG, Package (0x04)
            {
                One, 
                Zero, 
                Zero, 
                Zero
            })
            PCKG [One] = Arg0
            Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.TUPC.PCKG */
        }
    }

    Method (CNDP, 0, NotSerialized)
    {
        If (\_SB.PCI0.RP01.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP02.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP03.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP04.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP05.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP06.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP07.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP08.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP09.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP10.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP11.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP12.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP13.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP14.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP15.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP16.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP17.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP18.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP19.PXSX.WIST ())
        {
            Return (One)
        }

        If (\_SB.PCI0.RP20.PXSX.WIST ())
        {
            Return (One)
        }

        Return (Zero)
    }

    If ((NHSP >= One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS01)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((H1TC == Zero))
                {
                    Return (GUPC (H1CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H1CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((H1TC == Zero))
                {
                    Return (GPLD (H1VS, One))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H1CR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == One) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS01.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS01.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS01.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x02))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS02)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((H2TC == Zero))
                {
                    Return (GUPC (H2CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H2CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((H2TC == Zero))
                {
                    Return (GPLD (H2VS, 0x02))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H2CR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x02) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS02.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS02.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS02.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x03))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS03)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((H3TC == Zero))
                {
                    Return (GUPC (H3CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H3CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((H3TC == Zero))
                {
                    Return (GPLD (H3VS, 0x03))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H3CR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x03) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS03.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS03.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS03.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x04))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS04)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((H4TC == Zero))
                {
                    Return (GUPC (H4CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H4CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((H4TC == Zero))
                {
                    Return (GPLD (H4VS, 0x04))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H4CR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x04) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS04.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS04.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS04.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x05))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS05)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((H5TC == Zero))
                {
                    Return (GUPC (H5CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H5CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((H5TC == Zero))
                {
                    Return (GPLD (H5VS, 0x05))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H5CR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x05) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS05.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS05.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS05.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x06))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS06)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((H6TC == Zero))
                {
                    Return (GUPC (H6CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H6CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((H6TC == Zero))
                {
                    Return (GPLD (H6VS, 0x06))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H6CR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x06) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS06.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS06.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS06.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x07))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS07)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((H7TC == Zero))
                {
                    Return (GUPC (H7CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H7CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((H2TC == Zero))
                {
                    Return (GPLD (H7VS, 0x07))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H7CR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x07) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS07.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS07.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS07.GPCX */
                    }
                }
            }

            Device (WCAM)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    Local0 = 0x07
                    Return (Local0)
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        Zero, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS07.WCAM._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x24, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                            /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           // ....
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS07.WCAM._PLD.PLDP */
                }
            }
        }
    }

    If ((NHSP >= 0x08))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS08)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((H8TC == Zero))
                {
                    Return (GUPC (H8CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H8CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((H8TC == Zero))
                {
                    Return (GPLD (H8VS, 0x08))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H8CR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x08) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS08.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS08.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS08.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x09))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS09)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((H9TC == Zero))
                {
                    Return (GUPC (H9CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H9CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((H9TC == Zero))
                {
                    Return (GPLD (H9VS, 0x09))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (H9CR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x09) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS09.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS09.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS09.GPCX */
                    }
                }
            }

            Device (TECP)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    Return (0x09)
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        Zero, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS09.TECP._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0xA4, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           // ....
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS09.TECP._PLD.PLDP */
                }
            }

            Device (TCAM)
            {
                Method (_STA, 0, Serialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    Return (0x0A)
                }

                Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                {
                    Name (UPCP, Package (0x04)
                    {
                        Zero, 
                        0xFF, 
                        Zero, 
                        Zero
                    })
                    Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS09.TCAM._UPC.UPCP */
                }

                Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                {
                    Name (PLDP, Package (0x01)
                    {
                        Buffer (0x14)
                        {
                            /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0xA4, 0x01, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0xC8, 0x00, 0xA0, 0x00                           // ....
                        }
                    })
                    Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS09.TCAM._PLD.PLDP */
                }
            }
        }
    }

    If ((NHSP >= 0x0A))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS10)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((HATC == Zero))
                {
                    Return (GUPC (HACN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (HACR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((HATC == Zero))
                {
                    Return (GPLD (HAVS, 0x0A))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (HACR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x0A) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS10.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS10.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS10.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x0B))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS11)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((HBTC == Zero))
                {
                    Return (GUPC (HBCN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (HBCR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((HBTC == Zero))
                {
                    Return (GPLD (HBVS, 0x0B))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (HBCR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x0B) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS11.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS11.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS11.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x0C))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS12)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((HCTC == Zero))
                {
                    Return (GUPC (HCCN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (HCCR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((HCTC == Zero))
                {
                    Return (GPLD (HCVS, 0x0C))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (HCCR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x0C) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS12.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS12.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS12.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x0D))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS13)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((HDTC == Zero))
                {
                    Return (GUPC (HDCN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (HDCR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((HDTC == Zero))
                {
                    Return (GPLD (HDVS, 0x0D))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (HDCR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x0D) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS13.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS13.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS13.GPCX */
                    }
                }
            }
        }
    }

    If ((NHSP >= 0x0E))
    {
        Scope (\_SB.PCI0.XHC.RHUB.HS14)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((HETC == Zero))
                {
                    Return (GUPC (HECN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (HECR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((HETC == Zero))
                {
                    Return (GPLD (HEVS, 0x0E))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (HECR, 0x02))
                }
            }

            If (CondRefOf (DBPN))
            {
                If (((DBPN == 0x0E) && CNDP ()))
                {
                    Name (SADX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            0x80000000
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            0x80000000
                        }
                    })
                    Method (SADS, 0, Serialized)
                    {
                        DerefOf (SADX [One]) [One] = \ATDV /* External reference */
                        DerefOf (SADX [0x02]) [One] = \ATDV /* External reference */
                        Return (SADX) /* \_SB_.PCI0.XHC_.RHUB.HS14.SADX */
                    }

                    Name (BRDY, Package (0x02)
                    {
                        Zero, 
                        Package (0x08)
                        {
                            0x12, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80, 
                            0x80
                        }
                    })
                    Method (BRDS, 0, Serialized)
                    {
                        DerefOf (BRDY [One]) [One] = \BTSE /* External reference */
                        DerefOf (BRDY [One]) [0x02] = \BTBR /* External reference */
                        DerefOf (BRDY [One]) [0x03] = \BED2 /* External reference */
                        DerefOf (BRDY [One]) [0x04] = \BED3 /* External reference */
                        DerefOf (BRDY [One]) [0x05] = \BTLE /* External reference */
                        DerefOf (BRDY [One]) [0x06] = \BTL2 /* External reference */
                        DerefOf (BRDY [One]) [0x07] = \BTLL /* External reference */
                        Return (BRDY) /* \_SB_.PCI0.XHC_.RHUB.HS14.BRDY */
                    }

                    Name (GPCX, Package (0x03)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0x07, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }, 

                        Package (0x02)
                        {
                            0x12, 
                            Package (0x03)
                            {
                                Zero, 
                                Zero, 
                                Zero
                            }
                        }
                    })
                    Method (GPC, 0, Serialized)
                    {
                        Return (GPCX) /* \_SB_.PCI0.XHC_.RHUB.HS14.GPCX */
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.USR1)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    Scope (\_SB.PCI0.XHC.RHUB.USR2)
    {
        Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
        {
            Return (GUPC (Zero))
        }

        Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
        {
            Return (GPLD (Zero, Zero))
        }
    }

    If ((NSSP >= One))
    {
        Scope (\_SB.PCI0.XHC.RHUB.SS01)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((S1TC == Zero))
                {
                    Return (GUPC (S1CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S1CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((S1TC == Zero))
                {
                    Return (GPLD (S1VS, S1CP))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S1CR, 0x02))
                }
            }
        }
    }

    If ((NSSP >= 0x02))
    {
        Scope (\_SB.PCI0.XHC.RHUB.SS02)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((S2TC == Zero))
                {
                    Return (GUPC (S2CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S2CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((S2TC == Zero))
                {
                    Return (GPLD (S2VS, S2CP))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S2CR, 0x02))
                }
            }
        }
    }

    If ((NSSP >= 0x03))
    {
        Scope (\_SB.PCI0.XHC.RHUB.SS03)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((S3TC == Zero))
                {
                    Return (GUPC (S3CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S3CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((S3TC == Zero))
                {
                    Return (GPLD (S3VS, S3CP))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S3CR, 0x02))
                }
            }
        }
    }

    If ((NSSP >= 0x04))
    {
        Scope (\_SB.PCI0.XHC.RHUB.SS04)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((S4TC == Zero))
                {
                    Return (GUPC (S4CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S4CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((S4TC == Zero))
                {
                    Return (GPLD (S4VS, S4CP))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S4CR, 0x02))
                }
            }
        }
    }

    If ((NSSP >= 0x05))
    {
        Scope (\_SB.PCI0.XHC.RHUB.SS05)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((S5TC == Zero))
                {
                    Return (GUPC (S5CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S5CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((S5TC == Zero))
                {
                    Return (GPLD (S5VS, S5CP))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S5CR, 0x02))
                }
            }
        }
    }

    If ((NSSP >= 0x06))
    {
        Scope (\_SB.PCI0.XHC.RHUB.SS06)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((S6TC == Zero))
                {
                    Return (GUPC (S6CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S6CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((S6TC == Zero))
                {
                    Return (GPLD (S6VS, S6CP))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S6CR, 0x02))
                }
            }
        }
    }

    If ((NSSP >= 0x07))
    {
        Scope (\_SB.PCI0.XHC.RHUB.SS07)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((S7TC == Zero))
                {
                    Return (GUPC (S7CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S7CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((S7TC == Zero))
                {
                    Return (GPLD (S7VS, S7CP))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S7CR, 0x02))
                }
            }
        }
    }

    If ((NSSP >= 0x08))
    {
        Scope (\_SB.PCI0.XHC.RHUB.SS08)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((S8TC == Zero))
                {
                    Return (GUPC (S8CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S8CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((S8TC == Zero))
                {
                    Return (GPLD (S8VS, S8CP))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S8CR, 0x02))
                }
            }
        }
    }

    If ((NSSP >= 0x09))
    {
        Scope (\_SB.PCI0.XHC.RHUB.SS09)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((S9TC == Zero))
                {
                    Return (GUPC (S9CN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S9CR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((S9TC == Zero))
                {
                    Return (GPLD (S9VS, S9CP))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (S9CR, 0x02))
                }
            }
        }
    }

    If ((NSSP >= 0x0A))
    {
        Scope (\_SB.PCI0.XHC.RHUB.SS10)
        {
            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
            {
                If ((SATC == Zero))
                {
                    Return (GUPC (SACN))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (SACR, One))
                }
            }

            Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
            {
                If ((SATC == Zero))
                {
                    Return (GPLD (SAVS, SACP))
                }
                Else
                {
                    Return (\_SB.UBTC.RUCC (SACR, 0x02))
                }
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "OemRef", "OemNvT", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.CPPC, IntObj)
    External (_SB_.GGIV, MethodObj)    // 1 Arguments
    External (_SB_.GPC0, MethodObj)    // 1 Arguments
    External (_SB_.HWPV, UnknownObj)
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.ASPM, UnknownObj)
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.GFX0._DSM, MethodObj)    // 4 Arguments
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ADPT, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.CTMP, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.GPSR, UnknownObj)
    External (_SB_.PCI0.P0AP, IntObj)
    External (_SB_.PCI0.P0LD, IntObj)
    External (_SB_.PCI0.P0LS, IntObj)
    External (_SB_.PCI0.P0RM, IntObj)
    External (_SB_.PCI0.PEG0, DeviceObj)
    External (_SB_.PCI0.PEG0.CEDR, IntObj)
    External (_SB_.PCI0.PEG0.DEID, UnknownObj)
    External (_SB_.PCI0.PEG0.DGCX, IntObj)
    External (_SB_.PCI0.PEG0.LREN, IntObj)
    External (_SB_.PCI0.PEG0.NVPM, UnknownObj)
    External (_SB_.PCI0.PEG0.PEGP, DeviceObj)
    External (_SB_.PCI0.PEG0.PEGP._ADR, DeviceObj)
    External (_SB_.PCI0.PEG0.PEGP._PS0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.PEG0.PEGP.LTRE, IntObj)
    External (_SB_.PCI0.PEG0.PEGP.NVJT, MethodObj)    // 4 Arguments
    External (_SB_.PCI0.PEG0.PEGP.PVID, UnknownObj)
    External (_SB_.PCI0.PEG0.PRBN, IntObj)
    External (_SB_.PCI0.PEG0.TDGC, IntObj)
    External (_SB_.PCI0.PEG0.TGPC, IntObj)
    External (_SB_.PCI0.PGOF, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.PGON, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SHFG, IntObj)
    External (_SB_.PR00._PSS, BuffObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (_SB_.SPC0, MethodObj)    // 2 Arguments
    External (BRTL, UnknownObj)
    External (DID1, UnknownObj)
    External (DID2, UnknownObj)
    External (DID3, UnknownObj)
    External (DID4, UnknownObj)
    External (DID5, UnknownObj)
    External (DID6, UnknownObj)
    External (DID7, UnknownObj)
    External (DID8, UnknownObj)
    External (EBAS, UnknownObj)
    External (GSYC, UnknownObj)
    External (HRA0, UnknownObj)
    External (HRE0, UnknownObj)
    External (HRG0, UnknownObj)
    External (HYSS, UnknownObj)
    External (NVAF, UnknownObj)
    External (NVGA, UnknownObj)
    External (NVHA, UnknownObj)
    External (NXD1, UnknownObj)
    External (NXD2, UnknownObj)
    External (NXD3, UnknownObj)
    External (NXD4, UnknownObj)
    External (NXD5, UnknownObj)
    External (NXD6, UnknownObj)
    External (NXD7, UnknownObj)
    External (NXD8, UnknownObj)
    External (OSYS, UnknownObj)
    External (PLFW, UnknownObj)
    External (PLSZ, UnknownObj)
    External (PNOT, MethodObj)    // 0 Arguments
    External (PNVD, UnknownObj)
    External (PROC, UnknownObj)
    External (PWA0, UnknownObj)
    External (PWE0, UnknownObj)
    External (PWG0, UnknownObj)
    External (SGFL, UnknownObj)
    External (SGGP, UnknownObj)
    External (SGMD, UnknownObj)
    External (SSMP, UnknownObj)
    External (THMP, FieldUnitObj)
    External (XBAS, UnknownObj)

    Scope (\_SB.PCI0.PEG0)
    {
        OperationRegion (MSID, SystemMemory, EBAS, 0x0500)
        Field (MSID, DWordAcc, Lock, Preserve)
        {
            VEID,   16, 
            DEID,   16, 
            Offset (0x40), 
            NVID,   32, 
            Offset (0x4C), 
            ATID,   32, 
            Offset (0x48B), 
                ,   1, 
            NHDA,   1
        }

        OperationRegion (RPCX, SystemMemory, ((\XBAS + 0x8000) + Zero), 0x1000)
        Field (RPCX, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            CMDR,   8, 
            Offset (0x19), 
            PRBN,   8, 
            Offset (0x84), 
            D0ST,   2, 
            Offset (0xAA), 
            CEDR,   1, 
            Offset (0xB0), 
            ASPM,   2, 
                ,   2, 
            LNKD,   1, 
            Offset (0xC9), 
                ,   2, 
            LREN,   1, 
            Offset (0x216), 
            LNKS,   4
        }

        Name (TDGC, Zero)
        Name (DGCX, Zero)
        Name (TGPC, Buffer (0x04)
        {
             0x00                                             // .
        })
        PowerResource (PG00, 0x00, 0x0000)
        {
            Name (_STA, One)  // _STA: Status
            Method (_ON, 0, Serialized)  // _ON_: Power On
            {
                If ((TDGC == One))
                {
                    If ((DGCX == 0x03))
                    {
                        \_SB.PCI0.PEG0.PEGP.GC6O ()
                    }
                    ElseIf ((DGCX == 0x04))
                    {
                        \_SB.PCI0.PEG0.PEGP.GC6O ()
                    }

                    TDGC = Zero
                    DGCX = Zero
                    _STA = One
                }
                ElseIf ((OSYS > 0x07D9))
                {
                    PGON (Zero)
                    CMDR |= 0x07
                    D0ST = Zero
                    While ((\_SB.PCI0.P0LS < 0x03))
                    {
                        Sleep (One)
                    }

                    If ((VEID == 0x10DE))
                    {
                        NVID = HYSS /* External reference */
                        If ((NVAF == One))
                        {
                            NHDA = One
                        }
                        Else
                        {
                            NHDA = Zero
                        }
                    }

                    If ((VEID == 0x1002))
                    {
                        ATID = HYSS /* External reference */
                    }

                    _STA = One
                }
            }

            Method (_OFF, 0, Serialized)  // _OFF: Power Off
            {
                If ((TDGC == One))
                {
                    CreateField (TGPC, Zero, 0x03, GUPC)
                    If ((ToInteger (GUPC) == One))
                    {
                        \_SB.PCI0.PEG0.PEGP.GC6I ()
                    }
                    ElseIf ((ToInteger (GUPC) == 0x02))
                    {
                        \_SB.PCI0.PEG0.PEGP.GC6I ()
                    }
                }
                ElseIf ((OSYS > 0x07D9))
                {
                    PGOF (Zero)
                    _STA = Zero
                }
            }
        }

        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            PG00
        })
        Name (_PR2, Package (0x01)  // _PR2: Power Resources for D2
        {
            PG00
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            PG00
        })
    }

    Scope (\_SB.PCI0)
    {
        Name (OTM, "OTMACPI 2010-Mar-09 12:08:26")
    }

    Scope (\_SB.PCI0.PEG0.PEGP)
    {
        OperationRegion (PCIM, SystemMemory, (\XBAS + (\_SB.PCI0.PEG0.PRBN << 0x14)), 0x0600)
        Field (PCIM, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            CMDR,   8, 
            VGAR,   2000, 
            Offset (0x48B), 
                ,   1, 
            NHDA,   1
        }

        Name (VGAB, Buffer (0xFA)
        {
             0x00                                             // .
        })
        Name (GPRF, Zero)
        OperationRegion (NVHM, SystemMemory, NVHA, 0x00030400)
        Field (NVHM, DWordAcc, NoLock, Preserve)
        {
            NVSG,   128, 
            NVSZ,   32, 
            NVVR,   32, 
            NVHO,   32, 
            RVBS,   32, 
            RBF1,   262144, 
            RBF2,   262144, 
            RBF3,   262144, 
            RBF4,   262144, 
            RBF5,   262144, 
            RBF6,   262144, 
            MXML,   32, 
            MXM3,   1600
        }

        Name (OPCE, 0x02)
        Name (DGPS, Zero)
        Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
        {
            Return (Package (0x04)
            {
                0x8000A450, 
                0x80008340, 
                0x80008341, 
                0x80006320
            })
        }

        Device (LCD0)
        {
            Method (_ADR, 0, Serialized)  // _ADR: Address
            {
                Return (0x8000A450)
            }

            Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
            {
                Return (0x1F)
            }

            Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
            {
                Return (Package (0x67)
                {
                    0x50, 
                    0x32, 
                    Zero, 
                    One, 
                    0x02, 
                    0x03, 
                    0x04, 
                    0x05, 
                    0x06, 
                    0x07, 
                    0x08, 
                    0x09, 
                    0x0A, 
                    0x0B, 
                    0x0C, 
                    0x0D, 
                    0x0E, 
                    0x0F, 
                    0x10, 
                    0x11, 
                    0x12, 
                    0x13, 
                    0x14, 
                    0x15, 
                    0x16, 
                    0x17, 
                    0x18, 
                    0x19, 
                    0x1A, 
                    0x1B, 
                    0x1C, 
                    0x1D, 
                    0x1E, 
                    0x1F, 
                    0x20, 
                    0x21, 
                    0x22, 
                    0x23, 
                    0x24, 
                    0x25, 
                    0x26, 
                    0x27, 
                    0x28, 
                    0x29, 
                    0x2A, 
                    0x2B, 
                    0x2C, 
                    0x2D, 
                    0x2E, 
                    0x2F, 
                    0x30, 
                    0x31, 
                    0x32, 
                    0x33, 
                    0x34, 
                    0x35, 
                    0x36, 
                    0x37, 
                    0x38, 
                    0x39, 
                    0x3A, 
                    0x3B, 
                    0x3C, 
                    0x3D, 
                    0x3E, 
                    0x3F, 
                    0x40, 
                    0x41, 
                    0x42, 
                    0x43, 
                    0x44, 
                    0x45, 
                    0x46, 
                    0x47, 
                    0x48, 
                    0x49, 
                    0x4A, 
                    0x4B, 
                    0x4C, 
                    0x4D, 
                    0x4E, 
                    0x4F, 
                    0x50, 
                    0x51, 
                    0x52, 
                    0x53, 
                    0x54, 
                    0x55, 
                    0x56, 
                    0x57, 
                    0x58, 
                    0x59, 
                    0x5A, 
                    0x5B, 
                    0x5C, 
                    0x5D, 
                    0x5E, 
                    0x5F, 
                    0x60, 
                    0x61, 
                    0x62, 
                    0x63, 
                    0x64
                })
            }

            Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
            {
            }
        }

        Method (SGST, 0, Serialized)
        {
            If ((SGMD & 0x0F))
            {
                If ((SGGP != One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            If ((PVID != 0xFFFF))
            {
                Return (0x0F)
            }

            Return (Zero)
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((DGPS != Zero))
            {
                _ON ()
                DGPS = Zero
            }
        }

        Method (_PS1, 0, NotSerialized)  // _PS1: Power State 1
        {
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((OPCE == 0x03))
            {
                If ((DGPS == Zero))
                {
                    _OFF ()
                    DGPS = One
                }

                OPCE = 0x02
            }
        }

        Method (_ROM, 2, NotSerialized)  // _ROM: Read-Only Memory
        {
            Local0 = Arg0
            Local1 = Arg1
            If ((Local1 > 0x1000))
            {
                Local1 = 0x1000
            }

            If ((Local0 > 0x00030000))
            {
                Return (Buffer (Local1)
                {
                     0x00                                             // .
                })
            }

            Local3 = (Local1 * 0x08)
            Name (ROM1, Buffer (0x8000)
            {
                 0x00                                             // .
            })
            Name (ROM2, Buffer (Local1)
            {
                 0x00                                             // .
            })
            If ((Local0 < 0x8000))
            {
                ROM1 = RBF1 /* \_SB_.PCI0.PEG0.PEGP.RBF1 */
            }
            ElseIf ((Local0 < 0x00010000))
            {
                Local0 -= 0x8000
                ROM1 = RBF2 /* \_SB_.PCI0.PEG0.PEGP.RBF2 */
            }
            ElseIf ((Local0 < 0x00018000))
            {
                Local0 -= 0x00010000
                ROM1 = RBF3 /* \_SB_.PCI0.PEG0.PEGP.RBF3 */
            }
            ElseIf ((Local0 < 0x00020000))
            {
                Local0 -= 0x00018000
                ROM1 = RBF4 /* \_SB_.PCI0.PEG0.PEGP.RBF4 */
            }
            ElseIf ((Local0 < 0x00028000))
            {
                Local0 -= 0x00020000
                ROM1 = RBF5 /* \_SB_.PCI0.PEG0.PEGP.RBF5 */
            }
            ElseIf ((Local0 < 0x00030000))
            {
                Local0 -= 0x00028000
                ROM1 = RBF6 /* \_SB_.PCI0.PEG0.PEGP.RBF6 */
            }

            Local2 = (Local0 * 0x08)
            CreateField (ROM1, Local2, Local3, TMPB)
            ROM2 = TMPB /* \_SB_.PCI0.PEG0.PEGP._ROM.TMPB */
            Return (ROM2) /* \_SB_.PCI0.PEG0.PEGP._ROM.ROM2 */
        }

        Method (HDSM, 4, Serialized)
        {
            Return (0x80000001)
        }

        Name (G101, Buffer (0xD5)
        {
            /* 0000 */  0x65, 0x0B, 0xA9, 0x53, 0x02, 0x98, 0xFA, 0xE8,  // e..S....
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x37, 0x32, 0x36, 0x38, 0x20,  // 0357268 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x52, 0x5C, 0x3D,  //    - R\=
            /* 0068 */  0x42, 0x4B, 0x53, 0x4D, 0x29, 0x38, 0x22, 0x47,  // BKSM)8"G
            /* 0070 */  0x40, 0x2C, 0x25, 0x36, 0x32, 0x5A, 0x48, 0x2C,  // @,%62ZH,
            /* 0078 */  0x45, 0x31, 0x26, 0x43, 0x5D, 0x23, 0x50, 0x2F,  // E1&C]#P/
            /* 0080 */  0x32, 0x53, 0x56, 0x5F, 0x20, 0x35, 0x4F, 0x20,  // 2SV_ 5O 
            /* 0088 */  0x39, 0x31, 0x44, 0x58, 0x39, 0x20, 0x2D, 0x20,  // 91DX9 - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G102, Buffer (0xD5)
        {
            /* 0000 */  0xC8, 0xB8, 0xC5, 0x88, 0x38, 0x15, 0x16, 0x26,  // ....8..&
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x38, 0x38, 0x35, 0x39, 0x33, 0x20,  // 0388593 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x57, 0x41, 0x32,  //    - WA2
            /* 0068 */  0x4F, 0x4E, 0x5E, 0x50, 0x56, 0x3F, 0x27, 0x48,  // ON^PV?'H
            /* 0070 */  0x45, 0x51, 0x5A, 0x31, 0x3F, 0x41, 0x4D, 0x29,  // EQZ1?AM)
            /* 0078 */  0x40, 0x34, 0x29, 0x4C, 0x42, 0x26, 0x55, 0x50,  // @4)LB&UP
            /* 0080 */  0x37, 0x58, 0x4B, 0x55, 0x59, 0x38, 0x48, 0x25,  // 7XKUY8H%
            /* 0088 */  0x22, 0x39, 0x48, 0x27, 0x47, 0x20, 0x2D, 0x20,  // "9H'G - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G103, Buffer (0xD5)
        {
            /* 0000 */  0xCE, 0xFE, 0xC5, 0x3A, 0x6D, 0xCC, 0x2D, 0x3C,  // ...:m.-<
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x37, 0x32, 0x38, 0x34, 0x20,  // 0357284 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x50, 0x5A, 0x3B,  //    - PZ;
            /* 0068 */  0x44, 0x45, 0x51, 0x4F, 0x2F, 0x36, 0x20, 0x41,  // DEQO/6 A
            /* 0070 */  0x4E, 0x2A, 0x23, 0x49, 0x34, 0x58, 0x46, 0x22,  // N*#I4XF"
            /* 0078 */  0x38, 0x4C, 0x20, 0x45, 0x5B, 0x21, 0x2E, 0x29,  // 8L E[!.)
            /* 0080 */  0x30, 0x51, 0x54, 0x51, 0x22, 0x33, 0x41, 0x3E,  // 0QTQ"3A>
            /* 0088 */  0x3B, 0x37, 0x42, 0x5E, 0x39, 0x20, 0x2D, 0x20,  // ;7B^9 - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G104, Buffer (0xD5)
        {
            /* 0000 */  0x1D, 0x92, 0xF4, 0xFF, 0xBD, 0x99, 0xF9, 0xF2,  // ........
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x37, 0x32, 0x37, 0x31, 0x20,  // 0357271 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5C, 0x55, 0x44,  //    - \UD
            /* 0068 */  0x5D, 0x5D, 0x4E, 0x41, 0x24, 0x4B, 0x33, 0x57,  // ]]NA$K3W
            /* 0070 */  0x5F, 0x3A, 0x32, 0x5B, 0x58, 0x24, 0x51, 0x54,  // _:2[X$QT
            /* 0078 */  0x23, 0x54, 0x49, 0x2F, 0x20, 0x42, 0x31, 0x4E,  // #TI/ B1N
            /* 0080 */  0x50, 0x31, 0x33, 0x33, 0x46, 0x4B, 0x55, 0x54,  // P133FKUT
            /* 0088 */  0x55, 0x2C, 0x3C, 0x44, 0x20, 0x20, 0x2D, 0x20,  // U,<D  - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G10A, Buffer (0xD5)
        {
            /* 0000 */  0x3A, 0xF8, 0xD2, 0x8E, 0xA7, 0xC8, 0x07, 0xD4,  // :.......
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x39, 0x32, 0x35, 0x37, 0x37, 0x20,  // 0392577 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x54, 0x5E, 0x3F,  //    - T^?
            /* 0068 */  0x40, 0x49, 0x5D, 0x21, 0x2F, 0x3A, 0x24, 0x45,  // @I]!/:$E
            /* 0070 */  0x42, 0x2E, 0x27, 0x34, 0x30, 0x5C, 0x4A, 0x2E,  // B.'40\J.
            /* 0078 */  0x47, 0x33, 0x24, 0x41, 0x5F, 0x25, 0x52, 0x2D,  // G3$A_%R-
            /* 0080 */  0x34, 0x55, 0x48, 0x5D, 0x2E, 0x37, 0x4D, 0x22,  // 4UH].7M"
            /* 0088 */  0x27, 0x3F, 0x46, 0x5A, 0x44, 0x20, 0x2D, 0x20,  // '?FZD - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G10B, Buffer (0xD5)
        {
            /* 0000 */  0xAC, 0xA2, 0xAE, 0x8E, 0x4A, 0x9E, 0x58, 0x79,  // ....J.Xy
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x39, 0x32, 0x35, 0x37, 0x38, 0x20,  // 0392578 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x55, 0x5F, 0x30,  //    - U_0
            /* 0068 */  0x41, 0x48, 0x5C, 0x20, 0x50, 0x3D, 0x25, 0x4A,  // AH\ P=%J
            /* 0070 */  0x43, 0x2F, 0x58, 0x33, 0x31, 0x5F, 0x4B, 0x2F,  // C/X31_K/
            /* 0078 */  0x46, 0x32, 0x2B, 0x4E, 0x40, 0x24, 0x53, 0x52,  // F2+N@$SR
            /* 0080 */  0x35, 0x56, 0x49, 0x5C, 0x2F, 0x32, 0x38, 0x20,  // 5VI\/28 
            /* 0088 */  0x22, 0x3A, 0x42, 0x54, 0x31, 0x20, 0x2D, 0x20,  // ":BT1 - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G10C, Buffer (0xD5)
        {
            /* 0000 */  0x10, 0x15, 0x48, 0x82, 0x01, 0x91, 0xDE, 0xF2,  // ..H.....
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x39, 0x32, 0x35, 0x38, 0x31, 0x20,  // 0392581 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5F, 0x58, 0x38,  //    - _X8
            /* 0068 */  0x58, 0x42, 0x4B, 0x34, 0x23, 0x4C, 0x36, 0x5A,  // XBK4#L6Z
            /* 0070 */  0x52, 0x3D, 0x35, 0x58, 0x47, 0x29, 0x54, 0x57,  // R=5XG)TW
            /* 0078 */  0x2C, 0x59, 0x4E, 0x2A, 0x23, 0x47, 0x34, 0x32,  // ,YN*#G42
            /* 0080 */  0x53, 0x34, 0x36, 0x3F, 0x31, 0x50, 0x22, 0x5A,  // S46?1P"Z
            /* 0088 */  0x5E, 0x2A, 0x3D, 0x36, 0x57, 0x20, 0x2D, 0x20,  // ^*=6W - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G10D, Buffer (0xD5)
        {
            /* 0000 */  0xF6, 0x3C, 0x9A, 0x93, 0xA2, 0xCA, 0x0C, 0x50,  // .<.....P
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x39, 0x32, 0x35, 0x38, 0x32, 0x20,  // 0392582 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x50, 0x5A, 0x3B,  //    - PZ;
            /* 0068 */  0x44, 0x45, 0x51, 0x3D, 0x2B, 0x36, 0x20, 0x41,  // DEQ=+6 A
            /* 0070 */  0x4E, 0x2A, 0x23, 0x49, 0x34, 0x58, 0x46, 0x22,  // N*#I4XF"
            /* 0078 */  0x38, 0x4C, 0x20, 0x45, 0x5B, 0x21, 0x2E, 0x29,  // 8L E[!.)
            /* 0080 */  0x30, 0x51, 0x54, 0x51, 0x22, 0x33, 0x41, 0x3E,  // 0QTQ"3A>
            /* 0088 */  0x3B, 0x37, 0x42, 0x5E, 0x39, 0x20, 0x2D, 0x20,  // ;7B^9 - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G105, Buffer (0xD5)
        {
            /* 0000 */  0x9F, 0x24, 0xEB, 0x8A, 0xE3, 0x88, 0xBD, 0xBA,  // .$......
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x35, 0x34, 0x20,  // 0356354 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5D, 0x56, 0x45,  //    - ]VE
            /* 0068 */  0x5A, 0x5C, 0x49, 0x40, 0x25, 0x4A, 0x34, 0x54,  // Z\I@%J4T
            /* 0070 */  0x50, 0x3B, 0x33, 0x5A, 0x58, 0x27, 0x52, 0x55,  // P;3ZX'RU
            /* 0078 */  0x22, 0x57, 0x48, 0x2C, 0x21, 0x45, 0x32, 0x4F,  // "WH,!E2O
            /* 0080 */  0x51, 0x32, 0x34, 0x32, 0x46, 0x4E, 0x24, 0x58,  // Q242FN$X
            /* 0088 */  0x50, 0x2C, 0x39, 0x48, 0x55, 0x20, 0x2D, 0x20,  // P,9HU - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G106, Buffer (0xD5)
        {
            /* 0000 */  0x3A, 0x53, 0xB7, 0xA5, 0x14, 0x83, 0x14, 0x46,  // :S.....F
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x38, 0x38, 0x36, 0x30, 0x35, 0x20,  // 0388605 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x51, 0x5B, 0x3C,  //    - Q[<
            /* 0068 */  0x45, 0x44, 0x50, 0x4E, 0x28, 0x39, 0x21, 0x46,  // EDPN(9!F
            /* 0070 */  0x4F, 0x2B, 0x24, 0x37, 0x34, 0x5B, 0x47, 0x23,  // O+$74[G#
            /* 0078 */  0x3B, 0x4F, 0x27, 0x42, 0x5C, 0x20, 0x2F, 0x2E,  // ;O'B\ /.
            /* 0080 */  0x31, 0x52, 0x55, 0x5F, 0x56, 0x32, 0x4E, 0x3F,  // 1RU_V2N?
            /* 0088 */  0x38, 0x37, 0x47, 0x25, 0x4A, 0x20, 0x2D, 0x20,  // 87G%J - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G107, Buffer (0xD5)
        {
            /* 0000 */  0x3E, 0x10, 0x5D, 0xF2, 0xC6, 0x9E, 0x62, 0xDE,  // >.]...b.
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x38, 0x31, 0x20,  // 0356381 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5D, 0x56, 0x45,  //    - ]VE
            /* 0068 */  0x5A, 0x5C, 0x49, 0x40, 0x25, 0x4A, 0x34, 0x54,  // Z\I@%J4T
            /* 0070 */  0x50, 0x3B, 0x33, 0x5A, 0x58, 0x27, 0x52, 0x55,  // P;3ZX'RU
            /* 0078 */  0x22, 0x57, 0x48, 0x2C, 0x21, 0x45, 0x32, 0x4F,  // "WH,!E2O
            /* 0080 */  0x51, 0x32, 0x34, 0x32, 0x46, 0x4E, 0x24, 0x58,  // Q242FN$X
            /* 0088 */  0x50, 0x2C, 0x3A, 0x48, 0x53, 0x20, 0x2D, 0x20,  // P,:HS - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G108, Buffer (0xD5)
        {
            /* 0000 */  0x7F, 0x40, 0xA3, 0x88, 0xA0, 0x19, 0x30, 0x02,  // .@....0.
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x37, 0x32, 0x20,  // 0356372 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5D, 0x56, 0x45,  //    - ]VE
            /* 0068 */  0x5A, 0x5C, 0x49, 0x40, 0x25, 0x4A, 0x34, 0x54,  // Z\I@%J4T
            /* 0070 */  0x50, 0x3B, 0x33, 0x5A, 0x58, 0x27, 0x52, 0x55,  // P;3ZX'RU
            /* 0078 */  0x22, 0x57, 0x48, 0x2C, 0x21, 0x45, 0x32, 0x4F,  // "WH,!E2O
            /* 0080 */  0x51, 0x32, 0x34, 0x32, 0x46, 0x4A, 0x56, 0x5B,  // Q242FJV[
            /* 0088 */  0x56, 0x2D, 0x3F, 0x33, 0x24, 0x20, 0x2D, 0x20,  // V-?3$ - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G109, Buffer (0xD5)
        {
            /* 0000 */  0xC8, 0x73, 0x50, 0xCD, 0xC8, 0xAE, 0xFF, 0x71,  // .sP....q
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x35, 0x36, 0x20,  // 0356356 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5F, 0x58, 0x38,  //    - _X8
            /* 0068 */  0x58, 0x42, 0x4B, 0x46, 0x27, 0x4C, 0x36, 0x5A,  // XBKF'L6Z
            /* 0070 */  0x52, 0x3D, 0x35, 0x58, 0x46, 0x29, 0x54, 0x57,  // R=5XF)TW
            /* 0078 */  0x2C, 0x59, 0x4E, 0x2A, 0x23, 0x47, 0x34, 0x32,  // ,YN*#G42
            /* 0080 */  0x53, 0x34, 0x36, 0x30, 0x44, 0x50, 0x21, 0x5A,  // S460DP!Z
            /* 0088 */  0x2C, 0x2E, 0x3B, 0x40, 0x2B, 0x20, 0x2D, 0x20,  // ,.;@+ - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G10E, Buffer (0xD5)
        {
            /* 0000 */  0x4C, 0x1A, 0x3F, 0x11, 0xFB, 0xB6, 0x7A, 0xBB,  // L.?...z.
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x39, 0x36, 0x39, 0x30, 0x35, 0x20,  // 0396905 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x53, 0x5D, 0x3E,  //    - S]>
            /* 0068 */  0x43, 0x4A, 0x52, 0x4C, 0x2A, 0x3B, 0x23, 0x44,  // CJRL*;#D
            /* 0070 */  0x41, 0x2D, 0x26, 0x35, 0x32, 0x5D, 0x49, 0x2D,  // A-&52]I-
            /* 0078 */  0x44, 0x30, 0x25, 0x40, 0x5E, 0x22, 0x51, 0x2C,  // D0%@^"Q,
            /* 0080 */  0x33, 0x54, 0x57, 0x5E, 0x20, 0x34, 0x4C, 0x21,  // 3TW^ 4L!
            /* 0088 */  0x26, 0x39, 0x40, 0x27, 0x48, 0x20, 0x2D, 0x20,  // &9@'H - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G201, Buffer (0xD5)
        {
            /* 0000 */  0x45, 0x02, 0x05, 0xFE, 0x36, 0x91, 0x40, 0x41,  // E...6.@A
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x38, 0x38, 0x35, 0x39, 0x31, 0x20,  // 0388591 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x55, 0x5F, 0x30,  //    - U_0
            /* 0068 */  0x41, 0x48, 0x5C, 0x52, 0x54, 0x3D, 0x25, 0x4A,  // AH\RT=%J
            /* 0070 */  0x43, 0x2F, 0x58, 0x33, 0x31, 0x5F, 0x4B, 0x2F,  // C/X31_K/
            /* 0078 */  0x46, 0x32, 0x2A, 0x3D, 0x41, 0x24, 0x53, 0x52,  // F2*=A$SR
            /* 0080 */  0x35, 0x56, 0x49, 0x53, 0x5B, 0x36, 0x4A, 0x23,  // 5VIS[6J#
            /* 0088 */  0x24, 0x3F, 0x46, 0x25, 0x45, 0x20, 0x2D, 0x20,  // $?F%E - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G202, Buffer (0xD5)
        {
            /* 0000 */  0xA9, 0xE0, 0x12, 0x58, 0xA1, 0xF4, 0x7A, 0x2D,  // ...X..z-
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x37, 0x32, 0x38, 0x35, 0x20,  // 0357285 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x51, 0x5B, 0x3C,  //    - Q[<
            /* 0068 */  0x45, 0x44, 0x50, 0x4E, 0x28, 0x39, 0x21, 0x46,  // EDPN(9!F
            /* 0070 */  0x4F, 0x2B, 0x24, 0x37, 0x35, 0x5B, 0x47, 0x23,  // O+$75[G#
            /* 0078 */  0x3B, 0x4F, 0x26, 0x31, 0x5D, 0x20, 0x2F, 0x2E,  // ;O&1] /.
            /* 0080 */  0x31, 0x52, 0x55, 0x50, 0x23, 0x32, 0x4E, 0x3F,  // 1RUP#2N?
            /* 0088 */  0x38, 0x34, 0x43, 0x59, 0x3E, 0x20, 0x2D, 0x20,  // 84CY> - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G203, Buffer (0xD5)
        {
            /* 0000 */  0x1C, 0xA7, 0x64, 0x6E, 0x9F, 0xE0, 0x87, 0x6A,  // ..dn...j
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x37, 0x32, 0x37, 0x33, 0x20,  // 0357273 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5E, 0x57, 0x46,  //    - ^WF
            /* 0068 */  0x5B, 0x43, 0x48, 0x47, 0x26, 0x4D, 0x35, 0x55,  // [CHG&M5U
            /* 0070 */  0x51, 0x3C, 0x34, 0x59, 0x46, 0x26, 0x53, 0x56,  // Q<4YF&SV
            /* 0078 */  0x2D, 0x56, 0x4E, 0x5E, 0x23, 0x44, 0x33, 0x4C,  // -VN^#D3L
            /* 0080 */  0x52, 0x33, 0x35, 0x31, 0x44, 0x55, 0x57, 0x5A,  // R351DUWZ
            /* 0088 */  0x57, 0x2E, 0x3E, 0x46, 0x22, 0x20, 0x2D, 0x20,  // W.>F" - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G204, Buffer (0xD5)
        {
            /* 0000 */  0x87, 0xBC, 0xC6, 0xFB, 0xC7, 0xB3, 0x90, 0xC7,  // ........
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x34, 0x39, 0x20,  // 0356349 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x51, 0x5B, 0x3C,  //    - Q[<
            /* 0068 */  0x45, 0x44, 0x50, 0x4E, 0x28, 0x39, 0x21, 0x46,  // EDPN(9!F
            /* 0070 */  0x4F, 0x2B, 0x24, 0x37, 0x34, 0x5B, 0x47, 0x23,  // O+$74[G#
            /* 0078 */  0x3B, 0x4F, 0x26, 0x31, 0x5D, 0x20, 0x2F, 0x2E,  // ;O&1] /.
            /* 0080 */  0x31, 0x52, 0x55, 0x50, 0x22, 0x32, 0x4E, 0x3F,  // 1RUP"2N?
            /* 0088 */  0x38, 0x37, 0x40, 0x25, 0x38, 0x20, 0x2D, 0x20,  // 87@%8 - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G205, Buffer (0xD5)
        {
            /* 0000 */  0x15, 0xF3, 0x27, 0x91, 0x66, 0x56, 0xEB, 0x91,  // ..'.fV..
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x38, 0x38, 0x36, 0x30, 0x32, 0x20,  // 0388602 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5E, 0x57, 0x46,  //    - ^WF
            /* 0068 */  0x5B, 0x43, 0x48, 0x47, 0x26, 0x4D, 0x35, 0x55,  // [CHG&M5U
            /* 0070 */  0x51, 0x3C, 0x34, 0x59, 0x47, 0x26, 0x53, 0x56,  // Q<4YG&SV
            /* 0078 */  0x2D, 0x56, 0x4E, 0x5E, 0x23, 0x44, 0x33, 0x4C,  // -VN^#D3L
            /* 0080 */  0x52, 0x33, 0x35, 0x3E, 0x31, 0x51, 0x25, 0x59,  // R35>1Q%Y
            /* 0088 */  0x51, 0x2F, 0x3F, 0x4B, 0x24, 0x20, 0x2D, 0x20,  // Q/?K$ - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G206, Buffer (0xD5)
        {
            /* 0000 */  0x6A, 0x0F, 0x1A, 0x43, 0x45, 0x32, 0x87, 0xD1,  // j..CE2..
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x37, 0x38, 0x20,  // 0356378 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x53, 0x5D, 0x3E,  //    - S]>
            /* 0068 */  0x43, 0x4A, 0x52, 0x4C, 0x2A, 0x3B, 0x23, 0x44,  // CJRL*;#D
            /* 0070 */  0x41, 0x2D, 0x26, 0x35, 0x32, 0x5D, 0x49, 0x2D,  // A-&52]I-
            /* 0078 */  0x44, 0x30, 0x24, 0x33, 0x5F, 0x22, 0x51, 0x2C,  // D0$3_"Q,
            /* 0080 */  0x33, 0x54, 0x57, 0x5E, 0x20, 0x34, 0x4C, 0x21,  // 3TW^ 4L!
            /* 0088 */  0x26, 0x39, 0x45, 0x27, 0x3C, 0x20, 0x2D, 0x20,  // &9E'< - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G207, Buffer (0xD5)
        {
            /* 0000 */  0x72, 0x82, 0x57, 0xF7, 0x94, 0x8D, 0x74, 0xE2,  // r.W...t.
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x37, 0x30, 0x20,  // 0356370 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5B, 0x54, 0x43,  //    - [TC
            /* 0068 */  0x5C, 0x5E, 0x4F, 0x42, 0x3B, 0x48, 0x32, 0x56,  // \^OB;H2V
            /* 0070 */  0x5E, 0x39, 0x31, 0x5C, 0x5A, 0x25, 0x50, 0x4B,  // ^91\Z%PK
            /* 0078 */  0x20, 0x55, 0x4B, 0x5D, 0x3E, 0x43, 0x30, 0x49,  //  UK]>C0I
            /* 0080 */  0x5F, 0x30, 0x32, 0x34, 0x58, 0x48, 0x54, 0x55,  // _024XHTU
            /* 0088 */  0x54, 0x2B, 0x3D, 0x2D, 0x3A, 0x20, 0x2D, 0x20,  // T+=-: - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G208, Buffer (0xD5)
        {
            /* 0000 */  0x82, 0x40, 0x94, 0xA2, 0x47, 0x11, 0x6E, 0xD8,  // .@..G.n.
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x35, 0x37, 0x20,  // 0356357 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x50, 0x5A, 0x3B,  //    - PZ;
            /* 0068 */  0x44, 0x45, 0x51, 0x4F, 0x2F, 0x36, 0x20, 0x41,  // DEQO/6 A
            /* 0070 */  0x4E, 0x2A, 0x23, 0x49, 0x35, 0x58, 0x46, 0x22,  // N*#I5XF"
            /* 0078 */  0x38, 0x4C, 0x21, 0x36, 0x5A, 0x21, 0x2E, 0x29,  // 8L!6Z!.)
            /* 0080 */  0x30, 0x51, 0x54, 0x51, 0x23, 0x33, 0x42, 0x3E,  // 0QTQ#3B>
            /* 0088 */  0x49, 0x34, 0x45, 0x28, 0x43, 0x20, 0x2D, 0x20,  // I4E(C - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G20A, Buffer (0xD5)
        {
            /* 0000 */  0x0D, 0x19, 0x18, 0x75, 0x00, 0xE6, 0xF9, 0xD3,  // ...u....
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x39, 0x36, 0x39, 0x30, 0x36, 0x20,  // 0396906 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x54, 0x5E, 0x3F,  //    - T^?
            /* 0068 */  0x40, 0x49, 0x5D, 0x53, 0x2B, 0x3A, 0x24, 0x45,  // @I]S+:$E
            /* 0070 */  0x42, 0x2E, 0x27, 0x34, 0x31, 0x5C, 0x4A, 0x2E,  // B.'41\J.
            /* 0078 */  0x47, 0x33, 0x25, 0x32, 0x5E, 0x25, 0x52, 0x2D,  // G3%2^%R-
            /* 0080 */  0x34, 0x55, 0x48, 0x5D, 0x2F, 0x37, 0x4D, 0x22,  // 4UH]/7M"
            /* 0088 */  0x27, 0x38, 0x43, 0x26, 0x36, 0x20, 0x2D, 0x20,  // '8C&6 - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G20B, Buffer (0xD5)
        {
            /* 0000 */  0xEB, 0xFE, 0xDC, 0xBC, 0x15, 0x6A, 0xDB, 0x06,  // .....j..
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x39, 0x36, 0x39, 0x30, 0x38, 0x20,  // 0396908 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x56, 0x40, 0x31,  //    - V@1
            /* 0068 */  0x4E, 0x4F, 0x5F, 0x51, 0x55, 0x3C, 0x26, 0x4B,  // NO_QU<&K
            /* 0070 */  0x44, 0x50, 0x59, 0x32, 0x3F, 0x5E, 0x4C, 0x28,  // DPY2?^L(
            /* 0078 */  0x41, 0x35, 0x2B, 0x3C, 0x40, 0x27, 0x54, 0x53,  // A5+<@'TS
            /* 0080 */  0x36, 0x57, 0x4A, 0x5B, 0x2D, 0x39, 0x4B, 0x24,  // 6WJ[-9K$
            /* 0088 */  0x25, 0x3A, 0x4D, 0x58, 0x34, 0x20, 0x2D, 0x20,  // %:MX4 - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G209, Buffer (0xD5)
        {
            /* 0000 */  0x9B, 0x68, 0x9F, 0xD7, 0x8A, 0x44, 0x8E, 0x2A,  // .h...D.*
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x37, 0x32, 0x36, 0x36, 0x20,  // 0357266 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x50, 0x5A, 0x3B,  //    - PZ;
            /* 0068 */  0x44, 0x45, 0x51, 0x4F, 0x2F, 0x36, 0x20, 0x41,  // DEQO/6 A
            /* 0070 */  0x4E, 0x2A, 0x23, 0x49, 0x34, 0x58, 0x46, 0x22,  // N*#I4XF"
            /* 0078 */  0x38, 0x4C, 0x21, 0x36, 0x5A, 0x21, 0x2E, 0x29,  // 8L!6Z!.)
            /* 0080 */  0x30, 0x51, 0x54, 0x51, 0x22, 0x33, 0x41, 0x3E,  // 0QTQ"3A>
            /* 0088 */  0x3B, 0x33, 0x42, 0x5E, 0x3F, 0x20, 0x2D, 0x20,  // ;3B^? - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G301, Buffer (0xD5)
        {
            /* 0000 */  0xFC, 0xA4, 0xEE, 0xEF, 0x9D, 0xF4, 0x61, 0x9F,  // ......a.
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x37, 0x32, 0x36, 0x34, 0x20,  // 0357264 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5E, 0x57, 0x46,  //    - ^WF
            /* 0068 */  0x5B, 0x43, 0x48, 0x47, 0x26, 0x4D, 0x35, 0x55,  // [CHG&M5U
            /* 0070 */  0x51, 0x3C, 0x34, 0x59, 0x46, 0x26, 0x53, 0x56,  // Q<4YF&SV
            /* 0078 */  0x2D, 0x56, 0x4E, 0x5E, 0x22, 0x44, 0x33, 0x4C,  // -VN^"D3L
            /* 0080 */  0x52, 0x33, 0x35, 0x31, 0x44, 0x51, 0x25, 0x59,  // R351DQ%Y
            /* 0088 */  0x51, 0x28, 0x3B, 0x37, 0x56, 0x20, 0x2D, 0x20,  // Q(;7V - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G302, Buffer (0xD5)
        {
            /* 0000 */  0x95, 0xAF, 0x5A, 0x70, 0x55, 0x89, 0x59, 0x33,  // ..ZpU.Y3
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x38, 0x38, 0x35, 0x39, 0x30, 0x20,  // 0388590 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x54, 0x5E, 0x3F,  //    - T^?
            /* 0068 */  0x40, 0x49, 0x5D, 0x53, 0x2B, 0x3A, 0x24, 0x45,  // @I]S+:$E
            /* 0070 */  0x42, 0x2E, 0x27, 0x34, 0x30, 0x5C, 0x4A, 0x2E,  // B.'40\J.
            /* 0078 */  0x47, 0x33, 0x25, 0x32, 0x5F, 0x25, 0x52, 0x2D,  // G3%2_%R-
            /* 0080 */  0x34, 0x55, 0x48, 0x52, 0x5A, 0x37, 0x4D, 0x22,  // 4UHRZ7M"
            /* 0088 */  0x27, 0x3C, 0x47, 0x5A, 0x44, 0x20, 0x2D, 0x20,  // '<GZD - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G303, Buffer (0xD5)
        {
            /* 0000 */  0xB3, 0x02, 0x14, 0xAA, 0xF6, 0x29, 0x4D, 0xCF,  // .....)M.
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x37, 0x32, 0x38, 0x36, 0x20,  // 0357286 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x52, 0x5C, 0x3D,  //    - R\=
            /* 0068 */  0x42, 0x4B, 0x53, 0x4D, 0x29, 0x38, 0x22, 0x47,  // BKSM)8"G
            /* 0070 */  0x40, 0x2C, 0x25, 0x36, 0x32, 0x5A, 0x48, 0x2C,  // @,%62ZH,
            /* 0078 */  0x45, 0x31, 0x27, 0x30, 0x5D, 0x23, 0x50, 0x2F,  // E1'0]#P/
            /* 0080 */  0x32, 0x53, 0x56, 0x5F, 0x20, 0x35, 0x4F, 0x20,  // 2SV_ 5O 
            /* 0088 */  0x39, 0x35, 0x44, 0x58, 0x3F, 0x20, 0x2D, 0x20,  // 95DX? - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G304, Buffer (0xD5)
        {
            /* 0000 */  0xCA, 0xF3, 0x8F, 0x6C, 0x80, 0xEB, 0x8B, 0x80,  // ...l....
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x37, 0x32, 0x37, 0x34, 0x20,  // 0357274 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5F, 0x58, 0x38,  //    - _X8
            /* 0068 */  0x58, 0x42, 0x4B, 0x46, 0x27, 0x4C, 0x36, 0x5A,  // XBKF'L6Z
            /* 0070 */  0x52, 0x3D, 0x35, 0x58, 0x47, 0x29, 0x54, 0x57,  // R=5XG)TW
            /* 0078 */  0x2C, 0x59, 0x4F, 0x59, 0x23, 0x47, 0x34, 0x32,  // ,YOY#G42
            /* 0080 */  0x53, 0x34, 0x36, 0x30, 0x45, 0x54, 0x50, 0x59,  // S460ETPY
            /* 0088 */  0x58, 0x2F, 0x39, 0x47, 0x23, 0x20, 0x2D, 0x20,  // X/9G# - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G305, Buffer (0xD5)
        {
            /* 0000 */  0x9C, 0x3B, 0xC2, 0x83, 0xB9, 0xBE, 0x1B, 0x06,  // .;......
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x34, 0x38, 0x20,  // 0356348 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x50, 0x5A, 0x3B,  //    - PZ;
            /* 0068 */  0x44, 0x45, 0x51, 0x4F, 0x2F, 0x36, 0x20, 0x41,  // DEQO/6 A
            /* 0070 */  0x4E, 0x2A, 0x23, 0x49, 0x35, 0x58, 0x46, 0x22,  // N*#I5XF"
            /* 0078 */  0x38, 0x4C, 0x21, 0x36, 0x5B, 0x21, 0x2E, 0x29,  // 8L!6[!.)
            /* 0080 */  0x30, 0x51, 0x54, 0x51, 0x23, 0x33, 0x41, 0x3E,  // 0QTQ#3A>
            /* 0088 */  0x3B, 0x34, 0x41, 0x22, 0x3F, 0x20, 0x2D, 0x20,  // ;4A"? - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G306, Buffer (0xD5)
        {
            /* 0000 */  0x70, 0x24, 0xBC, 0xC0, 0x45, 0xA3, 0xBC, 0x64,  // p$..E..d
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x38, 0x38, 0x36, 0x30, 0x30, 0x20,  // 0388600 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5C, 0x55, 0x44,  //    - \UD
            /* 0068 */  0x5D, 0x5D, 0x4E, 0x41, 0x24, 0x4B, 0x33, 0x57,  // ]]NA$K3W
            /* 0070 */  0x5F, 0x3A, 0x32, 0x5B, 0x59, 0x24, 0x51, 0x54,  // _:2[Y$QT
            /* 0078 */  0x23, 0x54, 0x48, 0x5C, 0x20, 0x42, 0x31, 0x4E,  // #TH\ B1N
            /* 0080 */  0x50, 0x31, 0x33, 0x3C, 0x33, 0x4F, 0x27, 0x57,  // P13<3O'W
            /* 0088 */  0x53, 0x2D, 0x3D, 0x49, 0x26, 0x20, 0x2D, 0x20,  // S-=I& - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G307, Buffer (0xD5)
        {
            /* 0000 */  0xF1, 0x4E, 0xBC, 0x7B, 0xE8, 0x1A, 0x50, 0x2F,  // .N.{..P/
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x37, 0x39, 0x20,  // 0356379 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x54, 0x5E, 0x3F,  //    - T^?
            /* 0068 */  0x40, 0x49, 0x5D, 0x53, 0x2B, 0x3A, 0x24, 0x45,  // @I]S+:$E
            /* 0070 */  0x42, 0x2E, 0x27, 0x34, 0x31, 0x5C, 0x4A, 0x2E,  // B.'41\J.
            /* 0078 */  0x47, 0x33, 0x25, 0x32, 0x5F, 0x25, 0x52, 0x2D,  // G3%2_%R-
            /* 0080 */  0x34, 0x55, 0x48, 0x5D, 0x2F, 0x37, 0x4D, 0x22,  // 4UH]/7M"
            /* 0088 */  0x27, 0x38, 0x46, 0x26, 0x42, 0x20, 0x2D, 0x20,  // '8F&B - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G308, Buffer (0xD5)
        {
            /* 0000 */  0xC9, 0xB4, 0x86, 0x71, 0x0E, 0xF6, 0xFD, 0x5C,  // ...q...\
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x36, 0x38, 0x20,  // 0356368 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x52, 0x5C, 0x3D,  //    - R\=
            /* 0068 */  0x42, 0x4B, 0x53, 0x4D, 0x29, 0x38, 0x22, 0x47,  // BKSM)8"G
            /* 0070 */  0x40, 0x2C, 0x25, 0x36, 0x33, 0x5A, 0x48, 0x2C,  // @,%63ZH,
            /* 0078 */  0x45, 0x31, 0x27, 0x30, 0x5D, 0x23, 0x50, 0x2F,  // E1'0]#P/
            /* 0080 */  0x32, 0x53, 0x56, 0x5F, 0x21, 0x31, 0x3D, 0x23,  // 2SV_!1=#
            /* 0088 */  0x3F, 0x37, 0x41, 0x5F, 0x48, 0x20, 0x2D, 0x20,  // ?7A_H - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G309, Buffer (0xD5)
        {
            /* 0000 */  0x83, 0xC3, 0x35, 0x49, 0xF4, 0x95, 0x7A, 0x4F,  // ..5I..zO
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x35, 0x36, 0x33, 0x36, 0x32, 0x20,  // 0356362 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5C, 0x55, 0x44,  //    - \UD
            /* 0068 */  0x5D, 0x5D, 0x4E, 0x41, 0x24, 0x4B, 0x33, 0x57,  // ]]NA$K3W
            /* 0070 */  0x5F, 0x3A, 0x32, 0x5B, 0x59, 0x24, 0x51, 0x54,  // _:2[Y$QT
            /* 0078 */  0x23, 0x54, 0x48, 0x5C, 0x20, 0x42, 0x31, 0x4E,  // #TH\ B1N
            /* 0080 */  0x50, 0x31, 0x33, 0x33, 0x47, 0x4F, 0x24, 0x57,  // P133GO$W
            /* 0088 */  0x21, 0x2D, 0x3E, 0x43, 0x28, 0x20, 0x2D, 0x20,  // !->C( - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G30A, Buffer (0xD5)
        {
            /* 0000 */  0x8D, 0xB7, 0x1A, 0x98, 0x14, 0x9E, 0xEF, 0xB9,  // ........
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x33, 0x39, 0x36, 0x39, 0x30, 0x37, 0x20,  // 0396907 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x55, 0x5F, 0x30,  //    - U_0
            /* 0068 */  0x41, 0x48, 0x5C, 0x52, 0x54, 0x3D, 0x25, 0x4A,  // AH\RT=%J
            /* 0070 */  0x43, 0x2F, 0x58, 0x33, 0x30, 0x5F, 0x4B, 0x2F,  // C/X30_K/
            /* 0078 */  0x46, 0x32, 0x2A, 0x3D, 0x40, 0x24, 0x53, 0x52,  // F2*=@$SR
            /* 0080 */  0x35, 0x56, 0x49, 0x5C, 0x2E, 0x36, 0x4A, 0x23,  // 5VI\.6J#
            /* 0088 */  0x24, 0x3B, 0x42, 0x59, 0x37, 0x20, 0x2D, 0x20,  // $;BY7 - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G30B, Buffer (0xD5)
        {
            /* 0000 */  0x56, 0xAB, 0x40, 0xCE, 0x96, 0xE8, 0xBF, 0x8E,  // V.@.....
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x34, 0x30, 0x37, 0x32, 0x38, 0x31, 0x20,  // 0407281 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x59, 0x52, 0x41,  //    - YRA
            /* 0068 */  0x5E, 0x58, 0x4D, 0x3D, 0x39, 0x46, 0x30, 0x50,  // ^XM=9F0P
            /* 0070 */  0x5C, 0x37, 0x3F, 0x5E, 0x5D, 0x23, 0x2E, 0x49,  // \7?^]#.I
            /* 0078 */  0x26, 0x53, 0x45, 0x53, 0x3D, 0x41, 0x4D, 0x4B,  // &SES=AMK
            /* 0080 */  0x5D, 0x4D, 0x30, 0x36, 0x5B, 0x4A, 0x58, 0x54,  // ]M06[JXT
            /* 0088 */  0x54, 0x2F, 0x36, 0x28, 0x49, 0x20, 0x2D, 0x20,  // T/6(I - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G30C, Buffer (0xD5)
        {
            /* 0000 */  0xFF, 0x6D, 0x7C, 0xEE, 0x13, 0xBA, 0x09, 0x23,  // .m|....#
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x34, 0x30, 0x37, 0x32, 0x37, 0x37, 0x20,  // 0407277 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5E, 0x57, 0x46,  //    - ^WF
            /* 0068 */  0x5B, 0x43, 0x48, 0x47, 0x26, 0x4D, 0x35, 0x55,  // [CHG&M5U
            /* 0070 */  0x51, 0x3C, 0x34, 0x59, 0x46, 0x26, 0x53, 0x56,  // Q<4YF&SV
            /* 0078 */  0x2D, 0x56, 0x4E, 0x5E, 0x22, 0x44, 0x33, 0x4C,  // -VN^"D3L
            /* 0080 */  0x52, 0x33, 0x35, 0x3E, 0x30, 0x51, 0x25, 0x59,  // R35>0Q%Y
            /* 0088 */  0x51, 0x2B, 0x3A, 0x37, 0x56, 0x20, 0x2D, 0x20,  // Q+:7V - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G30D, /**** Is ResourceTemplate, but EndTag not at buffer end ****/ Buffer (0xD5)
        {
            /* 0000 */  0x79, 0x65, 0x06, 0x90, 0x0E, 0xEE, 0x6C, 0x75,  // ye....lu
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x34, 0x30, 0x37, 0x32, 0x38, 0x33, 0x20,  // 0407283 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5B, 0x54, 0x43,  //    - [TC
            /* 0068 */  0x5C, 0x5E, 0x4F, 0x42, 0x3B, 0x48, 0x32, 0x56,  // \^OB;H2V
            /* 0070 */  0x5E, 0x39, 0x31, 0x5C, 0x5B, 0x25, 0x50, 0x4B,  // ^91\[%PK
            /* 0078 */  0x20, 0x55, 0x4B, 0x5D, 0x3F, 0x43, 0x30, 0x49,  //  UK]?C0I
            /* 0080 */  0x5F, 0x30, 0x32, 0x34, 0x59, 0x4C, 0x26, 0x56,  // _024YL&V
            /* 0088 */  0x52, 0x29, 0x38, 0x2A, 0x4D, 0x20, 0x2D, 0x20,  // R)8*M - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G30E, Buffer (0xD5)
        {
            /* 0000 */  0xE3, 0xD3, 0x5F, 0x9C, 0xC0, 0xCB, 0x31, 0x10,  // .._...1.
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x34, 0x30, 0x37, 0x32, 0x38, 0x36, 0x20,  // 0407286 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5E, 0x57, 0x46,  //    - ^WF
            /* 0068 */  0x5B, 0x43, 0x48, 0x47, 0x26, 0x4D, 0x35, 0x55,  // [CHG&M5U
            /* 0070 */  0x51, 0x3C, 0x34, 0x59, 0x46, 0x26, 0x53, 0x56,  // Q<4YF&SV
            /* 0078 */  0x2D, 0x56, 0x4E, 0x5E, 0x22, 0x44, 0x33, 0x4C,  // -VN^"D3L
            /* 0080 */  0x52, 0x33, 0x35, 0x31, 0x44, 0x55, 0x57, 0x5A,  // R351DUWZ
            /* 0088 */  0x57, 0x2E, 0x3E, 0x46, 0x22, 0x20, 0x2D, 0x20,  // W.>F" - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G30F, Buffer (0xD5)
        {
            /* 0000 */  0xA0, 0xE3, 0x70, 0xC1, 0xF3, 0x7E, 0xA6, 0x2A,  // ..p..~.*
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x34, 0x30, 0x37, 0x32, 0x39, 0x31, 0x20,  // 0407291 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5A, 0x53, 0x42,  //    - ZSB
            /* 0068 */  0x5F, 0x5F, 0x4C, 0x43, 0x3A, 0x49, 0x31, 0x51,  // __LC:I1Q
            /* 0070 */  0x5D, 0x38, 0x30, 0x5D, 0x5B, 0x22, 0x2F, 0x4A,  // ]80]["/J
            /* 0078 */  0x21, 0x52, 0x4A, 0x52, 0x3E, 0x40, 0x4E, 0x48,  // !RJR>@NH
            /* 0080 */  0x5E, 0x4E, 0x31, 0x35, 0x59, 0x4D, 0x59, 0x55,  // ^N15YMYU
            /* 0088 */  0x55, 0x2B, 0x34, 0x57, 0x4A, 0x20, 0x2D, 0x20,  // U+4WJ - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G310, Buffer (0xD5)
        {
            /* 0000 */  0x0C, 0xD0, 0xED, 0xBE, 0xAD, 0xC6, 0x1B, 0xFC,  // ........
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x34, 0x30, 0x37, 0x33, 0x30, 0x34, 0x20,  // 0407304 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x25, 0x2E, 0x4D,  //    - %.M
            /* 0068 */  0x52, 0x54, 0x41, 0x39, 0x3D, 0x42, 0x4B, 0x2C,  // RTA9=BK,
            /* 0070 */  0x58, 0x33, 0x3B, 0x52, 0x50, 0x3F, 0x2A, 0x4D,  // X3;RP?*M
            /* 0078 */  0x5A, 0x2F, 0x41, 0x57, 0x39, 0x5D, 0x49, 0x47,  // Z/AW9]IG
            /* 0080 */  0x59, 0x49, 0x3C, 0x44, 0x2A, 0x46, 0x5C, 0x50,  // YI<D*F\P
            /* 0088 */  0x28, 0x24, 0x36, 0x50, 0x3F, 0x20, 0x2D, 0x20,  // ($6P? - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G311, Buffer (0xD5)
        {
            /* 0000 */  0x31, 0x6B, 0xA5, 0xE5, 0x00, 0x68, 0xAF, 0x22,  // 1k...h."
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x34, 0x30, 0x37, 0x32, 0x38, 0x39, 0x20,  // 0407289 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x51, 0x5B, 0x3C,  //    - Q[<
            /* 0068 */  0x45, 0x44, 0x50, 0x4E, 0x28, 0x39, 0x21, 0x46,  // EDPN(9!F
            /* 0070 */  0x4F, 0x2B, 0x24, 0x37, 0x34, 0x5B, 0x47, 0x23,  // O+$74[G#
            /* 0078 */  0x3B, 0x4F, 0x26, 0x31, 0x5C, 0x20, 0x2F, 0x2E,  // ;O&1\ /.
            /* 0080 */  0x31, 0x52, 0x55, 0x50, 0x22, 0x32, 0x4E, 0x3F,  // 1RUP"2N?
            /* 0088 */  0x38, 0x37, 0x43, 0x25, 0x3E, 0x20, 0x2D, 0x20,  // 87C%> - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G312, Buffer (0xD5)
        {
            /* 0000 */  0x4A, 0xD9, 0xEF, 0x51, 0x31, 0xB2, 0x02, 0xAD,  // J..Q1...
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x34, 0x30, 0x37, 0x32, 0x38, 0x38, 0x20,  // 0407288 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x50, 0x5A, 0x3B,  //    - PZ;
            /* 0068 */  0x44, 0x45, 0x51, 0x4F, 0x2F, 0x36, 0x20, 0x41,  // DEQO/6 A
            /* 0070 */  0x4E, 0x2A, 0x23, 0x49, 0x35, 0x58, 0x46, 0x22,  // N*#I5XF"
            /* 0078 */  0x38, 0x4C, 0x21, 0x36, 0x5B, 0x21, 0x2E, 0x29,  // 8L!6[!.)
            /* 0080 */  0x30, 0x51, 0x54, 0x51, 0x23, 0x33, 0x41, 0x3E,  // 0QTQ#3A>
            /* 0088 */  0x3B, 0x34, 0x47, 0x22, 0x4D, 0x20, 0x2D, 0x20,  // ;4G"M - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G313, Buffer (0xD5)
        {
            /* 0000 */  0x40, 0xE3, 0x52, 0xBF, 0x40, 0xA3, 0xB0, 0xE0,  // @.R.@...
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x34, 0x30, 0x37, 0x33, 0x30, 0x30, 0x20,  // 0407300 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x21, 0x2A, 0x49,  //    - !*I
            /* 0068 */  0x56, 0x50, 0x45, 0x35, 0x31, 0x5E, 0x47, 0x28,  // VPE51^G(
            /* 0070 */  0x24, 0x4E, 0x46, 0x56, 0x54, 0x3B, 0x26, 0x41,  // $NFVT;&A
            /* 0078 */  0x5E, 0x2B, 0x3C, 0x4B, 0x35, 0x59, 0x45, 0x43,  // ^+<K5YEC
            /* 0080 */  0x25, 0x45, 0x38, 0x4F, 0x52, 0x46, 0x22, 0x2F,  // %E8ORF"/
            /* 0088 */  0x2A, 0x21, 0x48, 0x27, 0x30, 0x20, 0x2D, 0x20,  // *!H'0 - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (G314, Buffer (0xD5)
        {
            /* 0000 */  0xFA, 0xC1, 0x3C, 0x1E, 0xEA, 0xF2, 0x13, 0x81,  // ..<.....
            /* 0008 */  0x4B, 0x56, 0xD5, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
            /* 0010 */  0x37, 0x35, 0x31, 0x31, 0x31, 0x35, 0x38, 0x37,  // 75111587
            /* 0018 */  0x39, 0x38, 0x34, 0x39, 0x47, 0x65, 0x6E, 0x75,  // 9849Genu
            /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
            /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
            /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x47, 0x53, 0x79,  // fied GSy
            /* 0038 */  0x6E, 0x63, 0x20, 0x52, 0x65, 0x61, 0x64, 0x79,  // nc Ready
            /* 0040 */  0x20, 0x50, 0x6C, 0x61, 0x74, 0x66, 0x6F, 0x72,  //  Platfor
            /* 0048 */  0x6D, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x44, 0x45,  // m for DE
            /* 0050 */  0x4C, 0x4C, 0x20, 0x41, 0x57, 0x20, 0x32, 0x30,  // LL AW 20
            /* 0058 */  0x30, 0x34, 0x30, 0x37, 0x32, 0x39, 0x36, 0x20,  // 0407296 
            /* 0060 */  0x20, 0x20, 0x20, 0x2D, 0x20, 0x5F, 0x58, 0x38,  //    - _X8
            /* 0068 */  0x58, 0x42, 0x4B, 0x46, 0x27, 0x4C, 0x36, 0x5A,  // XBKF'L6Z
            /* 0070 */  0x52, 0x3D, 0x35, 0x58, 0x46, 0x29, 0x54, 0x57,  // R=5XF)TW
            /* 0078 */  0x2C, 0x59, 0x4F, 0x59, 0x23, 0x47, 0x34, 0x32,  // ,YOY#G42
            /* 0080 */  0x53, 0x34, 0x36, 0x30, 0x44, 0x50, 0x21, 0x5A,  // S460DP!Z
            /* 0088 */  0x2C, 0x2E, 0x3B, 0x40, 0x2B, 0x20, 0x2D, 0x20,  // ,.;@+ - 
            /* 0090 */  0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67, 0x68,  // Copyrigh
            /* 0098 */  0x74, 0x20, 0x32, 0x30, 0x31, 0x34, 0x20, 0x4E,  // t 2014 N
            /* 00A0 */  0x56, 0x49, 0x44, 0x49, 0x41, 0x20, 0x43, 0x6F,  // VIDIA Co
            /* 00A8 */  0x72, 0x70, 0x6F, 0x72, 0x61, 0x74, 0x69, 0x6F,  // rporatio
            /* 00B0 */  0x6E, 0x20, 0x41, 0x6C, 0x6C, 0x20, 0x52, 0x69,  // n All Ri
            /* 00B8 */  0x67, 0x68, 0x74, 0x73, 0x20, 0x52, 0x65, 0x73,  // ghts Res
            /* 00C0 */  0x65, 0x72, 0x76, 0x65, 0x64, 0x2D, 0x35, 0x38,  // erved-58
            /* 00C8 */  0x39, 0x36, 0x38, 0x34, 0x30, 0x32, 0x39, 0x33,  // 96840293
            /* 00D0 */  0x38, 0x35, 0x28, 0x52, 0x29                     // 85(R)
        })
        Name (GSDR, Buffer (0xA5)
        {
            /* 0000 */  0x63, 0x7C, 0x2A, 0x5D, 0x9A, 0x21, 0xA4, 0xD2,  // c|*].!..
            /* 0008 */  0x52, 0x44, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x55, 0x00, 0x00, 0x00, 0x04, 0x00, 0x53, 0x00,  // U.....S.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x51, 0x00, 0x00, 0x00,  // ....Q...
            /* 0048 */  0x06, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..O.....
            /* 0050 */  0x4D, 0x00, 0x00, 0x00, 0x08, 0x00, 0x4B, 0x00,  // M.....K.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xC0, 0x3D, 0x9C,  // ......=.
            /* 0088 */  0x00, 0x20, 0xB4, 0x4A, 0x01, 0x00, 0x00, 0x00,  // . .J....
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
        })
        Name (GDR2, Buffer (0xAA)
        {
            /* 0000 */  0x5A, 0x96, 0x6D, 0xAB, 0xD5, 0xE2, 0x91, 0x33,  // Z.m....3
            /* 0008 */  0x52, 0x44, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x5A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x58, 0x00,  // Z.....X.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, 0x00,  // ....V...
            /* 0048 */  0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..T.....
            /* 0050 */  0x52, 0x00, 0x00, 0x00, 0x08, 0x00, 0x50, 0x00,  // R.....P.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x03, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
            /* 0088 */  0x01, 0xC1, 0x3D, 0x9C, 0xAD, 0x90, 0x00, 0x7F,  // ..=.....
            /* 0090 */  0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00                                       // ..
        })
        Name (GDR3, Buffer (0xA6)
        {
            /* 0000 */  0xE7, 0xB5, 0x34, 0x31, 0x7C, 0x0B, 0x90, 0xB6,  // ..41|...
            /* 0008 */  0x52, 0x44, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x56, 0x00, 0x00, 0x00, 0x04, 0x00, 0x54, 0x00,  // V.....T.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x52, 0x00, 0x00, 0x00,  // ....R...
            /* 0048 */  0x06, 0x00, 0x50, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..P.....
            /* 0050 */  0x4E, 0x00, 0x00, 0x00, 0x08, 0x00, 0x4C, 0x00,  // N.....L.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
            /* 0088 */  0x01, 0xC1, 0x3D, 0x9C, 0xAD, 0x90, 0x00, 0x00,  // ..=.....
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
        })
        Name (GDR4, Buffer (0xA6)
        {
            /* 0000 */  0xFF, 0xA0, 0xF9, 0x48, 0xB3, 0x11, 0x4C, 0x09,  // ...H..L.
            /* 0008 */  0x52, 0x44, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x56, 0x00, 0x00, 0x00, 0x04, 0x00, 0x54, 0x00,  // V.....T.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x52, 0x00, 0x00, 0x00,  // ....R...
            /* 0048 */  0x06, 0x00, 0x50, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..P.....
            /* 0050 */  0x4E, 0x00, 0x00, 0x00, 0x08, 0x00, 0x4C, 0x00,  // N.....L.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
            /* 0088 */  0x01, 0xC1, 0x3D, 0x9C, 0xD6, 0xA9, 0x00, 0x00,  // ..=.....
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
        })
        Name (GDR5, Buffer (0xA6)
        {
            /* 0000 */  0x7E, 0x63, 0x5C, 0x0A, 0xAC, 0xD9, 0x6D, 0xCC,  // ~c\...m.
            /* 0008 */  0x52, 0x44, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x56, 0x00, 0x00, 0x00, 0x04, 0x00, 0x54, 0x00,  // V.....T.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x52, 0x00, 0x00, 0x00,  // ....R...
            /* 0048 */  0x06, 0x00, 0x50, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..P.....
            /* 0050 */  0x4E, 0x00, 0x00, 0x00, 0x08, 0x00, 0x4C, 0x00,  // N.....L.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
            /* 0088 */  0x01, 0xC1, 0x3D, 0x9C, 0x40, 0x9C, 0x00, 0x00,  // ..=.@...
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
        })
        Name (GDR6, Buffer (0xAA)
        {
            /* 0000 */  0x5A, 0x96, 0x6D, 0xAB, 0xD5, 0xE2, 0x91, 0x33,  // Z.m....3
            /* 0008 */  0x52, 0x44, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x5A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x58, 0x00,  // Z.....X.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, 0x00,  // ....V...
            /* 0048 */  0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..T.....
            /* 0050 */  0x52, 0x00, 0x00, 0x00, 0x08, 0x00, 0x50, 0x00,  // R.....P.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x03, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
            /* 0088 */  0x01, 0xC1, 0x3D, 0x9C, 0xAD, 0x90, 0x00, 0x7F,  // ..=.....
            /* 0090 */  0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00                                       // ..
        })
        Name (GDR7, Buffer (0xA6)
        {
            /* 0000 */  0xE7, 0xB5, 0x34, 0x31, 0x7C, 0x0B, 0x90, 0xB6,  // ..41|...
            /* 0008 */  0x52, 0x44, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x56, 0x00, 0x00, 0x00, 0x04, 0x00, 0x54, 0x00,  // V.....T.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x52, 0x00, 0x00, 0x00,  // ....R...
            /* 0048 */  0x06, 0x00, 0x50, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..P.....
            /* 0050 */  0x4E, 0x00, 0x00, 0x00, 0x08, 0x00, 0x4C, 0x00,  // N.....L.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
            /* 0088 */  0x01, 0xC1, 0x3D, 0x9C, 0xAD, 0x90, 0x00, 0x00,  // ..=.....
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
        })
        Name (GDR8, Buffer (0xC8)
        {
            /* 0000 */  0x03, 0xA3, 0xEC, 0x31, 0xD0, 0x19, 0xF1, 0x3C,  // ...1...<
            /* 0008 */  0x52, 0x44, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x63, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..c.....
            /* 0038 */  0x78, 0x00, 0x00, 0x00, 0x04, 0x00, 0x76, 0x00,  // x.....v.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x74, 0x00, 0x00, 0x00,  // ....t...
            /* 0048 */  0x06, 0x00, 0x72, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..r.....
            /* 0050 */  0x70, 0x00, 0x00, 0x00, 0x08, 0x00, 0x6E, 0x00,  // p.....n.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x01, 0x00, 0x00, 0x00, 0xD9,  // ........
            /* 0078 */  0x1C, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0xC4, 0xC1, 0x54, 0x10, 0x30, 0xE4, 0xB5,  // ...T.0..
            /* 0088 */  0x05, 0x00, 0x00, 0xFF, 0xFF, 0x04, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x36, 0x02, 0xE0, 0x41, 0x01, 0x00, 0x00,  // .6..A...
            /* 0098 */  0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00, 0x00, 0x03,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97, 0x01, 0xC1,  // ....|...
            /* 00A8 */  0x3D, 0x9C, 0x30, 0x75, 0x00, 0x7F, 0xAB, 0x00,  // =.0u....
            /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Name (GDR9, Buffer (0xAA)
        {
            /* 0000 */  0x5A, 0x96, 0x6D, 0xAB, 0xD5, 0xE2, 0x91, 0x33,  // Z.m....3
            /* 0008 */  0x52, 0x44, 0xAA, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x5A, 0x00, 0x00, 0x00, 0x04, 0x00, 0x58, 0x00,  // Z.....X.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, 0x00,  // ....V...
            /* 0048 */  0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..T.....
            /* 0050 */  0x52, 0x00, 0x00, 0x00, 0x08, 0x00, 0x50, 0x00,  // R.....P.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x03, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
            /* 0088 */  0x01, 0xC1, 0x3D, 0x9C, 0xAD, 0x90, 0x00, 0x7F,  // ..=.....
            /* 0090 */  0xAB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00                                       // ..
        })
        Name (GDRA, Buffer (0xA5)
        {
            /* 0000 */  0x63, 0x7C, 0x2A, 0x5D, 0x9A, 0x21, 0xA4, 0xD2,  // c|*].!..
            /* 0008 */  0x52, 0x44, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x55, 0x00, 0x00, 0x00, 0x04, 0x00, 0x53, 0x00,  // U.....S.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x51, 0x00, 0x00, 0x00,  // ....Q...
            /* 0048 */  0x06, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..O.....
            /* 0050 */  0x4D, 0x00, 0x00, 0x00, 0x08, 0x00, 0x4B, 0x00,  // M.....K.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xC0, 0x3D, 0x9C,  // ......=.
            /* 0088 */  0x00, 0x20, 0xB4, 0x4A, 0x01, 0x00, 0x00, 0x00,  // . .J....
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
        })
        Name (GDRB, Buffer (0xA6)
        {
            /* 0000 */  0xE7, 0xB5, 0x34, 0x31, 0x7C, 0x0B, 0x90, 0xB6,  // ..41|...
            /* 0008 */  0x52, 0x44, 0xA6, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x56, 0x00, 0x00, 0x00, 0x04, 0x00, 0x54, 0x00,  // V.....T.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x52, 0x00, 0x00, 0x00,  // ....R...
            /* 0048 */  0x06, 0x00, 0x50, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..P.....
            /* 0050 */  0x4E, 0x00, 0x00, 0x00, 0x08, 0x00, 0x4C, 0x00,  // N.....L.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xE0, 0x7C, 0x97,  // ......|.
            /* 0088 */  0x01, 0xC1, 0x3D, 0x9C, 0xAD, 0x90, 0x00, 0x00,  // ..=.....
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
        })
        Name (GDRC, Buffer (0xA5)
        {
            /* 0000 */  0x63, 0x7C, 0x2A, 0x5D, 0x9A, 0x21, 0xA4, 0xD2,  // c|*].!..
            /* 0008 */  0x52, 0x44, 0xA5, 0x00, 0x00, 0x00, 0x00, 0x01,  // RD......
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0xDE, 0x10, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x34, 0x00,  // ......4.
            /* 0028 */  0x00, 0x00, 0x01, 0x00, 0x47, 0x00, 0x00, 0x00,  // ....G...
            /* 0030 */  0x02, 0x00, 0x45, 0x00, 0x00, 0x00, 0x03, 0x00,  // ..E.....
            /* 0038 */  0x55, 0x00, 0x00, 0x00, 0x04, 0x00, 0x53, 0x00,  // U.....S.
            /* 0040 */  0x00, 0x00, 0x05, 0x00, 0x51, 0x00, 0x00, 0x00,  // ....Q...
            /* 0048 */  0x06, 0x00, 0x4F, 0x00, 0x00, 0x00, 0x07, 0x00,  // ..O.....
            /* 0050 */  0x4D, 0x00, 0x00, 0x00, 0x08, 0x00, 0x4B, 0x00,  // M.....K.
            /* 0058 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xD9, 0x1C,  // ........
            /* 0060 */  0x04, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x41, 0x5D, 0xC9, 0x00, 0x01, 0x24, 0x2E, 0x00,  // A]...$..
            /* 0070 */  0x02, 0x00, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0xD9, 0x1C, 0x04, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x02, 0x00, 0x00, 0x00, 0xC0, 0x3D, 0x9C,  // ......=.
            /* 0088 */  0x00, 0x20, 0xB4, 0x4A, 0x01, 0x00, 0x00, 0x00,  // . .J....
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00                     // .....
        })
        Method (CMPB, 2, NotSerialized)
        {
            Local1 = SizeOf (Arg0)
            If ((Local1 != SizeOf (Arg1)))
            {
                Return (Zero)
            }

            Local0 = Zero
            While ((Local0 < Local1))
            {
                If ((DerefOf (Arg0 [Local0]) != DerefOf (Arg1 [Local0]
                    )))
                {
                    Return (Zero)
                }

                Local0++
            }

            Return (One)
        }

        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((\_SB.PCI0.PEG0.VEID == 0x10DE))
            {
                If (\_SB.PCI0.LPCB.EC0.ADPT)
                {
                    \_SB.PCI0.ASPM = Zero
                    \_SB.PCI0.PEG0.NVPM = Zero
                }
                Else
                {
                    \_SB.PCI0.ASPM = 0x03
                    \_SB.PCI0.PEG0.NVPM = 0x03
                }
            }

            Name (SUBF, Zero)
            CreateByteField (Arg0, 0x03, GUID)
            If ((Arg0 == ToUUID ("d4a50b75-65c7-46f7-bfb7-41514cea0244")))
            {
                SUBF = ToInteger (Arg2)
                If ((Arg1 != 0x0102))
                {
                    Return (Buffer (0x04)
                    {
                         0x02, 0x00, 0x00, 0x80                           // ....
                    })
                }

                If ((SUBF == Zero))
                {
                    If (((GSYC == One) && ((\_SB.PCI0.PEG0.DEID == 0x1C60) || ((\_SB.PCI0.PEG0.DEID == 
                        0x1BE1) || (\_SB.PCI0.PEG0.DEID == 0x1BE0)))))
                    {
                        Return (Buffer (0x04)
                        {
                             0x01, 0x00, 0x11, 0x00                           // ....
                        })
                    }
                    Else
                    {
                        Return (Buffer (0x04)
                        {
                             0x01, 0x00, 0x10, 0x00                           // ....
                        })
                    }
                }

                If ((SUBF == 0x10))
                {
                    CreateWordField (Arg3, 0x02, BFF0)
                    If ((BFF0 == 0x564B))
                    {
                        Debug = "== NBCI fun 16 VK =="
                        If ((\_SB.PCI0.PEG0.DEID == 0x1C60))
                        {
                            If ((PNVD == One))
                            {
                                If ((PLSZ == 0x15))
                                {
                                    If ((PROC == One))
                                    {
                                        If ((PLFW == 0x60ED))
                                        {
                                            Return (G10A) /* \_SB_.PCI0.PEG0.PEGP.G10A */
                                        }

                                        If ((PLFW == 0x51ED))
                                        {
                                            Return (G10C) /* \_SB_.PCI0.PEG0.PEGP.G10C */
                                        }

                                        If ((PLFW == 0x20EB))
                                        {
                                            Return (G10D) /* \_SB_.PCI0.PEG0.PEGP.G10D */
                                        }
                                    }
                                    Else
                                    {
                                        If ((PLFW == 0x60ED))
                                        {
                                            Return (G101) /* \_SB_.PCI0.PEG0.PEGP.G101 */
                                        }

                                        If ((PLFW == 0x51ED))
                                        {
                                            Return (G102) /* \_SB_.PCI0.PEG0.PEGP.G102 */
                                        }

                                        If ((PLFW == 0x20EB))
                                        {
                                            Return (G103) /* \_SB_.PCI0.PEG0.PEGP.G103 */
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((PLFW == 0x139D))
                                    {
                                        Return (G105) /* \_SB_.PCI0.PEG0.PEGP.G105 */
                                    }

                                    If ((PLFW == 0x1496))
                                    {
                                        Return (G106) /* \_SB_.PCI0.PEG0.PEGP.G106 */
                                    }

                                    If ((PLFW == 0x109B))
                                    {
                                        Return (G107) /* \_SB_.PCI0.PEG0.PEGP.G107 */
                                    }

                                    If ((PLFW == 0x1596))
                                    {
                                        Return (G10E) /* \_SB_.PCI0.PEG0.PEGP.G10E */
                                    }
                                }
                            }
                            ElseIf ((PNVD == 0x02))
                            {
                                If ((PLSZ == 0x15))
                                {
                                    If ((PROC == One))
                                    {
                                        If ((PLFW == 0x0540))
                                        {
                                            Return (G10B) /* \_SB_.PCI0.PEG0.PEGP.G10B */
                                        }
                                    }
                                    ElseIf ((PLFW == 0x0540))
                                    {
                                        Return (G104) /* \_SB_.PCI0.PEG0.PEGP.G104 */
                                    }
                                }
                                ElseIf ((PLFW == 0x05B5))
                                {
                                    Return (G108) /* \_SB_.PCI0.PEG0.PEGP.G108 */
                                }
                            }
                            ElseIf ((PNVD == 0x03))
                            {
                                If ((PLSZ == 0x15)){}
                                ElseIf ((PLFW == 0x1738))
                                {
                                    Return (G109) /* \_SB_.PCI0.PEG0.PEGP.G109 */
                                }
                            }
                        }
                        ElseIf ((\_SB.PCI0.PEG0.DEID == 0x1BE1))
                        {
                            If ((PNVD == One))
                            {
                                If ((PLSZ == 0x15))
                                {
                                    If ((PLFW == 0x51ED))
                                    {
                                        Return (G201) /* \_SB_.PCI0.PEG0.PEGP.G201 */
                                    }

                                    If ((PLFW == 0x20EB))
                                    {
                                        Return (G202) /* \_SB_.PCI0.PEG0.PEGP.G202 */
                                    }

                                    If ((PLFW == 0x60ED))
                                    {
                                        Return (G209) /* \_SB_.PCI0.PEG0.PEGP.G209 */
                                    }
                                }
                                Else
                                {
                                    If ((PROC == 0x03))
                                    {
                                        If ((PLFW == 0x1596))
                                        {
                                            Return (G20B) /* \_SB_.PCI0.PEG0.PEGP.G20B */
                                        }
                                    }

                                    If ((PROC == 0x02))
                                    {
                                        If ((PLFW == 0x1596))
                                        {
                                            Return (G20A) /* \_SB_.PCI0.PEG0.PEGP.G20A */
                                        }
                                    }

                                    If ((PLFW == 0x139D))
                                    {
                                        Return (G204) /* \_SB_.PCI0.PEG0.PEGP.G204 */
                                    }

                                    If ((PLFW == 0x1496))
                                    {
                                        Return (G205) /* \_SB_.PCI0.PEG0.PEGP.G205 */
                                    }

                                    If ((PLFW == 0x109B))
                                    {
                                        Return (G206) /* \_SB_.PCI0.PEG0.PEGP.G206 */
                                    }
                                }
                            }
                            ElseIf ((PNVD == 0x02))
                            {
                                If ((PLSZ == 0x15))
                                {
                                    If ((PLFW == 0x0540))
                                    {
                                        Return (G203) /* \_SB_.PCI0.PEG0.PEGP.G203 */
                                    }
                                }
                                ElseIf ((PLFW == 0x05B5))
                                {
                                    Return (G207) /* \_SB_.PCI0.PEG0.PEGP.G207 */
                                }
                            }
                            ElseIf ((PNVD == 0x03))
                            {
                                If ((PLSZ == 0x15)){}
                                ElseIf ((PLFW == 0x1738))
                                {
                                    Return (G208) /* \_SB_.PCI0.PEG0.PEGP.G208 */
                                }
                            }
                        }
                        ElseIf ((\_SB.PCI0.PEG0.DEID == 0x1BE0))
                        {
                            If ((PNVD == One))
                            {
                                If ((PLSZ == 0x15))
                                {
                                    If ((PROC == 0x02))
                                    {
                                        If ((PLFW == 0x60ED))
                                        {
                                            Return (G30B) /* \_SB_.PCI0.PEG0.PEGP.G30B */
                                        }

                                        If ((PLFW == 0x51ED))
                                        {
                                            Return (G30C) /* \_SB_.PCI0.PEG0.PEGP.G30C */
                                        }

                                        If ((PLFW == 0x20EB))
                                        {
                                            Return (G30D) /* \_SB_.PCI0.PEG0.PEGP.G30D */
                                        }
                                    }

                                    If ((PROC == 0x03))
                                    {
                                        If ((PLFW == 0x60ED))
                                        {
                                            Return (G301) /* \_SB_.PCI0.PEG0.PEGP.G301 */
                                        }

                                        If ((PLFW == 0x51ED))
                                        {
                                            Return (G302) /* \_SB_.PCI0.PEG0.PEGP.G302 */
                                        }

                                        If ((PLFW == 0x20EB))
                                        {
                                            Return (G303) /* \_SB_.PCI0.PEG0.PEGP.G303 */
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((PROC == 0x02))
                                    {
                                        If ((PLFW == 0x139D))
                                        {
                                            Return (G30F) /* \_SB_.PCI0.PEG0.PEGP.G30F */
                                        }

                                        If ((PLFW == 0x1496))
                                        {
                                            Return (G310) /* \_SB_.PCI0.PEG0.PEGP.G310 */
                                        }

                                        If ((PLFW == 0x109B))
                                        {
                                            Return (G311) /* \_SB_.PCI0.PEG0.PEGP.G311 */
                                        }

                                        If ((PLFW == 0x1596))
                                        {
                                            Return (G312) /* \_SB_.PCI0.PEG0.PEGP.G312 */
                                        }
                                    }

                                    If ((PROC == 0x03))
                                    {
                                        If ((PLFW == 0x139D))
                                        {
                                            Return (G305) /* \_SB_.PCI0.PEG0.PEGP.G305 */
                                        }

                                        If ((PLFW == 0x1496))
                                        {
                                            Return (G306) /* \_SB_.PCI0.PEG0.PEGP.G306 */
                                        }

                                        If ((PLFW == 0x109B))
                                        {
                                            Return (G307) /* \_SB_.PCI0.PEG0.PEGP.G307 */
                                        }

                                        If ((PLFW == 0x1596))
                                        {
                                            Return (G30A) /* \_SB_.PCI0.PEG0.PEGP.G30A */
                                        }
                                    }
                                }
                            }
                            ElseIf ((PNVD == 0x02))
                            {
                                If ((PLSZ == 0x15))
                                {
                                    If ((PROC == 0x02))
                                    {
                                        If ((PLFW == 0x0540))
                                        {
                                            Return (G30E) /* \_SB_.PCI0.PEG0.PEGP.G30E */
                                        }
                                    }

                                    If ((PROC == 0x03))
                                    {
                                        If ((PLFW == 0x0540))
                                        {
                                            Return (G304) /* \_SB_.PCI0.PEG0.PEGP.G304 */
                                        }
                                    }
                                }
                                Else
                                {
                                    If ((PROC == 0x02))
                                    {
                                        If ((PLFW == 0x05B5))
                                        {
                                            Return (G313) /* \_SB_.PCI0.PEG0.PEGP.G313 */
                                        }
                                    }

                                    If ((PROC == 0x03))
                                    {
                                        If ((PLFW == 0x05B5))
                                        {
                                            Return (G308) /* \_SB_.PCI0.PEG0.PEGP.G308 */
                                        }
                                    }
                                }
                            }
                            ElseIf ((PNVD == 0x03))
                            {
                                If ((PLSZ == 0x15)){}
                                Else
                                {
                                    If ((PROC == 0x02))
                                    {
                                        If ((PLFW == 0x1738))
                                        {
                                            Return (G314) /* \_SB_.PCI0.PEG0.PEGP.G314 */
                                        }
                                    }

                                    If ((PROC == 0x03))
                                    {
                                        If ((PLFW == 0x1738))
                                        {
                                            Return (G309) /* \_SB_.PCI0.PEG0.PEGP.G309 */
                                        }
                                    }
                                }
                            }
                        }
                    }

                    If ((BFF0 == 0x4452))
                    {
                        Debug = "== NBCI fun 16 DR =="
                        If ((PNVD == One))
                        {
                            If ((PLFW == 0x60ED))
                            {
                                Return (GDR3) /* \_SB_.PCI0.PEG0.PEGP.GDR3 */
                            }
                            ElseIf ((PLFW == 0x20EB))
                            {
                                Return (GDR4) /* \_SB_.PCI0.PEG0.PEGP.GDR4 */
                            }
                            ElseIf ((PLFW == 0x51ED))
                            {
                                Return (GDRA) /* \_SB_.PCI0.PEG0.PEGP.GDRA */
                            }
                            ElseIf ((PLFW == 0x139D))
                            {
                                Return (GDR5) /* \_SB_.PCI0.PEG0.PEGP.GDR5 */
                            }
                            ElseIf ((PLFW == 0x109B))
                            {
                                Return (GDR6) /* \_SB_.PCI0.PEG0.PEGP.GDR6 */
                            }
                            ElseIf ((PLFW == 0x1596))
                            {
                                Return (GDR7) /* \_SB_.PCI0.PEG0.PEGP.GDR7 */
                            }
                            ElseIf ((PLFW == 0x1496))
                            {
                                Return (GDRC) /* \_SB_.PCI0.PEG0.PEGP.GDRC */
                            }
                            Else
                            {
                                Return (GSDR) /* \_SB_.PCI0.PEG0.PEGP.GSDR */
                            }
                        }
                        ElseIf ((PNVD == 0x02))
                        {
                            If ((PLFW == 0x05B5))
                            {
                                Return (GDR8) /* \_SB_.PCI0.PEG0.PEGP.GDR8 */
                            }
                            ElseIf ((PLFW == 0x0540))
                            {
                                Return (GDR9) /* \_SB_.PCI0.PEG0.PEGP.GDR9 */
                            }
                            Else
                            {
                                Return (GDR2) /* \_SB_.PCI0.PEG0.PEGP.GDR2 */
                            }
                        }
                        ElseIf ((PNVD == 0x03))
                        {
                            Return (GDRB) /* \_SB_.PCI0.PEG0.PEGP.GDRB */
                        }
                    }
                }

                If ((SUBF == 0x14))
                {
                    If ((GSYC == One))
                    {
                        If (((PLFW == 0x51ED) || (PLFW == 0x1496)))
                        {
                            Return (Package (0x0C)
                            {
                                0x8000A450, 
                                0x0203, 
                                Zero, 
                                Zero, 
                                One, 
                                One, 
                                0x03E8, 
                                0x32, 
                                0x03E8, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                        }
                        Else
                        {
                            Return (Package (0x0C)
                            {
                                0x8000A450, 
                                0x0200, 
                                Zero, 
                                Zero, 
                                One, 
                                One, 
                                0x03E8, 
                                0x32, 
                                0x03E8, 
                                Zero, 
                                Zero, 
                                Zero
                            })
                        }
                    }
                    Else
                    {
                        Return (Package (0x0C)
                        {
                            0x8000A450, 
                            0x0200, 
                            Zero, 
                            Zero, 
                            Zero, 
                            One, 
                            0xC8, 
                            0x32, 
                            0x03E8, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                    }
                }

                Return (\_SB.PCI0.PEG0.PEGP.HDSM (Arg0, Arg1, Arg2, Arg3))
            }
            ElseIf (CMPB (Arg0, ToUUID ("a3132d01-8cda-49ba-a52e-bc9d46df6b81")))
            {
                \_SB.PCI0.SHFG = Zero
                \_SB.PCI0.LPCB.EC0.GPSR = One
                Return (\_SB.PCI0.PEG0.PEGP.GPS (Arg0, Arg1, Arg2, Arg3))
            }
            ElseIf (CMPB (Arg0, ToUUID ("cbeca351-067b-4924-9cbd-b46b00b86f34")))
            {
                Return (\_SB.PCI0.PEG0.PEGP.NVJT (Arg0, Arg1, Arg2, Arg3))
            }
            ElseIf ((Arg0 == ToUUID ("4004a400-917d-4cf2-b89c-79b62fd55665")))
            {
                While (One)
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (0x04)
                        {
                             0x01, 0x00, 0x01, 0x01                           // ....
                        })
                    }
                    ElseIf ((Arg2 == 0x18))
                    {
                        Return (Unicode ("0"))
                    }
                    ElseIf ((Arg2 == 0x10))
                    {
                        If ((Arg1 == 0x0300))
                        {
                            Return (MXM3) /* \_SB_.PCI0.PEG0.PEGP.MXM3 */
                        }
                    }

                    Break
                }

                Return (0x80000002)
            }
            ElseIf ((Arg0 == ToUUID ("a486d8f8-0bda-471b-a72b-6042a6b5bee0")))
            {
                Debug = "------- NVOP --------"
                If ((Arg2 == Zero))
                {
                    Return (Buffer (0x04)
                    {
                         0x01, 0x00, 0x00, 0x04                           // ....
                    })
                }
                ElseIf ((Arg2 == 0x1A))
                {
                    Debug = "------- NVOP 0x1A --------"
                    CreateField (Arg3, 0x18, 0x02, OMPR)
                    CreateField (Arg3, Zero, One, FLCH)
                    CreateField (Arg3, One, One, DVSR)
                    CreateField (Arg3, 0x02, One, DVSC)
                    If (ToInteger (FLCH))
                    {
                        \_SB.PCI0.PEG0.PEGP.OPCE = OMPR /* \_SB_.PCI0.PEG0.PEGP._DSM.OMPR */
                    }

                    Local0 = Buffer (0x04)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        }
                    CreateField (Local0, Zero, One, OPEN)
                    CreateField (Local0, 0x03, 0x02, CGCS)
                    CreateField (Local0, 0x06, One, SHPC)
                    CreateField (Local0, 0x08, One, SNSR)
                    CreateField (Local0, 0x18, 0x03, DGPC)
                    CreateField (Local0, 0x1B, 0x02, HDAC)
                    OPEN = One
                    SHPC = One
                    HDAC = 0x02
                    DGPC = One
                    If (ToInteger (DVSC))
                    {
                        If (ToInteger (DVSR))
                        {
                            \_SB.PCI0.PEG0.PEGP.GPRF = One
                        }
                        Else
                        {
                            \_SB.PCI0.PEG0.PEGP.GPRF = Zero
                        }
                    }

                    SNSR = \_SB.PCI0.PEG0.PEGP.GPRF
                    If ((\_SB.PCI0.PEG0.PEGP.SGST () != Zero))
                    {
                        CGCS = 0x03
                    }

                    Return (Local0)
                }

                Return (0x80000002)
            }

            Return (0x80000001)
        }

        Name (CTXT, Zero)
        Method (_ON, 0, Serialized)  // _ON_: Power On
        {
            \_SB.PCI0.PGON (Zero)
            If ((GPRF != One))
            {
                Local0 = CMDR /* \_SB_.PCI0.PEG0.PEGP.CMDR */
                CMDR = Zero
                VGAR = VGAB /* \_SB_.PCI0.PEG0.PEGP.VGAB */
                CMDR = 0x06
                NHDA = Zero
                CMDR = Local0
            }
        }

        Method (_OFF, 0, Serialized)  // _OFF: Power Off
        {
            If ((CTXT == Zero))
            {
                If ((GPRF != One))
                {
                    VGAB = VGAR /* \_SB_.PCI0.PEG0.PEGP.VGAR */
                }

                CTXT = One
            }

            PGOF (Zero)
        }
    }

    Scope (\_SB.PCI0.GFX0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            TLPK [Zero] = DID1 /* External reference */
            TLPK [0x02] = DID2 /* External reference */
            TLPK [0x04] = DID3 /* External reference */
            TLPK [0x06] = DID4 /* External reference */
            TLPK [0x08] = DID5 /* External reference */
            TLPK [0x0A] = DID6 /* External reference */
            TLPK [0x0C] = DID7 /* External reference */
            TLPK [0x0E] = DID2 /* External reference */
            TLPK [0x0F] = DID1 /* External reference */
            TLPK [0x11] = DID2 /* External reference */
            TLPK [0x12] = DID3 /* External reference */
            TLPK [0x14] = DID2 /* External reference */
            TLPK [0x15] = DID4 /* External reference */
            TLPK [0x17] = DID2 /* External reference */
            TLPK [0x18] = DID5 /* External reference */
            TLPK [0x1A] = DID2 /* External reference */
            TLPK [0x1B] = DID6 /* External reference */
            TLPK [0x1D] = DID2 /* External reference */
            TLPK [0x1E] = DID7 /* External reference */
        }

        OperationRegion (NVIG, SystemMemory, NVGA, 0x0400)
        Field (NVIG, DWordAcc, NoLock, Preserve)
        {
            NISG,   128, 
            NISZ,   32, 
            NIVR,   32, 
            GPSS,   32, 
            GACD,   16, 
            GATD,   16, 
            LDES,   8, 
            DKST,   8, 
            DACE,   8, 
            DHPE,   8, 
            DHPS,   8, 
            SGNC,   8, 
            GPPO,   8, 
            USPM,   8, 
            GPSP,   8, 
            TLSN,   8, 
            DOSF,   8, 
            ELCL,   16
        }

        Name (TLPK, Package (0x20)
        {
            Ones, 
            0x2C, 
            Ones, 
            0x2C, 
            Ones, 
            0x2C, 
            Ones, 
            0x2C, 
            Ones, 
            0x2C, 
            Ones, 
            0x2C, 
            Ones, 
            0x2C, 
            Ones, 
            Ones, 
            0x2C, 
            Ones, 
            Ones, 
            0x2C, 
            Ones, 
            Ones, 
            0x2C, 
            Ones, 
            Ones, 
            0x2C, 
            Ones, 
            Ones, 
            0x2C, 
            Ones, 
            Ones, 
            0x2C
        })
        Method (INDL, 0, Serialized)
        {
            NXD1 = Zero
            NXD2 = Zero
            NXD3 = Zero
            NXD4 = Zero
            NXD5 = Zero
            NXD6 = Zero
            NXD7 = Zero
            NXD8 = Zero
        }

        Method (SND1, 1, Serialized)
        {
            If ((Arg0 == DID1))
            {
                NXD1 = One
            }

            If ((Arg0 == DID2))
            {
                NXD2 = One
            }

            If ((Arg0 == DID3))
            {
                NXD3 = One
            }

            If ((Arg0 == DID4))
            {
                NXD4 = One
            }

            If ((Arg0 == DID5))
            {
                NXD5 = One
            }

            If ((Arg0 == DID6))
            {
                NXD6 = One
            }

            If ((Arg0 == DID7))
            {
                NXD7 = One
            }

            If ((Arg0 == DID8))
            {
                NXD8 = One
            }
        }

        Method (SNXD, 1, Serialized)
        {
            INDL ()
            Local0 = One
            Local1 = Zero
            While ((Local0 < Arg0))
            {
                If ((DerefOf (TLPK [Local1]) == 0x2C))
                {
                    Local0++
                }

                Local1++
            }

            SND1 (DerefOf (TLPK [Local1]))
            Local1++
            If ((DerefOf (TLPK [Local1]) != 0x2C))
            {
                SND1 (DerefOf (TLPK [Local1]))
            }
        }

        Method (CTOI, 1, Serialized)
        {
            Switch (ToInteger (Arg0))
            {
                Case (One)
                {
                    Return (One)
                }
                Case (0x02)
                {
                    Return (0x02)
                }
                Case (0x04)
                {
                    Return (0x03)
                }
                Case (0x08)
                {
                    Return (0x04)
                }
                Case (0x10)
                {
                    Return (0x05)
                }
                Case (0x20)
                {
                    Return (0x06)
                }
                Case (0x40)
                {
                    Return (0x07)
                }
                Case (0x03)
                {
                    Return (0x08)
                }
                Case (0x06)
                {
                    Return (0x09)
                }
                Case (0x0A)
                {
                    Return (0x0A)
                }
                Case (0x12)
                {
                    Return (0x0B)
                }
                Case (0x22)
                {
                    Return (0x0C)
                }
                Case (0x42)
                {
                    Return (0x0D)
                }
                Default
                {
                    Return (One)
                }

            }
        }
    }

    Scope (_GPE)
    {
        Method (_L10, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If (((\_SB.GPC0 (0x03010010) & 0x00800000) == 0x00800000))
            {
                \_SB.PCI0.PEG0.PEGP.GC6O ()
            }
        }
    }

    Scope (\_SB.PCI0.PEG0.PEGP)
    {
        Name (GEIF, Zero)
        Name (GSWF, Zero)
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            NHDA = Zero
            \_SB.SHPO (0x03010010, One)
            \_SB.SHPO (0x0301000F, One)
            \_SB.SPC0 (0x03010010, ((\_SB.GPC0 (0x03010010) & 0xFFFFF0FF) | 0x0100))
            \_SB.SPC0 (0x0301000F, ((\_SB.GPC0 (0x0301000F) & 0xFFFFF0FE) | 0x0201))
            GEIF = One
            GSWF = One
            \_SB.CAGS (0x03010010)
        }

        Method (NVJT, 4, Serialized)
        {
            Debug = "------- NV JT DSM --------"
            If ((Arg1 < 0x0100))
            {
                Return (0x80000001)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "JT fun0 JT_FUNC_SUPPORT"
                    Return (Unicode ("{"))
                }
                Case (One)
                {
                    Debug = "JT fun1 JT_FUNC_CAPS"
                    Name (JTCA, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTCA, Zero, One, JTEN)
                    CreateField (JTCA, One, 0x02, SREN)
                    CreateField (JTCA, 0x03, 0x02, PLPR)
                    CreateField (JTCA, 0x05, One, SRPR)
                    CreateField (JTCA, 0x06, 0x02, FBPR)
                    CreateField (JTCA, 0x08, 0x02, GUPR)
                    CreateField (JTCA, 0x0A, One, GC6R)
                    CreateField (JTCA, 0x0B, One, PTRH)
                    CreateField (JTCA, 0x0D, One, MHYB)
                    CreateField (JTCA, 0x0E, One, RPCL)
                    CreateField (JTCA, 0x0F, 0x02, GC6V)
                    CreateField (JTCA, 0x11, One, GEIS)
                    CreateField (JTCA, 0x12, One, GSWS)
                    CreateField (JTCA, 0x14, 0x0C, JTRV)
                    JTEN = One
                    GC6R = Zero
                    RPCL = One
                    FBPR = Zero
                    GUPR = Zero
                    PTRH = Zero
                    MHYB = One
                    SREN = Zero
                    PLPR = 0x02
                    SRPR = One
                    GC6V = One
                    GEIS = GEIF /* \_SB_.PCI0.PEG0.PEGP.GEIF */
                    GSWS = GSWF /* \_SB_.PCI0.PEG0.PEGP.GSWF */
                    JTRV = 0x0103
                    Return (JTCA) /* \_SB_.PCI0.PEG0.PEGP.NVJT.JTCA */
                }
                Case (0x02)
                {
                    Debug = "JT fun2 JT_FUNC_POLICYSELECT"
                    Return (0x80000002)
                }
                Case (0x03)
                {
                    Debug = "JT fun3 JT_FUNC_POWERCONTROL"
                    CreateField (Arg3, Zero, 0x03, GUPC)
                    CreateField (Arg3, 0x04, One, PLPC)
                    CreateField (Arg3, 0x07, One, ECOC)
                    CreateField (Arg3, 0x0E, 0x02, DFGC)
                    CreateField (Arg3, 0x10, 0x03, GPCX)
                    TGPC = Arg3
                    If (((ToInteger (GUPC) != Zero) || (ToInteger (DFGC
                        ) != Zero)))
                    {
                        TDGC = ToInteger (DFGC)
                        DGCX = ToInteger (GPCX)
                    }

                    Name (JTPC, Buffer (0x04)
                    {
                         0x00                                             // .
                    })
                    CreateField (JTPC, Zero, 0x03, GUPS)
                    CreateField (JTPC, 0x03, One, GPWO)
                    CreateField (JTPC, 0x07, One, PLST)
                    If ((ToInteger (DFGC) != Zero))
                    {
                        GPWO = One
                        GUPS = One
                        Return (JTPC) /* \_SB_.PCI0.PEG0.PEGP.NVJT.JTPC */
                    }

                    If ((ToInteger (GUPC) == One))
                    {
                        GC6I ()
                        PLST = One
                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GUPC) == 0x02))
                    {
                        GC6I ()
                        If ((ToInteger (PLPC) == Zero))
                        {
                            PLST = Zero
                        }

                        GUPS = Zero
                    }
                    ElseIf ((ToInteger (GUPC) == 0x03))
                    {
                        GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    ElseIf ((ToInteger (GUPC) == 0x04))
                    {
                        GC6O ()
                        If ((ToInteger (PLPC) != Zero))
                        {
                            PLST = Zero
                        }

                        GPWO = One
                        GUPS = One
                    }
                    Else
                    {
                        Debug = "<<< GETS >>>"
                        If ((\_SB.GGIV (0x03010010) == Zero))
                        {
                            Debug = "<<< GETS() return 0x1 >>>"
                            GPWO = One
                            GUPS = One
                        }
                        Else
                        {
                            Debug = "<<< GETS() return 0x3 >>>"
                            GPWO = Zero
                            GUPS = 0x03
                        }
                    }

                    Return (JTPC) /* \_SB_.PCI0.PEG0.PEGP.NVJT.JTPC */
                }
                Case (0x04)
                {
                    Debug = "JT fun4 JT_FUNC_PLATPOLICY"
                    CreateField (Arg3, 0x02, One, PAUD)
                    CreateField (Arg3, 0x03, One, PADM)
                    Local0 = Zero
                    If ((ToInteger (PADM) == One))
                    {
                        If ((ToInteger (PAUD) == Zero))
                        {
                            NVAF = Zero
                        }
                        Else
                        {
                            NVAF = One
                        }
                    }

                    Local0 = (\_SB.PCI0.PEG0.PEGP.NHDA << 0x02)
                    Return (Local0)
                }
                Case (0x05)
                {
                    Debug = "JT fun5 JT_FUNC_DISPLAYSTATUS"
                    Local0 = Zero
                    Local0 |= 0x00100010
                    Return (Local0)
                }
                Case (0x06)
                {
                    Return (Package (0x20)
                    {
                        0x0110, 
                        0x2C, 
                        0x80007340, 
                        0x2C, 
                        0x80006350, 
                        0x2C, 
                        0x80007350, 
                        0x2C, 
                        0x80006320, 
                        0x2C, 
                        0x80007320, 
                        0x2C, 
                        0x80000100, 
                        0x2C, 
                        0x0110, 
                        0x80007340, 
                        0x2C, 
                        0x0110, 
                        0x80007340, 
                        0x2B, 
                        0x0110, 
                        0x80006350, 
                        0x2C, 
                        0x0110, 
                        0x80006350, 
                        0x2B, 
                        0x0110, 
                        0x80006320, 
                        0x2C, 
                        0x0110, 
                        0x80006320, 
                        0x2B
                    })
                }

            }

            Return (0x80000002)
        }

        Mutex (LG6O, 0x00)
        Method (GC6I, 0, Serialized)
        {
            Debug = "<<< GC6I >>>"
            Acquire (LG6O, 0xFFFF)
            \_SB.PCI0.PEG0.PEGP.LTRE = \_SB.PCI0.PEG0.LREN
            \_SB.PCI0.P0LD = One
            \_SB.PCI0.P0RM = One
            \_SB.PCI0.P0AP = 0x03
            While ((\_SB.GGIV (0x03010010) != One))
            {
                Stall (0x32)
            }

            If ((GSWF == One))
            {
                \_SB.SPC0 (0x03010010, ((\_SB.GPC0 (0x03010010) & 0xF977FFFF) | 0x02880000))
                \_SB.SHPO (0x03010010, Zero)
                \_SB.CAGS (0x03010010)
                Stall (0x64)
            }

            SSMP = 0xB6
            Release (LG6O)
        }

        Method (GC6O, 0, Serialized)
        {
            Debug = "<<< GC6O >>>"
            Acquire (LG6O, 0xFFFF)
            SSMP = 0xB7
            CreateField (TGPC, 0x13, One, EGEI)
            If ((GSWF == One))
            {
                If (((\_SB.GPC0 (0x03010010) & 0x00080000) == 0x00080000))
                {
                    \_SB.SHPO (0x03010010, One)
                    \_SB.SPC0 (0x03010010, ((\_SB.GPC0 (0x03010010) & 0xFFF7FFFF) | Zero))
                    If ((\_SB.GGIV (0x03010010) == Zero))
                    {
                        \_SB.SPC0 (0x03010010, ((\_SB.GPC0 (0x03010010) & 0xFF7FFFFF) | Zero))
                        \_SB.CAGS (0x03010010)
                    }
                }
                Else
                {
                    Debug = " -- GC6O -- Not First GC6O after GC6I. Skip"
                    \_SB.SPC0 (0x03010010, ((\_SB.GPC0 (0x03010010) & 0xFF7FFFFF) | Zero))
                    \_SB.CAGS (0x03010010)
                    Release (LG6O)
                    Return (One)
                }
            }

            \_SB.PCI0.P0RM = Zero
            \_SB.PCI0.P0AP = Zero
            \_SB.PCI0.P0LD = Zero
            If ((\_SB.GGIV (0x03010010) == One))
            {
                \_SB.SGOV (0x0301000F, Zero)
                While ((\_SB.GGIV (0x03010010) != Zero))
                {
                    Stall (0x32)
                }

                \_SB.SGOV (0x0301000F, One)
            }

            \_SB.SPC0 (0x03010010, ((\_SB.GPC0 (0x03010010) & 0xFF7FFFFF) | 0x00800000))
            \_SB.CAGS (0x03010010)
            If ((ToInteger (EGEI) == One))
            {
                OperationRegion (PTMP, SystemMemory, (XBAS + 0x00100000), 0x04)
                Field (PTMP, DWordAcc, NoLock, Preserve)
                {
                    TEMP,   8
                }

                Name (PTM1, Zero)
                PTM1 = TEMP /* \_SB_.PCI0.PEG0.PEGP.GC6O.TEMP */
                TEMP = PTM1 /* \_SB_.PCI0.PEG0.PEGP.GC6O.PTM1 */
            }

            While ((\_SB.PCI0.P0LS < 0x03))
            {
                Stall (0x32)
            }

            \_SB.PCI0.PEG0.LREN = \_SB.PCI0.PEG0.PEGP.LTRE /* External reference */
            \_SB.PCI0.PEG0.CEDR = One
            Release (LG6O)
        }
    }

    Scope (\_SB.PCI0.PEG0.PEGP)
    {
        Name (PSAP, Zero)
        Name (GPSP, Buffer (0x24){})
        CreateDWordField (GPSP, Zero, RETN)
        CreateDWordField (GPSP, 0x04, VRV1)
        CreateDWordField (GPSP, 0x08, TGPU)
        CreateDWordField (GPSP, 0x0C, PDTS)
        CreateDWordField (GPSP, 0x10, SFAN)
        CreateDWordField (GPSP, 0x14, SKNT)
        CreateDWordField (GPSP, 0x18, CPUE)
        CreateDWordField (GPSP, 0x1C, TMP1)
        CreateDWordField (GPSP, 0x20, TMP2)
        Name (NLIM, Zero)
        Method (GPS, 4, Serialized)
        {
            Debug = "<<< GPS >>>"
            If ((Arg1 != 0x0100))
            {
                Return (0x80000002)
            }

            Switch (ToInteger (Arg2))
            {
                Case (Zero)
                {
                    Debug = "GPS fun 0"
                    Return (Buffer (0x08)
                    {
                         0x01, 0x00, 0x08, 0x00, 0x0F, 0x04, 0x00, 0x00   // ........
                    })
                }
                Case (0x13)
                {
                    Debug = "GPS fun 19"
                    Return (Arg3)
                }
                Case (0x20)
                {
                    Debug = "GPS fun 32"
                    Name (RET1, Zero)
                    CreateBitField (Arg3, 0x18, NRIT)
                    CreateBitField (Arg3, 0x19, NRIS)
                    If (NRIS)
                    {
                        If (NRIT)
                        {
                            RET1 |= 0x01000000
                        }
                        Else
                        {
                            RET1 &= 0xFEFFFFFF
                        }
                    }

                    RET1 |= 0x40000000
                    NLIM = One
                    If (NLIM)
                    {
                        RET1 |= One
                    }

                    Debug = "== GPS: HWPV =="
                    Debug = \_SB.HWPV /* External reference */
                    If ((\_SB.HWPV & 0x02))
                    {
                        RET1 |= 0x00800000
                    }

                    Return (RET1) /* \_SB_.PCI0.PEG0.PEGP.GPS_.RET1 */
                }
                Case (0x21)
                {
                    Debug = "GPS fun 21"
                    Return (\_SB.PR00._PSS) /* External reference */
                }
                Case (0x22)
                {
                    CreateByteField (Arg3, Zero, PCAP)
                    \_SB.CPPC = PCAP /* \_SB_.PCI0.PEG0.PEGP.GPS_.PCAP */
                    PNOT ()
                    PSAP = PCAP /* \_SB_.PCI0.PEG0.PEGP.GPS_.PCAP */
                    Return (PCAP) /* \_SB_.PCI0.PEG0.PEGP.GPS_.PCAP */
                }
                Case (0x23)
                {
                    Debug = "GPS fun 23"
                    Return (PSAP) /* \_SB_.PCI0.PEG0.PEGP.PSAP */
                }
                Case (0x2A)
                {
                    Debug = "GPS fun 42"
                    CreateByteField (Arg3, Zero, PSH0)
                    CreateByteField (Arg3, One, PSH1)
                    CreateBitField (Arg3, 0x08, GPUT)
                    CreateBitField (Arg3, 0x09, CPUT)
                    CreateBitField (Arg3, 0x0A, FANS)
                    CreateBitField (Arg3, 0x0B, SKIN)
                    CreateBitField (Arg3, 0x0C, ENGR)
                    CreateBitField (Arg3, 0x0D, SEN1)
                    CreateBitField (Arg3, 0x0E, SEN2)
                    VRV1 = 0x00010000
                    Switch (PSH0)
                    {
                        Case (Zero)
                        {
                            If (CPUT)
                            {
                                RETN = 0x0200
                                RETN |= PSH0 /* \_SB_.PCI0.PEG0.PEGP.GPS_.PSH0 */
                                PDTS = \_SB.PCI0.LPCB.EC0.CTMP /* External reference */
                            }

                            Return (GPSP) /* \_SB_.PCI0.PEG0.PEGP.GPSP */
                        }
                        Case (One)
                        {
                            RETN = 0x0300
                            RETN |= PSH0 /* \_SB_.PCI0.PEG0.PEGP.GPS_.PSH0 */
                            PDTS = 0x03E8
                            Return (GPSP) /* \_SB_.PCI0.PEG0.PEGP.GPSP */
                        }
                        Case (0x02)
                        {
                            RETN = 0x0102
                            If ((\THMP == 0x96))
                            {
                                If ((PLSZ == 0x15))
                                {
                                    If (((\_SB.PCI0.PEG0.DEID == 0x1C20) || (\_SB.PCI0.PEG0.DEID == 0x1C60)))
                                    {
                                        TGPU = 0x46
                                    }
                                    ElseIf (((\_SB.PCI0.PEG0.DEID == 0x1BA1) || (\_SB.PCI0.PEG0.DEID == 0x1BE1)))
                                    {
                                        TGPU = 0x4B
                                    }
                                    ElseIf ((\_SB.PCI0.PEG0.DEID == 0x1BE0))
                                    {
                                        TGPU = 0x46
                                    }
                                }
                                ElseIf ((PLSZ == 0x17))
                                {
                                    If (((\_SB.PCI0.PEG0.DEID == 0x1C20) || (\_SB.PCI0.PEG0.DEID == 0x1C60)))
                                    {
                                        TGPU = 0x4B
                                    }
                                    ElseIf (((\_SB.PCI0.PEG0.DEID == 0x1BA1) || (\_SB.PCI0.PEG0.DEID == 0x1BE1)))
                                    {
                                        TGPU = 0x4B
                                    }
                                    ElseIf (((\_SB.PCI0.PEG0.DEID == 0x1BA0) || (\_SB.PCI0.PEG0.DEID == 0x1BE0)))
                                    {
                                        TGPU = 0x50
                                    }
                                }
                            }
                            Else
                            {
                                TGPU = 0x5B
                            }

                            PDTS = Zero
                            SFAN = Zero
                            CPUE = Zero
                            SKNT = Zero
                            TMP1 = Zero
                            TMP2 = Zero
                            Return (GPSP) /* \_SB_.PCI0.PEG0.PEGP.GPSP */
                        }

                    }

                    Return (0x80000002)
                }

            }

            Return (0x80000002)
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (WMI2)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "OPTM")  // _UID: Unique ID
            Name (_WDG, Buffer (0x28)
            {
                /* 0000 */  0xBF, 0x82, 0x49, 0xCA, 0x30, 0xC2, 0x8E, 0x45,  // ..I.0..E
                /* 0008 */  0xB1, 0x2F, 0x6F, 0x16, 0x47, 0x5F, 0x35, 0x1B,  // ./o.G_5.
                /* 0010 */  0x4F, 0x50, 0x01, 0x02, 0xF8, 0xD8, 0x86, 0xA4,  // OP......
                /* 0018 */  0xDA, 0x0B, 0x1B, 0x47, 0xA7, 0x2B, 0x60, 0x42,  // ...G.+`B
                /* 0020 */  0xA6, 0xB5, 0xBE, 0xE0, 0x53, 0x4D, 0x01, 0x00   // ....SM..
            })
            Method (WMOP, 3, NotSerialized)
            {
                If ((Arg1 == One))
                {
                    \_SB.PCI0.PEG0.PEGP._PS0 ()
                    Notify (PEG0, Zero) // Bus Check
                    Return (Zero)
                }

                If ((Arg1 == 0x02))
                {
                    If ((\_SB.PCI0.PEG0.PEGP.DGPS == Zero))
                    {
                        Return (0x10)
                    }
                    Else
                    {
                        Return (0x20)
                    }
                }
            }

            Method (WQSM, 1, NotSerialized)
            {
                Return (ATSM) /* \_SB_.PCI0.WMI2.ATSM */
            }

            Name (ATSM, Buffer (0xE2)
            {
                /* 0000 */  0x52, 0xAA, 0x89, 0xC5, 0x44, 0xCE, 0xC3, 0x3A,  // R...D..:
                /* 0008 */  0x4B, 0x56, 0xE2, 0x00, 0x00, 0x00, 0x01, 0x00,  // KV......
                /* 0010 */  0x32, 0x37, 0x34, 0x35, 0x39, 0x31, 0x32, 0x35,  // 27459125
                /* 0018 */  0x33, 0x36, 0x38, 0x37, 0x47, 0x65, 0x6E, 0x75,  // 3687Genu
                /* 0020 */  0x69, 0x6E, 0x65, 0x20, 0x4E, 0x56, 0x49, 0x44,  // ine NVID
                /* 0028 */  0x49, 0x41, 0x20, 0x43, 0x65, 0x72, 0x74, 0x69,  // IA Certi
                /* 0030 */  0x66, 0x69, 0x65, 0x64, 0x20, 0x4F, 0x70, 0x74,  // fied Opt
                /* 0038 */  0x69, 0x6D, 0x75, 0x73, 0x20, 0x52, 0x65, 0x61,  // imus Rea
                /* 0040 */  0x64, 0x79, 0x20, 0x4D, 0x6F, 0x74, 0x68, 0x65,  // dy Mothe
                /* 0048 */  0x72, 0x62, 0x6F, 0x61, 0x72, 0x64, 0x20, 0x66,  // rboard f
                /* 0050 */  0x6F, 0x72, 0x20, 0x63, 0x6F, 0x6F, 0x6B, 0x69,  // or cooki
                /* 0058 */  0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x75, 0x6C,  // e for ul
                /* 0060 */  0x35, 0x30, 0x20, 0x75, 0x73, 0x69, 0x6E, 0x20,  // 50 usin 
                /* 0068 */  0x2D, 0x20, 0x5E, 0x57, 0x3C, 0x4A, 0x3D, 0x41,  // - ^W<J=A
                /* 0070 */  0x24, 0x4C, 0x3A, 0x4B, 0x38, 0x32, 0x26, 0x51,  // $L:K82&Q
                /* 0078 */  0x48, 0x35, 0x4C, 0x3E, 0x2B, 0x33, 0x52, 0x2B,  // H5L>+3R+
                /* 0080 */  0x54, 0x35, 0x2A, 0x52, 0x29, 0x3A, 0x5B, 0x4C,  // T5*R):[L
                /* 0088 */  0x4A, 0x3E, 0x36, 0x48, 0x22, 0x48, 0x41, 0x50,  // J>6H"HAP
                /* 0090 */  0x47, 0x39, 0x5A, 0x39, 0x5E, 0x3E, 0x44, 0x53,  // G9Z9^>DS
                /* 0098 */  0x54, 0x3C, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70,  // T< - Cop
                /* 00A0 */  0x79, 0x72, 0x69, 0x67, 0x68, 0x74, 0x20, 0x32,  // yright 2
                /* 00A8 */  0x30, 0x30, 0x39, 0x20, 0x4E, 0x56, 0x49, 0x44,  // 009 NVID
                /* 00B0 */  0x49, 0x41, 0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F,  // IA Corpo
                /* 00B8 */  0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x41,  // ration A
                /* 00C0 */  0x6C, 0x6C, 0x20, 0x52, 0x69, 0x67, 0x68, 0x74,  // ll Right
                /* 00C8 */  0x73, 0x20, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76,  // s Reserv
                /* 00D0 */  0x65, 0x64, 0x2D, 0x32, 0x37, 0x34, 0x35, 0x39,  // ed-27459
                /* 00D8 */  0x31, 0x32, 0x35, 0x33, 0x36, 0x38, 0x37, 0x28,  // 1253687(
                /* 00E0 */  0x52, 0x29                                       // R)
            })
        }

        Device (WMI1)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "MXM2")  // _UID: Unique ID
            Name (_WDG, Buffer (0xB4)
            {
                /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                /* 0010 */  0x4D, 0x58, 0x01, 0x02, 0x40, 0x2F, 0x1A, 0x92,  // MX..@/..
                /* 0018 */  0xC4, 0x0D, 0x2D, 0x40, 0xAC, 0x18, 0xB4, 0x84,  // ..-@....
                /* 0020 */  0x44, 0xEF, 0x9E, 0xD2, 0xD0, 0x00, 0x01, 0x08,  // D.......
                /* 0028 */  0x61, 0xD3, 0x2A, 0xC1, 0xA9, 0x9F, 0x74, 0x4C,  // a.*...tL
                /* 0030 */  0x90, 0x1F, 0x95, 0xCB, 0x09, 0x45, 0xCF, 0x3E,  // .....E.>
                /* 0038 */  0xD9, 0x00, 0x01, 0x08, 0x06, 0x80, 0x84, 0x42,  // .......B
                /* 0040 */  0x86, 0x88, 0x0E, 0x49, 0x8C, 0x72, 0x2B, 0xDC,  // ...I.r+.
                /* 0048 */  0xA9, 0x3A, 0x8A, 0x09, 0xDB, 0x00, 0x01, 0x08,  // .:......
                /* 0050 */  0x62, 0xDE, 0x6B, 0xE0, 0x75, 0xEE, 0xF4, 0x48,  // b.k.u..H
                /* 0058 */  0xA5, 0x83, 0xB2, 0x3E, 0x69, 0xAB, 0xF8, 0x91,  // ...>i...
                /* 0060 */  0x80, 0x00, 0x01, 0x08, 0x0F, 0xBD, 0xDE, 0x3A,  // .......:
                /* 0068 */  0x5F, 0x0C, 0xED, 0x46, 0xAB, 0x2E, 0x04, 0x96,  // _..F....
                /* 0070 */  0x2B, 0x4F, 0xDC, 0xBC, 0x81, 0x00, 0x01, 0x08,  // +O......
                /* 0078 */  0x11, 0x93, 0x51, 0x1E, 0x75, 0x3E, 0x08, 0x42,  // ..Q.u>.B
                /* 0080 */  0xB0, 0x5E, 0xEB, 0xE1, 0x7E, 0x3F, 0xF4, 0x1F,  // .^..~?..
                /* 0088 */  0x86, 0x00, 0x01, 0x08, 0x41, 0x53, 0xF8, 0x37,  // ....AS.7
                /* 0090 */  0x18, 0x44, 0x24, 0x4F, 0x85, 0x33, 0x38, 0xFF,  // .D$O.38.
                /* 0098 */  0xC7, 0x29, 0x55, 0x42, 0x87, 0x00, 0x01, 0x08,  // .)UB....
                /* 00A0 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                /* 00A8 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                /* 00B0 */  0x58, 0x4D, 0x01, 0x00                           // XM..
            })
            Method (WMMX, 3, NotSerialized)
            {
                CreateDWordField (Arg2, Zero, FUNC)
                If ((FUNC == 0x534F525F))
                {
                    If ((SizeOf (Arg2) >= 0x08))
                    {
                        CreateDWordField (Arg2, 0x04, ARGS)
                        CreateDWordField (Arg2, 0x08, XARG)
                        Return (\_SB.PCI0.PEG0.PEGP._ROM (ARGS, XARG))
                    }
                }

                If ((FUNC == 0x4D53445F))
                {
                    If ((SizeOf (Arg2) >= 0x1C))
                    {
                        CreateField (Arg2, Zero, 0x80, MUID)
                        CreateDWordField (Arg2, 0x10, REVI)
                        CreateDWordField (Arg2, 0x14, SFNC)
                        CreateField (Arg2, 0xE0, 0x20, XRG0)
                        If (CondRefOf (\_SB.PCI0.GFX0._DSM))
                        {
                            Return (\_SB.PCI0.GFX0._DSM (MUID, REVI, SFNC, XRG0))
                        }
                    }
                }

                Return (Zero)
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "PegSsd", "PegSsdt", 0x00001000)
{
    External (_SB_.CAGS, MethodObj)    // 1 Arguments
    External (_SB_.GGOV, MethodObj)    // 1 Arguments
    External (_SB_.ISME, MethodObj)    // 1 Arguments
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.P80H, UnknownObj)
    External (_SB_.PCI0.PEG0, DeviceObj)
    External (_SB_.PCI0.PEG0.CEDR, IntObj)
    External (_SB_.PCI0.PEG0.LREN, IntObj)
    External (_SB_.PCI0.PEG0.PEGP, DeviceObj)
    External (_SB_.PCI0.PEG1, DeviceObj)
    External (_SB_.PCI0.PEG1.PEGP, DeviceObj)
    External (_SB_.PCI0.PEG2, DeviceObj)
    External (_SB_.PCI0.PEG2.PEGP, DeviceObj)
    External (_SB_.SGOV, MethodObj)    // 2 Arguments
    External (_SB_.SHPO, MethodObj)    // 2 Arguments
    External (AR02, UnknownObj)
    External (AR0A, UnknownObj)
    External (AR0B, UnknownObj)
    External (CPEX, UnknownObj)
    External (DLHR, UnknownObj)
    External (DLPW, UnknownObj)
    External (EBAS, UnknownObj)
    External (ECR1, UnknownObj)
    External (EEC1, UnknownObj)
    External (EEC2, UnknownObj)
    External (EECP, UnknownObj)
    External (GBAS, UnknownObj)
    External (GPRW, MethodObj)    // 2 Arguments
    External (HRA0, UnknownObj)
    External (HRA1, UnknownObj)
    External (HRA2, UnknownObj)
    External (HRE0, UnknownObj)
    External (HRE1, UnknownObj)
    External (HRE2, UnknownObj)
    External (HRG0, UnknownObj)
    External (HRG1, UnknownObj)
    External (HRG2, UnknownObj)
    External (LTRX, UnknownObj)
    External (LTRY, UnknownObj)
    External (LTRZ, UnknownObj)
    External (MFGM, UnknownObj)
    External (OBFX, UnknownObj)
    External (OBFY, UnknownObj)
    External (OBFZ, UnknownObj)
    External (OSYS, UnknownObj)
    External (P0UB, UnknownObj)
    External (P0WK, UnknownObj)
    External (P1GP, UnknownObj)
    External (P1UB, UnknownObj)
    External (P1WK, UnknownObj)
    External (P2GP, UnknownObj)
    External (P2UB, UnknownObj)
    External (P2WK, UnknownObj)
    External (PBGE, UnknownObj)
    External (PCRA, MethodObj)    // 3 Arguments
    External (PCRO, MethodObj)    // 3 Arguments
    External (PCSL, UnknownObj)
    External (PD02, UnknownObj)
    External (PD0A, UnknownObj)
    External (PD0B, UnknownObj)
    External (PICM, UnknownObj)
    External (PWA0, UnknownObj)
    External (PWA1, UnknownObj)
    External (PWA2, UnknownObj)
    External (PWE0, UnknownObj)
    External (PWE1, UnknownObj)
    External (PWE2, UnknownObj)
    External (PWG0, UnknownObj)
    External (PWG1, UnknownObj)
    External (PWG2, UnknownObj)
    External (SBN0, UnknownObj)
    External (SBN1, UnknownObj)
    External (SBN2, UnknownObj)
    External (SGGP, UnknownObj)
    External (SGMD, UnknownObj)
    External (SMSL, UnknownObj)
    External (SNSL, UnknownObj)
    External (XBAS, UnknownObj)

    Scope (\_GPE)
    {
        Method (P0L6, 0, NotSerialized)
        {
            If (\_SB.ISME (P0WK))
            {
                \_SB.SHPO (P0WK, One)
                Notify (\_SB.PCI0.PEG0, 0x02) // Device Wake
                \_SB.CAGS (P0WK)
            }
        }

        Method (P1L6, 0, NotSerialized)
        {
            If (\_SB.ISME (P1WK))
            {
                \_SB.SHPO (P1WK, One)
                Notify (\_SB.PCI0.PEG1, 0x02) // Device Wake
                \_SB.CAGS (P1WK)
            }
        }

        Method (P2L6, 0, NotSerialized)
        {
            If (\_SB.ISME (P2WK))
            {
                \_SB.SHPO (P2WK, One)
                Notify (\_SB.PCI0.PEG2, 0x02) // Device Wake
                \_SB.CAGS (P2WK)
            }
        }
    }

    Scope (\_SB.PCI0.PEG0)
    {
        Name (WKEN, Zero)
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        OperationRegion (DASP, SystemMemory, EBAS, 0x0100)
        Field (DASP, DWordAcc, NoLock, Preserve)
        {
            Offset (0x88), 
            NVPM,   2
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = One
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRS = LTRX /* External reference */
            OBFS = OBFX /* External reference */
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Local0 = Zero
                        If ((Arg1 >= 0x02))
                        {
                            If (LTRS)
                            {
                                Local0 |= 0x40
                            }

                            If (OBFS)
                            {
                                Local0 |= 0x10
                            }
                        }

                        If ((Arg1 >= 0x03))
                        {
                            If (ECR1)
                            {
                                Local0 |= 0x0100
                            }

                            If (ECR1)
                            {
                                Local0 |= 0x0200
                            }
                        }

                        If ((Local0 != Zero))
                        {
                            Local0 |= One
                        }

                        Return (Local0)
                    }
                    Case (0x04)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            If (OBFS)
                            {
                                Return (Buffer (0x10)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                            Else
                            {
                                Return (Buffer (0x10)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            If (LTRS)
                            {
                                LTRV [Zero] = ((SMSL >> 0x0A) & 0x07)
                                LTRV [One] = (SMSL & 0x03FF)
                                LTRV [0x02] = ((SNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (SNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PCI0.PEG0.LTRV */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                    Case (0x08)
                    {
                        If ((ECR1 == One))
                        {
                            If ((Arg1 >= 0x03))
                            {
                                Return (One)
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If ((ECR1 == One))
                        {
                            If ((Arg1 >= 0x03))
                            {
                                Return (Package (0x05)
                                {
                                    0xC350, 
                                    Ones, 
                                    Ones, 
                                    0xC350, 
                                    Ones
                                })
                            }
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            If (Arg1)
            {
                WKEN = Zero
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
            }
            Else
            {
                WKEN = Zero
            }
        }

        Method (P0EW, 0, NotSerialized)
        {
            If (WKEN)
            {
                If ((SGGP != Zero))
                {
                    If ((SGGP == One))
                    {
                        \_SB.SGOV (P0WK, One)
                        \_SB.SHPO (P0WK, Zero)
                    }
                }
            }
        }

        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (0x04)
        }
    }

    Scope (\_SB.PCI0.PEG0.PEGP)
    {
        Name (LTRE, Zero)
        OperationRegion (PCIS, PCI_Config, Zero, 0x0100)
        Field (PCIS, AnyAcc, NoLock, Preserve)
        {
            PVID,   16, 
            PDID,   16
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (\_SB.PCI0.PEG1)
    {
        Name (WKEN, Zero)
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = One
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRS = LTRY /* External reference */
            OBFS = OBFY /* External reference */
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Local0 = Zero
                        If ((Arg1 >= 0x02))
                        {
                            If (LTRS)
                            {
                                Local0 |= 0x40
                            }

                            If (OBFS)
                            {
                                Local0 |= 0x10
                            }
                        }

                        If ((Arg1 >= 0x03))
                        {
                            If (ECR1)
                            {
                                Local0 |= 0x0100
                            }

                            If (ECR1)
                            {
                                Local0 |= 0x0200
                            }
                        }

                        If ((Local0 != Zero))
                        {
                            Local0 |= One
                        }

                        Return (Local0)
                    }
                    Case (0x04)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            If (OBFS)
                            {
                                Return (Buffer (0x10)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                            Else
                            {
                                Return (Buffer (0x10)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            If (LTRS)
                            {
                                LTRV [Zero] = ((SMSL >> 0x0A) & 0x07)
                                LTRV [One] = (SMSL & 0x03FF)
                                LTRV [0x02] = ((SNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (SNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PCI0.PEG1.LTRV */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                    Case (0x08)
                    {
                        If ((ECR1 == One))
                        {
                            If ((Arg1 >= 0x03))
                            {
                                Return (One)
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If ((ECR1 == One))
                        {
                            If ((Arg1 >= 0x03))
                            {
                                Return (Package (0x05)
                                {
                                    0xC350, 
                                    Ones, 
                                    Ones, 
                                    0xC350, 
                                    Ones
                                })
                            }
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            If (Arg1)
            {
                WKEN = Zero
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
            }
            Else
            {
                WKEN = Zero
            }
        }

        Method (P1EW, 0, NotSerialized)
        {
            If (WKEN)
            {
                If ((P1GP != Zero))
                {
                    If ((P1GP == One))
                    {
                        \_SB.SGOV (P1WK, One)
                        \_SB.SHPO (P1WK, Zero)
                    }
                }
            }
        }

        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (0x04)
        }
    }

    Scope (\_SB.PCI0.PEG1.PEGP)
    {
        OperationRegion (PCIS, PCI_Config, Zero, 0x0100)
        Field (PCIS, AnyAcc, NoLock, Preserve)
        {
            PVID,   16, 
            PDID,   16
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (\_SB.PCI0.PEG2)
    {
        Name (WKEN, Zero)
        OperationRegion (PEGR, PCI_Config, 0xC0, 0x30)
        Field (PEGR, DWordAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PSTS,   1, 
            Offset (0x2C), 
            GENG,   1, 
                ,   1, 
            PMEG,   1
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }

        Method (HPME, 0, Serialized)
        {
            PSTS = One
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            LTRS = LTRZ /* External reference */
            OBFS = OBFZ /* External reference */
        }

        Name (LTRV, Package (0x04)
        {
            Zero, 
            Zero, 
            Zero, 
            Zero
        })
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (Zero)
                    {
                        Local0 = Zero
                        If ((Arg1 >= 0x02))
                        {
                            If (LTRS)
                            {
                                Local0 |= 0x40
                            }

                            If (OBFS)
                            {
                                Local0 |= 0x10
                            }
                        }

                        If ((Arg1 >= 0x03))
                        {
                            If (ECR1)
                            {
                                Local0 |= 0x0100
                            }

                            If (ECR1)
                            {
                                Local0 |= 0x0200
                            }
                        }

                        If ((Local0 != Zero))
                        {
                            Local0 |= One
                        }

                        Return (Local0)
                    }
                    Case (0x04)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            If (OBFS)
                            {
                                Return (Buffer (0x10)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                            Else
                            {
                                Return (Buffer (0x10)
                                {
                                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 >= 0x02))
                        {
                            If (LTRS)
                            {
                                LTRV [Zero] = ((SMSL >> 0x0A) & 0x07)
                                LTRV [One] = (SMSL & 0x03FF)
                                LTRV [0x02] = ((SNSL >> 0x0A) & 0x07)
                                LTRV [0x03] = (SNSL & 0x03FF)
                                Return (LTRV) /* \_SB_.PCI0.PEG2.LTRV */
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                    }
                    Case (0x08)
                    {
                        If ((ECR1 == One))
                        {
                            If ((Arg1 >= 0x03))
                            {
                                Return (One)
                            }
                        }
                    }
                    Case (0x09)
                    {
                        If ((ECR1 == One))
                        {
                            If ((Arg1 >= 0x03))
                            {
                                Return (Package (0x05)
                                {
                                    0xC350, 
                                    Ones, 
                                    Ones, 
                                    0xC350, 
                                    Ones
                                })
                            }
                        }
                    }

                }
            }

            Return (Buffer (One)
            {
                 0x00                                             // .
            })
        }

        Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
        {
            If (Arg1)
            {
                WKEN = Zero
            }
            ElseIf ((Arg0 && Arg2))
            {
                WKEN = One
            }
            Else
            {
                WKEN = Zero
            }
        }

        Method (P2EW, 0, NotSerialized)
        {
            If (WKEN)
            {
                If ((P2GP != Zero))
                {
                    If ((P2GP == One))
                    {
                        \_SB.SGOV (P2WK, One)
                        \_SB.SHPO (P2WK, Zero)
                    }
                }
            }
        }

        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            Return (0x04)
        }
    }

    Scope (\_SB.PCI0.PEG2.PEGP)
    {
        OperationRegion (PCIS, PCI_Config, Zero, 0x0100)
        Field (PCIS, AnyAcc, NoLock, Preserve)
        {
            PVID,   16, 
            PDID,   16
        }

        Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
        {
            Return (GPRW (0x69, 0x04))
        }
    }

    Scope (\_SB.PCI0)
    {
        Name (IVID, 0xFFFF)
        Name (PEBA, Zero)
        Name (PION, Zero)
        Name (PIOF, Zero)
        Name (PBUS, Zero)
        Name (PDEV, Zero)
        Name (PFUN, Zero)
        Name (EBUS, Zero)
        Name (EDEV, Zero)
        Name (EFN0, Zero)
        Name (EFN1, One)
        Name (LTRS, Zero)
        Name (OBFS, Zero)
        Name (INDX, Zero)
        Name (DSOF, 0x06)
        Name (CPOF, 0x34)
        Name (SBOF, 0x19)
        Name (ELC0, Zero)
        Name (ECP0, 0xFFFFFFFF)
        Name (H0VI, Zero)
        Name (H0DI, Zero)
        Name (ELC1, Zero)
        Name (ECP1, 0xFFFFFFFF)
        Name (H1VI, Zero)
        Name (H1DI, Zero)
        Name (ELC2, Zero)
        Name (ECP2, 0xFFFFFFFF)
        Name (H2VI, Zero)
        Name (H2DI, Zero)
        Name (TIDX, Zero)
        Name (OTSD, Zero)
        Name (MXPG, 0x03)
        Name (FBDL, Zero)
        Name (CBDL, Zero)
        Name (MBDL, Zero)
        Name (HSTR, Zero)
        Name (LREV, Zero)
        Name (TCNT, Zero)
        Name (LDLY, 0x012C)
        Name (SHFG, Zero)
        OperationRegion (OPG0, SystemMemory, (XBAS + 0x8000), 0x1000)
        Field (OPG0, AnyAcc, NoLock, Preserve)
        {
            P0VI,   16, 
            P0DI,   16, 
            Offset (0x06), 
            DSO0,   16, 
            Offset (0x34), 
            CPO0,   8, 
            Offset (0xB0), 
            ASPM,   2, 
                ,   2, 
            P0LD,   1, 
            Offset (0x11A), 
                ,   1, 
            P0VC,   1, 
            Offset (0x214), 
            Offset (0x216), 
            P0LS,   4, 
            Offset (0x248), 
                ,   7, 
            Q0L2,   1, 
            Q0L0,   1, 
            Offset (0x504), 
            HST0,   32, 
            P0TR,   1, 
            Offset (0x91C), 
                ,   31, 
            BSP1,   1, 
            Offset (0x93C), 
                ,   31, 
            BSP2,   1, 
            Offset (0x95C), 
                ,   31, 
            BSP3,   1, 
            Offset (0x97C), 
                ,   31, 
            BSP4,   1, 
            Offset (0x99C), 
                ,   31, 
            BSP5,   1, 
            Offset (0x9BC), 
                ,   31, 
            BSP6,   1, 
            Offset (0x9DC), 
                ,   31, 
            BSP7,   1, 
            Offset (0x9FC), 
                ,   31, 
            BSP8,   1, 
            Offset (0xC20), 
                ,   4, 
            P0AP,   2, 
            Offset (0xC38), 
                ,   3, 
            P0RM,   1, 
            Offset (0xC74), 
            P0LT,   4, 
            Offset (0xD0C), 
            LRV0,   32
        }

        OperationRegion (PCS0, SystemMemory, (XBAS + (SBN0 << 0x14)), 0xF0)
        Field (PCS0, DWordAcc, Lock, Preserve)
        {
            D0VI,   16, 
            Offset (0x2C), 
            S0VI,   16, 
            S0DI,   16
        }

        OperationRegion (CAP0, SystemMemory, ((XBAS + (SBN0 << 0x14)) + EECP), 0x14)
        Field (CAP0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x0C), 
            LCP0,   32, 
            LCT0,   16
        }

        OperationRegion (OPG1, SystemMemory, (XBAS + 0x9000), 0x1000)
        Field (OPG1, AnyAcc, NoLock, Preserve)
        {
            P1VI,   16, 
            P1DI,   16, 
            Offset (0x06), 
            DSO1,   16, 
            Offset (0x34), 
            CPO1,   8, 
            Offset (0xB0), 
                ,   4, 
            P1LD,   1, 
            Offset (0x11A), 
                ,   1, 
            P1VC,   1, 
            Offset (0x214), 
            Offset (0x216), 
            P1LS,   4, 
            Offset (0x248), 
                ,   7, 
            Q1L2,   1, 
            Q1L0,   1, 
            Offset (0x504), 
            HST1,   32, 
            P1TR,   1, 
            Offset (0xC20), 
                ,   4, 
            P1AP,   2, 
            Offset (0xC38), 
                ,   3, 
            P1RM,   1, 
            Offset (0xC74), 
            P1LT,   4, 
            Offset (0xD0C), 
            LRV1,   32
        }

        OperationRegion (PCS1, SystemMemory, (XBAS + (SBN1 << 0x14)), 0xF0)
        Field (PCS1, DWordAcc, Lock, Preserve)
        {
            D1VI,   16, 
            Offset (0x2C), 
            S1VI,   16, 
            S1DI,   16
        }

        OperationRegion (CAP1, SystemMemory, ((XBAS + (SBN1 << 0x14)) + EEC1), 0x14)
        Field (CAP1, DWordAcc, NoLock, Preserve)
        {
            Offset (0x0C), 
            LCP1,   32, 
            LCT1,   16
        }

        OperationRegion (OPG2, SystemMemory, (XBAS + 0xA000), 0x1000)
        Field (OPG2, AnyAcc, NoLock, Preserve)
        {
            P2VI,   16, 
            P2DI,   16, 
            Offset (0x06), 
            DSO2,   16, 
            Offset (0x34), 
            CPO2,   8, 
            Offset (0xB0), 
                ,   4, 
            P2LD,   1, 
            Offset (0x11A), 
                ,   1, 
            P2VC,   1, 
            Offset (0x214), 
            Offset (0x216), 
            P2LS,   4, 
            Offset (0x248), 
                ,   7, 
            Q2L2,   1, 
            Q2L0,   1, 
            Offset (0x504), 
            HST2,   32, 
            P2TR,   1, 
            Offset (0xC20), 
                ,   4, 
            P2AP,   2, 
            Offset (0xC38), 
                ,   3, 
            P2RM,   1, 
            Offset (0xC74), 
            P2LT,   4, 
            Offset (0xD0C), 
            LRV2,   32
        }

        OperationRegion (PCS2, SystemMemory, (XBAS + (SBN2 << 0x14)), 0xF0)
        Field (PCS2, DWordAcc, Lock, Preserve)
        {
            D2VI,   16, 
            Offset (0x2C), 
            S2VI,   16, 
            S2DI,   16
        }

        OperationRegion (CAP2, SystemMemory, ((XBAS + (SBN2 << 0x14)) + EEC2), 0x14)
        Field (CAP2, DWordAcc, NoLock, Preserve)
        {
            Offset (0x0C), 
            LCP2,   32, 
            LCT2,   16
        }

        Method (PGON, 1, Serialized)
        {
            PION = Arg0
            If ((PION == Zero))
            {
                If ((SGGP == Zero))
                {
                    Return (Zero)
                }
            }
            ElseIf ((PION == One))
            {
                If ((P1GP == Zero))
                {
                    Return (Zero)
                }
            }
            ElseIf ((PION == 0x02))
            {
                If ((P2GP == Zero))
                {
                    Return (Zero)
                }
            }

            PEBA = \XBAS /* External reference */
            PDEV = GDEV (PION)
            PFUN = GFUN (PION)
            Name (SCLK, Package (0x03)
            {
                One, 
                0x0100, 
                Zero
            })
            If ((DerefOf (SCLK [Zero]) != Zero))
            {
                PCRA (0xDC, 0x100C, ~DerefOf (SCLK [One]))
                Sleep (0x10)
            }

            If ((MFGM == Zero))
            {
                If ((OSYS >= 0x07E1))
                {
                    If ((CCHK (PION, One) == Zero))
                    {
                        Return (Zero)
                    }
                }
            }

            GPPR (PION, One)
            RTEN (PION)
            If ((PBGE != Zero))
            {
                If (SBDL (PION))
                {
                    PUAB (PION)
                    CBDL = GUBC (PION)
                    MBDL = GMXB (PION)
                    If ((CBDL > MBDL))
                    {
                        CBDL = MBDL /* \_SB_.PCI0.MBDL */
                    }

                    PDUB (PION, CBDL)
                }
            }

            While ((\_SB.PCI0.P0LS < 0x07))
            {
                Sleep (One)
            }

            \_SB.PCI0.PEG0.LREN = \_SB.PCI0.PEG0.PEGP.LTRE
            \_SB.PCI0.PEG0.CEDR = One
            If ((PION == Zero))
            {
                S0VI = H0VI /* \_SB_.PCI0.H0VI */
                S0DI = H0DI /* \_SB_.PCI0.H0DI */
                LCT0 = ((ELC0 & 0x43) | (LCT0 & 0xFFBC))
            }
            ElseIf ((PION == One))
            {
                S1VI = H1VI /* \_SB_.PCI0.H1VI */
                S1DI = H1DI /* \_SB_.PCI0.H1DI */
                LCT1 = ((ELC1 & 0x43) | (LCT1 & 0xFFBC))
            }
            ElseIf ((PION == 0x02))
            {
                S2VI = H2VI /* \_SB_.PCI0.H2VI */
                S2DI = H2DI /* \_SB_.PCI0.H2DI */
                LCT2 = ((ELC2 & 0x43) | (LCT2 & 0xFFBC))
            }

            Return (Zero)
        }

        Method (PGOF, 1, Serialized)
        {
            PIOF = Arg0
            If ((PIOF == Zero))
            {
                If ((SGGP == Zero))
                {
                    Return (Zero)
                }
            }
            ElseIf ((PIOF == One))
            {
                If ((P1GP == Zero))
                {
                    Return (Zero)
                }
            }
            ElseIf ((PIOF == 0x02))
            {
                If ((P2GP == Zero))
                {
                    Return (Zero)
                }
            }

            PEBA = \XBAS /* External reference */
            PDEV = GDEV (PIOF)
            PFUN = GFUN (PIOF)
            Name (SCLK, Package (0x03)
            {
                One, 
                0x0100, 
                Zero
            })
            If ((MFGM == Zero))
            {
                If ((OSYS >= 0x07E1))
                {
                    If ((CCHK (PIOF, Zero) == Zero))
                    {
                        Return (Zero)
                    }
                }
            }

            If ((SHFG == One))
            {
                Return (Zero)
            }

            If ((Arg0 == Zero))
            {
                ELC0 = LCT0 /* \_SB_.PCI0.LCT0 */
                H0VI = S0VI /* \_SB_.PCI0.S0VI */
                H0DI = S0DI /* \_SB_.PCI0.S0DI */
                ECP0 = LCP0 /* \_SB_.PCI0.LCP0 */
            }
            ElseIf ((Arg0 == One))
            {
                ELC1 = LCT1 /* \_SB_.PCI0.LCT1 */
                H1VI = S1VI /* \_SB_.PCI0.S1VI */
                H1DI = S1DI /* \_SB_.PCI0.S1DI */
                ECP1 = LCP1 /* \_SB_.PCI0.LCP1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                ELC2 = LCT2 /* \_SB_.PCI0.LCT2 */
                H2VI = S2VI /* \_SB_.PCI0.S2VI */
                H2DI = S2DI /* \_SB_.PCI0.S2DI */
                ECP2 = LCP2 /* \_SB_.PCI0.LCP2 */
            }

            \_SB.PCI0.PEG0.PEGP.LTRE = \_SB.PCI0.PEG0.LREN /* External reference */
            RTDS (PIOF)
            If ((PBGE != Zero))
            {
                If (SBDL (PIOF))
                {
                    MBDL = GMXB (PIOF)
                    PDUB (PIOF, MBDL)
                }
            }

            If ((DerefOf (SCLK [Zero]) != Zero))
            {
                PCRO (0xDC, 0x100C, DerefOf (SCLK [One]))
                Sleep (0x10)
            }

            GPPR (PIOF, Zero)
            DIWK (PIOF)
            Return (Zero)
        }

        Method (MMRD, 5, NotSerialized)
        {
            Local7 = Arg0
            Local7 |= (Arg1 << 0x14)
            Local7 |= (Arg2 << 0x0F)
            Local7 |= (Arg3 << 0x0C)
            Local7 |= Arg4
            OperationRegion (PCI0, SystemMemory, Local7, 0x04)
            Field (PCI0, ByteAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.PCI0.MMRD.TEMP */
        }

        Method (GULC, 1, NotSerialized)
        {
            Local7 = MMRD (PEBA, PBUS, PDEV, PFUN, 0xAC)
            Local7 >>= 0x04
            Local7 &= 0x3F
            Local6 = Arg0
            Local6 >>= 0x04
            Local6 &= 0x3F
            If ((Local7 > Local6))
            {
                Local0 = (Local7 - Local6)
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (GMXB, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                HSTR = HST0 /* \_SB_.PCI0.HST0 */
            }
            ElseIf ((Arg0 == One))
            {
                HSTR = HST1 /* \_SB_.PCI0.HST1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                HSTR = HST2 /* \_SB_.PCI0.HST2 */
            }

            HSTR >>= 0x10
            HSTR &= 0x03
            If ((Arg0 == Zero))
            {
                If ((HSTR == 0x03))
                {
                    Local0 = 0x08
                }
                Else
                {
                    Local0 = 0x04
                }
            }
            ElseIf ((Arg0 == One))
            {
                If ((HSTR == 0x02))
                {
                    Local0 = 0x04
                }
                ElseIf ((HSTR == Zero))
                {
                    Local0 = 0x02
                }
            }
            ElseIf ((Arg0 == 0x02))
            {
                If ((HSTR == Zero))
                {
                    Local0 = 0x02
                }
                ElseIf ((HSTR == One))
                {
                    Local0 = 0x02
                }
            }

            Return (Local0)
        }

        Method (PUAB, 1, NotSerialized)
        {
            FBDL = Zero
            CBDL = Zero
            If ((Arg0 == Zero))
            {
                HSTR = HST0 /* \_SB_.PCI0.HST0 */
                LREV = LRV0 /* \_SB_.PCI0.LRV0 */
            }
            ElseIf ((Arg0 == One))
            {
                HSTR = HST1 /* \_SB_.PCI0.HST1 */
                LREV = LRV1 /* \_SB_.PCI0.LRV1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                HSTR = HST2 /* \_SB_.PCI0.HST2 */
                LREV = LRV2 /* \_SB_.PCI0.LRV2 */
            }

            HSTR >>= 0x10
            HSTR &= 0x03
            LREV >>= 0x14
            LREV &= One
            If ((Arg0 == Zero))
            {
                If ((HSTR == 0x03))
                {
                    FBDL = Zero
                    CBDL = 0x08
                }
                ElseIf ((LREV == Zero))
                {
                    FBDL = Zero
                    CBDL = 0x04
                }
                Else
                {
                    FBDL = 0x04
                    CBDL = 0x04
                }
            }
            ElseIf ((Arg0 == One))
            {
                If ((HSTR == 0x02))
                {
                    If ((LREV == Zero))
                    {
                        FBDL = 0x04
                        CBDL = 0x04
                    }
                    Else
                    {
                        FBDL = Zero
                        CBDL = 0x04
                    }
                }
                ElseIf ((HSTR == Zero))
                {
                    If ((LREV == Zero))
                    {
                        FBDL = 0x04
                        CBDL = 0x02
                    }
                    Else
                    {
                        FBDL = 0x02
                        CBDL = 0x02
                    }
                }
            }
            ElseIf ((Arg0 == 0x02))
            {
                If ((HSTR == Zero))
                {
                    If ((LREV == Zero))
                    {
                        FBDL = 0x06
                        CBDL = 0x02
                    }
                    Else
                    {
                        FBDL = Zero
                        CBDL = 0x02
                    }
                }
                ElseIf ((HSTR == One))
                {
                    If ((LREV == Zero))
                    {
                        FBDL = 0x06
                        CBDL = 0x02
                    }
                    Else
                    {
                        FBDL = Zero
                        CBDL = 0x02
                    }
                }
            }

            INDX = One
            If ((CBDL != Zero))
            {
                While ((INDX <= CBDL))
                {
                    If ((P0VI == IVID)){}
                    ElseIf ((P0VI != IVID))
                    {
                        If ((FBDL == Zero))
                        {
                            BSP1 = Zero
                        }

                        If ((FBDL == One))
                        {
                            BSP2 = Zero
                        }

                        If ((FBDL == 0x02))
                        {
                            BSP3 = Zero
                        }

                        If ((FBDL == 0x03))
                        {
                            BSP4 = Zero
                        }

                        If ((FBDL == 0x04))
                        {
                            BSP5 = Zero
                        }

                        If ((FBDL == 0x05))
                        {
                            BSP6 = Zero
                        }

                        If ((FBDL == 0x06))
                        {
                            BSP7 = Zero
                        }

                        If ((FBDL == 0x07))
                        {
                            BSP8 = Zero
                        }
                    }

                    FBDL++
                    INDX++
                }
            }
        }

        Method (PDUB, 2, NotSerialized)
        {
            FBDL = Zero
            CBDL = Arg1
            If ((CBDL == Zero))
            {
                Return (Zero)
            }

            If ((Arg0 == Zero))
            {
                HSTR = HST0 /* \_SB_.PCI0.HST0 */
                LREV = LRV0 /* \_SB_.PCI0.LRV0 */
            }
            ElseIf ((Arg0 == One))
            {
                HSTR = HST1 /* \_SB_.PCI0.HST1 */
                LREV = LRV1 /* \_SB_.PCI0.LRV1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                HSTR = HST2 /* \_SB_.PCI0.HST2 */
                LREV = LRV2 /* \_SB_.PCI0.LRV2 */
            }

            HSTR >>= 0x10
            HSTR &= 0x03
            LREV >>= 0x14
            LREV &= One
            If ((Arg0 == Zero))
            {
                If ((HSTR == 0x03))
                {
                    If ((LREV == Zero))
                    {
                        FBDL = (0x08 - CBDL)
                    }
                    Else
                    {
                        FBDL = Zero
                    }
                }
                ElseIf ((LREV == Zero))
                {
                    FBDL = (0x04 - CBDL)
                }
                Else
                {
                    FBDL = 0x04
                }
            }
            ElseIf ((Arg0 == One))
            {
                If ((HSTR == 0x02))
                {
                    If ((LREV == Zero))
                    {
                        FBDL = (0x08 - CBDL)
                    }
                    Else
                    {
                        FBDL = Zero
                    }
                }
                ElseIf ((HSTR == Zero))
                {
                    If ((LREV == Zero))
                    {
                        FBDL = (0x06 - CBDL)
                    }
                    Else
                    {
                        FBDL = 0x02
                    }
                }
            }
            ElseIf ((Arg0 == 0x02))
            {
                If ((HSTR == Zero))
                {
                    If ((LREV == Zero))
                    {
                        FBDL = (0x08 - CBDL)
                    }
                    Else
                    {
                        FBDL = Zero
                    }
                }
                ElseIf ((HSTR == One))
                {
                    If ((LREV == Zero))
                    {
                        FBDL = (0x08 - CBDL)
                    }
                    Else
                    {
                        FBDL = Zero
                    }
                }
            }

            INDX = One
            While ((INDX <= CBDL))
            {
                If ((P0VI == IVID)){}
                ElseIf ((P0VI != IVID))
                {
                    If ((FBDL == Zero))
                    {
                        BSP1 = One
                    }

                    If ((FBDL == One))
                    {
                        BSP2 = One
                    }

                    If ((FBDL == 0x02))
                    {
                        BSP3 = One
                    }

                    If ((FBDL == 0x03))
                    {
                        BSP4 = One
                    }

                    If ((FBDL == 0x04))
                    {
                        BSP5 = One
                    }

                    If ((FBDL == 0x05))
                    {
                        BSP6 = One
                    }

                    If ((FBDL == 0x06))
                    {
                        BSP7 = One
                    }

                    If ((FBDL == 0x07))
                    {
                        BSP8 = One
                    }
                }

                FBDL++
                INDX++
            }
        }

        Method (SBDL, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                If ((P0UB == Zero))
                {
                    Return (Zero)
                }
            }
            ElseIf ((Arg0 == One))
            {
                If ((P1UB == Zero))
                {
                    Return (Zero)
                }
            }
            ElseIf ((Arg0 == 0x02))
            {
                If ((P2UB == Zero))
                {
                    Return (Zero)
                }
            }
            Else
            {
                Return (Zero)
            }

            Return (One)
        }

        Method (GUBC, 1, NotSerialized)
        {
            Local7 = Zero
            If ((Arg0 == Zero))
            {
                Local6 = LCP0 /* \_SB_.PCI0.LCP0 */
            }
            ElseIf ((Arg0 == One))
            {
                Local6 = LCP1 /* \_SB_.PCI0.LCP1 */
            }
            ElseIf ((Arg0 == 0x02))
            {
                Local6 = LCP2 /* \_SB_.PCI0.LCP2 */
            }

            If ((Arg0 == Zero))
            {
                If ((P0UB == 0xFF))
                {
                    Local5 = GULC (Local6)
                    Local7 = (Local5 / 0x02)
                }
                ElseIf ((P0UB != Zero))
                {
                    Local7 = P0UB /* External reference */
                }
            }
            ElseIf ((Arg0 == One))
            {
                If ((P1UB == 0xFF))
                {
                    Local5 = GULC (Local6)
                    Local7 = (Local5 / 0x02)
                }
                ElseIf ((P1UB != Zero))
                {
                    Local7 = P1UB /* External reference */
                }
            }
            ElseIf ((Arg0 == 0x02))
            {
                If ((P2UB == 0xFF))
                {
                    Local5 = GULC (Local6)
                    Local7 = (Local5 / 0x02)
                }
                ElseIf ((P2UB != Zero))
                {
                    Local7 = P2UB /* External reference */
                }
            }

            Return (Local7)
        }

        Method (DIWK, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                \_SB.PCI0.PEG0.P0EW ()
            }
            ElseIf ((Arg0 == One))
            {
                \_SB.PCI0.PEG1.P1EW ()
            }
            ElseIf ((Arg0 == 0x02))
            {
                \_SB.PCI0.PEG2.P2EW ()
            }
        }

        Method (GDEV, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Local0 = One
            }
            ElseIf ((Arg0 == One))
            {
                Local0 = One
            }
            ElseIf ((Arg0 == 0x02))
            {
                Local0 = One
            }

            Return (Local0)
        }

        Method (GFUN, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Local0 = Zero
            }
            ElseIf ((Arg0 == One))
            {
                Local0 = One
            }
            ElseIf ((Arg0 == 0x02))
            {
                Local0 = 0x02
            }

            Return (Local0)
        }

        Method (CCHK, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Local7 = P0VI /* \_SB_.PCI0.P0VI */
            }
            ElseIf ((Arg0 == One))
            {
                Local7 = P1VI /* \_SB_.PCI0.P1VI */
            }
            ElseIf ((Arg0 == 0x02))
            {
                Local7 = P2VI /* \_SB_.PCI0.P2VI */
            }

            If ((Local7 == IVID))
            {
                Return (Zero)
            }

            If ((Arg0 != Zero))
            {
                Local7 = P0VI /* \_SB_.PCI0.P0VI */
                If ((Local7 == IVID))
                {
                    Return (Zero)
                }
            }

            If ((Arg1 == Zero))
            {
                If ((Arg0 == Zero))
                {
                    If ((SGPI (SGGP, PWE0, PWG0, PWA0) == Zero))
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == One))
                {
                    If ((SGPI (P1GP, PWE1, PWG1, PWA1) == Zero))
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == 0x02))
                {
                    If ((SGPI (P2GP, PWE2, PWG2, PWA2) == Zero))
                    {
                        Return (Zero)
                    }
                }
            }
            ElseIf ((Arg1 == One))
            {
                If ((Arg0 == Zero))
                {
                    If ((SGPI (SGGP, PWE0, PWG0, PWA0) == One))
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == One))
                {
                    If ((SGPI (P1GP, PWE1, PWG1, PWA1) == One))
                    {
                        Return (Zero)
                    }
                }

                If ((Arg0 == 0x02))
                {
                    If ((SGPI (P2GP, PWE2, PWG2, PWA2) == One))
                    {
                        Return (Zero)
                    }
                }
            }

            Return (One)
        }

        Method (NTFY, 2, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Notify (\_SB.PCI0.PEG0, Arg1)
            }
            ElseIf ((Arg0 == One))
            {
                Notify (\_SB.PCI0.PEG1, Arg1)
            }
            ElseIf ((Arg0 == 0x02))
            {
                Notify (\_SB.PCI0.PEG2, Arg1)
            }
        }

        Method (GPPR, 2, NotSerialized)
        {
            If ((Arg1 == Zero))
            {
                If ((Arg0 == Zero))
                {
                    SGPO (SGGP, HRE0, HRG0, HRA0, One)
                    Sleep (DLHR)
                    SGPO (SGGP, PWE0, PWG0, PWA0, Zero)
                }

                If ((Arg0 == One))
                {
                    SGPO (P1GP, HRE1, HRG1, HRA1, One)
                    Sleep (DLHR)
                    SGPO (P1GP, PWE1, PWG1, PWA1, Zero)
                }

                If ((Arg0 == 0x02))
                {
                    SGPO (P2GP, HRE2, HRG2, HRA2, One)
                    Sleep (DLHR)
                    SGPO (P2GP, PWE2, PWG2, PWA2, Zero)
                }
            }
            ElseIf ((Arg1 == One))
            {
                If ((Arg0 == Zero))
                {
                    SGPO (SGGP, PWE0, PWG0, PWA0, One)
                    Sleep (DLPW)
                    SGPO (SGGP, HRE0, HRG0, HRA0, Zero)
                    Sleep (DLHR)
                }

                If ((Arg0 == One))
                {
                    SGPO (P1GP, PWE1, PWG1, PWA1, One)
                    Sleep (DLPW)
                    SGPO (P1GP, HRE1, HRG1, HRA1, Zero)
                    Sleep (DLHR)
                }

                If ((Arg0 == 0x02))
                {
                    SGPO (P2GP, PWE2, PWG2, PWA2, One)
                    Sleep (DLPW)
                    SGPO (P2GP, HRE2, HRG2, HRA2, Zero)
                    Sleep (DLHR)
                }
            }
        }

        Method (SGPO, 5, Serialized)
        {
            If ((Arg3 == Zero))
            {
                Arg4 = ~Arg4
                Arg4 &= One
            }

            If ((Arg0 == One))
            {
                If (CondRefOf (\_SB.SGOV))
                {
                    \_SB.SGOV (Arg2, Arg4)
                }
            }
        }

        Method (SGPI, 4, Serialized)
        {
            If ((Arg0 == One))
            {
                If (CondRefOf (\_SB.GGOV))
                {
                    Local0 = \_SB.GGOV (Arg2)
                }
            }

            If ((Arg3 == Zero))
            {
                Local0 = ~Local0
                Local0 &= One
            }

            Return (Local0)
        }
    }

    Scope (\_SB.PCI0)
    {
        Method (RTEN, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Q0L0 = One
                Sleep (0x10)
                Local0 = Zero
                While (Q0L0)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                P0RM = Zero
                P0AP = Zero
            }
            ElseIf ((Arg0 == One))
            {
                Q1L0 = One
                Sleep (0x10)
                Local0 = Zero
                While (Q1L0)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                P1RM = Zero
                P1AP = Zero
            }
            ElseIf ((Arg0 == 0x02))
            {
                Q2L0 = One
                Sleep (0x10)
                Local0 = Zero
                While (Q2L0)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                P2RM = Zero
                P2AP = Zero
            }
        }

        Method (RTDS, 1, NotSerialized)
        {
            If ((Arg0 == Zero))
            {
                Q0L2 = One
                Sleep (0x10)
                Local0 = Zero
                While (Q0L2)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                P0RM = One
                P0AP = 0x03
            }
            ElseIf ((Arg0 == One))
            {
                Q1L2 = One
                Sleep (0x10)
                Local0 = Zero
                While (Q1L2)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                P1RM = One
                P1AP = 0x03
            }
            ElseIf ((Arg0 == 0x02))
            {
                Q2L2 = One
                Sleep (0x10)
                Local0 = Zero
                While (Q2L2)
                {
                    If ((Local0 > 0x04))
                    {
                        Break
                    }

                    Sleep (0x10)
                    Local0++
                }

                P2RM = One
                P2AP = 0x03
            }
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 2, "ALWARE", "UsbCTabl", 0x00001000)
{
    External (_SB_.PCI0.LPCB.EC0_.CCI0, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CCI1, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CCI2, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CCI3, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CTL0, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CTL1, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CTL2, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CTL3, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CTL4, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CTL5, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CTL6, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.CTL7, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.ECRU, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ECWT, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ERCD, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.MGI0, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGI1, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGI2, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGI3, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGI4, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGI5, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGI6, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGI7, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGI8, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGI9, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGIA, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGIB, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGIC, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGID, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGIE, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGIF, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGO0, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGO1, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGO2, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGO3, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGO4, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGO5, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGO6, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGO7, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGO8, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGO9, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGOA, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGOB, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGOC, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGOD, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGOE, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.MGOF, IntObj)
    External (_SB_.PCI0.LPCB.ESPI, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDDT, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDPN, UnknownObj)
    External (_SB_.PCI0.LPCB.H_EC.PDVB, UnknownObj)
    External (_SB_.PCI0.XHC_.RHUB, DeviceObj)
    External (DBGF, FieldUnitObj)
    External (DBUP, FieldUnitObj)
    External (DPM1, UnknownObj)
    External (DPM2, UnknownObj)
    External (DPM3, UnknownObj)
    External (NDUS, UnknownObj)
    External (P8XH, MethodObj)    // 2 Arguments
    External (PCAO, MethodObj)    // 4 Arguments
    External (PCRR, MethodObj)    // 2 Arguments
    External (TBTS, UnknownObj)
    External (TP1D, UnknownObj)
    External (TP1P, UnknownObj)
    External (TP1T, UnknownObj)
    External (TP2D, UnknownObj)
    External (TP2P, UnknownObj)
    External (TP2T, UnknownObj)
    External (TP3D, UnknownObj)
    External (TP3P, UnknownObj)
    External (TP3T, UnknownObj)
    External (TP4D, UnknownObj)
    External (TP4P, UnknownObj)
    External (TP4T, UnknownObj)
    External (TP5D, UnknownObj)
    External (TP5P, UnknownObj)
    External (TP5T, UnknownObj)
    External (TP6D, UnknownObj)
    External (TP6P, UnknownObj)
    External (TP6T, UnknownObj)
    External (TTUP, UnknownObj)
    External (UBCB, UnknownObj)
    External (UDGF, FieldUnitObj)
    External (UDUP, FieldUnitObj)
    External (USTC, UnknownObj)
    External (UTCE, UnknownObj)
    External (XDCE, UnknownObj)

    Scope (\_SB)
    {
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Name (CRS, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y00)
            })
            Method (RUCC, 2, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (One)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR01._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR01._PLD ())
                        }
                    }
                    Case (0x02)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR02._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR02._PLD ())
                        }
                    }
                    Case (0x03)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR03._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR03._PLD ())
                        }
                    }
                    Case (0x04)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR04._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR04._PLD ())
                        }
                    }
                    Case (0x05)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR05._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR05._PLD ())
                        }
                    }
                    Case (0x06)
                    {
                        If ((Arg1 == One))
                        {
                            Return (\_SB.UBTC.CR06._UPC ())
                        }
                        Else
                        {
                            Return (\_SB.UBTC.CR06._PLD ())
                        }
                    }
                    Default
                    {
                        If ((Arg1 == One))
                        {
                            Return (TUPC (Zero))
                        }
                        Else
                        {
                            Return (TPLD (Zero, Zero))
                        }
                    }

                }
            }

            Method (FPMN, 1, Serialized)
            {
                Switch (ToInteger (Arg0))
                {
                    Case (One)
                    {
                        Local0 = (TP1D >> One)
                        Local0 &= 0x03
                        Local1 = (TP1D & One)
                        Local2 = TP1P /* External reference */
                        Local3 = TP1T /* External reference */
                    }
                    Case (0x02)
                    {
                        Local0 = (TP2D >> One)
                        Local0 &= 0x03
                        Local1 = (TP2D & One)
                        Local2 = TP2P /* External reference */
                        Local3 = TP2T /* External reference */
                    }
                    Case (0x03)
                    {
                        Local0 = (TP3D >> One)
                        Local0 &= 0x03
                        Local1 = (TP3D & One)
                        Local2 = TP3P /* External reference */
                        Local3 = TP3T /* External reference */
                    }
                    Case (0x04)
                    {
                        Local0 = (TP4D >> One)
                        Local0 &= 0x03
                        Local1 = (TP4D & One)
                        Local2 = TP4P /* External reference */
                        Local3 = TP4T /* External reference */
                    }
                    Case (0x05)
                    {
                        Local0 = (TP5D >> One)
                        Local0 &= 0x03
                        Local1 = (TP5D & One)
                        Local2 = TP5P /* External reference */
                        Local3 = TP5T /* External reference */
                    }
                    Case (0x06)
                    {
                        Local0 = (TP6D >> One)
                        Local0 &= 0x03
                        Local1 = (TP6D & One)
                        Local2 = TP6P /* External reference */
                        Local3 = TP6T /* External reference */
                    }
                    Default
                    {
                        Local0 = 0xFF
                        Local1 = Zero
                        Local2 = Zero
                        Local3 = Zero
                    }

                }

                If ((Local0 == Zero))
                {
                    Return (Local2)
                }
                ElseIf (((Local0 == One) || (Local0 == 0x02)))
                {
                    If ((Local1 == One))
                    {
                        Return (Local2)
                    }
                    Else
                    {
                        Return (Local3)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (TPLD, 2, Serialized)
            {
                Name (PCKG, Package (0x01)
                {
                    Buffer (0x10){}
                })
                CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                REV = One
                CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                VISI = Arg0
                CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                GPOS = Arg1
                CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                SHAP = One
                CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                WID = 0x08
                CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                HGT = 0x03
                Return (PCKG) /* \_SB_.UBTC.TPLD.PCKG */
            }

            Method (TUPC, 1, Serialized)
            {
                Name (PCKG, Package (0x04)
                {
                    One, 
                    Zero, 
                    Zero, 
                    Zero
                })
                PCKG [One] = Arg0
                Return (PCKG) /* \_SB_.UBTC.TUPC.PCKG */
            }

            If ((TTUP >= One))
            {
                Device (CR01)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, FPMN (One)))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x09))
                    }
                }
            }

            If ((TTUP >= 0x02))
            {
                Device (CR02)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, FPMN (0x02)))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x09))
                    }
                }
            }

            If ((TTUP >= 0x03))
            {
                Device (CR03)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, FPMN (0x03)))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x09))
                    }
                }
            }

            If ((TTUP >= 0x04))
            {
                Device (CR04)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, FPMN (0x04)))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x09))
                    }
                }
            }

            If ((TTUP >= 0x05))
            {
                Device (CR05)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, FPMN (0x05)))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x09))
                    }
                }
            }

            If ((TTUP >= 0x06))
            {
                Device (CR06)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        Return (TPLD (One, FPMN (0x06)))
                    }

                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        Return (TUPC (0x09))
                    }
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (CRS, \_SB.UBTC._Y00._BAS, CBAS)  // _BAS: Base Address
                CBAS = UBCB /* External reference */
                Return (CRS) /* \_SB_.UBTC.CRS_ */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((USTC == One))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            OperationRegion (USBC, SystemMemory, UBCB, 0x38)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f")))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            \_SB.PCI0.LPCB.EC0.ECWT (MGO0, RefOf (\_SB.PCI0.LPCB.EC0.MGO0))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGO1, RefOf (\_SB.PCI0.LPCB.EC0.MGO1))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGO2, RefOf (\_SB.PCI0.LPCB.EC0.MGO2))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGO3, RefOf (\_SB.PCI0.LPCB.EC0.MGO3))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGO4, RefOf (\_SB.PCI0.LPCB.EC0.MGO4))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGO5, RefOf (\_SB.PCI0.LPCB.EC0.MGO5))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGO6, RefOf (\_SB.PCI0.LPCB.EC0.MGO6))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGO7, RefOf (\_SB.PCI0.LPCB.EC0.MGO7))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGO8, RefOf (\_SB.PCI0.LPCB.EC0.MGO8))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGO9, RefOf (\_SB.PCI0.LPCB.EC0.MGO9))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGOA, RefOf (\_SB.PCI0.LPCB.EC0.MGOA))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGOB, RefOf (\_SB.PCI0.LPCB.EC0.MGOB))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGOC, RefOf (\_SB.PCI0.LPCB.EC0.MGOC))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGOD, RefOf (\_SB.PCI0.LPCB.EC0.MGOD))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGOE, RefOf (\_SB.PCI0.LPCB.EC0.MGOE))
                            \_SB.PCI0.LPCB.EC0.ECWT (MGOF, RefOf (\_SB.PCI0.LPCB.EC0.MGOF))
                            \_SB.PCI0.LPCB.EC0.ECWT (CTL0, RefOf (\_SB.PCI0.LPCB.EC0.CTL0))
                            \_SB.PCI0.LPCB.EC0.ECWT (CTL1, RefOf (\_SB.PCI0.LPCB.EC0.CTL1))
                            \_SB.PCI0.LPCB.EC0.ECWT (CTL2, RefOf (\_SB.PCI0.LPCB.EC0.CTL2))
                            \_SB.PCI0.LPCB.EC0.ECWT (CTL3, RefOf (\_SB.PCI0.LPCB.EC0.CTL3))
                            \_SB.PCI0.LPCB.EC0.ECWT (CTL4, RefOf (\_SB.PCI0.LPCB.EC0.CTL4))
                            \_SB.PCI0.LPCB.EC0.ECWT (CTL5, RefOf (\_SB.PCI0.LPCB.EC0.CTL5))
                            \_SB.PCI0.LPCB.EC0.ECWT (CTL6, RefOf (\_SB.PCI0.LPCB.EC0.CTL6))
                            \_SB.PCI0.LPCB.EC0.ECWT (CTL7, RefOf (\_SB.PCI0.LPCB.EC0.CTL7))
                            Local1 = Buffer (0x03)
                                {
                                     0x59, 0xB1, 0x00                                 // Y..
                                }
                            \_SB.PCI0.LPCB.EC0.ERCD (Local1)
                            P8XH (Zero, 0xE0)
                        }
                        Case (0x02)
                        {
                            MGI0 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGI0))
                            MGI1 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGI1))
                            MGI2 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGI2))
                            MGI3 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGI3))
                            MGI4 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGI4))
                            MGI5 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGI5))
                            MGI6 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGI6))
                            MGI7 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGI7))
                            MGI8 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGI8))
                            MGI9 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGI9))
                            MGIA = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGIA))
                            MGIB = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGIB))
                            MGIC = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGIC))
                            MGID = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGID))
                            MGIE = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGIE))
                            MGIF = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.MGIF))
                            CCI0 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.CCI0))
                            CCI1 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.CCI1))
                            CCI2 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.CCI2))
                            CCI3 = \_SB.PCI0.LPCB.EC0.ECRU (RefOf (\_SB.PCI0.LPCB.EC0.CCI3))
                        }
                        Case (0x03)
                        {
                            Return (XDCE) /* External reference */
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (PSPR, 3, Serialized)
            {
                Local3 = Zero
                If ((Arg1 == Zero))
                {
                    Local3 = One
                }
                ElseIf ((Arg1 == 0x60))
                {
                    Local3 = One
                }
                ElseIf ((Arg1 == 0x80))
                {
                    Local3 = One
                }
                ElseIf ((Arg1 == 0x20))
                {
                    Local3 = One
                }

                If ((Local3 == Zero))
                {
                    Return (Zero)
                }

                If (((Arg1 == 0x80) == (Arg2 == One)))
                {
                    Return (Zero)
                }

                Local1 = 0xFFFFFF1F
                Local0 = (Arg0 << 0x10)
                If ((Arg2 == Zero))
                {
                    Local0 = (0x0500 + Local0)
                }
                Else
                {
                    Local0 = (0x0600 + Local0)
                }

                PCAO (0x70, Local0, Local1, Arg1)
                Local0 = (0x08 + Local0)
                Local3 = Zero
                While ((Local3 == Zero))
                {
                    Local2 = (PCRR (0x70, Local0) & 0xFF)
                    If ((Arg1 == Zero))
                    {
                        If (((Local2 == One) || (Local2 == 0x20)))
                        {
                            Local3 = One
                        }
                    }
                    ElseIf ((Arg1 == 0x80))
                    {
                        If ((Local2 == 0x40))
                        {
                            Local3 = One
                        }
                    }
                    ElseIf ((Arg1 == 0x60))
                    {
                        If ((((Local2 == 0x80) || (Local2 == 0x08)) || (Local2 == 0x20)))
                        {
                            Local3 = One
                        }
                    }
                    ElseIf ((Arg1 == 0x20))
                    {
                        If (((Local2 == 0x02) || (Local2 == 0x10)))
                        {
                            Local3 = One
                        }
                    }
                }
            }

            Method (SPHT, 1, Serialized)
            {
                PSPR (Arg0, Zero, Zero)
                PSPR (Arg0, Zero, One)
            }

            Method (SPTD, 1, Serialized)
            {
                PSPR (Arg0, 0x60, Zero)
                PSPR (Arg0, 0x60, One)
            }

            Method (SPDB, 1, Serialized)
            {
                PSPR (Arg0, 0x60, Zero)
            }

            Method (USPR, 2, Serialized)
            {
                If ((Arg0 == One))
                {
                    If ((\_SB.PCI0.LPCB.H_EC.PDDT != Zero))
                    {
                        SPHT (\_SB.PCI0.LPCB.H_EC.PDPN)
                    }
                    Else
                    {
                        Local0 = PCRR (0xB8, 0x04)
                        If ((((Local0 & 0x4000) == Zero) || (\UDGF != Zero)))
                        {
                            If ((((Local0 & 0x20) == One) && (\DBGF == Zero)))
                            {
                                \DBGF = One
                                \DBUP = \_SB.PCI0.LPCB.H_EC.PDPN /* External reference */
                                SPDB (\_SB.PCI0.LPCB.H_EC.PDPN)
                            }
                            ElseIf ((((Local0 & 0x20) == Zero) || ((
                                \DBGF != Zero) && (\_SB.PCI0.LPCB.H_EC.PDPN != \DBUP))))
                            {
                                SPTD (\_SB.PCI0.LPCB.H_EC.PDPN)
                            }
                        }
                        Else
                        {
                            \UDGF = One
                            \UDUP = \_SB.PCI0.LPCB.H_EC.PDPN /* External reference */
                            SPHT (\_SB.PCI0.LPCB.H_EC.PDPN)
                        }
                    }
                }
                Else
                {
                    If ((\_SB.PCI0.LPCB.H_EC.PDDT == Zero))
                    {
                        Local0 = PCRR (0xB8, 0x04)
                        If ((\UDGF == Zero))
                        {
                            If ((\DBGF != Zero))
                            {
                                \DBGF = Zero
                            }
                        }
                        Else
                        {
                            \UDGF = Zero
                        }
                    }

                    PSPR (Arg0, 0x20, Zero)
                    PSPR (Arg0, 0x20, One)
                }
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "CpuRef", "CpuSsdt", 0x00003000)
{
    External (_SB_.OSCP, IntObj)
    External (_SB_.PR00, DeviceObj)
    External (_SB_.PR01, DeviceObj)
    External (_SB_.PR02, DeviceObj)
    External (_SB_.PR03, DeviceObj)
    External (_SB_.PR04, DeviceObj)
    External (_SB_.PR05, DeviceObj)
    External (_SB_.PR06, DeviceObj)
    External (_SB_.PR07, DeviceObj)
    External (_SB_.PR08, DeviceObj)
    External (_SB_.PR09, DeviceObj)
    External (_SB_.PR10, DeviceObj)
    External (_SB_.PR11, DeviceObj)
    External (_SB_.PR12, DeviceObj)
    External (_SB_.PR13, DeviceObj)
    External (_SB_.PR14, DeviceObj)
    External (_SB_.PR15, DeviceObj)
    External (OSYS, UnknownObj)

    Scope (\)
    {
        Name (SSDT, Package (0x15)
        {
            "CPU0IST ", 
            0x5B7CC418, 
            0x000005BE, 
            "APIST   ", 
            0x5B7C4018, 
            0x00000EF1, 
            "CPU0CST ", 
            0x5B7C3018, 
            0x00000400, 
            "APCST   ", 
            0x5B7C5A98, 
            0x0000030A, 
            "CPU0HWP ", 
            0x5B7CCA98, 
            0x0000010A, 
            "APHWP   ", 
            0x5B7C3698, 
            0x00000317, 
            "HWPLVT  ", 
            0x5B7C5018, 
            0x00000724
        })
        Name (\PC00, 0x80000000)
        Name (\PC01, 0x80000000)
        Name (\PC02, 0x80000000)
        Name (\PC03, 0x80000000)
        Name (\PC04, 0x80000000)
        Name (\PC05, 0x80000000)
        Name (\PC06, 0x80000000)
        Name (\PC07, 0x80000000)
        Name (\PC08, 0x80000000)
        Name (\PC09, 0x80000000)
        Name (\PC10, 0x80000000)
        Name (\PC11, 0x80000000)
        Name (\PC12, 0x80000000)
        Name (\PC13, 0x80000000)
        Name (\PC14, 0x80000000)
        Name (\PC15, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_SB)
    {
        Name (CTPC, Zero)
        OperationRegion (PNVS, SystemMemory, 0x5C5BB000, 0x0072)
        Field (PNVS, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            Offset (0x06), 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            CPPC,   8, 
            CLVL,   8, 
            CBMI,   8, 
            PL10,   16, 
            PL11,   16, 
            PL12,   16, 
            PL20,   16, 
            PL21,   16, 
            PL22,   16, 
            PLW0,   8, 
            PLW1,   8, 
            PLW2,   8, 
            CTC0,   8, 
            CTC1,   8, 
            CTC2,   8, 
            TAR0,   8, 
            TAR1,   8, 
            TAR2,   8, 
            PPC0,   8, 
            PPC1,   8, 
            PPC2,   8, 
            Offset (0x29), 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            Offset (0x2E), 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8, 
            DTSE,   8, 
            DTS1,   8, 
            DTS2,   8, 
            DTSF,   8, 
            PDTS,   8, 
            PKGA,   8, 
            DTS3,   8, 
            DTS4,   8, 
            BGMA,   64, 
            BGMS,   8, 
            BGIA,   16, 
            BGIL,   16, 
            DSIA,   16, 
            DSIL,   8, 
            DSAE,   8, 
            EPCS,   8, 
            EMNA,   64, 
            ELNG,   64, 
            HWPV,   8, 
            HWPI,   8, 
            DTSI,   8, 
            HWPS,   8, 
            LMPS,   8, 
            ITBM,   8, 
            ITBD,   8, 
            ITBI,   8, 
            ITBS,   8, 
            OBIN,   8, 
            HWPE,   8, 
            TXTE,   8, 
            C3MW,   8, 
            C3LT,   16
        }

        OperationRegion (IO_D, SystemIO, \_SB.DSIA, \_SB.DSIL)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_P, SystemIO, \_SB.BGIA, \_SB.BGIL)
        Field (IO_P, ByteAcc, NoLock, Preserve)
        {
            TRPF,   8
        }
    }

    Scope (\_SB.PR00)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Name (HW0, Zero)
        Name (HW2, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953"), REVS, SIZE, Local2))
        }

        Method (COSC, 4, NotSerialized)
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953"))
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PC00 = ((PC00 & 0x7FFFFFFF) | CAP0) /* \_SB_.PR00.GCAP.CAP0 */
            If ((CFGD & 0x7A))
            {
                If ((((CFGD & 0x0200) && (PC00 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_SB_.PR00.HC0_ */
                }
            }

            If (((CFGD & One) && !(SDTL & 0x08)))
            {
                SDTL |= 0x08
                OperationRegion (IST0, SystemMemory, DerefOf (SSDT [One]), DerefOf (SSDT [0x02]))
                Load (IST0, HI0) /* \_SB_.PR00.HI0_ */
            }

            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x40)))
                {
                    If ((\_SB.OSCP & 0x40))
                    {
                        SDTL |= 0x40
                        OperationRegion (HWP0, SystemMemory, DerefOf (SSDT [0x0D]), DerefOf (SSDT [0x0E]))
                        Load (HWP0, HW0) /* \_SB_.PR00.HW0_ */
                        If ((CFGD & 0x00800000))
                        {
                            OperationRegion (HWPL, SystemMemory, DerefOf (SSDT [0x13]), DerefOf (SSDT [0x14]))
                            Load (HWPL, HW2) /* \_SB_.PR00.HW2_ */
                        }
                    }

                    If ((\_SB.OSCP & 0x20))
                    {
                        If (!(\_SB.OSCP & 0x40))
                        {
                            HWPV = Zero
                        }
                    }

                    If ((\_SB.OSCP & 0x40))
                    {
                        HWPV = 0x02
                    }
                }
            }

            OperationRegion (SMIP, SystemIO, 0xB2, One)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB2,   8
            }

            If (!(PC00 & 0x1000))
            {
                IOB2 = HWPS /* \_SB_.HWPS */
            }

            If ((((\_SB.CFGD & 0x02000000) && (\_SB.CFGD & 0x00400000)) && 
                (\_SB.OBIN != Zero)))
            {
                If ((\_SB.OSCP & 0x1000))
                {
                    IOB2 = ITBS /* \_SB_.ITBS */
                }
            }

            Return (Zero)
        }
    }

    Scope (\_SB.PR01)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Name (HW1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST01)
            CreateDWordField (Arg0, 0x04, CP01)
            If (((ST01 == 0x06) || (ST01 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST01 & One))
            {
                CP01 &= 0x0BFF
                Return (Zero)
            }

            PC01 = ((PC01 & 0x7FFFFFFF) | CP01) /* \_SB_.PR01.GCAP.CP01 */
            If (((PC01 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                HWPT ()
            }

            If ((PC01 & 0x18))
            {
                APCT ()
            }

            PC00 = PC01 /* \PC01 */
            Return (Zero)
        }

        Method (APCT, 0, NotSerialized)
        {
            If (((CFGD & 0x7A) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_SB_.PR01.HC1_ */
            }
        }

        Method (APPT, 0, NotSerialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_SB_.PR01.HI1_ */
            }
        }

        Method (HWPT, 0, NotSerialized)
        {
            If ((OSYS >= 0x07DF))
            {
                If (((CFGD & 0x00400000) && !(SDTL & 0x80)))
                {
                    SDTL |= 0x80
                    OperationRegion (HWP1, SystemMemory, DerefOf (SSDT [0x10]), DerefOf (SSDT [0x11]))
                    Load (HWP1, HW1) /* \_SB_.PR01.HW1_ */
                }
            }
        }
    }

    Scope (\_SB.PR02)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST02)
            CreateDWordField (Arg0, 0x04, CP02)
            If (((ST02 == 0x06) || (ST02 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST02 & One))
            {
                CP02 &= 0x0BFF
                Return (Zero)
            }

            PC02 = ((PC02 & 0x7FFFFFFF) | CP02) /* \_SB_.PR02.GCAP.CP02 */
            If (((PC02 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC02 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC02 /* \PC02 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR03)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST03)
            CreateDWordField (Arg0, 0x04, CP03)
            If (((ST03 == 0x06) || (ST03 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST03 & One))
            {
                CP03 &= 0x0BFF
                Return (Zero)
            }

            PC03 = ((PC03 & 0x7FFFFFFF) | CP03) /* \_SB_.PR03.GCAP.CP03 */
            If (((PC03 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC03 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC03 /* \PC03 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR04)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST04)
            CreateDWordField (Arg0, 0x04, CP04)
            If (((ST04 == 0x06) || (ST04 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST04 & One))
            {
                CP04 &= 0x0BFF
                Return (Zero)
            }

            PC04 = ((PC04 & 0x7FFFFFFF) | CP04) /* \_SB_.PR04.GCAP.CP04 */
            If (((PC04 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC04 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC04 /* \PC04 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR05)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST05)
            CreateDWordField (Arg0, 0x04, CP05)
            If (((ST05 == 0x06) || (ST05 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST05 & One))
            {
                CP05 &= 0x0BFF
                Return (Zero)
            }

            PC05 = ((PC05 & 0x7FFFFFFF) | CP05) /* \_SB_.PR05.GCAP.CP05 */
            If (((PC05 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC05 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC05 /* \PC05 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR06)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST06)
            CreateDWordField (Arg0, 0x04, CP06)
            If (((ST06 == 0x06) || (ST06 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST06 & One))
            {
                CP06 &= 0x0BFF
                Return (Zero)
            }

            PC06 = ((PC06 & 0x7FFFFFFF) | CP06) /* \_SB_.PR06.GCAP.CP06 */
            If (((PC06 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC06 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC06 /* \PC06 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR07)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST07)
            CreateDWordField (Arg0, 0x04, CP07)
            If (((ST07 == 0x06) || (ST07 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST07 & One))
            {
                CP07 &= 0x0BFF
                Return (Zero)
            }

            PC07 = ((PC07 & 0x7FFFFFFF) | CP07) /* \_SB_.PR07.GCAP.CP07 */
            If (((PC07 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC07 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC07 /* \PC07 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR08)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST08)
            CreateDWordField (Arg0, 0x04, CP08)
            If (((ST08 == 0x06) || (ST08 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST08 & One))
            {
                CP08 &= 0x0BFF
                Return (Zero)
            }

            PC08 = ((PC08 & 0x7FFFFFFF) | CP08) /* \_SB_.PR08.GCAP.CP08 */
            If (((PC08 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC08 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC08 /* \PC08 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR09)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST09)
            CreateDWordField (Arg0, 0x04, CP09)
            If (((ST09 == 0x06) || (ST09 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST09 & One))
            {
                CP09 &= 0x0BFF
                Return (Zero)
            }

            PC09 = ((PC09 & 0x7FFFFFFF) | CP09) /* \_SB_.PR09.GCAP.CP09 */
            If (((PC09 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC09 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC09 /* \PC09 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR10)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST10)
            CreateDWordField (Arg0, 0x04, CP10)
            If (((ST10 == 0x06) || (ST10 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST10 & One))
            {
                CP10 = (ST10 & 0x0BFF)
                Return (Zero)
            }

            PC10 = ((PC10 & 0x7FFFFFFF) | CP10) /* \_SB_.PR10.GCAP.CP10 */
            If (((PC10 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC10 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC10 /* \PC10 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR11)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST11)
            CreateDWordField (Arg0, 0x04, CP11)
            If (((ST11 == 0x06) || (ST11 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST11 & One))
            {
                CP11 = (ST11 & 0x0BFF)
                Return (Zero)
            }

            PC11 = ((PC11 & 0x7FFFFFFF) | CP11) /* \_SB_.PR11.GCAP.CP11 */
            If (((PC11 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC11 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC11 /* \PC11 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR12)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST12)
            CreateDWordField (Arg0, 0x04, CP12)
            If (((ST12 == 0x06) || (ST12 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST12 & One))
            {
                CP12 = (ST12 & 0x0BFF)
                Return (Zero)
            }

            PC12 = ((PC12 & 0x7FFFFFFF) | CP12) /* \_SB_.PR12.GCAP.CP12 */
            If (((PC12 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC12 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC12 /* \PC12 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR13)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST13)
            CreateDWordField (Arg0, 0x04, CP13)
            If (((ST13 == 0x06) || (ST13 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST13 & One))
            {
                CP13 = (ST13 & 0x0BFF)
                Return (Zero)
            }

            PC13 = ((PC13 & 0x7FFFFFFF) | CP13) /* \_SB_.PR13.GCAP.CP13 */
            If (((PC13 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC13 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC13 /* \PC13 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR14)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST14)
            CreateDWordField (Arg0, 0x04, CP14)
            If (((ST14 == 0x06) || (ST14 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST14 & One))
            {
                CP14 = (ST14 & 0x0BFF)
                Return (Zero)
            }

            PC14 = ((PC14 & 0x7FFFFFFF) | CP14) /* \_SB_.PR14.GCAP.CP14 */
            If (((PC14 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC14 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC14 /* \PC14 */
            Return (Zero)
        }
    }

    Scope (\_SB.PR15)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_SB.PR00.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_SB.PR00.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, ST15)
            CreateDWordField (Arg0, 0x04, CP15)
            If (((ST15 == 0x06) || (ST15 == 0x0A)))
            {
                Return (Zero)
            }

            If ((ST15 & One))
            {
                CP15 = (ST15 & 0x0BFF)
                Return (Zero)
            }

            PC15 = ((PC15 & 0x7FFFFFFF) | CP15) /* \_SB_.PR15.GCAP.CP15 */
            If (((PC15 & 0x09) == 0x09))
            {
                \_SB.PR01.APPT ()
            }

            If ((\_SB.OSCP & 0x20))
            {
                \_SB.PR01.HWPT ()
            }

            If ((PC15 & 0x18))
            {
                \_SB.PR01.APCT ()
            }

            PC00 = PC15 /* \PC15 */
            Return (Zero)
        }
    }

    Scope (\_SB)
    {
        If ((TXTE == One))
        {
            Device (ACM)
            {
                Name (_HID, "INTC1025")  // _HID: Hardware ID
                Name (_CID, "INT_WHL_SINIT")  // _CID: Compatible ID
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "SataRe", "SataTabl", 0x00001000)
{
    External (_SB_.PCI0.A_CC.XYZD, UnknownObj)
    External (_SB_.PCI0.SAT0, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT0, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT1, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT2, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT3, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT4, DeviceObj)
    External (_SB_.PCI0.SAT0.PRT5, DeviceObj)

    Scope (\)
    {
        Name (STFE, Buffer (0x07)
        {
             0x10, 0x06, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
        })
        Name (STFD, Buffer (0x07)
        {
             0x90, 0x06, 0x00, 0x00, 0x00, 0x00, 0xEF         // .......
        })
        Name (FZTF, Buffer (0x07)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5         // .......
        })
        Name (DCFL, Buffer (0x07)
        {
             0xC1, 0x00, 0x00, 0x00, 0x00, 0x00, 0xB1         // .......
        })
        Name (STFF, Buffer (0x07)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
        })
        Name (SCBF, Buffer (0x1C){})
        Name (CMDC, Zero)
        Method (GTFB, 2, Serialized)
        {
            Local0 = (CMDC * 0x38)
            CreateField (SCBF, Local0, 0x38, CMDX)
            Local0 = (CMDC * 0x07)
            CreateByteField (SCBF, (Local0 + One), A001)
            CMDX = Arg0
            A001 = Arg1
            CMDC++
        }
    }

    Scope (\_SB.PCI0.SAT0)
    {
        Name (TMD0, Buffer (0x14){})
        CreateDWordField (TMD0, Zero, PIO0)
        CreateDWordField (TMD0, 0x04, DMA0)
        CreateDWordField (TMD0, 0x08, PIO1)
        CreateDWordField (TMD0, 0x0C, DMA1)
        CreateDWordField (TMD0, 0x10, CHNF)
        Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
        {
            PIO0 = 0x78
            DMA0 = 0x14
            PIO1 = 0x78
            DMA1 = 0x14
            CHNF |= 0x05
            Return (TMD0) /* \_SB_.PCI0.SAT0.TMD0 */
        }

        Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
        {
        }

        Scope (PRT0)
        {
            Method (_SDD, 1, NotSerialized)  // _SDD: Set Device Data
            {
                Name (FFS0, Buffer (0x07)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x00         // .......
                })
                CreateByteField (FFS0, Zero, FF00)
                CreateByteField (FFS0, 0x06, FF06)
                If ((SizeOf (Arg0) == 0x0200))
                {
                    If (\_SB.PCI0.A_CC.XYZD)
                    {
                        CreateWordField (Arg0, 0x0119, W119)
                        CreateWordField (Arg0, 0x0134, W154)
                        CreateWordField (Arg0, 0x0138, W156)
                        If (((W154 == 0x1028) & ((W156 & 0x4000) == 0x4000)))
                        {
                            If (((W156 & 0x8000) == Zero))
                            {
                                FF00 = 0x5A
                                FF06 = 0xEF
                            }
                        }
                        ElseIf (((W119 & 0x10) == 0x10))
                        {
                            FF00 = 0x41
                            FF06 = 0xEF
                        }
                    }
                }

                STFF = FFS0 /* \_SB_.PCI0.SAT0.PRT0._SDD.FFS0 */
            }

            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If (Zero)
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                GTFB (STFF, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Scope (PRT1)
        {
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If (Zero)
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Scope (PRT3)
        {
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If (Zero)
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Scope (PRT4)
        {
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If (Zero)
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }

        Scope (PRT5)
        {
            Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
            {
                CMDC = Zero
                If (Zero)
                {
                    GTFB (STFD, 0x06)
                }
                Else
                {
                    GTFB (STFE, 0x06)
                }

                GTFB (FZTF, Zero)
                GTFB (DCFL, Zero)
                Return (SCBF) /* \SCBF */
            }
        }
    }
}



UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 00000048
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B6
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "    "
[020h 0032   4]        Asl Compiler Revision : 01000013

[024h 0036  16]              UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052   2]                  Data Offset : 0038

Raw Table Data: Length 72 (0x48)

    0000: 55 45 46 49 48 00 00 00 01 B6 41 4C 57 41 52 45  // UEFIH.....ALWARE
    0010: 41 4C 49 45 4E 57 52 45 02 00 00 00 20 20 20 20  // ALIENWRE....    
    0020: 13 00 00 01 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 38 00 00 00 01 00 00 00 00 00 00 00  // ...28...........
    0040: 00 80 CA 5B 00 00 00 00                          // ...[....


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000EE84
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 3F
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "AMD"
[020h 0032   4]        Asl Compiler Revision : 31504F47


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 61060 (0xEE84)

    0000: 56 46 43 54 84 EE 00 00 01 3F 41 4C 57 41 52 45  // VFCT.....?ALWARE
    0010: 41 4C 49 45 4E 57 52 45 01 00 00 00 41 4D 44 00  // ALIENWRE....AMD.
    0020: 47 4F 50 31 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // GOP12..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 DF 67 00 00 00 00  // ...........g....
    0060: 01 00 00 00 00 EE 00 00 55 AA 77 E9 AD 02 00 00  // ........U.w.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: 50 02 00 00 00 00 49 42 4D 07 84 92 00 00 00 00  // P.....IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 A5 02 00 00 00 00 00 00  // 20..............
    00B0: 2A 02 00 00 00 00 00 00 30 39 2F 32 36 2F 31 37  // *.......09/26/17
    00C0: 2C 30 34 3A 31 31 3A 35 32 00 00 00 E9 B8 03 00  // ,04:11:52.......
    00D0: E9 C7 03 00 00 00 F4 00 00 1B 00 00 00 D0 01 00  // ................
    00E0: BE CF 20 E1 02 80 7E 00 A2 00 44 02 12 00 00 00  // .. ...~...D.....
    00F0: 00 00 00 3C 40 0E 02 07 3C 01 1A 00 04 00 00 00  // ...<@...<.......
    0100: EE A0 FF 06 00 08 30 40 0E 01 00 00 00 00 00 00  // ......0@........
    0110: 14 03 00 00 00 00 00 00 BE 7E 11 00 B9 07 1A D6  // .........~......
    0120: 50 2C 00 00 00 00 00 00 00 00 00 00 14 40 41 43  // P,...........@AC
    0130: 00 00 00 00 10 00 00 00 42 00 00 00 F0 7D C6 02  // ........B....}..
    0140: 20 00 20 00 12 00 0E 00 00 00 00 00 00 00 00 00  //  . .............
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 42 52 32 35  // ............BR25
    0160: 39 37 33 2E 30 30 31 00 50 4F 4C 41 52 49 53 32  // 973.001.POLARIS2
    0170: 30 4D 00 50 43 49 5F 45 58 50 52 45 53 53 00 47  // 0M.PCI_EXPRESS.G
    0180: 44 44 52 35 00 0D 0A 44 45 4C 4C 20 50 6F 6C 61  // DDR5...DELL Pola
    0190: 72 69 73 32 30 4D 20 58 4C 20 47 44 44 52 35 20  // ris20M XL GDDR5 
    01A0: 32 35 36 4D 78 33 32 20 38 47 42 20 31 32 30 36  // 256Mx32 8GB 1206
    01B0: 65 2F 31 37 35 30 6D 20 20 20 20 20 20 20 20 20  // e/1750m         
    01C0: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    01D0: 20 20 20 0D 0A 00 0D 0A 20 0D 0A 00 28 43 29 20  //    ..... ...(C) 
    01E0: 31 39 38 38 2D 32 30 31 30 2C 20 41 64 76 61 6E  // 1988-2010, Advan
    01F0: 63 65 64 20 4D 69 63 72 6F 20 44 65 76 69 63 65  // ced Micro Device
    0200: 73 2C 20 49 6E 63 2E 00 41 54 4F 4D 42 49 4F 53  // s, Inc..ATOMBIOS
    0210: 42 4B 2D 41 4D 44 20 56 45 52 30 31 35 2E 30 35  // BK-AMD VER015.05
    0220: 30 2E 30 30 32 2E 30 30 31 2E 30 32 35 39 37 33  // 0.002.001.025973
    0230: 00 42 52 32 35 39 37 33 2E 30 30 31 20 00 31 34  // .BR25973.001 .14
    0240: 36 33 32 33 35 20 00 33 39 38 35 34 35 20 20 00  // 63235 .398545  .
    0250: 20 20 20 20 20 20 20 20 00 43 4F 4D 50 41 4C 5F  //         .COMPAL_
    0260: 44 45 4C 4C 5F 50 4F 4C 41 52 49 53 32 30 4D 5F  // DELL_POLARIS20M_
    0270: 58 4C 4C 34 5F 43 41 53 53 49 4E 49 5F 47 44 44  // XLL4_CASSINI_GDD
    0280: 52 35 5F 43 46 4C 5C 63 6F 6E 66 69 67 2E 68 00  // R5_CFL\config.h.
    0290: 00 00 24 00 01 01 41 54 4F 4D 00 C0 D1 03 C9 01  // ..$...ATOM......
    02A0: 75 02 1D 01 F6 03 00 00 00 00 02 10 DF 67 50 02  // u............gP.
    02B0: 5C 97 02 98 A0 00 00 00 50 43 49 52 02 10 DF 67  // \.......PCIR...g
    02C0: 00 00 18 00 00 00 00 03 77 00 32 0F 00 00 00 00  // ........w.2.....
    02D0: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 F4 AA 85  // AMD ATOMBIOS....
    02E0: 70 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // p...............
    02F0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0300: 00 00 00 00 00 00 00 00 00 00 00 00 00 56 1E 0E  // .............V..
    0310: 1F E8 3E 2A 81 4D 50 00 20 1F 5E 1E 06 66 50 66  // ..>*.MP. .^..fPf
    0320: 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3 3E 02  // QfRfSfUfVfW...>.
    0330: 8C 0E 32 02 B2 20 E8 F6 2D 0B C0 75 14 A2 02 00  // ..2.. ..-..u....
    0340: 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07 1F  // f_f^f]f[fZfYfX..
    0350: CB E8 0C 2F E8 D7 2C 32 D2 89 16 40 02 A1 3E 02  // .../..,2...@..>.
    0360: 66 C1 C0 10 A1 32 02 E8 0B 04 E8 1E 04 E8 E6 03  // f....2..........
    0370: E8 54 05 E8 4B 03 E8 D9 29 F7 45 50 00 20 75 13  // .T..K...).EP. u.
    0380: E8 AF 29 0B C0 74 0C E8 49 00 E8 F7 57 E8 DB 03  // ..)..t..I...W...
    0390: E8 3E 58 E8 B9 00 B4 80 E8 C8 2C 8A C7 66 C1 E0  // .>X.......,..f..
    03A0: 10 8A E3 B0 14 66 50 BB 08 00 E8 13 28 A8 01 66  // .....fP.....(..f
    03B0: 58 74 02 B0 20 66 A3 84 92 E8 68 03 E8 D6 03 E8  // Xt.. f....h.....
    03C0: C3 2E 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // ..f_f^f]f[fZfYfX
    03D0: 07 1F CB 2E 8B 1E 32 02 83 3E E3 03 00 75 04 89  // ......2..>...u..
    03E0: 1E E1 03 1E 2E 8E 1E D9 03 9C FA 66 C7 06 08 01  // ...........f....
    03F0: 65 F0 00 F0 C7 06 40 00 F6 03 89 1E 42 00 C7 06  // e.....@.....B...
    0400: B4 01 F6 03 89 1E B6 01 C7 06 7C 00 A2 60 89 1E  // ..........|..`..
    0410: 7E 00 C7 06 0C 01 B5 64 89 1E 0E 01 C7 06 A8 04  // ~......d........
    0420: E2 5A 89 1E AA 04 2E 8E 1E E1 03 8B C3 A3 E4 5A  // .Z.............Z
    0430: A3 F4 5A A3 06 5B 9D 1F C3 50 4D 49 44 F6 03 0A  // ..Z..[...PMID...
    0440: 48 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00 BB  // H...............
    0450: 00 00 E8 6B 27 66 C1 E8 10 A3 56 02 C3 00 E8 FF  // ...k'f....V.....
    0460: 2D E8 48 02 75 1B 2E 3A 26 4C 02 75 05 E8 47 00  // -.H.u..:&L.u..G.
    0470: EB 11 80 FC 4F 75 05 E8 EE 42 EB 07 E8 3B 4A EB  // ....Ou...B...;J.
    0480: 02 B4 01 E8 FF 2D CF E8 D6 2D E8 1F 02 75 05 E8  // .....-...-...u..
    0490: 25 00 EB 02 B4 01 E8 EC 2D CB E8 C3 2D E8 0C 02  // %.......-...-...
    04A0: 75 0F 80 FC 4F 75 05 E8 BE 42 EB 07 E8 0B 4A EB  // u...Ou...B....J.
    04B0: 02 B4 01 E8 CF 2D CB 1E 06 66 50 66 51 66 52 66  // .....-...fPfQfRf
    04C0: 53 66 55 66 56 66 57 0E 1F 3C 04 75 23 BB 0B 00  // SfUfVfW..<.u#...
    04D0: E8 ED 26 8D 36 1A 01 8A 3C 80 EF 30 B3 02 8B EC  // ..&.6...<..0....
    04E0: 89 5E 0C 89 46 04 66 C1 E8 10 89 46 00 E9 9A 01  // .^..F.f....F....
    04F0: 3C 05 75 18 E8 77 02 E8 34 2B 8B EC 89 56 10 89  // <.u..w..4+...V..
    0500: 46 00 66 C1 E8 10 89 46 04 E9 7E 01 3C 06 75 39  // F.f....F..~.<.u9
    0510: E8 69 02 66 D1 E0 8B EC 89 46 14 BB 02 00 E8 9F  // .i.f.....F......
    0520: 26 88 46 18 E8 59 02 66 0B C0 0F 84 54 01 66 89  // &.F..Y.f....T.f.
    0530: 46 0C BB 06 00 E8 88 26 33 C0 66 89 46 00 2E 8B  // F......&3.f.F...
    0540: 16 56 02 89 56 10 E9 41 01 3C 0B 75 24 0A DB 75  // .V..V..A.<.u$..u
    0550: 11 B9 80 00 BB 02 00 8B EC 89 5E 0C 89 4E 14 E9  // ..........^..N..
    0560: 28 01 8A C7 E8 3B 01 E8 D8 0E 0F 84 14 01 E9 19  // (....;..........
    0570: 01 3C 17 75 21 E8 6A 06 74 06 E8 5E 0D E8 A7 18  // .<.u!.j.t..^....
    0580: E8 8B 07 E8 AF 0E 33 C9 66 C1 E8 10 0A E8 8B EC  // ......3.f.......
    0590: 89 4E 14 E9 F4 00 3C 18 75 6A 0A FF 75 18 E8 9B  // .N....<.uj..u...
    05A0: 05 8B EC 89 46 0C 66 C1 E8 10 89 46 14 E8 3C 08  // ....F.f....F..<.
    05B0: 89 4E 10 E9 D4 00 80 FF 0F 74 0E 23 C9 0F 84 C1  // .N.......t.#....
    05C0: 00 E8 C5 05 E8 1B 06 75 2D BB 00 1C E8 51 2C 66  // .......u-....Q,f
    05D0: 0B C0 0F 84 AC 00 E8 35 07 0B C9 0F 84 A3 00 BE  // .......5........
    05E0: 00 1C E8 C6 01 0F 84 99 00 BE 00 1C B0 40 E8 23  // .............@.#
    05F0: 02 E8 48 05 EB 06 E8 3E 06 E8 2D 06 8B EC 89 46  // ..H....>..-....F
    0600: 0C E9 86 00 3C 19 75 05 E8 00 06 EB 7D 3C 82 75  // ....<.u.....}<.u
    0610: 2C 80 FB 01 75 0D 8B EC BE 74 06 89 76 00 8C 4E  // ,...u....t..v..N
    0620: 10 EB 67 80 FB 05 75 15 0A FF 75 0A E8 86 03 8B  // ..g...u...u.....
    0630: EC 89 46 14 EB 54 E8 45 03 74 3F EB 4D 3C 8E 75  // ..F..T.E.t?.M<.u
    0640: 12 80 FF 01 74 08 80 FF 02 75 2F 80 C1 02 E8 CA  // ....t....u/.....
    0650: 03 EB 37 3C 8F 75 23 80 FF 05 75 05 E8 1C 06 EB  // ..7<.u#...u.....
    0660: 29 80 FF 07 75 0A E8 20 06 8B EC 88 5E 0C EB 1A  // )...u.. ....^...
    0670: 80 FF 85 75 05 E8 03 06 EB 10 8B EC C6 46 19 02  // ...u.........F..
    0680: EB 0F 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88 66  // .....F....2....f
    0690: 19 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    06A0: 1F C3 51 8A C8 B8 01 00 D3 E0 59 C3 50 32 C0 53  // ..Q.......Y.P2.S
    06B0: BB 15 00 E8 0A 25 5B 3C FF 74 04 24 03 0A C0 58  // .....%[<.t.$...X
    06C0: C3 E8 E7 2B E8 A8 06 F7 C1 02 00 74 0E 06 0E 07  // ...+.......t....
    06D0: 8D 3E 74 06 B8 02 00 E8 C1 05 07 C3 00 00 00 00  // .>t.............
    06E0: 07 00 08 08 08 00 00 00 00 00 00 00 00 00 00 00  // ................
    06F0: 00 00 00 00 00 00 00 00 00 00 00 00 0C 01 C3 00  // ................
    0700: 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05 E6 42 E4 61  // PQ...C.3.B...B.a
    0710: 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8 98 27 E6 61  // .....a.......'.a
    0720: 59 58 C3 00 1E 56 0E 1F 80 3E 02 00 80 76 05 C6  // YX...V...>...v..
    0730: 06 02 00 80 8A 0E 02 00 C1 E1 09 FC C6 06 21 00  // ..............!.
    0740: 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4 FE C4 88 26  // .3.2...........&
    0750: 21 00 5E 1F C3 00 E8 76 26 75 03 E8 20 28 E8 B9  // !.^....v&u.. (..
    0760: 26 E8 83 26 E8 DD 25 E8 71 0B C3 B0 01 C3 BB 01  // &..&..%.q.......
    0770: 00 E8 38 24 C3 BB 01 00 E8 3B 24 C3 E8 C5 27 C3  // ..8$.....;$...'.
    0780: 53 BB 04 00 E8 39 24 33 C0 5B C3 E8 8E 27 BB 0A  // S....9$3.[...'..
    0790: 00 E8 22 24 C3 BB 0A 00 E8 11 24 66 8B C8 E8 7B  // .."$......$f...{
    07A0: 27 BB 0A 00 66 2B C1 E8 0C 24 C3 E8 29 00 0B C9  // '...f+...$..)...
    07B0: 74 22 E8 66 06 E8 FB 15 66 51 66 8B C8 BB 07 00  // t".f....fQf.....
    07C0: E8 E9 23 66 25 00 FE 00 00 66 0B C1 E8 E7 23 66  // ..#f%....f....#f
    07D0: 59 0C 01 C3 32 C0 C3 E8 9D 03 0B C9 75 0A 33 D2  // Y...2.......u.3.
    07E0: E8 4F 25 8B C8 E8 A1 03 0B D1 E8 FF 05 23 CA 66  // .O%..........#.f
    07F0: C1 E6 10 33 F6 E8 8A 0A 74 15 E8 97 0B 85 C1 74  // ...3....t......t
    0800: F4 51 E8 A2 11 59 75 ED E8 89 0B 33 C8 EB E6 66  // .Q...Yu....3...f
    0810: C1 EE 10 C3 A8 10 75 5A E8 AA 15 66 C1 E6 10 33  // ......uZ...f...3
    0820: F6 E8 5E 0A 74 24 E8 2E 0A 74 0B E8 AB 0B 24 03  // ..^.t$...t....$.
    0830: 3C 03 75 ED EB 0A E8 A0 0B A8 01 74 E4 E8 15 07  // <.u........t....
    0840: E8 A3 16 B5 00 E8 98 0B EB D7 E8 7C 01 32 C9 33  // ...........|.2.3
    0850: F6 E8 72 0A E8 19 16 E8 F9 25 FE C1 38 C1 72 F1  // ..r......%..8.r.
    0860: 66 C1 EE 10 E8 57 15 A8 20 75 57 A8 40 75 03 E8  // f....W.. uW.@u..
    0870: 36 1C E8 3E 15 0A C0 75 19 32 C9 33 F6 E8 46 0A  // 6..>...u.2.3..F.
    0880: 0B F6 74 05 B5 01 E8 D6 1C E8 C7 25 FE C1 38 C1  // ..t........%..8.
    0890: 72 EB 33 F6 E8 E0 09 74 26 E8 1D 0B E8 8F 22 75  // r.3....t&....."u
    08A0: 14 E8 E5 03 0A DB 74 0D E8 AA 06 E8 38 16 B5 00  // ......t.....8...
    08B0: E8 2D 0B EB DF E8 10 16 B5 01 E8 23 0B EB D5 E8  // .-.........#....
    08C0: 14 01 C3 E8 6C 24 C3 E8 5D 15 33 C9 33 D2 E8 B8  // ....l$..].3.3...
    08D0: 02 66 33 D2 66 33 C0 E8 3E 0B E8 58 00 B1 FF E8  // .f3.f3..>..X....
    08E0: 9C 00 33 F6 E8 9B 09 74 10 E8 CD 0A E8 3B 22 74  // ..3....t.....;"t
    08F0: 03 E8 6F 16 E8 9C 16 EB EB B3 01 E8 6A 02 32 C9  // ..o.........j.2.
    0900: E8 08 03 E8 D2 24 E8 29 24 0B C0 C3 E8 CC 09 E8  // .....$.)$.......
    0910: 15 15 66 33 C0 66 BA 00 F0 00 F0 E8 2D 02 51 B1  // ..f3.f......-.Q.
    0920: 01 E8 D8 02 59 33 F6 E8 58 09 74 05 E8 34 16 EB  // ....Y3..X.t..4..
    0930: F6 E8 84 1B C3 B8 02 00 E8 29 09 74 40 B1 07 E8  // .........).t@...
    0940: 27 20 E8 31 0B A8 04 75 12 E8 A0 26 83 3D 00 75  // ' .1...u...&.=.u
    0950: 0A E8 DE 23 83 E0 FD E8 E1 23 C3 66 BA FF FF FB  // ...#.....#.f....
    0960: FF 66 B8 00 00 04 00 E8 AE 0A E8 D1 0C E8 0F 26  // .f.............&
    0970: 8A C8 BB 04 00 E8 34 22 8A E1 E8 39 22 C3 E8 4B  // ......4"...9"..K
    0980: 22 74 31 38 E1 76 04 8A CC EB 06 38 C1 73 02 8A  // "t18.v.....8.s..
    0990: C8 BB 02 00 E8 15 22 8A E1 E8 1A 22 BB 02 00 E8  // ......"...."....
    09A0: 0A 22 66 C1 E8 18 A8 20 75 08 B1 04 E8 BA 1F 0C  // ."f.... u.......
    09B0: 01 C3 0C 01 C3 51 E8 13 22 74 0C 8A CC BB 02 00  // .....Q.."t......
    09C0: E8 E9 21 8A C4 8A E1 59 C3 33 F6 E8 A9 08 74 05  // ..!....Y.3....t.
    09D0: E8 7F 14 EB F6 C3 33 F6 E8 9C 08 74 05 E8 81 14  // ......3....t....
    09E0: EB F6 C3 E8 49 25 75 1B 80 F9 01 75 17 33 F6 E8  // ....I%u....u.3..
    09F0: 85 08 74 0C 51 E8 D0 14 B5 01 E8 E3 09 59 EB EF  // ..t.Q........Y..
    0A00: E8 D3 FF C3 E8 C2 FF 33 F6 E8 6B 08 74 0C 51 E8  // .......3..k.t.Q.
    0A10: 51 15 B5 00 E8 C9 09 59 EB EF C3 B8 02 00 E8 43  // Q......Y.......C
    0A20: 08 74 03 E8 43 1F C3 E8 0D 1B 8B C8 66 C1 E8 10  // .t..C.......f...
    0A30: 8B D0 C3 8A C3 24 80 E8 8B 13 32 C9 B5 10 E8 AF  // .....$....2.....
    0A40: 1A E8 0F 24 FE C1 38 C1 72 F2 C3 E8 04 13 3B C1  // ...$..8.r.....;.
    0A50: 7C 3A 8B C1 E8 44 13 E8 D5 1C 8B C8 51 E8 74 13  // |:...D......Q.t.
    0A60: E8 38 13 59 E8 C8 1C 3B C8 72 02 8B C1 8D 5C 04  // .8.Y...;.r....\.
    0A70: E8 25 27 32 C9 B5 0F E8 76 1A E8 D6 23 FE C1 38  // .%'2....v...#..8
    0A80: C1 72 F2 8D 5C 04 E8 97 27 0B C0 C3 33 C0 C3 52  // .r..\...'...3..R
    0A90: E8 9C 00 8A C2 8B D1 66 C1 E2 10 8A D0 32 C0 B9  // .......f.....2..
    0AA0: 00 02 E8 69 1C 66 C1 EA 10 8B CA 5A E8 80 00 E8  // ...i.f.....Z....
    0AB0: 6E 27 66 C1 E8 02 0A F6 75 04 66 C1 E8 02 67 26  // n'f.....u.f...g&
    0AC0: 88 07 66 C1 E8 0A 67 26 88 47 01 66 C1 E8 0A 67  // ..f...g&.G.f...g
    0AD0: 26 88 47 02 66 83 C7 04 83 C3 04 E2 D2 C3 51 E8  // &.G.f.........Q.
    0AE0: 4D 00 53 67 26 8A 47 02 66 C1 E0 0A 67 26 8A 47  // M.Sg&.G.f...g&.G
    0AF0: 01 66 C1 E0 0A 67 26 8A 07 66 C1 E0 02 0A F6 75  // .f...g&..f.....u
    0B00: 04 66 C1 E0 02 E8 78 26 66 83 C7 04 83 C3 04 E2  // .f....x&f.......
    0B10: D2 5B 59 8A C2 8B D1 66 C1 E2 10 8A D0 B9 00 03  // .[Y....f........
    0B20: 53 E8 EA 1B 5B E8 2B 23 FE C1 38 C1 72 F2 C3 BB  // S...[.+#..8.r...
    0B30: 00 18 33 C0 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00  // ..3.........S...
    0B40: E8 69 20 66 25 FF 0F FF 0F 5B C3 53 66 50 66 51  // .i f%....[.SfPfQ
    0B50: 66 8B C8 BB 03 00 E8 53 20 66 23 C2 66 0B C1 E8  // f......S f#.f...
    0B60: 54 20 66 59 66 58 5B C3 B8 2C 06 F6 C3 01 75 03  // T fYfX[..,....u.
    0B70: B8 0C 06 E8 37 00 C3 BB 05 00 E8 2F 20 25 FF 0F  // ....7....../ %..
    0B80: 8B C8 66 C1 E0 10 8B D0 C3 E8 A6 21 23 C8 81 E2  // ..f........!#...
    0B90: 15 01 23 D1 66 C1 E2 10 8B D1 BB 05 00 E8 0C 20  // ..#.f.......... 
    0BA0: 66 25 00 F0 EA FE 66 0B C2 E8 0A 20 C3 66 50 53  // f%....f.... .fPS
    0BB0: 51 66 52 66 33 D2 33 DB 8A DC 8A E8 8A C8 80 E1  // QfRf3.3.........
    0BC0: 1F 66 BA 01 00 00 00 66 D3 E2 E8 DF 1F 66 0B C2  // .f.....f.....f..
    0BD0: F6 C5 20 75 03 66 33 C2 E8 DB 1F 66 5A 59 5B 66  // .. u.f3....fZY[f
    0BE0: 58 C3 66 50 53 BB 06 00 E8 C1 1F A8 10 75 09 BB  // X.fPS........u..
    0BF0: F0 16 E8 2B 26 3D 5A A5 5B 66 58 C3 B8 04 06 80  // ...+&=Z.[fX.....
    0C00: F1 01 C0 E1 05 0A C1 E8 A3 FF C3 53 66 50 BB F8  // ...........SfP..
    0C10: 16 E8 0C 26 8A C1 E8 67 25 66 58 5B C3 53 BB F8  // ...&...g%fX[.S..
    0C20: 16 E8 FC 25 83 E0 01 5B C3 BB 06 00 E8 7D 1F 66  // ...%...[.....}.f
    0C30: C1 E8 10 25 FF 0F C3 BB 06 00 E8 6F 1F 66 25 FF  // ...%.......o.f%.
    0C40: FF 00 F0 66 C1 E2 10 66 0B C2 E8 69 1F C3 53 66  // ...f...f...i..Sf
    0C50: 50 BB 07 00 E8 55 1F F6 C4 01 66 58 B0 06 74 02  // P....U....fX..t.
    0C60: B0 08 5B C3 53 BB 07 00 E8 41 1F 80 E4 FE 80 FD  // ..[.S....A......
    0C70: 06 74 03 80 CC 01 E8 3D 1F 5B C3 53 B8 06 06 C0  // .t.....=.[.S....
    0C80: E3 05 0A C3 E8 26 FF 5B C3 66 50 BB 06 00 E8 1B  // .....&.[.fP.....
    0C90: 1F 24 40 C0 E8 06 8A D8 66 58 C3 57 66 50 66 33  // .$@.....fX.WfPf3
    0CA0: C0 B9 08 00 FC F3 66 AB 66 58 5F E8 3E 01 0B C0  // ......f.fX_.>...
    0CB0: 75 09 E8 E3 05 74 3C 85 C1 74 F7 E8 A6 05 8D 9C  // u....t<..t......
    0CC0: 6A 01 E8 5B 25 26 89 05 8D 9C 6E 01 E8 51 25 26  // j..[%&....n..Q%&
    0CD0: 89 45 02 8D 9C B5 02 E8 46 25 02 C0 04 04 26 88  // .E......F%....&.
    0CE0: 45 06 26 88 45 07 26 88 45 08 B0 07 26 88 45 04  // E.&.E.&.E...&.E.
    0CF0: 0A C0 C3 32 C0 C3 C3 66 50 53 51 52 56 57 E8 E1  // ...2...fPSQRVW..
    0D00: FE 74 03 E8 D5 05 5F 5E 5A 59 5B 66 58 C3 33 C9  // .t...._^ZY[fX.3.
    0D10: E8 1C 22 75 48 66 BA FF FF 0C FF 66 33 C0 E8 F7  // .."uHf.....f3...
    0D20: 06 33 F6 E8 5C 05 74 18 E8 69 06 A9 C8 0E 74 F3  // .3..\.t..i....t.
    0D30: E8 43 07 A8 04 75 04 A8 18 74 E8 E8 7B 00 EB E3  // .C...u...t..{...
    0D40: E8 2C 00 75 03 E8 A4 00 33 F6 E8 35 05 74 0E E8  // .,.u....3..5.t..
    0D50: 42 06 85 C1 74 F4 51 E8 F9 07 59 EB ED C3 8D 5D  // B...t.Q...Y....]
    0D60: 28 66 C1 E3 10 8D 5C 28 B9 49 00 E8 0C 21 C3 66  // (f....\(.I...!.f
    0D70: 50 53 52 56 33 C9 33 D2 8D 36 48 0D E8 B6 06 A8  // PSRV3.3..6H.....
    0D80: 03 74 03 83 CA 01 66 C1 E8 10 8A 0C 80 F9 FF 74  // .t....f........t
    0D90: 15 66 A9 01 00 00 00 74 07 BB 01 00 D3 E3 0B D3  // .f.....t........
    0DA0: 66 D1 E8 46 EB E4 8B CA 0B C9 5E 5A 5B 66 58 C3  // f..F......^Z[fX.
    0DB0: 03 07 01 05 06 09 0A 0B FF 66 50 53 51 E8 D4 05  // .........fPSQ...
    0DC0: 0F BC D8 81 C3 78 0D 8A 0F 66 B8 01 00 00 00 66  // .....x...f.....f
    0DD0: D3 E0 66 BA FF FF FF FF E8 3D 06 59 5B 66 58 C3  // ..f......=.Y[fX.
    0DE0: 01 12 0B 10 09 13 14 11 0C 15 16 17 50 53 52 E8  // ............PSR.
    0DF0: 7D FF 75 13 B9 01 00 E8 38 1F 23 C8 75 19 33 C0  // }.u.....8.#.u.3.
    0E00: E8 95 04 8B C8 EB 10 83 F9 02 74 0B E8 7A FE 80  // ..........t..z..
    0E10: FB 01 75 03 83 E1 FD 5A 5B 58 C3 56 83 EC 04 8B  // ..u....Z[X.V....
    0E20: EC 66 33 C0 66 89 46 00 66 BA 00 F0 00 F0 E8 1A  // .f3.f.F.f.......
    0E30: FD 66 C1 E6 10 E8 60 04 0B C0 74 1E 85 C1 74 F5  // .f....`...t...t.
    0E40: 55 E8 56 00 5D 74 04 33 C8 EB EA E8 BB 05 66 3B  // U.V.]t.3......f;
    0E50: 56 00 76 E1 66 89 56 00 EB DB E8 DF FC 74 07 66  // V.v.f.V......t.f
    0E60: 8B 46 00 E8 05 00 83 C4 04 5E C3 33 F6 66 50 E8  // .F.......^.3.fP.
    0E70: 05 04 66 58 8D 9C D8 02 E8 05 23 66 8B D0 E8 BB  // ..fX......#f....
    0E80: FC E8 DD 18 8D 9C 1C 03 E8 95 23 38 D0 74 0A 8A  // ..........#8.t..
    0E90: C2 E8 EC 22 B0 02 E8 5F 05 C3 50 51 E8 C5 03 32  // ..."..._..PQ...2
    0EA0: C0 E8 54 05 E8 3A 03 E8 AB 00 8D 9C 40 03 E8 6F  // ..T..:......@..o
    0EB0: 23 38 E8 74 0A 8A C5 E8 C6 22 B0 02 E8 39 05 E8  // #8.t....."...9..
    0EC0: BD 00 E8 D8 00 75 73 E8 9E 00 8D 9C 4C 01 E8 4F  // .....us.....L..O
    0ED0: 23 8B C8 8B D3 8D 9C 00 03 E8 44 23 3B C1 74 05  // #.........D#;.t.
    0EE0: B0 02 E8 13 05 E8 65 0A 8D 9C 00 03 E8 4F 18 8D  // ......e......O..
    0EF0: 9C D8 02 E8 8A 22 66 C1 CE 10 8B FE 66 C1 CE 10  // ....."f.....f...
    0F00: E8 C9 00 E8 FF 00 E8 94 04 8A E9 8D 9C DC 02 32  // ...............2
    0F10: C9 E8 B0 22 E8 7D 04 66 25 FF 0F 00 00 E8 F9 03  // ...".}.f%.......
    0F20: 80 F9 01 75 04 66 C1 E0 10 59 58 66 BA FF FF FF  // ...u.f...YXf....
    0F30: FF 66 33 D0 E8 14 FC 33 D2 C3 E8 05 00 0C 01 59  // .f3....3.......Y
    0F40: 58 C3 53 66 50 8D 9C D4 02 E8 D4 22 8A C4 E8 2F  // X.SfP......".../
    0F50: 22 66 58 5B C3 53 66 50 8D 9C D4 02 E8 C1 22 8A  // "fX[.SfP......".
    0F60: E0 E8 1C 22 66 58 5B C3 E8 CE 03 E8 91 03 8A DD  // ..."fX[.........
    0F70: E8 6B 19 8D 9C 3C 03 8A E9 32 C9 E8 46 22 C3 83  // .k...<...2..F"..
    0F80: EC 08 8B EC E8 B2 03 E8 75 03 E8 FF 18 8A 6E 00  // ........u.....n.
    0F90: 8D 9C 4C 03 32 C9 E8 2B 22 83 C4 08 C3 33 C9 56  // ..L.2..+"....3.V
    0FA0: E8 23 03 0B F6 5E 74 0C FE C1 E8 A6 1E 38 C1 75  // .#...^t......8.u
    0FB0: EE 0C 01 C3 8D 9C D4 02 E8 65 22 38 C8 74 0A 8A  // .........e"8.t..
    0FC0: C1 E8 BC 21 B0 02 E8 2F 04 32 C0 C3 E8 0A 00 8D  // ...!.../.2......
    0FD0: 9C D0 02 32 C9 E8 EC 21 C3 8D 1D E8 42 22 66 8B  // ...2...!....B"f.
    0FE0: D0 8D 9C 02 03 E8 38 22 51 8B C8 8D 9C 06 03 E8  // ......8"Q.......
    0FF0: 2E 22 66 C1 E0 10 8B C1 59 66 3B C2 75 04 B5 00  // ."f.....Yf;.u...
    1000: EB 02 B5 02 C3 E8 6D 03 8D 9C 40 03 B1 03 E8 B3  // ......m...@.....
    1010: 21 E8 B2 06 8D 9C 40 03 B1 02 E8 A7 21 E8 DF 02  // !.....@.....!...
    1020: 80 FD 00 75 1D E8 94 00 66 81 FA F0 D2 00 00 75  // ...u....f......u
    1030: 06 66 BA 78 69 00 00 E8 B6 00 E8 EF 00 E8 AB 03  // .f.xi...........
    1040: EB 38 E8 81 03 E8 A3 03 66 52 E8 F7 02 0B D2 74  // .8......fR.....t
    1050: 07 E8 82 18 66 5A EB 22 E8 5E 03 E8 00 1B 66 5A  // ....fZ.".^....fZ
    1060: 51 E8 9B 02 80 FD 02 59 75 10 B5 04 66 81 FA 74  // Q......Yu...f..t
    1070: 40 00 00 76 05 B5 08 66 D1 EA 8D 9C 54 03 66 8B  // @..v...f....T.f.
    1080: C2 E8 FC 20 8D 9C 40 03 E8 95 21 8A E5 E8 F0 20  // ... ..@...!.... 
    1090: E8 1E 01 8D 9C 48 03 32 C9 E8 28 21 E8 9A 02 E8  // .....H.2..(!....
    10A0: 5D 02 E8 34 18 8D 9C 58 03 32 C9 E8 16 21 E8 88  // ]..4...X.2...!..
    10B0: 02 E8 4B 02 8D 9C 60 03 E8 EC 17 C3 53 8D 9C 29  // ..K...`.....S..)
    10C0: 01 E8 5C 21 66 33 D2 0A C0 75 05 BA 48 3F 5B C3  // ..\!f3...u..H?[.
    10D0: 8A D0 66 B8 8C 0A 00 00 66 F7 E2 66 8B F8 E8 58  // ..f.....f..f...X
    10E0: 02 B3 00 E8 3F 17 66 3B D7 76 03 66 8B D7 5B C3  // ....?.f;.v.f..[.
    10F0: B7 01 53 8D 9C 42 03 E8 26 21 8A C8 5B 66 52 E8  // ..S..B..&!..[fR.
    1100: 83 00 E8 C1 02 66 3B D1 66 5A 76 09 D0 E7 E8 07  // .....f;.fZv.....
    1110: 00 38 EF 72 DD 8A EF C3 53 8D 9C 2A 01 E8 00 21  // .8.r....S..*...!
    1120: 24 0F 8A E8 0A ED 75 02 B5 01 5B C3 51 83 EC 08  // $.....u...[.Q...
    1130: 8B EC 66 C7 46 00 48 3F 78 69 66 C7 46 04 F0 D2  // ..f.F.H?xif.F...
    1140: 00 00 E8 FF 01 0B D2 74 03 E8 9B 17 8A FD 53 8D  // .......t......S.
    1150: 9C 42 03 E8 CA 20 8A C8 5B E8 60 FF 66 33 C0 8B  // .B... ..[.`.f3..
    1160: 46 00 66 3B C2 73 19 66 8B D0 E8 18 00 E8 56 02  // F.f;.s.f......V.
    1170: 66 3B D1 72 05 83 C5 02 EB D4 66 33 D2 8B 56 00  // f;.r......f3..V.
    1180: 83 C4 08 59 C3 66 52 52 32 ED 83 C1 02 B8 06 00  // ...Y.fRR2.......
    1190: F7 E1 66 33 C9 8B C8 5A 51 66 33 C0 8B C2 8A CF  // ..f3...ZQf3.....
    11A0: 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66 8B C8 66 5A  // f..f...Yf..f..fZ
    11B0: C3 E8 90 01 0B D2 74 0B E8 16 00 0A ED 75 11 E8  // ......t......u..
    11C0: B8 16 C3 B5 00 E8 F1 01 E8 5F 19 75 03 E8 01 00  // ........._.u....
    11D0: C3 B5 00 8D 9C 31 01 E8 46 20 A8 01 74 02 B5 01  // .....1..F ..t...
    11E0: C3 53 E8 5F 01 66 C1 E2 10 E8 4D 01 8D 9C B8 02  // .S._.f....M.....
    11F0: E8 2D 20 8A E8 E8 5F 16 8A EB 5B C3 57 53 53 E8  // .- ..._...[.WSS.
    1200: DF FF E8 34 01 5B E8 A2 16 74 49 80 FD 00 75 24  // ...4.[...tI...u$
    1210: 53 E8 A8 FE E8 AF 04 8A CD E8 FC FE 8A FD E8 64  // S..............d
    1220: FF 5B E8 FB 1F 66 25 FF FF 00 00 66 3B C8 73 21  // .[...f%....f;.s!
    1230: 32 DB EB 20 80 FD 02 75 18 53 E8 7C 01 E8 FB 18  // 2.. ...u.S.|....
    1240: 5B 74 0E 8D 1D E8 D8 1F 3D 74 40 76 04 32 DB EB  // [t......=t@v.2..
    1250: 03 80 CB 01 5B 5F C3 53 E8 39 01 8B D8 E8 DC F8  // ....[_.S.9......
    1260: 85 C3 5B C3 53 8B F0 E8 C8 1A 23 F0 74 07 8B C6  // ..[.S.....#.t...
    1270: E8 69 19 8B F3 5B C3 E8 08 00 74 05 E8 D8 FF 74  // .i...[....t....t
    1280: F6 C3 33 C0 0B F6 74 03 E8 09 01 33 F6 E8 08 00  // ..3...t....3....
    1290: 74 03 E8 CF FF 0B F6 C3 57 53 E8 E0 1A 0B C0 74  // t.......WS.....t
    12A0: 09 8B 1D 83 C7 02 3B C3 75 F7 8B 1D 83 FB FF 74  // ......;.u......t
    12B0: 0E 83 C7 02 E8 7B 1A 85 D8 74 EF 8B C3 EB 02 33  // .....{...t.....3
    12C0: C0 0B C0 5B 5F C3 51 33 F6 8A E9 E8 A9 FF 74 07  // ...[_.Q3......t.
    12D0: E8 46 00 38 E9 75 F4 0B F6 59 C3 33 C0 E8 B8 FF  // .F.8.u...Y.3....
    12E0: 74 13 E8 7F FF 8B DE B9 FB 00 E8 78 1B 83 C6 08  // t..........x....
    12F0: E8 C2 19 EB E8 BB F0 16 B8 5A A5 E8 9A 1E C3 53  // .........Z.....S
    1300: 66 50 8D 9C 40 03 E8 17 1F 8A E8 66 58 5B C3 8D  // fP..@......fX[..
    1310: 9C 64 03 E8 0A 1F 0B C0 C3 53 66 50 8D 9C D4 02  // .d.......SfP....
    1320: E8 FD 1E 8A C8 66 58 5B C3 53 66 50 8D 9C D5 02  // .....fX[.SfP....
    1330: E8 ED 1E 8A C8 66 58 5B C3 53 8D 5C 14 E8 E0 1E  // .....fX[.S.\....
    1340: 8B D0 5B C3 53 66 50 8D 5C 16 E8 D3 1E 8B D0 66  // ..[.SfP.\......f
    1350: 58 5B C3 53 66 50 8D 9C 50 03 E8 C3 1E 66 8B D0  // X[.SfP..P....f..
    1360: 66 58 5B C3 53 66 50 8D 9C 54 03 E8 B2 1E 66 8B  // fX[.SfP..T....f.
    1370: D0 66 58 5B C3 53 66 50 8D 5C 10 E8 A2 1E 8B C8  // .fX[.SfP.\......
    1380: 66 58 5B C3 66 50 53 8D 9C 41 03 E8 92 1E 5B 8A  // fX[.fPS..A....[.
    1390: D8 66 58 C3 53 8D 5C 08 E8 85 1E 5B C3 53 50 8D  // .fX.S.\....[.SP.
    13A0: 9C 4C 03 E8 7A 1E 8A C8 58 5B C3 53 50 8D 9C 4D  // .L..z...X[.SP..M
    13B0: 03 E8 6C 1E 8A C8 58 5B C3 53 50 8D 5C 0C E8 5F  // ..l...X[.SP.\.._
    13C0: 1E 8B D0 58 5B C3 53 66 50 8D 9C 00 03 E8 50 1E  // ...X[.SfP.....P.
    13D0: 66 33 D2 8B D0 66 58 5B C3 8D 5C 04 E8 41 1E C3  // f3...fX[..\..A..
    13E0: 51 8D 5C 04 32 C9 E8 DB 1D 59 C3 8D 9C 50 03 E8  // Q.\.2....Y...P..
    13F0: 2E 1E 8B C2 E8 89 1D C3 53 51 8A E8 E8 DA FF 24  // ........SQ.....$
    1400: FD 0A E8 E8 DA FF 59 5B C3 66 50 8D 9C D8 02 E8  // ......Y[.fP.....
    1410: 0E 1E 66 8B D0 66 58 C3 53 66 50 66 51 66 8B C8  // ..f..fX.SfPfQf..
    1420: BB 00 00 E8 86 17 66 23 C2 66 0B C1 E8 87 17 66  // ......f#.f.....f
    1430: 59 66 58 5B C3 BB 00 00 E8 71 17 66 25 03 03 FF  // YfX[.....q.f%...
    1440: 00 C3 57 0B C0 75 10 33 F6 E8 36 FE 74 26 E8 25  // ..W..u.3..6.t&.%
    1450: 00 A8 04 74 F4 EB 13 8B C8 E8 D6 18 23 C1 74 14  // ...t........#.t.
    1460: E8 01 FE E8 10 00 A8 04 74 0A 5F 8D 5C 28 E8 2D  // ........t._.\(.-
    1470: 05 0B F6 C3 5F C3 E8 FC FE 0A C9 74 72 E8 39 FF  // ...._......tr.9.
    1480: E8 B4 16 74 30 0A ED 74 10 8A CD B5 02 E8 A0 19  // ...t0..t........
    1490: B1 02 8D 9C 48 01 E8 2B 1D E8 34 02 A8 04 74 15  // ....H..+..4...t.
    14A0: 8D 5C 28 E8 56 00 74 0D E8 0E FF E8 80 16 74 3F  // .\(.V.t.......t?
    14B0: 80 FD 02 74 3A 8D 5C 28 E8 38 00 E8 20 0B 33 C9  // ...t:.\(.8.. .3.
    14C0: 50 8D 9C 28 01 E8 58 1D 66 0B C0 74 03 B9 00 08  // P..(..X.f..t....
    14D0: 58 0A C0 75 13 8D 5C 28 E8 3F 00 75 0B 80 CD 02  // X..u..\(.?.u....
    14E0: E8 19 00 74 03 80 CD 04 8D 9C 48 01 E8 D5 1C E8  // ...t......H.....
    14F0: DE 01 C3 51 B9 49 00 E8 6B 19 59 C3 51 E8 1A 00  // ...Q.I..k.Y.Q...
    1500: 75 14 E8 9C 01 3C 01 75 0D B9 20 00 E8 27 00 75  // u....<.u.. ..'.u
    1510: 05 80 C9 01 EB 02 33 C9 59 C3 53 E8 02 1D 66 3D  // ......3.Y.S...f=
    1520: 00 FF FF FF 75 0E 83 C3 04 E8 F4 1C 66 3D FF FF  // ....u.......f=..
    1530: FF 00 75 00 5B C3 50 52 32 D2 E8 E3 1C 02 D0 02  // ..u.[.PR2.......
    1540: D4 66 C1 E8 10 02 D0 02 D4 83 C3 04 E2 EC 0A D2  // .f..............
    1550: 5A 58 C3 8D 9C 4C 01 E8 1F 01 E8 73 01 B5 13 A8  // ZX...L.....s....
    1560: 08 75 0C E8 53 FE 8A EA 80 FD 13 75 02 B5 03 8D  // .u..S......u....
    1570: 9C B8 02 66 33 C0 8A C5 E8 05 1C E8 16 FE A9 11  // ...f3...........
    1580: 00 74 37 B5 01 E8 22 01 E8 45 01 A8 04 75 17 55  // .t7..."..E...u.U
    1590: BD 00 00 B8 61 40 E8 F0 02 B8 45 40 E8 EA 02 5D  // ....a@....E@...]
    15A0: B5 02 E8 8A 00 C3 E8 2F 01 B5 02 8D 5C 28 E8 DD  // ......./....\(..
    15B0: 00 75 02 B5 01 E8 77 00 EB 67 A9 C8 0E 74 3E E8  // .u....w..g...t>.
    15C0: 0E 01 A8 08 74 08 8D 5C 28 E8 B4 00 74 B5 B5 02  // ....t..\(...t...
    15D0: E8 D7 00 E8 FA 00 A8 04 74 0B 8D 5C 28 E8 F8 00  // ........t..\(...
    15E0: E8 F8 02 EB 0A 8D 9C 68 01 B8 3C 6A E8 60 05 E8  // .......h..<j.`..
    15F0: D4 00 80 FD 00 75 37 B5 02 E8 C0 00 C3 A9 22 00  // .....u7.......".
    1600: 74 2C B5 04 E8 A3 00 8D 9C 68 01 56 E8 DD 19 8B  // t,.......h.V....
    1610: F7 E8 58 03 5E E8 85 19 E8 A1 00 8D 5C 28 E8 AB  // ..X.^.......\(..
    1620: 19 8D 9C 68 01 E8 4F 03 66 8B D1 E8 C0 07 C3 8D  // ...h..O.f.......
    1630: 9C B4 02 B1 02 E8 8C 1B B5 02 E8 7F 00 C3 8D 9C  // ................
    1640: 4C 01 E8 34 00 E8 88 00 A8 04 74 23 8D 5C 28 E8  // L..4......t#.\(.
    1650: 86 00 E8 97 19 8D 9C 68 01 06 0E 07 B9 07 00 E8  // .......h........
    1660: 3D 18 07 E8 60 00 E8 50 FD 8D 5C 28 E8 88 19 8D  // =...`..P..\(....
    1670: 5C 28 E8 37 19 E8 DB FE C3 B9 61 00 E8 E6 17 C3  // \(.7......a.....
    1680: 53 81 C3 05 01 E8 98 1B 24 06 3C 02 5B C3 E8 10  // S.......$.<.[...
    1690: 00 3D 01 04 75 0A 53 83 C3 18 E8 83 1B 5B A8 01  // .=..u.S......[..
    16A0: C3 53 83 C3 12 E8 78 1B 5B C3 8D 9C B4 02 32 C9  // .S....x.[.....2.
    16B0: E8 11 1B C3 8D 9C B4 02 E8 65 1B C3 8D 9C B4 02  // .........e......
    16C0: B1 01 E8 FF 1A C3 8D 9C B4 02 B1 01 E8 0D 1B C3  // ................
    16D0: 8D 9C 48 01 E8 49 1B C3 55 57 51 B9 08 00 BD 00  // ..H..I..UWQ.....
    16E0: 00 BB 08 00 2B D9 D1 E3 8D 58 4E E8 32 1B E8 98  // ....+....XN.2...
    16F0: 01 E2 EE 8D 5C 4B E8 27 1B B9 04 00 8B D0 BF FD  // ....\K.'........
    1700: 16 85 55 06 74 17 66 8B 05 8D 9A F4 01 E8 70 1A  // ..U.t.f.......p.
    1710: 8B 45 04 8D 9A F8 01 E8 7E 1A 83 C5 08 83 C7 08  // .E......~.......
    1720: E2 DF 8D 7C 5E B9 04 00 33 ED 8B DF E8 F1 1A 0B  // ...|^...3.......
    1730: C0 74 09 E8 12 01 E8 4C 00 83 C5 1C 83 C7 12 E2  // .t.....L........
    1740: E9 32 ED E8 76 FF 8D 5C 28 E8 55 FF 3D 01 04 75  // .2..v..\(.U.=..u
    1750: 10 83 C3 14 E8 C9 1A 24 70 C0 E8 04 8A E8 E8 5B  // .......$p......[
    1760: FF 59 5F 5D C3 20 03 58 02 3C 00 01 00 00 04 00  // .Y_]. .X.<......
    1770: 03 3C 00 00 08 00 05 00 04 4B 00 00 01 80 02 E0  // .<.......K......
    1780: 01 3C 00 20 00 51 8D 1D E8 95 1A 8D 9A 68 01 E8  // .<. .Q.......h..
    1790: 06 1A 8D 5D 02 E8 88 1A 8D 9A 6A 01 E8 89 00 8D  // ...]......j.....
    17A0: 5D 05 E8 7B 1A 8D 9A 6E 01 E8 7C 00 8D 5D 08 E8  // ]..{...n..|..]..
    17B0: 6E 1A 8B C8 8A DC 66 C1 C8 10 8A D0 80 E2 0F 8A  // n.....f.........
    17C0: F0 C0 EE 04 8A EC C0 E5 06 8A FC C0 E7 04 80 E7  // ................
    17D0: 03 80 E4 0F C0 E4 04 0A D4 80 E2 3F 80 E4 C0 C0  // ...........?....
    17E0: EC 02 0A F4 8B C3 8D 9A 74 01 E8 AB 19 8D 9A 72  // ........t......r
    17F0: 01 8B C1 E8 A2 19 8D 9A 76 01 33 C0 8A C6 E8 97  // ........v.3.....
    1800: 19 8D 9A 78 01 33 C0 8A C2 E8 8C 19 8D 5D 0C E8  // ...x.3.......]..
    1810: 0E 1A 8D 9A 7A 01 E8 0F 00 8D 5D 0F E8 01 1A 8D  // ....z.....].....
    1820: 9A 7E 01 E8 72 19 59 C3 8B C8 8A D4 66 C1 C8 10  // .~..r.Y.....f...
    1830: 8A F0 80 E6 0F 8A E8 C0 ED 04 8B C1 E8 59 19 83  // .............Y..
    1840: C3 02 8B C2 E8 51 19 C3 8D 5D 11 E8 D2 19 8A E0  // .....Q...]......
    1850: BA 06 02 C0 E8 07 74 03 80 CA 80 8A C4 C0 E8 03  // ......t.........
    1860: 24 03 3C 02 75 03 80 CA 40 3C 03 75 12 8A C4 D0  // $.<.u...@<.u....
    1870: E8 A8 01 74 03 80 E2 FD A8 02 74 03 80 E2 FB 8B  // ...t......t.....
    1880: C2 8D 9A 80 01 E8 10 19 C3 3C 01 74 3D 8B D0 0F  // .........<.t=...
    1890: B6 C6 24 3F 04 3C 8D 9A F8 01 E8 FB 18 0F B6 C2  // ..$?.<..........
    18A0: 83 C0 1F C1 E0 03 8D 9A F4 01 E8 EB 18 0F B6 DE  // ................
    18B0: C1 EB 06 C1 E3 02 2E F7 A7 65 18 2E F7 B7 63 18  // .........e....c.
    18C0: 8D 9A F6 01 E8 D1 18 83 C5 08 C3 01 00 01 00 04  // ................
    18D0: 00 03 00 05 00 04 00 10 00 09 00 57 8D 9C 68 01  // ...........W..h.
    18E0: 8B FB 8B DF E8 90 00 0B C9 74 44 8D 5D 18 E8 2F  // .........tD.]../
    18F0: 19 A8 80 74 0D 8B DF 56 8D 36 C9 18 E8 6D 00 5E  // ...t...V.6...m.^
    1900: EB 28 66 8B D1 E8 E6 04 8D 9C A6 00 E8 11 19 3C  // .(f............<
    1910: 01 75 17 66 81 F9 80 07 38 04 74 09 66 81 F9 00  // .u.f....8.t.f...
    1920: 05 D0 02 75 05 B5 03 E8 80 FD 83 C7 1C EB B3 5F  // ...u..........._
    1930: C3 8C 0A D0 02 8A 00 E0 01 2D 00 10 00 3E 00 09  // .........-...>..
    1940: 00 06 00 00 00 00 00 00 00 06 00 00 00 50 53 51  // .............PSQ
    1950: B9 07 00 53 8B DA E8 C7 18 83 F8 00 5B 74 09 66  // ...S........[t.f
    1960: C1 E3 10 8B DA E8 12 15 59 5B 58 C3 51 53 B9 07  // ........Y[X.QS..
    1970: 00 E8 1F 15 5B 59 C3 66 50 53 83 C3 06 E8 A0 18  // ....[Y.fPS......
    1980: 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8 92 18 8B C8  // [..f...S........
    1990: 5B 66 58 C3 8D 9C 48 01 32 C9 E8 27 18 C3 57 B9  // [fX...H.2..'..W.
    19A0: 20 00 E8 FA 14 5F C3 E8 0A FD 3C 01 75 57 8D 9C  //  ...._....<.uW..
    19B0: B6 02 E8 6B 18 A8 02 74 71 66 C1 CE 10 E8 F3 03  // ...k...tqf......
    19C0: 66 C1 CE 10 0A C0 75 0E 8D 9C 4C 01 B8 3C 6A E8  // f.....u...L..<j.
    19D0: 7D 01 0C 01 EB 7A 8D 9C 68 01 B0 00 E8 36 01 75  // }....z..h....6.u
    19E0: 07 B0 00 E8 DF 00 74 68 8D 9C 68 01 B0 01 E8 24  // ......th..h....$
    19F0: 01 75 52 B0 01 E8 B0 00 75 56 B0 00 E8 A9 00 EB  // .uR.....uV......
    1A00: 4F 0B F6 EB 4B 3C 04 74 21 3C 03 74 1D 66 C1 CE  // O...K<.t!<.t.f..
    1A10: 10 E8 9F 03 66 C1 CE 10 0A C0 74 07 B0 01 E8 A4  // ....f.....t.....
    1A20: 00 75 2D B0 00 E8 9D 00 75 26 8D BC 68 01 8D 1D  // .u-.....u&..h...
    1A30: E8 ED 17 0B C0 74 19 8B DF B0 00 E8 D7 00 75 05  // .....t........u.
    1A40: 83 C7 1C EB E9 8B D3 8D 9C 4C 01 E8 FF FE 0B F6  // .........L......
    1A50: C3 57 53 51 E8 44 13 3B 55 02 75 18 66 C1 CA 10  // .WSQ.D.;U.u.f...
    1A60: 8B DA 66 C1 CA 10 3B 5D 06 75 09 0A C0 74 0E 3A  // ..f...;].u...t.:
    1A70: 45 1B 74 09 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B  // E.t......3......
    1A80: D2 59 5B 5F C3 51 66 52 E8 10 13 3A 65 1A 75 09  // .Y[_.QfR...:e.u.
    1A90: 0A C0 74 0E 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF  // ..t.:E.t......3.
    1AA0: EB 00 0B FF 66 5A 59 C3 51 E8 EF 12 56 8D 9C 4C  // ....fZY.Q...V..L
    1AB0: 01 8B F7 E8 B6 FE 5E E8 5B 00 75 07 83 C7 1C E2  // ......^.[.u.....
    1AC0: EB 33 FF 59 C3 8D BC F4 01 8A C8 8D 1D E8 50 17  // .3.Y..........P.
    1AD0: 0B C0 74 40 66 50 E8 DB FB 3C 01 66 58 74 05 3D  // ..t@fP...<.fXt.=
    1AE0: 40 06 73 2B 66 8B D0 8D 5D 04 E8 33 17 E8 61 FF  // @.s+f...]..3..a.
    1AF0: 74 1D 8D 9C 4C 01 56 8B F2 E8 70 FE 5E 53 8D 9C  // t...L.V...p.^S..
    1B00: 62 01 33 C0 E8 91 16 5B 8A C1 E8 08 00 75 05 83  // b.3....[.....u..
    1B10: C7 08 EB B7 C3 66 51 50 53 66 C1 CE 10 8B DE 66  // .....fQPSf.....f
    1B20: C1 CE 10 E8 FA 16 5B 66 8B D0 E8 4A FE 58 3C 01  // ......[f...J.X<.
    1B30: 75 0A 66 3B CA 75 13 E8 C2 F6 75 10 3B CA 72 0A  // u.f;.u....u.;.r.
    1B40: 66 3B CA 72 05 E8 B4 F6 75 02 32 C0 66 59 C3 56  // f;.r....u.2.fY.V
    1B50: 57 E8 31 FF 8B F7 E8 13 FE 5F 5E C3 66 50 53 66  // W.1......_^.fPSf
    1B60: 51 52 57 56 51 8B DE B9 08 00 E8 F8 12 59 8D 5C  // QRWVQ........Y.\
    1B70: 08 8B C1 66 C1 E0 10 8A C2 E8 04 16 F6 C2 03 75  // ...f...........u
    1B80: 24 8B C1 24 7F BF 3F 1C 80 3D FF 0F 84 0F 01 3A  // $..$..?..=.....:
    1B90: 05 75 0D 66 8B 45 01 66 B9 00 05 02 00 E9 96 00  // .u.f.E.f........
    1BA0: 83 C7 05 EB E3 F6 C2 01 74 25 8B C1 E8 61 01 0F  // ........t%...a..
    1BB0: 84 EB 00 33 C9 8A CC 8A D0 0A C0 75 12 8D 5C 08  // ...3.......u..\.
    1BC0: 66 25 FF FF 00 00 66 C1 E0 08 E8 B3 15 EB B2 8A  // f%....f.........
    1BD0: E1 8A CA 80 E1 0C C0 E9 02 80 E2 F0 C0 EA 04 8A  // ................
    1BE0: EA 80 FC 70 72 2A 80 FC 75 73 25 80 EC 70 8A C4  // ...pr*..us%..p..
    1BF0: 32 E4 50 E8 21 02 8B D8 58 38 D8 72 05 33 C0 E9  // 2.P.!...X8.r.3..
    1C00: 9C 00 E8 19 02 E8 18 16 0B C0 0F 84 90 00 EB 1B  // ................
    1C10: 32 C0 E8 70 FE 0F 84 85 00 8D 5C 16 8B 05 E8 77  // 2..p......\....w
    1C20: 15 8B 45 06 66 C1 E0 10 8B 45 02 50 E8 00 0B 66  // ..E.f....E.P...f
    1C30: C1 E1 10 8B C8 58 8D 1C E8 45 15 66 50 8D 5C 04  // .....X...E.fP.\.
    1C40: 66 8B C1 E8 3A 15 66 58 66 C1 E8 10 66 81 E1 FF  // f...:.fXf...f...
    1C50: FF 00 00 66 F7 E1 66 50 8D 5C 06 E8 C2 15 8B C8  // ...f..fP.\......
    1C60: 66 58 66 D3 E0 66 C1 E8 10 40 8D 5C 14 E8 28 15  // fXf..f...@.\..(.
    1C70: BF 90 1C 83 F9 01 74 11 BF 98 1C 81 F9 01 01 74  // ......t........t
    1C80: 08 BF A0 1C 83 F9 02 75 15 8D 5C 0C 66 8B 05 E8  // .......u..\.f...
    1C90: EE 14 8D 5C 10 66 8B 45 04 E8 E4 14 0B DB 5E 5F  // ...\.f.E......^_
    1CA0: 5A 66 59 5B 66 58 C3 00 40 01 90 01 01 40 01 90  // ZfY[fX..@....@..
    1CB0: 01 02 80 02 90 01 03 80 02 90 01 04 40 01 90 01  // ............@...
    1CC0: 05 40 01 90 01 06 80 02 90 01 07 D0 02 5E 01 0D  // .@...........^..
    1CD0: 40 01 90 01 0E 80 02 90 01 0F 80 02 5E 01 10 80  // @...........^...
    1CE0: 02 5E 01 11 80 02 E0 01 12 80 02 E0 01 13 80 02  // .^..............
    1CF0: 90 01 62 80 02 E0 01 FF 05 0A 05 05 05 00 00 00  // ..b.............
    1D00: 05 0B 06 05 05 00 00 00 08 10 08 08 08 00 00 00  // ................
    1D10: 56 E8 77 12 80 E4 01 3B 04 74 09 83 C6 04 E2 F7  // V.w....;.t......
    1D20: 33 C0 EB 05 8B 44 02 0B C0 5E C3 57 53 50 E8 5A  // 3....D...^.WSP.Z
    1D30: 12 83 E9 0A E8 E0 00 83 F8 05 76 03 B8 05 00 D1  // ..........v.....
    1D40: E0 03 C8 FB A5 83 C6 02 E2 FA B8 FF FF AB 58 5B  // ..............X[
    1D50: 5F C3 66 53 51 66 52 E8 41 00 E8 77 00 66 C1 E8  // _.fSQfR.A..w.f..
    1D60: 10 66 0F B7 D8 66 B8 00 00 00 03 66 D3 E8 66 33  // .f...f.....f..f3
    1D70: D2 66 F7 F3 E8 B8 09 66 5A 59 66 5B C3 53 66 50  // .f.....fZYf[.SfP
    1D80: BB 07 00 E8 26 0E 0A C0 66 58 5B C3 53 66 50 BB  // ....&...fX[.SfP.
    1D90: 07 00 E8 17 0E A8 01 66 58 5B C3 53 66 50 8D 5C  // .......fX[.SfP.\
    1DA0: 06 E8 7C 14 8A C8 66 58 5B C3 51 B9 08 00 E8 C9  // ..|...fX[.Q.....
    1DB0: 10 59 C3 53 8D 5C 08 E8 66 14 24 03 5B C3 8D 5C  // .Y.S.\..f.$.[..\
    1DC0: 09 E8 5C 14 C3 51 53 B1 01 8A E8 8D 5C 08 E8 F3  // ..\..QS.....\...
    1DD0: 13 5B 59 C3 53 8D 1C E8 46 14 5B C3 53 8D 5C 04  // .[Y.S...F.[.S.\.
    1DE0: E8 3D 14 5B C3 53 8D 5C 16 E8 34 14 5B C3 53 66  // .=.[.S.\..4.[.Sf
    1DF0: 52 33 C0 E8 5B FC 66 5A 75 1B E8 34 00 74 16 E8  // R3..[.fZu..4.t..
    1E00: 15 00 40 83 F8 05 73 0D E8 75 13 48 E8 0F 00 66  // ..@...s..u.H...f
    1E10: 8B C2 E8 6B 13 5B C3 BB 00 1E E8 03 14 C3 BB 08  // ...k.[..........
    1E20: 1E C1 E0 03 03 D8 C3 BB 00 1E B9 32 00 E8 35 10  // ...........2..5.
    1E30: C3 51 E8 E2 FF 0B C0 74 12 8B C8 BB 08 1E E8 DF  // .Q.....t........
    1E40: 13 66 3B C2 74 07 83 C3 08 E2 F3 0B DB 59 C3 C3  // .f;.t........Y..
    1E50: C3 00 BB 20 DF E8 69 35 E8 BE F4 B5 01 E8 2B 07  // ... ..i5......+.
    1E60: C3 BB 00 DF E8 5A 35 E8 AF F4 B5 00 E8 1C 07 C3  // .....Z5.........
    1E70: 80 F9 00 75 0A E8 E1 0F 8A C8 B5 02 E8 E5 08 0B  // ...u............
    1E80: F6 74 29 E8 93 F4 B5 01 E8 14 07 56 33 F6 B5 00  // .t)........V3...
    1E90: E8 5D 06 5E B5 01 E8 04 F5 E8 C8 08 E8 85 09 E8  // .].^............
    1EA0: 77 F4 8D 9C 00 03 E8 FD 06 E8 46 07 66 C1 CE 10  // w.........F.f...
    1EB0: B5 01 E8 3B 06 E8 06 FF A8 40 75 07 32 C0 B5 01  // ...;.....@u.2...
    1EC0: E8 4B 08 66 C1 CE 10 C3 E8 4E F4 B5 01 E8 96 06  // .K.f.....N......
    1ED0: B5 00 E8 CA 06 E8 2D 07 B1 0F E8 16 0A B1 10 E8  // ......-.........
    1EE0: 11 0A E8 2B 00 C3 E8 7A 00 E8 3D F4 B5 00 E8 75  // ...+...z..=....u
    1EF0: 06 B5 00 E8 A9 06 E8 B2 F4 E8 5D 0F 38 C1 74 0F  // ..........].8.t.
    1F00: 80 F9 08 72 05 80 F9 0B 76 05 B5 03 E8 55 08 C3  // ...r....v....U..
    1F10: 53 66 50 BB 02 00 E8 93 0C 66 A9 00 00 01 00 66  // SfP......f.....f
    1F20: 58 5B 75 3E E8 1D F4 0B D2 74 0C E8 AB F4 3C 01  // X[u>.....t....<.
    1F30: 74 05 B1 0F E8 FA 09 B1 0C E8 75 00 B1 01 E8 28  // t.........u....(
    1F40: 0A E8 BB F3 80 FD 00 75 0D E8 E6 01 B1 0D E8 A2  // .......u........
    1F50: 09 B1 03 E8 5B 00 E8 EB F3 0B D2 74 05 B1 01 E8  // ....[......t....
    1F60: CF 09 C3 E8 DE F3 0B D2 74 05 B1 00 E8 C2 09 B1  // ........t.......
    1F70: 02 E8 3D 00 E8 62 F4 A8 01 74 0D E8 81 F3 80 FD  // ..=..b...t......
    1F80: 00 75 05 B0 02 E8 12 04 B1 00 E8 DC 09 B1 0D E8  // .u..............
    1F90: 1F 00 C3 B1 07 E8 D1 09 E8 A9 F3 0B D2 75 0C E8  // .............u..
    1FA0: 17 F4 E8 85 0B 75 09 E8 6D 0A C3 B1 07 E8 81 09  // .....u..m.......
    1FB0: C3 E8 05 F4 E8 73 0B 75 24 51 E8 AC 09 59 80 F9  // .....s.u$Q...Y..
    1FC0: 0C 75 1A 33 D2 56 83 C6 08 E8 9C 0B 5E 0A C0 75  // .u.3.V......^..u
    1FD0: 0C B9 0A 00 E8 DF 0E 42 83 FA 3C 75 E8 C3 56 83  // .......B..<u..V.
    1FE0: C6 08 E8 24 0B 5E E8 5B F3 0B D2 74 03 E8 99 08  // ...$.^.[...t....
    1FF0: 80 FD 01 0F 84 D1 00 80 FD 02 0F 85 F2 00 B1 0C  // ................
    2000: E8 AE FF 56 83 C6 08 E8 5E 0B 5E 0A C0 0F 84 DF  // ...V....^.^.....
    2010: 00 E8 DF 00 0A DB 0F 85 D6 00 8D 9C 35 01 E8 FF  // ............5...
    2020: 11 A8 01 74 03 E8 7F 03 E8 19 F3 0B D2 74 05 B1  // ...t.........t..
    2030: 14 E8 FD 08 66 33 C9 E8 3B F3 66 BA 50 01 40 50  // ....f3..;.f.P.@P
    2040: 66 C1 C9 10 8A C1 66 C1 C9 10 E8 15 0A 0F 85 9F  // f.....f.........
    2050: 00 66 BA 50 01 50 4F 52 E8 E9 F2 80 FA 22 5A 74  // .f.P.POR....."Zt
    2060: 0D 8D 9C 2D 01 E8 B8 11 24 06 3C 02 75 02 B6 02  // ...-....$.<.u...
    2070: 8D 5C 28 66 C1 C9 10 03 D9 66 C1 C9 10 E8 E2 09  // .\(f.....f......
    2080: 75 6E 8A DF 32 FF 66 C1 C9 10 03 CB 66 C1 C9 10  // un..2.f.....f...
    2090: 66 BA 50 01 10 30 33 DB E8 C7 09 75 53 66 C1 C9  // f.P..03....uSf..
    20A0: 10 8B C1 66 C1 C9 10 0B C0 74 45 83 F8 10 75 0F  // ...f.....tE...u.
    20B0: 8D 5C 28 E8 6A 11 66 0B C0 0F 85 7D FF EB 31 3D  // .\(.j.f....}..1=
    20C0: 80 00 0F 82 74 FF EB 25 E8 AA F2 8A E9 B1 A0 BA  // ....t..%........
    20D0: 00 80 BF 32 00 8D 5C 28 E8 5C 09 80 FF 01 74 0D  // ...2..\(.\....t.
    20E0: B1 A2 8D 5C 28 E8 4F 09 80 FF 01 75 03 B0 00 C3  // ...\(.O....u....
    20F0: B0 01 C3 E8 2B 00 74 0C B0 01 E8 9D 02 75 21 E8  // ....+.t......u!.
    2100: 1F 00 75 1C 66 BA 0C 00 90 43 8D 9C 30 01 E8 51  // ..u.f....C..0..Q
    2110: 09 66 BA 20 00 90 41 8D 9C 34 01 E8 44 09 33 DB  // .f. ..A..4..D.3.
    2120: C3 E8 51 F2 66 BA 00 00 90 47 8D 9C 28 01 E8 31  // ..Q.f....G..(..1
    2130: 09 C3 E8 A4 F2 3C 01 75 0E E8 ED 02 80 FD 01 75  // .....<.u.......u
    2140: 06 B5 02 E8 12 03 C3 8D 9C AC 03 B9 10 00 E8 14  // ................
    2150: 0D B0 01 E8 44 02 74 08 B5 04 E8 11 03 E9 19 01  // ....D.t.........
    2160: B1 08 E8 8E 07 E8 66 02 B1 09 E8 86 07 E8 AC 01  // ......f.........
    2170: 8D 9C B8 03 66 33 C0 E8 06 10 E8 47 01 B9 90 01  // ....f3.....G....
    2180: E8 28 0D B0 01 E8 F7 01 B5 02 E8 D5 02 E8 5B 01  // .(............[.
    2190: E8 E7 02 E8 C7 01 B5 03 E8 C7 02 33 C9 E8 E7 00  // ...........3....
    21A0: F6 C5 01 75 2E B5 02 E8 B8 02 E8 07 01 F6 C5 04  // ...u............
    21B0: 74 08 B5 01 E8 B7 02 E9 BF 00 8A FD 80 E7 03 E8  // t...............
    21C0: CF 00 80 E3 03 38 FB 75 07 E8 33 01 0F 84 A9 00  // .....8.u..3.....
    21D0: E8 54 01 FE C1 E8 AC F1 38 D9 75 C1 8D 9C AC 03  // .T......8.u.....
    21E0: E8 3D 10 3C 03 74 05 E8 DA 00 EB A1 8D 9C B0 03  // .=.<.t..........
    21F0: 66 33 C0 E8 8A 0F 8D 9C 2A 01 E8 23 10 A8 40 74  // f3......*..#..@t
    2200: 0C B1 13 E8 ED 06 B0 03 E8 74 01 EB 0A B1 0A E8  // .........t......
    2210: E1 06 B0 02 E8 68 01 B5 04 E8 46 02 E8 CC 00 E8  // .....h....F.....
    2220: 58 02 E8 38 01 B5 05 E8 38 02 33 C9 E8 58 00 80  // X..8....8.3..X..
    2230: FD 07 75 05 E8 73 00 75 27 51 B5 04 E8 23 02 59  // ..u..s.u'Q...#.Y
    2240: F6 C5 01 75 07 B5 03 E8 24 02 EB 2D E8 65 00 8A  // ...u....$..-.e..
    2250: D5 E8 D3 00 E8 5D 00 38 EA 75 05 E8 A1 00 74 19  // .....].8.u....t.
    2260: FE C1 E8 1F F1 38 D9 75 C3 8D 9C AC 03 E8 B0 0F  // .....8.u........
    2270: 3C 04 75 05 E8 4D 00 EB A3 B0 00 E8 01 01 B1 0B  // <.u..M..........
    2280: E8 70 06 E8 A3 01 C3 8D 9C C0 03 E8 0F 00 8A E8  // .p..............
    2290: C3 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8 7F  // .S.......[...Q..
    22A0: 0F C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8 6F  // ......$.Y......o
    22B0: 0F A8 01 C3 8D 9C B8 03 E8 21 0F C3 8D 9C B8 03  // .........!......
    22C0: E8 01 0F C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02 8A  // ....3.3....8.v..
    22D0: D5 FE C1 E8 AE F0 38 D9 72 EE 33 C9 8A EA 8D 9C  // ......8.r.3.....
    22E0: 5C 03 E8 DF 0E B1 0B E8 7F 06 C3 E8 87 F0 8D 9C  // \...............
    22F0: B8 03 E8 2B 0F 66 BA 03 01 80 83 E8 64 07 C3 51  // ...+.f......d..Q
    2300: 53 8D 9C B0 03 E8 D4 0E FE C5 E8 B7 0E 80 FD 06  // S...............
    2310: 72 07 B5 02 E8 57 01 33 C9 5B 59 C3 66 33 C0 8D  // r....W.3.[Y.f3..
    2320: 9C B0 03 E8 5A 0E C3 32 ED E8 65 FF 80 E3 0C C0  // ....Z..2..e.....
    2330: EB 02 B7 03 2A FB C0 E3 03 8A EB 80 FB 18 72 03  // ....*.........r.
    2340: 80 CD 20 E8 4B FF 80 E3 03 38 FB 72 02 8A DF 80  // .. .K....8.r....
    2350: FB 03 75 03 80 CD 04 0A EB E8 60 FF C3 E8 15 F0  // ..u.......`.....
    2360: 8D 9C C0 03 66 BA 02 02 90 45 E8 F5 06 C3 E8 04  // ....f....E......
    2370: F0 66 BA 00 01 90 42 8D 9C B4 03 E8 E4 06 C3 E8  // .f....B.........
    2380: F3 EF 66 BA 02 01 80 50 E8 D7 06 C3 E8 D5 EF 8B  // ..f....P........
    2390: C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 D8 EF 66 BA 00  // .f3..........f..
    23A0: 06 80 50 E8 BC 06 C3 E8 CB EF 66 BA 11 01 80 50  // ..P.......f....P
    23B0: B0 04 E8 AD 06 C3 E8 BC EF 66 BA 00 06 90 40 8D  // .........f....@.
    23C0: 9C C8 03 E8 9C 06 8D 9C C8 03 E8 53 0E C3 E8 BB  // ...........S....
    23D0: FF E8 B0 EF 8A E3 80 CC 80 50 E8 98 EF 58 66 BA  // .........P...Xf.
    23E0: 00 01 80 61 E8 7B 06 33 C9 E8 23 EF 0B C0 74 02  // ...a.{.3..#...t.
    23F0: B5 10 8D 9C BC 03 E8 CB 0D 8A C5 E8 77 EF 66 BA  // ............w.f.
    2400: 07 01 80 50 E8 5B 06 E8 AF EF E8 21 07 75 19 8D  // ...P.[.....!.u..
    2410: 9C 48 03 E8 0A 0E 0A C0 74 0E E8 58 EF 66 BA 0A  // .H......t..X.f..
    2420: 01 80 50 B0 01 E8 3A 06 C3 E8 42 FF E8 2E FF E8  // ..P...:...B.....
    2430: 84 FF 3C 01 75 1C E8 71 FE 74 17 33 C9 E8 47 FE  // ..<.u..q.t.3..G.
    2440: 80 FD 07 75 0D FE C1 E8 3A EF 38 D9 75 EF B5 01  // ...u....:.8.u...
    2450: EB 02 B5 00 E8 01 00 C3 8D 9C AC 03 B1 02 E8 63  // ...............c
    2460: 0D C3 51 8D 9C AC 03 32 C9 E8 58 0D 59 C3 51 8D  // ..Q....2..X.Y.Q.
    2470: 9C AC 03 B1 01 E8 4C 0D 59 C3 8D 9C 32 01 E8 9F  // ......L.Y...2...
    2480: 0D 0A C0 75 15 B9 64 00 8D 9C AC 03 E8 91 0D 3C  // ...u..d........<
    2490: 02 74 03 B9 90 01 E8 12 0A C3 32 E4 B1 04 33 D2  // .t........2...3.
    24A0: F6 E1 8B C8 E8 0F 0A C3 51 8D 5C 14 E8 71 0D 66  // ........Q.\..q.f
    24B0: C1 E0 10 E8 98 01 59 C3 33 C9 E8 96 09 38 C1 73  // ......Y.3....8.s
    24C0: 05 B5 00 E8 A7 00 B5 00 E8 9B 00 FE C1 E8 86 09  // ................
    24D0: 38 C1 72 E6 B1 14 8A E9 E8 7E 09 38 C1 74 05 B5  // 8.r......~.8.t..
    24E0: 03 E8 80 02 FE C1 E8 67 09 04 14 38 C1 76 E7 C3  // .......g...8.v..
    24F0: 83 EC 0C 8B EC 0B F6 74 29 E8 D8 F8 66 C1 C8 10  // .......t)...f...
    2500: 80 FD 10 75 06 8D 5C 18 E8 15 0D 66 89 46 00 8D  // ...u..\....f.F..
    2510: 5C 04 E8 0B 0D 66 89 46 04 8D 5C 08 E8 01 0D 88  // \....f.F..\.....
    2520: 46 0A 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00  // F..N...f......+.
    2530: E8 7B 08 83 C4 0C C3 33 DB 83 EC 08 8B EC 89 5E  // .{.....3.......^
    2540: 00 8C D0 66 C1 E0 10 8B C4 BB 01 00 E8 5F 08 8B  // ...f........._..
    2550: EC 8B 4E 00 8B 56 02 66 8B 46 04 83 C4 08 C3 BB  // ..N..V.f.F......
    2560: 25 00 E8 0F 00 C3 BB 23 00 E8 08 00 C3 BB 0D 00  // %......#........
    2570: E8 01 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1  // ..........N...f.
    2580: E0 10 8B C4 E8 27 08 83 C4 04 C3 BB 22 00 E8 E3  // .....'......"...
    2590: FF 80 FD 01 74 08 B5 01 BB 06 00 E8 D6 FF C3 BB  // ....t...........
    25A0: 2C 00 E8 CF FF C3 E8 77 0C 66 A9 00 00 FF FF 74  // ,......w.f.....t
    25B0: 40 83 EC 18 8B EC 55 51 B9 04 00 83 C3 02 E8 5F  // @.....UQ......._
    25C0: 0C 66 89 46 00 83 C5 04 83 C3 04 E2 F1 83 C3 04  // .f.F............
    25D0: E8 4D 0C 66 C1 C8 10 66 89 46 00 59 5D 88 4E 14  // .M.f...f.F.Y].N.
    25E0: 8C D0 66 C1 E0 10 8B C4 BB 31 00 E8 C0 07 83 C4  // ..f......1......
    25F0: 18 C3 E8 24 ED 8D 9C D0 02 E8 24 0C 8A E8 BB 21  // ...$......$....!
    2600: 00 E8 70 FF C3 8D 9C 3C 03 E8 14 0C 8A F8 E8 EE  // ..p....<........
    2610: EC 8A DD 53 8D 9C 42 03 E8 05 0C 8A E8 5B E8 F8  // ...S..B......[..
    2620: EC E8 95 ED E8 07 05 75 02 B3 01 83 EC 04 8B EC  // .......u........
    2630: 88 4E 00 88 7E 01 88 5E 02 88 6E 03 8C D0 66 C1  // .N..~..^..n...f.
    2640: E0 10 8B C4 BB 2A 00 E8 64 07 83 C4 04 C3 83 EC  // .....*..d.......
    2650: 10 8B EC 66 8B C8 66 33 C0 66 89 46 04 BB 00 17  // ...f..f3.f.F....
    2660: E8 1D 0B 66 B8 00 80 20 50 66 89 46 0C 66 33 C0  // ...f... Pf.F.f3.
    2670: 66 89 46 08 56 E8 11 07 66 8B 44 04 66 50 66 C1  // f.F.V...f.D.fPf.
    2680: E8 16 88 46 08 66 58 66 C1 E0 0A 66 05 00 17 00  // ...F.fXf...f....
    2690: 00 66 89 46 00 5E 8C D0 66 C1 E0 10 8B C4 BB 35  // .f.F.^..f......5
    26A0: 00 E8 0A 07 8B EC 66 B8 00 80 00 00 66 2B C8 66  // ......f.....f+.f
    26B0: 89 46 04 66 05 00 00 20 40 66 89 46 0C 66 33 C0  // .F.f... @f.F.f3.
    26C0: 66 89 46 08 66 89 46 00 8C D0 66 C1 E0 10 8B C4  // f.F.f.F...f.....
    26D0: BB 35 00 E8 D8 06 8B EC 66 8B 46 0C 66 25 FF FF  // .5......f.F.f%..
    26E0: 1F 00 66 01 46 04 66 3B C8 76 1F 66 2B C8 66 8B  // ..f.F.f;.v.f+.f.
    26F0: 46 04 66 3D 00 FF 01 00 76 06 66 B8 00 FF 01 00  // F.f=....v.f.....
    2700: 66 3B C8 73 AE 66 8B C1 EB A9 83 C4 10 C3 83 EC  // f;.s.f..........
    2710: 08 8B EC 89 4E 00 66 89 56 02 89 5E 06 8C D0 66  // ....N.f.V..^...f
    2720: C1 E0 10 8B C4 BB 2D 00 E8 83 06 83 C4 08 C3 3D  // ......-........=
    2730: C0 7F 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8  // ..v.......?$..Q.
    2740: DE 0A 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 D1 0A 03  // ..f3............
    2750: C1 66 25 FF FF 00 00 59 3D 10 27 73 03 B8 10 27  // .f%....Y=.'s...'
    2760: C3 32 D2 C3 80 FD 02 75 19 E8 9D EC 66 BB 00 08  // .2.....u....f...
    2770: 00 00 E8 8E 00 66 33 D2 66 BB 01 08 00 00 E8 82  // .....f3.f.......
    2780: 00 C3 80 FD 03 75 10 66 33 C0 8A C1 66 33 D2 66  // .....u.f3...f3.f
    2790: BB FF 00 00 00 EB 36 51 33 D2 E8 62 EB 8A D5 66  // ......6Q3..b...f
    27A0: C1 E2 10 E8 93 EB 8A F2 8A D1 66 8B C2 66 0D 00  // ..........f..f..
    27B0: 00 00 80 E8 CE EB 80 FB 04 76 06 66 0D 00 00 00  // .........v.f....
    27C0: 08 E8 02 EC E8 52 EB 66 33 DB 8A D9 59 83 EC 14  // .....R.f3...Y...
    27D0: 8B EC 66 89 46 04 66 89 5E 08 66 8B C2 66 33 D2  // ..f.F.f.^.f..f3.
    27E0: 66 BB 64 00 00 00 66 F7 E3 66 89 46 00 BB 0C 00  // f.d...f..f.F....
    27F0: 8C D0 66 C1 E0 10 8B C4 E8 B3 05 8B EC B3 01 83  // ..f.............
    2800: C4 14 C3 83 EC 10 8B EC 66 89 56 00 66 89 5E 04  // ........f.V.f.^.
    2810: BB 2E 00 8C D0 66 C1 E0 10 8B C4 E8 90 05 B3 01  // .....f..........
    2820: 83 C4 10 C3 C3 53 51 66 50 B9 A0 8C 80 FB 00 75  // .....SQfP......u
    2830: 1C B9 90 7E E8 0E 05 83 E3 03 80 FB 03 75 0E E8  // ...~.........u..
    2840: E4 05 66 3D 50 C3 00 00 72 03 B9 F0 D2 66 33 D2  // ..f=P...r....f3.
    2850: 8B D1 66 58 59 5B C3 66 52 B3 00 66 F7 C2 00 00  // ..fXY[.fR..f....
    2860: FF FF 75 13 80 FD 13 74 0E 80 FD 14 74 09 B3 01  // ..u....t....t...
    2870: 80 FD 0E 74 02 B3 02 66 5A C3 B5 11 80 FA 23 74  // ...t...fZ.....#t
    2880: 07 80 FA 22 74 02 B5 00 C3 B5 02 C3 B1 01 80 FD  // ..."t...........
    2890: 00 75 06 C7 46 00 0B 01 C3 50 33 C0 E8 79 01 04  // .u..F....P3..y..
    28A0: 14 89 46 00 58 C3 C3 C3 0C 01 C3 E8 72 09 66 C1  // ..F.X.......r.f.
    28B0: E8 10 0B C0 74 1A 53 83 C3 06 E8 63 09 5B 3D E0  // ....t.S....c.[=.
    28C0: 01 72 0D 53 83 C3 18 E8 56 09 5B A9 10 00 74 03  // .r.S....V.[...t.
    28D0: 32 C0 C3 0C 01 C3 B5 0C C3 32 ED B5 02 C3 57 E8  // 2........2....W.
    28E0: 01 01 8B 4D 06 5F C3 80 FA 22 75 05 C7 46 00 78  // ...M._..."u..F.x
    28F0: 69 C3 C3 E8 04 01 80 FD FF 74 35 83 EC 0C 8B EC  // i........t5.....
    2900: 88 4E 01 88 6E 00 80 F9 0F 75 05 E8 24 00 EB 0F  // .N..n....u..$...
    2910: 80 F9 10 75 0A 8D 9C 48 03 E8 04 09 88 46 02 8C  // ...u...H.....F..
    2920: D0 66 C1 E0 10 8B C4 BB 04 00 E8 81 04 83 C4 0C  // .f..............
    2930: C3 C3 66 53 E8 2D EA 66 8B C2 66 33 D2 66 BB 8C  // ..fS.-.f..f3.f..
    2940: 0A 00 00 66 F7 F3 66 5B 8A E8 88 6E 09 8D 9C 40  // ...f..f[...n...@
    2950: 03 E8 CC 08 88 46 02 88 66 03 66 C1 E8 10 88 46  // .....F..f.f....F
    2960: 08 E8 EF E9 66 89 56 04 C3 80 F9 04 74 03 E8 C8  // ....f.V.....t...
    2970: E9 83 EC 10 8B EC 80 F9 04 75 0A 88 4E 01 32 C0  // .........u..N.2.
    2980: 88 46 00 EB 4C E8 90 00 88 46 00 88 4E 01 E8 28  // .F..L....F..N..(
    2990: EA 88 56 0A 80 F9 01 74 11 80 F9 0B 75 33 8D 9C  // ..V....t....u3..
    29A0: 5C 03 E8 7B 08 88 46 02 EB 27 E8 C8 E9 88 6E 08  // \..{..F..'....n.
    29B0: E8 A0 E9 66 89 56 04 E8 CA E9 88 5E 03 E8 3F E9  // ...f.V.....^..?.
    29C0: 88 6E 02 51 E8 33 00 8A CD B0 01 D2 E0 59 88 46  // .n.Q.3.......Y.F
    29D0: 09 8C D0 66 C1 E0 10 8B C4 BB 4C 00 E8 CF 03 83  // ...f......L.....
    29E0: C4 10 C3 E8 AC 03 03 7D 04 83 3D FF 74 0B 3B 15  // .......}..=.t.;.
    29F0: 74 05 83 C7 0A EB F2 0B FF C3 8D 9C 3C 03 E8 1F  // t...........<...
    2A00: 08 32 ED 3C 03 74 0C 3C 09 72 09 3C 0E 77 05 2C  // .2.<.t.<.r.<.w.,
    2A10: 08 8A E8 C3 B5 FF C3 C3 52 32 C0 80 EE 21 80 FA  // ........R2...!..
    2A20: 1E 74 10 B0 02 80 FA 20 74 09 B0 04 80 FA 21 74  // .t..... t.....!t
    2A30: 02 B0 06 02 C6 5A C3 83 EC 08 8B EC 89 7E 00 89  // .....Z.......~..
    2A40: 5E 02 89 56 04 89 4E 06 8C D0 66 C1 E0 10 8B C4  // ^..V..N...f.....
    2A50: BB 36 00 E8 58 03 8B EC 8B 5E 02 8A 7E 01 83 C4  // .6..X....^..~...
    2A60: 08 C3 56 33 F6 66 F7 C2 00 00 80 00 75 0A 50 33  // ..V3.f......u.P3
    2A70: C0 8A C6 8B F0 32 F6 58 53 BB 04 3E E8 01 07 66  // .....2.XS..>...f
    2A80: 8B C2 BB 00 3E E8 F8 06 5B 66 F7 C2 00 00 10 00  // ....>...[f......
    2A90: 75 02 33 DB 8B D3 66 C1 E2 10 BA 00 3E 83 EC 08  // u.3...f.....>...
    2AA0: 8B EC 66 89 56 00 88 4E 04 8A C5 FE C8 88 46 07  // ..f.V..N......F.
    2AB0: C6 46 05 00 C6 46 06 00 8C D0 66 C1 E0 10 8B C4  // .F...F....f.....
    2AC0: BB 4E 00 E8 E8 02 8B EC 8A 5E 05 8A 7E 06 83 C4  // .N.......^..~...
    2AD0: 08 0A DB 74 32 51 B9 90 01 80 FB 20 74 05 80 FB  // ...t2Q..... t...
    2AE0: 80 75 13 B9 0A 00 8B C6 0A C0 74 0A B9 90 01 3C  // .u........t....<
    2AF0: 01 74 03 B9 E8 03 E8 B2 03 59 8B C6 FE C4 8B F0  // .t.......Y......
    2B00: 80 FC 06 76 98 0A DB 5E C3 8D 5C 04 E8 11 07 8B  // ...v...^..\.....
    2B10: D0 B5 02 E8 14 00 74 11 B5 01 80 FA 13 75 0A E8  // ......t......u..
    2B20: 61 00 80 FA 13 75 02 B5 02 C3 80 FA 14 C3 E8 F9  // a....u..........
    2B30: FF 74 03 80 FA 0E C3 80 FA 05 C3 80 FA 02 74 03  // .t............t.
    2B40: 80 FA 04 C3 80 FA 01 74 03 80 FA 02 C3 80 FA 02  // .......t........
    2B50: 75 03 B2 01 C3 80 FA 04 75 03 B2 03 C3 C3 B5 08  // u.......u.......
    2B60: E8 D8 FF 74 02 B5 04 C3 8D 5C 09 E8 B2 06 8A C8  // ...t.....\......
    2B70: 0A C9 75 03 32 C0 C3 B5 02 E8 B4 02 8A C5 24 02  // ..u.2.........$.
    2B80: D0 E8 C3 8D 5C 08 E8 97 06 8A D0 B6 01 83 EC 08  // ....\...........
    2B90: 8B EC 89 56 02 8C D0 66 C1 E0 10 8B C4 BB 4F 00  // ...V...f......O.
    2BA0: E8 0B 02 8B EC 8A 56 04 83 C4 08 C3 53 81 C3 C9  // ......V.....S...
    2BB0: 05 E8 3A 06 5B C3 53 81 C3 C9 05 E8 8B 05 5B C3  // ..:.[.S.......[.
    2BC0: 66 53 81 C3 00 10 E8 25 06 66 5B C3 57 E8 82 01  // fS.....%.f[.W...
    2BD0: 8A 45 2D B4 FF F7 45 50 20 00 5F C3 50 56 0F BC  // .E-...EP ._.PV..
    2BE0: D8 8D 36 83 2B E8 63 03 5E 58 C3 00 20 00 24 00  // ..6.+.c.^X.. .$.
    2BF0: 00 00 28 00 2C 00 30 00 34 00 38 00 00 00 3C 00  // ..(.,.0.4.8...<.
    2C00: 40 00 44 53 56 51 8B F7 B3 00 E8 30 00 0B F6 74  // @.DSVQ.....0...t
    2C10: 16 49 0B C9 75 04 33 FF EB 0D 8B DF 03 7D 02 3B  // .I..u.3......}.;
    2C20: F3 74 04 E2 F5 33 FF 0B FF 59 5E 5B C3 0E 00 00  // .t...3...Y^[....
    2C30: 00 0A 00 06 00 08 00 0C 00 0E 00 10 00 56 8D 36  // .............V.6
    2C40: C5 2B E8 06 03 E8 13 01 03 DE 8B 3F 0B FF 74 0B  // .+.........?..t.
    2C50: 03 FE 33 C9 8A 0D 83 C7 04 0B FF 5E C3 51 56 53  // ..3........^.QVS
    2C60: C1 EB 0C E8 D7 FF 5B 75 04 33 FF EB 0B 3B 1D 74  // ......[u.3...;.t
    2C70: 07 83 C7 08 E2 F7 33 FF 0B FF 5E 59 C3 57 E8 DC  // ......3...^Y.W..
    2C80: FF 75 04 33 DB 5F C3 E8 02 00 5F C3 52 51 8B 5D  // .u.3._...._.RQ.]
    2C90: 04 0B DB 74 1B 56 E8 C2 00 03 DE 5E 33 C9 8A 4F  // ...t.V.....^3..O
    2CA0: 01 80 3F FF 74 08 3A 07 74 06 03 D9 EB F0 33 DB  // ..?.t.:.t.....3.
    2CB0: 0B DB 59 5A C3 50 8D 1C E8 C5 04 8B D8 E8 72 00  // ..YZ.P........r.
    2CC0: 23 C3 74 6C 33 FF E8 3A FF 0B FF 74 63 39 05 75  // #.tl3..:...tc9.u
    2CD0: F5 66 33 C0 8B 45 08 8B 4D 02 83 F9 0A 74 18 8B  // .f3..E..M....t..
    2CE0: 4D 0A 8B D1 81 E2 00 70 80 FE 20 75 0A 66 C1 C8  // M......p.. u.f..
    2CF0: 10 8B C1 66 C1 C8 10 8D 5C 0C E8 83 04 66 33 C0  // ...f....\....f3.
    2D00: 8B 45 04 8D 5C 04 E8 77 04 33 C9 8B D8 50 B0 01  // .E..\..w.3...P..
    2D10: E8 6A FF 58 74 0F 8A 4F 02 8B D8 B0 02 E8 5D FF  // .j.Xt..O......].
    2D20: 74 03 8A 6F 02 8D 5C 08 66 33 C0 8B C1 E8 50 04  // t..o..\.f3....P.
    2D30: 58 C3 56 E8 25 00 8B 44 04 5E C3 56 E8 1C 00 89  // X.V.%..D.^.V....
    2D40: 44 04 5E C3 C3 8B DA B0 14 E8 31 FF 74 03 8B 5F  // D.^.......1.t.._
    2D50: 02 C3 BF 4A 02 8B 3D 8B 7D 0C C3 BE 4A 02 8B 34  // ...J..=.}...J..4
    2D60: 8B 74 30 C3 1E 0E 1F BF 4A 02 8B 3D 8B 7D 0E 83  // .t0.....J..=.}..
    2D70: C7 04 1F C3 BE 4A 02 8B 34 8B 74 10 C3 BF 4A 02  // .....J..4.t...J.
    2D80: 8B 3D 8B 7D 26 83 C7 04 C3 BE 4A 02 8B 34 8B 74  // .=.}&.....J..4.t
    2D90: 1A C3 BF 4A 02 8B 3D 8B 7D 3A C3 BF 4A 02 8B 3D  // ...J..=.}:..J..=
    2DA0: 8B 7D 0A 83 C7 04 B9 08 00 C3 E8 01 00 CB 83 EC  // .}..............
    2DB0: 06 8B EC 89 46 00 66 33 C0 C6 46 04 00 89 46 02  // ....F.f3..F...F.
    2DC0: 06 52 8A D3 8B C5 E8 7F 16 5A 07 83 C4 06 C3 E8  // .R.......Z......
    2DD0: 80 FF F7 45 50 01 00 C3 E8 77 FF 83 4D 50 01 C3  // ...EP....w..MP..
    2DE0: E8 6F FF 88 45 58 C3 66 53 83 EC 28 8B EC 66 89  // .o..EX.fS..(..f.
    2DF0: 5E 00 66 89 4E 04 8C D0 66 C1 E0 10 8B C4 BB 00  // ^.f.N...f.......
    2E00: 00 E8 AA FF 83 C4 28 66 5B E8 48 01 BB 04 00 E8  // ......(f[.H.....
    2E10: 9A FD 66 C1 E8 10 E8 C7 FF C3 E8 35 FF 66 8B 5D  // ..f........5.f.]
    2E20: 08 66 8B 4D 0C C3 57 E8 28 FF 66 8B 45 28 5F C3  // .f.M..W.(.f.E(_.
    2E30: 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10 8B C4  // ......N...f.....
    2E40: BB 38 00 E8 68 FF 8B EC 8A 6E 02 83 C4 04 C3 C3  // .8..h....n......
    2E50: B0 06 C3 B0 02 C3 B0 06 C3 B0 08 C3 E8 F3 FE 8B  // ................
    2E60: 45 56 0B C0 C3 53 66 50 66 33 C0 E8 12 03 83 C3  // EV...SfPf3......
    2E70: 04 E2 F8 66 58 5B C3 32 C0 C3 FC E8 A2 03 66 C1  // ...fX[.2......f.
    2E80: CB 10 E8 FB 02 66 C1 CB 10 66 81 C3 04 00 04 00  // .....f...f......
    2E90: E2 E9 C3 FC 66 AD E8 E7 02 83 C3 04 E2 F6 C3 FC  // ....f...........
    2EA0: E8 7D 03 66 AB 83 C3 04 E2 F6 C3 66 50 B8 19 00  // .}.f.......fP...
    2EB0: E8 10 00 66 58 C3 66 50 B8 D4 30 D1 E1 E8 03 00  // ...fX.fP..0.....
    2EC0: 66 58 C3 52 F7 E1 8B CA E8 63 01 66 53 8B D9 66  // fX.R.....c.fS..f
    2ED0: C1 E3 10 8B D8 66 B8 04 B1 03 00 B2 00 66 EF B2  // .....f.......f..
    2EE0: 04 66 33 C0 66 EF 66 B8 08 B1 03 00 B2 00 66 EF  // .f3.f.f.......f.
    2EF0: B2 04 66 ED 33 C9 66 03 D8 73 0A 66 ED 66 A9 00  // ..f.3.f..s.f.f..
    2F00: 00 00 80 75 F6 66 ED 66 3B C3 73 0C 66 C1 E8 10  // ...u.f.f;.s.f...
    2F10: 3B C1 72 04 8B C8 EB ED 66 5B 5A C3 BB 42 EC E8  // ;.r.....f[Z..B..
    2F20: CC 02 66 33 D2 66 BB 19 00 00 00 66 F7 F3 C3 66  // ..f3.f.....f...f
    2F30: 50 53 BB 07 00 E8 74 FC 25 00 02 35 00 02 0B C0  // PS....t.%..5....
    2F40: 5B 66 58 C3 BB 0A 15 E8 A4 02 C3 32 FF D1 E3 03  // [fX........2....
    2F50: F3 8B 1C C3 E8 ED FF 66 C1 E0 0A 66 83 E8 20 E8  // .......f...f.. .
    2F60: 27 FE 66 89 44 04 C7 44 08 20 00 C3 56 1E 0E 1F  // '.f.D..D. ..V...
    2F70: E8 16 FE 66 8B 44 04 66 C1 E0 0A 1F 5E C3 C3 56  // ...f.D.f....^..V
    2F80: E8 F1 FD 8B 4C 22 8A 44 29 5E C3 BE 4A 02 8B 34  // ....L".D)^..J..4
    2F90: 8B 74 1E 83 C6 04 B9 1C 00 C3 33 FF C3 56 E8 D3  // .t........3..V..
    2FA0: FD 8A 6C 28 80 E5 70 C0 ED 04 5E C3 56 E8 C4 FD  // ..l(..p...^.V...
    2FB0: 53 81 C3 09 01 E8 68 02 8A E8 5B 53 81 C3 00 01  // S.....h...[S....
    2FC0: E8 5D 02 5B 8A C5 66 89 44 3C 5E C3 56 E8 A4 FD  // .].[..f.D<^.V...
    2FD0: 66 8B 44 3C 53 81 C3 00 01 E8 A4 01 5B 53 81 C3  // f.D<S.......[S..
    2FE0: 08 01 B1 01 8A E8 E8 DB 01 5B 5E C3 56 E8 84 FD  // .........[^.V...
    2FF0: 8B FE 83 C7 04 5E C3 56 E8 79 FD 8A 44 28 80 FD  // .....^.V.y..D(..
    3000: 00 74 0E 24 8F C0 E5 04 0A C5 80 FD 20 75 02 0C  // .t.$........ u..
    3010: 02 24 FE 81 7C 04 34 21 76 02 0C 01 88 44 28 E8  // .$..|.4!v....D(.
    3020: 08 FB 75 04 80 4C 30 01 5E C3 32 C0 C3 00 66 50  // ..u..L0.^.2...fP
    3030: 8C C8 3D 00 C0 75 10 BA C3 03 EC 8A F0 0A F6 74  // ..=..u.........t
    3040: 06 B2 4C 66 ED EB 17 53 2E 8B 1E 3E 02 B2 20 E8  // ..Lf...S...>.. .
    3050: DD 00 A8 01 75 05 B2 14 E8 D4 00 8A F4 5B 32 D2  // ....u........[2.
    3060: 66 58 C3 2E 8B 1E 3E 02 C3 0B C9 75 1A 4B 74 16  // fX....>....u.Kt.
    3070: 43 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7 F3  // C;.w.....+......
    3080: 8B DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8 77  // ....+..;.r.u.;.w
    3090: 0C 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9 2B  // .+...+.+.....+.+
    30A0: DB 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9 72  // .....UV+.......r
    30B0: 11 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6 4D  // .E;.r.w.;.v....M
    30C0: 78 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6 4D  // x ....+....r...M
    30D0: 78 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03 C3  // x.........s.....
    30E0: 13 D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50 92  // ........3.^]..P.
    30F0: 0B C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8 58  // ..t......t.....X
    3100: F7 E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0 10  // .....RfP....f...
    3110: 8A E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3 52  // ....$....f.fXZ.R
    3120: BA FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3 E8  // ...f.Z.R...f.Z..
    3130: 31 FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF 9C  // 1............$..
    3140: FA E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8 06  // .........RfSfP..
    3150: 00 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E E8  // .fXf[Z.f...f....
    3160: CC FE E8 71 01 C3 66 50 66 C1 E3 10 66 C1 EB 10  // ...q..fPf...f...
    3170: E8 F9 FD 66 03 D8 66 81 CB 00 00 00 80 66 58 C3  // ...f..f......fX.
    3180: 52 66 53 E8 04 00 66 5B 5A C3 66 50 E8 9F FE E8  // RfS...f[Z.fP....
    3190: D4 FF E8 41 01 66 58 C3 52 51 66 53 66 50 8A CB  // ...A.fX.RQfSfP..
    31A0: 80 E3 FC 80 E1 03 C0 E1 03 E8 82 FE E8 B7 FF E8  // ................
    31B0: 0B 01 66 D3 C8 58 50 66 D3 C0 E8 19 01 66 58 66  // ..f..XPf.....fXf
    31C0: 5B 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3 C8  // [YZ.fPQ....S.f..
    31D0: 8A C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51 C0  // ..f.....YfX.fPQ.
    31E0: E1 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8 5F  // ...;.f..Y..fX.._
    31F0: 00 C3 E8 39 FE 66 C1 E3 10 66 C1 EB 0E E8 BD 00  // ...9.f...f......
    3200: C3 E8 2A FE 66 C1 E3 02 E8 B2 00 C3 52 66 53 E8  // ..*.f.......RfS.
    3210: 04 00 66 5B 5A C3 E8 15 FE E8 4A FF E8 9E 00 C3  // ..f[Z.....J.....
    3220: 51 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3 FC  // QfR.............
    3230: E8 D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8 CB  // ......t.f.......
    3240: FF 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59 C3  // ....f.f.....fZY.
    3250: 52 66 53 E8 9C FF 66 5B 5A C3 52 E8 A3 FF 5A C3  // RfS...f[Z.R...Z.
    3260: 66 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8 BD  // fPURfP...V..V...
    3270: FD 2E A1 95 02 B2 18 EF B2 00 66 ED 66 89 46 0A  // ..........f.f.F.
    3280: 66 58 5A 5D C3 66 50 55 52 8B EC E8 A0 FD B2 00  // fXZ].fPUR.......
    3290: 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66 8B 46 04  // f.F.f..V..V.f.F.
    32A0: 66 89 46 08 5A 5D 66 58 66 58 C3 66 50 52 E8 7D  // f.F.Z]fXfX.fPR.}
    32B0: FD B2 18 66 ED 2E A3 95 02 5A 66 58 C3 66 81 FB  // ...f.....ZfX.f..
    32C0: FF 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00 66  // ....w.....f....f
    32D0: EF B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04 8A  // ...f..f......w..
    32E0: D3 EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF C3  // ...f...f.f...f..
    32F0: C3 C3 C3 C3 C3 C3 C3 C3 C3 C3 55 8B EC 53 51 8B  // ..........U..SQ.
    3300: F0 26 8B 5C 14 26 8B 4C 16 E8 28 00 8D 66 FC 59  // .&.\.&.L..(..f.Y
    3310: 5B 5D C3 53 51 8B F0 26 8B 5C 24 33 C9 E8 14 00  // [].SQ..&.\$3....
    3320: 59 5B C3 55 8B EC 53 51 8B F0 26 8B 5C 08 26 8B  // Y[.U..SQ..&.\.&.
    3330: 4C 0A EB D5 52 56 57 C8 06 00 00 8B F0 89 4E FE  // L...RVW.......N.
    3340: 8C D0 8E C0 26 8B 7C 26 8A 45 01 32 E4 B9 20 00  // ....&.|&.E.2.. .
    3350: 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA 8A  // +...............
    3360: 4D 03 32 ED 8B FA E3 06 D1 E0 D1 D7 E2 FA F7 D0  // M.2.............
    3370: F7 D7 26 21 44 1C 26 21 7C 1E 8C D0 8E C0 26 8B  // ..&!D.&!|.....&.
    3380: 7C 26 8A 4D 01 32 ED B8 20 00 2B C1 8B C8 66 C7  // |&.M.2.. .+...f.
    3390: 46 FA FF FF FF FF E3 08 D1 6E FC D1 5E FA E2 F8  // F........n..^...
    33A0: 8A 4D 02 32 ED 8B C3 8B 56 FE E3 06 D1 EA D1 D8  // .M.2....V.......
    33B0: E2 FA 23 46 FA 23 56 FC 8A 4D 03 32 ED E3 06 D1  // ..#F.#V..M.2....
    33C0: E0 D1 D2 E2 FA 26 09 44 1C 26 09 54 1E C9 5F 5E  // .....&.D.&.T.._^
    33D0: 5A C3 55 8B EC 53 51 52 57 50 8B D8 26 8B 7F 26  // Z.U..SQRWP..&..&
    33E0: 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0 E3  // .E.2.. .+.......
    33F0: 06 D1 EA D1 D8 E2 FA 8A 4D 02 88 4E F6 C6 46 F7  // ........M..N..F.
    3400: 00 8B FA 8B 4E F6 E3 06 D1 E0 D1 D7 E2 FA 26 09  // ....N.........&.
    3410: 47 1C 26 09 7F 1E 8D 66 F8 5F 5A E9 F1 FE 53 51  // G.&....f._Z...SQ
    3420: 52 57 8B D8 8C D0 8E C0 26 8B 77 26 8A 4C 01 32  // RW......&.w&.L.2
    3430: ED B8 20 00 2B C1 8B C8 BE FF FF 8B D6 E3 06 D1  // .. .+...........
    3440: EA D1 DE E2 FA 26 8B 7F 26 8A 4D 02 32 ED 8B C6  // .....&..&.M.2...
    3450: E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47 1C  // ............&!G.
    3460: 26 21 57 1E 5F E9 CC 05 53 56 8B D8 8C D2 8E C2  // &!W._...SV......
    3470: 26 8B 77 26 80 3C 00 74 73 80 3C 01 75 58 8A 44  // &.w&.<.ts.<.uX.D
    3480: 01 32 E4 26 83 7F 1E 00 75 4C 26 3B 47 1C 75 46  // .2.&....uL&;G.uF
    3490: 8A 04 6B F0 03 8A 84 44 95 26 01 47 26 8C D0 8E  // ..k....D.&.G&...
    34A0: C0 26 8B 77 26 80 3C 09 74 17 8A 04 32 E4 6B F0  // .&.w&.<.t...2.k.
    34B0: 03 8B C3 FF 94 42 95 26 8B 77 26 8A 04 32 E4 EB  // .....B.&.w&..2..
    34C0: D1 8B 44 01 26 29 47 26 26 FF 47 26 26 8B 47 1C  // ..D.&)G&&.G&&.G.
    34D0: 26 8B 77 1E EB 1A 26 8B 77 26 8A 04 32 E4 6B F0  // &.w...&.w&..2.k.
    34E0: 03 8A 84 44 95 26 01 47 26 E9 80 FF 33 C0 33 F6  // ...D.&.G&...3.3.
    34F0: 8B D6 5E 5B C3 53 51 52 56 8B D8 8D 77 35 26 8B  // ..^[.SQRV...w5&.
    3500: 54 02 26 89 57 14 26 C7 47 16 00 00 8B F0 26 8B  // T.&.W.&.G.....&.
    3510: 47 20 33 D2 26 01 47 14 26 11 54 16 8C D1 8E C1  // G 3.&.G.&.T.....
    3520: 26 F6 47 2F 06 0F 85 0A 05 26 80 7F 34 00 75 22  // &.G/.....&..4.u"
    3530: 26 8B 77 16 26 0B 77 14 75 10 26 D1 67 08 26 D1  // &.w.&.w.u.&.g.&.
    3540: 57 0A 26 D1 67 08 26 D1 57 0A 8B C3 E8 79 11 E9  // W.&.g.&.W....y..
    3550: E1 04 26 8A 47 34 32 E4 05 80 00 99 26 89 47 1C  // ..&.G42.....&.G.
    3560: 26 89 57 1E 8B C3 E8 FF FE E9 C7 04 53 56 8B D8  // &.W.........SV..
    3570: 8D 77 35 26 8A 44 02 32 E4 C1 E0 02 26 8B 37 26  // .w5&.D.2....&.7&
    3580: 8B 34 03 F0 26 8B 47 08 26 8B 5F 0A 26 89 04 26  // .4..&.G.&._.&..&
    3590: 89 5C 02 5E 5B C3 53 52 56 8B D8 8C D0 8D 77 35  // .\.^[.SRV.....w5
    35A0: 8E C0 26 8A 54 02 80 FA 40 73 21 26 8B 77 02 32  // ..&.T...@s!&.w.2
    35B0: F6 C1 E2 02 26 8B 74 04 03 F2 26 8B 57 08 26 8B  // ....&.t...&.W.&.
    35C0: 47 0A 26 89 14 26 89 44 02 E9 7F 00 80 FA 41 75  // G.&..&.D......Au
    35D0: 12 26 8B 47 08 26 8B 57 0A 26 89 47 10 26 89 57  // .&.G.&.W.&.G.&.W
    35E0: 12 EB 68 80 FA 40 75 12 26 8B 47 08 26 8B 57 0A  // ..h..@u.&.G.&.W.
    35F0: 26 89 47 0C 26 89 57 0E EB 51 80 FA 42 75 0A 26  // &.G.&.W..Q..Bu.&
    3600: 8B 47 08 26 89 47 22 EB 42 80 FA 43 75 0A 26 8A  // .G.&.G".B..Cu.&.
    3610: 47 08 26 88 47 33 EB 33 80 FA 46 75 12 26 8B 57  // G.&.G3.3..Fu.&.W
    3620: 08 26 8B 47 0A 26 89 57 18 26 89 47 1A EB 1C 80  // .&.G.&.W.&.G....
    3630: FA 47 75 0A 26 8B 47 08 26 89 47 24 EB 0D 80 FA  // .Gu.&.G.&.G$....
    3640: 48 75 08 26 8B 47 08 26 89 47 20 5E 5A 5B C3 53  // Hu.&.G.&.G ^Z[.S
    3650: 56 8B D8 8D 77 35 26 8A 44 02 32 E4 26 89 47 14  // V...w5&.D.2.&.G.
    3660: 26 C7 47 16 00 00 5E 5B C3 53 56 8B D8 26 8B 77  // &.G...^[.SV..&.w
    3670: 02 26 8B 74 02 8A 04 32 E4 26 89 47 14 26 C7 47  // .&.t...2.&.G.&.G
    3680: 16 00 00 26 8B 5F 02 26 FF 47 02 5E 5B C3 53 56  // ...&._.&.G.^[.SV
    3690: 8B D8 26 8B 77 02 26 8B 74 02 8B 34 26 89 77 14  // ..&.w.&.t..4&.w.
    36A0: 26 C7 47 16 00 00 26 8B 5F 02 26 83 47 02 02 5E  // &.G...&._.&.G..^
    36B0: 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8B 04  // [.SV..&.w.&.t...
    36C0: 8B 74 02 26 89 47 14 26 89 77 16 26 8B 5F 02 26  // .t.&.G.&.w.&._.&
    36D0: 83 47 02 04 5E 5B C3 53 52 56 8B D8 E8 70 FF 8B  // .G..^[.SRV...p..
    36E0: F3 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1  // .&.G.&.W........
    36F0: D8 26 01 47 14 26 11 54 16 8B C3 E8 2B 10 E9 4A  // .&.G.&.T....+..J
    3700: FF 53 8B D8 26 8B 5F 02 26 FF 47 02 5B C3 53 8B  // .S..&._.&.G.[.S.
    3710: D8 26 8B 5F 02 26 83 47 02 02 5B C3 53 56 8B D8  // .&._.&.G..[.SV..
    3720: E8 6B FF 8B F3 26 8B 57 20 33 C0 26 01 57 14 26  // .k...&.W 3.&.W.&
    3730: 11 44 16 8C D2 8E C2 26 8B 47 2E 32 C0 80 E4 06  // .D.....&.G.2....
    3740: 3D 00 02 75 07 32 E4 33 D2 5E 5B C3 26 8B 47 2E  // =..u.2.3.^[.&.G.
    3750: 32 C0 80 E4 06 3D 00 04 74 EB 26 80 7F 34 00 75  // 2....=..t.&..4.u
    3760: 08 8B C3 E8 2F 0F 5E 5B C3 26 8A 47 34 32 E4 26  // ..../.^[.&.G42.&
    3770: 89 47 1C 26 C7 47 1E 00 00 8B C3 E8 EA FC 5E 5B  // .G.&.G........^[
    3780: C3 53 8B D8 E8 E2 FE 26 8B 47 14 C1 E0 02 26 8B  // .S.....&.G....&.
    3790: 1F 26 8B 1F 03 D8 26 8B 07 26 8B 57 02 5B C3 A5  // .&....&..&.W.[..
    37A0: 37 9A 37 B0 37 FF 37 B6 37 CE 37 E8 37 F3 37 F9  // 7.7.7.7.7.7.7.7.
    37B0: 37 53 51 56 8B D8 E8 B0 FE 8C D2 8E C2 26 83 7F  // 7SQV.........&..
    37C0: 16 00 75 22 26 83 7F 14 40 73 1B 26 8B 77 02 26  // ..u"&...@s.&.w.&
    37D0: 8B 5F 14 C1 E3 02 26 8B 44 04 03 D8 26 8B 07 26  // ._....&.D...&..&
    37E0: 8B 57 02 E9 7B 05 26 8B 77 14 26 8B 47 16 83 C6  // .W..{.&.w.&.G...
    37F0: C0 83 D0 FF 75 71 83 FE 08 77 6C 03 F6 2E FF A4  // ....uq...wl.....
    3800: 37 37 26 8B 47 10 26 8B 57 12 E9 54 05 26 8B 47  // 77&.G.&.W..T.&.G
    3810: 0C 26 8B 57 0E E9 49 05 26 8B 47 22 EB 4B 26 8A  // .&.W..I.&.G".K&.
    3820: 4F 33 32 ED BB 01 00 33 D2 E3 06 D1 E3 D1 D2 E2  // O32....3........
    3830: FA 8B C3 E9 2B 05 26 8A 4F 33 32 ED B8 01 00 33  // ....+.&.O32....3
    3840: D2 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 E9 11 05  // ................
    3850: 26 8B 47 18 26 8B 57 1A E9 06 05 26 8B 47 24 EB  // &.G.&.W....&.G$.
    3860: 08 26 8B 47 20 EB 02 33 C0 33 D2 E9 F3 04 53 56  // .&.G ..3.3....SV
    3870: 8B D8 E8 F4 FD 8B F3 26 8B 47 18 26 8B 57 1A D1  // .......&.G.&.W..
    3880: EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11 54 16 8B  // .......&.G.&.T..
    3890: C3 E8 16 0E 5E 5B C3 33 C0 33 D2 C3 53 56 8B D8  // ....^[.3.3..SV..
    38A0: E8 EB FD 26 8B 77 14 26 03 77 22 8B 04 8B 54 02  // ...&.w.&.w"...T.
    38B0: 5E 5B C3 53 8B D8 26 C6 47 2B 04 E8 AB FD 26 8B  // ^[.S..&.G+....&.
    38C0: 47 14 26 8B 57 16 5B C3 53 8B D8 26 C6 47 2B 01  // G.&.W.[.S..&.G+.
    38D0: E8 BB FD EB E9 53 8B D8 26 C6 47 2B 00 E8 D2 FD  // .....S..&.G+....
    38E0: EB DC 53 8B D8 83 C3 35 26 8A 5F 01 C0 EB 03 80  // ..S....5&._.....
    38F0: E3 07 32 FF 03 DB FF 97 D2 94 5B C3 53 52 56 8B  // ..2.......[.SRV.
    3900: D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EE  // .&.G,2..........
    3910: 94 26 89 47 08 26 89 57 0A 26 8A 47 2D 32 E4 8B  // .&.G.&.W.&.G-2..
    3920: F0 03 F0 8B C3 FF 94 06 95 26 89 47 04 26 89 57  // .........&.G.&.W
    3930: 06 E9 17 FD 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B  // ....SQV..&.O+2..
    3940: F1 8A 8C 36 95 E3 0A 26 D1 6F 06 26 D1 5F 04 E2  // ...6...&.o.&._..
    3950: F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 16 95  // .&.O+2..........
    3960: 8B B4 18 95 26 21 4F 04 26 21 77 06 26 8A 4F 2A  // ....&!O.&!w.&.O*
    3970: 32 ED 8B F1 8A 8C 3E 95 E3 0A 26 D1 67 04 26 D1  // 2.....>...&.g.&.
    3980: 57 06 E2 F6 26 8B 4F 08 26 8B 77 0A 26 89 4F 14  // W...&.O.&.w.&.O.
    3990: 26 89 77 16 E9 CA 03 53 51 52 56 57 8B D8 8C D0  // &.w....SQRVW....
    39A0: 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47  // ..&.G+2......&.G
    39B0: 2A 8B F8 8A 8D 3E 95 32 ED 8B 84 16 95 8B 94 18  // *....>.2........
    39C0: 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21 47  // .............&!G
    39D0: 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0 8A 8C 3E  // .&!W.&.G*2.....>
    39E0: 95 32 ED E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 26  // .2...&.o.&._...&
    39F0: 8A 47 2B 8B F0 C1 E6 02 8B 84 16 95 8B 94 18 95  // .G+.............
    3A00: 26 21 47 08 26 21 57 0A 26 8A 47 2A 32 E4 8B F0  // &!G.&!W.&.G*2...
    3A10: 8A 8C 3E 95 32 ED E3 0A 26 D1 67 08 26 D1 57 0A  // ..>.2...&.g.&.W.
    3A20: E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    3A30: 57 0A 5F 5E 5A 59 5B C3 53 51 56 8B D8 26 8A 4F  // W._^ZY[.SQV..&.O
    3A40: 2B 32 ED 8B F1 8A 8C 36 95 E3 0A 26 D1 6F 06 26  // +2.....6...&.o.&
    3A50: D1 5F 04 E2 F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02  // ._...&.O+2......
    3A60: 8B 8C 16 95 8B B4 18 95 26 21 4F 04 26 21 77 06  // ........&!O.&!w.
    3A70: 26 8A 4F 2A 32 ED 8B F1 8A 8C 3E 95 E3 0A 26 D1  // &.O*2.....>...&.
    3A80: 6F 0A 26 D1 5F 08 E2 F6 26 8A 4F 2B 32 ED 8B F1  // o.&._...&.O+2...
    3A90: C1 E6 02 8B 8C 16 95 8B B4 18 95 26 21 4F 08 26  // ...........&!O.&
    3AA0: 21 77 0A E9 BB 02 51 52 57 8B D8 8C D0 8E C0 26  // !w....QRW......&
    3AB0: 80 7F 2B 00 74 1A 26 8A 47 2C 32 E4 8B F0 03 F0  // ..+.t.&.G,2.....
    3AC0: 8B C3 FF 94 EE 94 26 89 47 08 26 89 57 0A EB 10  // ......&.G.&.W...
    3AD0: 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 FA 94  // &.G,2...........
    3AE0: 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94 06 95  // &.G-2...........
    3AF0: 26 89 47 04 26 89 57 06 8C D2 8E C2 26 80 7F 2B  // &.G.&.W.....&..+
    3B00: 00 74 4A 26 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A  // .tJ&.G+2......&.
    3B10: 47 2A 8B F8 8A 8D 3E 95 32 ED 8B 84 16 95 8B 94  // G*....>.2.......
    3B20: 18 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    3B30: 47 08 26 21 57 0A 8B C3 E8 F9 FD 26 8B 47 04 26  // G.&!W......&.G.&
    3B40: 8B 57 06 26 09 47 08 26 09 57 0A EB 10 26 8B 57  // .W.&.G.&.W...&.W
    3B50: 04 26 8B 47 06 26 89 57 08 26 89 47 0A 26 8A 47  // .&.G.&.W.&.G.&.G
    3B60: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E2 94 5F 5A 59  // ,2..........._ZY
    3B70: C3 53 51 52 56 57 8B D8 26 8A 47 2A 32 E4 8B F0  // .SQRVW..&.G*2...
    3B80: 8A 8C 3E 95 32 ED E3 0A 26 D1 67 04 26 D1 57 06  // ..>.2...&.g.&.W.
    3B90: E2 F6 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1 E6  // ......&.G+2.....
    3BA0: 02 26 8A 47 2A 8B F8 8A 8D 3E 95 32 ED 8B 84 16  // .&.G*....>.2....
    3BB0: 95 8B 94 18 95 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7  // ................
    3BC0: D2 26 09 47 04 26 09 57 06 26 8B 47 04 26 8B 57  // .&.G.&.W.&.G.&.W
    3BD0: 06 26 21 47 08 26 21 57 0A E9 56 FE 55 8B EC 51  // .&!G.&!W..V.U..Q
    3BE0: 52 50 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3  // RP..&.G,2.......
    3BF0: FF 94 EE 94 26 89 47 08 26 89 57 0A 26 8A 47 2B  // ....&.G.&.W.&.G+
    3C00: 88 46 FA 8B C3 E8 DA FC 26 89 47 04 26 89 57 06  // .F......&.G.&.W.
    3C10: 26 8A 4F 2D 32 ED 8B F1 03 F1 8B C3 FF 94 06 95  // &.O-2...........
    3C20: 26 89 47 14 26 89 57 16 8B C3 E8 44 FF 8A 46 FA  // &.G.&.W....D..F.
    3C30: 32 E4 8B F0 8A 8C 36 95 E3 0A 26 D1 6F 16 26 D1  // 2.....6...&.o.&.
    3C40: 5F 14 E2 F6 26 8A 57 2B 32 F6 8B F2 C1 E6 02 8B  // _...&.W+2.......
    3C50: 84 16 95 8B 94 18 95 26 21 47 14 26 21 57 16 26  // .......&!G.&!W.&
    3C60: 8A 47 2A 32 E4 8B F0 8A 8C 3E 95 32 ED E3 0A 26  // .G*2.....>.2...&
    3C70: D1 67 14 26 D1 57 16 E2 F6 26 8B 47 14 26 8B 57  // .g.&.W...&.G.&.W
    3C80: 16 26 09 47 08 26 09 57 0A 26 8A 47 2C 32 E4 8B  // .&.G.&.W.&.G,2..
    3C90: F0 03 F0 8B C3 FF 94 E2 94 8D 66 FC 5A 59 5D C3  // ..........f.ZY].
    3CA0: 51 8B D8 E8 56 FC 26 8A 4F 2B 32 ED 8B F1 8A 8C  // Q...V.&.O+2.....
    3CB0: 36 95 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 8B C3  // 6...&.o.&._.....
    3CC0: E8 AE FE 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF  // ...&.O,2........
    3CD0: 94 E2 94 59 C3 8B D8 E8 22 FC 8B C3 E8 55 FC 26  // ...Y...."....U.&
    3CE0: 8B 47 04 26 8B 77 06 26 09 47 08 26 09 77 0A 26  // .G.&.w.&.G.&.w.&
    3CF0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 E2 94 C3  // .G,2............
    3D00: 53 56 8B D8 E8 F5 FB 8B C3 E8 28 FC 26 8B 47 04  // SV........(.&.G.
    3D10: 26 8B 77 06 26 31 47 08 26 31 77 0A 26 8A 47 2C  // &.w.&1G.&1w.&.G,
    3D20: 32 E4 8B F0 03 F0 8B C3 FF 94 E2 94 5E 5B C3 53  // 2...........^[.S
    3D30: 51 56 8B D8 E8 C5 FB 8B C3 E8 F8 FB 26 8B 4F 04  // QV..........&.O.
    3D40: E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 8B C3 E8 46  // ..&.g.&.W......F
    3D50: FC 26 8A 4F 2C 32 ED 8B F1 03 F1 8B C3 FF 94 E2  // .&.O,2..........
    3D60: 94 5E 59 5B C3 53 51 56 8B D8 E8 8F FB 8B C3 E8  // .^Y[.SQV........
    3D70: C2 FB 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08  // ..&.O...&.o.&._.
    3D80: E2 F6 EB C8 52 8B D8 E8 72 FB 8B C3 E8 A5 FB 8B  // ....R...r.......
    3D90: F3 26 8B 47 04 26 8B 57 06 26 01 47 08 26 11 54  // .&.G.&.W.&.G.&.T
    3DA0: 0A 8B C3 E8 F1 FB 26 8A 47 2C 32 E4 8B F0 03 F0  // ......&.G,2.....
    3DB0: 8B C3 FF 94 E2 94 5A C3 52 8B D8 E8 3E FB 8B C3  // ......Z.R...>...
    3DC0: E8 71 FB 8B F3 26 8B 47 04 26 8B 57 06 26 29 47  // .q...&.G.&.W.&)G
    3DD0: 08 26 19 54 0A EB CA 51 52 8B F0 E8 1E FB 8B C6  // .&.T...QR.......
    3DE0: E8 55 FC 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26  // .U.&.D.&.T.&.\.&
    3DF0: 8B 4C 06 E8 F7 F2 26 89 44 0C 26 89 54 0E 5A 59  // .L....&.D.&.T.ZY
    3E00: C3 52 8B D0 E8 F5 FA 8B C2 E8 2C FC 8B C2 E8 5C  // .R........,....\
    3E10: 08 5A C3 51 52 57 8B F0 E8 E1 FA 8B C6 E8 18 FC  // .Z.QRW..........
    3E20: 26 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06  // &.D.&.T.&.\.&.L.
    3E30: E8 36 F2 26 89 44 0C 26 89 54 0E 8C D7 8E C7 26  // .6.&.D.&.T.....&
    3E40: 8B 44 08 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8  // .D.&.T.&.\.&.L..
    3E50: 17 F2 26 89 5C 10 26 89 4C 12 E9 10 FD 52 8B D0  // ..&.\.&.L....R..
    3E60: E8 99 FA 8B C2 E8 D0 FB 8B C2 E8 D3 07 5A C3 51  // .............Z.Q
    3E70: 52 8B D8 E8 86 FA 8B C3 E8 BD FB 8C D1 8E C1 26  // R..............&
    3E80: 8B 47 08 26 8B 57 0A 26 3B 57 06 75 0E 26 3B 47  // .G.&.W.&;W.u.&;G
    3E90: 04 75 08 26 C6 47 30 01 5A 59 C3 8B D0 26 8B 47  // .u.&.G0.ZY...&.G
    3EA0: 0A 26 3B 47 06 72 08 75 0A 26 3B 57 04 73 04 33  // .&;G.r.u.&;W.s.3
    3EB0: C0 EB 03 B8 02 00 26 88 47 30 5A 59 C3 51 52 57  // ......&.G0ZY.QRW
    3EC0: 8B D8 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // ..&.G,2.........
    3ED0: EE 94 26 89 47 08 26 89 57 0A 8C D0 8E C0 26 8A  // ..&.G.&.W.....&.
    3EE0: 47 2B 32 E4 8B F0 C1 E6 02 8B F8 8A 8D 36 95 32  // G+2..........6.2
    3EF0: ED 8B 84 16 95 8B 94 18 95 E3 06 D1 E0 D1 D2 E2  // ................
    3F00: FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A E9 4D FC  // .....&!G.&!W..M.
    3F10: 55 8B EC 51 52 57 83 EC 06 8B D8 26 8A 47 2B 32  // U..QRW.....&.G+2
    3F20: E4 8B F0 C1 E6 02 8B F8 8A 8D 36 95 32 ED 8B 84  // ..........6.2...
    3F30: 16 95 89 46 F4 8B 84 18 95 89 46 F6 E3 08 D1 66  // ...F......F....f
    3F40: F4 D1 56 F6 E2 F8 8B 7E F4 8B 46 F6 89 46 F8 26  // ..V....~..F..F.&
    3F50: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 EE 94 26  // .G,2...........&
    3F60: 89 47 08 26 89 57 0A 8B C3 E8 47 F9 26 89 47 04  // .G.&.W....G.&.G.
    3F70: 26 89 57 06 8B C7 F7 D0 8B 56 F6 F7 D2 26 23 47  // &.W......V...&#G
    3F80: 08 26 23 57 0A 26 89 47 14 26 89 57 16 26 21 7F  // .&#W.&.G.&.W.&!.
    3F90: 08 8B 46 F6 26 21 47 0A 8C D1 8D 77 35 8E C1 26  // ..F.&!G....w5..&
    3FA0: 80 3C 19 73 12 26 8B 4F 04 E3 0A 26 D1 67 08 26  // .<.s.&.O...&.g.&
    3FB0: D1 57 0A E2 F6 EB 10 26 8B 4F 04 E3 0A 26 D1 6F  // .W.....&.O...&.o
    3FC0: 0A 26 D1 5F 08 E2 F6 26 21 7F 08 8B 46 F8 26 21  // .&._...&!...F.&!
    3FD0: 47 0A 26 8B 57 14 26 8B 47 16 26 09 57 08 26 09  // G.&.W.&.G.&.W.&.
    3FE0: 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // G.&.G,2.........
    3FF0: E2 94 8D 66 FA 5F E9 A3 FC 52 8B D8 E8 FD F8 8B  // ...f._...R......
    4000: C3 E8 34 FA 26 8B 47 08 26 8B 57 0A 26 85 57 06  // ..4.&.G.&.W.&.W.
    4010: 75 06 26 85 47 04 74 05 B8 03 00 EB 03 B8 01 00  // u.&.G.t.........
    4020: 26 88 47 30 5A C3 53 51 52 56 8B D8 26 8A 4F 2D  // &.G0Z.SQRV..&.O-
    4030: 32 ED 8B F1 03 F1 FF 94 06 95 26 89 47 04 26 89  // 2.........&.G.&.
    4040: 57 06 26 8A 47 2B 32 E4 8B F0 8A 8C 36 95 E3 0A  // W.&.G+2.....6...
    4050: 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 47 2B 8B F0  // &.o.&._...&.G+..
    4060: C1 E6 02 8B 84 16 95 8B 94 18 95 26 21 47 04 26  // ...........&!G.&
    4070: 21 57 06 E9 BD F9 52 8B D8 E8 AA FF 26 8B 47 04  // !W....R.....&.G.
    4080: 26 8B 57 06 26 89 47 18 26 89 57 1A 5A C3 51 52  // &.W.&.G.&.W.Z.QR
    4090: 8B D8 E8 91 FF 8C D0 8E C0 26 8B 77 02 26 8B 74  // .........&.w.&.t
    40A0: 02 81 3C 5A 5A 74 5B 26 8B 77 02 26 8B 74 02 80  // ..<ZZt[&.w.&.t..
    40B0: 3C 63 75 E1 26 8B 77 02 26 FF 44 02 8B C3 E8 21  // <cu.&.w.&.D....!
    40C0: F8 26 89 47 08 26 89 57 0A 8B C3 E8 FA F7 26 89  // .&.G.&.W......&.
    40D0: 47 14 26 89 57 16 8C D1 8E C1 26 8B 57 04 26 8B  // G.&.W.....&.W.&.
    40E0: 47 06 26 3B 47 0A 75 AD 26 3B 57 08 75 A7 26 8B  // G.&;G.u.&;W.u.&.
    40F0: 77 02 26 8B 04 26 03 47 14 8B DE 26 89 47 02 5A  // w.&..&.G...&.G.Z
    4100: 59 C3 26 8B 5F 02 26 83 47 02 02 5A 59 C3 52 57  // Y.&._.&.G..ZY.RW
    4110: 8B D8 8C D0 8E C0 26 8B 77 02 26 8B 74 02 8A 54  // ......&.w.&.t..T
    4120: 01 84 D2 75 08 26 C7 47 22 00 00 EB 2F 80 FA FF  // ...u.&.G".../...
    4130: 75 14 26 8B 77 02 26 8B 3F 26 8B 34 26 2B 75 02  // u.&.w.&.?&.4&+u.
    4140: 26 89 77 22 EB 16 26 8B 07 E8 E3 02 8B F0 8A C2  // &.w"..&.........
    4150: 32 E4 03 C0 03 F0 8B 04 26 89 47 22 26 8B 5F 02  // 2.......&.G"&._.
    4160: 26 83 47 02 02 5F 5A C3 8B D8 26 80 67 2F F9 26  // &.G.._Z...&.g/.&
    4170: 8B 77 02 26 8B 74 02 8A 44 01 26 88 47 34 26 8B  // .w.&.t..D.&.G4&.
    4180: 5F 02 26 83 47 02 03 C3 8B D8 26 8B 77 02 26 8B  // _.&.G.....&.w.&.
    4190: 74 02 8B 74 01 26 89 77 20 EB E3 53 8B D8 26 8A  // t..t.&.w ..S..&.
    41A0: 47 2C 32 E4 24 03 26 80 67 2F F9 C1 E0 09 26 09  // G,2.$.&.g/....&.
    41B0: 47 2E E9 4F F5 8B D8 26 8B 77 02 26 8B 74 02 8A  // G..O...&.w.&.t..
    41C0: 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B C3  // D.2.&.G.&.G.....
    41D0: E8 40 04 26 8B 5F 02 26 83 47 02 02 C3 8B D8 26  // .@.&._.&.G.....&
    41E0: 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04  // .w.&.t..D.2.&.G.
    41F0: 26 C7 47 06 00 00 8B C3 E8 08 04 EB D6 53 56 8B  // &.G..........SV.
    4200: D8 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89  // .&.w.&.t..D.2.&.
    4210: 47 04 26 C7 47 06 00 00 8B C3 E8 06 04 E9 86 F4  // G.&.G...........
    4220: 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 44 01 32  // SV..&.w.&.t..D.2
    4230: E4 26 89 47 04 26 C7 47 06 00 00 8B C3 E8 F0 03  // .&.G.&.G........
    4240: E9 63 F4 53 56 8B D8 26 8B 77 02 8B DE 26 8B 5F  // .c.SV..&.w...&._
    4250: 02 8B 5F 01 83 C3 03 26 01 5C 02 5E 5B C3 51 52  // .._....&.\.^[.QR
    4260: 8B D8 26 8B 77 02 26 83 44 02 02 26 8B 07 E8 A0  // ..&.w.&.D..&....
    4270: 01 8B C8 26 8B 77 28 8A 44 01 32 E4 03 C0 8B F1  // ...&.w(.D.2.....
    4280: 03 F0 83 3C 00 74 4F 26 8B 77 28 8A 54 01 32 F6  // ...<.tO&.w(.T.2.
    4290: 8B C3 E8 B0 01 26 88 47 31 26 8B 77 02 26 8B 34  // .....&.G1&.w.&.4
    42A0: 8B 44 04 C1 E8 08 32 E4 24 7F C1 E8 02 32 E4 24  // .D....2.$....2.$
    42B0: 1F 26 80 67 2F 07 C1 E0 0B 26 09 47 2E 26 8B 37  // .&.g/....&.G.&.7
    42C0: 26 8B 47 2E C1 E8 0B C1 E0 02 26 01 04 26 C6 47  // &.G.......&..&.G
    42D0: 32 01 26 89 4F 28 5A 59 C3 53 8B D8 26 C6 47 32  // 2.&.O(ZY.S..&.G2
    42E0: 82 5B C3 57 8B D8 8C D6 8E C6 26 80 7F 2C 05 74  // .[.W......&..,.t
    42F0: 0A 26 8A 47 2C 26 3A 47 30 75 1E 26 8B 77 02 26  // .&.G,&:G0u.&.w.&
    4300: 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26  // .t.&...&.=.t...&
    4310: 8B 5F 02 26 89 77 02 5F C3 26 8B 5F 02 26 83 47  // ._.&.w._.&._.&.G
    4320: 02 03 5F C3 53 56 57 8B D8 8C D6 8E C6 26 80 7F  // .._.SVW......&..
    4330: 30 01 74 0A 26 8A 47 30 26 3A 47 2C 75 20 26 8B  // 0.t.&.G0&:G,u &.
    4340: 77 02 26 8B 74 02 26 8B 7F 02 26 8B 3D 8B 74 01  // w.&.t.&...&.=.t.
    4350: 03 F7 26 8B 5F 02 26 89 77 02 5F 5E 5B C3 26 8B  // ..&._.&.w._^[.&.
    4360: 5F 02 26 83 47 02 03 EB F1 53 56 57 8B D8 8C D0  // _.&.G....SVW....
    4370: 8E C0 26 80 7F 30 01 74 E5 EB C3 55 8B EC 53 51  // ..&..0.t...U..SQ
    4380: 52 57 8B D8 26 8B 77 02 26 8B 74 02 8A 04 26 C6  // RW..&.w.&.t...&.
    4390: 47 3D 00 8C D1 8E C1 26 80 7F 3D 08 73 20 26 8B  // G=.....&..=.s &.
    43A0: 77 02 26 8A 57 3D 32 F6 26 8B 7C 02 03 FA 8B F3  // w.&.W=2.&.|.....
    43B0: 03 F2 8A 15 26 88 54 35 26 FE 47 3D EB D5 26 8B  // ....&.T5&.G=..&.
    43C0: 7F 02 8A D0 32 F6 8B F2 C1 E6 02 8A 94 63 95 26  // ....2........c.&
    43D0: 01 55 02 26 8B 7F 28 8A 55 01 80 E2 07 26 88 57  // .U.&..(.U....&.W
    43E0: 2D 26 8B 7F 28 8A 55 01 C0 EA 03 80 E2 07 26 88  // -&..(.U.......&.
    43F0: 57 2B 26 8B 7F 28 8A 55 01 C0 EA 06 26 88 57 2A  // W+&..(.U....&.W*
    4400: 8A 94 62 95 26 88 57 2C 8D 66 F8 5F 5A 59 5B 5D  // ..b.&.W,.f._ZY[]
    4410: C3 53 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0  // .SV..&.w....tH..
    4420: 8B D8 8B 74 1E 8B C6 03 C3 83 C0 04 5E 5B C3 53  // ...t........^[.S
    4430: 56 8B D8 26 8B 77 02 8B C6 8B 74 48 03 F0 8B D8  // V..&.w....tH....
    4440: 8B 74 20 EB E0 8A C2 C3 16 07 55 8B EC 53 51 56  // .t .......U..SQV
    4450: 57 83 EC 40 8B F8 89 46 B8 E8 D3 FF 8B D8 89 46  // W..@...F.......F
    4460: E0 26 8B 45 02 8B 5F 2E 03 D8 89 5E DE 83 46 DE  // .&.E.._....^..F.
    4470: 04 8B C7 E8 9B FF 89 46 E0 32 F6 8D 46 B8 E8 C4  // .......F.2..F...
    4480: FF 8A D0 32 F6 03 D2 8B 5E E0 03 DA 83 3F 00 0F  // ...2....^....?..
    4490: 84 65 01 88 46 E9 80 66 E7 F9 C6 46 EC 00 C7 46  // .e..F..f...F...F
    44A0: D8 00 00 66 C7 46 D0 00 00 00 00 C7 46 F6 00 00  // ...f.F......F...
    44B0: C6 46 EA 01 EB 06 3C 01 0F 85 8C 00 8A 56 E9 8A  // .F....<......V..
    44C0: C2 32 E4 03 C0 8B 5E E0 03 D8 83 3F 00 74 75 26  // .2....^....?.tu&
    44D0: 8B 45 02 8B 1F 03 D8 8B 47 04 32 E4 8B C8 83 C1  // .E......G.2.....
    44E0: 09 32 ED 80 E1 FE 83 F9 00 74 07 D1 E9 33 C0 50  // .2.......t...3.P
    44F0: E2 FD 8B C4 8B D8 89 46 BA 85 C0 74 41 83 C0 08  // .......F...tA...
    4500: 26 89 47 04 8A C2 32 E4 03 C0 8B 5E E0 03 D8 26  // &.G...2....^...&
    4510: 8B 45 02 03 07 8B 5E BA 26 89 07 8B 5E BA 26 8B  // .E....^.&...^.&.
    4520: 07 83 C0 06 26 89 47 02 8B 5E BA 8B 76 F6 26 89  // ....&.G..^..v.&.
    4530: 77 06 8B 5E BA 89 5E F6 C6 46 EA 00 EB 0A C6 46  // w..^..^..F.....F
    4540: EA 87 EB 04 C6 46 EA 83 8A 46 EA 32 E4 83 F8 10  // .....F...F.2....
    4550: 0F 8F 99 00 88 66 EA 8A 46 EA 32 E4 85 C0 0F 8F  // .....f..F.2.....
    4560: 83 00 8C D0 8B 5E BA 8E C0 26 8B 5F 02 89 5E E0  // .....^...&._..^.
    4570: 8B 5E BA 26 8B 5F 02 80 3F 5B 75 4A C6 46 EA 10  // .^.&._..?[uJ.F..
    4580: 8B 5E BA 26 8B 5F 06 89 5E F6 8B 5E BA 26 8B 1F  // .^.&._..^..^.&..
    4590: 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 03  // .G.2......2.....
    45A0: E1 8B 5E F6 89 5E BA 85 DB 74 AC 26 8B 1F 8B 47  // ..^..^...t.&...G
    45B0: 04 C1 E8 08 32 E4 24 7F C1 E8 02 C1 E0 02 8B 5E  // ....2.$........^
    45C0: B8 26 29 07 EB 91 8D 46 B8 E8 AF FD 8A D0 8D 46  // .&)....F.......F
    45D0: B8 E8 2E 00 8A DA 32 FF C1 E3 02 8D 46 B8 FF 97  // ......2.....F...
    45E0: 60 95 E9 72 FF 83 7E F6 00 0F 85 C9 FE 80 7E EA  // `..r..~.......~.
    45F0: 10 74 05 8A 46 EA EB 02 32 C0 8D 66 F8 5F 5E E9  // .t..F...2..f._^.
    4600: 0B FE C3 53 51 8B D8 26 8A 4F 04 32 ED E8 9B E8  // ...SQ..&.O.2....
    4610: 59 5B C3 53 51 8B D8 26 8A 4F 04 32 ED E8 96 E8  // Y[.SQ..&.O.2....
    4620: 59 5B C3 53 8B D8 26 8A 47 04 32 E4 E6 80 5B C3  // Y[.S..&.G.2...[.
    4630: 53 51 8B D8 26 8A 4F 04 32 ED E8 13 D8 59 5B C3  // SQ..&.O.2....Y[.
    4640: 53 8B D8 66 50 66 52 66 51 66 26 8B 47 08 66 26  // S..fPfRfQf&.G.f&
    4650: 8B 57 10 66 26 8B 4F 04 66 F7 F1 66 26 89 47 0C  // .W.f&.O.f..f&.G.
    4660: 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 8B D8  // f&.W.fYfZfX[.S..
    4670: 66 50 66 52 66 51 66 26 8B 47 08 66 26 8B 4F 04  // fPfRfQf&.G.f&.O.
    4680: 66 F7 E1 66 26 89 47 0C 66 26 89 57 10 66 59 66  // f..f&.G.f&.W.fYf
    4690: 5A 66 58 5B C3 53 57 8B D8 26 8B 5F 14 E8 52 EB  // ZfX[.SW..&._..R.
    46A0: 8B D0 66 C1 E8 10 92 5F 5B C3 53 57 8B D8 26 8B  // ..f...._[.SW..&.
    46B0: 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10 8B DA  // G.&.W.....f.....
    46C0: C1 E3 02 E8 50 EB EB D8 53 52 57 8B D8 26 8B 47  // ....P...SRW..&.G
    46D0: 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 26 8B 5F 14  // .&.W..f.....&._.
    46E0: E8 74 EA 5F 5A 5B C3 53 52 8B D8 26 8B 47 1C 26  // .t._Z[.SR..&.G.&
    46F0: 8B 57 1E 92 66 C1 E0 10 8B C2 26 8B 5F 26 8B 5F  // .W..f.....&._&._
    4700: 01 E8 53 EA 5A 5B C3 53 52 56 8B F0 26 8B 5C 26  // ..S.Z[.SRV..&.\&
    4710: 8B 5F 01 E8 DC EA 8B D0 66 C1 E8 10 92 26 89 44  // ._......f....&.D
    4720: 1C 26 89 54 1E 5E 5A 5B C3 53 51 52 57 8B D8 26  // .&.T.^Z[.SQRW..&
    4730: 8B 47 08 26 8B 57 0A 92 66 C1 E0 10 8B C2 8B C8  // .G.&.W..f.......
    4740: 26 8B 47 14 26 8B 57 16 8B D8 87 D3 66 C1 E3 10  // &.G.&.W.....f...
    4750: 8B DA C1 E3 02 8B C1 E8 30 EA 5F 5A 59 5B C3 8B  // ........0._ZY[..
    4760: D0 66 C1 E8 10 92 C3 00 1E 06 66 50 66 51 66 52  // .f........fPfQfR
    4770: 66 53 66 55 66 56 66 57 0E 1F 0A C0 75 06 E8 37  // fSfUfVfW....u..7
    4780: 01 E9 D8 00 3C 01 75 06 E8 67 01 E9 CE 00 3C 02  // ....<.u..g....<.
    4790: 75 06 E8 9B 02 E9 C4 00 3C 03 75 0B E8 CF 03 8B  // u.......<.u.....
    47A0: EC 89 5E 0C E9 B5 00 3C 04 75 0B E8 DE 03 8B EC  // ..^....<.u......
    47B0: 89 5E 0C E9 A6 00 3C 05 75 0B E8 09 05 8B EC 89  // .^....<.u.......
    47C0: 56 10 E9 97 00 3C 06 75 11 E8 86 04 8B EC 89 5E  // V....<.u.......^
    47D0: 0C 89 4E 14 89 56 10 E9 82 00 3C 07 75 10 E8 78  // ..N..V....<.u..x
    47E0: 05 8B EC 88 7E 0D 89 4E 14 89 56 10 EB 6E 3C 08  // ....~..N..V..n<.
    47F0: 75 0A E8 BB 04 8B EC 88 7E 0D EB 60 3C 09 75 05  // u.......~..`<.u.
    4800: E8 B4 05 EB 57 3C 0A 75 10 E8 FC 05 8B EC 89 4E  // ....W<.u.......N
    4810: 14 89 7E 00 8C 46 1C EB 43 3C 0B 75 0B E8 F6 05  // ..~..F..C<.u....
    4820: 8B EC 66 89 4E 14 EB 34 3C 10 75 0A E8 EB 05 8B  // ..f.N..4<.u.....
    4830: EC 89 5E 0C EB 26 3C 11 75 0D E8 1F 06 8B EC 89  // ..^..&<.u.......
    4840: 5E 0C 89 4E 14 EB 15 3C 15 75 0F E8 4A 06 8B EC  // ^..N...<.u..J...
    4850: 89 5E 0C EB 07 B8 4F 01 EB 02 32 C0 8B EC 89 46  // .^....O...2....F
    4860: 18 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58 07  // .f_f^f]f[fZfYfX.
    4870: 1F C3 50 1E 2E 8E 1E E1 03 8C D8 A3 E4 5A A3 F4  // ..P..........Z..
    4880: 5A A3 06 5B 2E 8E 1E D9 03 A3 AA 04 1F 58 CB 00  // Z..[.........X..
    4890: 30 31 2E 30 30 00 56 45 53 41 00 03 68 02 00 00  // 01.00.VESA..h...
    48A0: 01 00 00 00 00 00 00 00 00 03 32 0F 74 01 00 00  // ..........2.t...
    48B0: 00 01 00 00 28 48 00 00 B9 3F 00 8B DF 83 C7 04  // ....(H...?......
    48C0: FC 66 33 C0 F3 66 AB 8B FB BE 2E 48 B9 22 00 F3  // .f3..f.....H."..
    48D0: A4 06 1F 8C 4F 08 8C 47 10 8C 4F 18 8C 4F 1C 8C  // ....O..G..O..O..
    48E0: 4F 20 83 C7 22 89 7F 0E 0E 1F E8 3E D4 B0 4F 32  // O .."......>..O2
    48F0: E4 C3 56 51 57 B9 10 00 66 33 C0 F3 66 AB 5F 59  // ..VQW...f3..f._Y
    4900: 8C DB 06 1F C7 05 BB 00 C6 45 02 07 C7 45 04 40  // .........E...E.@
    4910: 00 C7 45 06 40 00 C6 45 1B 04 C6 45 18 01 C6 45  // ..E.@..E...E...E
    4920: 1A 01 C6 45 1E 01 66 C7 45 3E 00 84 D7 17 8E DB  // ...E..f.E>......
    4930: E8 4D BE 66 0B C0 0F 84 EE 00 06 1F 66 89 45 28  // .M.f........f.E(
    4940: 8C C8 66 C1 E0 10 B8 BB 4C 66 89 45 0C 81 F9 FF  // ..f.....Lf.E....
    4950: 81 0F 84 CF 00 80 E5 03 B2 01 53 8E DB BE 80 1C  // ..........S.....
    4960: E8 F9 D1 5B 06 1F 0F 84 BE 00 53 E8 66 D4 66 89  // ...[......S.f.f.
    4970: 45 12 C7 45 16 08 10 8D 5C 0C E8 A3 E8 66 89 45  // E..E....\....f.E
    4980: 1F 66 89 45 36 8D 5C 10 E8 95 E8 66 89 45 23 66  // .f.E6.\....f.E#f
    4990: 89 45 3A 8D 5C 08 E8 87 E8 0A C0 75 04 5B E9 87  // .E:.\......u.[..
    49A0: 00 E8 30 D4 66 C1 E8 10 3D 58 02 74 0D 3D 5E 01  // ..0.f...=X.t.=^.
    49B0: 74 08 77 0A C6 45 17 08 EB 04 C6 45 17 0E E8 DA  // t.w..E.....E....
    49C0: D3 80 F9 00 74 04 C6 45 1B 06 2E A1 DB 03 89 45  // ....t..E.......E
    49D0: 08 8D 5C 04 E8 49 E8 66 8B C8 66 C1 E9 10 D3 E0  // ..\..I.f..f.....
    49E0: 89 45 10 89 45 32 B0 08 D2 E0 88 45 19 8D 5C 14  // .E..E2.....E..\.
    49F0: E8 2D E8 5B 3D 00 03 77 2F 53 8B D8 B8 00 03 33  // .-.[=..w/S.....3
    4A00: D2 F7 F3 5B FE C8 88 45 1D 88 45 35 88 45 34 8E  // ...[...E..E5.E4.
    4A10: DB 57 53 BE 80 1C E8 BE BD 5B 5F 0B C9 75 05 06  // .WS......[_..u..
    4A20: 1F 83 25 FE 32 E4 EB 02 B4 03 B0 4F 8E DB 5E C3  // ..%.2......O..^.
    4A30: 81 FB FF 81 74 6A 0A FF 75 04 8B C3 EB 21 F6 C7  // ....tj..u....!..
    4A40: 08 75 63 8B CB B2 01 BE 20 1C E8 0F D1 74 57 E8  // .uc..... ....tW.
    4A50: 61 D3 0A C0 75 0E 66 C1 E8 10 80 E7 80 0A C7 E8  // a...u.f.........
    4A60: 91 04 EB 3C E8 7B C1 74 05 E8 A0 BE EB 00 E8 9D  // ...<.{.t........
    4A70: C2 BE 20 1C E8 34 BD 74 2D E8 A5 00 E8 2C 00 66  // .. ..4.t-....,.f
    4A80: BB 20 1C 00 1C E8 22 D3 BE 00 1C E8 25 D3 66 C1  // . ....".....%.f.
    4A90: E8 10 8B D8 32 C0 F6 C7 80 74 02 B0 40 E8 74 BD  // ....2....t..@.t.
    4AA0: B0 4F 32 E4 EB 04 B0 4F B4 03 C3 56 06 33 C0 8E  // .O2....O...V.3..
    4AB0: C0 BE 20 1C E8 1D D3 8B C8 66 C1 E8 10 8B D0 C1  // .. ......f......
    4AC0: E9 03 26 89 0E 4A 04 C1 EA 04 FE CA 26 88 16 84  // ..&..J......&...
    4AD0: 04 26 C6 06 51 04 00 26 C6 06 50 04 00 26 C6 06  // .&..Q..&..P..&..
    4AE0: 49 04 62 26 C7 06 4C 04 00 A0 26 C6 06 85 04 10  // I.b&..L...&.....
    4AF0: 26 C7 06 0C 01 B5 64 8C C8 26 A3 0E 01 07 5E C3  // &.....d..&....^.
    4B00: 01 0F 00 0A 00 00 00 00 00 40 05 0F FF 00 01 02  // .........@......
    4B10: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F  // ................
    4B20: 00 FC BA C4 03 B8 00 01 EF B9 04 00 B4 01 BE 98  // ................
    4B30: 4A AC 86 E0 EF 8A E0 FE C4 E2 F6 B8 00 03 EF B9  // J...............
    4B40: 09 00 BA CE 03 32 E4 BE 9C 4A 8A C4 EE AC 42 EE  // .....2...J....B.
    4B50: 4A FE C4 E2 F5 BA DA 03 EC B9 14 00 BA C0 03 32  // J..............2
    4B60: E4 BE A5 4A 8A C4 EE AC EE FE C4 E2 F7 C3 BE 00  // ...J............
    4B70: 1C E8 3F D2 66 C1 E8 10 8B D8 E8 0F D2 75 05 E8  // ..?.f........u..
    4B80: FB D1 75 04 B8 4F 00 C3 B8 4F 03 C3 83 E1 0F 0F  // ..u..O...O......
    4B90: 84 BB 00 0A D2 75 0C B8 00 1C E8 1D 03 83 C3 11  // .....u..........
    4BA0: E9 A6 00 80 FA 01 75 33 8B FB BB C9 05 B9 08 00  // ......u3........
    4BB0: FC E8 3A E6 66 AB 43 E2 F8 66 C1 E7 10 66 C1 EF  // ..:.f.C..f...f..
    4BC0: 10 B9 00 01 BA 00 01 0E 1F E8 C3 BE 06 1F B8 01  // ................
    4BD0: 1C B9 07 00 8B DF E8 E1 02 EB 6E 80 FA 02 75 6E  // ..........n...un
    4BE0: 8B F3 06 1F FC BB C9 05 B9 08 00 66 AD E8 59 E5  // ...........f..Y.
    4BF0: 43 E2 F8 06 56 0E 1F BB D0 05 E8 F1 E5 8A D0 80  // C...V...........
    4C00: E2 03 66 C1 E8 10 8B C8 BE 00 1C E8 4E CF BB CE  // ..f.........N...
    4C10: 05 E8 DA E5 8B C8 66 C1 E8 10 8B D0 B0 18 B7 01  // ......f.........
    4C20: E8 94 B8 5B 07 53 81 C3 00 04 B8 02 1C B9 07 00  // ...[.S..........
    4C30: E8 87 02 5E 8B FE 66 C1 E7 10 66 C1 EF 10 B9 00  // ...^..f...f.....
    4C40: 01 BA 00 01 0E 1F E8 95 BE B0 4F 32 E4 C3 32 C0  // ..........O2..2.
    4C50: C3 00 E8 37 D1 74 53 BE 00 1C 80 FB 00 74 18 80  // ...7.tS......t..
    4C60: FB 01 75 05 E8 75 D1 EB 1D 80 FB 02 75 10 8B C1  // ..u..u......u...
    4C70: E8 28 D1 D3 E8 8B C8 E8 D1 BD 74 2E EB 08 80 FB  // .(........t.....
    4C80: 03 75 24 E8 CC D0 E8 12 D1 8B D8 D3 E3 50 33 C0  // .u$..........P3.
    4C90: BA 00 03 3B DA 77 05 BA FF FF EB 04 F7 F3 8B D0  // ...;.w..........
    4CA0: 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F B4 03 C3 00  // X...O..2...O....
    4CB0: 0A DB 75 07 8A EF E8 AB BF EB 05 E8 90 BF 8A F8  // ..u.............
    4CC0: B0 4F 32 E4 C3 00 E8 C3 D0 74 2C BE 00 1C E8 E2  // .O2......t,.....
    4CD0: D0 66 C1 E8 10 F6 C4 40 75 1D 0A FF 75 05 E8 1E  // .f.....@u...u...
    4CE0: 00 EB 0F 80 FF 01 75 14 BB 13 00 E8 00 E5 D1 E8  // ......u.........
    4CF0: 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3 32 C0 C3 52  // ...O2...O...2..R
    4D00: 53 66 50 81 E2 FF 02 D1 E2 8B C2 40 66 C1 E0 10  // SfP........@f...
    4D10: 8B C2 BB 13 00 E8 31 E4 BB 12 00 E8 2B E4 66 58  // ......1.....+.fX
    4D20: 5B 5A C3 9C 1E 06 66 50 66 51 66 52 66 53 66 55  // [Z....fPfQfRfSfU
    4D30: 66 56 66 57 0E 1F E8 27 E5 E8 8A FF E8 46 E5 8B  // fVfW...'.....F..
    4D40: EC 89 56 10 89 46 18 66 5F 66 5E 66 5D 66 5B 66  // ..V..F.f_f^f]f[f
    4D50: 5A 66 59 66 58 07 1F 9D CB E8 30 D0 74 54 F6 C3  // ZfYfX.....0.tT..
    4D60: 7F 75 38 53 BE 00 1C E8 72 D0 F7 E2 66 C1 E2 10  // .u8S....r...f...
    4D70: 8B D0 66 81 E1 FF FF 00 00 66 03 D1 E8 1C D0 80  // ..f......f......
    4D80: E2 FC 66 D3 E2 66 81 E2 FF FF FF 02 8D 5C 18 66  // ..f..f.......\.f
    4D90: 8B C2 E8 EB E3 5B E8 9A BC EB 0F 80 FB 82 74 C3  // .....[........t.
    4DA0: 80 FB 01 75 0A E8 7F BC 32 FF B0 4F 32 E4 C3 32  // ...u....2..O2..2
    4DB0: C0 C3 B0 4F B4 03 C3 E8 D2 CF 74 47 80 FF 20 74  // ...O......tG.. t
    4DC0: 08 66 C1 E7 10 66 C1 EF 10 81 F9 00 01 77 31 0A  // .f...f.......w1.
    4DD0: DB 74 05 80 FB 80 75 10 32 F6 E8 71 BE 3C 06 74  // .t....u.2..q.<.t
    4DE0: 02 B6 01 E8 F8 BC EB 13 80 FB 01 75 13 32 F6 E8  // ...........u.2..
    4DF0: 5C BE 3C 06 74 02 B6 01 E8 94 BC B0 4F 32 E4 C3  // \.<.t.......O2..
    4E00: 32 C0 C3 B0 4F B4 03 C3 0E 07 BF 7C 92 2E 8B 0E  // 2...O......|....
    4E10: 7A 92 B8 4F 00 C3 32 C0 C3 00 0A DB 75 06 B7 04  // z..O..2.....u...
    4E20: B3 10 EB 2F 80 FB 01 75 1D 53 32 C9 0A FF 74 02  // .../...u.S2...t.
    4E30: B1 01 E8 D6 BD B1 01 0A FF 74 02 B1 00 E8 B7 BE  // .........t......
    4E40: E8 A0 BB 5B EB 0D 80 FB 02 75 0D E8 CF BD 8A F8  // ...[.....u......
    4E50: C0 E7 02 B0 4F 32 E4 C3 B8 4F 03 C3 80 FB 01 75  // ....O2...O.....u
    4E60: 09 33 C0 E8 35 BE 74 2B EB 24 80 FB 07 75 24 0A  // .3..5.t+.$...u$.
    4E70: FF 75 0E B0 82 E8 3F B6 0A C9 74 12 B9 03 03 EB  // .u....?...t.....
    4E80: 0D 0B C9 B1 00 74 02 B1 03 B0 82 E8 29 B6 B0 4F  // .....t......)..O
    4E90: 32 E4 C3 B0 4F B4 03 C3 80 E3 01 0A DB 75 05 BB  // 2...O........u..
    4EA0: 02 01 EB 0C 33 C0 53 E8 4D BE E8 95 C5 5B 74 05  // ....3.S.M....[t.
    4EB0: B0 4F 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD  // .O2...O......r..
    4EC0: 42 C3 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // B...fPfQfRfSfUfV
    4ED0: 66 57 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94  // fW..P.......X...
    4EE0: 9C 4E 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // .Nf_f^f]f[fZfYfX
    4EF0: 07 1F C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF  // .....P.......X..
    4F00: 94 9C 4E C3 D6 4E 20 89 39 89 56 89 CB 4F 59 80  // ..N..N .9.V..OY.
    4F10: 8B 80 FE 80 81 81 0F 83 13 83 1C 86 ED 86 70 87  // ..............p.
    4F20: D7 87 72 89 97 89 40 8C E4 51 87 90 8A 4E 8A 4E  // ..r...@..Q...N.N
    4F30: 8A 4E 8A 4E 8A 4E 8A 4E 57 91 97 75 EB 76 2E 8E  // .N.N.N.NW..u.v..
    4F40: 1E D9 03 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C6  // ....&...P.......
    4F50: 01 3B D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26  // .;.u.X........0&
    4F60: F6 47 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09  // .G..t.... ..uI..
    4F70: EB 06 A8 01 74 41 B5 0B 53 E8 67 42 0A FF 5B 75  // ....tA..S.gB..[u
    4F80: 0B 80 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87  // ..&........+X...
    4F90: 04 08 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7  // ...&.........c..
    4FA0: 06 85 04 08 00 C6 06 84 04 18 C7 06 0C 01 A2 5C  // ...............\
    4FB0: 8C 0E 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04  // .....B..&.......
    4FC0: 58 53 50 0E 1F 33 C9 8A C8 B2 08 BE 40 1C E8 8B  // XSP..3......@...
    4FD0: CB E8 0E BC 74 05 E8 33 B9 EB 00 E8 30 BD BE 40  // ....t..3....0..@
    4FE0: 1C E8 C7 B7 58 5B 0F 84 6C FF 2E 8E 1E D9 03 0E  // ....X[..l.......
    4FF0: 07 E8 4B 2A 0E 1F 53 66 BB 40 1C 00 1C E8 AA CD  // ..K*..Sf.@......
    5000: BE 00 1C B0 20 E8 0C B8 5B 2E 8E 1E D9 03 0E 07  // .... ...[.......
    5010: E8 54 2F E8 24 00 E8 23 3E E8 D1 01 E8 8E 01 E8  // .T/.$..#>.......
    5020: A9 3F 0E 1F BE 00 1C B0 10 E8 E8 B7 E8 2F 2F E8  // .?...........//.
    5030: 27 2F C3 8B EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00  // '/....F..../....
    5040: E8 BD 00 E8 52 00 E8 94 0B C3 53 83 C3 0A 8B 16  // ....R.....S.....
    5050: 63 04 B9 19 00 B8 11 30 EF 32 C0 26 8A 27 EF 43  // c......0.2.&.'.C
    5060: FE C0 E2 F7 5B 80 C2 06 32 C0 EE C3 53 BA C4 03  // ....[...2...S...
    5070: 83 C3 05 B9 04 00 B0 01 26 8A 27 3C 01 75 03 80  // ........&.'<.u..
    5080: CC 20 EF 43 FE C0 E2 F0 5B 26 8A 47 09 BA C2 03  // . .C....[&.G....
    5090: EE B2 C4 B8 00 03 EF C3 8B F3 83 C6 23 BA DA 03  // ............#...
    50A0: 26 F6 47 09 01 75 02 B2 BA F6 06 89 04 08 74 1D  // &.G..u........t.
    50B0: 83 C6 10 EC B9 04 00 B4 10 B2 C0 80 FC 11 74 07  // ..............t.
    50C0: 8A C4 EE 26 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B  // ...&...F.....S..
    50D0: DE B9 14 00 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07  // ....2........&..
    50E0: EE 43 E2 F4 8A C4 EE 32 C0 EE 1E 06 E8 81 2E 0B  // .C.....2........
    50F0: ED 74 09 1F 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3  // .t........F...[.
    5100: 53 83 C3 37 B9 09 00 32 C0 BA CE 03 26 8A 27 EF  // S..7...2....&.'.
    5110: 43 FE C0 E2 F7 5B C3 BB A2 53 0E 07 8B D3 0A E4  // C....[...S......
    5120: 7D 01 C3 E8 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6  // }......3.....<J.
    5130: 06 89 04 10 75 20 A0 88 04 24 0F 3C 02 7E 24 3C  // ....u ...$.<.~$<
    5140: 08 74 20 3C 06 74 1C 3C 07 74 18 B0 40 F6 E4 03  // .t <.t.<.t..@...
    5150: D8 81 C3 C0 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3  // .......@........
    5160: C0 05 C3 B0 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6  // ....@........u..
    5170: 06 89 04 10 75 05 81 C3 C0 01 C3 81 C3 40 06 C3  // ....u........@..
    5180: BF 24 51 BE 45 51 33 C9 E8 4E 00 C3 04 00 01 05  // .$Q.EQ3..N......
    5190: 40 01 06 80 01 0D 40 03 0E 80 03 0F 40 04 10 80  // @.....@.....@...
    51A0: 04 11 80 06 12 C0 06 13 00 07 62 00 02 53 8A 1E  // ..........b..S..
    51B0: 49 04 80 FB 07 7F 10 32 FF D1 E3 2E 8B 87 61 51  // I......2......aQ
    51C0: A2 65 04 88 26 66 04 5B C3 2C 30 28 30 2D 30 29  // .e..&f.[.,0(0-0)
    51D0: 30 2A 30 2E 30 1E 3F 29 30 2E 38 25 75 07 2E 03  // 0*0.0.?)0.8%u...
    51E0: 5D 01 33 F6 C3 83 C7 03 3B FE 75 ED C3 1E 06 2E  // ].3.....;.u.....
    51F0: 8E 1E D9 03 F6 06 87 04 80 75 49 83 3E 4C 04 00  // .........uI.>L..
    5200: 74 42 A0 49 04 B9 00 20 2E 8B 3E DF 03 26 F6 47  // tB.I... ..>..&.G
    5210: 33 01 75 0E 26 F6 47 09 01 75 1B 2E 8B 3E DD 03  // 3.u.&.G..u...>..
    5220: EB 14 3C 06 7E 0B 2E 8B 3E DB 03 26 8A 67 37 B5  // ..<.~...>..&.g7.
    5230: 40 66 33 C0 EB 06 66 B8 20 07 20 07 8E C7 66 33  // @f3...f. . ...f3
    5240: FF F3 66 AB 80 26 87 04 7F 07 1F C3 2E 8E 1E D9  // ..f..&..........
    5250: 03 80 FB 10 75 03 E9 7A 01 80 FB 20 75 03 E9 9B  // ....u..z... u...
    5260: 01 80 FB 32 75 1F BA CC 03 0A C0 75 09 EC 0C 02  // ...2u......u....
    5270: B2 C2 EE E9 F3 00 FE C8 0F 85 F3 00 EC 24 FD B2  // .............$..
    5280: C2 EE E9 E4 00 80 FB 35 75 28 3C 80 75 08 80 0E  // .......5u(<.u...
    5290: 89 04 40 E9 D3 00 F6 06 89 04 40 0F 84 D0 00 0A  // ..@.......@.....
    52A0: C0 0F 84 CA 00 FE C8 75 06 E8 D8 08 E9 BA 00 E9  // .......u........
    52B0: BD 00 80 FB 30 74 03 E9 96 00 50 E8 25 3F 8A EF  // ....0t....P.%?..
    52C0: BA CC 03 EC 8A C8 58 0A C0 75 30 B7 08 F6 C1 01  // ......X..u0.....
    52D0: 75 12 0A ED 75 0B A0 10 04 24 30 3C 30 75 10 B7  // u...u....$0<0u..
    52E0: 02 E9 8B 00 A0 10 04 24 30 3C 30 75 02 B7 02 80  // .......$0<0u....
    52F0: 26 89 04 6F 80 0E 89 04 80 EB 36 3C 01 75 41 80  // &..o......6<.uA.
    5300: 26 89 04 6F B7 09 F6 C1 01 75 15 B7 0B A0 10 04  // &..o.....u......
    5310: 24 30 3C 30 74 1B B7 09 0A ED 74 15 B7 05 EB 11  // $0<0t.....t.....
    5320: A0 10 04 24 30 3C 30 75 08 B7 0B 0A ED 74 02 B7  // ...$0<0u.....t..
    5330: 03 8A 1E 88 04 80 E3 F0 0A DF 88 1E 88 04 EB 29  // ...............)
    5340: 3C 02 75 2B 80 26 89 04 6F 80 0E 89 04 10 EB B4  // <.u+.&..o.......
    5350: 80 FB 31 75 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89  // ..1u...t.<.u....
    5360: 04 08 EB 05 80 26 89 04 F7 8B EC C6 46 1A 12 C3  // .....&......F...
    5370: 80 FB 33 75 16 3C 00 74 0B 3C 01 75 EC 80 26 89  // ..3u.<.t.<.u..&.
    5380: 04 FD EB E5 80 0E 89 04 02 EB DE 80 FB 34 75 17  // .............4u.
    5390: 3C 00 75 07 80 26 87 04 FE EB CE 3C 01 75 07 80  // <.u..&.....<.u..
    53A0: 0E 87 04 01 EB C3 C3 80 FB 36 75 26 BB 20 FF 3C  // .........6u&. .<
    53B0: 01 74 09 BB 00 DF 3C 00 74 02 EB AD E8 02 00 EB  // .t....<.t.......
    53C0: A8 9C FA BA C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE  // .........B."....
    53D0: 9D C3 C3 B3 03 B7 00 BA CC 03 EC A8 01 75 02 B7  // .............u..
    53E0: 01 A0 88 04 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B  // ..........%.....
    53F0: EC 89 5E 0E 89 4E 16 C6 46 1A 12 C3 9C FA C7 06  // ..^..N..F.......
    5400: 14 00 84 7A 8C 0E 16 00 9D C3 28 18 08 00 08 09  // ...z......(.....
    5410: 03 00 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07  // ...c-'(.+.......
    5420: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
    5430: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    5440: 00 00 00 00 00 00 10 0E 00 FF 28 18 08 00 08 09  // ..........(.....
    5450: 03 00 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07  // ...c-'(.+.......
    5460: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
    5470: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    5480: 00 00 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01  // ..........P.....
    5490: 03 00 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07  // ...c_OP.U.......
    54A0: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
    54B0: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    54C0: 00 00 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01  // ..........P.....
    54D0: 03 00 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07  // ...c_OP.U.......
    54E0: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
    54F0: 03 04 05 06 07 10 11 12 13 14 15 16 17 08 00 0F  // ................
    5500: 00 00 00 00 00 00 10 0E 00 FF 28 18 08 00 40 09  // ..........(...@.
    5510: 03 00 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00  // ...c-'(.+.......
    5520: 00 00 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15  // ................
    5530: 17 02 04 06 07 10 11 12 13 14 15 16 17 01 00 03  // ................
    5540: 00 00 00 00 00 00 30 0F 00 FF 28 18 08 00 40 09  // ......0...(...@.
    5550: 03 00 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00  // ...c-'(.+.......
    5560: 00 00 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15  // ................
    5570: 17 02 04 06 07 10 11 12 13 14 15 16 17 01 00 03  // ................
    5580: 00 00 00 00 00 00 30 0F 00 FF 50 18 08 00 40 01  // ......0...P...@.
    5590: 01 00 06 63 5F 4F 50 82 54 80 BF 1F 00 C1 00 00  // ...c_OP.T.......
    55A0: 00 00 00 00 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17  // .......(........
    55B0: 17 17 17 17 17 17 17 17 17 17 17 17 17 01 00 01  // ................
    55C0: 00 00 00 00 00 00 00 0D 00 FF 50 18 0E 00 10 00  // ..........P.....
    55D0: 03 00 03 A6 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
    55E0: 00 00 00 00 83 85 5D 28 0D 63 BA A3 FF 00 08 08  // ......](.c......
    55F0: 08 08 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F  // ................
    5600: 08 00 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01  // ..........P.....
    5610: 0F 00 0A E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
    5620: 00 00 00 00 EA 8C DF 50 00 E7 04 E3 FF 00 01 02  // .......P........
    5630: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F  // ................
    5640: 00 10 00 00 00 00 40 05 0F FF 00 05 11 1C 08 0B  // ......@.........
    5650: 14 28 0E 18 2D 32 20 24 38 3F 00 05 08 0B 0E 11  // .(..-2 $8?......
    5660: 14 18 1C 20 24 28 2D 32 38 3F 07 0C 10 15 1A 18  // ... $(-28?......
    5670: 16 15 13 1C 25 2F 38 33 2E 2A 25 27 29 2A 2C 23  // ....%/83.*%')*,#
    5680: 19 10 23 25 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39  // ..#%'*,+*))-27;9
    5690: 37 34 32 33 34 35 35 31 2C 27 2F 30 32 33 34 34  // 74234551,'/02344
    56A0: 33 33 32 35 38 3A 3D 3C 3A 39 38 38 39 39 3A 37  // 33258:=<:98899:7
    56B0: 34 31 03 05 07 09 0B 0B 0A 09 08 0D 11 15 19 17  // 41..............
    56C0: 15 13 11 11 12 13 14 0F 0B 07 10 10 12 13 14 13  // ................
    56D0: 13 13 12 14 16 18 1A 19 18 17 16 17 17 17 18 15  // ................
    56E0: 14 11 15 15 16 17 17 17 17 17 16 18 19 1A 1B 1B  // ................
    56F0: 1A 19 19 19 19 19 1A 18 17 16 02 03 04 05 07 06  // ................
    5700: 06 05 05 07 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09  // ................
    5710: 06 04 09 09 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F  // ................
    5720: 0E 0D 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D  // ................
    5730: 0D 0D 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E  // ................
    5740: 0D 0C 00 00 00 00 00 00 00 00 28 18 08 00 20 09  // ..........(... .
    5750: 0F 00 06 63 2D 27 28 90 2B 80 BF 1F 00 C0 00 00  // ...c-'(.+.......
    5760: 00 00 00 00 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02  // ................
    5770: 03 04 05 06 07 10 11 12 13 14 15 16 17 01 00 0F  // ................
    5780: 00 00 00 00 00 00 00 05 0F FF 50 18 08 00 40 01  // ..........P...@.
    5790: 0F 00 06 63 5F 4F 50 82 54 80 BF 1F 00 C0 00 00  // ...c_OP.T.......
    57A0: 00 00 00 00 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02  // .......(........
    57B0: 03 04 05 06 07 10 11 12 13 14 15 16 17 01 00 0F  // ................
    57C0: 00 00 00 00 00 00 00 05 0F FF 00 05 11 1C 08 0B  // ................
    57D0: 25 28 02 07 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E  // %(... ..(,..%*..
    57E0: 32 36 0F 13 27 2C 1B 20 34 39 06 0B 1F 24 13 18  // 26..',. 49...$..
    57F0: 2C 30 09 0D 21 26 15 1A 2E 33 13 17 2B 30 1F 24  // ,0..!&...3..+0.$
    5800: 38 3D 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B  // 8=..-2 $8?......
    5810: 14 18 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24  // ............-2 $
    5820: 38 3F 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B  // 8?..-2 $8?......
    5830: 14 18 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24  // ............-2 $
    5840: 38 3F 0E 18 2D 32 20 24 38 3F 50 18 0E 00 80 01  // 8?..-2 $8?P.....
    5850: 0F 00 06 A2 5F 4F 50 82 54 80 BF 1F 00 40 00 00  // ...._OP.T....@..
    5860: 00 00 00 00 83 85 5D 28 0F 63 BA E3 FF 00 08 00  // ......](.c......
    5870: 00 18 18 00 00 00 08 00 00 00 18 00 00 0B 00 05  // ................
    5880: 00 00 00 00 00 00 00 05 05 FF 50 18 0E 00 80 01  // ..........P.....
    5890: 0F 00 06 A3 5F 4F 50 82 54 80 BF 1F 00 40 00 00  // ...._OP.T....@..
    58A0: 00 00 00 00 83 85 5D 28 0F 63 BA E3 FF 00 01 02  // ......](.c......
    58B0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F  // .....89:;<=>?...
    58C0: 00 00 00 00 00 00 00 05 0F FF 28 18 0E 00 08 09  // ..........(.....
    58D0: 03 00 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C  // ....-'(.+....M..
    58E0: 00 00 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02  // ......]..c......
    58F0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    5900: 00 00 00 00 00 00 10 0E 00 FF 28 18 0E 00 08 09  // ..........(.....
    5910: 03 00 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C  // ....-'(.+....M..
    5920: 00 00 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02  // ......]..c......
    5930: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    5940: 00 00 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01  // ..........P.....
    5950: 03 00 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
    5960: 00 00 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02  // ......](.c......
    5970: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    5980: 00 00 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01  // ..........P.....
    5990: 03 00 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C  // ...._OP.U....M..
    59A0: 00 00 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02  // ......](.c......
    59B0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F  // .....89:;<=>?...
    59C0: 00 00 00 00 00 00 10 0E 00 FF 28 18 10 00 08 08  // ..........(.....
    59D0: 03 00 02 67 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E  // ...g-'(.+....O..
    59E0: 00 00 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02  // ................
    59F0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F  // .....89:;<=>?...
    5A00: 08 00 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00  // ..........P.....
    5A10: 03 00 02 67 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E  // ...g_OP.U....O..
    5A20: 00 00 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02  // .......(........
    5A30: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F  // .....89:;<=>?...
    5A40: 08 00 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00  // ..........P.....
    5A50: 03 00 02 66 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E  // ...f_OP.U....O..
    5A60: 00 00 00 00 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08  // .......(........
    5A70: 08 08 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F  // ................
    5A80: 08 00 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01  // ..........P.....
    5A90: 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
    5AA0: 00 00 00 00 EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F  // .......(......??
    5AB0: 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F  // ?????????????...
    5AC0: 00 00 00 00 00 00 00 05 01 FF 50 1D 10 00 A0 01  // ..........P.....
    5AD0: 0F 00 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00  // ...._OP.T..>.@..
    5AE0: 00 00 00 00 EA 8C DF 28 00 E7 04 E3 FF 00 01 02  // .......(........
    5AF0: 03 04 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F  // .....89:;<=>?...
    5B00: 00 00 00 00 00 00 00 05 0F FF 28 18 08 00 20 01  // ..........(... .
    5B10: 0F 00 0E 63 5F 4F 50 82 54 80 BF 1F 00 41 00 00  // ...c_OP.T....A..
    5B20: 00 00 00 00 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02  // .......(@.......
    5B30: 03 04 05 06 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F  // .............A..
    5B40: 00 00 00 00 00 00 40 05 0F FF A2 53 00 C0 00 00  // ......@....S....
    5B50: 00 00 00 00 00 00 00 00 00 00 02 5B 00 C0 00 00  // ...........[....
    5B60: 00 00 00 00 00 00 00 00 00 00 1A 00 55 92 00 C0  // ............U...
    5B70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5B80: 00 00 00 00 1E E8 10 00 2E 8E 1E D9 03 E8 B3 36  // ...............6
    5B90: E8 8A 36 E8 68 1A 1F C3 2E 8E 1E D9 03 C7 06 87  // ..6.h...........
    5BA0: 04 60 F9 C6 06 8A 04 0B A0 89 04 0C 11 24 17 A2  // .`...........$..
    5BB0: 89 04 B4 01 E8 65 1E A0 89 04 80 26 10 04 CF 80  // .....e.....&....
    5BC0: 0E 10 04 20 C7 06 63 04 D4 03 B8 03 00 E8 23 F3  // ... ..c.......#.
    5BD0: C3 1E 2E 8E 1E D9 03 0E 07 EB 00 1F C3 F6 06 89  // ................
    5BE0: 04 08 74 01 C3 53 BA C8 03 EC B0 FF B2 C6 EE B2  // ..t..S..........
    5BF0: C8 80 3E 63 04 B4 75 2F BE 56 5C B9 40 00 33 DB  // ..>c..u/.V\.@.3.
    5C00: 9C FA 8A C3 EE 8B FB C1 EF 03 83 E7 03 03 FE 2E  // ................
    5C10: 8A 05 42 EE 2E 8A 45 04 EE 2E 8A 45 08 EE FE C3  // ..B...E....E....
    5C20: 4A E2 DF 9D E9 85 00 26 8A 47 2B F6 06 89 04 06  // J......&.G+.....
    5C30: 74 31 B9 F8 00 BF E2 55 3C 08 74 11 B9 40 00 BF  // t1.....U<.t..@..
    5C40: 62 57 3C 38 74 07 3C 3F 74 03 BF A2 57 33 DB 9C  // bW<8t.<?t...W3..
    5C50: FA 8A C3 EE 2E 8A 01 42 EE EE EE FE C3 4A E2 F1  // .......B.....J..
    5C60: 9D EB 49 3C 08 74 25 3C 38 74 2E 3C 3F 74 2A B9  // ..I<.t%<8t.<?t*.
    5C70: 08 00 33 DB 51 E8 EC D0 B9 08 00 F7 C3 10 00 74  // ..3.Q..........t
    5C80: 03 83 C7 18 E8 67 00 59 E2 EA EB 20 E8 D5 D0 B9  // .....g.Y... ....
    5C90: 10 00 33 DB E8 57 00 EB 13 B9 40 00 33 DB 51 E8  // ..3..W....@.3.Q.
    5CA0: 28 00 8A C3 E8 7A 2F FE C3 59 E2 F2 5B C3 00 2A  // (....z/..Y..[..*
    5CB0: 00 2A 00 2A 00 2A 15 3F 15 3F 15 3F 15 3F 00 2A  // .*.*.*.?.?.?.?.*
    5CC0: 00 3F 00 2A 00 3F 00 2A 00 3F 8B FB C1 EF 02 83  // .?.*.?.*.?......
    5CD0: E7 0F 2E 8A B5 46 5C 8B FB D1 EF 83 E7 0F 2E 8A  // .....F\.........
    5CE0: AD 46 5C 8B FB 83 E7 0F 2E 8A 8D 46 5C C3 9C 8A  // .F\........F\...
    5CF0: C3 FA EE 2E 8A 05 42 EE 47 2E 8A 05 EE 47 2E 8A  // ......B.G....G..
    5D00: 05 EE 47 FE C3 4A E2 E7 9D C3 00 00 00 00 00 00  // ..G..J..........
    5D10: 00 00 7E 81 A5 81 BD 99 81 7E 7C FE D6 BA C6 FE  // ..~......~|.....
    5D20: 7C 00 C6 EE FE FE 7C 38 10 00 10 38 7C FE 7C 38  // |.....|8...8|.|8
    5D30: 10 00 10 38 10 EE EE 10 38 00 38 7C FE FE 6C 10  // ...8....8.8|..l.
    5D40: 38 00 00 18 3C 7E 3C 18 00 00 FF E7 C3 81 C3 E7  // 8...<~<.........
    5D50: FF FF 00 18 3C 66 66 3C 18 00 FF E7 C3 99 99 C3  // ....<ff<........
    5D60: E7 FF 1E 0E 1E 36 78 CC CC 78 7E C3 C3 7E 18 7E  // .....6x..x~..~.~
    5D70: 18 18 1E 1A 1E 18 18 70 F0 60 3E 3E 36 36 F6 66  // .......p.`>>66.f
    5D80: 1E 0C DB 3C 66 E7 66 3C DB 00 80 C0 F0 F8 F0 C0  // ...<f.f<........
    5D90: 80 00 02 06 1E 3E 1E 06 02 00 18 3C 7E 18 7E 3C  // .....>.....<~.~<
    5DA0: 18 00 66 66 66 66 66 00 66 00 7F DB 7B 3B 1B 1B  // ..fffff.f...{;..
    5DB0: 1B 00 3C 66 38 6C 6C 38 CC 78 00 00 00 00 FE FE  // ..<f8ll8.x......
    5DC0: FE 00 18 3C 7E 18 7E 3C 18 7E 18 3C 7E 18 18 18  // ...<~.~<.~.<~...
    5DD0: 18 00 18 18 18 18 7E 3C 18 00 00 18 1C FE 1C 18  // ......~<........
    5DE0: 00 00 00 30 70 FE 70 30 00 00 00 00 C0 C0 C0 FE  // ...0p.p0........
    5DF0: 00 00 00 24 66 FF 66 24 00 00 00 10 38 7C 7C FE  // ...$f.f$....8||.
    5E00: 00 00 00 FE 7C 7C 38 10 00 00 00 00 00 00 00 00  // ....||8.........
    5E10: 00 00 18 3C 3C 18 18 00 18 00 6C 6C 6C 00 00 00  // ...<<.....lll...
    5E20: 00 00 6C 6C FE 6C FE 6C 6C 00 18 7E C0 7C 06 FC  // ..ll.l.ll..~.|..
    5E30: 18 00 00 C6 0C 18 30 60 C6 00 38 6C 38 76 CC CC  // ......0`..8l8v..
    5E40: 76 00 18 18 30 00 00 00 00 00 18 30 60 60 60 30  // v...0......0```0
    5E50: 18 00 60 30 18 18 18 30 60 00 00 EE 7C FE 7C EE  // ..`0...0`...|.|.
    5E60: 00 00 00 18 18 7E 18 18 00 00 00 00 00 00 18 18  // .....~..........
    5E70: 30 00 00 00 00 FE 00 00 00 00 00 00 00 00 00 38  // 0..............8
    5E80: 38 00 06 0C 18 30 60 C0 80 00 7C C6 CE DE F6 E6  // 8....0`...|.....
    5E90: 7C 00 18 78 18 18 18 18 7E 00 7C C6 0C 18 30 66  // |..x....~.|...0f
    5EA0: FE 00 7C C6 06 3C 06 C6 7C 00 0C 1C 3C 6C FE 0C  // ..|..<..|...<l..
    5EB0: 0C 00 FE C0 FC 06 06 C6 7C 00 7C C6 C0 FC C6 C6  // ........|.|.....
    5EC0: 7C 00 FE C6 06 0C 18 18 18 00 7C C6 C6 7C C6 C6  // |.........|..|..
    5ED0: 7C 00 7C C6 C6 7E 06 C6 7C 00 00 1C 1C 00 00 1C  // |.|..~..|.......
    5EE0: 1C 00 00 18 18 00 00 18 18 30 0C 18 30 60 30 18  // .........0..0`0.
    5EF0: 0C 00 00 00 FE 00 00 FE 00 00 60 30 18 0C 18 30  // ..........`0...0
    5F00: 60 00 7C C6 06 0C 18 00 18 00 7C C6 C6 DE DC C0  // `.|.......|.....
    5F10: 7E 00 38 6C C6 C6 FE C6 C6 00 FC 66 66 7C 66 66  // ~.8l.......ff|ff
    5F20: FC 00 3C 66 C0 C0 C0 66 3C 00 F8 6C 66 66 66 6C  // ..<f...f<..lfffl
    5F30: F8 00 FE C2 C0 F8 C0 C2 FE 00 FE 62 60 7C 60 60  // ...........b`|``
    5F40: F0 00 7C C6 C0 C0 DE C6 7C 00 C6 C6 C6 FE C6 C6  // ..|.....|.......
    5F50: C6 00 3C 18 18 18 18 18 3C 00 3C 18 18 18 D8 D8  // ..<.....<.<.....
    5F60: 70 00 C6 CC D8 F0 D8 CC C6 00 F0 60 60 60 60 62  // p..........````b
    5F70: FE 00 C6 EE FE D6 D6 C6 C6 00 C6 E6 E6 F6 DE CE  // ................
    5F80: C6 00 7C C6 C6 C6 C6 C6 7C 00 FC 66 66 7C 60 60  // ..|.....|..ff|``
    5F90: F0 00 7C C6 C6 C6 C6 D6 7C 06 FC C6 C6 FC D8 CC  // ..|.....|.......
    5FA0: C6 00 7C C6 C0 7C 06 C6 7C 00 7E 5A 18 18 18 18  // ..|..|..|.~Z....
    5FB0: 3C 00 C6 C6 C6 C6 C6 C6 7C 00 C6 C6 C6 C6 6C 38  // <.......|.....l8
    5FC0: 10 00 C6 C6 D6 D6 FE EE C6 00 C6 6C 38 38 38 6C  // ...........l888l
    5FD0: C6 00 66 66 66 3C 18 18 3C 00 FE 86 0C 18 30 62  // ..fff<..<.....0b
    5FE0: FE 00 7C 60 60 60 60 60 7C 00 C0 60 30 18 0C 06  // ..|`````|..`0...
    5FF0: 02 00 7C 0C 0C 0C 0C 0C 7C 00 10 38 6C C6 00 00  // ..|.....|..8l...
    6000: 00 00 00 00 00 00 00 00 00 FF 30 30 18 00 00 00  // ..........00....
    6010: 00 00 00 00 78 0C 7C CC 7E 00 E0 60 7C 66 66 66  // ....x.|.~..`|fff
    6020: FC 00 00 00 7C C6 C0 C6 7C 00 1C 0C 7C CC CC CC  // ....|...|...|...
    6030: 7E 00 00 00 7C C6 FE C0 7C 00 1C 36 30 FC 30 30  // ~...|...|..60.00
    6040: 78 00 00 00 76 CE C6 7E 06 7C E0 60 7C 66 66 66  // x...v..~.|.`|fff
    6050: E6 00 18 00 38 18 18 18 3C 00 0C 00 1C 0C 0C 0C  // ....8...<.......
    6060: CC 78 E0 60 66 6C 78 6C E6 00 18 18 18 18 18 18  // .x.`flxl........
    6070: 1C 00 00 00 6C FE D6 D6 C6 00 00 00 DC 66 66 66  // ....l........fff
    6080: 66 00 00 00 7C C6 C6 C6 7C 00 00 00 DC 66 66 7C  // f...|...|....ff|
    6090: 60 F0 00 00 76 CC CC 7C 0C 1E 00 00 DC 66 60 60  // `...v..|.....f``
    60A0: F0 00 00 00 7C C0 7C 06 7C 00 30 30 FC 30 30 36  // ....|.|.|.00.006
    60B0: 1C 00 00 00 CC CC CC CC 76 00 00 00 C6 C6 6C 38  // ........v.....l8
    60C0: 10 00 00 00 C6 C6 D6 FE 6C 00 00 00 C6 6C 38 6C  // ........l....l8l
    60D0: C6 00 00 00 C6 C6 CE 76 06 7C 00 00 FC 98 30 64  // .......v.|....0d
    60E0: FC 00 0E 18 18 70 18 18 0E 00 18 18 18 00 18 18  // .....p..........
    60F0: 18 00 70 18 18 0E 18 18 70 00 76 DC 00 00 00 00  // ..p.....p.v.....
    6100: 00 00 00 10 38 38 6C 6C FE 00 3C 66 C0 66 3C 18  // ....88ll..<f.f<.
    6110: CC 78 00 C6 00 C6 C6 CE 76 00 0E 00 7C C6 FE C0  // .x......v...|...
    6120: 7C 00 7C C6 78 0C 7C CC 7E 00 C6 00 78 0C 7C CC  // |.|.x.|.~...x.|.
    6130: 7E 00 E0 00 78 0C 7C CC 7E 00 38 38 78 0C 7C CC  // ~...x.|.~.88x.|.
    6140: 7E 00 00 00 7C C0 7C 18 6C 38 7C C6 7C C6 FE C0  // ~...|.|.l8|.|...
    6150: 7C 00 C6 00 7C C6 FE C0 7C 00 E0 00 7C C6 FE C0  // |...|...|...|...
    6160: 7C 00 66 00 38 18 18 18 3C 00 7C C6 38 18 18 18  // |.f.8...<.|.8...
    6170: 3C 00 00 00 38 18 18 18 3C 00 C6 38 6C C6 FE C6  // <...8...<..8l...
    6180: C6 00 38 38 00 7C C6 FE C6 00 0E 00 FE C0 F8 C0  // ..88.|..........
    6190: FE 00 00 00 6C 9A 7E D8 6E 00 7E D8 D8 FE D8 D8  // ....l.~.n.~.....
    61A0: DE 00 7C C6 00 7C C6 C6 7C 00 00 C6 00 7C C6 C6  // ..|..|..|....|..
    61B0: 7C 00 00 E0 00 7C C6 C6 7C 00 7C C6 00 C6 C6 CE  // |....|..|.|.....
    61C0: 76 00 00 E0 00 C6 C6 CE 76 00 18 00 3C 18 18 18  // v.......v...<...
    61D0: 3C 00 C6 38 6C C6 C6 6C 38 00 C6 00 C6 C6 C6 C6  // <..8l..l8.......
    61E0: 7C 00 00 18 7E D8 D8 7E 18 00 38 6C 60 F0 66 F6  // |...~..~..8l`.f.
    61F0: 6C 00 C3 66 3C 7E 18 3C 18 00 3E 63 38 0E 63 3E  // l..f<~.<..>c8.c>
    6200: 00 1C 00 3E 61 3C 86 7C 00 1C 0E 00 78 0C 7C CC  // ...>a<.|....x.|.
    6210: 7E 00 1C 00 38 18 18 18 3C 00 00 0E 00 7C C6 C6  // ~...8...<....|..
    6220: 7C 00 00 0E 00 CC CC DC 76 00 00 FC 00 BC 66 66  // |.......v.....ff
    6230: E6 00 FE 00 C6 E6 F6 CE C6 00 3E 00 3E 60 67 63  // ..........>.>`gc
    6240: 3D 00 3E 00 76 CE C6 7E 06 7C 18 00 18 30 60 66  // =.>.v..~.|...0`f
    6250: 3C 00 00 00 00 7C 60 60 00 00 00 00 00 7C 0C 0C  // <....|``.....|..
    6260: 00 00 C0 CC D8 30 7C 36 0C 3E C0 CC D8 30 6C 3C  // .....0|6.>...0l<
    6270: 7E 0C 18 00 18 18 3C 3C 18 00 00 36 6C D8 6C 36  // ~.....<<...6l.l6
    6280: 00 00 00 D8 6C 36 6C D8 00 00 22 88 22 88 22 88  // ....l6l...".".".
    6290: 22 88 55 AA 55 AA 55 AA 55 AA DD 77 DD 77 DD 77  // ".U.U.U.U..w.w.w
    62A0: DD 77 18 18 18 18 18 18 18 18 18 18 18 18 F8 18  // .w..............
    62B0: 18 18 18 18 F8 18 F8 18 18 18 36 36 36 36 F6 36  // ..........6666.6
    62C0: 36 36 00 00 00 00 FE 36 36 36 00 00 F8 18 F8 18  // 66.....666......
    62D0: 18 18 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36  // ..66...666666666
    62E0: 36 36 00 00 FE 06 F6 36 36 36 36 36 F6 06 FE 00  // 66.....66666....
    62F0: 00 00 36 36 36 36 FE 00 00 00 18 18 F8 18 F8 00  // ..6666..........
    6300: 00 00 00 00 00 00 F8 18 18 18 18 18 18 18 1F 00  // ................
    6310: 00 00 18 18 18 18 FF 00 00 00 00 00 00 00 FF 18  // ................
    6320: 18 18 18 18 18 18 1F 18 18 18 00 00 00 00 FF 00  // ................
    6330: 00 00 18 18 18 18 FF 18 18 18 18 18 1F 18 1F 18  // ................
    6340: 18 18 36 36 36 36 37 36 36 36 36 36 37 30 3F 00  // ..666676666670?.
    6350: 00 00 00 00 3F 30 37 36 36 36 36 36 F7 00 FF 00  // ....?0766666....
    6360: 00 00 00 00 FF 00 F7 36 36 36 36 36 37 30 37 36  // .......666667076
    6370: 36 36 00 00 FF 00 FF 00 00 00 36 36 F7 00 F7 36  // 66........66...6
    6380: 36 36 18 18 FF 00 FF 00 00 00 36 36 36 36 FF 00  // 66........6666..
    6390: 00 00 00 00 FF 00 FF 18 18 18 00 00 00 00 FF 36  // ...............6
    63A0: 36 36 36 36 36 36 3F 00 00 00 18 18 1F 18 1F 00  // 666666?.........
    63B0: 00 00 00 00 1F 18 1F 18 18 18 00 00 00 00 3F 36  // ..............?6
    63C0: 36 36 36 36 36 36 FF 36 36 36 18 18 FF 18 FF 18  // 666666.666......
    63D0: 18 18 18 18 18 18 F8 00 00 00 00 00 00 00 1F 18  // ................
    63E0: 18 18 FF FF FF FF FF FF FF FF 00 00 00 00 FF FF  // ................
    63F0: FF FF F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F 0F 0F 0F  // ................
    6400: 0F 0F FF FF FF FF 00 00 00 00 00 00 66 DC D8 DC  // ............f...
    6410: 66 00 00 78 CC F8 CC C6 CC 00 00 FE 62 60 60 60  // f..x........b```
    6420: E0 00 00 FE 6C 6C 6C 6C 6C 00 FE C6 60 30 60 C6  // ....lllll...`0`.
    6430: FE 00 00 7E D8 CC CC D8 70 00 00 66 66 66 66 7C  // ...~....p..ffff|
    6440: C0 00 00 76 DC 18 18 18 38 00 FE 38 6C C6 6C 38  // ...v....8..8l.l8
    6450: FE 00 38 6C C6 FE C6 6C 38 00 38 6C C6 C6 6C 6C  // ..8l...l8.8l..ll
    6460: EE 00 3E 60 38 66 C6 CC 78 00 00 00 7E DB DB 7E  // ..>`8f..x...~..~
    6470: 00 00 06 7C DE F6 E6 7C C0 00 38 60 C0 F8 C0 60  // ...|...|..8`...`
    6480: 38 00 7C C6 C6 C6 C6 C6 C6 00 00 FE 00 FE 00 FE  // 8.|.............
    6490: 00 00 18 18 7E 18 18 00 7E 00 30 18 0C 18 30 00  // ....~...~.0...0.
    64A0: 7E 00 0C 18 30 18 0C 00 7E 00 0C 1E 18 18 18 18  // ~...0...~.......
    64B0: 18 18 18 18 18 18 18 78 30 00 00 00 18 00 7E 00  // .......x0.....~.
    64C0: 18 00 00 76 DC 00 76 DC 00 00 7C C6 C6 7C 00 00  // ...v..v...|..|..
    64D0: 00 00 00 00 00 18 18 00 00 00 00 00 00 00 18 00  // ................
    64E0: 00 00 1F 18 18 18 F8 38 18 00 D8 6C 6C 6C 00 00  // .......8...lll..
    64F0: 00 00 70 D8 30 F8 00 00 00 00 00 00 7C 7C 7C 7C  // ..p.0.......||||
    6500: 00 00 00 00 00 00 00 00 00 00 1D 00 00 00 00 24  // ...............$
    6510: 66 FF 66 24 00 00 00 00 00 00 00 10 00 00 00 00  // f.f$............
    6520: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7E  // ...............~
    6530: 81 A5 81 81 BD 99 81 81 7E 00 00 00 00 00 00 7C  // ........~......|
    6540: FE FE D6 FE FE BA C6 FE 7C 00 00 00 00 00 00 00  // ........|.......
    6550: 6C EE FE FE FE FE 7C 38 10 00 00 00 00 00 00 00  // l.....|8........
    6560: 10 38 7C FE 7C 38 10 00 00 00 00 00 00 00 00 00  // .8|.|8..........
    6570: 10 38 38 10 6C EE 6C 10 38 00 00 00 00 00 00 10  // .88.l.l.8.......
    6580: 38 7C 7C FE FE FE 6C 10 38 00 00 00 00 00 00 00  // 8||...l.8.......
    6590: 00 00 18 3C 3C 3C 18 00 00 00 00 00 00 FF FF FF  // ...<<<..........
    65A0: FF FF E7 C3 C3 C3 E7 FF FF FF FF FF FF 00 00 00  // ................
    65B0: 00 18 3C 66 66 66 3C 18 00 00 00 00 00 FF FF FF  // ..<fff<.........
    65C0: FF E7 C3 99 99 99 C3 E7 FF FF FF FF FF 00 00 1E  // ................
    65D0: 0E 1E 36 78 CC CC CC CC 78 00 00 00 00 00 00 3C  // ..6x....x......<
    65E0: 66 66 66 3C 18 7E 18 18 18 00 00 00 00 00 00 1E  // fff<.~..........
    65F0: 1A 1E 18 18 18 18 78 F8 70 00 00 00 00 00 00 3E  // ......x.p......>
    6600: 36 3E 36 36 76 F6 66 0E 1E 0C 00 00 00 00 00 18  // 6>66v.f.........
    6610: DB 7E 3C 66 66 3C 7E DB 18 00 00 00 00 00 00 00  // .~<ff<~.........
    6620: 80 E0 F0 FC FE FC F0 E0 80 00 00 00 00 00 00 00  // ................
    6630: 02 0E 3E 7E FE 7E 3E 0E 02 00 00 00 00 00 00 18  // ..>~.~>.........
    6640: 3C 7E 18 18 18 18 7E 3C 18 00 00 00 00 00 00 66  // <~....~<.......f
    6650: 66 66 66 66 66 66 00 66 66 00 00 00 00 00 00 7F  // ffffff.ff.......
    6660: DB DB DB DB 7B 1B 1B 1B 1B 00 00 00 00 00 00 7C  // ....{..........|
    6670: C6 C6 60 7C F6 DE 7C 0C C6 C6 7C 00 00 00 00 00  // ..`|..|...|.....
    6680: 00 00 00 00 00 FE FE FE FE 00 00 00 00 00 00 18  // ................
    6690: 3C 7E 18 18 18 7E 3C 18 7E 00 00 00 00 00 00 18  // <~...~<.~.......
    66A0: 3C 7E 18 18 18 18 18 18 18 00 00 00 00 00 00 18  // <~..............
    66B0: 18 18 18 18 18 18 7E 3C 18 00 00 00 00 00 00 00  // ......~<........
    66C0: 00 00 0C 0E FF 0E 0C 00 00 00 00 00 00 00 00 00  // ................
    66D0: 00 00 30 70 FE 70 30 00 00 00 00 00 00 00 00 00  // ..0p.p0.........
    66E0: 00 00 00 C0 C0 C0 FE 00 00 00 00 00 00 00 00 00  // ................
    66F0: 00 00 24 66 FF 66 24 00 00 00 00 00 00 00 00 00  // ..$f.f$.........
    6700: 10 38 38 38 7C 7C FE FE 00 00 00 00 00 00 00 00  // .888||..........
    6710: FE FE 7C 7C 7C 38 38 10 00 00 00 00 00 00 00 00  // ..|||88.........
    6720: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 18  // ................
    6730: 3C 3C 3C 3C 18 18 00 18 18 00 00 00 00 00 36 36  // <<<<..........66
    6740: 36 36 14 00 00 00 00 00 00 00 00 00 00 00 00 6C  // 66.............l
    6750: 6C 6C FE 6C 6C FE 6C 6C 6C 00 00 00 00 00 00 18  // ll.ll.lll.......
    6760: 18 7C C6 C0 78 3C 06 C6 7C 18 18 00 00 00 00 00  // .|..x<..|.......
    6770: 00 00 62 66 0C 18 30 66 C6 00 00 00 00 00 00 38  // ..bf..0f.......8
    6780: 6C 38 30 76 7E CC CC CC 76 00 00 00 00 00 0C 0C  // l80v~...v.......
    6790: 0C 18 00 00 00 00 00 00 00 00 00 00 00 00 00 0C  // ................
    67A0: 18 30 30 30 30 30 30 18 0C 00 00 00 00 00 00 30  // .000000........0
    67B0: 18 0C 0C 0C 0C 0C 0C 18 30 00 00 00 00 00 00 00  // ........0.......
    67C0: 00 00 6C 38 FE 38 6C 00 00 00 00 00 00 00 00 00  // ..l8.8l.........
    67D0: 00 00 18 18 7E 18 18 00 00 00 00 00 00 00 00 00  // ....~...........
    67E0: 00 00 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00  // ................
    67F0: 00 00 00 00 FE 00 00 00 00 00 00 00 00 00 00 00  // ................
    6800: 00 00 00 00 00 00 00 18 18 00 00 00 00 00 00 00  // ................
    6810: 00 02 06 0C 18 30 60 C0 80 00 00 00 00 00 00 7C  // .....0`........|
    6820: C6 C6 CE DE F6 E6 C6 C6 7C 00 00 00 00 00 00 18  // ........|.......
    6830: 78 18 18 18 18 18 18 18 7E 00 00 00 00 00 00 7C  // x.......~......|
    6840: C6 C6 06 0C 18 30 60 C6 FE 00 00 00 00 00 00 7C  // .....0`........|
    6850: C6 06 06 3C 06 06 06 C6 7C 00 00 00 00 00 00 0C  // ...<....|.......
    6860: 1C 3C 6C CC CC FE 0C 0C 1E 00 00 00 00 00 00 FE  // .<l.............
    6870: C0 C0 C0 FC 06 06 06 C6 7C 00 00 00 00 00 00 7C  // ........|......|
    6880: C6 C0 C0 FC C6 C6 C6 C6 7C 00 00 00 00 00 00 FE  // ........|.......
    6890: C6 06 0C 18 30 30 30 30 30 00 00 00 00 00 00 7C  // ....00000......|
    68A0: C6 C6 C6 7C C6 C6 C6 C6 7C 00 00 00 00 00 00 7C  // ...|....|......|
    68B0: C6 C6 C6 C6 7E 06 06 C6 7C 00 00 00 00 00 00 00  // ....~...|.......
    68C0: 00 00 0C 0C 00 00 0C 0C 00 00 00 00 00 00 00 00  // ................
    68D0: 00 00 0C 0C 00 00 0C 0C 0C 18 00 00 00 00 00 00  // ................
    68E0: 0C 18 30 60 C0 60 30 18 0C 00 00 00 00 00 00 00  // ..0`.`0.........
    68F0: 00 00 00 FE 00 FE 00 00 00 00 00 00 00 00 00 00  // ................
    6900: 60 30 18 0C 06 0C 18 30 60 00 00 00 00 00 00 7C  // `0.....0`......|
    6910: C6 C6 0C 18 18 18 00 18 18 00 00 00 00 00 00 7C  // ...............|
    6920: C6 C6 C6 DE DE DE DC C0 7E 00 00 00 00 00 00 38  // ........~......8
    6930: 6C C6 C6 C6 FE C6 C6 C6 C6 00 00 00 00 00 00 FC  // l...............
    6940: 66 66 66 7C 66 66 66 66 FC 00 00 00 00 00 00 3C  // fff|ffff.......<
    6950: 66 C2 C0 C0 C0 C0 C2 66 3C 00 00 00 00 00 00 F8  // f......f<.......
    6960: 6C 66 66 66 66 66 66 6C F8 00 00 00 00 00 00 FE  // lffffffl........
    6970: 66 60 64 7C 64 60 60 66 FE 00 00 00 00 00 00 FE  // f`d|d``f........
    6980: 66 60 64 7C 64 60 60 60 F0 00 00 00 00 00 00 7C  // f`d|d```.......|
    6990: C6 C6 C0 C0 C0 CE C6 C6 7C 00 00 00 00 00 00 C6  // ........|.......
    69A0: C6 C6 C6 FE C6 C6 C6 C6 C6 00 00 00 00 00 00 3C  // ...............<
    69B0: 18 18 18 18 18 18 18 18 3C 00 00 00 00 00 00 3C  // ........<......<
    69C0: 18 18 18 18 18 18 D8 D8 70 00 00 00 00 00 00 C6  // ........p.......
    69D0: C6 CC D8 F0 F0 D8 CC C6 C6 00 00 00 00 00 00 F0  // ................
    69E0: 60 60 60 60 60 60 62 66 FE 00 00 00 00 00 00 C6  // ``````bf........
    69F0: C6 EE EE FE D6 D6 D6 C6 C6 00 00 00 00 00 00 C6  // ................
    6A00: C6 E6 E6 F6 DE CE CE C6 C6 00 00 00 00 00 00 7C  // ...............|
    6A10: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 FC  // ........|.......
    6A20: 66 66 66 66 7C 60 60 60 F0 00 00 00 00 00 00 7C  // ffff|```.......|
    6A30: C6 C6 C6 C6 C6 C6 D6 D6 7C 06 00 00 00 00 00 FC  // ........|.......
    6A40: 66 66 66 7C 78 6C 66 66 E6 00 00 00 00 00 00 7C  // fff|xlff.......|
    6A50: C6 C0 C0 70 1C 06 06 C6 7C 00 00 00 00 00 00 7E  // ...p....|......~
    6A60: 5A 18 18 18 18 18 18 18 3C 00 00 00 00 00 00 C6  // Z.......<.......
    6A70: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6  // ........|.......
    6A80: C6 C6 C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 C6  // ......l8........
    6A90: C6 C6 D6 D6 D6 FE EE C6 C6 00 00 00 00 00 00 C6  // ................
    6AA0: C6 C6 6C 38 38 6C C6 C6 C6 00 00 00 00 00 00 66  // ..l88l.........f
    6AB0: 66 66 66 66 3C 18 18 18 3C 00 00 00 00 00 00 FE  // ffff<...<.......
    6AC0: C6 86 0C 18 30 60 C2 C6 FE 00 00 00 00 00 00 7C  // ....0`.........|
    6AD0: 60 60 60 60 60 60 60 60 7C 00 00 00 00 00 00 00  // ````````|.......
    6AE0: 00 80 C0 60 30 18 0C 06 02 00 00 00 00 00 00 7C  // ...`0..........|
    6AF0: 0C 0C 0C 0C 0C 0C 0C 0C 7C 00 00 00 00 00 10 38  // ........|......8
    6B00: 6C C6 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // l...............
    6B10: 00 00 00 00 00 00 00 00 00 00 FF 00 00 00 18 18  // ................
    6B20: 18 0C 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6B30: 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 E0  // ..x.|...v.......
    6B40: 60 60 7C 66 66 66 66 66 FC 00 00 00 00 00 00 00  // ``|fffff........
    6B50: 00 00 7C C6 C0 C0 C0 C6 7C 00 00 00 00 00 00 1C  // ..|.....|.......
    6B60: 0C 0C 7C CC CC CC CC CC 7E 00 00 00 00 00 00 00  // ..|.....~.......
    6B70: 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 1C  // ..|.....|.......
    6B80: 36 30 30 FC 30 30 30 30 78 00 00 00 00 00 00 00  // 600.0000x.......
    6B90: 00 00 76 CE C6 C6 CE 76 06 C6 7C 00 00 00 00 E0  // ..v....v..|.....
    6BA0: 60 60 7C 66 66 66 66 66 E6 00 00 00 00 00 00 18  // ``|fffff........
    6BB0: 18 00 38 18 18 18 18 18 3C 00 00 00 00 00 00 0C  // ..8.....<.......
    6BC0: 0C 00 1C 0C 0C 0C 0C 0C CC CC 78 00 00 00 00 E0  // ..........x.....
    6BD0: 60 60 66 66 6C 78 6C 66 E6 00 00 00 00 00 00 18  // ``fflxlf........
    6BE0: 18 18 18 18 18 18 18 18 1C 00 00 00 00 00 00 00  // ................
    6BF0: 00 00 6C FE D6 D6 C6 C6 C6 00 00 00 00 00 00 00  // ..l.............
    6C00: 00 00 DC 66 66 66 66 66 66 00 00 00 00 00 00 00  // ...ffffff.......
    6C10: 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 00  // ..|.....|.......
    6C20: 00 00 DC 66 66 66 66 7C 60 60 F0 00 00 00 00 00  // ...ffff|``......
    6C30: 00 00 76 CC CC CC CC 7C 0C 0C 1E 00 00 00 00 00  // ..v....|........
    6C40: 00 00 DC 66 60 60 60 60 F0 00 00 00 00 00 00 00  // ...f````........
    6C50: 00 00 7C C6 C0 7C 06 C6 7C 00 00 00 00 00 00 30  // ..|..|..|......0
    6C60: 30 30 FC 30 30 30 30 36 1C 00 00 00 00 00 00 00  // 00.00006........
    6C70: 00 00 CC CC CC CC CC CC 76 00 00 00 00 00 00 00  // ........v.......
    6C80: 00 00 C6 C6 C6 C6 6C 38 10 00 00 00 00 00 00 00  // ......l8........
    6C90: 00 00 C6 C6 D6 D6 D6 FE 6C 00 00 00 00 00 00 00  // ........l.......
    6CA0: 00 00 C6 C6 6C 38 6C C6 C6 00 00 00 00 00 00 00  // ....l8l.........
    6CB0: 00 00 C6 C6 C6 C6 CE 76 06 C6 7C 00 00 00 00 00  // .......v..|.....
    6CC0: 00 00 FE 86 0C 18 30 62 FE 00 00 00 00 00 00 0E  // ......0b........
    6CD0: 18 18 18 70 18 18 18 18 0E 00 00 00 00 00 00 18  // ...p............
    6CE0: 18 18 18 00 18 18 18 18 18 00 00 00 00 00 00 70  // ...............p
    6CF0: 18 18 18 0E 18 18 18 18 70 00 00 00 00 00 00 76  // ........p......v
    6D00: DC 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    6D10: 00 00 10 38 38 6C 6C FE 00 00 00 00 00 00 00 3C  // ...88ll........<
    6D20: 66 C0 C0 C0 C6 66 3C 18 0C CC 38 00 00 00 00 C6  // f....f<...8.....
    6D30: 00 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 0C 18  // ........v.......
    6D40: 30 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 78  // 0.|.....|.....0x
    6D50: CC 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 CC  // ..x.|...v.......
    6D60: 00 00 78 0C 7C CC CC DC 76 00 00 00 00 00 60 30  // ..x.|...v.....`0
    6D70: 18 00 78 0C 7C CC CC DC 76 00 00 00 00 00 38 6C  // ..x.|...v.....8l
    6D80: 38 00 78 0C 7C CC CC DC 76 00 00 00 00 00 00 00  // 8.x.|...v.......
    6D90: 00 7C C6 C0 C0 C6 7C 18 0C 6C 38 00 00 00 30 78  // .|....|..l8...0x
    6DA0: CC 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 CC  // ..|.....|.......
    6DB0: 00 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 30 18  // ..|.....|.....0.
    6DC0: 0C 00 7C C6 C6 FE C0 C6 7C 00 00 00 00 00 00 66  // ..|.....|......f
    6DD0: 00 00 38 18 18 18 18 18 3C 00 00 00 00 00 18 3C  // ..8.....<......<
    6DE0: 66 00 38 18 18 18 18 18 3C 00 00 00 00 00 00 00  // f.8.....<.......
    6DF0: 00 00 38 18 18 18 18 18 3C 00 00 00 00 00 C6 00  // ..8.....<.......
    6E00: 38 6C C6 C6 C6 FE C6 C6 C6 00 00 00 00 38 6C 38  // 8l...........8l8
    6E10: 00 38 6C C6 C6 FE C6 C6 C6 00 00 00 00 0C 18 30  // .8l............0
    6E20: 00 FE 60 60 7C 60 60 60 FE 00 00 00 00 00 00 00  // ..``|```........
    6E30: 00 66 DB 1B 7F D8 D8 DF 76 00 00 00 00 00 00 7E  // .f......v......~
    6E40: D8 D8 D8 D8 FE D8 D8 D8 DE 00 00 00 00 00 30 78  // ..............0x
    6E50: CC 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 C6  // ..|.....|.......
    6E60: 00 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 18  // ..|.....|.....0.
    6E70: 0C 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 30 78  // ..|.....|.....0x
    6E80: CC 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 60 30  // ........v.....`0
    6E90: 18 00 C6 C6 C6 C6 C6 CE 76 00 00 00 00 00 18 00  // ........v.......
    6EA0: 3C 18 18 18 18 18 18 18 3C 00 00 00 00 00 C6 00  // <.......<.......
    6EB0: 7C C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 C6 00  // |.......|.......
    6EC0: C6 C6 C6 C6 C6 C6 C6 C6 7C 00 00 00 00 00 00 18  // ........|.......
    6ED0: 18 7C C6 C0 C0 C6 7C 18 18 00 00 00 00 00 38 6C  // .|....|.......8l
    6EE0: 60 60 F0 60 60 60 66 F6 6C 00 00 00 00 00 66 66  // ``.```f.l.....ff
    6EF0: 66 66 3C 18 7E 18 3C 18 18 00 00 00 00 00 00 3E  // ff<.~.<........>
    6F00: 63 63 30 1C 06 63 63 3E 00 1C 00 00 00 00 00 00  // cc0..cc>........
    6F10: 00 00 3E 63 38 0E 63 3E 00 1C 00 00 00 00 0C 18  // ..>c8.c>........
    6F20: 30 00 78 0C 7C CC CC DC 76 00 00 00 00 00 0C 18  // 0.x.|...v.......
    6F30: 30 00 38 18 18 18 18 18 3C 00 00 00 00 00 0C 18  // 0.8.....<.......
    6F40: 30 00 7C C6 C6 C6 C6 C6 7C 00 00 00 00 00 18 30  // 0.|.....|......0
    6F50: 60 00 CC CC CC CC CC DC 76 00 00 00 00 00 00 76  // `.......v......v
    6F60: DC 00 BC 66 66 66 66 66 E6 00 00 00 00 00 76 DC  // ...fffff......v.
    6F70: 00 C6 C6 E6 F6 DE CE C6 C6 00 00 00 00 00 21 1E  // ..............!.
    6F80: 00 1E 33 60 60 67 63 33 1D 00 00 00 00 00 42 3C  // ..3``gc3......B<
    6F90: 00 3B 66 66 66 3E 06 66 3C 00 00 00 00 00 00 30  // .;fff>.f<......0
    6FA0: 30 00 30 30 30 60 C6 C6 7C 00 00 00 00 00 00 00  // 0.000`..|.......
    6FB0: 00 00 00 00 7E 60 60 60 00 00 00 00 00 00 00 00  // ....~```........
    6FC0: 00 00 00 00 7E 06 06 06 00 00 00 00 00 00 60 60  // ....~.........``
    6FD0: 62 66 6C 18 30 60 DC 36 0C 18 3E 00 00 00 60 60  // bfl.0`.6..>...``
    6FE0: 62 66 6C 18 36 6E DE 36 7E 06 06 00 00 00 00 18  // bfl.6n.6~.......
    6FF0: 18 00 18 18 3C 3C 3C 3C 18 00 00 00 00 00 00 00  // ....<<<<........
    7000: 00 00 36 6C D8 6C 36 00 00 00 00 00 00 00 00 00  // ..6l.l6.........
    7010: 00 00 D8 6C 36 6C D8 00 00 00 00 00 00 11 44 11  // ...l6l........D.
    7020: 44 11 44 11 44 11 44 11 44 11 44 11 44 AA 55 AA  // D.D.D.D.D.D.D.U.
    7030: 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 DD 77 DD  // U.U.U.U.U.U.U.w.
    7040: 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 18 18 18  // w.w.w.w.w.w.w...
    7050: 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7060: 18 18 18 18 F8 18 18 18 18 18 18 18 18 18 18 18  // ................
    7070: 18 18 F8 18 F8 18 18 18 18 18 18 18 18 36 36 36  // .............666
    7080: 36 36 36 36 F6 36 36 36 36 36 36 36 36 00 00 00  // 6666.66666666...
    7090: 00 00 00 00 FE 36 36 36 36 36 36 36 36 00 00 00  // .....66666666...
    70A0: 00 00 F8 18 F8 18 18 18 18 18 18 18 18 36 36 36  // .............666
    70B0: 36 36 F6 06 F6 36 36 36 36 36 36 36 36 36 36 36  // 66...66666666666
    70C0: 36 36 36 36 36 36 36 36 36 36 36 36 36 00 00 00  // 6666666666666...
    70D0: 00 00 FE 06 F6 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
    70E0: 36 36 F6 06 FE 00 00 00 00 00 00 00 00 36 36 36  // 66...........666
    70F0: 36 36 36 36 FE 00 00 00 00 00 00 00 00 18 18 18  // 6666............
    7100: 18 18 F8 18 F8 00 00 00 00 00 00 00 00 00 00 00  // ................
    7110: 00 00 00 00 F8 18 18 18 18 18 18 18 18 18 18 18  // ................
    7120: 18 18 18 18 1F 00 00 00 00 00 00 00 00 18 18 18  // ................
    7130: 18 18 18 18 FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    7140: 00 00 00 00 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
    7150: 18 18 18 18 1F 18 18 18 18 18 18 18 18 00 00 00  // ................
    7160: 00 00 00 00 FF 00 00 00 00 00 00 00 00 18 18 18  // ................
    7170: 18 18 18 18 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
    7180: 18 18 1F 18 1F 18 18 18 18 18 18 18 18 36 36 36  // .............666
    7190: 36 36 36 36 37 36 36 36 36 36 36 36 36 36 36 36  // 6666766666666666
    71A0: 36 36 37 30 3F 00 00 00 00 00 00 00 00 00 00 00  // 6670?...........
    71B0: 00 00 3F 30 37 36 36 36 36 36 36 36 36 36 36 36  // ..?0766666666666
    71C0: 36 36 F7 00 FF 00 00 00 00 00 00 00 00 00 00 00  // 66..............
    71D0: 00 00 FF 00 F7 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
    71E0: 36 36 37 30 37 36 36 36 36 36 36 36 36 00 00 00  // 6670766666666...
    71F0: 00 00 FF 00 FF 00 00 00 00 00 00 00 00 36 36 36  // .............666
    7200: 36 36 F7 00 F7 36 36 36 36 36 36 36 36 18 18 18  // 66...66666666...
    7210: 18 18 FF 00 FF 00 00 00 00 00 00 00 00 36 36 36  // .............666
    7220: 36 36 36 36 FF 00 00 00 00 00 00 00 00 00 00 00  // 6666............
    7230: 00 00 FF 00 FF 18 18 18 18 18 18 18 18 00 00 00  // ................
    7240: 00 00 00 00 FF 36 36 36 36 36 36 36 36 36 36 36  // .....66666666666
    7250: 36 36 36 36 3F 00 00 00 00 00 00 00 00 18 18 18  // 6666?...........
    7260: 18 18 1F 18 1F 00 00 00 00 00 00 00 00 00 00 00  // ................
    7270: 00 00 1F 18 1F 18 18 18 18 18 18 18 18 00 00 00  // ................
    7280: 00 00 00 00 3F 36 36 36 36 36 36 36 36 36 36 36  // ....?66666666666
    7290: 36 36 36 36 FF 36 36 36 36 36 36 36 36 18 18 18  // 6666.66666666...
    72A0: 18 18 FF 18 FF 18 18 18 18 18 18 18 18 18 18 18  // ................
    72B0: 18 18 18 18 F8 00 00 00 00 00 00 00 00 00 00 00  // ................
    72C0: 00 00 00 00 1F 18 18 18 18 18 18 18 18 FF FF FF  // ................
    72D0: FF FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00  // ................
    72E0: 00 00 00 00 00 FF FF FF FF FF FF FF FF F0 F0 F0  // ................
    72F0: F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 0F 0F 0F  // ................
    7300: 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF  // ................
    7310: FF FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00  // ................
    7320: 00 76 DC D8 D8 D8 D8 DC 76 00 00 00 00 00 00 78  // .v......v......x
    7330: CC CC D8 FC C6 C6 C6 C6 CC 00 00 00 00 00 00 FE  // ................
    7340: 66 62 60 60 60 60 60 60 60 00 00 00 00 00 00 00  // fb```````.......
    7350: 00 00 FE 6C 6C 6C 6C 6C 6C 00 00 00 00 00 00 FE  // ...llllll.......
    7360: C6 62 30 18 18 30 62 C6 FE 00 00 00 00 00 00 00  // .b0..0b.........
    7370: 00 00 7E D8 CC CC CC D8 70 00 00 00 00 00 00 00  // ..~.....p.......
    7380: 00 66 66 66 66 66 7C 60 C0 80 00 00 00 00 00 00  // .fffff|`........
    7390: 00 00 76 DC 18 18 18 18 18 00 00 00 00 00 00 FE  // ..v.............
    73A0: 38 38 6C C6 C6 6C 38 38 FE 00 00 00 00 00 00 00  // 88l..l88........
    73B0: 38 6C C6 C6 FE C6 C6 6C 38 00 00 00 00 00 00 38  // 8l.....l8......8
    73C0: 6C C6 C6 C6 C6 6C 6C 6C EE 00 00 00 00 00 00 3E  // l....lll.......>
    73D0: 60 60 3C 66 C6 C6 C6 CC 78 00 00 00 00 00 00 00  // ``<f....x.......
    73E0: 00 00 7E DB DB DB 7E 00 00 00 00 00 00 00 00 02  // ..~...~.........
    73F0: 06 7C CE DE F6 F6 7C 60 C0 00 00 00 00 00 00 00  // .|....|`........
    7400: 1C 30 60 60 7C 60 60 30 1C 00 00 00 00 00 00 7C  // .0``|``0.......|
    7410: C6 C6 C6 C6 C6 C6 C6 C6 C6 00 00 00 00 00 00 00  // ................
    7420: 00 FE 00 00 FE 00 00 FE 00 00 00 00 00 00 00 00  // ................
    7430: 00 18 18 7E 18 18 00 00 7E 00 00 00 00 00 00 30  // ...~....~......0
    7440: 18 0C 06 0C 18 30 00 00 7E 00 00 00 00 00 00 0C  // .....0..~.......
    7450: 18 30 60 30 18 0C 00 00 7E 00 00 00 00 00 00 00  // .0`0....~.......
    7460: 00 0C 1E 1A 18 18 18 18 18 18 18 18 18 18 18 18  // ................
    7470: 18 18 18 18 18 18 18 58 78 30 00 00 00 00 00 00  // .......Xx0......
    7480: 00 18 18 00 7E 00 18 18 00 00 00 00 00 00 00 00  // ....~...........
    7490: 00 00 00 76 DC 00 76 DC 00 00 00 00 00 00 00 78  // ...v..v........x
    74A0: CC CC 78 00 00 00 00 00 00 00 00 00 00 00 00 00  // ..x.............
    74B0: 00 00 00 00 18 18 00 00 00 00 00 00 00 00 00 00  // ................
    74C0: 00 00 00 00 00 18 00 00 00 00 00 00 00 00 00 1F  // ................
    74D0: 18 18 18 18 18 D8 D8 78 38 18 00 00 00 00 00 D8  // .......x8.......
    74E0: 6C 6C 6C 6C 6C 00 00 00 00 00 00 00 00 00 00 70  // lllll..........p
    74F0: D8 18 30 60 F8 00 00 00 00 00 00 00 00 00 00 00  // ..0`............
    7500: 00 00 7E 7E 7E 7E 7E 7E 00 00 00 00 00 00 00 00  // ..~~~~~~........
    7510: 00 00 00 00 00 00 00 00 00 00 00 00 00 1D 00 00  // ................
    7520: 00 00 00 24 66 FF 66 24 00 00 00 00 00 00 2F 00  // ...$f.f$....../.
    7530: 00 00 01 03 06 0C 18 30 60 C0 80 00 00 00 00 30  // .......0`......0
    7540: 00 00 7E C3 C3 C3 DB DB C3 C3 C3 7E 00 00 00 00  // ..~........~....
    7550: 4D 00 00 C3 C3 E7 FF FF DB DB C3 C3 C3 00 00 00  // M...............
    7560: 00 54 00 00 FF 99 18 18 18 18 18 18 18 3C 00 00  // .T...........<..
    7570: 00 00 56 00 00 C3 C3 C3 C3 C3 C3 C3 66 3C 18 00  // ..V.........f<..
    7580: 00 00 00 57 00 00 C3 C3 C3 C3 DB DB DB DB FF 66  // ...W...........f
    7590: 00 00 00 00 58 00 00 C3 C3 C3 66 3C 3C 66 C3 C3  // ....X.....f<<f..
    75A0: C3 00 00 00 00 59 00 00 C3 C3 C3 C3 66 3C 18 18  // .....Y......f<..
    75B0: 18 3C 00 00 00 00 5C 00 00 00 80 C0 60 30 18 0C  // .<....\.....`0..
    75C0: 06 03 01 00 00 00 00 6D 00 00 00 00 00 66 FF DB  // .......m.....f..
    75D0: DB DB C3 C3 00 00 00 00 76 00 00 00 00 00 C3 C3  // ........v.......
    75E0: C3 C3 66 3C 18 00 00 00 00 77 00 00 00 00 00 C3  // ..f<.....w......
    75F0: C3 DB DB DB FF 66 00 00 00 00 00 00 B5 64 C3 0B  // .....f.......d..
    7600: DB 74 03 E9 46 01 57 32 C0 B9 40 00 F3 AA 5F BB  // .t..F.W2..@..._.
    7610: 45 92 26 89 1D 26 8C 4D 02 2E 8E 1E D9 03 57 BE  // E.&..&.M......W.
    7620: 49 04 B9 1E 00 83 C7 04 FC 8A 04 26 88 05 46 47  // I..........&..FG
    7630: E2 F7 5F A0 84 04 FE C0 26 88 45 22 A1 85 04 26  // .._.....&.E"...&
    7640: 89 45 23 57 E8 9C 1B 5F 26 88 5D 25 26 88 7D 26  // .E#W..._&.]%&.}&
    7650: 8A 1E 49 04 E8 FC 05 74 05 80 FB 13 7F 1D 32 FF  // ..I....t......2.
    7660: D1 E3 2E 8A 87 1D 92 32 E4 0A C0 74 01 40 26 89  // .......2...t.@&.
    7670: 45 27 2E 8A 87 1E 92 26 88 45 29 A1 85 04 8A 16  // E'.....&.E).....
    7680: 84 04 FE C2 F6 E2 B2 00 3D C8 00 7E 15 B2 01 3D  // ........=..~...=
    7690: 5E 01 7E 0E B2 02 3D 90 01 7E 07 B2 03 3D E0 01  // ^.~...=..~...=..
    76A0: 7E 00 26 88 55 2A 8A 26 87 04 8A C4 24 01 C0 E0  // ~.&.U*.&....$...
    76B0: 04 80 E4 02 D0 E4 0A E0 80 F4 10 A0 89 04 24 0A  // ..............$.
    76C0: 0A E0 E8 94 08 B2 C0 B0 30 EE 42 EC 24 08 C0 E0  // ........0.B.$...
    76D0: 02 0A C4 0C 01 26 88 45 2D B0 03 26 88 45 31 E8  // .....&.E-..&.E1.
    76E0: 77 08 1E 06 32 D2 C4 1E A8 04 8C C1 8C CE 3B CE  // w...2.........;.
    76F0: 74 34 26 C5 77 04 8C D9 0B F1 74 03 80 CA 10 26  // t4&.w.....t....&
    7700: C5 77 0C 8C D9 0B F1 74 03 80 CA 08 26 C5 77 08  // .w.....t....&.w.
    7710: 8C D9 0B F1 74 03 80 CA 04 26 C5 77 10 8C D9 0B  // ....t....&.w....
    7720: F1 74 03 80 CA 01 07 1F 26 88 55 32 B0 03 BA C4  // .t......&.U2....
    7730: 03 E8 E4 04 8A E0 C0 EC 02 8A D4 8A F2 D0 EE 81  // ................
    7740: E2 04 04 25 03 03 0B C2 26 89 45 2B 8B EC C6 46  // ...%....&.E+...F
    7750: 1A 1B C3 0A C0 74 0F FE C8 74 36 FE C8 74 56 8B  // .....t...t6..tV.
    7760: EC C6 46 1A 00 C3 B8 20 00 F6 C1 01 74 03 83 C0  // ..F.... ....t...
    7770: 60 F6 C1 02 74 03 83 C0 3A F6 C1 04 74 03 05 03  // `...t...:...t...
    7780: 03 83 C0 3F C1 E8 06 8B EC 89 46 0E C6 46 1A 1C  // ...?......F..F..
    7790: C3 8B FB 83 C7 20 F6 C1 01 74 03 E8 85 00 F6 C1  // ..... ...t......
    77A0: 02 74 03 E8 EF 00 F6 C1 04 74 03 E8 F8 01 8B EC  // .t.......t......
    77B0: C6 46 1A 1C C3 F6 C1 01 74 06 E8 D9 14 E8 25 01  // .F......t.....%.
    77C0: F6 C1 02 74 03 E8 85 01 F6 C1 04 74 03 E8 12 02  // ...t.......t....
    77D0: EB DC 8A C4 EE 42 EC AA FE C4 4A E2 F5 C3 E8 6B  // .....B....J....k
    77E0: 04 BD C0 03 B9 15 00 32 E4 EC 87 EA 8A C4 EE 42  // .......2.......B
    77F0: EC AA FE C4 4A 87 EA E2 F0 EC 87 EA B0 20 EE C3  // ....J........ ..
    7800: 26 8A 05 88 04 47 46 E2 F7 C3 26 8A 25 EF 47 FE  // &....GF...&.%.G.
    7810: C0 E2 F7 C3 B2 C0 8A C4 EE 26 8A 05 47 FE C4 EE  // .........&..G...
    7820: E2 F4 C3 9C FA 51 57 8B C7 2B C3 26 89 07 8B F7  // .....QW..+.&....
    7830: E8 0A 04 EC 26 88 44 01 26 89 54 41 B2 CE EC 26  // ....&.D.&.TA...&
    7840: 88 44 02 B2 CC EC 26 88 44 09 B2 CA EC 26 88 44  // .D....&.D....&.D
    7850: 04 B2 C4 EC 26 88 04 83 C7 05 B9 04 00 B4 01 E8  // ....&...........
    7860: 70 FF 26 8A 04 EE 8B FE 83 C7 0A 26 8B 54 41 32  // p.&........&.TA2
    7870: E4 B9 19 00 E8 5B FF 26 8A 44 01 EE E8 5F FF B2  // .....[.&.D..._..
    7880: CE 32 E4 B9 09 00 E8 49 FF 26 8A 44 02 EE 5F 59  // .2.....I.&.D.._Y
    7890: 83 C7 60 9D C3 9C FA 8B C7 2B C3 26 89 47 02 51  // ..`......+.&.G.Q
    78A0: 57 2E 8E 1E D9 03 A0 10 04 24 30 AA BE 49 04 B9  // W........$0..I..
    78B0: 1E 00 F3 A4 BE 84 04 B1 07 F3 A4 BE A8 04 B1 04  // ................
    78C0: F3 A4 BE 14 00 B1 04 F3 A4 BE 74 00 B1 04 F3 A4  // ..........t.....
    78D0: BE 7C 00 B1 04 F3 A4 BE 0C 01 B1 04 F3 A4 5F 59  // .|............_Y
    78E0: 83 C7 3A 9D C3 9C FA 26 8B 3F 03 FB 8B F7 51 8B  // ..:....&.?....Q.
    78F0: FE 83 C7 05 BA C4 03 B8 00 01 EF B0 01 B9 04 00  // ................
    7900: E8 07 FF 47 B2 C2 26 8A 44 09 EE B2 C4 B8 00 03  // ...G..&.D.......
    7910: EF 26 8A 04 EE 26 8B 54 41 B8 11 00 EF B1 19 32  // .&...&.TA......2
    7920: C0 E8 E6 FE 26 8A 44 01 EE 80 C2 06 26 8A 44 04  // ....&.D.....&.D.
    7930: EE EC B1 15 32 E4 E8 DB FE B0 20 EE B1 09 32 C0  // ....2..... ...2.
    7940: B2 CE E8 C5 FE 26 8A 44 02 EE 59 9D C3 9C FA 26  // .....&.D..Y....&
    7950: 8B 7F 02 03 FB 06 51 2E 8E 1E D9 03 26 8A 05 80  // ......Q.....&...
    7960: 26 10 04 CF 08 06 10 04 47 BE 49 04 B9 1E 00 E8  // &.......G.I.....
    7970: 8E FE BE 84 04 B1 07 E8 86 FE BE A8 04 B1 04 E8  // ................
    7980: 7E FE BE 14 00 B1 04 E8 76 FE BE 74 00 B1 04 E8  // ~.......v..t....
    7990: 6E FE BE 7C 00 B1 04 E8 66 FE BE 0C 01 B1 04 E8  // n..|....f.......
    79A0: 5E FE 59 07 9D C3 9C FA 8B C7 2B C3 26 89 47 04  // ^.Y.......+.&.G.
    79B0: E8 A6 05 B2 C0 B0 34 EE 42 EC 26 88 05 BA C8 03  // ......4.B.&.....
    79C0: EC 26 88 45 01 50 4A 4A EC 26 88 45 02 83 C7 03  // .&.E.PJJ.&.E....
    79D0: B9 00 03 42 32 C0 EE 42 42 EC AA E2 FC 58 4A EE  // ...B2..BB....XJ.
    79E0: 9D C3 9C FA 26 8B 77 04 03 F3 E8 6C 05 B2 C0 B0  // ....&.w....l....
    79F0: 34 EE 26 8A 04 EE BA C6 03 26 8A 44 02 EE 56 42  // 4.&......&.D..VB
    7A00: 42 83 C6 03 32 C0 EE 42 B9 00 03 26 8A 04 EE 46  // B...2..B...&...F
    7A10: E2 F9 5E FE CA 26 8A 44 01 EE 9D C3 BA CC 03 EC  // ..^..&.D........
    7A20: 24 FE 0A C4 B2 C2 EE C3 E8 6B 12 B2 C0 86 C4 EE  // $........k......
    7A30: EB 00 EB 00 86 C4 EE EB 00 EB 00 B0 20 EE C3 50  // ............ ..P
    7A40: 8A E0 80 E4 80 80 26 87 04 7F 08 26 87 04 24 7F  // ......&....&..$.
    7A50: 8A E0 3C 07 7E 1E 26 F6 47 33 01 75 17 3C 23 74  // ..<.~.&.G3.u.<#t
    7A60: 13 3C 32 74 0F 3C 33 74 0B B4 03 26 F6 47 09 01  // .<2t.<3t...&.G..
    7A70: 75 02 B4 07 88 26 49 04 BA B4 03 80 0E 87 04 02  // u....&I.........
    7A80: 26 F6 47 09 01 74 07 B2 D4 80 26 87 04 FD 89 16  // &.G..t....&.....
    7A90: 63 04 C7 06 4E 04 00 00 C6 06 62 04 00 B9 08 00  // c...N.....b.....
    7AA0: BF 50 04 FC 06 1E 07 33 C0 F3 AB 07 26 8A 07 32  // .P.....3....&..2
    7AB0: E4 A3 4A 04 26 8A 47 01 A2 84 04 26 8A 47 02 A3  // ..J.&.G....&.G..
    7AC0: 85 04 26 8B 47 03 A3 4C 04 26 8B 47 14 86 C4 A3  // ..&.G..L.&.G....
    7AD0: 60 04 58 C3 52 32 E4 33 D2 B0 0D CD 17 F6 C4 29  // `.X.R2.3.......)
    7AE0: 75 08 32 E4 33 D2 B0 0A CD 17 5A C3 06 1E 60 2E  // u.2.3.....Z...`.
    7AF0: 8E 1E D9 03 2E 83 0E E3 03 00 75 6E 80 3E 00 05  // ..........un.>..
    7B00: 01 74 67 C6 06 00 05 01 8A 1E 62 04 32 FF D1 E3  // .tg.......b.2...
    7B10: 8B FB 8B 85 50 04 8A 3E 62 04 50 32 F6 8A 0E 84  // ....P..>b.P2....
    7B20: 04 32 ED 41 51 8B 0E 4A 04 32 D2 E8 A6 FF F6 C4  // .2.AQ..J.2......
    7B30: 29 75 3D 51 52 89 95 50 04 B4 08 E8 7C D3 0A C0  // )u=QR..P....|...
    7B40: 75 02 B0 20 33 D2 32 E4 CD 17 F6 C4 29 75 1F 5A  // u.. 3.2.....)u.Z
    7B50: FE C2 59 E2 DE FE C6 59 E2 CA E8 77 FF 32 C0 A2  // ..Y....Y...w.2..
    7B60: 00 05 58 89 85 50 04 E8 AF 03 61 1F 07 CF 5A 59  // ..X..P....a...ZY
    7B70: 59 B0 FF EB EA 52 2A F5 38 C6 7D 02 32 C0 2E 8E  // Y....R*.8.}.2...
    7B80: 06 DB 03 5A C3 A0 85 04 F6 E3 8A F7 8B D8 8B CA  // ...Z............
    7B90: BA C4 03 B8 02 0F EF B4 02 E8 6D 00 8B D1 32 ED  // ..........m...2.
    7BA0: 8A E6 8A C6 F3 AA 03 FD 8A CA 4B 75 F7 32 E4 E8  // ..........Ku.2..
    7BB0: 57 00 C3 53 8A 1E 62 04 0B C0 75 04 0A DB 74 03  // W..S..b...u...t.
    7BC0: E8 35 03 5B 8B F8 2B D1 81 C2 01 01 8A C3 32 E4  // .5.[..+.......2.
    7BD0: C3 8A C6 32 F6 2B EA 0A DB 74 2A 2A C3 F6 26 85  // ...2.+...t**..&.
    7BE0: 04 8B C8 52 B4 01 E8 20 00 B2 C4 B8 02 0F EF 5A  // ...R... .......Z
    7BF0: 1E 06 1F 8B C1 8B CA F3 A4 03 F5 03 FD 48 75 F5  // .............Hu.
    7C00: 1F E8 81 FF C3 8A D8 EB F8 BA CE 03 B0 05 EE 42  // ...............B
    7C10: EC 24 FC 0A C4 EE 4A C3 9C FA EE 42 EB 00 EC 4A  // .$....J....B...J
    7C20: 9D C3 1E 2E 8E 1E D9 03 8B 16 63 04 80 C2 06 1F  // ..........c.....
    7C30: C3 1E 2E 8E 1E D9 03 8B 16 63 04 1F C3 50 BA CC  // .........c...P..
    7C40: 03 EC B2 D4 A8 01 75 02 B2 B4 58 C3 E8 EE FF 80  // ......u...X.....
    7C50: C2 06 C3 1E 2E 8E 1E D9 03 80 3E 49 04 03 74 13  // ..........>I..t.
    7C60: 80 3E 49 04 02 74 0C 80 3E 49 04 01 74 05 80 3E  // .>I..t..>I..t..>
    7C70: 49 04 00 1F C3 50 2E 8E 06 DD 03 A0 10 04 24 30  // I....P........$0
    7C80: 3C 30 74 05 2E 8E 06 DF 03 58 0B C0 74 03 E8 E1  // <0t......X..t...
    7C90: 01 03 06 4E 04 81 C2 01 01 2B D1 32 ED 8B 2E 4A  // ...N.....+.2...J
    7CA0: 04 8B F8 8B F0 8B C5 F6 E3 D1 E0 D1 E5 0A DB 75  // ...............u
    7CB0: 02 8A DE 38 F3 7E 02 8A DE C3 FC 8A D8 8B C1 E8  // ...8.~..........
    7CC0: B3 FF 03 F0 3A 16 4A 04 74 06 06 1F E8 1B 00 C3  // ....:.J.t.......
    7CD0: 06 1F E8 40 00 C3 FC 8A D8 8A C1 8A E6 E8 95 FF  // ...@............
    7CE0: F7 DD 2B F0 06 1F E8 01 00 C3 53 8A CE 2A CB 32  // ..+.......S..*.2
    7CF0: ED 32 F6 2B EA 2B EA E3 0E 8A E1 8B CA F3 A5 03  // .2.+.+..........
    7D00: F5 03 FD FE CC 75 F4 58 B0 20 8A CA F3 AB 03 FD  // .....u.X. ......
    7D10: FE CB 75 F6 C3 53 8A C6 2A C3 74 06 F6 E2 8B C8  // ..u..S..*.t.....
    7D20: F3 A5 58 8B C8 F6 E2 91 B0 20 F3 AB C3 8B D8 E8  // ..X...... ......
    7D30: 2E 00 2E 8E 1E DF 03 8A C3 22 DF D3 E3 A8 80 74  // .........".....t
    7D40: 03 30 1C C3 F6 D7 8A 34 22 F7 0A DE 88 1C C3 8A  // .0.....4".......
    7D50: FC E8 0C 00 2E 8E 1E DF 03 8A 04 D2 E8 22 C7 C3  // ............."..
    7D60: B0 28 F6 E2 F6 C2 01 74 03 05 D8 1F 8B F1 C1 EE  // .(.....t........
    7D70: 02 80 FF 05 7F 0C 03 F0 F6 D1 80 E1 03 D0 E1 B7  // ................
    7D80: 03 C3 D1 EE 03 F0 F6 D1 80 E1 07 B7 01 C3 FC 8A  // ................
    7D90: D8 2E 8E 06 DF 03 8B C1 E8 86 00 75 02 8A DE 03  // ...........u....
    7DA0: F0 E8 24 00 C3 FC 8A D8 2E 8E 06 DF 03 8A C1 8A  // ..$.............
    7DB0: E6 E8 6D 00 75 02 8A DE F7 DD 81 C6 F0 00 81 C7  // ..m.u...........
    7DC0: F0 00 2B F0 E8 01 00 C3 8A CE 2A CB E3 2C 51 8A  // ..+.......*..,Q.
    7DD0: CA 56 57 D1 E9 F3 A5 13 C9 F3 A4 8A CA 2B F1 2B  // .VW..........+.+
    7DE0: F9 81 C6 00 20 81 C7 00 20 D1 E9 F3 A5 13 C9 F3  // .... ... .......
    7DF0: A4 5F 5E 03 F5 03 FD 59 E2 D4 8A C7 8A E7 8A CA  // ._^....Y........
    7E00: 57 D1 E9 F3 AB 13 C9 F3 AA 8A CA 2B F9 81 C7 00  // W..........+....
    7E10: 20 D1 E9 F3 AB 13 C9 F3 AA 5F 03 FD FE CB 75 DE  //  ........_....u.
    7E20: C3 E8 B0 00 81 C2 01 01 2B D1 38 F3 76 02 32 DB  // ........+.8.v.2.
    7E30: 51 B1 02 D2 E6 D2 E3 59 32 ED BD 50 00 80 3E 49  // Q......Y2..P..>I
    7E40: 04 06 74 04 D0 E2 D1 E0 06 1F 8B F8 8B F0 B0 50  // ..t............P
    7E50: F6 E3 0A DB C3 52 53 8A DF 32 FF D1 E3 8B 87 50  // .....RS..2.....P
    7E60: 04 E8 0E 00 50 D1 EB A1 4C 04 F7 E3 5B 03 C3 5B  // ....P...L...[..[
    7E70: 5A C3 52 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0  // Z.R...J...2.....
    7E80: 5A C3 8B E8 83 E5 0F 2E 8A A6 32 7E 8B E8 C1 ED  // Z.........2~....
    7E90: 04 83 E5 0F 2E 8A 86 32 7E C3 00 03 0C 0F 30 33  // .......2~.....03
    7EA0: 3C 3F C0 C3 CC CF F0 F3 FC FF 26 8B 04 86 E0 BA  // <?........&.....
    7EB0: 00 80 F6 C4 C0 74 02 0A D6 D0 EE C1 E0 02 75 F2  // .....t........u.
    7EC0: 88 56 00 45 C3 8B 16 63 04 8A C5 86 E0 EF 8A E1  // .V.E...c........
    7ED0: FE C0 EF C3 52 8B D0 8A C4 F6 26 4A 04 C1 E0 02  // ....R.....&J....
    7EE0: 32 F6 03 C2 5A C3 53 8A DF 32 FF D1 E3 8B 87 50  // 2...Z.S..2.....P
    7EF0: 04 D1 EB E8 02 00 5B C3 52 8B D0 32 F6 52 8A C4  // ......[.R..2.R..
    7F00: F6 26 85 04 F7 26 4A 04 5A 03 C2 0A DB 74 08 03  // .&...&J.Z....t..
    7F10: 06 4C 04 FE CB 75 F8 5A C3 52 8B D0 A0 4A 04 F6  // .L...u.Z.R...J..
    7F20: E4 32 F6 03 C2 D1 E0 03 06 4E 04 D1 F8 8B C8 B4  // .2.......N......
    7F30: 0E E8 91 FF 5A C3 8B C2 F7 26 4A 04 8B F9 C1 EF  // ....Z....&J.....
    7F40: 03 03 F8 0A FF 74 0A 8A C7 32 E4 F7 26 4C 04 03  // .....t...2..&L..
    7F50: F8 80 E1 07 B4 80 D2 EC C3 E8 F0 FC EC C3 E8 F8  // ................
    7F60: FF B2 C0 B0 20 EE C3 E8 EF FF B2 C0 32 C0 EE C3  // .... .......2...
    7F70: C4 3E A8 04 26 C4 7D 04 8C C5 0B EF C3 53 B0 0E  // .>..&.}......S..
    7F80: E8 95 FC 8A E0 B0 0F E8 8E FC 8B D8 B8 0E AA EF  // ................
    7F90: B8 0F 55 EF B0 0E E8 7F FC 3C AA 74 0D B0 0F E8  // ..U......<.t....
    7FA0: 76 FC 3C 55 74 04 32 C0 5B C3 B0 0E 8A E7 EF FE  // v.<Ut.2.[.......
    7FB0: C0 8A E3 EF B0 01 0A C0 5B C3 8A EE 8A 36 85 04  // ........[....6..
    7FC0: 06 1F 0A DB 74 25 8A C5 2A C3 F6 E6 8B C8 52 32  // ....t%..*.....R2
    7FD0: F6 C1 E2 02 8B C2 D1 E2 2B D5 51 8B C8 F3 A5 2B  // ........+.Q....+
    7FE0: FA 2B F2 59 E2 F4 5A E8 05 00 C3 8A DD EB F8 8A  // .+.Y..Z.........
    7FF0: C6 F6 E3 8B C8 8A C7 8A E0 32 F6 C1 E2 02 8B DA  // .........2......
    8000: D1 E2 8B F1 2B D5 8B CB F3 AB 2B FA 4E 75 F7 C3  // ....+.....+.Nu..
    8010: 2E 8E 1E D9 03 89 0E 60 04 8A C5 24 60 A8 20 74  // .......`...$`. t
    8020: 06 B9 00 1E E9 94 00 F6 06 87 04 01 0F 85 8B 00  // ................
    8030: 80 3E 49 04 07 74 06 E8 19 FC 74 01 C3 F6 06 87  // .>I..t....t.....
    8040: 04 08 74 03 CD 42 C3 8A 36 85 04 8A D6 FE CA 38  // ..t..B..6......8
    8050: CD 7E 1F 0A C9 74 64 8A E9 8A CE FE C9 EB 5C 38  // .~...td.......\8
    8060: D1 74 58 8A CE 80 FD 03 7C 04 8A E9 D0 ED FE C9  // .tX.....|.......
    8070: EB 49 80 F9 03 7E 44 8A E1 2A E5 0A E4 75 0A 38  // .I...~D..*...u.8
    8080: CA 74 38 FE CA 38 CA 74 32 8A C5 0A C1 38 F0 7E  // .t8..8.t2....8.~
    8090: 0A 80 FC 02 7E 12 80 FD 02 7F C8 80 FC 03 7D BF  // ....~.........}.
    80A0: 8A D6 FE CA 38 D1 74 13 8A CE FE C9 FE C9 8A E9  // ....8.t.........
    80B0: 2A EC 80 FE 08 7F 04 FE C1 FE C5 B4 0A E8 05 FE  // *...............
    80C0: C3 2E 8E 1E D9 03 A2 62 04 32 E4 8B F0 F7 26 4C  // .......b.2....&L
    80D0: 04 A3 4E 04 8B C8 E8 7A FB 74 07 80 3E 49 04 07  // ..N....z.t..>I..
    80E0: 77 02 D1 F9 B4 0C E8 DC FD D1 E6 8B 84 50 04 E8  // w............P..
    80F0: 27 FE C3 2E 8E 1E D9 03 8A 26 49 04 E8 7E 9C 74  // '........&I..~.t
    8100: 07 C7 06 50 04 00 00 C3 E8 48 FB 74 0B 80 FC 07  // ...P.....H.t....
    8110: 74 06 77 08 E8 77 FC C3 E8 9F FB C3 80 FC 13 7C  // t.w..w.........|
    8120: 03 74 1F C3 E8 4E FA 8A D8 8B C1 E8 85 FA 8B 2E  // .t...N..........
    8130: 4A 04 52 F6 26 85 04 F7 E5 8B F7 03 F0 5A E8 90  // J.R.&........Z..
    8140: FA C3 E8 30 FA 8A D8 8B C1 E8 67 FA C1 E7 03 52  // ...0......g....R
    8150: 8B 2E 4A 04 C1 E5 03 F7 26 85 04 F7 E5 8B F7 03  // ..J.....&.......
    8160: F0 5A E8 55 FE C3 2E 8E 1E D9 03 8A 26 49 04 E8  // .Z.U........&I..
    8170: E1 FA 74 0C 80 FC 07 74 07 77 40 80 FC 03 7F 04  // ..t....t.w@.....
    8180: E8 53 FB C3 E8 1E FC C3 E8 EA F9 8A D8 8A C1 8A  // .S..............
    8190: E6 FE C4 E8 1D FA 2B 3E 4A 04 C1 E7 03 52 F7 26  // ......+>J....R.&
    81A0: 85 04 F7 26 4A 04 C1 E0 03 8B F7 2B F0 5A 8B 2E  // ...&J......+.Z..
    81B0: 4A 04 C1 E5 03 F7 DD E8 00 FE C3 80 FC 13 7C 03  // J.............|.
    81C0: 74 C6 C3 E8 AF F9 8A D8 8A C1 8A E6 FE C4 E8 E2  // t...............
    81D0: F9 52 8B 2E 4A 04 F7 26 85 04 F7 E5 2B FD 8B F7  // .R..J..&....+...
    81E0: 2B F0 5A F7 DD E8 E9 F9 C3 2E 8E 1E D9 03 2E 8E  // +.Z.............
    81F0: 06 DF 03 E8 5D FA 74 11 80 3E 49 04 07 7C 18 2E  // ....].t..>I..|..
    8200: 8E 06 DD 03 74 03 E9 B1 00 E8 49 FC 8B D8 26 8B  // ....t.....I...&.
    8210: 07 8B EC 89 46 1A C3 A1 50 04 E8 B7 FC 8B F0 BB  // ....F...P.......
    8220: 08 00 2B E3 8B EC 80 3E 49 04 06 75 1F B9 04 00  // ..+....>I..u....
    8230: 26 8A 04 88 46 00 45 26 8A 84 00 20 88 46 00 45  // &...F.E&... .F.E
    8240: 83 C6 50 E2 EB B8 00 02 B2 80 EB 17 D1 E6 B9 04  // ..P.............
    8250: 00 E8 56 FC 81 C6 00 20 E8 4F FC 81 EE B0 1F E2  // ..V.... .O......
    8260: F0 EB E2 2B EB C4 3E 0C 01 32 F6 80 FB 0E 75 09  // ...+..>..2....u.
    8270: 26 83 7D FE 10 75 02 B6 80 16 1F 8B F5 8B CB F6  // &.}..u..........
    8280: C6 80 74 01 47 56 57 F3 A6 5F 5E 74 23 FE C0 03  // ..t.GVW.._^t#...
    8290: FB F6 C6 80 74 01 47 FE CA 75 E2 FE CC 74 0F 2E  // ....t.G..u...t..
    82A0: 8E 1E D9 03 C4 3E 7C 00 B0 80 B2 80 EB CB 32 C0  // .....>|.......2.
    82B0: 8B E5 03 E3 8B EC 89 46 1A C3 80 3E 49 04 13 7C  // .......F...>I..|
    82C0: 05 75 02 EB 5A C3 2E 8E 06 DB 03 E8 18 FC 8B F0  // .u..Z...........
    82D0: 8B 1E 85 04 2B E3 8B EC B8 05 08 B9 05 00 BA CE  // ....+...........
    82E0: 03 80 3E 49 04 0F 72 1A F6 06 87 04 60 75 13 B4  // ..>I..r.....`u..
    82F0: 0A F7 C6 01 00 75 02 B4 05 B0 07 EF B8 05 18 B9  // .....u..........
    8300: 05 01 EF 51 8B CB 26 8A 04 F6 D0 88 46 00 45 03  // ...Q..&.....F.E.
    8310: 36 4A 04 E2 F1 58 EF B8 00 01 32 D2 E9 44 FF 2E  // 6J...X....2..D..
    8320: 8E 06 DB 03 A1 50 04 8B D0 32 F6 52 8A C4 32 E4  // .....P...2.R..2.
    8330: F7 26 4A 04 F7 26 85 04 5A 03 C2 8B F0 8B 1E 85  // .&J..&..Z.......
    8340: 04 2B E3 8B EC 53 8B 3E 4A 04 4F C1 E7 03 C1 E6  // .+...S.>J.O.....
    8350: 03 B9 08 00 32 E4 26 8A 04 D0 E4 0A C0 74 03 80  // ....2.&......t..
    8360: CC 01 46 E2 F1 88 66 00 45 03 F7 4B 75 E3 5B B8  // ..F...f.E..Ku.[.
    8370: 00 01 32 D2 E9 EC FE 33 ED EB 03 BD 01 00 2E 8E  // ..2....3........
    8380: 1E D9 03 2E 8E 06 DF 03 8A 26 49 04 E8 C4 F8 74  // .........&I....t
    8390: 0F 2E 8E 06 DD 03 80 FC 07 74 05 7C 3D E9 0B 02  // .........t.|=...
    83A0: 8A E3 8B F0 8A DF 32 FF D1 E3 8B 87 50 04 8B D0  // ......2.....P...
    83B0: A0 4A 04 F6 E4 32 F6 03 C2 8B F8 D1 E7 0A DB 74  // .J...2.........t
    83C0: 0B D0 EB A1 4C 04 03 F8 FE CB 75 FA 8B C6 0B ED  // ....L.....u.....
    83D0: 75 03 F3 AB C3 AA 47 E2 FC C3 50 2E 8E 06 DF 03  // u.....G...P.....
    83E0: A1 50 04 E8 EE FA 8B F8 A0 50 04 8A 26 4A 04 8B  // .P.......P..&J..
    83F0: E8 58 A8 80 74 08 24 7F C5 36 7C 00 EB 04 C5 36  // .X..t.$..6|....6
    8400: 0C 01 8A FC 32 E4 C1 E0 03 03 F0 80 FF 06 74 69  // ....2.........ti
    8410: D1 E7 8A F3 B0 55 80 E3 03 F6 E3 8A D8 8A F8 8B  // .....U..........
    8420: C5 50 B2 04 F6 C6 80 75 27 AC E8 55 FA 23 C3 AB  // .P.....u'..U.#..
    8430: AC E8 4E FA 23 C3 26 89 85 FE 1F 83 C7 4E FE CA  // ..N.#.&......N..
    8440: 75 E7 83 EE 08 81 EF 3E 01 58 E8 72 00 E2 D2 C3  // u......>.X.r....
    8450: AC E8 2E FA 23 C3 26 31 05 AC E8 25 FA 23 C3 26  // ....#.&1...%.#.&
    8460: 31 85 00 20 83 C7 50 FE CA 75 E5 83 EE 08 81 EF  // 1.. ..P..u......
    8470: 3E 01 58 E8 49 00 E2 A9 C3 8B C5 50 B2 04 F6 C3  // >.X.I......P....
    8480: 80 74 1F AC 26 30 05 AC 26 30 85 00 20 83 C7 50  // .t..&0..&0.. ..P
    8490: FE CA 7F EF 83 EE 08 81 EF 3F 01 58 E8 20 00 E2  // .........?.X. ..
    84A0: DA C3 AC AA AC 26 88 85 FF 1F 83 C7 4F FE CA 7F  // .....&......O...
    84B0: F1 83 EE 08 81 EF 3F 01 58 E8 03 00 E2 BD C3 FE  // ......?.X.......
    84C0: C0 38 E0 72 06 32 C0 81 C7 F0 00 C3 8A 16 85 04  // .8.r.2..........
    84D0: F6 E2 8B F0 32 F6 8B EA 66 0F B6 06 51 04 F6 E2  // ....2...f...Q...
    84E0: 66 0F B7 16 4A 04 83 FA 64 75 03 BA 68 00 83 FA  // f...J...du..h...
    84F0: 5A 75 03 BA 60 00 81 FA AF 00 75 03 BA B0 00 52  // Zu..`.....u....R
    8500: F7 E2 66 0F B7 F8 66 0F B6 06 50 04 66 03 F8 66  // ..f...f...P.f..f
    8510: C1 CF 10 03 FA 66 C1 C7 03 81 CF 00 FF 66 C1 C7  // .....f.......f..
    8520: 10 5A 8A E2 4A C1 E2 03 A0 50 04 50 C5 06 0C 01  // .Z..J....P.P....
    8530: 03 F0 2E 8E 06 DB 03 58 57 51 50 9C FC 8B CD E8  // .......XWQP.....
    8540: 3B 00 B5 08 AC 8A E0 8A C7 D0 E4 73 02 8A C3 26  // ;..........s...&
    8550: 88 05 66 47 FE CD 75 EF 66 03 FA E2 E2 9D 58 59  // ..fG..u.f.....XY
    8560: 5F 83 C7 08 FE C0 38 E0 72 0E 51 32 C0 8B CD 49  // _.....8.r.Q2...I
    8570: 03 FA 83 C7 08 E2 F9 59 2B F5 E2 BC C3 06 52 33  // .......Y+.....R3
    8580: C0 8E C0 66 C1 C7 10 8B C7 66 C1 C7 10 E8 ED 97  // ...f.....f......
    8590: 74 16 38 E0 74 12 0F B6 D0 E8 63 C7 8A E0 66 C1  // t.8.t.....c...f.
    85A0: C7 10 8B F8 66 C1 C7 10 5A 07 C3 80 FC 13 7C 0B  // ....f...Z.....|.
    85B0: 0F 84 18 FF 80 FC 62 0F 84 11 FF E8 01 00 C3 80  // ......b.........
    85C0: FC 11 75 06 80 E3 80 80 CB 0F 50 53 8A DF 32 FF  // ..u.......PS..2.
    85D0: D1 E3 8B 97 50 04 5B 2E 8E 06 DB 03 E8 07 F9 8B  // ....P.[.........
    85E0: F8 8B 2E 85 04 58 32 F6 52 8B 36 4A 04 56 8A 26  // .....X2.R.6J.V.&
    85F0: 85 04 C5 36 0C 01 80 FC 0E 75 09 83 7C FE 10 75  // ...6.....u..|..u
    8600: 03 B4 10 46 F6 E4 03 F0 B6 03 F6 C3 80 75 6D B2  // ...F.........um.
    8610: C4 B8 02 0F EF 5A 58 50 52 4A 8A E0 57 51 51 57  // .....ZXPRJ..WQQW
    8620: 8B CD 32 C0 AA 03 FA E2 FB 5F 47 FE C4 38 D4 76  // ..2......_G..8.v
    8630: 0A 32 E4 8B CD 49 03 FA 47 E2 FB 59 E2 E0 59 5F  // .2...I..G..Y..Y_
    8640: BA C4 03 B0 02 8A E3 EF 5B 4B 5A 51 57 8B CD AC  // ........[KZQW...
    8650: 26 8A 25 AA 03 FB E2 F7 5F 47 2B F5 42 3B D3 76  // &.%....._G+.B;.v
    8660: 0A 33 D2 8B CD 49 03 FB 47 E2 FB 59 E2 DD BA CE  // .3...I..G..Y....
    8670: 03 B8 03 00 EF B2 C4 B8 02 0F EF C3 B2 CE B8 03  // ................
    8680: 18 EF EB BC 2E 8E 1E D9 03 80 3E 63 04 B4 74 0B  // ..........>c..t.
    8690: BA CC 03 EC A8 01 75 04 CD 42 C3 C3 E8 D1 F8 0A  // ......u..B......
    86A0: FF 75 1C 8A E3 80 E4 1F 80 26 66 04 E0 08 26 66  // .u.......&f...&f
    86B0: 04 E8 2D 00 8A 1E 66 04 80 E3 20 B1 05 D2 EB E8  // ..-...f... .....
    86C0: 91 F5 74 19 A0 66 04 24 DF 80 E3 01 74 02 0C 20  // ..t..f.$....t.. 
    86D0: A2 66 04 24 10 0C 02 0A D8 E8 53 00 C3 E8 7E F8  // .f.$......S...~.
    86E0: C3 53 50 80 E3 0F 8A FB D0 E3 81 E3 10 07 0A DF  // .SP.............
    86F0: E8 60 F5 74 0E B4 00 8A C3 E8 2C F3 0B ED 74 03  // .`.t......,...t.
    8700: 26 88 1D 8A C3 E8 0B 00 0B ED 74 04 26 88 5D 10  // &.........t.&.].
    8710: 58 5B C3 8A E0 1E 2E 8E 1E D9 03 80 3E 49 04 33  // X[..........>I.3
    8720: 1F 7F 08 8A C4 B4 11 E8 FE F2 C3 E8 30 F8 C3 9C  // ............0...
    8730: FA E8 62 05 B2 C0 B9 03 00 B4 01 8A C4 EE 8A C3  // ..b.............
    8740: EE 0B ED 74 04 47 26 88 1D FE C4 80 C3 02 E2 EB  // ...t.G&.........
    8750: B0 20 EE 9D C3 2E 8E 1E D9 03 8A 26 49 04 E8 F2  // . .........&I...
    8760: F4 74 0A 80 FC 07 77 06 74 03 E8 C0 F5 C3 80 FC  // .t....w.t.......
    8770: 13 7C 03 74 4C C3 8A D8 E8 BB F7 BA CE 03 B0 08  // .|.tL...........
    8780: EF 2E 8E 1E DB 03 F6 C3 80 75 1C B2 C4 B8 02 FF  // .........u......
    8790: EF 8A 25 C6 05 00 8A E3 EF 8A 25 B4 FF 88 25 EF  // ..%.......%...%.
    87A0: B2 CE B8 08 FF EF C3 B8 03 18 EF B2 C4 B0 02 8A  // ................
    87B0: E3 EF 8A 25 B4 FF 88 25 EF B2 CE B8 03 00 EF EB  // ...%...%........
    87C0: E1 50 2E 8E 06 DB 03 A1 4A 04 C1 E0 03 F7 E2 03  // .P......J.......
    87D0: C1 8B F8 58 26 88 05 C3 2E 8E 1E D9 03 8A 26 49  // ...X&.........&I
    87E0: 04 E8 6F F4 74 0F 80 FC 07 77 0B 74 08 E8 5F F5  // ..o.t....w.t.._.
    87F0: 8B EC 89 46 1A C3 80 FC 13 7C 03 74 29 C3 E8 35  // ...F.....|.t)..5
    8800: F7 8A CC 2E 8E 1E DB 03 BA CE 03 32 FF B8 04 03  // ...........2....
    8810: EF D0 E7 8A 1D 22 D9 74 03 80 CF 01 FE CC 7D F0  // .....".t......}.
    8820: 8B EC 88 7E 1A C3 A1 4A 04 C1 E0 03 F7 E2 03 C1  // ...~...J........
    8830: 8B F8 2E 8E 1E DB 03 8A 05 8B EC 88 46 1A C3 2E  // ............F...
    8840: 8E 1E D9 03 8A 3E 62 04 8A CF D0 E1 32 ED BE 50  // .....>b.....2..P
    8850: 04 03 F1 8B 14 8A 0E 49 04 3C 0D 76 4A 2E 8E 06  // .......I.<.vJ...
    8860: DF 03 E8 EE F3 75 33 8A 1E 4A 04 8A F8 8A C6 F6  // .....u3..J......
    8870: E3 8A CA 03 C8 D1 E1 03 0E 4E 04 8B F9 8A C7 AA  // .........N......
    8880: D1 E9 41 FE C2 38 DA 73 59 89 14 8B 16 63 04 B0  // ..A..8.sY....c..
    8890: 0E 8A E5 EF 8A E1 FE C0 EF C3 2E 8E 06 DD 03 80  // ................
    88A0: F9 07 74 C3 E9 83 00 75 04 32 D2 EB 0F 3C 0A 75  // ..t....u.2...<.u
    88B0: 1D 3A 36 84 04 75 03 E9 93 00 FE C6 89 14 E8 92  // .:6..u..........
    88C0: F3 75 05 80 F9 07 7F 05 8B C2 E8 4C F6 C3 3C 07  // .u.........L..<.
    88D0: 75 04 E8 2B 7E C3 3C 08 75 83 0A D2 74 DE FE CA  // u..+~.<.u...t...
    88E0: EB DA 32 FF 32 D2 2B CB 3A 36 84 04 74 06 FE C6  // ..2.2.+.:6..t...
    88F0: 03 CB EB 95 89 14 8B 16 63 04 B0 0E 8A E5 EF 8A  // ........c.......
    8900: E1 FE C0 EF 2B FB 2B FB 26 8A 65 02 50 8B 3E 4E  // ....+.+.&.e.P.>N
    8910: 04 8B F3 D1 E6 03 F7 A0 84 04 F6 E3 8B C8 06 1F  // ................
    8920: F3 A5 8B CB 58 B0 20 F3 AB C3 B9 01 00 B4 0A E8  // ....X. .........
    8930: 88 C5 FE C2 3A 16 4A 04 74 03 89 14 C3 32 FF 32  // ....:.J.t....2.2
    8940: D2 89 14 3A 36 84 04 74 2E FE C6 EB ED 89 14 2E  // ...:6..t........
    8950: 8E 06 DF 03 E8 FC F2 74 0E 2E 8E 06 DD 03 80 F9  // .......t........
    8960: 07 74 04 32 FF EB 10 8B C2 E8 AD F5 8B F9 D1 E7  // .t.2............
    8970: 4F 8B 1E 4A 04 EB 91 33 C9 8A 36 84 04 8A 16 4A  // O..J...3..6....J
    8980: 04 FE CA B0 01 E9 70 F7 2E 8E 1E D9 03 F6 06 87  // ......p.........
    8990: 04 08 74 03 CD 42 C3 E8 76 F6 8B EC C6 46 1B 00  // ..t..B..v....F..
    89A0: C3 2E 8E 1E D9 03 8A DF 32 FF D1 E3 89 97 50 04  // ........2.....P.
    89B0: D0 EB 38 1E 62 04 75 05 8B C2 E8 5C F5 C3 2E 8E  // ..8.b.u....\....
    89C0: 1E D9 03 8A DF 32 FF D1 E3 8B 97 50 04 8B 0E 60  // .....2.....P...`
    89D0: 04 8B EC 89 4E 16 89 56 12 C3 2E 8E 1E D9 03 A0  // ....N..V........
    89E0: 87 04 24 80 0A 06 49 04 8A 26 4A 04 8A 3E 62 04  // ..$...I..&J..>b.
    89F0: 8B EC 89 46 1A 89 5E 0E 89 4E 16 89 56 12 C3 2E  // ...F..^..N..V...
    8A00: 8E 1E D9 03 3C 04 7F 1B 50 52 BA CC 03 EC A8 01  // ....<...PR......
    8A10: 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80 3E 63 04  // ZXt..>c..t...>c.
    8A20: B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5 2E FF A6  // .u.<.s.2........
    8A30: CA 89 02 8A 22 8A 34 8A 69 8A B3 89 B3 89 B3 89  // ....".4.i.......
    8A40: 8E 8A A6 8A AA 8A B3 89 B3 89 B3 89 B3 89 B3 89  // ................
    8A50: B3 89 D8 8A B3 89 DC 8A F7 8A B3 89 36 8B B3 89  // ............6...
    8A60: 44 8B 5F 8B 66 8B 72 8B 96 8B 80 3E 49 04 13 74  // D._.f.r....>I..t
    8A70: 15 E8 FC F4 8B C3 86 E0 E8 AD EF 0B ED 74 07 8A  // .............t..
    8A80: C7 32 FF 26 88 01 E8 D0 F4 C3 E8 E3 F4 8A C7 E8  // .2.&............
    8A90: 81 FC 0B ED 74 F0 26 88 7D 11 EB EA 80 3E 49 04  // ....t.&.}....>I.
    8AA0: 13 74 E3 06 E8 C9 F4 1F 0B ED 74 07 8B F2 B9 11  // .t........t.....
    8AB0: 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00 B2 C0 9C  // ........2.......
    8AC0: FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8 44 FC EB  // .............D..
    8AD0: B5 80 FB 01 77 B0 E8 80 F4 B2 C0 B0 30 E8 38 F1  // ....w.......0.8.
    8AE0: 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C 08 80 0E  // $..&e.....t.....
    8AF0: 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0 E8 18 F1  // e. .............
    8B00: 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78 FF B3 11  // .... ....N..x...
    8B10: EB E4 8B FA E8 42 F4 B9 10 00 32 E4 B2 C0 8A C4  // .....B....2.....
    8B20: 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D 47 E2 EE  // ...B.&....J..G..
    8B30: 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 20 F4 EB 5A  // .....B..&... ..Z
    8B40: E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26 8A 6D 01  // ......Q..&.5&.m.
    8B50: 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2 E8 C3 0A  // &.M.......CY....
    8B60: DB 75 1A E8 F3 F3 B2 C0 B0 30 E8 AB F0 24 7F F6  // .u.......0...$..
    8B70: C7 01 74 02 0C 80 B4 30 E8 AD EE EB 1D FE CB 75  // ..t....0.......u
    8B80: 1C E8 D5 F3 B2 C0 B0 30 E8 8D F0 EE A8 80 75 03  // .......0......u.
    8B90: C0 E7 02 B4 34 8A C7 E8 8E EE E8 BC F3 C3 8A C3  // ....4...........
    8BA0: E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B FA 51 8B  // ......N..v....Q.
    8BB0: C3 E8 C3 00 26 88 35 26 88 6D 01 26 88 4D 02 83  // ....&.5&.m.&.M..
    8BC0: C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE C3 BA C6  // ..CY............
    8BD0: 03 EC 32 E4 8B EC 89 46 0E C3 E8 7C F3 B2 C0 B0  // ..2....F...|....
    8BE0: 34 E8 34 F0 8A F8 EE B0 30 E8 2C F0 B3 01 A8 80  // 4.4.....0.,.....
    8BF0: 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB 9C 51 8B  // u.........^...Q.
    8C00: C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43 59 E2 EE  // ..s..*....R.CY..
    8C10: C3 F6 06 89 04 02 74 03 E8 16 00 8A C3 E8 39 00  // ......t.......9.
    8C20: C3 F6 06 89 04 02 74 03 E8 06 00 8A C3 E8 2E 00  // ......t.........
    8C30: C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0 0B F6 E1  // .P....P.;..P....
    8C40: 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32 7C 02 FE  // Y..Y...d....2|..
    8C50: C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00 5A 53 8B  // .......X.R.9.ZS.
    8C60: DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5 EE 8A C1  // .......B........
    8C70: EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03 EE 42 42  // ..[....S......BB
    8C80: EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB 00 EC 8A  // ................
    8C90: C8 8A F7 9D 5B C3 50 51 E8 BE F2 B9 FF 7F EC A8  // ....[.PQ........
    8CA0: 08 75 02 E2 F9 59 58 C3 2E 8E 1E D9 03 8B F8 24  // .u...YX........$
    8CB0: 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18 2E FF A5  // ................
    8CC0: 5A 8C 62 8C 77 8C 15 8D 71 8D 3C 03 74 08 3C 04  // Z.b.w...q.<.t.<.
    8CD0: 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3 EF C3 3C  // ...............<
    8CE0: 04 77 F2 50 53 50 52 8B 16 63 04 B0 07 E8 28 EF  // .w.PSPR..c....(.
    8CF0: 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC 02 B0 12  // ........@t......
    8D00: E8 15 EF 40 A3 85 04 B0 09 E8 0C EF A8 80 74 04  // ...@..........t.
    8D10: D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73 1B BA E0  // .........=..s...
    8D20: 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73 0B BA 5E  // .=..s....=|.s..^
    8D30: 01 3D 4A 01 73 03 BA C8 00 89 16 85 04 5A 58 C6  // .=J.s........ZX.
    8D40: 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF 0A C0 74  // .....].[X..2...t
    8D50: 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02 B3 10 8A  // ...<.t...<.t....
    8D60: CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81 E9 01 01  // ..........~.....
    8D70: 87 1E 85 04 53 E8 98 F2 5B E8 85 02 C3 0A C0 74  // ....S...[......t
    8D80: 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C FE C8 74  // ...t...t8..t<..t
    8D90: 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8 8E C0 FE  // @...|...~.......
    8DA0: CA 0A DB 74 07 32 FF 2E 8A 97 55 8D 89 0E 85 04  // ...t.2....U.....
    8DB0: 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3 00 0D 18  // ................
    8DC0: 2A E8 09 03 B9 0E 00 EB D6 BD A2 5C B9 08 00 EB  // *..........\....
    8DD0: CA BD B5 64 B9 10 00 EB C2 0A C0 75 BD 8B 0E 85  // ...d.......u....
    8DE0: 04 8A 16 84 04 80 FF 07 77 35 80 FF 01 77 10 0A  // ........w5...w..
    8DF0: FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01 EB 20 80  // .u...|..&..... .
    8E00: FF 02 75 0B 8C CD 8E C5 2E 8B 2E 94 75 EB 10 0E  // ..u.........u...
    8E10: 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF C8 8D 8B  // ...2............
    8E20: C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C 46 1E C3  // ....N..V..F..F..
    8E30: B5 64 A2 5C A2 60 A2 64 B5 64 B5 74 53 06 8A 26  // .d.\.`.d.d.tS..&
    8E40: 49 04 E8 D2 C2 26 8A 47 02 26 8A 67 33 F6 C4 01  // I....&.G.&.g3...
    8E50: 74 22 BD B5 64 3C 10 7D 0E E8 71 02 8C 06 0E 01  // t"..d<.}..q.....
    8E60: 3C 0E 7D 07 BD A2 5C 8C 0E 0E 01 89 2E 0C 01 E8  // <.}...\.........
    8E70: 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C 0E 74 0D  // ...-..<.}...<.t.
    8E80: 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A 26 F6 47  // ....<.t......&.G
    8E90: 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06 00 E8 C9  // ..t......2......
    8EA0: 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8 05 00 EF  // ..[.............
    8EB0: B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04 07 EF 8B  // ................
    8EC0: D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33 D2 B9 00  // ...P$...t"..3...
    8ED0: 01 3C 04 75 07 B7 10 BD B5 64 EB 10 FE C8 75 07  // .<.u.....d....u.
    8EE0: B7 0E E8 E8 01 EB 05 B7 08 BD A2 5C E8 2D 00 58  // ...........\.-.X
    8EF0: A8 80 74 00 BA C4 03 B8 02 03 EF B8 04 02 EF B2  // ..t.............
    8F00: CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE 50 EC 58  // .......u.....P.X
    8F10: EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC 0B C9 75  // ....2..........u
    8F20: 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75 03 80 CD  // .....u.&.~..u...
    8F30: 80 1E 06 1F 2E 8E 06 DB 03 8B FA C1 E7 05 B0 40  // ...............@
    8F40: 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04 20 86 E0  // S.....[...t.. ..
    8F50: 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32 FF 51 F6  // .......(2...2.Q.
    8F60: C5 80 74 01 46 8B CB F3 A4 83 FB 20 74 07 B9 20  // ..t.F...... t.. 
    8F70: 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE C9 75 DE  // .+...Y...t.F..u.
    8F80: 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04 26 C4 7D  // ...&I.P.W.>..&.}
    8F90: 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26 8A 05 3C  // .....t0.....&..<
    8FA0: FF 74 24 38 E0 74 03 47 EB F2 8B FD 26 8A 05 FE  // .t$8.t.G....&...
    8FB0: C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4 7D 03 89  // ....&.E....&.}..
    8FC0: 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6 47 33 01  // >......_.X.&.G3.
    8FD0: 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0 0B C3 74  // t......&._.....t
    8FE0: 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38 06 49 04  // ....&..<.t.G8.I.
    8FF0: 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8 E8 01 00  // u.&..2..........
    9000: C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4 1F 9C FA  // ...c..&.........
    9010: 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A C4 EE 4A  // ...t....B.$....J
    9020: B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8 8B C3 8A  // ...B.$..........
    9030: 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2 84 04 FE  // ......>...u.....
    9040: 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48 8A E0 B0  // ........t...H...
    9050: 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04 FE C4 F6  // ...c...J..&.....
    9060: E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49 04 50 06  // .......L...&I.P.
    9070: 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF 74 4A 8B  // W.>..&.}.....tJ.
    9080: EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0 74 03 47  // ....&..<.t>8.t.G
    9090: EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B 4D 02 26  // ....&.=&.].&.M.&
    90A0: 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8 50 A0 84  // .U.&.E.<.t...P..
    90B0: 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84 04 26 C4  // ....&.....X...&.
    90C0: 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3 50 53 51  // }...2...._.X.PSQ
    90D0: 52 2E A1 E3 03 0B C0 74 09 2E 8B 2E 94 75 0E 07  // R......t.....u..
    90E0: EB 08 B8 30 11 B7 02 E8 D0 BD 5A 59 5B 58 C3 3C  // ...0......ZY[X.<
    90F0: 04 7C 01 C3 E3 FD 53 2E 8E 1E D9 03 86 FB 32 FF  // .|....S.......2.
    9100: D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15 56 8B F0  // ......P..5[..V..
    9110: 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04 32 D2 EB  // QS&.F.E<...u.2..
    9120: 40 3C 0A 74 32 3C 07 75 05 E8 D4 75 EB 62 3C 08  // @<.t2<.u...u.b<.
    9130: 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02 00 74 05  // u...tZ...'....t.
    9140: 26 8A 5E 00 45 B9 01 00 B4 09 E8 6D BD FE C2 3A  // &.^.E......m...:
    9150: 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04 73 06 FE  // .J.r.2...:6..s..
    9160: C6 89 15 EB 2B 50 E8 EA EA 75 08 B8 00 08 E8 49  // ....+P...u.....I
    9170: BD EB 09 80 3E 49 04 07 74 F1 32 E4 86 3E 62 04  // ....>I..t.2..>b.
    9180: 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04 58 8B 15  // S..U.%.][.>b.X..
    9190: 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15 8B 05 3A  // [Y..Z....u.....:
    91A0: 3E 62 04 75 03 E8 71 ED C3 E9 64 FF 33 C9 8A 36  // >b.u..q...d.3..6
    91B0: 84 04 8A 16 4A 04 FE CA B8 01 06 E8 FC BC C3 2E  // ....J...........
    91C0: 8E 1E D9 03 0A C0 75 0D E8 18 00 8B EC 89 5E 0E  // ......u.......^.
    91D0: C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B EC C6 46  // .F...<.u..A....F
    91E0: 1A 1A C3 A0 8A 04 BF 55 92 2E 3A 05 72 04 BB FF  // .......U..:.r...
    91F0: FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A DB 74 05  // ..2.......]...t.
    9200: 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30 3C 30 74  // ..u........$0<0t
    9210: 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3 BF 55 92  // ....u.....t...U.
    9220: 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12 86 FB 2E  // ...2.....;.t....
    9230: 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB B0 FF A2  // ;.t......8.~....
    9240: 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E BB 07 00  // ...........t....
    9250: BA CC 03 EC A8 01 74 18 BB 08 00 BA B4 03 E8 1C  // ......t.........
    9260: ED 74 21 B7 01 E8 C9 E9 80 FA D4 74 17 86 FB C3  // .t!........t....
    9270: BA D4 03 E8 07 ED 74 0C B7 02 E8 B4 E9 80 FA B4  // ......t.........
    9280: 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08 03 01 03  // t...............
    9290: 01 01 01 00 08 01 01 01 01 01 01 01 01 0F 01 0F  // ................
    92A0: 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01 FF E0 0F  // ................
    92B0: 00 00 00 00 07 02 08 FF 0E 00 00 3F 00 10 01 08  // ...........?....
    92C0: 00 00 00 00 01 00 02 02 01 00 04 04 01 00 05 02  // ................
    92D0: 05 00 06 01 06 05 06 00 08 01 08 00 07 02 07 06  // ................
    92E0: 07 00 55 02 34 00 90 00 D2 00 00 00 00 00 00 00  // ..U.4...........
    92F0: 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF 10 00  // _W..PfR.........
    9300: 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C ED 32  // .....f....f....2
    9310: C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52 66 56  // .f..fZX.f.O.fRfV
    9320: 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33 F6 66  // SWP..uD.....f3.f
    9330: BB D0 05 E8 00 01 00 00 C1 E8 10 F6 C4 40 75 2B  // .............@u+
    9340: 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1 E0 10  // f....f..f..f@...
    9350: 66 8B C2 66 BB 13 00 E8 E8 00 00 00 66 BB 12 00  // f..f........f...
    9360: E8 DF 00 00 00 66 58 32 E4 66 50 58 5F 5B 66 5E  // .....fX2.fPX_[f^
    9370: 66 5A C3 90 66 B8 4F 03 52 51 53 57 66 56 50 8A  // fZ..f.O.RQSWfVP.
    9380: FB 80 E3 7F 0A DB 75 26 E8 67 FF FF FF C1 E2 10  // ......u&.g......
    9390: 66 8B D1 C1 E2 02 66 BE 00 00 E8 C7 00 00 00 66  // f.....f........f
    93A0: BE 00 02 E8 BE 00 00 00 66 58 32 E4 66 50 58 66  // ........fX2.fPXf
    93B0: 5E 5F 5B 59 5A C3 66 B8 4F 03 66 51 57 56 53 52  // ^_[YZ.f.O.fQWVSR
    93C0: 50 8A FB 80 E3 7F 0A DB 75 39 8A DA 57 5A E8 21  // P.......u9..WZ.!
    93D0: FF FF FF 66 33 F6 66 53 66 BB D0 05 E8 57 00 00  // ...f3.fSf....W..
    93E0: 00 80 E4 01 66 5B 80 E7 FE 0A FC 66 BE 00 00 E8  // ....f[.....f....
    93F0: DE 00 00 00 66 BE 00 02 E8 D5 00 00 00 66 58 32  // ....f........fX2
    9400: E4 66 50 58 5A 5B 5E 5F 66 59 C3 90 53 50 51 F6  // .fPXZ[^_fY..SPQ.
    9410: C7 80 74 20 66 BB 9C 1B E8 1B 00 00 00 A8 01 74  // ..t f..........t
    9420: 13 66 B9 FF FF 66 BB A3 1B E8 0A 00 00 00 A8 01  // .f...f..........
    9430: 75 02 E2 F1 59 58 5B C3 66 52 E8 11 00 00 00 ED  // u...YX[.fR......
    9440: 66 5A C3 90 66 52 E8 05 00 00 00 EF 66 5A C3 90  // fZ..fR......fZ..
    9450: 66 8B D7 50 33 C0 66 8B C3 66 03 C6 C1 E0 02 EF  // f..P3.f..f......
    9460: 66 83 C2 04 58 C3 52 E8 A0 FF FF FF 81 E2 FF FF  // f...X.R.........
    9470: FF 02 66 BB 04 1A E8 BD FF FF FF 25 00 00 00 FD  // ..f........%....
    9480: 03 C2 66 25 00 F0 E8 B9 FF FF FF 66 BB 05 1A E8  // ..f%.......f....
    9490: B0 FF FF FF 66 81 E2 FF 0F 66 BB 01 1A E8 96 FF  // ....f....f......
    94A0: FF FF 24 03 8A C8 66 D3 EA 66 BB 06 1A E8 86 FF  // ..$...f..f......
    94B0: FF FF 66 03 C2 66 BB 0D 1A E8 86 FF FF FF 66 8B  // ..f..f........f.
    94C0: C2 24 FC C1 E0 10 66 BB 5C 1B E8 75 FF FF FF 5A  // .$....f.\..u...Z
    94D0: C3 90 52 66 53 66 51 E8 30 FF FF FF 33 C0 8A C3  // ..RfSfQ.0...3...
    94E0: 66 53 66 BB 79 1A E8 59 FF FF FF 66 5B 66 49 66  // fSf.y..Y...f[fIf
    94F0: 81 E1 FF 00 66 41 32 C0 66 53 66 BB 78 1A E8 41  // ....fA2.fSf.x..A
    9500: FF FF FF 66 5B 26 8A 42 02 C1 E0 0A 26 8A 42 01  // ...f[&.B....&.B.
    9510: C1 E0 0A 26 8A 02 C1 E0 02 F6 C7 01 75 03 C1 E0  // ...&........u...
    9520: 02 66 53 66 BB 7C 1A E8 18 FF FF FF 66 5B 83 C2  // .fSf.|......f[..
    9530: 04 E2 D2 66 59 66 5B 5A C3 00 6D 38 60 38 60 38  // ...fYf[Z..m8`8`8
    9540: 60 38 4B 38 4B 38 4B 38 4B 38 8D 34 04 35 2E 35  // `8K8K8K8K8.4.5.5
    9550: 6F 36 6E 36 6E 36 B4 36 19 37 49 37 06 38 2F 38  // o6n6n6.6.7I7.8/8
    9560: 2F 38 A6 36 99 36 99 36 99 36 99 36 99 36 B4 36  // /8.6.6.6.6.6.6.6
    9570: 19 37 49 37 06 38 34 38 7A 38 2F 38 2F 38 FF FF  // .7I7.848z8/8/8..
    9580: FF FF FF FF 00 00 FF FF 00 00 FF FF 00 00 FF 00  // ................
    9590: 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00 00 00  // ................
    95A0: 08 10 00 08 10 18 00 08 10 18 91 32 01 91 32 02  // ...........2..2.
    95B0: 9F 46 03 7F 46 03 B6 33 03 6A 33 03 92 32 04 AB  // .F..F..3.j3..2..
    95C0: 32 04 BB 32 04 91 32 03 00 00 00 00 3E 3A 00 02  // 2..2..2.....>:..
    95D0: 3E 3A 01 02 3E 3A 02 02 3E 3A 03 02 3E 3A 04 02  // >:..>:..>:..>:..
    95E0: 3E 3A 05 02 38 3C 00 02 38 3C 01 02 38 3C 02 02  // >:..8<..8<..8<..
    95F0: 38 3C 03 02 38 3C 04 02 38 3C 05 02 6D 3C 00 02  // 8<..8<..8<..m<..
    9600: 6D 3C 01 02 6D 3C 02 02 6D 3C 03 02 6D 3C 04 02  // m<..m<..m<..m<..
    9610: 6D 3C 05 02 A8 3E 00 02 A8 3E 01 02 A8 3E 02 02  // m<...>...>...>..
    9620: A8 3E 03 02 A8 3E 04 02 A8 3E 05 02 A8 3E 00 02  // .>...>...>...>..
    9630: A8 3E 01 02 A8 3E 02 02 A8 3E 03 02 A8 3E 04 02  // .>...>...>...>..
    9640: A8 3E 05 02 6F 3D 00 02 6F 3D 01 02 6F 3D 02 02  // .>..o=..o=..o=..
    9650: 6F 3D 03 02 6F 3D 04 02 6F 3D 05 02 AB 3D 00 02  // o=..o=..o=...=..
    9660: AB 3D 01 02 AB 3D 02 02 AB 3D 03 02 AB 3D 04 02  // .=...=...=...=..
    9670: AB 3D 05 02 1C 3D 00 02 1C 3D 01 02 1C 3D 02 02  // .=...=...=...=..
    9680: 1C 3D 03 02 1C 3D 04 02 1C 3D 05 02 50 3D 00 02  // .=...=...=..P=..
    9690: 50 3D 01 02 50 3D 02 02 50 3D 03 02 50 3D 04 02  // P=..P=..P=..P=..
    96A0: 50 3D 05 02 00 41 00 00 33 41 01 00 33 41 02 00  // P=...A..3A..3A..
    96B0: 20 41 00 00 0E 40 00 02 07 3E 00 02 07 3E 01 02  //  A...@...>...>..
    96C0: 07 3E 02 02 07 3E 03 02 07 3E 04 02 07 3E 05 02  // .>...>...>...>..
    96D0: 26 40 00 02 7B 42 05 00 7B 42 01 00 7B 42 00 00  // &@..{B..{B..{B..
    96E0: 7B 42 02 00 BC 42 00 00 BC 42 02 00 01 43 00 00  // {B...B...B...C..
    96F0: 91 3F 00 02 91 3F 01 02 91 3F 02 02 91 3F 03 02  // .?...?...?...?..
    9700: 91 3F 04 02 91 3F 05 02 4D 41 00 00 75 41 00 00  // .?...?..MA..uA..
    9710: F6 41 00 00 71 42 00 00 55 3E 00 02 55 3E 01 02  // .A..qB..U>..U>..
    9720: 55 3E 02 02 55 3E 03 02 55 3E 04 02 55 3E 05 02  // U>..U>..U>..U>..
    9730: 70 42 00 01 70 42 00 01 74 3B 00 02 74 3B 01 02  // pB..pB..t;..t;..
    9740: 74 3B 02 02 74 3B 03 02 74 3B 04 02 74 3B 05 02  // t;..t;..t;..t;..
    9750: 95 41 00 00 71 42 00 00 71 42 00 00 71 42 00 00  // .A..qB..qB..qB..
    9760: A6 40 00 00 98 3C 00 02 98 3C 01 02 98 3C 02 02  // .@...<...<...<..
    9770: 98 3C 03 02 98 3C 04 02 98 3C 05 02 C7 3C 00 02  // .<...<...<...<..
    9780: C7 3C 01 02 C7 3C 02 02 C7 3C 03 02 C7 3C 04 02  // .<...<...<...<..
    9790: C7 3C 05 02 FD 3C 00 02 FD 3C 01 02 FD 3C 02 02  // .<...<...<...<..
    97A0: FD 3C 03 02 FD 3C 04 02 FD 3C 05 02 B8 41 00 00  // .<...<...<...A..
    97B0: DB 41 00 00 99 3D 01 02 99 3D 02 02 F5 3D 01 02  // .A...=...=...=..
    97C0: F5 3D 02 02 A6 00 01 01 06 B0 84 B0 DC B0 4E CF  // .=............N.
    97D0: 68 D9 94 B1 00 00 EC CF 00 00 A8 B2 A8 B3 54 B5  // h.............T.
    97E0: 76 B6 6E BB F6 BC FE BC 92 D7 C4 D7 3C C2 4E C3  // v.n.........<.N.
    97F0: 70 C3 00 00 00 00 00 00 00 00 00 00 00 00 FE C3  // p...............
    9800: 00 00 00 00 BA E3 50 E4 FC E5 BE C6 36 C7 AA C7  // ......P.....6...
    9810: 00 00 E8 C7 14 C8 00 00 36 C8 50 C8 D0 C8 96 C9  // ........6.P.....
    9820: 46 CB 90 CB C6 EA 26 CC 64 CC 3C CD 00 00 B4 E7  // F.....&.d.<.....
    9830: 90 CE F8 E9 06 D0 CE E6 38 D2 00 00 98 D2 A2 D2  // ........8.......
    9840: DE D2 8E D4 D0 DB 96 D4 06 D6 06 D7 00 00 D4 D7  // ................
    9850: 00 00 86 E9 00 00 88 BD EA C1 00 00 00 00 00 00  // ................
    9860: FA DB 40 DD 12 E1 5E E3 E4 D8 4A 00 01 01 00 00  // ..@...^...J.....
    9870: 00 00 00 00 4C 98 30 99 9C 99 D0 99 00 00 78 AF  // ....L.0.......x.
    9880: 00 00 1E 9A FA 9A 06 9B 26 9B 9A 9B B2 9B 00 00  // ........&.......
    9890: 60 AF 00 00 00 00 00 00 00 00 FC 9E AE A2 DA 9F  // `...............
    98A0: 00 00 D4 AE FC AE 2C A3 00 00 00 00 AC AD B8 AE  // ......,.........
    98B0: 00 00 B0 AF E4 00 01 02 4E 0C 80 02 C0 00 90 01  // ........N.......
    98C0: 2D 00 20 00 40 00 01 00 03 00 00 00 00 00 00 00  // -. .@...........
    98D0: 02 00 E6 55 D6 09 80 02 A0 00 E0 01 2D 00 10 00  // ...U........-...
    98E0: 60 00 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C  // `..............<
    98F0: A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00 01 00  // .. ...X...(.....
    9900: 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04  // ..........j<d...
    9910: 40 01 00 03 26 00 18 00 88 00 03 00 06 00 00 00  // @...&...........
    9920: 00 00 00 00 06 00 55 3C 30 2A 00 05 08 02 C0 03  // ......U<0*......
    9930: 28 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00  // (.`.p...........
    9940: 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00  // ...<0*......*.0.
    9950: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C  // p..............<
    9960: 8F 2F 78 05 D0 01 1A 04 27 00 58 00 90 00 03 00  // ./x.....'.X.....
    9970: 04 00 00 00 00 00 00 00 02 00 EB 3C 48 3F 40 06  // ...........<H?@.
    9980: 30 02 B0 04 32 00 40 00 C0 00 01 00 03 00 00 00  // 0...2.@.........
    9990: 00 00 00 00 00 00 EC 3C 6C 00 02 02 01 02 32 0F  // .......<l.....2.
    99A0: 30 75 00 00 30 75 00 00 00 00 00 00 40 7E 05 00  // 0u..0u......@~..
    99B0: 00 00 00 00 00 00 00 00 C0 27 09 00 00 00 00 00  // .........'......
    99C0: 60 EA 00 00 00 05 84 03 9A 0B 70 17 00 00 00 00  // `.........p.....
    99D0: 28 88 04 00 00 00 00 00 00 00 00 00 00 00 00 00  // (...............
    99E0: 40 9C C4 09 10 27 B6 03 3F 40 10 27 10 27 10 27  // @....'..?@.'.'.'
    99F0: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9A00: 00 00 00 00 34 00 02 01 00 00 00 00 00 2A 00 2A  // ....4........*.*
    9A10: 00 00 2A 2A 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A  // ..***..*.**..***
    9A20: 15 15 15 15 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F  // .....?.?..???..?
    9A30: 15 3F 3F 3F 15 3F 3F 3F 4E 00 01 03 B4 34 80 07  // .???.???N....4..
    9A40: 68 00 38 04 1F 00 30 00 20 00 03 00 05 00 7E 01  // h.8...0. .....~.
    9A50: D7 00 00 00 04 02 00 3C 00 00 20 00 00 00 00 00  // .......<.. .....
    9A60: 1D 3C 01 00 00 00 00 00 01 48 C8 00 07 5A 5A 07  // .<.......H...ZZ.
    9A70: 7D 00 00 00 0B 0A C2 41 34 21 00 00 00 00 00 00  // }......A4!......
    9A80: 00 00 00 00 00 00 DC 00 01 01 68 48 6A 48 6B 48  // ..........hHjHkH
    9A90: 69 48 68 48 6A 48 6B 48 69 48 90 00 00 00 00 08  // iHhHjHkHiH......
    9AA0: 08 08 08 00 00 6C 48 6E 48 6F 48 6D 48 6C 48 6E  // .....lHnHoHmHlHn
    9AB0: 48 6F 48 6D 48 91 00 00 00 00 08 08 08 08 00 00  // HoHmH...........
    9AC0: 70 48 72 48 73 48 71 48 70 48 72 48 73 48 71 48  // pHrHsHqHpHrHsHqH
    9AD0: 92 00 00 00 00 08 08 08 08 00 00 74 48 76 48 77  // ...........tHvHw
    9AE0: 48 75 48 74 48 76 48 77 48 75 48 93 00 00 00 00  // HuHtHvHwHuH.....
    9AF0: 08 08 08 08 00 00 78 48 7A 48 7B 48 79 48 78 48  // ......xHzH{HyHxH
    9B00: 7A 48 7B 48 79 48 94 00 00 00 00 08 08 08 08 00  // zH{HyH..........
    9B10: 00 7C 48 7E 48 7F 48 7D 48 7C 48 7E 48 7F 48 7D  // .|H~H.H}H|H~H.H}
    9B20: 48 95 00 00 00 00 08 08 08 08 00 00 98 48 9A 48  // H............H.H
    9B30: 9B 48 99 48 98 48 9A 48 9B 48 99 48 96 00 00 00  // .H.H.H.H.H.H....
    9B40: 00 01 01 01 01 00 00 80 48 82 48 83 48 81 48 80  // ........H.H.H.H.
    9B50: 48 82 48 83 48 81 48 97 00 00 00 00 08 08 08 08  // H.H.H.H.........
    9B60: 00 00 0C 00 01 05 E0 FF 7F 00 20 00 20 00 20 00  // .......... . . .
    9B70: 01 01 8D 48 00 01 8D 48 08 02 8D 48 10 03 8D 48  // ...H...H...H...H
    9B80: 18 04 8D 48 1A 05 8D 48 1C 06 83 01 05 3C 74 00  // ...H...H.....<t.
    9B90: 01 01 10 01 06 12 11 01 16 12 13 01 06 6A 14 01  // .............j..
    9BA0: 16 6A 16 01 06 55 17 01 16 55 19 01 06 EA 1A 01  // .j...U...U......
    9BB0: 16 EA 65 01 16 E9 66 01 0A E9 21 01 0A 12 22 01  // ..e...f...!...".
    9BC0: 0A 6A 23 01 0A 55 24 01 0A EA 45 01 16 EB 46 01  // .j#..U$...E...F.
    9BD0: 0A EB 75 01 16 EC 76 01 0A EC D2 01 16 70 D4 01  // ..u...v......p..
    9BE0: 0A 70 D8 01 16 71 D9 01 0A 71 E2 01 16 72 E4 01  // .p...q...q...r..
    9BF0: 0A 72 E8 01 16 73 E9 01 0A 73 F5 01 16 74 F6 01  // .r...s...s...t..
    9C00: 0A 74 18 00 02 03 01 08 04 08 09 01 02 08 00 00  // .t..............
    9C10: 00 00 00 00 00 00 00 00 00 00 49 03 07 01 00 4D  // ..........I....M
    9C20: 00 34 06 00 00 4D 24 00 00 19 00 00 00 02 00 00  // .4...M$.........
    9C30: 02 00 00 00 00 00 00 00 00 32 00 00 00 4D 00 A0  // .........2...M..
    9C40: 02 97 02 00 00 C1 01 47 01 8B 00 05 01 DD 01 15  // .......G........
    9C50: 03 00 00 D0 02 05 03 2F 03 00 00 00 00 00 00 00  // ......./........
    9C60: 00 00 00 00 00 00 00 01 03 00 00 00 00 00 00 00  // ................
    9C70: 00 08 00 00 00 00 00 00 00 00 00 00 00 07 00 01  // ................
    9C80: 00 00 00 00 00 05 00 00 00 00 00 00 00 00 00 00  // ................
    9C90: 00 01 00 01 00 00 00 00 00 01 00 00 00 00 00 00  // ................
    9CA0: 00 00 00 00 00 00 0F 84 03 00 00 00 00 00 00 02  // ................
    9CB0: FF 00 00 00 00 00 00 03 FF 00 00 00 00 00 00 04  // ................
    9CC0: FF 00 00 00 00 00 00 05 FF 00 00 00 00 00 00 06  // ................
    9CD0: FF 00 00 00 00 00 00 07 FF 00 00 00 00 00 00 08  // ................
    9CE0: FF 00 00 00 00 00 00 84 03 00 00 00 00 00 00 84  // ................
    9CF0: 03 00 00 00 00 00 00 B6 03 00 00 00 00 00 00 E8  // ................
    9D00: 03 00 00 00 00 00 00 1A 04 00 00 00 00 00 00 4C  // ...............L
    9D10: 04 00 00 00 00 00 00 7E 04 00 00 00 00 00 00 00  // .......~........
    9D20: 08 84 03 00 00 00 00 00 00 02 FF 00 00 00 00 00  // ................
    9D30: 00 03 FF 00 00 00 00 00 00 04 FF 00 00 00 00 00  // ................
    9D40: 00 05 FF 00 00 00 00 00 00 06 FF 00 00 00 00 00  // ................
    9D50: 00 07 FF 00 00 00 00 00 00 08 FF 00 00 00 00 00  // ................
    9D60: 00 01 08 00 00 00 30 75 00 00 00 00 00 80 00 00  // ......0u........
    9D70: 00 00 01 E6 FF 08 B6 00 00 00 00 00 80 00 00 00  // ................
    9D80: 00 02 E6 FF 5C 25 01 00 00 00 00 00 00 00 00 00  // ....\%..........
    9D90: 03 E6 FF 0C 8E 01 00 00 00 00 00 00 00 00 00 04  // ................
    9DA0: E6 FF 88 A3 01 00 00 00 00 00 00 00 00 00 05 E6  // ................
    9DB0: FF D8 B7 01 00 00 00 00 00 00 00 00 00 06 E6 FF  // ................
    9DC0: A4 C8 01 00 00 00 00 00 00 00 00 00 07 00 00 18  // ................
    9DD0: D7 01 00 00 00 00 00 00 00 00 00 00 02 00 52 03  // ..............R.
    9DE0: 00 00 E8 03 30 75 00 00 00 00 09 B6 03 00 00 E8  // ....0u..........
    9DF0: 03 98 AB 02 00 00 00 00 08 00 00 00 90 E2 00 00  // ................
    9E00: F8 24 01 00 18 F6 00 00 00 00 00 00 A8 DE 00 00  // .$..............
    9E10: 01 B4 FF 18 F6 00 00 80 38 01 00 88 0D 01 00 00  // ........8.......
    9E20: 00 00 00 00 FA 00 00 02 9B FF A0 09 01 00 08 4C  // ...............L
    9E30: 01 00 F8 24 01 00 00 00 00 00 70 11 01 00 03 82  // ...$......p.....
    9E40: FF 28 1D 01 00 A8 5B 01 00 68 3C 01 00 00 00 00  // .(....[..h<.....
    9E50: 00 E0 28 01 00 04 69 FF C8 2C 01 00 60 67 01 00  // ..(...i..,..`g..
    9E60: F0 4F 01 00 00 00 00 00 80 38 01 00 05 37 FF 80  // .O.......8...7..
    9E70: 38 01 00 18 73 01 00 78 63 01 00 00 00 00 00 08  // 8...s..xc.......
    9E80: 4C 01 00 06 05 FF 38 44 01 00 D0 7E 01 00 00 77  // L.....8D...~...w
    9E90: 01 00 00 00 00 00 C0 57 01 00 07 00 00 F0 4F 01  // .......W......O.
    9EA0: 00 A0 86 01 00 A0 86 01 00 00 00 00 00 78 63 01  // .............xc.
    9EB0: 00 01 17 00 00 80 00 00 00 00 09 03 A0 0F 64 19  // ..............d.
    9EC0: 34 21 D0 07 A0 0F 70 17 94 2A 01 64 00 E4 12 C0  // 4!....p..*.d....
    9ED0: 12 50 C3 00 00 55 14 64 00 64 00 64 00 64 00 64  // .P...U.d.d.d.d.d
    9EE0: 00 64 00 64 00 00 32 3C 00 00 04 55 00 00 00 4A  // .d.d..2<...U...J
    9EF0: 00 55 00 55 00 00 00 00 00 55 00 5A 00 00 00 00  // .U.U.....U.Z....
    9F00: 00 5E 00 02 00 69 00 50 00 50 00 73 00 73 00 5F  // .^...i.P.P.s.s._
    9F10: 00 00 00 90 10 96 00 90 00 00 06 00 00 00 00 01  // ................
    9F20: 01 30 75 00 00 30 75 00 00 E8 03 00 00 E8 03 01  // .0u..0u.........
    9F30: 06 00 00 02 01 00 01 02 01 00 02 02 01 00 02 02  // ................
    9F40: 01 00 02 02 01 00 02 02 01 01 03 00 10 00 00 00  // ................
    9F50: 00 00 00 00 10 00 00 00 00 00 00 02 10 00 00 00  // ................
    9F60: 00 00 00 00 DE 00 01 03 8A 00 34 00 00 00 A1 00  // ..........4.....
    9F70: 00 00 12 00 00 00 03 01 00 00 02 00 0A 00 14 31  // ...............1
    9F80: 00 11 21 22 08 00 0A 00 13 31 00 11 1E 21 80 00  // ..!".....1...!..
    9F90: 0A 00 0C 31 00 11 1E 22 03 00 00 00 14 31 50 00  // ...1...".....1P.
    9FA0: 56 00 00 00 13 31 6B 00 71 00 00 00 0C 31 86 00  // V....1k.q....1..
    9FB0: 8C 00 00 00 01 21 22 00 00 00 04 0C 01 00 10 01  // .....!".........
    9FC0: 00 00 02 00 00 00 01 04 92 00 02 04 05 00 FF 01  // ................
    9FD0: 1E 21 00 00 00 04 0C 01 00 10 02 00 00 08 00 00  // .!..............
    9FE0: 00 01 04 93 00 02 04 04 00 FF 01 1E 22 00 00 00  // ............"...
    9FF0: 04 0C 01 00 20 02 00 00 80 00 00 00 01 04 94 00  // .... ...........
    A000: 02 04 03 00 FF 03 00 00 00 21 22 BD 00 C3 00 00  // .........!".....
    A010: 00 1E 21 C8 00 CE 00 00 00 1E 22 D3 00 D9 00 00  // ..!.......".....
    A020: 00 01 00 11 01 14 31 14 04 0F 00 FF 01 00 11 01  // ......1.........
    A030: 13 31 14 04 0F 00 FF 01 00 11 01 0C 31 14 04 0F  // .1..........1...
    A040: 00 FF D4 02 02 01 30 DC B4 00 00 80 03 00 2C 1F  // ......0.......,.
    A050: 00 00 14 00 00 00 DC 0C 14 00 00 00 D5 0C 33 03  // ..............3.
    A060: 00 00 D4 0C 00 02 0C 00 00 0B 29 00 20 0F D3 0B  // ..........). ...
    A070: E0 1F 12 00 ED 09 10 A8 08 00 92 09 00 04 0C 00  // ................
    A080: 94 09 00 04 0C 00 93 09 00 04 0C 00 6D 09 1F 10  // ............m...
    A090: 14 01 2E 08 00 04 0C 00 30 08 80 0C 0C 00 2F 08  // ........0...../.
    A0A0: 00 04 0C 00 4F 09 B4 00 01 00 1E 09 00 04 0C 00  // ....O...........
    A0B0: F3 09 1B 90 00 00 E9 09 5A 8A FF 00 EA 09 7A AE  // ........Z.....z.
    A0C0: FF 08 EE 09 10 0C 00 00 EF 09 10 0C 00 00 E5 09  // ................
    A0D0: FC FD FC FC E6 09 FD F8 FC FC E7 09 FC FC F3 FC  // ................
    A0E0: E8 09 FC FC FC F5 F0 09 08 6F C3 00 F1 09 05 29  // .........o.....)
    A0F0: C3 00 DA 09 11 40 04 00 D6 09 03 F8 6F 00 F2 09  // .....@......o...
    A100: 10 10 87 01 F4 09 45 4F 70 08 F5 09 16 3A 02 03  // ......EOp....:..
    A110: DB 09 03 03 00 00 E1 09 00 00 00 00 E2 09 04 00  // ................
    A120: 00 00 74 09 C9 00 00 00 76 09 00 30 00 00 7F 09  // ..t.....v..0....
    A130: 49 9A 24 00 80 09 51 12 25 02 3B 08 1C 3C 00 70  // I.$...Q.%.;..<.p
    A140: 56 08 3F 40 00 00 57 08 10 10 00 00 5A 08 97 09  // V.?@..W.....Z...
    A150: 00 00 E7 0D 99 00 C1 50 E8 0D 99 01 C1 50 E9 0D  // .......P.....P..
    A160: 89 00 C1 50 EA 0D 19 03 C1 50 51 08 99 00 C1 50  // ...P.....PQ....P
    A170: 52 08 99 00 C1 50 53 08 99 00 C1 50 54 08 99 00  // R....PS....PT...
    A180: C1 50 5C 08 91 09 00 00 83 08 91 01 00 00 59 08  // .P\...........Y.
    A190: 91 51 00 00 5B 08 91 29 00 00 5D 08 91 09 00 00  // .Q..[..)..].....
    A1A0: 58 08 91 09 00 00 64 08 13 00 00 00 84 08 95 09  // X.....d.........
    A1B0: 00 00 3D 08 49 92 24 00 80 08 91 09 00 00 35 08  // ..=.I.$.......5.
    A1C0: 1E 00 F9 00 41 08 12 68 8F F8 42 08 13 6A 91 F6  // ....A..h..B..j..
    A1D0: 77 08 91 13 00 00 70 08 11 0B 00 00 EB 0D 3D 90  // w.....p.......=.
    A1E0: 80 40 EC 0D 35 50 54 40 ED 0D 3D 50 1C 40 EE 0D  // .@..5PT@..=P.@..
    A1F0: 35 B0 6A 40 66 08 45 90 80 40 67 08 55 50 80 40  // 5.j@f.E..@g.UP.@
    A200: 68 08 3D 50 4C 40 69 08 3D 70 80 40 6D 08 91 09  // h.=PL@i.=p.@m...
    A210: 01 00 71 08 15 24 00 00 88 08 91 11 00 00 78 08  // ..q..$........x.
    A220: 91 12 00 00 6B 08 A1 09 00 00 72 08 91 09 00 00  // ....k.....r.....
    A230: 6C 08 01 09 00 00 74 08 95 51 00 00 4D 08 11 09  // l.....t..Q..M...
    A240: 00 00 4E 08 11 2A 00 00 73 08 13 0F 00 00 75 08  // ..N..*..s.....u.
    A250: 91 09 00 00 7D 08 91 09 00 00 89 08 91 01 00 00  // ....}...........
    A260: 3E 08 49 92 CC 00 7F 08 91 11 00 00 7E 08 91 21  // >.I.........~..!
    A270: 03 00 6F 08 91 29 00 00 3C 08 07 00 00 80 81 09  // ..o..)..<.......
    A280: 91 0C 00 00 82 09 95 09 00 00 85 09 11 01 00 00  // ................
    A290: 83 09 91 09 00 00 84 09 11 8C 00 00 86 09 91 09  // ................
    A2A0: 00 00 87 09 11 09 00 00 88 09 91 89 00 00 7B 09  // ..............{.
    A2B0: 91 49 00 00 7C 09 A1 09 00 00 70 05 00 04 0C 00  // .I..|.....p.....
    A2C0: 8E 0C 00 00 00 00 83 08 91 01 00 00 84 08 95 09  // ................
    A2D0: 00 00 85 08 97 09 00 00 88 08 91 11 00 00 89 08  // ................
    A2E0: 91 01 00 00 8A 08 93 09 00 00 50 08 91 09 02 00  // ..........P.....
    A2F0: 3F 08 28 28 72 72 40 08 50 50 28 28 43 08 80 80  // ?.((rr@.PP((C...
    A300: 00 00 CD 09 10 00 00 00 C0 09 40 0F 50 00 60 08  // ..........@.P.`.
    A310: E1 09 02 00 00 00 7D 00 01 01 01 02 04 20 00 06  // ......}...... ..
    A320: 20 00 00 03 91 0A 02 92 0A 09 10 00 01 82 04 20  //  .............. 
    A330: 00 06 20 00 00 03 91 0A 08 20 00 00 03 92 0A 09  // .. ...... ......
    A340: 26 00 01 03 02 0E 00 06 10 00 00 03 0E 00 02 0F  // &...............
    A350: 00 09 38 00 01 83 02 0E 00 06 10 00 00 03 0E 00  // ..8.............
    A360: 08 20 00 00 03 0F 00 09 4E 00 01 05 02 82 00 06  // . ......N.......
    A370: 10 00 00 03 82 00 02 83 00 09 60 00 01 85 02 82  // ..........`.....
    A380: 00 06 10 00 00 03 82 00 08 20 00 00 03 83 00 09  // ......... ......
    A390: 76 00 00 00 80 0A 02 02 EA 00 AC 01 2E 09 24 0A  // v.............$.
    A3A0: 9C 09 00 00 04 01 08 04 32 10 54 76 2D 00 A2 60  // ........2.Tv-..`
    A3B0: FF 00 00 50 03 05 63 0A 04 00 00 00 00 20 00 0B  // ...P..c...... ..
    A3C0: 00 40 00 61 00 02 02 00 00 00 00 00 43 65 07 00  // .@.a........Ce..
    A3D0: 00 00 00 00 00 32 10 54 76 37 00 A2 60 FF 00 00  // .....2.Tv7..`...
    A3E0: 50 03 05 63 0A 04 00 00 00 00 20 00 0B 00 40 00  // P..c...... ...@.
    A3F0: 61 21 02 02 00 00 00 00 00 43 65 07 00 00 00 00  // a!.......Ce.....
    A400: 00 4B 34 47 38 30 33 32 35 46 42 00 32 10 54 76  // .K4G80325FB.2.Tv
    A410: 3A 00 A2 60 FF 00 00 50 03 05 63 0A 04 00 00 00  // :..`...P..c.....
    A420: 00 20 01 0B 00 40 00 61 0F 02 02 00 00 00 00 00  // . ...@.a........
    A430: 43 65 07 00 00 00 00 00 4D 54 35 31 4A 32 35 36  // Ce......MT51J256
    A440: 4D 33 32 48 46 00 32 10 54 76 38 00 A2 60 FF 00  // M32HF.2.Tv8..`..
    A450: 00 50 03 05 63 0A 04 00 00 00 00 20 02 0B 00 40  // .P..c...... ...@
    A460: 00 61 76 02 02 00 00 00 00 00 43 65 07 00 00 00  // .av.......Ce....
    A470: 00 00 48 35 47 43 38 48 32 34 4D 4A 52 00 2A 00  // ..H5GC8H24MJR.*.
    A480: 30 00 80 0A 04 8C 0A 04 95 0A 04 96 0A 04 82 0A  // 0...............
    A490: 04 00 00 44 01 00 44 03 00 44 0A 00 44 4E 0A 04  // ...D..D..D..DN..
    A4A0: 54 0A 00 97 0A 04 98 0A 00 FF FF 00 FF FF FF 00  // T...............
    A4B0: 72 21 60 50 F8 CF 08 E0 5A 4A 6F A0 0D F0 8C 30  // r!`P....ZJo....0
    A4C0: 13 46 03 61 FF FF 0C 0C 04 00 02 01 00 03 00 63  // .F.a...........c
    A4D0: 98 00 02 00 AA AA AA 00 F5 08 03 00 FF FF FF 01  // ................
    A4E0: 72 0F 60 50 18 C1 00 E1 66 44 68 60 0C F0 8C 30  // r.`P....fDh`...0
    A4F0: 12 40 03 61 FF FF 04 04 04 04 02 02 00 03 00 63  // .@.a...........c
    A500: 1A 00 02 00 30 0C C3 00 28 8A 02 00 FF FF FF 02  // ....0...(.......
    A510: 72 76 60 50 18 C1 00 E0 66 40 6E 60 0C F0 8C 30  // rv`P....f@n`...0
    A520: 1B 40 03 61 FF FF 0C 0C 04 00 02 02 00 03 00 83  // .@.a............
    A530: 98 00 02 00 30 0C C3 00 5D F7 03 00 00 00 00 00  // ....0...].......
    A540: 2A 00 34 00 2F 0A 04 30 0A 00 D5 0A 04 2C 0A 04  // *.4./..0.....,..
    A550: 28 0A 04 29 0A 04 2A 0A 04 2B 0A 04 81 0A 04 8B  // (..)..*..+......
    A560: 0A 04 5F 0A 04 DD 09 84 DE 09 84 FF FF 00 A8 61  // .._............a
    A570: 00 01 33 30 00 00 00 00 00 00 22 CC 1C 00 62 8C  // ..30......"...b.
    A580: 11 0B 10 57 0A 08 0E C3 B0 01 00 20 41 00 22 01  // ...W....... A.".
    A590: 14 20 9A 88 00 A0 00 00 00 00 04 03 08 09 1B 0D  // . ..............
    A5A0: 0F 0E 40 9C 00 01 33 30 00 00 00 00 00 00 22 CC  // ..@...30......".
    A5B0: 1C 00 63 94 12 11 20 57 0A 09 11 44 B1 02 00 20  // ..c... W...D... 
    A5C0: 42 00 2A 02 14 20 AA 88 00 A0 00 00 00 00 06 04  // B.*.. ..........
    A5D0: 0C 0E 2B 10 12 0F 60 EA 00 01 33 30 00 00 00 00  // ..+...`...30....
    A5E0: 00 00 22 CC 1C 00 A5 20 24 1A 40 57 0B 0B 97 05  // ..".... $.@W....
    A5F0: 12 04 00 22 64 00 3A 05 14 20 CA 88 00 A0 00 00  // ..."d.:.. ......
    A600: 00 00 09 06 12 15 41 15 18 10 90 5F 01 01 33 30  // ......A...._..30
    A610: 00 00 00 00 00 00 22 CC 1C 00 E7 B4 36 27 80 57  // ......".....6'.W
    A620: 0B 0F 9F 07 23 06 00 24 85 00 5A 09 14 20 DA 88  // ....#..$..Z.. ..
    A630: 00 A0 00 00 00 00 0E 08 1A 20 62 1D 20 12 A0 86  // ......... b. ...
    A640: 01 01 33 30 00 00 00 00 00 00 22 CC 1C 00 08 39  // ..30......"....9
    A650: 37 2B 90 57 0B 10 21 48 D3 06 00 44 86 00 62 0A  // 7+.W..!H...D..b.
    A660: 14 20 6A 89 00 A0 00 00 00 00 0F 09 1D 23 6D 1F  // . j..........#m.
    A670: 22 13 74 B7 01 01 33 30 00 00 00 00 00 00 22 CC  // ".t...30......".
    A680: 1C 00 29 41 48 31 A0 57 0C 11 25 C9 B3 07 00 46  // ..)AH1.W..%....F
    A690: A6 00 6A 0C 14 20 6A 89 00 A0 00 00 00 00 11 0A  // ..j.. j.........
    A6A0: 21 28 7B 22 26 14 48 E8 01 01 33 30 00 00 00 00  // !({"&.H...30....
    A6B0: 00 00 22 CC 1C 00 4A 49 49 37 B0 57 0C 12 29 4A  // .."...JII7.W..)J
    A6C0: 94 08 00 46 A7 00 72 0E 14 20 7A 89 00 A0 00 00  // ...F..r.. z.....
    A6D0: 00 00 13 0B 25 2D 89 25 2A 14 1C 19 02 01 33 30  // ....%-.%*.....30
    A6E0: 00 00 00 00 00 00 22 CC 1C 00 8C 51 5A 3D C0 57  // ......"....QZ=.W
    A6F0: 0D 13 2D CB 74 09 00 48 C7 00 7A 00 14 20 7A 89  // ..-.t..H..z.. z.
    A700: 00 A0 02 00 00 00 15 0D 29 31 97 28 2E 15 F0 49  // ........)1.(...I
    A710: 02 01 55 50 00 00 00 00 00 00 22 CC 1C 00 AD 59  // ..UP......"....Y
    A720: 5B 41 C0 57 0E 14 B0 0B 45 0A 00 68 C7 00 03 01  // [A.W....E..h....
    A730: 14 20 FA 89 00 A0 03 00 00 00 17 0E 2B 34 A4 2A  // . ..........+4.*
    A740: 31 16 C4 7A 02 01 55 50 00 00 00 00 00 00 22 CC  // 1..z..UP......".
    A750: 1C 00 CE 61 6C 47 D0 57 0F 15 B4 8C 25 0B 00 6A  // ...alG.W....%..j
    A760: E7 00 0B 03 14 20 FA 89 00 A0 03 00 00 00 19 0F  // ..... ..........
    A770: 2F 39 B2 2D 35 17 98 AB 02 01 77 70 00 00 00 00  // /9.-5.....wp....
    A780: 00 00 22 CC 1C 00 10 6A 6D 4D D0 57 10 16 B9 0D  // .."....jmM.W....
    A790: 06 0C 00 6A E7 00 14 05 14 20 FA 89 00 A0 03 00  // ...j..... ......
    A7A0: 00 00 1B 11 33 3D C0 30 3A 17 40 0D 03 01 77 70  // ....3=.0:.@...wp
    A7B0: 00 00 00 00 00 00 22 CC 1C 00 31 F6 7E 57 F0 57  // ......"...1.~W.W
    A7C0: 11 18 3F CF B6 0D 00 6C 07 01 24 08 14 20 FA 89  // ..?....l..$.. ..
    A7D0: 00 A0 03 00 00 00 1E 12 3A 46 DB 35 40 19 20 4E  // ........:F.5@. N
    A7E0: 00 02 99 90 00 00 00 00 00 00 22 AA 1C 00 60 88  // .........."...`.
    A7F0: 21 07 C0 54 0B 07 8F 82 50 01 00 42 61 00 15 00  // !..T....P..Ba...
    A800: 14 20 1A 89 40 A1 00 00 00 00 03 01 05 07 15 0A  // . ..@...........
    A810: 10 0C 40 9C 00 02 99 90 00 00 00 00 00 00 22 AA  // ..@...........".
    A820: 1C 00 60 94 22 0F D0 54 0C 08 15 44 B1 02 00 42  // ..`."..T...D...B
    A830: 61 00 1D 03 14 20 1A 89 80 A2 00 00 00 00 06 01  // a.... ..........
    A840: 0A 0F 2B 0E 16 0D 80 38 01 02 99 90 00 00 00 00  // ..+....8........
    A850: 00 00 22 AA 1C 00 A5 AC 35 1F 10 55 0E 0C 21 C7  // ..".....5..U..!.
    A860: 72 05 00 44 82 00 3D 09 14 20 2A 89 00 A5 00 00  // r..D..=.. *.....
    A870: 00 00 0C 06 14 1A 57 18 22 10 A0 86 01 02 77 70  // ......W.".....wp
    A880: 00 00 00 00 00 00 22 AA 1C 00 29 39 37 27 50 55  // ......"...)97'PU
    A890: 0D 0F A6 88 D3 06 00 64 82 00 54 0C 14 20 AA 89  // .......d..T.. ..
    A8A0: 40 A6 00 00 00 00 0F 0A 19 1E 6D 1E 27 12 48 E8  // @.........m.'.H.
    A8B0: 01 02 77 70 00 00 00 00 00 00 22 AA 1C 00 AD 49  // ..wp......"....I
    A8C0: 49 32 70 55 0E 12 AE 8A 94 08 00 66 A3 00 64 00  // I2pU.......f..d.
    A8D0: 14 20 BA 89 00 A8 02 00 00 00 13 0E 20 25 89 24  // . .......... %.$
    A8E0: 2F 13 1C 19 02 02 77 70 00 00 00 00 00 00 22 AA  // /.....wp......".
    A8F0: 1C 00 EF 51 5A 37 90 55 0F 14 B2 0B 75 09 00 68  // ...QZ7.U....u..h
    A900: C4 00 74 02 14 20 CA 89 C0 A8 02 00 00 00 15 10  // ..t.. ..........
    A910: 23 28 97 28 33 15 A4 2C 02 02 77 70 00 00 00 00  // #(.(3..,..wp....
    A920: 00 00 22 AA 1C 00 10 D6 5A 39 90 55 0F 14 34 4C  // ..".....Z9.U..4L
    A930: C5 09 00 68 C4 00 74 03 14 20 CA 89 00 A9 02 00  // ...h..t.. ......
    A940: 00 00 16 11 24 29 9C 29 35 15 F0 49 02 02 77 70  // ....$).)5..I..wp
    A950: 00 00 00 00 00 00 22 AA 1C 00 31 5A 5B 3C A0 55  // ......"...1Z[<.U
    A960: 0F 15 B6 8C 45 0A 00 68 C4 00 7C 04 14 20 CA 89  // ....E..h..|.. ..
    A970: 80 A9 02 00 00 00 17 12 26 2B A4 2B 37 15 C4 7A  // ........&+.+7..z
    A980: 02 02 77 70 00 00 00 00 00 00 22 AA 1C 00 73 62  // ..wp......"...sb
    A990: 6C 41 B0 55 10 16 BA 0D 26 0B 00 6A E6 00 04 06  // lA.U....&..j....
    A9A0: 14 20 EA 89 40 AA 03 00 00 00 19 14 29 2E B2 2E  // . ..@.......)...
    A9B0: 3B 16 98 AB 02 02 77 70 00 00 00 00 00 00 22 AA  // ;.....wp......".
    A9C0: 1C 00 B5 6A 6D 46 C0 55 10 17 BE 8E 06 0C 00 6A  // ...jmF.U.......j
    A9D0: E6 00 0C 08 14 20 EA 89 00 AB 03 00 00 00 1B 16  // ..... ..........
    A9E0: 2C 31 C0 31 3F 17 6C DC 02 02 99 90 00 00 00 00  // ,1.1?.l.........
    A9F0: 00 00 22 AA 1C 00 D6 72 7E 4B C0 55 12 18 C3 0F  // .."....r~K.U....
    AA00: E7 0C 00 6B 06 01 15 0A 14 20 EA 89 C0 AB 03 00  // ...k..... ......
    AA10: 00 00 1D 17 2F 35 CE 34 44 18 40 0D 03 02 99 90  // ..../5.4D.@.....
    AA20: 00 00 00 00 00 00 22 AA 1C 00 F7 F6 7E 4F D0 55  // ......".....~O.U
    AA30: 13 19 C6 50 B7 0D 00 6C 06 01 1D 0C 14 20 EA 89  // ...P...l..... ..
    AA40: 80 AC 03 00 00 00 1E 18 32 38 DB 36 47 19 40 9C  // ........28.6G.@.
    AA50: 00 03 55 50 00 00 00 00 00 00 22 DD 1C 00 84 94  // ..UP......".....
    AA60: 12 11 20 55 0B 0A 14 44 B1 02 00 20 41 00 33 04  // .. U...D... A.3.
    AA70: 14 20 9A 88 00 A0 00 00 71 24 06 05 0C 0D 2B 11  // . ......q$....+.
    AA80: 15 0F 80 38 01 03 77 70 00 00 00 00 00 00 22 DD  // ...8..wp......".
    AA90: 1C 00 E7 AC 35 22 40 55 0D 0D 20 C7 72 05 00 24  // ....5"@U.. .r..$
    AAA0: 81 00 4C 09 14 20 9A 88 00 A0 00 00 71 24 0C 08  // ..L.. ......q$..
    AAB0: 17 1B 57 1A 21 11 90 5F 01 03 77 70 00 00 00 00  // ..W.!.._..wp....
    AAC0: 00 00 22 DD 1C 00 29 31 46 26 50 55 0E 0E A2 07  // .."...)1F&PU....
    AAD0: 23 06 00 26 A2 00 54 0A 14 20 AA 88 00 A0 00 00  // #..&..T.. ......
    AAE0: 71 24 0D 0A 1A 1D 62 1C 23 12 A0 86 01 03 77 70  // q$....b.#.....wp
    AAF0: 00 00 00 00 00 00 22 DD 1C 00 29 B5 46 29 60 55  // ......"...).F)`U
    AB00: 0E 0F 24 48 D3 06 00 26 A2 00 5C 0B 14 20 AA 88  // ..$H...&..\.. ..
    AB10: 00 A0 00 00 71 24 0E 0A 1C 20 6D 1E 25 13 74 B7  // ....q$... m.%.t.
    AB20: 01 03 99 90 00 00 00 00 00 00 22 33 9D 00 6B BD  // .........."3..k.
    AB30: 57 2F 50 55 10 0F 29 C9 B3 07 00 48 C4 00 5D 0D  // W/PU..)....H..].
    AB40: 14 20 4A 89 00 A0 00 00 71 24 10 0C 20 24 7B 20  // . J.....q$.. ${ 
    AB50: 2A 13 48 E8 01 03 99 90 00 00 00 00 00 00 22 33  // *.H..........."3
    AB60: 9D 00 8C C5 58 34 50 55 11 0F 2D 4A 94 08 00 48  // ....X4PU..-J...H
    AB70: C4 00 5D 0F 14 20 4A 89 00 A0 00 00 71 24 12 0D  // ..].. J.....q$..
    AB80: 23 28 89 22 2E 14 1C 19 02 03 99 90 00 00 00 00  // #(."............
    AB90: 00 00 22 33 9D 00 AD CD 69 3A 70 55 11 11 31 CB  // .."3....i:pU..1.
    ABA0: 74 09 00 4A E4 00 6D 01 14 20 4A 89 00 A0 02 00  // t..J..m.. J.....
    ABB0: 71 24 14 0E 27 2D 97 26 32 15 F0 49 02 03 99 90  // q$..'-.&2..I....
    ABC0: 00 00 00 00 00 00 22 33 9D 00 CE 51 6A 3E 80 55  // ......"3...Qj>.U
    ABD0: 12 12 B4 0B 45 0A 00 4A E4 00 75 03 14 20 4A 89  // ....E..J..u.. J.
    ABE0: 00 A0 02 00 71 24 15 0F 2A 30 A4 28 35 16 C4 7A  // ....q$..*0.(5..z
    ABF0: 02 03 99 90 00 00 00 00 00 00 22 44 9D 00 10 5A  // .........."D...Z
    AC00: 7B 44 80 55 13 12 B8 8C 25 0B 00 4C 04 01 75 05  // {D.U....%..L..u.
    AC10: 14 20 4A 89 00 A0 02 00 71 24 17 11 2E 34 B2 2A  // . J.....q$...4.*
    AC20: 39 16 98 AB 02 03 99 90 00 00 00 00 00 00 22 55  // 9............."U
    AC30: 9D 00 31 62 7C 49 90 55 13 13 BC 0D 06 0C 00 4C  // ..1b|I.U.......L
    AC40: 04 01 7D 07 14 20 4A 89 00 A0 02 00 71 24 19 12  // ..}.. J.....q$..
    AC50: 31 38 C0 2D 3D 17 40 0D 03 03 BB B0 00 00 00 00  // 18.-=.@.........
    AC60: 00 00 22 88 9D 00 73 EE 8D 53 A0 55 15 17 43 CF  // .."...s..S.U..C.
    AC70: B6 0D 00 4E 24 01 0E 0A 14 20 4A 89 00 A0 03 00  // ...N$.... J.....
    AC80: 71 24 1C 14 38 40 DB 32 44 18 E8 6E 03 03 BB B0  // q$..8@.2D..n....
    AC90: 00 00 00 00 00 00 33 BB 9D 00 D6 FE AF 5E C0 55  // ......3......^.U
    ACA0: 17 17 4B D1 77 0F 00 52 64 01 1E 0E 14 20 4A 89  // ..K.w..Rd.... J.
    ACB0: 00 A0 03 00 71 24 20 17 3F 48 F7 38 4C 1A 00 00  // ....q$ .?H.8L...
    ACC0: 00 00 06 00 08 00 0E 00 44 FF FF 00 FF FF FF 00  // ........D.......
    ACD0: 1F 00 00 00 FF FF FF 01 1F 00 00 00 FF FF FF 02  // ................
    ACE0: 1F 00 00 00 FF FF FF 03 1F 00 00 00 FF FF FF 04  // ................
    ACF0: 00 00 00 00 FF FF FF 05 00 02 00 01 FF FF FF 06  // ................
    AD00: 00 04 00 02 FF FF FF 07 00 06 00 03 FF FF FF 08  // ................
    AD10: 1F 00 00 00 FF FF FF 09 1F 00 00 00 FF FF FF 0A  // ................
    AD20: 1F 00 00 00 FF FF FF 0B 1F 00 00 00 00 00 00 00  // ................
    AD30: E1 B4 88 F6 9A 00 A5 3F 21 00 7D 06 D1 00 13 F2  // .......?!.}.....
    AD40: D2 00 88 F6 9A 00 66 3F 05 00 F4 BB 08 00 A6 90  // ......f?........
    AD50: EE 00 4E 1E EF 02 D1 00 D0 D2 D3 00 AC BF 08 00  // ..N.............
    AD60: 81 56 9F 00 F4 9B 09 00 16 91 BD 00 88 F6 9A 00  // .V..............
    AD70: E5 3D 28 00 E1 B1 11 E6 B3 00 74 3F 05 00 FD 02  // .=(.......t?....
    AD80: CA 00 81 D6 D3 00 BC AB 21 00 88 76 97 00 E6 9B  // ........!..v....
    AD90: 09 00 A6 90 F5 00 4B 1E 5F 03 D1 00 50 D6 9B 00  // ......K._...P...
    ADA0: 88 F6 D2 00 74 3F 05 00 66 1F 68 00 A6 B0 BC 00  // ....t?..f.h.....
    ADB0: 81 76 B3 00 74 3F 05 00 24 00 30 00 99 0A 04 74  // .v..t?..$.0....t
    ADC0: 0A 04 75 0A 04 02 00 44 04 00 44 05 00 44 09 00  // ..u....D..D..D..
    ADD0: 44 0B 00 44 0C 00 44 0D 00 44 0F 00 44 FF FF 00  // D..D..D..D..D...
    ADE0: FF FF FF 00 00 E0 05 70 00 00 00 00 66 66 00 00  // .......p....ff..
    ADF0: 20 3C 00 00 04 06 00 00 23 00 00 00 00 00 00 00  //  <......#.......
    AE00: 85 08 00 00 00 00 1E 01 30 00 00 00 84 51 86 53  // ........0....Q.S
    AE10: 00 00 00 00 0C 01 03 06 FC CA 01 00 80 38 01 00  // .............8..
    AE20: 38 00 06 0A 6A 24 09 00 80 1A 06 00 E8 03 00 00  // 8...j$..........
    AE30: 0C 01 18 08 20 03 00 00 B0 04 00 00 38 C1 01 00  // .... .......8...
    AE40: 38 C1 01 00 00 00 00 00 00 00 00 00 00 00 00 00  // 8...............
    AE50: 34 C4 01 00 43 01 00 00 00 00 00 00 00 00 00 00  // 4...C...........
    AE60: C0 FF 08 0F 08 31 AC 10 00 00 00 00 00 00 01 00  // .....1..........
    AE70: 00 00 00 00 00 00 00 00 4B 00 00 00 00 00 00 00  // ........K.......
    AE80: 2B 00 00 00 00 00 00 00 10 00 00 00 00 00 00 00  // +...............
    AE90: 9B 02 00 00 03 00 00 00 B8 01 00 00 76 02 00 00  // ............v...
    AEA0: 2A 03 00 00 84 03 00 00 FC 03 00 00 56 04 00 00  // *...........V...
    AEB0: BA 04 00 00 14 05 00 00 00 35 0C 00 00 35 0C 00  // .........5...5..
    AEC0: 98 E0 0E 00 90 05 10 00 38 67 10 00 E0 C8 10 00  // ........8g......
    AED0: 88 2A 11 00 30 8C 11 00 A7 00 00 00 A2 04 00 00  // .*..0...........
    AEE0: BE 01 00 00 1B 00 00 00 00 00 0C 05 FE FF B5 9C  // ................
    AEF0: 05 00 CE FF FF FF 00 00 00 00 F3 0D 03 00 80 60  // ...............`
    AF00: FE FF FD F8 FF FF 0A 03 CD FF FF FF 00 00 00 00  // ................
    AF10: 8A 00 F1 FF FF FF 5C 12 00 01 00 01 00 01 00 00  // ......\.........
    AF20: 1C 00 03 01 01 07 0C 00 06 00 00 00 00 00 00 00  // ................
    AF30: 04 07 0C 00 0E 00 00 00 00 00 00 00 28 00 03 01  // ............(...
    AF40: FF FF FF 00 7D 00 B8 0B 01 00 00 00 FF FF FF 00  // ....}...........
    AF50: 7D 00 4E 0C 02 00 00 00 FF FF FF 00 7C 01 45 0C  // }.N.........|.E.
    AF60: 07 12 00 00 64 00 02 03 14 00 00 00 42 2D 00 00  // ....d.......B-..
    AF70: 70 06 02 06 00 00 00 00 1E 21 52 00 4C 00 03 FF  // p........!R.L...
    AF80: FF 00 1E 22 55 00 4C 00 09 FF FF 00 20 21 58 00  // ..."U.L..... !X.
    AF90: 4C 00 0A FF FF 00 20 22 5B 00 4C 00 0B FF FF 00  // L..... "[.L.....
    AFA0: 21 21 5E 00 4C 00 0C FF FF 00 21 22 61 00 4C 00  // !!^.L.....!"a.L.
    AFB0: 0D FF FF 00 FF FF 14 04 FF 15 04 FF 16 04 FF 17  // ................
    AFC0: 04 FF 18 04 FF 19 04 FF 18 00 02 01 02 00 08 00  // ................
    AFD0: 80 00 00 02 00 04 00 08 40 00 01 00 10 00 FF FF  // ........@.......
    AFE0: 38 00 02 01 04 4A 00 00 7C 92 00 00 01 04 1E 00  // 8....J..|.......
    AFF0: 3C 00 00 00 F8 24 01 00 01 03 1E 00 3C 00 1E 00  // <....$......<...
    B000: F0 49 02 00 01 02 1E 00 3C 00 1E 00 E0 93 04 00  // .I......<.......
    B010: 01 01 1E 00 00 00 1E 00 55 00 01 01 00 00 00 00  // ........U.......
    B020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B040: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B050: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    B060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 7E 00  // ..............~.
    B070: 01 02 00 08 02 01 02 00 52 47 52 02 02 65 02 07  // ........RGR..e..
    B080: 52 0D 55 00 02 52 0D 52 23 2C 25 02 01 3D 25 02  // R.U..R.R#,%..=%.
    B090: 06 45 17 00 51 02 52 3D 02 05 02 00 00 08 09 52  // .E..Q.R=.......R
    B0A0: 20 52 39 66 04 02 8C 02 2E 00 02 0D 02 01 00 52  //  R9f...........R
    B0B0: 43 02 05 02 04 00 B6 03 52 43 02 F9 02 01 52 05  // C.......RC....R.
    B0C0: 02 01 02 00 0E E5 02 08 52 0A 02 05 02 02 00 00  // ........R.......
    B0D0: 00 52 43 02 05 02 30 75 00 40 52 0B 02 01 02 01  // .RC...0u.@R.....
    B0E0: 0E E5 02 08 52 0B 0D 65 D0 05 02 5B 57 00 01 02  // ....R..e...[W...
    B0F0: 00 00 37 00 00 52 14 02 08 00 0D 1A 32 08 00 0B  // ..7..R......2...
    B100: 1A 02 88 00 0E 1A 32 88 00 0C 1A 03 00 46 04 1A  // ......2......F..
    B110: 09 05 46 FF FF FF 02 56 00 40 03 20 40 01 1A 09  // ..F....V.@. @...
    B120: 25 40 03 75 02 46 40 03 18 40 5C 1B 2D 02 46 40  // %@.u.F@..@\.-.F@
    B130: 27 00 46 06 1A 2D 08 40 5C 1B 02 0A 01 41 02 8A  // '.F..-.@\....A..
    B140: 01 40 5B 00 B7 00 01 01 04 00 37 00 00 01 05 0E  // .@[.......7.....
    B150: 00 02 00 40 01 37 03 00 5C 05 02 00 FC 7F FF FF  // ...@.7..\.......
    B160: 02 00 00 00 5C 05 10 00 FF FF 9D FF 00 09 41 00  // ....\.........A.
    B170: 5C 05 21 00 7F FF FF FF 80 00 00 00 5C 05 40 00  // \.!.........\.@.
    B180: BE 3F FF FF 40 40 01 00 37 00 00 01 05 0E 00 70  // .?..@@..7......p
    B190: 00 01 10 37 03 00 01 05 70 00 00 40 00 01 5C 05  // ...7....p..@..\.
    B1A0: A0 00 0F FF FE DF 10 00 01 60 5C 05 A2 00 7F F3  // .........`\.....
    B1B0: 97 FF 86 04 88 5A 5C 05 A4 00 1B F0 FF FF 20 0D  // .....Z\....... .
    B1C0: 40 04 5C 05 B1 00 FF 2D FF FF 80 50 18 96 37 00  // @.\....-...P..7.
    B1D0: 00 54 00 06 00 01 25 C5 14 02 01 05 C2 14 7F 00  // .T....%.........
    B1E0: 00 00 01 05 E8 15 70 3D 29 0A 01 05 E9 15 9C A4  // ......p=).......
    B1F0: 0D 20 01 05 EA 15 20 95 87 00 5B 00 13 01 01 01  // . .... ...[.....
    B200: 04 00 37 00 00 03 01 00 00 54 20 24 15 01 25 00  // ..7......T $..%.
    B210: 08 0F 01 25 28 08 0F 5C 25 2B 08 F8 01 55 00 00  // ...%(..\%+...U..
    B220: 52 34 52 3E 03 24 40 0C 00 15 25 40 04 5C 62 01  // R4R>.$@...%@.\b.
    B230: 08 0F 40 01 04 D7 09 24 00 01 04 02 08 00 00 01  // ..@....$........
    B240: 04 1C 08 20 00 66 18 2D 0C 42 10 00 56 00 40 03  // ... .f.-.B..V.@.
    B250: 0C 40 00 00 3E 0D 40 00 00 44 73 00 01 02 00 00  // .@..>.@..Ds.....
    B260: 40 01 04 01 00 02 00 2D 0D 42 06 00 43 53 00 0D  // @......-.B..CS..
    B270: 25 68 15 03 54 00 34 FE 01 05 35 FE 03 0A 03 0A  // %h..T.4...5.....
    B280: 01 05 35 FE 04 0A 04 0A 01 00 03 0A 69 15 01 00  // ..5.........i...
    B290: 04 0A 69 15 5C 25 D5 09 FB 01 0D 05 D5 09 00 08  // ..i.\%..........
    B2A0: 00 40 54 00 34 FE 01 05 35 FE 03 0A 0C 00 01 05  // .@T.4...5.......
    B2B0: 35 FE 04 0A 0C 00 52 0F 66 1C 2D 0C 42 0A 00 55  // 5.....R.f.-.B..U
    B2C0: 00 00 52 12 66 1C 2D 0C 42 0C 00 02 0D 00 01 00  // ..R.f.-.B.......
    B2D0: 52 1F 52 1E 02 05 00 30 75 00 00 52 10 4C E5 00  // R.R....0u..R.L..
    B2E0: 20 44 ED 00 0D 25 80 0A 18 02 25 00 FF 52 40 4A  //  D...%....%..R@J
    B2F0: 65 80 0A 0F 49 0E 01 52 03 03 20 00 80 0A 09 25  // e...I..R.. ....%
    B300: 00 FC 52 1E 5C 22 80 0A 03 00 52 07 52 48 5B 00  // ..R.\"....R.RH[.
    B310: FF 00 02 01 00 04 37 00 00 66 0C 03 0C 41 00 00  // ......7..f...A..
    B320: 2D 0A 41 42 2D 0D 42 04 00 3D 24 00 03 00 44 30  // -.AB-.B..=$...D0
    B330: 00 2D 0D 42 04 00 3E 0A 42 41 44 FB 00 43 19 00  // .-.B..>.BAD..C..
    B340: 56 00 43 03 A4 41 02 00 03 F2 41 41 03 0C 41 00  // V.C..A....AA..A.
    B350: 00 3E 0D 41 00 00 44 FB 00 3E 0D 41 61 48 49 6B  // .>.A..D..>.AaHIk
    B360: 00 3E E5 41 10 46 5F 00 1B 3D 41 01 43 6B 00 09  // .>.A.F_..=A.Ck..
    B370: E5 41 03 15 3D 41 02 2D E5 41 0C 03 3A 43 41 54  // .A..=A.-.A..:CAT
    B380: 00 00 00 33 0D 41 01 00 01 0A 00 00 41 0D 02 01  // ...3.A......A...
    B390: 00 44 2D 0D 41 02 00 01 0A 00 00 41 03 32 43 41  // .D-.A......A.2CA
    B3A0: 4B E5 00 01 49 D7 00 07 02 01 00 45 2D 0D 41 01  // K...I......E-.A.
    B3B0: 00 01 0A 00 00 41 4A 02 01 00 44 44 B9 00 03 29  // .....AJ...DD...)
    B3C0: 43 00 0E A2 00 44 43 C1 00 03 29 43 00 08 A2 00  // C....DC...)C....
    B3D0: 45 33 0D 41 03 00 01 0A 00 00 41 03 3A 43 41 07  // E3.A......A.:CA.
    B3E0: 02 01 00 45 43 FA 00 0D 02 01 00 44 33 0D 41 01  // ...EC......D3.A.
    B3F0: 00 01 0A 00 00 41 3D A5 00 01 44 F5 00 07 02 01  // .....A=...D.....
    B400: 00 45 43 FA 00 0D 02 01 00 44 5B 55 20 00 5B 00  // .EC......D[U .[.
    B410: AC 01 01 02 14 00 37 00 00 4B E5 00 08 44 23 00  // ......7..K...D#.
    B420: 01 05 82 00 70 03 00 80 3C 05 83 00 00 00 02 00  // ....p...<.......
    B430: 46 68 01 03 01 04 00 02 E5 00 01 52 3C 01 05 82  // Fh.........R<...
    B440: 00 40 01 50 C0 0D 25 83 00 08 66 FF 2D 0D 42 6C  // .@.P..%...f.-.Bl
    B450: 01 01 05 82 00 40 03 50 C0 4A 25 83 00 01 44 56  // .....@.P.J%...DV
    B460: 00 2D 0D 42 20 00 03 04 00 08 00 03 04 01 0C 00  // .-.B ...........
    B470: 03 04 02 10 00 03 04 03 14 00 01 04 82 00 04 00  // ................
    B480: 4A 05 83 00 80 00 00 00 44 97 00 2D 05 00 10 00  // J.......D..-....
    B490: 00 00 2D 05 01 10 00 00 00 2D 05 02 10 00 00 00  // ..-......-......
    B4A0: 2D 05 03 10 00 00 00 4A 25 83 00 02 44 B8 00 01  // -......J%...D...
    B4B0: 04 82 00 1C 00 0D 25 83 00 10 01 04 82 00 04 00  // ......%.........
    B4C0: 4A 25 83 00 01 44 AA 00 01 04 82 00 18 00 01 21  // J%...D.........!
    B4D0: 83 00 02 01 02 82 00 00 01 01 83 00 01 56 00 40  // .............V.@
    B4E0: 03 29 40 02 15 25 40 06 01 04 82 00 00 00 5C 8A  // .)@..%@.......\.
    B4F0: 83 00 3F 00 40 01 02 82 00 01 01 99 83 00 04 01  // ..?.@...........
    B500: 02 82 00 03 01 99 83 00 05 01 04 82 00 1C 00 0D  // ................
    B510: A5 83 00 10 01 02 82 00 01 0D E5 83 00 04 01 02  // ................
    B520: 82 00 02 01 01 83 00 03 01 02 82 00 01 01 09 83  // ................
    B530: 00 05 0D E5 83 00 02 01 04 82 00 1C 00 0D 25 83  // ..............%.
    B540: 00 01 01 04 82 00 04 00 4A 25 83 00 02 44 32 01  // ........J%...D2.
    B550: 01 05 82 00 40 01 50 C0 07 25 83 00 F7 02 02 00  // ....@.P..%......
    B560: 04 4C E5 04 08 49 68 01 52 2F 02 01 01 00 02 02  // .L...Ih.R/......
    B570: 00 04 02 E5 00 02 52 3F 5B 7A 40 00 68 02 50 C0  // ......R?[z@.h.P.
    B580: 78 02 50 C0 8C 02 50 C0 90 02 50 C0 94 02 50 C0  // x.P...P...P...P.
    B590: 98 02 50 C0 AC 02 50 C0 B0 02 50 C0 E4 02 50 C0  // ..P...P...P...P.
    B5A0: F4 02 50 C0 08 03 50 C0 0C 03 50 C0 10 03 50 C0  // ..P...P...P...P.
    B5B0: 14 03 50 C0 28 03 50 C0 2C 03 50 C0 22 01 02 01  // ..P.(.P.,.P."...
    B5C0: 0C 04 37 00 00 5C 25 2B 08 F8 01 54 20 24 15 07  // ..7..\%+...T $..
    B5D0: 25 EB 09 FE 4B E5 00 40 44 A1 00 01 05 91 0A 0D  // %...K..@D.......
    B5E0: 00 00 00 03 B0 01 92 0A 52 3B 03 01 00 00 56 38  // ........R;....V8
    B5F0: 00 3E 01 00 01 45 62 00 3E 01 00 02 45 53 00 01  // .>...Eb.>...ES..
    B600: 05 91 0A 0D 00 00 00 07 A5 92 0A F7 43 A1 00 01  // ............C...
    B610: 05 91 0A 0D 00 00 00 54 38 92 0A 43 A1 00 03 00  // .......T8..C....
    B620: 02 96 0A 03 F8 01 99 0A 01 05 91 0A 00 00 00 00  // ................
    B630: 03 08 01 92 0A 01 05 91 0A 0D 00 00 00 5C 8D 92  // .............\..
    B640: 0A 00 00 80 00 07 E5 99 0A BF 07 65 96 0A F0 01  // ...........e....
    B650: 05 91 0A 00 00 00 00 01 0D 92 0A 77 77 02 01 01  // ...........ww...
    B660: 00 52 10 02 01 01 00 02 E5 01 01 52 3F 52 30 02  // .R.........R?R0.
    B670: E5 01 02 02 01 02 00 52 3F 07 25 F3 09 FC 55 00  // .......R?.%...U.
    B680: 01 4A 25 80 0A 08 49 D1 00 02 25 01 07 52 40 4B  // .J%...I...%..R@K
    B690: E5 00 40 44 12 01 01 05 91 0A 0D 00 00 00 4C A5  // ..@D..........L.
    B6A0: 01 80 49 ED 00 54 38 92 0A 01 B2 92 0A 01 52 3B  // ..I..T8.......R;
    B6B0: 3E 01 00 01 46 12 01 01 FA 99 0A 01 01 6A 96 0A  // >...F........j..
    B6C0: 02 01 05 91 0A 00 00 00 00 01 0A 92 0A 01 0D 25  // ...............%
    B6D0: EB 09 01 07 25 2B 08 F8 0D 25 24 15 03 5B F8 04  // ....%+...%$..[..
    B6E0: 01 07 08 08 37 00 00 3D 25 01 FF 44 C2 04 3D 25  // ....7..=%..D..=%
    B6F0: 01 19 46 BE 04 3D 25 01 02 47 BE 04 3D 25 01 14  // ..F..=%..G..=%..
    B700: 45 C2 04 3D 05 00 00 00 00 00 44 68 02 4B E5 01  // E..=......Dh.K..
    B710: 02 49 61 00 02 A9 02 02 55 28 02 0E E5 01 80 3D  // .Ia.....U(.....=
    B720: 05 00 40 4B 4C 00 45 61 00 0D A5 C2 9D 40 03 21  // ..@KL.Ea.....@.!
    B730: 41 01 33 25 41 14 03 22 43 41 0D E2 C1 48 44 66  // A.3%A.."CA...HDf
    B740: FF 2D 0D 42 D8 04 03 39 40 01 09 0D 40 30 00 1B  // .-.B...9@...@0..
    B750: 0D 40 02 2D 0A 42 40 56 00 00 56 00 01 02 05 03  // .@.-.B@V..V.....
    B760: 40 01 00 00 02 65 01 01 20 05 00 0A 00 00 00 03  // @....e.. .......
    B770: 02 46 40 3D 05 00 80 8D 5B 00 47 AA 00 02 65 03  // .F@=....[.G...e.
    B780: 03 0E E5 01 08 55 28 01 4B E5 01 08 44 B5 00 1B  // .....U(.K...D...
    B790: 05 46 01 3E 05 46 A0 2F C5 01 48 CA 00 2C 65 01  // .F.>.F./..H..,e.
    B7A0: 01 15 05 46 01 43 B5 00 14 2D 01 05 3D 05 00 80  // ...F.C...-..=...
    B7B0: 8D 5B 00 47 E0 00 0E 25 03 02 15 05 46 02 03 05  // .[.G...%....F...
    B7C0: 01 00 00 01 00 4B E5 01 02 49 49 01 4B E5 01 80  // .....K...II.K...
    B7D0: 49 F5 00 27 04 46 00 00 3E 05 41 00 00 00 00 44  // I..'.F..>.A....D
    B7E0: 5B 01 03 04 40 00 00 03 02 00 41 27 02 40 41 03  // [...@.....A'.@A.
    B7F0: 02 40 00 3E 05 41 00 00 00 00 49 09 01 7C 05 00  // .@.>.A....I..|..
    B800: 00 00 01 00 7E 04 40 00 00 7C 04 40 00 00 7E 02  // ....~.@..|.@..~.
    B810: 40 00 03 02 01 40 3E 05 01 33 F3 00 00 48 49 01  // @....@>..3...HI.
    B820: 03 05 01 00 00 01 00 27 04 46 00 00 7C 02 01 41  // .......'.F..|..A
    B830: 7E 04 40 00 00 03 0A 00 40 27 04 46 00 00 03 8A  // ~.@.....@'.F....
    B840: 00 40 56 18 01 3D 05 00 C0 C6 2D 00 47 D4 01 03  // .@V..=....-.G...
    B850: 8D 01 08 00 43 D4 01 7C 02 40 00 7E 05 40 A0 86  // ....C..|.@.~.@..
    B860: 01 00 03 01 41 03 09 05 41 03 00 00 00 6F 02 40  // ....A...A....o.@
    B870: 41 7C 05 40 45 0C 00 00 7E 05 40 40 4B 4C 00 3E  // A|.@E...~.@@KL.>
    B880: 05 40 00 00 00 00 49 AF 01 03 25 40 01 7C 05 40  // .@....I...%@.|.@
    B890: 40 4B 4C 00 7E 05 40 45 0C 00 00 03 01 41 03 09  // @KL.~.@E.....A..
    B8A0: 05 41 03 00 00 00 75 02 40 41 1B 05 40 01 2D 02  // .A....u.@A..@.-.
    B8B0: 00 40 66 FF 2D 0D 42 CC 04 56 00 40 03 21 40 01  // .@f.-.B..V.@.!@.
    B8C0: 33 25 40 14 15 25 40 01 2D 0A 42 40 03 0C 48 00  // 3%@..%@.-.B@..H.
    B8D0: 00 4A 65 E2 48 10 44 63 03 03 39 41 01 09 0D 41  // .Je.H.Dc..9A...A
    B8E0: 30 00 1B 0D 41 04 3C 22 5E 49 41 49 47 02 3C 21  // 0...A.<"^IAIG.<!
    B8F0: 23 49 03 49 47 02 3C 29 25 49 03 49 47 02 03 20  // #I.IG.<)%I.IG.. 
    B900: 41 5F 49 09 25 41 E0 3E 29 41 01 49 47 02 4B E5  // A_I.%A.>)A.IG.K.
    B910: 01 40 49 5B 03 3C 02 20 49 00 49 47 02 3C 0A 22  // .@I[.<. I.IG.<."
    B920: 49 01 44 4B 02 0E E5 01 01 3A 00 00 4B E5 01 01  // I.DK.....:..K...
    B930: 44 96 04 4B E5 01 02 49 68 02 3D 25 02 05 46 68  // D..K...Ih.=%..Fh
    B940: 02 55 28 02 52 23 56 00 40 03 21 40 01 33 25 40  // .U(.R#V.@.!@.3%@
    B950: 14 03 0A 48 40 07 25 60 01 FE 66 FF 2D 0D 42 CC  // ...H@.%`..f.-.B.
    B960: 04 56 00 40 03 21 40 01 33 25 40 14 15 25 40 01  // .V.@.!@.3%@..%@.
    B970: 2D 0A 42 40 03 0C 48 00 00 3C E5 23 49 C0 44 B0  // -.B@..H..<.#I.D.
    B980: 02 07 65 23 49 FE 54 00 21 49 54 00 22 49 07 65  // ..e#I.T.!IT."I.e
    B990: E2 48 EF 4A 65 E2 48 20 49 B5 02 07 65 F2 48 EF  // .H.Je.H I...e.H.
    B9A0: 4A 65 F2 48 20 49 C2 02 3C E5 23 49 C0 49 02 03  // Je.H I..<.#I.I..
    B9B0: 07 25 25 49 EF 07 65 23 49 FE 54 00 21 49 54 00  // .%%I..e#I.T.!IT.
    B9C0: 22 49 51 01 01 05 29 49 00 00 60 0F 51 01 01 05  // "IQ...)I..`.Q...
    B9D0: 29 49 00 00 40 0F 51 01 54 38 23 49 54 00 29 49  // )I..@.Q.T8#IT.)I
    B9E0: 3D 05 00 00 00 00 00 49 63 03 4A A5 C1 48 80 44  // =......Ic.J..H.D
    B9F0: 37 03 56 00 41 5C 25 E0 48 F8 06 51 02 4A 65 E0  // 7.V.A\%.H..Q.Je.
    BA00: 48 01 44 1F 03 2D A5 41 01 2D 0D 48 10 00 3E A5  // H.D..-.A.-.H..>.
    BA10: 41 04 45 17 03 56 08 48 03 21 41 01 33 25 41 14  // A.E..V.H.!A.3%A.
    BA20: 03 22 43 41 07 E2 C1 48 45 4A E5 C1 48 3F 49 BE  // ."CA...HEJ..H?I.
    BA30: 04 07 A5 C2 9D BF 43 BE 04 01 02 20 49 00 43 44  // ......C.... I.CD
    BA40: 04 0D 25 5F 49 01 03 39 40 01 09 0D 40 30 00 1B  // ..%_I..9@...@0..
    BA50: 0D 40 04 01 22 5E 49 40 0D 65 5F 49 80 3E 25 40  // .@.."^I@.e_I.>%@
    BA60: 02 44 8A 03 03 65 40 04 5C 6A 5F 49 FB 40 66 FF  // .D...e@.\j_I.@f.
    BA70: 56 00 40 2D 0D 42 E8 04 03 21 40 03 09 0D 40 03  // V.@-.B...!@...@.
    BA80: 00 15 0D 40 02 2D 0A 42 40 01 0C 24 49 00 00 01  // ...@.-.B@..$I...
    BA90: E4 26 49 02 00 0D 25 26 49 02 01 21 23 49 03 01  // .&I...%&I..!#I..
    BAA0: A5 23 49 E8 01 02 20 49 00 54 00 21 49 01 02 22  // .#I... I.T.!I.."
    BAB0: 49 01 4B E5 01 08 44 E3 03 07 65 5F 49 FE 43 E8  // I.K...D...e_I.C.
    BAC0: 03 0D 65 5F 49 01 5C 29 5F 49 1F 01 01 8D 2B 49  // ..e_I.\)_I....+I
    BAD0: 20 03 01 29 25 49 03 07 65 5F 49 7F 5C 65 E2 48  //  ..)%I..e_I.\e.H
    BAE0: E3 04 4A 65 E2 48 20 49 04 04 0D 65 E2 48 10 4A  // ..Je.H I...e.H.J
    BAF0: 65 E2 48 20 44 11 04 4B E5 01 02 49 3B 04 5C 65  // e.H D..K...I;.\e
    BB00: F2 48 E3 04 4A 65 F2 48 20 49 26 04 0D 65 F2 48  // .H..Je.H I&..e.H
    BB10: 10 4A 65 F2 48 20 44 33 04 3C 8D 22 49 00 00 49  // .Je.H D3.<."I..I
    BB20: 67 04 3D A5 01 02 44 52 04 3D A5 01 03 49 59 04  // g.=...DR.=...IY.
    BB30: 4B E5 01 80 49 67 04 03 01 00 02 02 B1 02 01 52  // K...Ig.........R
    BB40: 41 02 02 02 00 0D 65 5F 49 40 4A 65 5F 49 20 44  // A.....e_I@Je_I D
    BB50: 6C 04 07 65 5F 49 BF 56 00 40 03 21 40 01 33 25  // l..e_I.V.@.!@.3%
    BB60: 40 14 03 0A 48 40 0D 25 60 01 01 51 01 4B E5 01  // @...H@.%`..Q.K..
    BB70: 02 49 BE 04 3A 00 00 3D 25 02 05 46 BE 04 02 25  // .I..:..=%..F...%
    BB80: 03 02 02 E1 03 02 02 61 03 01 02 B9 03 01 08 A5  // .......a........
    BB90: 03 04 0E B1 03 02 02 01 02 00 52 2E 3A 00 00 5B  // ..........R.:..[
    BBA0: 02 25 01 0B 43 96 04 7A 2C 00 00 00 A0 00 40 51  // .%..C..z,.....@Q
    BBB0: E0 51 80 52 20 53 40 42 0F 00 40 42 0F 00 40 42  // .Q.R S@B..@B..@B
    BBC0: 0F 00 40 42 0F 00 A1 83 64 00 24 83 32 00 A3 76  // ..@B....d.$.2..v
    BBD0: 19 00 A3 76 0C 00 87 01 02 01 00 00 37 00 00 3D  // ...v........7..=
    BBE0: 65 00 07 44 BC 00 56 00 40 20 25 00 03 03 0A 48  // e..D..V.@ %....H
    BBF0: 40 3D 65 00 01 44 BB 00 56 08 48 03 21 48 00 01  // @=e..D..V.H.!H..
    BC00: 0D FA 02 02 00 52 14 01 05 8D 1A 00 00 40 00 01  // .....R.......@..
    BC10: 25 BE 1B 02 01 A5 CC 1A C0 01 0D 91 1A 45 01 5C  // %............E.\
    BC20: 05 DA 1A F0 FF FF FF 02 00 00 00 07 25 03 1B FB  // ............%...
    BC30: 0D 25 7D 1A 01 01 05 34 1B 01 00 00 00 5C 05 36  // .%}....4.....\.6
    BC40: 1B EE FE 00 00 11 01 FF 7F 01 25 3A 1B 11 5C 05  // ..........%:..\.
    BC50: 32 1B F8 F8 F8 FF 00 00 00 00 01 0D 33 1B FF 7F  // 2...........3...
    BC60: 01 05 B3 1B 07 40 00 00 0D A5 B6 1B 01 01 05 31  // .....@.........1
    BC70: 1B 00 08 00 04 01 0D 86 1B 04 00 01 0D E7 1B 01  // ................
    BC80: 00 5C 05 00 1B FF FF FD FF 00 00 02 00 3A 00 00  // .\...........:..
    BC90: 5B 5B 5C 05 F6 02 FF 00 FE 9F 04 FC 00 20 01 05  // [[\.......... ..
    BCA0: F9 02 10 27 02 00 01 05 14 03 00 08 00 20 01 05  // ...'......... ..
    BCB0: 0C 03 00 90 00 10 01 25 09 01 01 01 05 3B 01 64  // .......%.....;.d
    BCC0: 02 12 00 01 05 30 01 A0 86 11 00 01 E5 09 17 64  // .....0.........d
    BCD0: 01 05 22 17 00 00 9B 02 01 05 06 17 21 84 20 00  // ..".........!. .
    BCE0: 01 8D E5 17 64 00 01 25 E4 17 01 01 05 31 01 3C  // ....d..%.....1.<
    BCF0: 00 01 08 5C 65 D4 00 FC 02 01 0D FC 00 00 01 01  // ...\e...........
    BD00: 05 2F 48 00 00 00 00 01 05 04 48 00 00 00 00 01  // ./H.......H.....
    BD10: 05 3A 48 0F 00 00 00 0D E5 CB 05 10 01 05 F8 16  // .:H.............
    BD20: 00 00 00 30 01 25 32 01 00 55 00 00 52 4E 02 25  // ...0.%2..U..RN.%
    BD30: 00 07 52 33 02 05 00 00 07 00 00 52 4D 2C 25 00  // ..R3.......RM,%.
    BD40: 01 3D 25 00 06 45 65 01 66 16 03 0C 41 04 00 4C  // .=%..Ee.f...A..L
    BD50: 0D 41 02 00 44 B7 00 0D A5 C9 05 04 5B 00 07 00  // .A..D.......[...
    BD60: 01 01 00 00 5B 00 8A 00 01 01 00 00 37 00 00 01  // ....[.......7...
    BD70: 05 03 2B 54 10 76 32 56 00 41 03 50 41 9F 03 56  // ..+T.v2V.A.PA..V
    BD80: 00 40 66 FF 2D 0D 42 4A 00 4C 65 41 10 44 46 00  // .@f.-.BJ.LeA.DF.
    BD90: 09 65 41 07 03 2A 40 41 15 0D 40 03 2D 0A 42 40  // .eA..*@A..@.-.B@
    BDA0: 01 04 02 08 00 00 01 04 03 2B 04 00 5B 7A 40 00  // .........+..[z@.
    BDB0: 23 10 54 76 45 10 76 32 32 10 54 76 54 10 76 32  // #.TvE.v22.TvT.v2
    BDC0: 03 21 54 76 05 41 76 32 13 20 54 76 15 40 76 32  // .!Tv.Av2. Tv.@v2
    BDD0: 32 10 45 76 54 10 67 32 32 10 54 76 54 10 76 32  // 2.EvT.g22.TvT.v2
    BDE0: 32 10 65 47 54 10 27 63 32 10 75 46 54 10 37 62  // 2.eGT.'c2.uFT.7b
    BDF0: 61 04 01 01 08 00 37 00 00 01 05 82 00 00 00 20  // a.....7........ 
    BE00: C0 07 A5 83 00 FC 01 05 82 00 2C 01 50 C0 37 05  // ..........,.P.7.
    BE10: 00 01 0D 2C 01 06 02 01 05 A4 01 09 00 40 00 01  // ...,.........@..
    BE20: 05 A0 01 03 00 00 00 01 0D B0 01 02 04 01 E5 98  // ................
    BE30: 01 00 4A 25 00 00 01 49 E6 00 5C 25 0C 00 80 64  // ..J%...I..\%...d
    BE40: 5C 25 10 00 80 64 5C 25 14 00 80 64 5C 25 18 00  // \%...d\%...d\%..
    BE50: 80 64 5C 25 1C 00 80 64 5C 25 24 00 80 18 5C 25  // .d\%...d\%$...\%
    BE60: 28 00 80 64 0D 25 2C 00 01 0D 25 20 00 01 0D 25  // (..d.%,...% ...%
    BE70: 00 00 01 01 05 D8 01 B8 29 E8 00 01 05 DC 01 B8  // ........).......
    BE80: 29 E8 00 01 05 E0 01 B8 29 E8 00 01 05 E4 01 B8  // ).......).......
    BE90: 29 E8 00 01 E5 14 02 64 01 05 74 01 00 00 24 00  // )......d..t...$.
    BEA0: 37 00 00 01 05 82 00 14 00 00 C0 0D 65 83 00 01  // 7...........e...
    BEB0: 51 FA 01 05 82 00 00 00 00 C0 0D 25 83 00 01 01  // Q..........%....
    BEC0: 05 82 00 70 01 50 C0 37 05 00 54 00 18 01 01 05  // ...p.P.7..T.....
    BED0: A8 01 20 40 00 00 01 E5 60 02 64 01 E5 DC 02 64  // .. @....`.d....d
    BEE0: 01 25 44 03 00 37 00 00 07 A5 97 01 F7 54 00 92  // .%D..7.......T..
    BEF0: 01 01 05 82 00 78 03 20 C0 01 0D 83 00 19 00 01  // .....x. ........
    BF00: 05 82 00 00 00 60 C0 5C 05 83 00 FD FF FF FF 02  // .....`.\........
    BF10: 00 00 00 01 05 82 00 10 00 00 C0 01 05 83 00 02  // ................
    BF20: 00 80 2A 01 05 82 00 70 03 00 80 3C 05 83 00 00  // ..*....p...<....
    BF30: 00 02 00 46 35 04 01 05 82 00 60 03 20 C0 37 05  // ...F5.....`. .7.
    BF40: 00 5C 05 60 03 10 01 18 F0 20 A4 62 00 5C 05 64  // .\.`..... .b.\.d
    BF50: 03 FF FF 00 FC 00 00 01 01 5C 05 6C 03 10 01 08  // .........\.l....
    BF60: F0 20 A4 62 00 5C 05 70 03 FF FF 00 FC 00 00 01  // . .b.\.p........
    BF70: 01 5C 05 50 03 87 00 7C 00 19 52 9D 7F 5C 05 54  // .\.P...|..R..\.T
    BF80: 03 07 0C 80 FF 38 20 01 00 5C 05 E4 01 BF FF FF  // .....8 ..\......
    BF90: DF BF FF 01 20 5C 05 84 00 FF FD FF FF FF 7D A0  // .... \........}.
    BFA0: 00 37 00 00 01 05 82 00 04 00 30 C0 37 05 00 01  // .7........0.7...
    BFB0: 05 04 00 02 00 91 06 01 05 0C 00 60 6A 00 08 01  // ...........`j...
    BFC0: 05 10 00 01 00 00 00 37 00 00 02 05 00 44 00 03  // .......7.....D..
    BFD0: 05 52 45 03 01 00 00 02 05 00 44 00 18 0C 52 45  // .RE.......D...RE
    BFE0: 01 05 82 00 04 00 30 C0 37 05 00 3E 0D 00 0A 00  // ......0.7..>....
    BFF0: 44 39 02 3D 0D 00 38 02 44 26 02 3D 0D 00 45 01  // D9.=..8.D&.=..E.
    C000: 44 26 02 01 05 1C 00 4D 00 00 AA 01 05 20 00 DA  // D&.....M..... ..
    C010: A7 8C 31 43 49 02 01 05 1C 00 4D 00 C0 AC 01 05  // ..1CI.....M.....
    C020: 20 00 EC A7 78 31 43 49 02 01 05 1C 00 4D 00 C0  //  ...x1CI.....M..
    C030: AC 01 05 20 00 EC A7 78 31 01 05 24 00 00 21 00  // ... ...x1..$..!.
    C040: 00 01 05 28 00 FF FF FF FF 01 05 64 00 96 43 81  // ...(.......d..C.
    C050: 01 01 05 68 00 87 25 09 40 01 05 6C 00 35 14 BF  // ...h..%.@..l.5..
    C060: 02 01 05 70 00 01 80 00 00 01 05 2C 00 00 21 00  // ...p.......,..!.
    C070: 00 01 05 30 00 FF FF FF FF 37 05 00 03 F8 00 80  // ...0.....7......
    C080: 00 09 E5 00 0C 4C E5 00 04 44 AF 02 4C E5 00 08  // .....L...D..L...
    C090: 49 BD 02 69 E5 00 04 03 0D 00 00 02 43 B6 02 69  // I..i........C..i
    C0A0: E5 00 08 56 08 00 5C 8A 10 00 0F F0 00 4C E5 00  // ...V..\......L..
    C0B0: 04 44 D2 02 0D 65 24 00 04 54 00 28 00 0D 25 24  // .D...e$..T.(..%$
    C0C0: 00 01 4C E5 00 08 44 E7 02 0D 65 2C 00 04 54 00  // ..L...D...e,..T.
    C0D0: 30 00 0D 25 2C 00 01 37 00 00 02 05 00 44 00 03  // 0..%,..7.....D..
    C0E0: 05 52 45 03 01 00 00 02 05 00 44 00 18 0C 52 45  // .RE.......D...RE
    C0F0: 01 05 82 00 04 00 30 C0 37 05 00 3E 0D 00 0A 00  // ......0.7..>....
    C100: 44 91 03 3D 0D 00 38 02 44 91 03 3D 0D 00 45 01  // D..=..8.D..=..E.
    C110: 44 91 03 03 F8 00 80 00 09 E5 00 0C 4C E5 00 04  // D...........L...
    C120: 44 44 03 4C E5 00 08 49 91 03 02 05 00 14 01 0B  // DD.L...I........
    C130: 06 43 4B 03 02 05 00 14 01 05 06 52 45 08 05 00  // .CK........RE...
    C140: 3F 00 00 00 01 05 82 00 04 00 30 C0 37 05 00 56  // ?.........0.7..V
    C150: 00 41 03 21 41 00 09 25 41 1F 4B 25 00 20 44 88  // .A.!A..%A.K%. D.
    C160: 03 03 A5 41 20 33 8A 41 41 56 08 41 15 1D 41 03  // ...A 3.AAV.A..A.
    C170: 31 02 20 00 41 43 91 03 15 05 41 13 2B 02 20 00  // 1. .AC....A.+. .
    C180: 41 37 00 00 03 05 00 24 00 30 C0 03 05 01 44 00  // A7.....$.0....D.
    C190: 30 C0 01 05 82 00 80 00 30 C0 03 38 40 83 00 4C  // 0.......0..8@..L
    C1A0: 25 40 04 49 11 04 01 02 82 00 00 4A 25 83 00 01  // %@.I.......J%...
    C1B0: 49 11 04 0D 65 83 00 04 66 FF 2D 0D 42 39 04 56  // I...e...f.-.B9.V
    C1C0: 00 41 01 02 82 00 01 4A 25 83 00 01 49 D2 03 01  // .A.....J%...I...
    C1D0: 02 82 00 01 01 04 83 00 00 00 2D 0D 42 04 00 2D  // ..........-.B..-
    C1E0: 25 41 04 3E 25 41 28 45 D2 03 01 02 82 00 01 4A  // %A.>%A(E.......J
    C1F0: 25 83 00 01 49 FA 03 01 02 82 00 00 07 65 83 00  // %...I........e..
    C200: FB 2D 05 00 08 00 00 00 2D 05 01 08 00 00 00 1B  // .-......-.......
    C210: 05 40 01 3E 05 00 2C 00 30 C0 44 AF 03 01 05 BD  // .@.>..,.0.D.....
    C220: 00 00 66 00 0C 5B 7A 28 00 25 00 00 00 49 20 20  // ..f..[z(.%...I  
    C230: 00 4D 60 46 00 6D 40 20 00 71 80 40 00 75 00 00  // .M`F.m@ .q.@.u..
    C240: 00 79 00 00 00 7D 00 68 00 01 40 0F 00 0A 00 00  // .y...}.h..@.....
    C250: 00 00 52 00 01 01 00 00 37 00 00 52 3E 03 0C 41  // ..R.....7..R>..A
    C260: 14 00 01 0A 0A 15 41 33 0D 41 01 00 1B 0D 41 04  // ......A3.A....A.
    C270: 15 05 41 10 2D 05 41 00 F4 00 F4 01 02 09 08 41  // ..A.-.A........A
    C280: 33 8D 41 00 F4 1B 1D 41 07 01 1A 06 00 41 01 05  // 3.A....A.....A..
    C290: 01 0B 00 00 00 F4 01 25 C9 00 F4 01 05 C4 00 00  // .......%........
    C2A0: 00 00 00 5B 11 01 01 01 00 04 37 00 00 03 F9 46  // ...[......7....F
    C2B0: 00 08 E5 00 7F 03 0A 41 42 2D 0D 41 04 00 03 8C  // .......AB-.A....
    C2C0: 41 02 00 2D 0C 42 00 00 2D 0D 42 04 00 56 30 46  // A..-.B..-.B..V0F
    C2D0: 03 04 40 00 00 3E 05 40 00 00 00 00 44 49 00 3D  // ..@..>.@....DI.=
    C2E0: FA 00 40 44 50 00 3E A5 46 01 49 5B 00 33 1A 42  // ..@DP.>.F.I[.3.B
    C2F0: 41 43 62 00 03 A5 46 01 3D 02 00 40 47 62 00 2D  // ACb...F.=..@Gb.-
    C300: 1A 42 41 43 2C 00 4C E5 46 80 44 6A 00 5B 03 8A  // .BAC,.L.F.Dj.[..
    C310: 41 42 56 00 40 03 0A 42 41 03 8C 40 00 00 3E 8D  // ABV.@..BA..@..>.
    C320: 40 FF FF 44 10 01 03 24 42 02 00 03 22 46 42 09  // @..D...$B..."FB.
    C330: 25 42 3F 3E 25 42 05 49 A6 00 03 1A 40 40 03 0D  // %B?>%B.I....@@..
    C340: 42 04 00 2D 1A 42 41 43 E1 00 3E 25 42 06 49 CD  // B..-.BAC..>%B.I.
    C350: 00 33 0D 41 03 00 56 08 42 2D 0D 40 01 00 3E 1A  // .3.A..V.B-.@..>.
    C360: 40 40 47 9F 00 2D 1A 42 41 2D 0D 41 03 00 43 04  // @@G..-.BA-.A..C.
    C370: 01 03 1A 40 40 09 0D 42 1F 00 2D 1A 42 41 4C 25  // ...@@..B..-.BAL%
    C380: 46 80 49 04 01 56 18 40 4C 25 46 40 49 F9 00 01  // F.I..V.@L%F@I...
    C390: 02 00 00 40 01 04 01 00 00 00 43 04 01 01 02 91  // ...@......C.....
    C3A0: 0A 40 01 04 92 0A 00 00 2D 0D 41 03 00 03 8A 41  // .@......-.A....A
    C3B0: 42 43 71 00 5B 00 21 00 02 01 00 04 37 00 00 01  // BCq.[.!.....7...
    C3C0: 01 A4 00 01 01 01 94 00 00 3C 25 95 00 01 49 13  // .........<%...I.
    C3D0: 00 02 00 01 A4 00 5B 00 8E 00 01 02 00 04 66 FF  // ......[.......f.
    C3E0: 56 08 47 2D 0D 42 5C 00 03 21 47 00 09 25 47 F0  // V.G-.B\..!G..%G.
    C3F0: 42 22 47 63 00 43 00 63 80 36 00 63 60 3E 00 63  // B"Gc.C.c.6.c`>.c
    C400: 20 2E 00 5A 5A 5B 2D 0D 42 26 00 43 43 00 2D 0D  //  ..ZZ[-.B&.CC.-.
    C410: 42 0C 00 43 43 00 2D 0D 42 18 00 03 21 47 00 09  // B..CC.-.B...!G..
    C420: 25 47 07 2D 0A 42 47 2D 0A 42 47 03 0C 48 00 00  // %G.-.BG-.BG..H..
    C430: 5B 7A 32 00 00 00 00 02 00 04 00 26 00 28 00 2A  // [z2........&.(.*
    C440: 00 00 02 00 2C 00 2D 00 2E 00 2F 00 00 00 00 01  // ....,.-.../.....
    C450: 00 02 00 03 00 04 00 05 00 0A 00 00 A0 00 40 51  // ..............@Q
    C460: E0 51 80 52 20 53 BF 02 02 02 1C 04 20 05 01 64  // .Q.R S...... ..d
    C470: 00 00 00 03 02 02 40 66 1F 02 04 01 0C 00 52 45  // ......@f......RE
    C480: 08 05 01 FF 03 00 00 3D 0D 01 00 00 49 2F 00 02  // .......=....I/..
    C490: 04 00 28 00 5B 02 04 01 1C 00 52 45 08 05 01 FF  // ..(.[.....RE....
    C4A0: 00 00 00 20 05 01 A0 86 01 00 7C 04 40 20 00 7E  // ... ......|.@ .~
    C4B0: 05 40 FF 00 00 00 03 02 01 40 03 04 40 24 00 21  // .@.......@..@$.!
    C4C0: 05 40 A0 86 01 00 2D 02 01 40 02 E5 00 01 56 00  // .@....-..@....V.
    C4D0: 03 02 0D 03 02 00 56 00 04 7C 04 02 3C 00 7E 05  // ......V..|..<.~.
    C4E0: 40 10 27 00 00 02 02 01 40 02 04 02 4C 00 02 A4  // @.'.....@...L...
    C4F0: 03 56 00 02 E4 03 5A 00 52 37 03 01 05 01 03 71  // .V....Z.R7.....q
    C500: 03 03 03 04 40 64 00 21 05 40 A0 86 01 00 02 02  // ....@d.!.@......
    C510: 01 40 55 18 03 02 04 02 50 00 02 E4 03 5B 00 52  // .@U.....P....[.R
    C520: 37 7C 04 02 40 00 7E 05 40 10 27 00 00 02 02 02  // 7|..@.~.@.'.....
    C530: 40 02 E4 03 57 00 52 37 02 E5 03 01 02 02 02 01  // @...W.R7........
    C540: 52 37 03 01 06 01 03 B1 03 03 7C 05 06 A0 86 01  // R7........|.....
    C550: 00 7E 02 40 05 03 02 03 40 03 02 05 40 43 FA 00  // .~.@....@...@C..
    C560: 3D E5 00 00 44 66 02 3E 04 03 04 00 47 21 01 03  // =...Df.>....G!..
    C570: 02 03 05 3E 04 03 04 00 47 21 01 03 04 03 04 00  // ...>....G!......
    C580: 2D 05 03 71 02 00 00 03 04 40 7C 00 3E 05 40 00  // -..q.....@|.>.@.
    C590: 00 00 00 44 D9 01 33 04 03 7C 00 7C 02 03 03 7E  // ...D..3..|.|...~
    C5A0: 05 40 A0 86 01 00 03 02 46 40 02 04 01 50 00 03  // .@......F@...P..
    C5B0: 04 40 64 00 21 05 40 A0 86 01 00 02 02 02 40 02  // .@d.!.@.......@.
    C5C0: 05 03 02 00 00 00 02 A4 03 5B 00 52 37 7C 04 03  // .........[.R7|..
    C5D0: 4C 00 7E 05 40 A0 86 01 00 02 02 02 40 02 E4 03  // L.~.@.......@...
    C5E0: 5A 00 52 37 02 02 02 01 02 E5 03 01 52 37 03 01  // Z.R7........R7..
    C5F0: 04 01 02 04 01 40 00 02 A4 03 57 00 7C 04 03 3C  // .....@....W.|..<
    C600: 00 7E 05 40 A0 86 01 00 02 02 02 40 02 E4 03 56  // .~.@.......@...V
    C610: 00 52 37 7C 05 04 10 27 00 00 7E 01 40 01 03 02  // .R7|...'..~.@...
    C620: 04 40 03 02 05 02 3E 02 05 04 45 CE 01 33 02 05  // .@....>...E..3..
    C630: 04 43 E0 01 33 02 04 05 03 02 05 04 43 E0 01 03  // .C..3.......C...
    C640: 02 04 02 56 00 05 7C 04 02 74 00 7E 05 40 10 27  // ...V..|..t.~.@.'
    C650: 00 00 03 02 04 40 7C 02 40 40 02 02 01 40 02 02  // .....@|.@@...@..
    C660: 02 41 7C 04 02 78 00 7E 05 40 10 27 00 00 7C 02  // .A|..x.~.@.'..|.
    C670: 40 40 02 25 03 01 52 37 7C 02 05 05 52 37 02 25  // @@.%..R7|...R7.%
    C680: 03 03 52 37 03 04 40 68 00 21 05 40 0A 00 00 00  // ..R7..@h.!.@....
    C690: 2C 02 01 40 7C 04 02 6C 00 7E 05 40 10 27 00 00  // ,..@|..l.~.@.'..
    C6A0: 2C 02 01 40 7C 04 02 70 00 7E 05 40 10 27 00 00  // ,..@|..p.~.@.'..
    C6B0: 2C 02 01 40 26 05 01 64 00 00 00 21 05 40 64 00  // ,..@&..d...!.@d.
    C6C0: 00 00 2D 02 02 40 55 38 00 43 68 00 2D 05 05 70  // ..-..@U8.Ch.-..p
    C6D0: 02 00 00 27 05 05 71 02 00 00 21 05 40 71 02 00  // ...'..q...!.@q..
    C6E0: 00 3E 04 40 04 00 47 89 02 02 04 00 2C 00 5B 56  // .>.@..G.....,.[V
    C6F0: 00 00 03 31 00 00 33 25 00 01 02 02 00 40 03 04  // ...1..3%.....@..
    C700: 46 08 00 03 04 40 80 00 15 25 00 02 2D 0A 42 00  // F....@...%..-.B.
    C710: 21 04 40 84 00 2D 02 46 40 3D 02 00 46 48 BE 02  // !.@..-.F@=..FH..
    C720: 02 02 00 46 5B 00 78 00 01 01 00 00 37 00 00 52  // ...F[.x.....7..R
    C730: 14 0D A5 51 1B 01 54 20 54 1B 07 25 44 1B FE 54  // ...Q..T T..%D..T
    C740: 20 45 1B 42 29 00 63 00 31 00 63 01 39 00 63 02  //  E.B).c.1.c.9.c.
    C750: 4D 00 5A 5A 43 70 00 01 25 45 1B 02 43 3E 00 01  // M.ZZCp..%E..C>..
    C760: 25 45 1B 01 54 20 42 1B 54 00 43 1B 54 00 47 1B  // %E..T B.T.C.T.G.
    C770: 43 70 00 01 0D 43 1B 01 01 01 05 47 1B 01 00 01  // Cp...C.....G....
    C780: 00 0D 65 48 1B 01 0D 65 4B 1B 01 01 0D 53 1B 10  // ..eH...eK....S..
    C790: 10 01 25 42 1B 01 54 30 51 1B 3A 00 00 5B 74 00  // ..%B..T0Q.:..[t.
    C7A0: 01 01 00 00 37 00 00 4A A5 CB 05 01 44 15 00 02  // ....7..J....D...
    C7B0: 65 00 01 0E 25 00 80 52 14 03 00 46 CC 00 08 25  // e...%..R...F...%
    C7C0: 00 0F 52 14 54 30 9D 1B 3C 69 9D 1B 00 44 65 00  // ..R.T0..<i...De.
    C7D0: 01 69 9D 1B 00 3D 65 00 00 44 65 00 4A A5 9C 1B  // .i...=e..De.J...
    C7E0: 01 44 65 00 4C 25 46 01 44 69 00 4A 25 A3 1B 01  // .De.L%F.Di.J%...
    C7F0: 49 4D 00 4A 25 A3 1B 01 44 55 00 4A 25 A3 1B 01  // IM.J%...DU.J%...
    C800: 49 5D 00 3A 00 00 5B 4A 25 9D 1B 01 44 69 00 43  // I].:..[J%...Di.C
    C810: 65 00 3E 00 01 01 00 00 37 00 00 52 14 3D 65 00  // e.>.....7..R.=e.
    C820: 01 44 30 00 0D 65 9C 1B 03 07 25 9C 1B FE 4A A5  // .D0..e....%...J.
    C830: 9C 1B 01 49 1C 00 07 E5 00 1B 7F 54 20 A9 1B 43  // ...I.......T ..C
    C840: 3A 00 0D E5 00 1B 80 0D 25 9C 1B 01 3A 00 00 5B  // :.......%...:..[
    C850: 2C 00 02 01 00 00 37 00 00 3C 21 FC 00 00 49 19  // ,.....7..<!...I.
    C860: 00 0D A5 C0 00 01 43 26 00 3C 61 FC 00 00 49 26  // ......C&.<a...I&
    C870: 00 0D A5 C0 00 02 0D A5 C1 00 01 5B 22 00 01 01  // ...........["...
    C880: 04 04 03 39 00 00 55 38 00 20 02 00 00 03 04 41  // ...9..U8. .....A
    C890: 00 00 56 38 41 27 02 40 41 02 E2 00 40 5B 19 00  // ..V8A'.@A...@[..
    C8A0: 01 01 00 08 37 00 00 52 14 01 01 5E 1B 00 01 01  // ....7..R...^....
    C8B0: 5F 1B 01 3A 00 00 5B 00 80 00 02 01 00 00 56 00  // _..:..[.......V.
    C8C0: 40 03 39 40 00 55 38 00 66 FF 2D 0D 42 50 00 3E  // @.9@.U8.f.-.BP.>
    C8D0: 0C 40 02 00 47 27 00 2D 0D 42 08 00 43 17 00 33  // .@..G'.-.B..C..3
    C8E0: 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00 00 56 18  // .@..!.@..-.@..V.
    C8F0: 40 03 02 46 40 7B 05 00 40 42 0F 00 7E 02 40 46  // @..F@{..@B..~.@F
    C900: 02 02 00 40 5B 7A 30 00 64 00 00 00 00 00 00 00  // ...@[z0.d.......
    C910: FF FF 07 00 01 00 00 00 C8 00 3F 00 08 00 19 00  // ..........?.....
    C920: 40 06 5F 00 40 00 32 00 80 0C 7E 00 60 00 64 00  // @._.@.2...~.`.d.
    C930: 00 32 7F 00 7F 00 64 00 C6 00 01 03 04 00 37 00  // .2....d.......7.
    C940: 00 56 00 46 56 00 00 03 21 00 00 55 20 00 3D 65  // .V.FV...!..U .=e
    C950: 00 03 44 2C 00 3D 65 00 0D 46 BB 00 02 29 00 00  // ..D,.=e..F...)..
    C960: 32 25 00 08 0E 25 00 60 52 14 5C 22 00 4A F8 00  // 2%...%.`R.\".J..
    C970: 02 22 00 00 52 14 03 08 41 C0 1A 09 0D 41 03 00  // ."..R...A....A..
    C980: 66 FF 2D 0D 42 C2 00 2D 0A 42 41 03 24 00 00 00  // f.-.B..-.BA.$...
    C990: 3D E2 00 00 48 A7 00 3E 25 00 04 44 76 00 03 22  // =...H..>%..Dv.."
    C9A0: 46 00 33 25 46 01 15 25 46 04 0F 25 46 01 33 39  // F.3%F..%F..%F.39
    C9B0: 00 00 3E 25 00 01 44 93 00 3E 25 00 02 44 8C 00  // ..>%..D..>%..D..
    C9C0: 03 25 46 21 03 65 00 2F 43 97 00 03 65 00 13 03  // .%F!.e./C...e...
    C9D0: 79 46 00 33 65 46 01 15 2D 46 03 0F 65 46 01 52  // yF.3eF..-F..eF.R
    C9E0: 14 01 02 F2 1B 46 01 52 EE 1B 00 54 00 F9 1B 54  // .....F.R...T...T
    C9F0: 00 ED 1B 3A 00 00 5B 7A 04 00 03 02 01 04 AF 01  // ...:..[z........
    CA00: 01 04 00 08 37 00 00 3D 65 02 01 49 44 01 4B A5  // ....7..=e..ID.K.
    CA10: 02 03 49 5D 00 02 05 00 00 03 00 05 02 05 01 00  // ..I]............
    CA20: 05 02 00 3C 21 FC 00 02 49 57 00 01 8D C0 00 00  // ...<!...IW......
    CA30: 02 51 02 01 05 C6 00 00 00 10 00 01 05 C8 00 00  // .Q..............
    CA40: 00 50 00 01 0D C3 00 02 00 54 20 CA 00 01 05 C2  // .P.......T .....
    CA50: 00 00 01 00 00 56 20 40 43 83 00 0E 25 02 80 52  // .....V @C...%..R
    CA60: 14 54 00 CC 00 56 08 48 08 25 02 07 0D 25 CA 00  // .T...V.H.%...%..
    CA70: 01 01 25 C2 00 01 54 00 C6 00 54 00 C8 00 56 20  // ..%...T...T...V 
    CA80: 40 3D A5 01 00 49 8F 00 0D 25 C2 00 10 07 65 D0  // @=...I...%....e.
    CA90: 05 FE 3D A5 01 01 47 A0 00 0D 65 D0 05 01 03 A0  // ..=...G...e.....
    CAA0: 40 C9 00 03 00 46 C4 00 03 02 41 46 2D 00 46 C6  // @....F....AF-.F.
    CAB0: 00 2D 00 41 C8 00 52 14 01 32 07 1A 40 01 32 08  // .-.A..R..2..@.2.
    CAC0: 1A 40 01 02 04 1A 46 01 02 05 1A 41 54 30 C1 1A  // .@....F....AT0..
    CAD0: 54 00 5C 1B 01 01 5D 1B 00 54 08 09 1A 54 08 0A  // T.\...]..T...T..
    CAE0: 1A 54 08 0B 1A 54 08 0C 1A 01 09 0E 1A 00 01 19  // .T...T..........
    CAF0: 0D 1A 00 5C 19 01 1A FC F8 01 5C A5 01 1A 0F 10  // ...\......\.....
    CB00: 01 09 06 1A 01 01 25 00 1A 01 0D 25 B3 1B 04 5C  // ......%....%...\
    CB10: 62 B3 1B FE 40 54 20 35 1A 54 20 3C 1A 54 00 CA  // b...@T 5.T <.T..
    CB20: 1B 54 00 C8 1B 54 00 CC 1B 4B A5 02 03 49 40 01  // .T...T...K...I@.
    CB30: 0E 25 02 80 52 14 01 05 CC 00 01 00 00 00 3A 00  // .%..R.........:.
    CB40: 00 5B 52 14 3D 65 02 00 49 61 01 54 20 00 1A 3A  // .[R.=e..Ia.T ..:
    CB50: 00 00 3C 21 FC 00 02 49 60 01 54 08 C1 00 5B 3D  // ..<!...I`.T...[=
    CB60: 65 02 10 44 6E 01 01 09 06 1A 01 5B 03 00 40 04  // e..Dn......[..@.
    CB70: 1A 09 05 40 00 00 00 FD 2D 01 40 00 09 0D 40 00  // ...@....-.@...@.
    CB80: F0 01 02 04 1A 40 08 0D 00 FF 0F 56 00 41 03 31  // .....@.....V.A.1
    CB90: 41 01 74 0A 00 41 2C 09 01 00 08 25 00 FC 14 05  // A.t..A,....%....
    CBA0: 00 10 01 01 5C 1B 00 01 09 0D 1A 01 5B 00 49 00  // ....\.......[.I.
    CBB0: 01 01 00 00 37 00 00 52 14 07 65 B6 1B FE 3D 65  // ....7..R..e...=e
    CBC0: 00 01 44 37 00 54 30 6E 1A 54 30 11 1A 54 20 B5  // ..D7.T0n.T0..T .
    CBD0: 1B 54 20 BD 1B 54 30 BD 1B 4A 25 B6 1B 01 49 2B  // .T ..T0..J%...I+
    CBE0: 00 3A 00 00 5B 0D 25 BD 1B 01 54 00 9E 1B 07 25  // .:..[.%...T....%
    CBF0: C0 1A F4 3A 00 00 5B 00 95 00 01 03 00 00 37 00  // ...:..[.......7.
    CC00: 00 52 14 0D 25 03 1B 04 54 20 78 1A 54 00 80 1A  // .R..%...T x.T...
    CC10: 3D 65 00 01 49 56 00 0D 25 7E 1A 07 01 25 7F 1A  // =e..IV..%~...%..
    CC20: 01 51 01 4A 25 7F 1A 02 44 29 00 54 20 7F 1A 54  // .Q.J%...D).T ..T
    CC30: 08 81 1A 54 08 82 1A 54 08 83 1A 01 0D 84 1A FF  // ...T...T........
    CC40: FF 01 0D 85 1A FF FF 01 0D 86 1A FF FF 5B 01 31  // .............[.1
    CC50: 79 1A 00 56 00 41 03 19 41 01 3B 02 41 3D 65 00  // y..V.A..A.;.A=e.
    CC60: 02 49 78 00 03 00 40 7C 1A 04 02 00 40 43 81 00  // .Ix...@|....@C..
    CC70: 03 03 40 00 01 02 7C 1A 40 2D 05 46 04 00 00 00  // ..@...|.@-.F....
    CC80: 2D 8D 41 01 00 3E 89 41 01 45 65 00 5B 00 3D 00  // -.A..>.A.Ee.[.=.
    CC90: 01 01 00 04 37 00 00 56 00 40 03 38 40 9A 0A 21  // ....7..V.@.8@..!
    CCA0: 05 40 E2 04 00 00 02 02 00 40 03 00 40 99 0A 1B  // .@.......@..@...
    CCB0: 05 40 14 09 0D 40 07 00 21 05 40 09 3D 00 00 27  // .@...@..!.@.=..'
    CCC0: 05 40 64 00 00 00 2C 02 00 40 5B 00 D8 00 01 01  // .@d...,..@[.....
    CCD0: 0C 00 37 00 00 01 05 82 00 2C 00 50 C0 4A 25 83  // ..7......,.P.J%.
    CCE0: 00 01 49 3B 00 02 05 00 40 7E 05 00 01 05 82 00  // ..I;....@~......
    CCF0: B4 00 50 C0 02 E8 00 83 00 52 29 26 05 00 10 27  // ..P......R)&...'
    CD00: 00 00 02 02 00 40 5B 03 05 00 AC 02 50 C0 03 05  // .....@[.....P...
    CD10: 01 8C 02 50 C0 03 05 02 78 02 50 C0 01 05 82 00  // ...P....x.P.....
    CD20: 40 03 50 C0 4A 25 83 00 01 44 75 00 03 05 00 28  // @.P.J%...Du....(
    CD30: 03 50 C0 03 05 01 08 03 50 C0 03 05 02 F4 02 50  // .P......P......P
    CD40: C0 01 02 82 00 02 4A 05 83 00 80 00 00 00 44 8C  // ......J.......D.
    CD50: 00 2D 05 01 10 00 00 00 01 02 82 00 01 56 00 40  // .-...........V.@
    CD60: 03 18 40 83 00 21 05 40 10 27 00 00 03 02 46 40  // ..@..!.@.'....F@
    CD70: 56 00 40 03 08 40 83 00 21 05 40 10 27 00 00 27  // V.@..@..!.@.'..'
    CD80: 05 40 00 00 01 00 2D 02 46 40 01 02 82 00 00 56  // .@....-.F@.....V
    CD90: 00 40 03 20 40 83 00 09 25 40 0F 75 02 46 40 02  // .@. @...%@.u.F@.
    CDA0: 02 00 46 5B 53 01 02 03 00 18 37 00 00 66 FF 2D  // ..F[S.....7..f.-
    CDB0: 0D 42 47 01 55 28 05 2D 09 42 05 2D 09 42 05 03  // .BG.U(.-.B.-.B..
    CDC0: 0C 48 00 00 03 09 41 03 2D 19 41 03 3E 0D 41 03  // .H....A.-.A.>.A.
    CDD0: 00 46 3F 00 5C 05 B3 1B FB 0F F0 FF 00 30 00 00  // .F?.\........0..
    CDE0: 43 4B 00 5C 05 B3 1B FF 0F F0 FF 04 40 00 00 03  // CK.\........@...
    CDF0: 09 41 00 2D 19 41 00 33 0D 41 01 00 01 0A 80 1B  // .A.-.A.3.A......
    CE00: 41 54 08 82 1B 01 99 82 1B 02 03 19 41 00 33 09  // AT..........A.3.
    CE10: 41 02 56 18 41 03 B1 41 04 33 1A 41 41 01 8A 81  // A.V.A..A.3.AA...
    CE20: 1B 41 03 19 41 00 33 09 41 02 2D 1A 41 41 2D 09  // .A..A.3.A.-.AA-.
    CE30: 41 00 4B 25 04 10 44 99 00 2D 09 41 00 01 0A 81  // A.K%..D..-.A....
    CE40: 1B 41 03 21 41 04 09 25 41 02 1B 25 41 01 01 22  // .A.!A..%A..%A.."
    CE50: 83 1B 41 54 00 5E 1B 01 31 5E 1B 04 01 B1 5E 1B  // ..AT.^..1^....^.
    CE60: 04 03 09 41 01 2D 19 41 01 33 0D 41 01 00 01 0A  // ...A.-.A.3.A....
    CE70: 87 1B 41 54 08 8E 1B 01 99 8E 1B 03 03 19 41 01  // ..AT..........A.
    CE80: 33 09 41 03 56 18 41 03 B9 41 04 33 1A 41 41 01  // 3.A.V.A..A.3.AA.
    CE90: 8A 8D 1B 41 03 19 41 01 33 09 41 03 2D 1A 41 41  // ...A..A.3.A.-.AA
    CEA0: 2D 09 41 01 4B 25 04 20 44 0B 01 2D 09 41 01 01  // -.A.K%. D..-.A..
    CEB0: 0A 8D 1B 41 03 21 41 04 09 25 41 04 1B 25 41 02  // ...A.!A..%A..%A.
    CEC0: 01 22 8F 1B 41 54 00 5F 1B 01 39 5F 1B 04 01 B9  // ."..AT._..9_....
    CED0: 5F 1B 04 03 21 41 04 09 25 41 80 1B 25 41 07 01  // _...!A..%A..%A..
    CEE0: 22 9E 1B 41 3A 00 00 5B 7A 0C 00 00 00 00 02 00  // "..A:..[z.......
    CEF0: 04 00 26 00 28 00 2A 00 BE 00 01 01 00 04 37 00  // ..&.(.*.......7.
    CF00: 00 03 A1 40 00 3D A5 00 00 49 49 00 66 04 03 24  // ...@.=...II.f..$
    CF10: 40 58 00 3E 25 40 FF 49 AE 00 55 00 01 02 25 01  // @X.>%@.I..U...%.
    CF20: 28 52 09 02 0D 01 29 01 52 09 02 0D 01 2A 02 52  // (R....).R....*.R
    CF30: 09 02 0D 01 2B 03 52 09 03 B1 40 01 01 B1 0A 15  // ....+.R...@.....
    CF40: 01 66 1C 03 64 40 10 00 56 20 40 2D 0D 42 14 00  // .f..d@..V @-.B..
    CF50: 54 30 CD 05 3E A4 40 0A 00 49 93 00 3D A5 00 00  // T0..>.@..I..=...
    CF60: 44 AE 00 03 24 41 1C 00 03 71 41 00 09 0D 41 0F  // D...$A...qA...A.
    CF70: 0F 3E 62 41 41 49 93 00 01 A2 CD 05 40 01 64 80  // .>bAAI......@.d.
    CF80: 0A 1C 00 3D A4 00 1C 00 44 AE 00 2D 0C 42 04 00  // ...=....D..-.B..
    CF90: 2D 25 40 01 3E 62 40 40 49 5C 00 01 F1 0A 15 00  // -%@.>b@@I\......
    CFA0: 0D A5 0A 15 80 5B 01 A2 CD 05 40 01 64 80 0A 1C  // .....[....@.d...
    CFB0: 00 54 18 0A 15 5B 9E 00 01 01 08 00 37 00 00 03  // .T...[......7...
    CFC0: 08 00 28 08 56 30 00 03 05 01 03 00 00 00 52 3E  // ..(.V0........R>
    CFD0: 4C 0C 01 08 00 49 2D 00 15 05 01 02 2D A5 00 01  // L....I-.....-...
    CFE0: 43 18 00 5C 72 28 08 F8 00 03 00 40 1F 0A 03 00  // C..\r(.....@....
    CFF0: 46 93 0A 09 25 46 03 15 25 46 03 75 02 40 46 56  // F...%F..%F.u.@FV
    D000: 38 40 03 65 40 80 1B 25 46 03 03 0A 48 46 03 00  // 8@.e@..%F...HF..
    D010: 41 A3 0A 56 08 48 01 0A 28 08 00 03 A2 40 41 09  // A..V.H..(....@A.
    D020: A5 40 07 03 32 43 40 4C 25 40 01 44 7C 00 0F E2  // .@..2C@L%@.D|...
    D030: 40 44 1B 0D 40 01 1B 05 41 03 3E 65 40 00 49 65  // @D..@...A.>e@.Ie
    D040: 00 01 7A 80 0A 40 02 BA 00 40 52 3E 02 24 00 0A  // ..z..@...@R>.$..
    D050: 00 52 34 5B 1A 00 01 01 00 04 37 00 00 01 05 E5  // .R4[......7.....
    D060: 09 FC FD FC FC 01 05 E6 09 FD F8 FC FC 5B 31 02  // .............[1.
    D070: 01 01 00 08 37 00 00 0D 25 F4 16 08 07 25 62 18  // ....7...%....%b.
    D080: FE 56 00 41 03 39 41 01 09 25 41 0F 03 0A 40 42  // .V.A.9A..%A...@B
    D090: 66 FF 2D 0D 42 11 02 15 25 41 02 2D 0A 42 41 03  // f.-.B...%A.-.BA.
    D0A0: 0C 41 00 00 01 02 00 00 41 07 A5 01 00 FE 54 08  // .A......A.....T.
    D0B0: 01 00 01 0C FB 16 02 00 03 0A 42 40 03 05 40 50  // ..........B@..@P
    D0C0: C3 00 00 56 00 41 03 21 41 00 27 02 40 41 01 8A  // ...V.A.!A.'.@A..
    D0D0: F7 16 40 01 25 F7 16 02 0D 25 F5 16 02 01 A9 F9  // ..@.%....%......
    D0E0: 16 01 4B 25 01 01 49 7F 00 54 30 F9 16 01 0D F9  // ..K%..I..T0.....
    D0F0: 16 00 31 2B A5 F9 16 01 4B 25 01 02 44 96 00 2B  // ..1+....K%..D..+
    D100: A5 F9 16 01 56 00 41 03 71 41 01 0F E5 41 80 01  // ....V.A.qA...A..
    D110: 02 FA 16 41 03 69 41 00 2D A5 41 01 01 02 FA 16  // ...A.iA.-.A.....
    D120: 41 4B 25 01 02 44 C6 00 56 28 41 2D A5 41 01 01  // AK%..D..V(A-.A..
    D130: 02 FA 16 41 4B 25 01 01 44 E7 00 03 71 41 00 2D  // ...AK%..D...qA.-
    D140: A5 41 01 01 02 FA 16 41 03 79 41 00 2D A5 41 01  // .A.....A.yA.-.A.
    D150: 01 02 FA 16 41 0D 25 F4 16 01 03 A5 41 01 43 BA  // ....A.%.....A.C.
    D160: 01 03 29 40 01 03 65 40 01 03 99 40 00 56 00 41  // ..)@..e@...@.V.A
    D170: 03 71 41 01 0F 65 41 01 0F E5 41 80 01 02 FA 16  // .qA..eA...A.....
    D180: 41 01 A5 F9 16 04 3D 65 01 04 47 28 01 01 0D F9  // A.....=e..G(....
    D190: 16 01 13 43 57 01 01 A2 F9 16 40 01 0D F9 16 01  // ...CW.....@.....
    D1A0: 31 43 57 01 07 65 F9 16 EF 01 A5 F9 16 03 3E 25  // 1CW..e........>%
    D1B0: 40 04 46 57 01 01 A2 F9 16 40 31 A5 F9 16 01 5C  // @.FW.....@1....\
    D1C0: 65 F9 16 FD 20 0D 25 F4 16 01 03 A5 41 00 43 BA  // e... .%.....A.C.
    D1D0: 01 03 05 41 01 00 00 80 03 AA 41 40 01 02 FA 16  // ...A......A@....
    D1E0: 41 3D 65 01 01 49 82 01 02 A8 00 FA 16 43 F9 01  // A=e..I.......C..
    D1F0: 56 00 41 03 1A 41 40 3B 02 41 03 28 41 FA 16 03  // V.A..A@;.A.(A...
    D200: 68 41 FA 16 03 A8 41 FA 16 03 E8 41 FA 16 04 02  // hA....A....A....
    D210: 00 41 56 28 40 2D 8D 40 04 00 3E 25 40 04 47 F9  // .AV(@-.@..>%@.G.
    D220: 01 33 25 40 04 43 36 01 02 65 00 02 03 0D 41 64  // .3%@.C6..e....Ad
    D230: 00 33 0D 41 01 00 3E 0D 41 00 00 44 F9 01 51 64  // .3.A..>.A..D..Qd
    D240: 4A 25 F6 16 10 44 C3 01 4A 65 F6 16 06 49 F9 01  // J%...D..Je...I..
    D250: 02 65 00 01 0D 25 F5 16 02 3E A5 41 00 44 63 01  // .e...%...>.A.Dc.
    D260: 4B 25 01 01 44 F3 00 0D 25 F5 16 02 01 25 F4 16  // K%..D...%....%..
    D270: 02 51 01 54 00 F4 16 54 00 FB 16 5B 7A 20 00 68  // .Q.T...T...[z .h
    D280: 48 01 00 6C 48 03 02 70 48 05 04 74 48 42 41 78  // H..lH..pH..tHBAx
    D290: 48 49 48 7C 48 4B 4A 98 48 29 28 80 48 4D 4C 00  // HIH|HKJ.H)(.HML.
    D2A0: 5F 00 02 02 00 04 37 00 00 3D 65 00 01 44 54 00  // _.....7..=e..DT.
    D2B0: 55 30 00 3D 25 00 06 46 50 00 32 25 00 01 20 25  // U0.=%..FP.2%.. %
    D2C0: 00 08 56 08 48 03 22 48 40 0D A5 99 18 01 02 A0  // ..V.H."H@.......
    D2D0: 00 98 18 08 A5 00 03 4A 25 98 18 02 44 4A 00 5C  // .......J%...DJ.\
    D2E0: 0D 99 18 FF FE 01 00 43 50 00 0D 0D 99 18 01 01  // .......CP.......
    D2F0: 3A 00 00 5B 0D 65 CF 05 08 0D 25 80 01 01 5B 00  // :..[.e....%...[.
    D300: 0A 00 01 01 00 04 55 00 00 5B 3C 00 01 01 00 00  // ......U..[<.....
    D310: 55 00 00 55 00 01 01 05 91 0A 03 00 00 00 02 38  // U..U...........8
    D320: 00 92 0A 02 21 01 00 08 25 00 0F 08 25 01 F0 20  // ....!...%...%.. 
    D330: 05 00 20 4E 00 00 02 02 00 40 20 05 01 E2 04 00  // .. N.....@ .....
    D340: 00 02 02 01 40 5B AF 01 01 06 04 18 03 05 46 00  // ....@[........F.
    D350: 51 25 02 3D E5 00 01 49 F3 00 55 38 00 66 08 03  // Q%.=...I..U8.f..
    D360: 24 41 04 00 2D 0D 42 08 00 55 00 02 3D 04 00 00  // $A..-.B..U..=...
    D370: 00 47 42 00 2C A5 02 01 2D 0D 42 0C 00 3D A2 02  // .GB.,...-.B..=..
    D380: 41 45 26 00 55 00 01 5B 02 24 02 05 00 02 64 02  // AE&.U..[.$....d.
    D390: 04 00 03 01 46 00 56 00 40 03 21 40 02 6F 02 46  // ....F.V.@.!@.o.F
    D3A0: 40 7C 05 46 00 40 00 00 7E 05 40 C4 09 00 00 02  // @|.F.@..~.@.....
    D3B0: 02 01 40 02 E5 02 01 7B 05 01 7D 00 00 00 7E 05  // ..@....{..}...~.
    D3C0: 40 10 27 00 00 7C 05 40 4E 0C 00 00 7E 05 40 40  // @.'..|.@N...~.@@
    D3D0: 4B 4C 00 02 0A 05 40 21 05 40 40 4B 4C 00 27 05  // KL....@!.@@KL.'.
    D3E0: 40 4E 0C 00 00 02 01 03 01 32 02 03 40 21 05 46  // @N.......2..@!.F
    D3F0: D0 07 00 00 27 05 40 10 27 00 00 03 02 00 46 33  // ....'.@.'.....F3
    D400: 02 00 40 27 05 00 10 27 00 00 3E 0C 40 06 00 48  // ..@'...'..>.@..H
    D410: D1 00 03 0C 40 06 00 55 00 04 02 8A 04 40 03 01  // ....@..U.....@..
    D420: 40 01 33 01 40 04 21 05 40 32 00 00 00 27 05 40  // @.3.@.!.@2...'.@
    D430: 50 C3 00 00 02 8A 05 40 5B 55 38 00 03 05 40 00  // P......@[U8...@.
    D440: 32 00 00 3D 05 00 00 00 00 00 44 3C 01 03 02 40  // 2..=......D<...@
    D450: 46 2D 01 40 00 33 05 40 01 00 00 00 27 01 40 00  // F-.@.3.@....'.@.
    D460: 3E 05 40 9C 18 00 00 47 2B 01 03 05 40 00 32 00  // >.@....G+...@.2.
    D470: 00 3E 05 40 C8 00 00 00 46 3C 01 03 05 40 C8 00  // .>.@....F<...@..
    D480: 00 00 66 FF 2D 0D 42 8F 01 3E 0C 40 02 00 47 53  // ..f.-.B..>.@..GS
    D490: 01 2D 0D 42 08 00 43 43 01 33 0C 40 00 00 2D 0C  // .-.B..CC.3.@..-.
    D4A0: 40 06 00 33 0D 40 01 00 27 0C 40 06 00 2D 0C 40  // @..3.@..'.@..-.@
    D4B0: 04 00 02 E2 00 40 33 0C 40 04 00 21 0C 40 06 00  // .....@3.@..!.@..
    D4C0: 2D 0C 40 00 00 27 02 46 40 02 0A 00 40 02 B2 00  // -.@..'.F@...@...
    D4D0: 40 5B 7A 20 00 C8 00 40 06 08 00 19 00 40 06 80  // @[z ...@.....@..
    D4E0: 0C 40 00 32 00 80 0C 38 18 60 00 64 00 00 32 00  // .@.2...8.`.d..2.
    D4F0: 32 7F 00 64 00 00 07 00 02 01 00 00 5B 00 70 01  // 2..d........[.p.
    D500: 02 01 08 04 37 00 00 66 1C 2D 0C 42 06 00 3D E5  // ....7..f.-.B..=.
    D510: 00 02 44 4B 00 3D E5 00 03 44 F7 00 03 38 00 2F  // ..DK.=...D...8./
    D520: 0A 09 25 00 20 02 01 01 00 02 F0 01 CD 05 52 12  // ..%. .........R.
    D530: 01 08 AB 0A 81 0A 01 18 83 0A 81 0A 5C E2 2F 0A  // ............\./.
    D540: DF 00 5C E2 30 0A DF 00 5B 02 F0 01 CD 05 0E E5  // ..\.0...[.......
    D550: 01 80 52 12 02 01 01 00 02 E4 01 2C 00 52 26 01  // ..R........,.R&.
    D560: 39 DD 09 01 02 EC 01 2C 00 52 26 01 79 DD 09 01  // 9......,.R&.y...
    D570: 02 F4 01 2C 00 52 26 01 B9 DD 09 01 02 FC 01 2C  // ...,.R&........,
    D580: 00 52 26 01 F9 DD 09 01 02 E4 01 30 00 52 26 01  // .R&........0.R&.
    D590: 39 DE 09 01 02 EC 01 30 00 52 26 01 79 DE 09 01  // 9......0.R&.y...
    D5A0: 02 F4 01 30 00 52 26 01 B9 DE 09 01 02 FC 01 30  // ...0.R&........0
    D5B0: 00 52 26 01 F9 DE 09 01 31 05 DE 09 01 01 01 00  // .R&.....1.......
    D5C0: 02 E5 01 08 52 26 3D E5 01 04 46 D3 00 02 E5 01  // ....R&=...F.....
    D5D0: 04 3D E5 01 08 46 E1 00 32 E5 01 04 43 F0 00 1A  // .=...F..2...C...
    D5E0: 3D 01 01 3D E5 01 12 45 F0 00 02 E5 01 12 5C 39  // =..=...E......\9
    D5F0: 02 0A E0 01 5B 52 3B 03 05 00 10 00 00 00 03 05  // ....[R;.........
    D600: 01 2D 00 00 00 55 38 00 3D 01 00 01 45 30 01 03  // .-...U8.=...E0..
    D610: 0D 00 18 00 03 05 01 2E 00 00 00 3D 01 00 02 45  // ...........=...E
    D620: 30 01 03 0D 00 20 00 03 05 01 2F 00 00 00 02 01  // 0.... ..../.....
    D630: 01 00 02 F0 01 CD 05 0E E5 01 80 52 12 56 00 41  // ...........R.V.A
    D640: 01 02 91 0A 01 01 04 92 0A 0C 00 01 02 91 0A 00  // ................
    D650: 01 04 92 0A 10 00 2D 05 00 01 00 00 00 2D 25 41  // ......-......-%A
    D660: 01 2D 0D 42 04 00 3E 25 41 07 45 4D 01 5B 00 01  // .-.B..>%A.EM.[..
    D670: 01 02 04 04 37 00 00 3D 25 00 FF 49 EC 00 02 20  // ....7..=%..I... 
    D680: 00 80 0A 4A 25 80 0A 08 49 26 00 08 25 00 10 07  // ...J%...I&..%...
    D690: 25 80 0A EF 01 05 32 0A 08 00 00 00 01 05 32 0A  // %.....2.......2.
    D6A0: 10 00 00 00 01 05 82 00 10 00 60 C0 01 05 83 00  // ..........`.....
    D6B0: 00 80 03 00 01 05 82 00 14 00 60 C0 03 00 40 83  // ..........`...@.
    D6C0: 00 66 18 3E 04 40 04 00 49 EB 00 03 00 40 83 00  // .f.>.@..I....@..
    D6D0: 03 00 00 83 00 03 00 41 83 00 3E 05 40 00 00 00  // .......A..>.@...
    D6E0: 00 44 EB 00 01 00 91 0A 83 00 01 00 92 0A 83 00  // .D..............
    D6F0: 33 0D 40 01 00 3E 0D 40 00 00 49 76 00 01 05 64  // 3.@..>.@..Iv...d
    D700: C0 0C 02 00 00 54 00 65 C0 01 05 66 C0 CC 28 00  // .....T.e...f..(.
    D710: 00 54 00 67 C0 15 05 00 02 2D 05 00 00 00 00 7C  // .T.g.....-.....|
    D720: 01 02 E8 C0 00 51 32 4A E5 A0 21 80 49 B9 00 01  // .....Q2J..!.I...
    D730: 05 32 0A 08 00 00 00 01 05 32 0A 04 00 00 00 01  // .2.......2......
    D740: 05 32 0A 01 00 00 00 51 32 50 02 4A 25 80 0A 80  // .2.....Q2P.J%...
    D750: 44 DD 00 5C 21 80 0A EF 00 5B 01 65 E7 0A FF 01  // D..\!....[.e....
    D760: 21 E7 0A 00 02 05 01 04 00 00 00 52 1F 5B 8C 00  // !..........R.[..
    D770: 01 04 00 00 03 05 40 7C 01 00 00 3D A5 00 00 44  // ......@|...=...D
    D780: 15 00 5B 03 00 46 20 49 7C 02 40 46 7E 05 40 A0  // ..[..F I|.@F~.@.
    D790: 86 01 00 03 00 41 23 49 09 05 41 03 00 00 00 6F  // .....A#I..A....o
    D7A0: 02 40 41 7C 05 40 45 0C 00 00 7E 05 40 40 4B 4C  // .@A|.@E...~.@@KL
    D7B0: 00 3E 05 40 00 00 00 00 49 51 00 03 25 40 01 01  // .>.@....IQ..%@..
    D7C0: 8A 22 49 40 7C 05 40 40 4B 4C 00 7E 05 40 45 0C  // ."I@|.@@KL.~.@E.
    D7D0: 00 00 03 00 41 23 49 09 05 41 03 00 00 00 75 02  // ....A#I..A....u.
    D7E0: 40 41 03 00 46 20 49 33 02 46 40 01 02 21 49 46  // @A..F I3.F@..!IF
    D7F0: 51 01 0D 65 23 49 01 51 01 5B 31 00 01 03 04 00  // Q..e#I.Q.[1.....
    D800: 37 00 00 55 38 00 26 05 00 E2 04 00 00 01 E2 9A  // 7..U8.&.........
    D810: 0A 40 21 05 41 64 00 00 00 27 05 40 09 3D 00 00  // .@!.Ad...'.@.=..
    D820: 15 25 40 04 5C A2 99 0A 8F 40 5B 00 10 00 01 03  // .%@.\....@[.....
    D830: 00 08 37 00 00 55 18 00 55 08 01 5B 10 01 01 04  // ..7..U..U..[....
    D840: 00 04 37 00 00 3D 65 00 08 49 23 00 02 05 01 38  // ..7..=e..I#....8
    D850: 00 06 0A 52 45 08 0D 01 FF 03 02 89 00 01 5B 3D  // ...RE.........[=
    D860: 65 00 03 44 0F 01 02 01 01 00 02 65 01 07 52 50  // e..D.......e..RP
    D870: 3D 05 02 00 00 00 00 44 0B 01 37 00 00 01 05 82  // =......D..7.....
    D880: 00 7C 02 20 C0 01 05 82 00 94 02 20 C0 4A A5 83  // .|. ....... .J..
    D890: 00 06 49 49 00 01 05 82 00 7C 02 20 C0 0D 65 83  // ..II.....|. ..e.
    D8A0: 00 04 01 05 82 00 7C 02 20 C0 03 00 46 83 00 37  // ......|. ...F..7
    D8B0: 00 00 01 05 82 00 80 02 20 C0 5E 65 46 FC 01 3D  // ........ .^eF..=
    D8C0: 25 00 01 44 96 00 09 65 46 FC 01 05 82 00 84 02  // %..D...eF.......
    D8D0: 20 C0 3C 0C 83 00 04 00 44 C6 00 07 0D 83 00 9F  //  .<.....D.......
    D8E0: FF 51 3C 03 0C 41 04 00 4C 25 41 20 49 BE 00 0F  // .Q<..A..L%A I...
    D8F0: 25 41 20 01 0A 83 00 41 51 3C 01 0C 83 00 04 00  // %A ....AQ<......
    D900: 51 3C 56 00 40 03 19 40 00 21 05 40 64 00 00 00  // Q<V.@..@.!.@d...
    D910: 03 05 41 78 5D 02 00 33 02 41 40 27 05 41 71 02  // ..Ax]..3.A@'.Aq.
    D920: 00 00 03 22 46 40 01 05 82 00 7C 02 20 C0 01 02  // ..."F@....|. ...
    D930: 83 00 46 01 05 82 00 94 02 20 C0 4A A5 83 00 02  // ..F...... .J....
    D940: 49 F7 00 37 00 00 5B 55 00 00 5B 5B 83 00 01 03  // I..7..[U..[[....
    D950: 04 00 37 00 00 3D 65 00 09 44 80 00 03 0A 00 42  // ..7..=e..D.....B
    D960: 66 20 03 0C 41 00 00 2D 0A 41 42 2D 0D 42 04 00  // f ..A..-.AB-.B..
    D970: 3E 0A 42 41 44 7C 00 3D 0C 00 00 00 44 3B 00 2D  // >.BAD|.=....D;.-
    D980: 0C 42 02 00 43 24 00 02 0A 01 42 3D 65 00 03 44  // .B..C$....B=e..D
    D990: 7B 00 3D 65 00 07 44 7B 00 03 E4 41 05 00 02 04  // {.=e..D{...A....
    D9A0: 01 08 00 3E E5 41 00 44 7C 00 3D 8C 00 10 00 47  // ...>.A.D|.=....G
    D9B0: 72 00 2D 0D 42 06 00 33 E5 41 01 43 57 00 02 04  // r.-.B..3.A.CW...
    D9C0: 00 0C 00 03 0A 42 00 5B 55 00 01 5B 52 1B 5B 00  // .....B.[U..[R.[.
    D9D0: 67 02 01 05 00 00 37 00 00 03 20 46 CF 05 0E 25  // g.....7... F...%
    D9E0: 00 60 52 14 08 25 00 0F 42 29 00 63 0F 58 00 63  // .`R..%..B).c.X.c
    D9F0: 11 4E 01 63 12 CC 01 63 01 24 02 63 00 4D 02 63  // .N.c...c.$.c.M.c
    DA00: 08 18 01 63 09 F9 00 63 0A 00 01 63 13 08 01 63  // ...c...c...c...c
    DA10: 14 10 01 63 0B 20 01 63 0C 14 02 63 0D 28 01 63  // ...c. .c...c.(.c
    DA20: 10 41 01 5A 5A 43 F5 00 3D A5 00 02 44 E3 00 54  // .A.ZZC..=...D..T
    DA30: 00 72 4A 3D A5 00 00 44 71 00 3D A5 00 05 49 EB  // .rJ=...Dq.=...I.
    DA40: 00 54 08 A1 4A 3D 25 02 00 49 80 00 02 25 02 02  // .T..J=%..I...%..
    DA50: 32 25 02 01 01 E1 A1 4A 02 4A 25 A4 4A 01 49 C6  // 2%.....J.J%.J.I.
    DA60: 00 7B 05 01 00 80 00 00 7E 05 40 8C 0A 00 00 56  // .{......~.@....V
    DA70: 00 46 03 29 46 02 27 02 40 46 07 65 A8 4A FE 01  // .F.)F.'.@F.e.J..
    DA80: 05 A9 4A 00 80 00 00 01 02 AA 4A 40 0D E5 AB 4A  // ..J.......J@...J
    DA90: 10 0D 65 00 4A 04 02 20 00 00 4A 08 25 00 07 0E  // ..e.J.. ..J.%...
    DAA0: 25 00 00 52 14 14 3D 00 04 5C B9 9C 1B 8F 00 3A  // %..R..=..\.....:
    DAB0: 00 00 5B 01 05 72 4A 01 00 00 00 07 E5 00 4A 2F  // ..[..rJ.......J/
    DAC0: 0D 65 00 4A 04 3A 00 00 5B 54 20 B0 4A 43 F5 00  // .e.J.:..[T .JC..
    DAD0: 01 25 B0 4A 01 43 F5 00 01 25 B0 4A 02 43 F5 00  // .%.J.C...%.J.C..
    DAE0: 01 25 B0 4A 03 43 F5 00 07 25 A0 4A EF 43 F5 00  // .%.J.C...%.J.C..
    DAF0: 0D 25 A0 4A 10 43 F5 00 0D 65 A8 4A 01 51 0A 07  // .%.J.C...e.J.Q..
    DB00: 25 A5 4A FE 51 0A 01 0D A4 4A 01 02 51 C8 43 F5  // %.J.Q....J..Q.C.
    DB10: 00 0D 25 B6 4A 10 01 31 A7 4A 00 43 F5 00 01 0D  // ..%.J..1.J.C....
    DB20: 03 4A 1F 00 01 69 47 4A 02 4C 25 46 10 49 77 01  // .J...iGJ.L%F.Iw.
    DB30: 3D A5 00 03 49 77 01 4A 25 0D 4A 10 49 77 01 01  // =...Iw.J%.J.Iw..
    DB40: A5 47 4A 02 43 7C 01 01 B1 47 4A 00 3D 25 02 00  // .GJ.C|...GJ.=%..
    DB50: 44 91 01 32 25 02 01 14 25 02 04 5C E1 47 4A 8F  // D..2%...%..\.GJ.
    DB60: 02 3D E5 00 04 47 A0 01 0D 25 47 4A 01 43 A5 01  // .=...G...%GJ.C..
    DB70: 07 25 47 4A FE 3D A5 00 05 44 B3 01 3D A5 00 00  // .%GJ.=...D..=...
    DB80: 49 C4 01 02 A5 00 00 03 39 40 00 33 25 40 01 01  // I.......9@.3%@..
    DB90: 22 A3 4A 40 02 E0 02 48 4A 43 F5 00 02 E0 02 48  // ".J@...HJC.....H
    DBA0: 4A 4B E5 02 01 44 F5 00 02 B0 00 47 4A 02 E5 00  // JK...D.....GJ...
    DBB0: 04 4A 25 47 4A 01 44 ED 01 02 E5 00 08 3D A5 00  // .J%GJ.D......=..
    DBC0: 02 44 FB 01 3D A5 00 03 49 04 02 54 00 48 4A 50  // .D..=...I..T.HJP
    DBD0: 02 43 F5 00 02 A5 00 00 03 31 43 00 4A 62 47 4A  // .C.......1C.JbGJ
    DBE0: 44 44 F5 00 54 08 A4 4A 51 C8 0D 25 A5 4A 01 51  // DD..T..JQ..%.J.Q
    DBF0: 32 43 F5 00 0D 25 48 4A 01 3D A5 00 00 44 39 02  // 2C...%HJ.=...D9.
    DC00: 01 0D 79 4A 0F 01 43 F5 00 03 39 43 00 03 02 40  // ..yJ..C...9C...@
    DC10: 44 33 25 40 01 01 0A 79 4A 40 43 F5 00 54 00 79  // D3%@...yJ@C..T.y
    DC20: 4A 07 25 48 4A FE 07 0D 47 4A FE 80 54 20 A0 4A  // J.%HJ...GJ..T .J
    DC30: 54 20 B0 4A 43 F5 00 00 29 00 01 01 00 00 37 00  // T .JC...).....7.
    DC40: 00 66 1C 2D 0D 42 14 00 03 30 40 CD 05 3E 25 40  // .f.-.B...0@..>%@
    DC50: 00 44 28 00 33 25 40 01 2D 0C 42 04 00 43 15 00  // .D(.3%@.-.B..C..
    DC60: 5B 00 46 01 01 06 00 00 37 00 00 42 29 00 63 07  // [.F.....7..B).c.
    DC70: 24 01 63 01 25 00 63 00 C0 00 63 0B 27 01 63 04  // $.c.%.c...c.'.c.
    DC80: 2C 01 5A 5A 43 3F 01 02 65 00 11 52 04 4B E5 02  // ,.ZZC?..e..R.K..
    DC90: 01 49 20 01 02 65 00 0A 55 08 02 52 4D 3D E5 00  // .I ..e..U..RM=..
    DCA0: 04 47 50 00 68 25 00 01 02 25 02 01 52 4D 68 25  // .GP.h%...%..RMh%
    DCB0: 00 01 3D A5 00 00 49 82 00 20 05 01 64 00 00 00  // ..=...I.. ..d...
    DCC0: 02 05 01 14 1E 00 02 2C 21 01 00 02 01 02 00 02  // .......,!.......
    DCD0: 02 00 40 52 0C 26 05 00 64 00 00 00 02 02 01 40  // ..@R.&..d......@
    DCE0: 02 01 00 02 02 65 00 01 55 08 02 52 4D 3D E5 00  // .....e..U..RM=..
    DCF0: 04 47 A0 00 68 25 00 01 02 25 02 01 52 4D 68 25  // .G..h%...%..RMh%
    DD00: 00 01 51 05 02 65 00 01 52 04 51 0A 02 65 00 09  // ..Q..e..R.Q..e..
    DD10: 52 4D 3D E5 00 04 47 20 01 68 25 00 01 52 4D 43  // RM=...G .h%..RMC
    DD20: 20 01 02 65 00 12 52 04 4B E5 02 01 44 20 01 02  //  ..e..R.K...D ..
    DD30: 65 00 08 52 4D 3D E5 00 04 47 E4 00 68 25 00 01  // e..RM=...G..h%..
    DD40: 52 4D 68 25 00 01 02 65 00 00 52 04 02 65 00 00  // RMh%...e..R..e..
    DD50: 52 4D 3D E5 00 04 47 01 01 68 25 00 01 52 4D 68  // RM=...G..h%..RMh
    DD60: 25 00 01 3D A5 00 00 49 20 01 02 01 02 00 02 05  // %..=...I .......
    DD70: 01 14 00 00 00 2C 21 01 00 55 00 00 52 0C 02 01  // .....,!..U..R...
    DD80: 00 02 3A 00 00 5B 43 20 01 52 4D 43 20 01 66 06  // ..:..[C .RMC .f.
    DD90: 02 29 00 00 02 68 00 CB 05 02 8C 00 32 00 52 33  // .)...h......2.R3
    DDA0: 5B 02 29 00 00 52 33 5B D2 03 02 01 00 00 37 00  // [.)..R3[......7.
    DDB0: 00 0E 25 00 20 52 14 08 25 00 0F 42 29 00 63 07  // ..%. R..%..B).c.
    DDC0: 35 00 63 0A 3D 00 63 01 21 01 63 00 7B 01 63 09  // 5.c.=.c.!.c.{.c.
    DDD0: BB 01 63 08 83 02 63 0B 9B 02 5A 5A 5B 0D 65 C4  // ..c...c...ZZ[.e.
    DDE0: 48 08 43 47 03 03 0A 46 48 66 FF 2D 0D 42 B4 03  // H.CG...FHf.-.B..
    DDF0: 56 00 40 20 25 00 05 2D 0A 42 40 20 25 00 02 03  // V.@ %..-.B@ %...
    DE00: 0A 48 40 01 04 06 48 00 00 01 64 05 48 04 00 07  // .H@...H...d.H...
    DE10: E5 05 48 FC 07 A5 05 48 8F 03 0A 48 46 56 00 41  // ..H....H...HFV.A
    DE20: 3D E5 00 04 47 96 00 03 05 41 00 80 01 01 4B 25  // =...G....A....K%
    DE30: 02 01 44 96 00 09 4D 41 7F FF 03 E5 41 02 5C FA  // ..D...MA....A.\.
    DE40: D3 48 FC 41 5C 52 C5 48 7F FE 41 3D A5 00 00 49  // .H.A\R.H..A=...I
    DE50: CC 00 07 A5 C1 48 7F 66 FF 2D 0D 42 78 03 2D 0D  // .....H.f.-.Bx.-.
    DE60: 42 06 00 56 00 41 3D A5 02 14 49 E3 02 03 25 41  // B..V.A=...I...%A
    DE70: 20 43 E3 02 0D A5 C1 48 80 66 FF 2D 0D 42 50 03  //  C.....H.f.-.BP.
    DE80: 03 04 40 00 00 3E 05 40 00 00 00 00 44 47 03 03  // ..@..>.@....DG..
    DE90: 21 43 00 03 E2 41 44 4C E4 41 05 00 44 07 01 3D  // !C...ADL.A..D..=
    DEA0: A4 00 04 00 49 07 01 3D 04 01 00 00 47 0F 01 2D  // ....I..=....G..-
    DEB0: 0D 42 0C 00 43 D8 00 03 04 40 06 00 03 24 41 0A  // .B..C....@...$A.
    DEC0: 00 03 64 41 0B 00 43 EC 02 07 65 C4 48 F7 03 0A  // ..dA..C...e.H...
    DED0: 46 48 56 00 41 3D E5 00 04 47 3C 01 07 25 E2 48  // FHV.A=...G<..%.H
    DEE0: F9 43 42 01 5C 25 E2 48 F9 02 4A 65 E0 48 01 44  // .CB.\%.H..Je.H.D
    DEF0: 42 01 07 25 E0 48 F8 4A 65 E0 48 01 44 4F 01 2D  // B..%.H.Je.H.DO.-
    DF00: E5 41 01 2D 0D 48 10 00 3E E5 41 04 45 2D 01 03  // .A.-.H..>.A.E-..
    DF10: 0A 48 46 0D 25 D1 48 02 4A 25 D1 48 04 44 70 01  // .HF.%.H.J%.H.Dp.
    DF20: 43 47 03 07 25 D1 48 FD 4A 25 D1 48 04 49 80 01  // CG..%.H.J%.H.I..
    DF30: 0D 65 C4 48 08 56 00 41 4A 65 E0 48 01 44 90 01  // .e.H.V.AJe.H.D..
    DF40: 5C 25 E0 48 F8 04 51 02 4A 65 E0 48 01 44 A0 01  // \%.H..Q.Je.H.D..
    DF50: 2D A5 41 01 2D 0D 48 10 00 3E A5 41 04 45 90 01  // -.A.-.H..>.A.E..
    DF60: 43 47 03 3D 05 01 30 75 00 00 47 4D 02 03 00 46  // CG.=..0u..GM...F
    DF70: 20 49 5C 8D 29 49 0F F0 40 0F 01 E5 23 49 C0 51  //  I\.)I..@...#I.Q
    DF80: 01 03 05 40 00 00 1E 00 3D 05 01 60 EA 00 00 47  // ...@....=..`...G
    DF90: F1 01 03 05 40 00 00 44 00 01 02 20 49 40 51 C8  // ....@..D... I@Q.
    DFA0: 0D 25 D3 48 04 5C 25 D3 48 0F 10 5C 25 D3 48 0F  // .%.H.\%.H..\%.H.
    DFB0: 30 5C 25 D3 48 0F 70 5C 25 D3 48 0F F0 0D 25 D3  // 0\%.H.p\%.H...%.
    DFC0: 48 01 01 02 20 49 46 51 C8 5C 25 D3 48 0F E0 5C  // H... IFQ.\%.H..\
    DFD0: 25 D3 48 0F C0 5C 25 D3 48 0F 80 07 25 D3 48 0F  // %.H..\%.H...%.H.
    DFE0: 07 25 D3 48 FB 51 C8 3D A5 00 00 49 4D 02 0D 25  // .%.H.Q.=...IM..%
    DFF0: 25 49 10 52 41 03 0A 46 48 56 08 48 20 25 00 02  // %I.RA..FHV.H %..
    E000: 03 22 48 40 0D 25 05 48 01 0D E5 06 48 10 03 0A  // ."H@.%.H....H...
    E010: 48 46 0D A5 D3 48 01 51 14 3C E5 23 49 C0 44 47  // HF...H.Q.<.#I.DG
    E020: 03 0D 25 D3 48 01 51 14 43 47 03 07 A5 D3 48 FE  // ..%.H.Q.CG....H.
    E030: 56 00 40 20 25 00 02 03 0A 48 40 07 E5 06 48 EF  // V.@ %....H@...H.
    E040: 43 47 03 08 A5 00 1B 66 FF 2D 0D 42 78 03 03 21  // CG.....f.-.Bx..!
    E050: 43 00 03 A2 40 44 03 0C 40 02 00 4C A4 40 00 00  // C...@D..@..L.@..
    E060: 49 C3 02 2D 0C 42 04 00 43 AE 02 2D 0D 42 06 00  // I..-.B..C..-.B..
    E070: 3D A4 00 00 00 44 E3 02 03 24 41 00 00 3E 25 41  // =....D...$A..>%A
    E080: FF 44 E3 02 2D 0A 42 40 43 C8 02 03 04 40 01 00  // .D..-.B@C....@..
    E090: 03 65 41 08 01 0A C3 48 40 01 05 DA 48 88 88 01  // .eA....H@...H...
    E0A0: 00 01 F2 DB 48 40 01 BA E2 48 40 01 BA F2 48 40  // ....H@...H@...H@
    E0B0: 01 BA 02 49 40 01 BA 12 49 40 01 25 E1 48 20 01  // ...I@...I@.%.H .
    E0C0: 25 F1 48 20 01 25 01 49 20 01 25 11 49 20 01 2A  // %.H .%.I .%.I .*
    E0D0: E1 48 41 01 2A F1 48 41 01 2A 01 49 41 01 2A 11  // .HA.*.HA.*.IA.*.
    E0E0: 49 41 3D 65 00 0B 44 47 03 5C A2 C8 48 DF 41 3A  // IA=e..DG.\..H.A:
    E0F0: 00 00 5B 7A 84 00 0C 00 FF FF FF 00 02 3F 00 00  // ..[z.........?..
    E100: 00 5F 00 08 40 9C 00 00 03 3F 00 00 00 5F 00 08  // ._..@....?..._..
    E110: FF FF FF 00 03 3F 00 00 3F 57 20 10 00 00 00 00  // .....?..?W .....
    E120: 3F 00 05 00 39 00 00 4B 00 00 80 01 3A 00 00 80  // ?...9..K....:...
    E130: 02 1B 00 00 80 03 00 00 00 80 08 34 25 00 80 09  // ...........4%...
    E140: 1C 25 00 80 0A 00 1B 00 9F 10 14 3F 00 80 11 01  // .%.........?....
    E150: 38 00 9F 18 00 4A 00 9F FF 00 00 FF 03 02 01 00  // 8....J..........
    E160: 01 03 02 01 00 01 03 02 01 00 01 03 02 01 00 01  // ................
    E170: 03 02 01 00 01 03 02 01 00 01 4C 02 01 02 00 08  // ..........L.....
    E180: 37 00 00 3D 0D 00 00 00 44 CE 01 56 00 41 03 21  // 7..=....D..V.A.!
    E190: 41 01 09 25 41 0F 15 0D 41 02 03 0A 40 42 66 FF  // A..%A...A...@Bf.
    E1A0: 2D 0D 42 34 02 2D 0A 42 41 03 0C 48 02 00 0D A5  // -.B4.-.BA..H....
    E1B0: 68 48 01 54 08 68 48 03 0C 48 00 00 03 F9 41 01  // hH.T.hH..H....A.
    E1C0: 15 3D 41 04 5C BA 00 5C 8F 41 03 0A 42 40 4A 25  // .=A.\..\.A..B@J%
    E1D0: 00 5C 01 49 81 00 0D 0D 00 5C 01 01 0D 25 00 5C  // .\.I.....\...%.\
    E1E0: 10 4A 25 00 5C 20 44 67 00 07 25 00 5C EF 4A 25  // .J%.\ Dg..%.\.J%
    E1F0: 00 5C 20 49 74 00 0D 25 03 5C 40 56 00 41 03 09  // .\ It..%.\@V.A..
    E200: 41 00 3B 02 41 03 3B 41 00 1B 25 41 04 01 A2 01  // A.;.A.;A..%A....
    E210: 5C 41 03 69 41 01 15 2D 41 04 01 2A 01 5C 41 56  // \A.iA..-A..*.\AV
    E220: 00 40 0F E5 40 80 03 73 40 00 01 02 06 5C 40 56  // .@..@..s@....\@V
    E230: 00 40 03 6B 40 00 01 02 06 5C 40 03 63 40 00 01  // .@.k@....\@.c@..
    E240: 02 06 5C 40 03 7B 40 00 09 65 40 0F 01 02 06 5C  // ..\@.{@..e@....\
    E250: 40 3E 25 41 04 47 10 01 33 25 41 04 2D 05 46 04  // @>%A.G..3%A.-.F.
    E260: 00 00 00 03 63 40 00 01 02 06 5C 40 03 6B 40 00  // ....c@....\@.k@.
    E270: 01 02 06 5C 40 03 73 40 00 01 02 06 5C 40 03 7B  // ...\@.s@....\@.{
    E280: 40 00 01 02 06 5C 40 43 D7 00 0D 25 03 5C 02 0D  // @....\@C...%.\..
    E290: 25 01 5C 01 03 29 40 01 21 25 40 0A 2D 25 40 32  // %.\..)@.!%@.-%@2
    E2A0: 4A 25 04 5C 01 49 42 01 51 0A 33 25 40 01 3E 25  // J%.\.IB.Q.3%@.>%
    E2B0: 40 00 49 26 01 02 65 01 01 43 CA 01 4A 05 04 5C  // @.I&..e..C..J..\
    E2C0: F0 8F FF 00 44 54 01 02 65 01 02 43 CA 01 01 05  // ....DT..e..C....
    E2D0: 06 5C 01 00 00 80 03 00 40 06 5C 02 6A 01 40 02  // .\......@.\.j.@.
    E2E0: B8 01 04 5C 08 A5 01 1F 3D A5 01 00 46 7C 01 02  // ...\....=...F|..
    E2F0: 65 01 03 43 CA 01 32 A5 01 01 3D 8D 00 00 00 44  // e..C..2...=....D
    E300: CA 01 3D A5 01 00 44 CA 01 03 31 41 01 03 19 40  // ..=...D...1A...@
    E310: 00 56 18 40 3B 02 40 03 28 40 06 5C 03 68 40 06  // .V.@;.@.(@.\.h@.
    E320: 5C 03 A8 40 06 5C 03 E8 40 06 5C 04 02 00 40 3E  // \..@.\..@.\...@>
    E330: 25 41 04 47 CA 01 33 25 41 04 2D 05 46 04 00 00  // %A.G..3%A.-.F...
    E340: 00 43 9D 01 3A 00 00 5B 66 FF 2D 0D 42 34 02 03  // .C..:..[f.-.B4..
    E350: 0C 48 00 00 01 8D 08 5C 32 00 01 05 09 5C 00 1C  // .H.....\2....\..
    E360: 02 00 01 05 0A 5C 10 11 3D 12 2D 0D 42 04 00 2C  // .....\..=.-.B..,
    E370: 25 00 01 3D 25 00 06 49 D5 01 56 08 48 03 25 41  // %..=%..I..V.H.%A
    E380: 10 0D 65 97 48 40 07 65 97 48 BF 33 25 41 01 3E  // ..e.H@.e.H.3%A.>
    E390: 25 41 00 49 07 02 0D 25 3B 48 01 54 30 3B 48 0D  // %A.I...%;H.T0;H.
    E3A0: 25 3C 48 01 54 30 3C 48 51 32 5B 7A 18 00 00 00  // %<H.T0<HQ2[z....
    E3B0: 00 00 1C 00 04 00 38 00 08 00 54 00 0C 00 70 00  // ......8...T...p.
    E3C0: 10 00 8C 00 14 00 5C 00 01 02 00 04 02 25 01 04  // ......\......%..
    E3D0: 03 31 41 00 09 0D 41 0F 00 15 0D 41 01 66 FF 2D  // .1A...A....A.f.-
    E3E0: 0D 42 50 00 2D 0A 42 41 03 0C 48 00 00 07 A5 68  // .BP.-.BA..H....h
    E3F0: 48 FE 01 0D 68 48 11 11 50 02 4A 0D 6B 48 01 00  // H...hH..P.J.kH..
    E400: 49 41 00 02 25 01 13 54 08 68 48 54 00 6A 48 3A  // IA..%..T.hHT.jH:
    E410: 00 00 5B 7A 0C 00 00 00 04 00 08 00 0C 00 10 00  // ..[z............
    E420: 14 00 96 00 01 01 04 00 37 00 00 52 3E 55 00 00  // ........7..R>U..
    E430: 02 E4 00 16 00 66 1C 2D 0C 42 04 00 52 12 52 3E  // .....f.-.B..R.R>
    E440: 01 0C D8 09 06 00 01 64 80 0A 1C 00 02 05 00 08  // .......d........
    E450: 00 00 00 02 0C 01 08 00 52 1F 03 08 41 80 0A 09  // ........R...A...
    E460: 0D 41 03 00 66 FF 2D 0D 42 92 00 2D 0A 42 41 03  // .A..f.-.B..-.BA.
    E470: 24 41 00 00 01 05 82 00 0C 00 20 C0 5C 0A 83 00  // $A........ .\...
    E480: 00 FC 41 02 05 00 30 75 00 03 52 3F 02 05 00 A0  // ..A...0u..R?....
    E490: 86 01 03 52 3F 02 05 00 48 E8 01 03 52 3F 02 05  // ...R?...H...R?..
    E4A0: 00 30 75 00 03 52 3F 02 05 00 98 AB 02 03 52 3F  // .0u..R?.......R?
    E4B0: 5B 7A 04 00 18 10 08 04 AC 01 01 01 08 00 37 00  // [z............7.
    E4C0: 00 03 88 00 28 08 03 09 00 00 03 2A 41 00 03 22  // ....(......*A.."
    E4D0: 43 41 01 22 28 08 44 5C 62 28 08 F8 41 42 22 00  // CA."(.D\b(..AB".
    E4E0: 63 01 39 00 63 08 7E 00 63 04 07 01 5A 5A 43 A6  // c.9.c.~.c...ZZC.
    E4F0: 01 01 24 93 0A 00 00 01 24 94 0A 01 00 01 04 A3  // ..$.....$.......
    E500: 0A 02 00 01 04 A4 0A 06 00 01 04 A5 0A 0A 00 01  // ................
    E510: 04 A6 0A 0E 00 01 04 A7 0A 12 00 01 04 A8 0A 16  // ................
    E520: 00 01 04 A9 0A 1A 00 01 04 AA 0A 1E 00 2D 0D 42  // .............-.B
    E530: 22 00 43 9B 01 5B 21 65 00 02 03 22 43 40 03 0A  // ".C..[!e..."C@..
    E540: 41 44 56 08 40 37 02 00 4C 09 41 01 49 A3 00 54  // ADV.@7..L.A.I..T
    E550: 20 00 00 54 30 00 00 0F 25 40 01 15 0D 41 01 4C  //  ..T0...%@...A.L
    E560: 09 41 01 49 BA 00 0F 25 40 02 54 28 00 00 54 38  // .A.I...%@.T(..T8
    E570: 00 00 37 00 00 3E 25 40 03 49 D5 00 03 2A 41 00  // ..7..>%@.I...*A.
    E580: 2D 25 41 04 03 22 43 41 07 0A 52 0D 45 52 3E 03  // -%A.."CA..R.ER>.
    E590: 24 40 16 00 21 25 40 04 55 00 00 02 EA 00 00 2C  // $@..!%@.U......,
    E5A0: E2 00 40 66 1C 03 0C 40 08 00 3E 0D 40 00 00 44  // ..@f...@..>.@..D
    E5B0: 01 01 2D 0C 42 08 00 52 12 37 00 00 43 9B 01 01  // ..-.B..R.7..C...
    E5C0: 05 91 0A 00 00 00 00 3C 0D 92 0A 00 00 44 9B 01  // .......<.....D..
    E5D0: 3C 25 E7 0A 07 49 39 01 01 05 91 0A 0E 00 00 00  // <%...I9.........
    E5E0: 03 00 01 92 0A 5C 05 92 0A 00 FF 00 FF 0F 00 FF  // .....\..........
    E5F0: 00 01 05 32 0A 05 00 00 00 51 0A 01 05 32 0A 01  // ...2.....Q...2..
    E600: 00 00 00 03 00 41 E7 0A 3E 62 41 41 49 4B 01 51  // .....A..>bAAIK.Q
    E610: 0A 3E 25 41 00 44 74 01 3E 25 41 07 49 9B 01 01  // .>%A.Dt.>%A.I...
    E620: 05 91 0A 0E 00 00 00 01 02 92 0A 01 01 05 91 0A  // ................
    E630: 03 00 00 00 03 38 41 92 0A 15 25 41 04 3C E2 9A  // .....8A...%A.<..
    E640: 0A 41 45 9B 01 4A E5 99 0A 04 44 9B 01 5C 25 F3  // .AE..J....D..\%.
    E650: 09 FE 22 2D 65 00 01 3E 65 00 04 45 12 00 01 1A  // .."-e..>e..E....
    E660: 28 08 00 5B D1 00 01 01 08 00 37 00 00 66 FF 2D  // (..[......7..f.-
    E670: 0D 42 BD 00 56 00 41 03 21 41 00 15 0D 41 02 2D  // .B..V.A.!A...A.-
    E680: 0A 42 41 03 04 01 00 00 66 FF 2D 0D 42 C9 00 03  // .BA.....f.-.B...
    E690: 05 00 00 00 00 40 56 00 40 54 00 00 00 03 4C 00  // .....@V.@T....L.
    E6A0: 00 00 01 02 00 C2 00 01 0A 00 00 01 03 98 41 01  // ..............A.
    E6B0: 00 56 08 41 03 22 43 41 4C 8A 41 44 49 5F 00 2D  // .V.A."CAL.ADI_.-
    E6C0: 65 41 01 2D 25 41 01 3E 39 41 00 45 50 00 3E 71  // eA.-%A.>9A.EP.>q
    E6D0: 41 00 47 A1 00 33 71 41 00 03 39 41 00 33 25 41  // A.G..3qA..9A.3%A
    E6E0: 01 03 22 43 41 4C 8A 41 44 49 79 00 0F 8A 41 44  // .."CAL.ADIy...AD
    E6F0: 33 65 41 01 3E 65 41 00 49 79 00 01 1A 00 00 01  // 3eA.>eA.Iy......
    E700: 01 9A 01 00 41 2D 0D 42 02 00 2D 25 40 01 3E 25  // ....A-.B..-%@.>%
    E710: 40 04 49 39 00 01 05 00 C2 00 00 00 E0 5B 7A 14  // @.I9.........[z.
    E720: 00 6F 22 70 22 3D 26 DF 26 40 22 41 22 00 00 00  // .o"p"=&.&@"A"...
    E730: 01 00 02 00 03 00 E5 00 02 02 14 00 3D 25 02 01  // ............=%..
    E740: 44 1C 00 3D 25 02 02 44 3E 00 3D 25 02 03 44 63  // D..=%..D>.=%..Dc
    E750: 00 5B 2C 02 01 41 03 05 00 FF FF FF FF 33 02 00  // .[,..A.......3..
    E760: 40 3E 01 00 00 48 39 00 2C 05 01 01 00 00 00 2C  // @>...H9.,......,
    E770: 02 00 40 5B 3D B9 02 02 44 5E 00 3D 01 00 01 45  // ..@[=...D^.=...E
    E780: 51 00 32 01 00 01 5B 32 01 01 00 02 01 00 01 02  // Q.2...[2........
    E790: B9 02 02 5B 2C 01 00 01 5B 3D 05 00 00 00 00 00  // ...[,...[=......
    E7A0: 49 77 00 3D 05 01 00 00 00 00 44 E0 00 56 00 43  // Iw.=......D..V.C
    E7B0: 03 0D 40 1F 00 03 01 00 00 3D 05 01 00 00 00 00  // ..@......=......
    E7C0: 44 95 00 03 01 00 01 03 65 40 20 03 22 43 40 4C  // D.......e@ ."C@L
    E7D0: 02 00 44 49 A7 00 33 25 40 01 43 95 00 2D 2A 40  // ..DI..3%@.C..-*@
    E7E0: 40 1B 25 40 01 03 22 43 40 03 02 00 44 03 01 41  // @.%@.."C@...D..A
    E7F0: 01 7D 02 00 00 27 05 40 02 00 00 00 2D 02 41 00  // .}...'.@....-.A.
    E800: 1B 05 41 01 2D 02 41 40 3E 02 00 41 44 E0 00 03  // ..A.-.A@>..AD...
    E810: 02 00 41 43 B7 00 02 02 00 00 5B 00 D1 01 02 01  // ..AC......[.....
    E820: 04 04 37 00 00 42 21 00 63 07 29 00 63 03 66 00  // ..7..B!.c.).c.f.
    E830: 63 02 D5 00 63 04 FA 00 63 0C 85 01 63 0D A8 01  // c...c...c...c...
    E840: 5A 5A 43 D0 01 01 0D 1D 48 9F 0F 01 05 1E 48 7D  // ZZC.....H.....H}
    E850: 00 00 00 01 05 1F 48 7D 00 00 00 66 06 01 4C 1F  // ......H}...f..L.
    E860: 48 39 00 03 24 46 42 00 3E 25 46 00 44 58 00 01  // H9..$FB.>%F.DX..
    E870: 25 1F 48 00 4A 25 1B 48 10 49 D0 01 0D E5 1B 48  // %.H.J%.H.I.....H
    E880: 02 5B 4A A5 CB 05 01 49 D0 01 4A 25 1B 48 01 44  // .[J....I..J%.H.D
    E890: D0 01 4A 25 1C 48 10 44 76 00 4A E5 1B 48 02 49  // ..J%.H.Dv.J..H.I
    E8A0: 91 00 4A 25 1C 48 08 49 D0 01 43 C5 00 4A E5 1B  // ..J%.H.I..C..J..
    E8B0: 48 01 49 D0 01 4A 25 1B 48 10 44 C5 00 0D A5 1B  // H.I..J%.H.D.....
    E8C0: 48 03 0D 65 1B 48 03 01 0D 1D 48 00 00 5C 25 1B  // H..e.H....H..\%.
    E8D0: 48 EF 01 4A 25 1C 48 10 44 B7 00 01 0D 1D 48 9F  // H..J%.H.D.....H.
    E8E0: 0F 07 E5 1B 48 FC 0D E5 1F 48 01 0D 25 1B 48 11  // ....H....H..%.H.
    E8F0: 5B 66 06 03 24 46 42 00 3E 25 46 00 49 D0 01 4A  // [f..$FB.>%F.I..J
    E900: 25 1B 48 01 44 D0 01 4A 25 1C 48 10 44 EB 00 5C  // %.H.D..J%.H.D..\
    E910: E5 1B 48 FE 02 5B 4A 65 D0 05 02 44 07 01 0D 25  // ..H..[Je...D...%
    E920: 23 48 01 3D 8D 00 00 00 44 84 01 03 05 46 80 F0  // #H.=....D....F..
    E930: FA 02 56 00 41 03 19 41 00 21 05 41 FF 0F 00 00  // ..V.A..A.!.A....
    E940: 27 02 46 40 3E 05 41 00 00 00 00 44 37 01 2D 0D  // '.F@>.A....D7.-.
    E950: 40 01 00 01 8A 1D 48 40 56 00 41 03 19 41 00 21  // @.....H@V.A..A.!
    E960: 02 40 41 27 02 46 40 01 A5 22 48 0C 01 0A 22 48  // .@A'.F@.."H..."H
    E970: 40 15 05 40 04 56 00 41 03 29 41 00 2D 0D 41 01  // @..@.V.A.)A.-.A.
    E980: 00 21 02 40 41 1B 05 40 08 01 0A 20 48 40 0D E5  // .!.@A..@... H@..
    E990: 20 48 C0 07 25 23 48 FE 4A 65 23 48 01 49 7C 01  //  H..%#H.Je#H.I|.
    E9A0: 5B 4A 25 1B 48 01 44 9D 01 4A 25 1B 48 10 49 D0  // [J%.H.D..J%.H.I.
    E9B0: 01 4A 25 1C 48 10 44 95 01 07 E5 1F 48 FE 0D 25  // .J%.H.D.....H..%
    E9C0: 1B 48 11 5B 4A 25 1B 48 01 44 D0 01 4A 25 1B 48  // .H.[J%.H.D..J%.H
    E9D0: 10 44 D0 01 4A 25 1C 48 10 44 B8 01 07 A5 1B 48  // .D..J%.H.D.....H
    E9E0: FC 07 65 1B 48 FC 5C 25 1B 48 EF 01 5B 00 71 00  // ..e.H.\%.H..[.q.
    E9F0: 03 01 08 00 37 00 00 56 00 01 3D E5 00 20 48 1B  // ....7..V..=.. H.
    EA00: 00 03 39 43 00 03 02 01 44 03 05 00 00 00 10 C0  // ..9C....D.......
    EA10: 2D 09 00 00 01 02 82 00 00 03 00 40 83 00 56 00  // -..........@..V.
    EA20: 41 03 31 41 00 75 02 40 41 03 25 41 20 33 31 41  // A.1A.u.@A.%A 31A
    EA30: 00 3D E2 00 41 47 61 00 2D 0D 00 04 00 01 02 82  // .=..AGa.-.......
    EA40: 00 00 02 00 00 83 00 6E 02 00 41 0F 01 40 00 02  // .......n..A..@..
    EA50: 02 00 40 33 05 01 01 00 00 00 08 02 00 01 5B 00  // ..@3..........[.
    EA60: CE 00 03 01 00 10 37 00 00 56 00 40 4A 25 00 EC  // ......7..V.@J%..
    EA70: 01 44 30 00 4A 25 05 EC 1E 49 30 00 03 25 40 01  // .D0.J%...I0..%@.
    EA80: 01 05 05 EC 03 00 00 00 4A 65 05 EC 0F 49 28 00  // ........Je...I(.
    EA90: 3D 65 02 00 49 3C 00 2C 28 02 09 08 3D E5 02 00  // =e..I<.,(...=...
    EAA0: 49 48 00 2C A8 02 09 08 3D 65 02 02 49 6B 00 01  // IH.,....=e..Ik..
    EAB0: 05 82 00 10 00 60 C0 01 01 83 00 00 01 05 82 00  // .....`..........
    EAC0: 14 00 60 C0 02 05 00 0C 02 00 00 3D E5 02 03 49  // ..`........=...I
    EAD0: 81 00 01 01 82 00 01 02 05 01 0C 02 00 00 43 81  // ..............C.
    EAE0: 00 54 00 63 C0 01 01 64 C0 00 01 21 65 C0 02 01  // .T.c...d...!e...
    EAF0: 01 66 C0 01 01 31 67 C0 02 01 01 E8 C0 03 3D 65  // .f...1g.......=e
    EB00: 02 01 44 AE 00 3D E5 02 01 44 AE 00 51 02 4A E5  // ..D..=...D..Q.J.
    EB10: A0 21 80 49 AE 00 3E 25 40 01 49 CD 00 01 05 05  // .!.I..>%@.I.....
    EB20: EC 01 00 00 00 4A 65 05 EC 0F 49 C5 00 5B F9 02  // .....Je...I..[..
    EB30: 02 01 00 00 37 00 00 3D 25 01 01 44 7B 00 3D 25  // ....7..=%..D{.=%
    EB40: 01 02 44 68 01 3D 25 01 00 49 CA 02 3D 05 00 00  // ..Dh.=%..I..=...
    EB50: 00 00 00 49 39 00 3A 00 00 0D 25 68 18 01 4A 65  // ...I9.:...%h..Je
    EB60: 68 18 01 44 30 00 5B 54 20 68 18 52 3C 03 00 40  // h..D0.[T h.R<..@
    EB70: 24 01 3E 39 40 00 44 77 00 4A A5 24 01 08 44 4B  // $.>9@.Dw.J.$..DK
    EB80: 00 03 39 40 00 3E E5 40 00 49 62 00 03 E5 40 20  // ..9@.>.@.Ib...@ 
    EB90: 01 02 24 01 40 4A A5 24 01 08 44 67 00 4A A5 24  // ..$.@J.$..Dg.J.$
    EBA0: 01 10 44 6F 00 55 38 00 5B 3D 65 01 02 44 D7 00  // ..Do.U8.[=e..D..
    EBB0: 02 05 00 60 EA 00 00 52 3C 3C F9 24 01 00 44 C1  // ...`...R<<.$..D.
    EBC0: 00 07 25 15 01 FE 4A A5 24 01 10 44 98 00 03 00  // ..%...J.$..D....
    EBD0: 40 24 01 03 F9 40 00 3E 25 40 00 49 B4 00 03 25  // @$...@.>%@.I...%
    EBE0: 40 68 01 02 24 01 40 4A A5 24 01 10 44 B9 00 5D  // @h..$.@J.$..D..]
    EBF0: 05 00 00 00 00 FF 40 7E 05 00 52 29 07 0D 18 01  // ......@~..R)....
    EC00: F8 FE 43 3A 01 02 05 00 00 46 C3 23 07 25 15 01  // ..C:.....F.#.%..
    EC10: FE 4A A5 01 17 03 44 3A 01 56 08 40 03 31 40 01  // .J....D:.V.@.1@.
    EC20: 15 0D 40 0E 0F 0D 40 0F 04 01 0A 18 17 40 5C B1  // ..@...@......@\.
    EC30: 19 17 FC 01 51 05 07 A5 01 17 FC 01 25 05 17 40  // ....Q.......%..@
    EC40: 01 05 02 17 00 00 3C 00 01 65 1C 17 01 54 08 04  // ......<..e...T..
    EC50: 17 01 A5 05 17 E8 0D A5 19 17 10 4A 65 24 17 02  // ...........Je$..
    EC60: 44 2D 01 0D 65 19 17 03 01 01 42 01 00 01 01 46  // D-..e.....B....F
    EC70: 01 00 01 01 4A 01 00 01 01 4E 01 00 01 01 52 01  // ....J....N....R.
    EC80: 00 01 01 56 01 00 3D 65 01 02 49 67 01 5C 0D 18  // ...V..=e..Ig.\..
    EC90: 01 F8 FF 01 01 5B 56 00 41 03 31 41 01 09 25 41  // .....[V.A.1A..%A
    ECA0: 03 15 25 41 02 66 FF 2D 0D 42 D1 02 2D 0A 42 41  // ..%A.f.-.B..-.BA
    ECB0: 26 05 00 0A 00 00 00 03 04 41 00 00 27 02 41 40  // &........A..'.A@
    ECC0: 3E 05 40 00 00 01 00 45 A1 01 03 0D 40 FF FF 66  // >.@....E....@..f
    ECD0: FF 2D 0D 42 E1 02 56 00 41 03 39 41 01 15 25 41  // .-.B..V.A.9A..%A
    ECE0: 02 2D 0A 42 41 03 0C 48 00 00 01 0A 30 1B 40 3A  // .-.BA..H....0.@:
    ECF0: 00 00 3D 65 01 0B 49 2C 02 20 05 00 64 00 00 00  // ..=e..I,. ..d...
    ED00: 03 0C 48 02 00 03 00 41 40 01 0F 25 41 10 09 0D  // ..H....A@..%A...
    ED10: 41 DF F7 4B A5 01 04 44 F0 01 0F 65 41 08 03 0C  // A..K...D...eA...
    ED20: 48 00 00 4A 05 9C 1B 01 00 00 00 44 15 02 03 0C  // H..J.......D....
    ED30: 48 02 00 3C 02 41 01 40 49 15 02 3C 02 40 01 41  // H..<.A.@I..<.@.A
    ED40: 44 CA 02 03 0C 48 02 00 07 25 40 01 EF 01 02 41  // D....H...%@....A
    ED50: 01 40 01 0A 40 01 41 43 CA 02 56 00 40 03 8D 40  // .@..@.AC..V.@..@
    ED60: 0C 00 3D 65 01 18 44 4F 02 03 8D 40 3E 00 3D 65  // ..=e..DO...@>.=e
    ED70: 01 19 44 4F 02 03 A9 40 01 33 A5 40 14 03 31 40  // ..DO...@.3.@..1@
    ED80: 01 09 25 40 03 15 25 40 04 0F 0D 40 01 01 4B A5  // ..%@..%@...@..K.
    ED90: 01 04 44 6C 02 0F 0D 40 00 02 56 00 41 03 29 41  // ..Dl...@..V.A.)A
    EDA0: 01 33 25 41 14 03 0C 48 00 00 4A 05 9C 1B 01 00  // .3%A...H..J.....
    EDB0: 00 00 44 A8 02 03 0C 48 02 00 4A 25 40 01 10 49  // ..D....H..J%@..I
    EDC0: A8 02 3C 22 43 01 41 49 A8 02 03 1A 48 40 3C 0A  // ..<"C.AI....H@<.
    EDD0: 00 01 40 44 CA 02 03 1A 48 40 07 25 00 01 FE 03  // ..@D....H@.%....
    EDE0: 0C 48 02 00 01 22 43 01 41 07 0D 40 01 EF F7 03  // .H..."C.A..@....
    EDF0: 1A 48 40 01 0A 00 01 40 3A 00 00 5B 7A 28 00 00  // .H@....@:..[z(..
    EE00: CA 9A 3B 80 7C 81 4A 00 2F 68 59 00 94 35 77 00  // ..;.|.J./hY..5w.
    EE10: 00 00 00 00 02 04 00 00 04 08 00 00 26 0C 00 00  // ............&...
    EE20: 28 10 00 00 2A 14 00 FF FF FF FF FF FF FF FF FF  // (...*...........
    EE30: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EE40: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EE50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    EE60: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    EE70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    EE80: 00 00 00 00                                      // ....


WSMT
----
[000h 0000   4]                    Signature : "WSMT"    [Windows SMM Security Migrations Table]
[004h 0004   4]                 Table Length : 00000028
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 36
[00Ah 0010   6]                       Oem ID : "ALWARE"
[010h 0016   8]                 Oem Table ID : "ALIENWRE"
[018h 0024   4]                 Oem Revision : 01072009
[01Ch 0028   4]              Asl Compiler ID : "AMI "
[020h 0032   4]        Asl Compiler Revision : 00010013

[024h 0036   4]             Protection Flags : 00000007
                          FIXED_COMM_BUFFERS : 1
           COMM_BUFFER_NESTED_PTR_PROTECTION : 1
                  SYSTEM_RESOURCE_PROTECTION : 1

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 36 41 4C 57 41 52 45  // WSMT(....6ALWARE
    0010: 41 4C 49 45 4E 57 52 45 09 20 07 01 41 4D 49 20  // ALIENWRE. ..AMI 
    0020: 13 00 01 00 07 00 00 00                          // ........


