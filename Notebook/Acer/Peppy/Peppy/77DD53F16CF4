
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20191213
Copyright (c) 2000 - 2019 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  MCFG  0x0000003C  0x01  "CORE  "  "COREBOOT"  0x00000000  "CORE"   0x00000000
 02)  APIC  0x0000005C  0x01  "CORE  "  "COREBOOT"  0x00000000  "CORE"   0x00000000
 03)  SSDT  0x0000005C  0x02  "CORE  "  "COREBOOT"  0x0000002A  "CORE"   0x0000002A
 04)  DSDT  0x00004431  0x02  "COREv4"  "COREBOOT"  0x20110725  "INTL"   0x20090123
 05)  FACP  0x000000F4  0x03  "CORE  "  "COREBOOT"  0x00000000  "CORE"   0x00000001
 06)  SSDT  0x000008A0  0x02  "CORE  "  "COREBOOT"  0x0000002A  "CORE"   0x0000002A
 07)  HPET  0x00000038  0x01  "CORE  "  "COREBOOT"  0x00000000  "CORE"   0x00000000
 08)  FACS  0x00000040  0x01

Found 8 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 0000005C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 9D
[00Ah 0010   6]                       Oem ID : "CORE  "
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 02
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 01 [I/O APIC]
[03Dh 0061   1]                       Length : 0C
[03Eh 0062   1]                  I/O Apic ID : 02
[03Fh 0063   1]                     Reserved : 00
[040h 0064   4]                      Address : FEC00000
[044h 0068   4]                    Interrupt : 00000000

[048h 0072   1]                Subtable Type : 02 [Interrupt Source Override]
[049h 0073   1]                       Length : 0A
[04Ah 0074   1]                          Bus : 00
[04Bh 0075   1]                       Source : 00
[04Ch 0076   4]                    Interrupt : 00000002
[050h 0080   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[052h 0082   1]                Subtable Type : 02 [Interrupt Source Override]
[053h 0083   1]                       Length : 0A
[054h 0084   1]                          Bus : 00
[055h 0085   1]                       Source : 09
[056h 0086   4]                    Interrupt : 00000009
[05Ah 0090   2]        Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3

Raw Table Data: Length 92 (0x5C)

    0000: 41 50 49 43 5C 00 00 00 01 9D 43 4F 52 45 20 20  // APIC\.....CORE  
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 00 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 02 01 00 00 00 01 0C 02 00  // ................
    0040: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0050: 00 00 02 0A 00 09 09 00 00 00 0D 00              // ............


DSDT
----
DefinitionBlock ("", "DSDT", 2, "COREv4", "COREBOOT", 0x20110725)
{
    /*
     * iASL Warning: There was 1 external control method found during
     * disassembly, but only 0 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CPU0, UnknownObj)
    External (_PR_.CPU0._PSS, UnknownObj)
    External (_PR_.CPU1, UnknownObj)
    External (_PR_.CPU2, UnknownObj)
    External (_PR_.CPU3, UnknownObj)
    External (_PR_.CPU4, UnknownObj)
    External (_PR_.CPU5, UnknownObj)
    External (_PR_.CPU6, UnknownObj)
    External (_PR_.CPU7, UnknownObj)
    External (_TZ_.SKIN, UnknownObj)
    External (_TZ_.THRT, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (S0EN, UnknownObj)
    External (S1EN, UnknownObj)
    External (S2EN, UnknownObj)
    External (S3EN, UnknownObj)
    External (S4EN, UnknownObj)
    External (S5EN, UnknownObj)
    External (S6EN, UnknownObj)
    External (S7EN, UnknownObj)

    OperationRegion (APMP, SystemIO, 0xB2, 0x02)
    Field (APMP, ByteAcc, NoLock, Preserve)
    {
        APMC,   8, 
        APMS,   8
    }

    OperationRegion (POST, SystemIO, 0x80, One)
    Field (POST, ByteAcc, Lock, Preserve)
    {
        DBG0,   8
    }

    Method (TRAP, 1, Serialized)
    {
        SMIF = Arg0
        TRP0 = Zero
        Return (SMIF) /* \SMIF */
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        PICM = Arg0
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        Local0 = \_SB.PCI0.LPCB.EC0.ACEX
        If ((Local0 != PWRS))
        {
            PWRS = Local0
            Notify (\_SB.PCI0.LPCB.EC0.AC, 0x80) // Status Change
        }

        Local0 = \_SB.PCI0.LPCB.EC0.LIDS
        If ((Local0 != LIDS))
        {
            LIDS = Local0
            Notify (\_SB.LID0, 0x80) // Status Change
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Scope (_SB)
    {
        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                LIDS = ^^PCI0.LPCB.EC0.LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
                Return (LIDS) /* \LIDS */
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x69, 
                0x05
            })
        }

        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (TPAD)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_UID, One)  // _UID: Unique ID
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Interrupt (ResourceConsumer, Edge, ActiveLow, Exclusive, ,, )
                {
                    0x00000025,
                }
                VendorShort ()      // Length = 0x01
                {
                     0x67                                             // g
                }
            })
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0C, 
                0x03
            })
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                Local0 = 0x0C
                If ((Arg0 == One))
                {
                    ^^PCI0.LPCB.GWAK (Local0)
                }
            }
        }

        Device (TSCR)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Interrupt (ResourceConsumer, Edge, ActiveLow, Exclusive, ,, )
                {
                    0x00000026,
                }
                VendorShort ()      // Length = 0x01
                {
                     0x4A                                             // J
                }
            })
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x19, 
                0x03
            })
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                Local0 = 0x19
                If ((Arg0 == One))
                {
                    ^^PCI0.LPCB.GWAK (Local0)
                }
            }
        }
    }

    Name (PICM, Zero)
    Name (DSEN, One)
    OperationRegion (GNVS, SystemMemory, 0x7F790000, 0x0F00)
    Field (GNVS, ByteAcc, NoLock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        TLVL,   8, 
        FLVL,   8, 
        TCRT,   8, 
        TPSV,   8, 
        TMAX,   8, 
        F0OF,   8, 
        F0ON,   8, 
        F0PW,   8, 
        F1OF,   8, 
        F1ON,   8, 
        F1PW,   8, 
        F2OF,   8, 
        F2ON,   8, 
        F2PW,   8, 
        F3OF,   8, 
        F3ON,   8, 
        F3PW,   8, 
        F4OF,   8, 
        F4ON,   8, 
        F4PW,   8, 
        TMPS,   8, 
        Offset (0x28), 
        APIC,   8, 
        MPEN,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PCNT,   8, 
        Offset (0x32), 
        NATP,   8, 
        S5U0,   8, 
        S5U1,   8, 
        S3U0,   8, 
        S3U1,   8, 
        S33G,   8, 
        CMEM,   32, 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        TPMP,   8, 
        TPME,   8, 
        Offset (0x60), 
        S0B0,   32, 
        S1B0,   32, 
        S2B0,   32, 
        S3B0,   32, 
        S4B0,   32, 
        S5B0,   32, 
        S6B0,   32, 
        S7B0,   32, 
        S0B1,   32, 
        S1B1,   32, 
        S2B1,   32, 
        S3B1,   32, 
        S4B1,   32, 
        S5B1,   32, 
        S6B1,   32, 
        S7B1,   32, 
        CBMC,   32, 
        Offset (0xB4), 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        I409,   8, 
        I509,   8, 
        I609,   8, 
        I709,   8, 
        IDMM,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        ISCI,   8, 
        PAVP,   8, 
        Offset (0xEB), 
        OSCC,   8, 
        NPCE,   8, 
        PLFL,   8, 
        BREV,   8, 
        DPBM,   8, 
        DPCM,   8, 
        DPDM,   8, 
        ALFP,   8, 
        IMON,   8, 
        MMIO,   8, 
        Offset (0x100), 
        VBT0,   32, 
        VBT1,   32, 
        VBT2,   32, 
        VBT3,   16, 
        VBT4,   2048, 
        VBT5,   512, 
        VBT6,   512, 
        VBT7,   32, 
        VBT8,   32, 
        VBT9,   32, 
        CHVD,   24576, 
        VBTA,   32, 
        MEHH,   256
    }

    Method (S3UE, 0, NotSerialized)
    {
        S3U0 = One
        S3U1 = One
    }

    Method (S3UD, 0, NotSerialized)
    {
        S3U0 = Zero
        S3U1 = Zero
    }

    Method (S5UE, 0, NotSerialized)
    {
        S5U0 = One
        S5U1 = One
    }

    Method (S5UD, 0, NotSerialized)
    {
        S5U0 = Zero
        S5U1 = Zero
    }

    Method (S3GE, 0, NotSerialized)
    {
        S33G = One
    }

    Method (S3GD, 0, NotSerialized)
    {
        S33G = Zero
    }

    Method (TZUP, 0, NotSerialized)
    {
        If (CondRefOf (\_TZ.THRM, Local0))
        {
            Notify (\_TZ.THRM, 0x81) // Thermal Trip Point Change
        }

        If (CondRefOf (\_TZ.SKIN, Local0))
        {
            Notify (\_TZ.SKIN, 0x81) // Information Change
        }
    }

    Method (F0UT, 2, NotSerialized)
    {
        F0OF = Arg0
        F0ON = Arg1
        TZUP ()
    }

    Method (F1UT, 2, NotSerialized)
    {
        F1OF = Arg0
        F1ON = Arg1
        TZUP ()
    }

    Method (F2UT, 2, NotSerialized)
    {
        F2OF = Arg0
        F2ON = Arg1
        TZUP ()
    }

    Method (F3UT, 2, NotSerialized)
    {
        F3OF = Arg0
        F3ON = Arg1
        TZUP ()
    }

    Method (F4UT, 2, NotSerialized)
    {
        F4OF = Arg0
        F4ON = Arg1
        TZUP ()
    }

    Method (TMPU, 1, NotSerialized)
    {
        TMPS = Arg0
        TZUP ()
    }

    Method (PNOT, 0, NotSerialized)
    {
        If ((PCNT >= 0x02))
        {
            Notify (\_PR.CPU0, 0x81) // Information Change
            Notify (\_PR.CPU1, 0x81) // Information Change
        }

        If ((PCNT >= 0x04))
        {
            Notify (\_PR.CPU2, 0x81) // Information Change
            Notify (\_PR.CPU3, 0x81) // Information Change
        }

        If ((PCNT >= 0x08))
        {
            Notify (\_PR.CPU4, 0x81) // Information Change
            Notify (\_PR.CPU5, 0x81) // Information Change
            Notify (\_PR.CPU6, 0x81) // Information Change
            Notify (\_PR.CPU7, 0x81) // Information Change
        }
    }

    Method (PPCN, 0, NotSerialized)
    {
        If ((PCNT >= 0x02))
        {
            Notify (\_PR.CPU0, 0x80) // Status Change
            Notify (\_PR.CPU1, 0x80) // Status Change
        }

        If ((PCNT >= 0x04))
        {
            Notify (\_PR.CPU2, 0x80) // Status Change
            Notify (\_PR.CPU3, 0x80) // Status Change
        }

        If ((PCNT >= 0x08))
        {
            Notify (\_PR.CPU4, 0x80) // Status Change
            Notify (\_PR.CPU5, 0x80) // Status Change
            Notify (\_PR.CPU6, 0x80) // Status Change
            Notify (\_PR.CPU7, 0x80) // Status Change
        }
    }

    Method (TNOT, 0, NotSerialized)
    {
        If ((PCNT >= 0x02))
        {
            Notify (\_PR.CPU0, 0x82) // Device-Specific Change
            Notify (\_PR.CPU1, 0x82) // Device-Specific Change
        }

        If ((PCNT >= 0x04))
        {
            Notify (\_PR.CPU2, 0x82) // Device-Specific Change
            Notify (\_PR.CPU3, 0x82) // Device-Specific Change
        }

        If ((PCNT >= 0x08))
        {
            Notify (\_PR.CPU4, 0x82) // Device-Specific Change
            Notify (\_PR.CPU5, 0x82) // Device-Specific Change
            Notify (\_PR.CPU6, 0x82) // Device-Specific Change
            Notify (\_PR.CPU7, 0x82) // Device-Specific Change
        }
    }

    Method (PPKG, 0, NotSerialized)
    {
        If ((PCNT >= 0x08))
        {
            Return (Package (0x08)
            {
                \_PR.CPU0, 
                \_PR.CPU1, 
                \_PR.CPU2, 
                \_PR.CPU3, 
                \_PR.CPU4, 
                \_PR.CPU5, 
                \_PR.CPU6, 
                \_PR.CPU7
            })
        }
        ElseIf ((PCNT >= 0x04))
        {
            Return (Package (0x04)
            {
                \_PR.CPU0, 
                \_PR.CPU1, 
                \_PR.CPU2, 
                \_PR.CPU3
            })
        }
        ElseIf ((PCNT >= 0x02))
        {
            Return (Package (0x02)
            {
                \_PR.CPU0, 
                \_PR.CPU1
            })
        }
        Else
        {
            Return (Package (0x01)
            {
                \_PR.CPU0
            })
        }
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Name (_BBN, Zero)  // _BBN: BIOS Bus Number
            Device (MCHC)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (MCHP, PCI_Config, Zero, 0x0100)
                Field (MCHP, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    EPEN,   1, 
                        ,   11, 
                    EPBR,   24, 
                    Offset (0x48), 
                    MHEN,   1, 
                        ,   13, 
                    MHBR,   22, 
                    Offset (0x60), 
                    PXEN,   1, 
                    PXSZ,   2, 
                        ,   23, 
                    PXBR,   10, 
                    Offset (0x68), 
                    DMEN,   1, 
                        ,   11, 
                    DMBR,   24, 
                    Offset (0x70), 
                    MEBA,   64, 
                    Offset (0x80), 
                        ,   4, 
                    PM0H,   2, 
                    Offset (0x81), 
                    PM1L,   2, 
                        ,   2, 
                    PM1H,   2, 
                    Offset (0x82), 
                    PM2L,   2, 
                        ,   2, 
                    PM2H,   2, 
                    Offset (0x83), 
                    PM3L,   2, 
                        ,   2, 
                    PM3H,   2, 
                    Offset (0x84), 
                    PM4L,   2, 
                        ,   2, 
                    PM4H,   2, 
                    Offset (0x85), 
                    PM5L,   2, 
                        ,   2, 
                    PM5H,   2, 
                    Offset (0x86), 
                    PM6L,   2, 
                        ,   2, 
                    PM6H,   2, 
                    Offset (0x87), 
                    Offset (0xA0), 
                    TOM,    64, 
                    Offset (0xBC), 
                    TLUD,   32
                }

                Mutex (CTCM, 0x01)
                Name (CTCC, Zero)
                Name (CTCN, Zero)
                Name (CTCD, One)
                Name (CTCU, 0x02)
                Name (SPL1, Zero)
                OperationRegion (MCHB, SystemMemory, 0xFED15000, 0x1000)
                Field (MCHB, DWordAcc, Lock, Preserve)
                {
                    Offset (0x930), 
                    CTDN,   15, 
                    Offset (0x938), 
                    PUNI,   4, 
                    Offset (0x939), 
                    EUNI,   5, 
                    Offset (0x93A), 
                    TUNI,   4, 
                    Offset (0x958), 
                    Offset (0x95D), 
                    LFM,    8, 
                    Offset (0x9A0), 
                    PL1V,   15, 
                    PL1E,   1, 
                    PL1C,   1, 
                    PL1T,   7, 
                    Offset (0x9A4), 
                    PL2V,   15, 
                    PL2E,   1, 
                    PL2C,   1, 
                    PL2T,   7, 
                    Offset (0xF3C), 
                    TARN,   8, 
                    Offset (0xF40), 
                    CTDD,   15, 
                    Offset (0xF42), 
                    TARD,   8, 
                    Offset (0xF48), 
                    CTDU,   15, 
                    Offset (0xF4A), 
                    TARU,   8, 
                    Offset (0xF50), 
                    CTCS,   2, 
                    Offset (0xF54), 
                    TARS,   8
                }

                Method (PSSS, 1, NotSerialized)
                {
                    Local0 = One
                    Local1 = SizeOf (\_PR.CPU0._PSS)
                    While ((Local0 < Local1))
                    {
                        Local2 = (DerefOf (DerefOf (\_PR.CPU0._PSS [Local0]) [0x04]) >> 0x08)
                        If ((Local2 == Arg0))
                        {
                            Return ((Local0 - One))
                        }

                        Local0++
                    }

                    Return (Zero)
                }

                Method (CPL2, 1, NotSerialized)
                {
                    If (ISLP ())
                    {
                        Return (0xC8)
                    }
                    Else
                    {
                        Return (((Arg0 * 0x7D) / 0x64))
                    }
                }

                Method (STND, 0, Serialized)
                {
                    If (Acquire (CTCM, 0x0064))
                    {
                        Return (Zero)
                    }

                    If ((CTCD == CTCC))
                    {
                        Release (CTCM)
                        Return (Zero)
                    }

                    Debug = "Set TDP Down"
                    CTCS = CTCD /* \_SB_.PCI0.MCHC.CTCD */
                    TARS = TARD /* \_SB_.PCI0.MCHC.TARD */
                    PPCM = PSSS (TARD)
                    PPCN ()
                    PL2V = CPL2 (CTDD)
                    PL1V = CTDD /* \_SB_.PCI0.MCHC.CTDD */
                    CTCC = CTCD /* \_SB_.PCI0.MCHC.CTCD */
                    Release (CTCM)
                    Return (One)
                }

                Method (STDN, 0, Serialized)
                {
                    If (Acquire (CTCM, 0x0064))
                    {
                        Return (Zero)
                    }

                    If ((CTCN == CTCC))
                    {
                        Release (CTCM)
                        Return (Zero)
                    }

                    Debug = "Set TDP Nominal"
                    PL1V = CTDN /* \_SB_.PCI0.MCHC.CTDN */
                    PL2V = CPL2 (CTDN)
                    PPCM = PSSS (TARN)
                    PPCN ()
                    TARS = TARN /* \_SB_.PCI0.MCHC.TARN */
                    CTCS = CTCN /* \_SB_.PCI0.MCHC.CTCN */
                    CTCC = CTCN /* \_SB_.PCI0.MCHC.CTCN */
                    Release (CTCM)
                    Return (One)
                }

                Method (TDPP, 1, NotSerialized)
                {
                    Return ((((PUNI - One) << 0x02) * Arg0))
                }

                Method (CTLE, 1, Serialized)
                {
                    If (Acquire (CTCM, 0x0064))
                    {
                        Return (Zero)
                    }

                    Debug = "Enable PL1 Limit"
                    Local0 = PSSS (LFM)
                    PPCM = (Local0 + One)
                    PPCN ()
                    TARS = (LFM - One)
                    SPL1 = PL1V /* \_SB_.PCI0.MCHC.PL1V */
                    PL1V = TDPP (Arg0)
                    PL1C = One
                    Release (CTCM)
                    Return (One)
                }

                Method (CTLD, 0, Serialized)
                {
                    If (Acquire (CTCM, 0x0064))
                    {
                        Return (Zero)
                    }

                    Debug = "Disable PL1 Limit"
                    PL1C = Zero
                    PL1V = SPL1 /* \_SB_.PCI0.MCHC.SPL1 */
                    TARS = Zero
                    PPCM = Zero
                    PPCN ()
                    Release (CTCM)
                    Return (One)
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (MCRS, ResourceTemplate ()
                {
                    WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                        0x0000,             // Granularity
                        0x0000,             // Range Minimum
                        0x00FF,             // Range Maximum
                        0x0000,             // Translation Offset
                        0x0100,             // Length
                        ,, )
                    DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x00000000,         // Granularity
                        0x00000000,         // Range Minimum
                        0x00000CF7,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00000CF8,         // Length
                        ,, , TypeStatic, DenseTranslation)
                    IO (Decode16,
                        0x0CF8,             // Range Minimum
                        0x0CF8,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                    DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x00000000,         // Granularity
                        0x00000D00,         // Range Minimum
                        0x0000FFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x0000F300,         // Length
                        ,, , TypeStatic, DenseTranslation)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000A0000,         // Range Minimum
                        0x000BFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00020000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C0000,         // Range Minimum
                        0x000C3FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C4000,         // Range Minimum
                        0x000C7FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000C8000,         // Range Minimum
                        0x000CBFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000CC000,         // Range Minimum
                        0x000CFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000D0000,         // Range Minimum
                        0x000D3FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000D4000,         // Range Minimum
                        0x000D7FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000D8000,         // Range Minimum
                        0x000DBFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000DC000,         // Range Minimum
                        0x000DFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000E0000,         // Range Minimum
                        0x000E3FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000E4000,         // Range Minimum
                        0x000E7FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000E8000,         // Range Minimum
                        0x000EBFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000EC000,         // Range Minimum
                        0x000EFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00004000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x000F0000,         // Range Minimum
                        0x000FFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00010000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0x00000000,         // Range Minimum
                        0xFEBFFFFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0xFEC00000,         // Length
                        ,, _Y00, AddressRangeMemory, TypeStatic)
                    DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                        0x00000000,         // Granularity
                        0xFED40000,         // Range Minimum
                        0xFED44FFF,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00005000,         // Length
                        ,, , AddressRangeMemory, TypeStatic)
                })
                CreateDWordField (MCRS, \_SB.PCI0._CRS._Y00._MIN, PMIN)  // _MIN: Minimum Base Address
                CreateDWordField (MCRS, \_SB.PCI0._CRS._Y00._MAX, PMAX)  // _MAX: Maximum Base Address
                CreateDWordField (MCRS, \_SB.PCI0._CRS._Y00._LEN, PLEN)  // _LEN: Length
                Local0 = ^MCHC.TLUD /* \_SB_.PCI0.MCHC.TLUD */
                Local1 = ^MCHC.MEBA /* \_SB_.PCI0.MCHC.MEBA */
                If ((Local0 == Local1))
                {
                    Local0 = ^MCHC.TOM /* \_SB_.PCI0.MCHC.TOM_ */
                }

                PMIN = Local0
                PLEN = ((PMAX - PMIN) + One)
                Return (MCRS) /* \_SB_.PCI0._CRS.MCRS */
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (Package (0x12)
                    {
                        Package (0x04)
                        {
                            0x0002FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            Zero, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            Zero, 
                            0x13
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            Zero, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            Zero, 
                            0x16
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            Zero, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            Zero, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            Zero, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            Zero, 
                            Zero, 
                            0x14
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            One, 
                            Zero, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x02, 
                            Zero, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x03, 
                            Zero, 
                            0x15
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            Zero, 
                            Zero, 
                            0x17
                        }
                    })
                }
                Else
                {
                    Return (Package (0x12)
                    {
                        Package (0x04)
                        {
                            0x0002FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0003FFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001BFFFF, 
                            Zero, 
                            ^LPCB.LNKG, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            Zero, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            One, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x02, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001CFFFF, 
                            0x03, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001DFFFF, 
                            Zero, 
                            ^LPCB.LNKD, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            Zero, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            Zero, 
                            ^LPCB.LNKG, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            One, 
                            ^LPCB.LNKC, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x02, 
                            ^LPCB.LNKB, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x001FFFFF, 
                            0x03, 
                            ^LPCB.LNKA, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            Zero, 
                            ^LPCB.LNKE, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            One, 
                            ^LPCB.LNKF, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x02, 
                            ^LPCB.LNKF, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0015FFFF, 
                            0x03, 
                            ^LPCB.LNKF, 
                            Zero
                        }, 

                        Package (0x04)
                        {
                            0x0017FFFF, 
                            Zero, 
                            ^LPCB.LNKH, 
                            Zero
                        }
                    })
                }
            }

            Device (PDRC)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (PDRS, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFED1C000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED10000,         // Address Base
                        0x00004000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED18000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED19000,         // Address Base
                        0x00001000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xF0000000,         // Address Base
                        0x04000000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED20000,         // Address Base
                        0x00020000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED40000,         // Address Base
                        0x00005000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED45000,         // Address Base
                        0x0004B000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00F00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                })
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Return (PDRS) /* \_SB_.PCI0.PDRC.PDRS */
                }
            }

            Device (GFX0)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                {
                    DSEN = (Arg0 & 0x07)
                }

                Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                {
                    If ((NDID == One))
                    {
                        Name (DOD1, Package (0x01)
                        {
                            0xFFFFFFFF
                        })
                        DOD1 [Zero] = (0x00010000 | DID1)
                        Return (DOD1) /* \_SB_.PCI0.GFX0._DOD.DOD1 */
                    }

                    If ((NDID == 0x02))
                    {
                        Name (DOD2, Package (0x02)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        DOD2 [Zero] = (0x00010000 | DID2)
                        DOD2 [One] = (0x00010000 | DID2)
                        Return (DOD2) /* \_SB_.PCI0.GFX0._DOD.DOD2 */
                    }

                    If ((NDID == 0x03))
                    {
                        Name (DOD3, Package (0x03)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        DOD3 [Zero] = (0x00010000 | DID3)
                        DOD3 [One] = (0x00010000 | DID3)
                        DOD3 [0x02] = (0x00010000 | DID3)
                        Return (DOD3) /* \_SB_.PCI0.GFX0._DOD.DOD3 */
                    }

                    If ((NDID == 0x04))
                    {
                        Name (DOD4, Package (0x04)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        DOD4 [Zero] = (0x00010000 | DID4)
                        DOD4 [One] = (0x00010000 | DID4)
                        DOD4 [0x02] = (0x00010000 | DID4)
                        DOD4 [0x03] = (0x00010000 | DID4)
                        Return (DOD4) /* \_SB_.PCI0.GFX0._DOD.DOD4 */
                    }

                    If ((NDID > 0x04))
                    {
                        Name (DOD5, Package (0x05)
                        {
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        DOD5 [Zero] = (0x00010000 | DID5)
                        DOD5 [One] = (0x00010000 | DID5)
                        DOD5 [0x02] = (0x00010000 | DID5)
                        DOD5 [0x03] = (0x00010000 | DID5)
                        DOD5 [0x04] = (0x00010000 | DID5)
                        Return (DOD5) /* \_SB_.PCI0.GFX0._DOD.DOD5 */
                    }

                    Return (Package (0x01)
                    {
                        0x0400
                    })
                }

                Device (DD01)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID1 == Zero))
                        {
                            Return (One)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID1))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        TRAP (One)
                        If ((CSTE & One))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & One))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD02)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID2 == Zero))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID2))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        TRAP (One)
                        If ((CSTE & 0x02))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x02))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD03)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID3 == Zero))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID3))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        TRAP (One)
                        If ((CSTE & 0x04))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x04))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD04)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID4 == Zero))
                        {
                            Return (0x04)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID4))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        TRAP (One)
                        If ((CSTE & 0x08))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x04))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }

                Device (DD05)
                {
                    Method (_ADR, 0, Serialized)  // _ADR: Address
                    {
                        If ((DID5 == Zero))
                        {
                            Return (0x05)
                        }
                        Else
                        {
                            Return ((0xFFFF & DID5))
                        }
                    }

                    Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                    {
                        TRAP (One)
                        If ((CSTE & 0x10))
                        {
                            Return (0x1F)
                        }

                        Return (0x1D)
                    }

                    Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                    {
                        If ((NSTE & 0x04))
                        {
                            Return (One)
                        }

                        Return (Zero)
                    }

                    Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                    {
                        If (((Arg0 & 0xC0000000) == 0xC0000000))
                        {
                            CSTE = NSTE /* \NSTE */
                        }
                    }
                }
            }

            Scope (\)
            {
                Method (ISLP, 0, NotSerialized)
                {
                    If ((\_SB.PCI0.LPCB.DIDH == 0x9C))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                OperationRegion (IO_T, SystemIO, 0x0800, 0x10)
                Field (IO_T, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x08), 
                    TRP0,   8
                }

                OperationRegion (RCRB, SystemMemory, 0xFED1C000, 0x4000)
                Field (RCRB, DWordAcc, Lock, Preserve)
                {
                    Offset (0x1000), 
                    Offset (0x3000), 
                    Offset (0x3404), 
                    HPAS,   2, 
                        ,   5, 
                    HPTE,   1, 
                    Offset (0x3418), 
                        ,   1, 
                    PCID,   1, 
                    SA1D,   1, 
                    SMBD,   1, 
                    HDAD,   1, 
                        ,   8, 
                    EH2D,   1, 
                    LPBD,   1, 
                    EH1D,   1, 
                    RP1D,   1, 
                    RP2D,   1, 
                    RP3D,   1, 
                    RP4D,   1, 
                    RP5D,   1, 
                    RP6D,   1, 
                    RP7D,   1, 
                    RP8D,   1, 
                    TTRD,   1, 
                    SA2D,   1, 
                    Offset (0x3428), 
                    BDFD,   1, 
                    ME1D,   1, 
                    ME2D,   1, 
                    IDRD,   1, 
                    KTCT,   1
                }
            }

            Device (HDEF)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                Name (PRWH, Package (0x02)
                {
                    0x0D, 
                    0x03
                })
                Name (PRWL, Package (0x02)
                {
                    0x6D, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (ISLP ())
                    {
                        Return (PRWL) /* \_SB_.PCI0.HDEF.PRWL */
                    }
                    Else
                    {
                        Return (PRWH) /* \_SB_.PCI0.HDEF.PRWH */
                    }
                }
            }

            Method (IRQM, 1, Serialized)
            {
                Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                Name (IQAA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x13
                    }
                })
                Name (IQAP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        ^LPCB.LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        ^LPCB.LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        ^LPCB.LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        ^LPCB.LNKD, 
                        Zero
                    }
                })
                Name (IQBA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x10
                    }
                })
                Name (IQBP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        ^LPCB.LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        ^LPCB.LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        ^LPCB.LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        ^LPCB.LNKA, 
                        Zero
                    }
                })
                Name (IQCA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x12
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x11
                    }
                })
                Name (IQCP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        ^LPCB.LNKC, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        ^LPCB.LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        ^LPCB.LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        ^LPCB.LNKB, 
                        Zero
                    }
                })
                Name (IQDA, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        Zero, 
                        0x13
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        Zero, 
                        0x10
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        Zero, 
                        0x11
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        Zero, 
                        0x12
                    }
                })
                Name (IQDP, Package (0x04)
                {
                    Package (0x04)
                    {
                        0xFFFF, 
                        Zero, 
                        ^LPCB.LNKD, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        One, 
                        ^LPCB.LNKA, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x02, 
                        ^LPCB.LNKB, 
                        Zero
                    }, 

                    Package (0x04)
                    {
                        0xFFFF, 
                        0x03, 
                        ^LPCB.LNKC, 
                        Zero
                    }
                })
                _T_0 = ToInteger (Arg0)
                If ((Match (Package (0x02)
                                {
                                    One, 
                                    0x05
                                }, MEQ, _T_0, MTR, Zero, Zero) != Ones))
                {
                    If (PICM)
                    {
                        Return (IQAA) /* \_SB_.PCI0.IRQM.IQAA */
                    }
                    Else
                    {
                        Return (IQAP) /* \_SB_.PCI0.IRQM.IQAP */
                    }
                }
                ElseIf ((Match (Package (0x02)
                                {
                                    0x02, 
                                    0x06
                                }, MEQ, _T_0, MTR, Zero, Zero) != Ones))
                {
                    If (PICM)
                    {
                        Return (IQBA) /* \_SB_.PCI0.IRQM.IQBA */
                    }
                    Else
                    {
                        Return (IQBP) /* \_SB_.PCI0.IRQM.IQBP */
                    }
                }
                ElseIf ((Match (Package (0x02)
                                {
                                    0x03, 
                                    0x07
                                }, MEQ, _T_0, MTR, Zero, Zero) != Ones))
                {
                    If (PICM)
                    {
                        Return (IQCA) /* \_SB_.PCI0.IRQM.IQCA */
                    }
                    Else
                    {
                        Return (IQCP) /* \_SB_.PCI0.IRQM.IQCP */
                    }
                }
                ElseIf ((Match (Package (0x02)
                                {
                                    0x04, 
                                    0x08
                                }, MEQ, _T_0, MTR, Zero, Zero) != Ones))
                {
                    If (PICM)
                    {
                        Return (IQDA) /* \_SB_.PCI0.IRQM.IQDA */
                    }
                    Else
                    {
                        Return (IQDP) /* \_SB_.PCI0.IRQM.IQDP */
                    }
                }
                ElseIf (PICM)
                {
                    Return (IQDA) /* \_SB_.PCI0.IRQM.IQDA */
                }
                Else
                {
                    Return (IQDP) /* \_SB_.PCI0.IRQM.IQDP */
                }
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, Zero, 0xFF)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    Offset (0x4F), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, Zero, 0xFF)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    Offset (0x4F), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, Zero, 0xFF)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    Offset (0x4F), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, Zero, 0xFF)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    Offset (0x4F), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, Zero, 0xFF)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    Offset (0x4F), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, Zero, 0xFF)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    Offset (0x4F), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, Zero, 0xFF)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    Offset (0x4F), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (RPCS, PCI_Config, Zero, 0xFF)
                Field (RPCS, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    Offset (0x4F), 
                    RPPN,   8
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    Return (IRQM (RPPN))
                }
            }

            Device (EHCI)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Name (PRWH, Package (0x02)
                {
                    0x0D, 
                    0x03
                })
                Name (PRWL, Package (0x02)
                {
                    0x6D, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (ISLP ())
                    {
                        Return (PRWL) /* \_SB_.PCI0.EHCI.PRWL */
                    }
                    Else
                    {
                        Return (PRWH) /* \_SB_.PCI0.EHCI.PRWH */
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUB7)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                    }

                    Device (PRT6)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                    }
                }
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Name (PLSD, 0x05)
                Name (PLSP, 0x07)
                OperationRegion (XPRT, PCI_Config, Zero, 0x0100)
                Field (XPRT, AnyAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    Offset (0x12), 
                    XMEM,   16, 
                    Offset (0x74), 
                    D0D3,   2, 
                    Offset (0x75), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0xB0), 
                        ,   13, 
                    MB13,   1, 
                    MB14,   1, 
                    Offset (0xD0), 
                    PR2R,   32, 
                    PR2M,   32, 
                    PR3R,   32, 
                    PR3M,   32
                }

                Method (LPCL, 0, Serialized)
                {
                    OperationRegion (XREG, SystemMemory, (XMEM << 0x10), 0x0600)
                    Field (XREG, DWordAcc, Lock, Preserve)
                    {
                        Offset (0x510), 
                        PSC0,   32, 
                        Offset (0x520), 
                        PSC1,   32, 
                        Offset (0x530), 
                        PSC2,   32, 
                        Offset (0x540), 
                        PSC3,   32
                    }

                    Name (PEDB, 0x02)
                    Name (CHST, 0x00FE0000)
                    Local0 = (PSC0 & ~PEDB)
                    PSC0 = (Local0 | CHST) /* \_SB_.PCI0.XHCI.LPCL.CHST */
                    Local0 = (PSC1 & ~PEDB)
                    PSC1 = (Local0 | CHST) /* \_SB_.PCI0.XHCI.LPCL.CHST */
                    Local0 = (PSC2 & ~PEDB)
                    PSC2 = (Local0 | CHST) /* \_SB_.PCI0.XHCI.LPCL.CHST */
                    Local0 = (PSC3 & ~PEDB)
                    PSC3 = (Local0 | CHST) /* \_SB_.PCI0.XHCI.LPCL.CHST */
                }

                Method (LPS0, 0, Serialized)
                {
                    OperationRegion (XREG, SystemMemory, (XMEM << 0x10), 0x0600)
                    Field (XREG, DWordAcc, Lock, Preserve)
                    {
                        Offset (0x510), 
                            ,   5, 
                        PLS1,   4, 
                        PPR1,   1, 
                            ,   7, 
                        CSC1,   1, 
                            ,   1, 
                        WRC1,   1, 
                            ,   11, 
                        WPR1,   1, 
                        Offset (0x520), 
                            ,   5, 
                        PLS2,   4, 
                        PPR2,   1, 
                            ,   7, 
                        CSC2,   1, 
                            ,   1, 
                        WRC2,   1, 
                            ,   11, 
                        WPR2,   1, 
                        Offset (0x530), 
                            ,   5, 
                        PLS3,   4, 
                        PPR3,   1, 
                            ,   7, 
                        CSC3,   1, 
                            ,   1, 
                        WRC3,   1, 
                            ,   11, 
                        WPR3,   1, 
                        Offset (0x540), 
                            ,   5, 
                        PLS4,   4, 
                        PPR4,   1, 
                            ,   7, 
                        CSC4,   1, 
                            ,   1, 
                        WRC4,   1, 
                            ,   11, 
                        WPR4,   1
                    }

                    Local0 = 0x0A
                    While (((((PPR1 == One) && (PLS1 == PLSP)) || ((
                        PPR2 == One) && (PLS2 == PLSP))) || (((PPR3 == One) && (PLS3 == PLSP)) || 
                        ((PPR4 == One) && (PLS4 == PLSP)))))
                    {
                        If ((Local0 == Zero))
                        {
                            Break
                        }

                        Local0--
                        Stall (0x0A)
                    }

                    Local1 = Zero
                    Local2 = Zero
                    Local3 = Zero
                    Local4 = Zero
                    If (((PLS1 == PLSD) && ((CSC1 == Zero) && (PPR1 == One))))
                    {
                        WPR1 = One
                        Local1 = One
                    }

                    If (((PLS2 == PLSD) && ((CSC2 == Zero) && (PPR2 == One))))
                    {
                        WPR2 = One
                        Local2 = One
                    }

                    If (((PLS3 == PLSD) && ((CSC3 == Zero) && (PPR3 == One))))
                    {
                        WPR3 = One
                        Local3 = One
                    }

                    If (((PLS4 == PLSD) && ((CSC4 == Zero) && (PPR4 == One))))
                    {
                        WPR4 = One
                        Local4 = One
                    }

                    Local0 = 0x0A
                    While (((((Local1 == One) && (WRC1 == Zero)) || ((
                        Local2 == One) && (WRC2 == Zero))) || (((Local3 == One) && (WRC3 == Zero)) || 
                        ((Local4 == One) && (WRC4 == Zero)))))
                    {
                        If ((Local0 == Zero))
                        {
                            Break
                        }

                        Local0--
                        Stall (0x0A)
                    }

                    LPCL ()
                }

                Method (_PSC, 0, NotSerialized)  // _PSC: Power State Current
                {
                    Return (D0D3) /* \_SB_.PCI0.XHCI.D0D3 */
                }

                Method (_PS0, 0, Serialized)  // _PS0: Power State 0
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (((XMEM == 0xFFFF) || (XMEM == Zero)))
                    {
                        Return (Zero)
                    }

                    OperationRegion (XREG, SystemMemory, ((XMEM << 0x10) + 0x8000), 0x0200)
                    Field (XREG, DWordAcc, Lock, Preserve)
                    {
                        Offset (0xE0), 
                            ,   15, 
                        AX15,   1, 
                        Offset (0x154), 
                            ,   31, 
                        CLK2,   1, 
                        Offset (0x16C), 
                            ,   2, 
                        CLK0,   1, 
                            ,   11, 
                        CLK1,   1
                    }

                    Local0 = D0D3 /* \_SB_.PCI0.XHCI.D0D3 */
                    If ((Local0 == 0x03))
                    {
                        D0D3 = Zero
                    }

                    If (ISLP ())
                    {
                        MB13 = Zero
                        MB14 = Zero
                        CLK0 = Zero
                        CLK1 = Zero
                    }

                    CLK2 = One
                    If (ISLP ())
                    {
                        LPS0 ()
                        AX15 = One
                    }

                    Return (Zero)
                }

                Method (_PS3, 0, Serialized)  // _PS3: Power State 3
                {
                    If ((DVID == 0xFFFF))
                    {
                        Return (Zero)
                    }

                    If (((XMEM == 0xFFFF) || (XMEM == Zero)))
                    {
                        Return (Zero)
                    }

                    OperationRegion (XREG, SystemMemory, ((XMEM << 0x10) + 0x8000), 0x0200)
                    Field (XREG, DWordAcc, Lock, Preserve)
                    {
                        Offset (0xE0), 
                            ,   15, 
                        AX15,   1, 
                        Offset (0x154), 
                            ,   31, 
                        CLK2,   1, 
                        Offset (0x16C), 
                            ,   2, 
                        CLK0,   1, 
                            ,   11, 
                        CLK1,   1
                    }

                    PMES = One
                    PMEE = One
                    Local0 = D0D3 /* \_SB_.PCI0.XHCI.D0D3 */
                    If ((Local0 == 0x03))
                    {
                        D0D3 = Zero
                    }

                    If (ISLP ())
                    {
                        MB13 = One
                        MB14 = One
                        CLK0 = One
                        CLK1 = One
                    }

                    CLK2 = Zero
                    If (ISLP ())
                    {
                        AX15 = Zero
                    }

                    D0D3 = 0x03
                    Return (Zero)
                }

                Name (PRWH, Package (0x02)
                {
                    0x0D, 
                    0x03
                })
                Name (PRWL, Package (0x02)
                {
                    0x6D, 
                    0x03
                })
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If (ISLP ())
                    {
                        Return (PRWL) /* \_SB_.PCI0.XHCI.PRWL */
                    }
                    Else
                    {
                        Return (PRWH) /* \_SB_.PCI0.XHCI.PRWH */
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x03)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x03)
                }

                Device (HUB7)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PRT1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                    }

                    Device (PRT2)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                    }

                    Device (PRT3)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                    }

                    Device (PRT4)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                    }

                    Device (PRT5)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                    }

                    Device (PRT6)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                    }
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (LPC0, PCI_Config, Zero, 0x0100)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x03), 
                    DIDH,   8, 
                    Offset (0x40), 
                    PMBS,   16, 
                    Offset (0x48), 
                    GPBS,   16, 
                    Offset (0x60), 
                    PRTA,   8, 
                    PRTB,   8, 
                    PRTC,   8, 
                    PRTD,   8, 
                    Offset (0x68), 
                    PRTE,   8, 
                    PRTF,   8, 
                    PRTG,   8, 
                    PRTH,   8, 
                    Offset (0x80), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0xF0), 
                    RCEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTA = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLA, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLA, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTA & 0x0F))
                        Return (RTLA) /* \_SB_.PCI0.LPCB.LNKA._CRS.RTLA */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTA = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTA & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTB = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLB, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLB, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTB & 0x0F))
                        Return (RTLB) /* \_SB_.PCI0.LPCB.LNKB._CRS.RTLB */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTB = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTB & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTC = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLC, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLC, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTC & 0x0F))
                        Return (RTLC) /* \_SB_.PCI0.LPCB.LNKC._CRS.RTLC */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTC = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTC & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTD = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLD, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLD, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTD & 0x0F))
                        Return (RTLD) /* \_SB_.PCI0.LPCB.LNKD._CRS.RTLD */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTD = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTD & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTE = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLE, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLE, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTE & 0x0F))
                        Return (RTLE) /* \_SB_.PCI0.LPCB.LNKE._CRS.RTLE */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTE = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTE & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTF = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLF, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLF, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTF & 0x0F))
                        Return (RTLF) /* \_SB_.PCI0.LPCB.LNKF._CRS.RTLF */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTF = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTF & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTG = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,10,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLG, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLG, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTG & 0x0F))
                        Return (RTLG) /* \_SB_.PCI0.LPCB.LNKG._CRS.RTLG */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTG = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTG & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                    {
                        PRTH = 0x80
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        IRQ (Level, ActiveLow, Shared, )
                            {1,3,4,5,6,7,11,12,14,15}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Name (RTLH, ResourceTemplate ()
                        {
                            IRQ (Level, ActiveLow, Shared, )
                                {}
                        })
                        CreateWordField (RTLH, One, IRQ0)
                        IRQ0 = Zero
                        IRQ0 = (One << (PRTH & 0x0F))
                        Return (RTLH) /* \_SB_.PCI0.LPCB.LNKH._CRS.RTLH */
                    }

                    Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, One, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PRTH = Local0
                    }

                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If ((PRTH & 0x80))
                        {
                            Return (0x09)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_GPE, 0x24)  // _GPE: General Purpose Events
                    Name (TOFS, 0xC8)
                    Name (TNCA, 0xFC)
                    Name (TNOP, 0xFD)
                    Name (TBAD, 0xFE)
                    Name (TNPR, 0xFF)
                    Name (DWRN, 0x0F)
                    Name (DLOW, 0x0A)
                    OperationRegion (ERAM, EmbeddedControl, Zero, 0xFF)
                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        RAMV,   8, 
                        TSTB,   8, 
                        TSTC,   8, 
                        KBLV,   8
                    }

                    OperationRegion (EMEM, SystemIO, 0x0900, 0xFF)
                    Field (EMEM, ByteAcc, NoLock, Preserve)
                    {
                        TIN0,   8, 
                        TIN1,   8, 
                        TIN2,   8, 
                        TIN3,   8, 
                        TIN4,   8, 
                        TIN5,   8, 
                        TIN6,   8, 
                        TIN7,   8, 
                        TIN8,   8, 
                        TIN9,   8, 
                        Offset (0x10), 
                        FAN0,   16, 
                        Offset (0x30), 
                        LIDS,   1, 
                        PBTN,   1, 
                        WPDI,   1, 
                        RECK,   1, 
                        RECD,   1, 
                        Offset (0x40), 
                        BTVO,   32, 
                        BTPR,   32, 
                        BTRA,   32, 
                        ACEX,   1, 
                        BTEX,   1, 
                        BFDC,   1, 
                        BFCG,   1, 
                        BFCR,   1, 
                        Offset (0x50), 
                        BTDA,   32, 
                        BTDV,   32, 
                        BTDF,   32, 
                        BTCC,   32, 
                        BMFG,   64, 
                        BMOD,   64, 
                        BSER,   64, 
                        BTYP,   64
                    }

                    Method (TINS, 1, Serialized)
                    {
                        Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler, x=0-9, A-Z
                        _T_0 = ToInteger (Arg0)
                        If ((_T_0 == Zero))
                        {
                            Return (TIN0) /* \_SB_.PCI0.LPCB.EC0_.TIN0 */
                        }
                        ElseIf ((_T_0 == One))
                        {
                            Return (TIN1) /* \_SB_.PCI0.LPCB.EC0_.TIN1 */
                        }
                        ElseIf ((_T_0 == 0x02))
                        {
                            Return (TIN2) /* \_SB_.PCI0.LPCB.EC0_.TIN2 */
                        }
                        ElseIf ((_T_0 == 0x03))
                        {
                            Return (TIN3) /* \_SB_.PCI0.LPCB.EC0_.TIN3 */
                        }
                        ElseIf ((_T_0 == 0x04))
                        {
                            Return (TIN4) /* \_SB_.PCI0.LPCB.EC0_.TIN4 */
                        }
                        ElseIf ((_T_0 == 0x05))
                        {
                            Return (TIN5) /* \_SB_.PCI0.LPCB.EC0_.TIN5 */
                        }
                        ElseIf ((_T_0 == 0x06))
                        {
                            Return (TIN6) /* \_SB_.PCI0.LPCB.EC0_.TIN6 */
                        }
                        ElseIf ((_T_0 == 0x07))
                        {
                            Return (TIN7) /* \_SB_.PCI0.LPCB.EC0_.TIN7 */
                        }
                        ElseIf ((_T_0 == 0x08))
                        {
                            Return (TIN8) /* \_SB_.PCI0.LPCB.EC0_.TIN8 */
                        }
                        ElseIf ((_T_0 == 0x09))
                        {
                            Return (TIN9) /* \_SB_.PCI0.LPCB.EC0_.TIN9 */
                        }
                        Else
                        {
                            Return (TIN0) /* \_SB_.PCI0.LPCB.EC0_.TIN0 */
                        }
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (ECMD, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                        })
                        Return (ECMD) /* \_SB_.PCI0.LPCB.EC0_._CRS.ECMD */
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        \LIDS = LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
                    }

                    Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: LID CLOSE"
                        \LIDS = LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: LID OPEN"
                        \LIDS = LIDS /* \_SB_.PCI0.LPCB.EC0_.LIDS */
                        Notify (LID0, 0x80) // Status Change
                    }

                    Method (_Q03, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: POWER BUTTON"
                        Notify (PWRB, 0x80) // Status Change
                    }

                    Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: AC CONNECTED"
                        PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        Notify (AC, 0x80) // Status Change
                        PNOT ()
                    }

                    Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: AC DISCONNECTED"
                        PWRS = ACEX /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        Notify (AC, 0x80) // Status Change
                        PNOT ()
                    }

                    Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY LOW"
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q07, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY CRITICAL"
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q08, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY INFO"
                        Notify (BAT0, 0x81) // Information Change
                    }

                    Method (_Q09, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THERMAL THRESHOLD"
                        Notify (_TZ, 0x80) // Status Change
                    }

                    Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THERMAL OVERLOAD"
                        Notify (_TZ, 0x80) // Status Change
                    }

                    Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THERMAL"
                        Notify (_TZ, 0x80) // Status Change
                    }

                    Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: USB CHARGER"
                    }

                    Method (_Q0D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: KEY PRESSED"
                    }

                    Method (_Q10, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THERMAL SHUTDOWN"
                        Notify (_TZ, 0x80) // Status Change
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: BATTERY SHUTDOWN"
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THROTTLE START"
                        If (CondRefOf (\_TZ.THRT, Local0))
                        {
                            \_TZ.THRT (One)
                        }
                    }

                    Method (_Q13, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        Debug = "EC: THROTTLE STOP"
                        If (CondRefOf (\_TZ.THRT, Local0))
                        {
                            \_TZ.THRT (Zero)
                        }
                    }

                    Device (AC)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            Return (ACEX) /* \_SB_.PCI0.LPCB.EC0_.ACEX */
                        }

                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (PBIF, Package (0x0D)
                        {
                            One, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            0x03, 
                            0xFFFFFFFF, 
                            One, 
                            One, 
                            "", 
                            "", 
                            "LION", 
                            ""
                        })
                        Name (PBIX, Package (0x14)
                        {
                            Zero, 
                            One, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            0xFFFFFFFF, 
                            0x03, 
                            0xFFFFFFFF, 
                            Zero, 
                            0x00018000, 
                            0x01F4, 
                            0x0A, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            One, 
                            One, 
                            "", 
                            "", 
                            "LION", 
                            ""
                        })
                        Name (PBST, Package (0x04)
                        {
                            Zero, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF
                        })
                        Name (BSTP, Zero)
                        Name (BFWK, One)
                        Method (BFWE, 0, NotSerialized)
                        {
                            BFWK = One
                        }

                        Method (BFWD, 0, NotSerialized)
                        {
                            BFWK = Zero
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (BTEX)
                            {
                                Return (0x1F)
                            }
                            Else
                            {
                                Return (0x0F)
                            }
                        }

                        Method (_BIF, 0, Serialized)  // _BIF: Battery Information
                        {
                            PBIF [0x02] = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                            PBIF [0x04] = BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                            Local0 = BTDA /* \_SB_.PCI0.LPCB.EC0_.BTDA */
                            PBIF [One] = Local0
                            Divide ((Local0 * DWRN), 0x64, Local1, Local2)
                            PBIF [0x05] = Local2
                            Divide ((Local0 * DLOW), 0x64, Local1, Local2)
                            PBIF [0x06] = Local2
                            PBIF [0x09] = ToString (BMOD, Ones)
                            PBIF [0x0A] = ToString (BSER, Ones)
                            PBIF [0x0C] = ToString (BMFG, Ones)
                            Return (PBIF) /* \_SB_.PCI0.LPCB.EC0_.BAT0.PBIF */
                        }

                        Method (XBIX, 0, Serialized)
                        {
                            PBIX [0x03] = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                            PBIX [0x05] = BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                            Local0 = BTDA /* \_SB_.PCI0.LPCB.EC0_.BTDA */
                            PBIX [0x02] = Local0
                            Divide ((Local0 * DWRN), 0x64, Local1, Local2)
                            PBIX [0x06] = Local2
                            Divide ((Local0 * DLOW), 0x64, Local1, Local2)
                            PBIX [0x07] = Local2
                            PBIX [0x08] = BTCC /* \_SB_.PCI0.LPCB.EC0_.BTCC */
                            PBIX [0x10] = ToString (BMOD, Ones)
                            PBIX [0x11] = ToString (BSER, Ones)
                            PBIX [0x13] = ToString (BMFG, Ones)
                            Return (PBIX) /* \_SB_.PCI0.LPCB.EC0_.BAT0.PBIX */
                        }

                        Method (_BST, 0, Serialized)  // _BST: Battery Status
                        {
                            Local1 = Zero
                            If (ACEX)
                            {
                                If (BFCG)
                                {
                                    Local1 = 0x02
                                }
                                ElseIf (BFDC)
                                {
                                    Local1 = One
                                }
                            }
                            Else
                            {
                                Local1 = One
                            }

                            If (BFCR)
                            {
                                Local1 |= 0x04
                            }

                            PBST [Zero] = Local1
                            If ((Local1 != BSTP))
                            {
                                BSTP = Local1
                                Notify (BAT0, 0x80) // Status Change
                            }

                            PBST [One] = BTPR /* \_SB_.PCI0.LPCB.EC0_.BTPR */
                            Local1 = BTRA /* \_SB_.PCI0.LPCB.EC0_.BTRA */
                            If ((BFWK && (ACEX && !(BFDC && BFCG))))
                            {
                                Local2 = BTDF /* \_SB_.PCI0.LPCB.EC0_.BTDF */
                                Local3 = (Local2 >> 0x04)
                                If (((Local1 > (Local2 - Local3)) && (Local1 < (Local2 + 
                                    Local3))))
                                {
                                    Local1 = Local2
                                }
                            }

                            PBST [0x02] = Local1
                            PBST [0x03] = BTVO /* \_SB_.PCI0.LPCB.EC0_.BTVO */
                            Return (PBST) /* \_SB_.PCI0.LPCB.EC0_.BAT0.PBST */
                        }
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (FWH)
                {
                    Name (_HID, EisaId ("INT0800") /* Intel 82802 Firmware Hub Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C01") /* System Board */)  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            _Y01)
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (HPTE)
                        {
                            If ((OSYS >= 0x07D1))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }

                        Return (Zero)
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If (HPTE)
                        {
                            CreateDWordField (BUF0, \_SB.PCI0.LPCB.HPET._Y01._BAS, HPT0)  // _BAS: Base Address
                            If ((HPAS == One))
                            {
                                HPT0 = 0xFED01000
                            }

                            If ((HPAS == 0x02))
                            {
                                HPT0 = 0xFED02000
                            }

                            If ((HPAS == 0x03))
                            {
                                HPT0 = 0xFED03000
                            }
                        }

                        Return (BUF0) /* \_SB_.PCI0.LPCB.HPET.BUF0 */
                    }
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (RBUF, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x1000,             // Range Minimum
                            0x1000,             // Range Maximum
                            0x01,               // Alignment
                            0xFF,               // Length
                            )
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y02)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (!ISLP ())
                        {
                            CreateByteField (RBUF, \_SB.PCI0.LPCB.LDRC._Y02._LEN, R1LN)  // _LEN: Length
                            CreateWordField (RBUF, \_SB.PCI0.LPCB.LDRC._Y02._MIN, R1MN)  // _MIN: Minimum Base Address
                            CreateWordField (RBUF, \_SB.PCI0.LPCB.LDRC._Y02._MAX, R1MX)  // _MAX: Maximum Base Address
                            R1MN = 0x1400
                            R1MX = 0x1400
                            R1LN = 0x0400
                        }

                        Return (RBUF) /* \_SB_.PCI0.LPCB.LDRC.RBUF */
                    }
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (SIO)
                {
                    Name (_UID, Zero)  // _UID: Unique ID
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (ECMM)
                    {
                        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            FixedIO (
                                0x0900,             // Address
                                0xFF,               // Length
                                )
                        })
                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            FixedIO (
                                0x0900,             // Address
                                0xFF,               // Length
                                )
                        })
                    }

                    Device (ECUI)
                    {
                        Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            FixedIO (
                                0x0200,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0204,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0800,             // Address
                                0x80,               // Length
                                )
                            FixedIO (
                                0x0880,             // Address
                                0x80,               // Length
                                )
                        })
                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                FixedIO (
                                    0x0200,             // Address
                                    0x01,               // Length
                                    )
                                FixedIO (
                                    0x0204,             // Address
                                    0x01,               // Length
                                    )
                                FixedIO (
                                    0x0800,             // Address
                                    0x80,               // Length
                                    )
                                FixedIO (
                                    0x0880,             // Address
                                    0x80,               // Length
                                    )
                            }
                            EndDependentFn ()
                        })
                    }

                    Device (COM1)
                    {
                        Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Name (_ADR, Zero)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            FixedIO (
                                0x03F8,             // Address
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                        })
                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                FixedIO (
                                    0x03F8,             // Address
                                    0x08,               // Length
                                    )
                                IRQNoFlags ()
                                    {4}
                            }
                            EndDependentFn ()
                        })
                    }

                    Device (PS2K)
                    {
                        Name (_UID, Zero)  // _UID: Unique ID
                        Name (_ADR, Zero)  // _ADR: Address
                        Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                        Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                        {
                            FixedIO (
                                0x0060,             // Address
                                0x01,               // Length
                                )
                            FixedIO (
                                0x0064,             // Address
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        })
                        Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                        {
                            StartDependentFn (0x00, 0x00)
                            {
                                FixedIO (
                                    0x0060,             // Address
                                    0x01,               // Length
                                    )
                                FixedIO (
                                    0x0064,             // Address
                                    0x01,               // Length
                                    )
                                IRQNoFlags ()
                                    {1}
                            }
                            EndDependentFn ()
                        })
                    }
                }

                Device (TPM)
                {
                    Name (_HID, EisaId ("IFX0102"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C31"))  // _CID: Compatible ID
                    Name (_UID, One)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (TPMP)
                        {
                            Return (0x0F)
                        }

                        Return (Zero)
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x06F0,             // Range Minimum
                            0x06F0,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED40000,         // Address Base
                            0x00005000,         // Address Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {6}
                    })
                }
            }

            Device (SATA)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                Device (PRID)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, Zero, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        Return (PBUF) /* \_SB_.PCI0.SATA.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, Zero, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                    }

                    Device (DSK0)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                    }

                    Device (DSK1)
                    {
                        Name (_ADR, One)  // _ADR: Address
                    }
                }
            }

            Device (SBUS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
            }

            Device (SIOR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y03)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y06)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y07)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y08)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y09)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0A)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((S0B1 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y03._BAS, B0AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y03._LEN, B0LN)  // _LEN: Length
                        B0AD = S0B1 /* \S0B1 */
                        B0LN = 0x1000
                    }

                    If ((S1B1 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y04._BAS, B1AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y04._LEN, B1LN)  // _LEN: Length
                        B1AD = S1B1 /* \S1B1 */
                        B1LN = 0x1000
                    }

                    If ((S2B1 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y05._BAS, B2AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y05._LEN, B2LN)  // _LEN: Length
                        B2AD = S2B1 /* \S2B1 */
                        B2LN = 0x1000
                    }

                    If ((S3B1 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y06._BAS, B3AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y06._LEN, B3LN)  // _LEN: Length
                        B3AD = S3B1 /* \S3B1 */
                        B3LN = 0x1000
                    }

                    If ((S4B1 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y07._BAS, B4AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y07._LEN, B4LN)  // _LEN: Length
                        B4AD = S4B1 /* \S4B1 */
                        B4LN = 0x1000
                    }

                    If ((S5B1 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y08._BAS, B5AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y08._LEN, B5LN)  // _LEN: Length
                        B5AD = S5B1 /* \S5B1 */
                        B5LN = 0x1000
                    }

                    If ((S6B1 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y09._BAS, B6AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y09._LEN, B6LN)  // _LEN: Length
                        B6AD = S6B1 /* \S6B1 */
                        B6LN = 0x1000
                    }

                    If ((S7B1 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y0A._BAS, B7AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SIOR._Y0A._LEN, B7LN)  // _LEN: Length
                        B7AD = S7B1 /* \S7B1 */
                        B7LN = 0x1000
                    }

                    Return (RBUF) /* \_SB_.PCI0.SIOR.RBUF */
                }
            }

            Device (SDMA)
            {
                Name (_HID, "INTL9C60" /* Intel Baytrail SOC DMA Controller */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_ADR, 0x00150000)  // _ADR: Address
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0B)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((S0B0 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SDMA._Y0B._BAS, B0AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SDMA._Y0B._LEN, B0LN)  // _LEN: Length
                        B0AD = S0B0 /* \S0B0 */
                        B0LN = 0x1000
                    }

                    Return (RBUF) /* \_SB_.PCI0.SDMA.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((S0EN == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (I2C0)
            {
                Name (_HID, "INT33C2" /* Intel Serial I/O I2C Host Controller */)  // _HID: Hardware ID
                Name (_CID, "INT33C2" /* Intel Serial I/O I2C Host Controller */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_ADR, 0x00150001)  // _ADR: Address
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0C)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                })
                Name (DBUF, Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((S1B0 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.I2C0._Y0C._BAS, B0AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.I2C0._Y0C._LEN, B0LN)  // _LEN: Length
                        B0AD = S1B0 /* \S1B0 */
                        B0LN = 0x1000
                    }

                    If ((^^SDMA._STA () != Zero))
                    {
                        Return (ConcatenateResTemplate (RBUF, DBUF))
                    }
                    Else
                    {
                        Return (RBUF) /* \_SB_.PCI0.I2C0.RBUF */
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((S1EN == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (I2C1)
            {
                Name (_HID, "INT33C3" /* Intel Serial I/O I2C Host Controller */)  // _HID: Hardware ID
                Name (_CID, "INT33C3" /* Intel Serial I/O I2C Host Controller */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_ADR, 0x00150002)  // _ADR: Address
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0D)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                })
                Name (DBUF, Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((S2B0 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.I2C1._Y0D._BAS, B0AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.I2C1._Y0D._LEN, B0LN)  // _LEN: Length
                        B0AD = S2B0 /* \S2B0 */
                        B0LN = 0x1000
                    }

                    If ((^^SDMA._STA () != Zero))
                    {
                        Return (ConcatenateResTemplate (RBUF, DBUF))
                    }
                    Else
                    {
                        Return (RBUF) /* \_SB_.PCI0.I2C1.RBUF */
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((S2EN == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (SPI0)
            {
                Name (_HID, "INT33C0" /* Intel Serial I/O SPI Host Controller */)  // _HID: Hardware ID
                Name (_CID, "INT33C0" /* Intel Serial I/O SPI Host Controller */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_ADR, 0x00150003)  // _ADR: Address
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0E)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((S3B0 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SPI0._Y0E._BAS, B0AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SPI0._Y0E._LEN, B0LN)  // _LEN: Length
                        B0AD = S3B0 /* \S3B0 */
                        B0LN = 0x1000
                    }

                    Return (RBUF) /* \_SB_.PCI0.SPI0.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((S3EN == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (SPI1)
            {
                Name (_HID, "INT33C1" /* Intel Serial I/O SPI Host Controller */)  // _HID: Hardware ID
                Name (_CID, "INT33C1" /* Intel Serial I/O SPI Host Controller */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_ADR, 0x00150004)  // _ADR: Address
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y0F)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                })
                Name (DBUF, Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((S4B0 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SPI1._Y0F._BAS, B0AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SPI1._Y0F._LEN, B0LN)  // _LEN: Length
                        B0AD = S4B0 /* \S4B0 */
                        B0LN = 0x1000
                    }

                    If ((^^SDMA._STA () != Zero))
                    {
                        Return (ConcatenateResTemplate (RBUF, DBUF))
                    }
                    Else
                    {
                        Return (RBUF) /* \_SB_.PCI0.SPI1.RBUF */
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((S4EN == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (UAR0)
            {
                Name (_HID, "INT33C4" /* Intel Serial I/O UART Host Controller */)  // _HID: Hardware ID
                Name (_CID, "INT33C4" /* Intel Serial I/O UART Host Controller */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_ADR, 0x00150005)  // _ADR: Address
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y10)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x0000000D,
                    }
                })
                Name (DBUF, Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((S5B0 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.UAR0._Y10._BAS, B0AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.UAR0._Y10._LEN, B0LN)  // _LEN: Length
                        B0AD = S5B0 /* \S5B0 */
                        B0LN = 0x1000
                    }

                    If ((^^SDMA._STA () != Zero))
                    {
                        Return (ConcatenateResTemplate (RBUF, DBUF))
                    }
                    Else
                    {
                        Return (RBUF) /* \_SB_.PCI0.UAR0.RBUF */
                    }
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((S5EN == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (UAR1)
            {
                Name (_HID, "INT33C5" /* Intel Serial I/O UART Host Controller */)  // _HID: Hardware ID
                Name (_CID, "INT33C5" /* Intel Serial I/O UART Host Controller */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_ADR, 0x00150006)  // _ADR: Address
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y11)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x0000000D,
                    }
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((S6B0 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.UAR1._Y11._BAS, B0AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.UAR1._Y11._LEN, B0LN)  // _LEN: Length
                        B0AD = S6B0 /* \S6B0 */
                        B0LN = 0x1000
                    }

                    Return (RBUF) /* \_SB_.PCI0.UAR1.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((S6EN == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_HID, "INT33C6" /* Intel SD Host Controller */)  // _HID: Hardware ID
                Name (_CID, "PNP0D40" /* SDA Standard Compliant SD Host Controller */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_ADR, 0x00170000)  // _ADR: Address
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y12)
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000005,
                    }
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If ((S7B0 != Zero))
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.SDIO._Y12._BAS, B0AD)  // _BAS: Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.SDIO._Y12._LEN, B0LN)  // _LEN: Length
                        B0AD = S7B0 /* \S7B0 */
                        B0LN = 0x1000
                    }

                    Return (RBUF) /* \_SB_.PCI0.SDIO.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((S7EN == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
            }

            Device (GPIO)
            {
                Name (_HID, "INT33C7" /* Intel Serial I/O GPIO Host Controller */)  // _HID: Hardware ID
                Name (_CID, "INT33C7" /* Intel Serial I/O GPIO Host Controller */)  // _CID: Compatible ID
                Name (_UID, One)  // _UID: Unique ID
                Name (RBUF, ResourceTemplate ()
                {
                    DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                        0x00000000,         // Granularity
                        0x00000000,         // Range Minimum
                        0x00000000,         // Range Maximum
                        0x00000000,         // Translation Offset
                        0x00000000,         // Length
                        ,, _Y13, TypeStatic, DenseTranslation)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If (ISLP ())
                    {
                        CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y13._MIN, BMIN)  // _MIN: Minimum Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y13._MAX, BMAX)  // _MAX: Maximum Base Address
                        CreateDWordField (RBUF, \_SB.PCI0.GPIO._Y13._LEN, BLEN)  // _LEN: Length
                        BLEN = 0x0400
                        BMIN = 0x1400
                        BMAX = 0x17FF
                    }

                    Return (RBUF) /* \_SB_.PCI0.GPIO.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (ISLP ())
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }

            Scope (LPCB)
            {
                Method (GWAK, 1, NotSerialized)
                {
                    Local0 = (GPBS & 0xFFFFFFFFFFFFFFFE)
                    Divide (Arg0, 0x20, Local2, Local1)
                    Local3 = (Local0 + (Local1 * 0x04))
                    OperationRegion (IOWN, SystemIO, Local3, 0x04)
                    Field (IOWN, AnyAcc, NoLock, Preserve)
                    {
                        GOWN,   32
                    }

                    GOWN = (GOWN & ~(One << Local2))
                    Local3 = ((Local0 + 0x30) + (Local1 * 0x04))
                    OperationRegion (IROU, SystemIO, Local3, 0x04)
                    Field (IROU, AnyAcc, NoLock, Preserve)
                    {
                        GROU,   32
                    }

                    GROU = (GROU & ~(One << Local2))
                    Local3 = ((Local0 + 0x0100) + (Arg0 * 0x08))
                    OperationRegion (GPNC, SystemIO, Local3, 0x08)
                    Field (GPNC, AnyAcc, NoLock, Preserve)
                    {
                        GMOD,   1, 
                            ,   1, 
                        GIOS,   1, 
                        GINV,   1, 
                        GLES,   1, 
                            ,   24, 
                        ILVL,   1, 
                        OLVL,   1, 
                        GPWP,   2, 
                        ISEN,   1
                    }

                    GMOD = One
                    GIOS = One
                    GINV = One
                }
            }

            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    Return (Arg3)
                }
                Else
                {
                    CreateDWordField (Arg3, Zero, CDW1)
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }
        }
    }

    Scope (_TZ)
    {
        ThermalZone (THRM)
        {
            Name (_TC1, 0x02)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x05)  // _TC2: Thermal Constant 2
            Name (_TZP, 0x64)  // _TZP: Thermal Zone Polling
            Name (_TSP, 0x14)  // _TSP: Thermal Sampling Period
            Method (CTOK, 1, NotSerialized)
            {
                Local0 = (Arg0 * 0x0A)
                Local0 += 0x0AAC
                Return (Local0)
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (CTOK (TCRT))
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (CTOK (TPSV))
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                Return (PPKG ())
            }

            Method (TCHK, 0, Serialized)
            {
                Local0 = \_SB.PCI0.LPCB.EC0.TINS (TMPS)
                If ((Local0 == \_SB.PCI0.LPCB.EC0.TNCA))
                {
                    Return (CTOK (Zero))
                }

                If ((Local0 == \_SB.PCI0.LPCB.EC0.TNPR))
                {
                    Return (CTOK (Zero))
                }

                If ((Local0 == \_SB.PCI0.LPCB.EC0.TNOP))
                {
                    Return (CTOK (Zero))
                }

                If ((Local0 == \_SB.PCI0.LPCB.EC0.TBAD))
                {
                    Return (CTOK (Zero))
                }

                Local0 += \_SB.PCI0.LPCB.EC0.TOFS
                Local0 *= 0x0A
                Return (Local0)
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = TCHK ()
                Local1 = CTOK (TCRT)
                If ((Local0 >= Local1))
                {
                    Debug = "CRITICAL TEMPERATURE"
                    Debug = Local0
                    Sleep (0x03E8)
                    Local0 = TCHK ()
                    Debug = "RE-READ TEMPERATURE"
                    Debug = Local0
                }

                Return (Local0)
            }

            Method (_AC0, 0, NotSerialized)  // _ACx: Active Cooling, x=0-9
            {
                If ((FLVL <= Zero))
                {
                    Return (CTOK (F0OF))
                }
                Else
                {
                    Return (CTOK (F0ON))
                }
            }

            Method (_AC1, 0, NotSerialized)  // _ACx: Active Cooling, x=0-9
            {
                If ((FLVL <= One))
                {
                    Return (CTOK (F1OF))
                }
                Else
                {
                    Return (CTOK (F1ON))
                }
            }

            Name (_AL0, Package (0x01)  // _ALx: Active List, x=0-9
            {
                TDP0
            })
            Name (_AL1, Package (0x01)  // _ALx: Active List, x=0-9
            {
                TDP1
            })
            PowerResource (TNP0, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((FLVL <= Zero))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    FLVL = Zero
                    \_SB.PCI0.MCHC.CTLE (F0PW)
                    Notify (THRM, 0x81) // Thermal Trip Point Change
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    FLVL = One
                    \_SB.PCI0.MCHC.CTLD ()
                    Notify (THRM, 0x81) // Thermal Trip Point Change
                }
            }

            PowerResource (TNP1, 0x00, 0x0000)
            {
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((FLVL <= One))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Method (_ON, 0, NotSerialized)  // _ON_: Power On
                {
                    FLVL = One
                    Notify (THRM, 0x81) // Thermal Trip Point Change
                }

                Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                {
                    FLVL = One
                    Notify (THRM, 0x81) // Thermal Trip Point Change
                }
            }

            Device (TDP0)
            {
                Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    TNP0
                })
            }

            Device (TDP1)
            {
                Name (_HID, EisaId ("PNP0C0B") /* Fan (Thermal Solution) */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
                Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
                {
                    TNP1
                })
            }
        }
    }

    Name (OIPG, Package (0x02)
    {
        Package (0x04)
        {
            One, 
            Zero, 
            0xFFFFFFFF, 
            "LynxPoint"
        }, 

        Package (0x04)
        {
            0x03, 
            One, 
            0x3A, 
            "LynxPoint"
        }
    })
    Device (CRHW)
    {
        Name (_HID, EisaId ("GGL0001"))  // _HID: Hardware ID
        Method (_STA, 0, Serialized)  // _STA: Status
        {
            Return (0x0B)
        }

        Method (CHSW, 0, Serialized)
        {
            Name (WSHC, Package (0x01)
            {
                VBT3
            })
            Return (WSHC) /* \CRHW.CHSW.WSHC */
        }

        Method (FWID, 0, Serialized)
        {
            Name (DIW1, "")
            ToString (VBT5, 0x3F, DIW1) /* \CRHW.FWID.DIW1 */
            Name (DIWF, Package (0x01)
            {
                DIW1
            })
            Return (DIWF) /* \CRHW.FWID.DIWF */
        }

        Method (FRID, 0, Serialized)
        {
            Name (DIR1, "")
            ToString (VBT6, 0x3F, DIR1) /* \CRHW.FRID.DIR1 */
            Name (DIRF, Package (0x01)
            {
                DIR1
            })
            Return (DIRF) /* \CRHW.FRID.DIRF */
        }

        Method (HWID, 0, Serialized)
        {
            Name (DIW0, "")
            ToString (VBT4, 0xFF, DIW0) /* \CRHW.HWID.DIW0 */
            Name (DIWH, Package (0x01)
            {
                DIW0
            })
            Return (DIWH) /* \CRHW.HWID.DIWH */
        }

        Method (BINF, 0, Serialized)
        {
            Name (FNIB, Package (0x05)
            {
                VBT0, 
                VBT1, 
                VBT2, 
                VBT7, 
                VBT8
            })
            Return (FNIB) /* \CRHW.BINF.FNIB */
        }

        Method (GPIO, 0, Serialized)
        {
            Return (OIPG) /* \OIPG */
        }

        Method (VBNV, 0, Serialized)
        {
            Name (VNBV, Package (0x02)
            {
                0x26, 
                0x10
            })
            Return (VNBV) /* \CRHW.VBNV.VNBV */
        }

        Method (VDAT, 0, Serialized)
        {
            Name (TAD0, "")
            ToBuffer (CHVD, TAD0) /* \CRHW.VDAT.TAD0 */
            Name (TADV, Package (0x01)
            {
                TAD0
            })
            Return (TADV) /* \CRHW.VDAT.TADV */
        }

        Method (FMAP, 0, Serialized)
        {
            Name (PAMF, Package (0x01)
            {
                VBT9
            })
            Return (PAMF) /* \CRHW.FMAP.PAMF */
        }

        Method (MECK, 0, Serialized)
        {
            Name (HASH, Package (0x01)
            {
                MEHH
            })
            Return (HASH) /* \CRHW.MECK.HASH */
        }

        Method (MLST, 0, Serialized)
        {
            Name (TSLM, Package (0x0A)
            {
                "CHSW", 
                "FWID", 
                "HWID", 
                "FRID", 
                "BINF", 
                "GPIO", 
                "VBNV", 
                "VDAT", 
                "FMAP", 
                "MECK"
            })
            Return (TSLM) /* \CRHW.MLST.TSLM */
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x05, 
        0x05, 
        Zero, 
        Zero
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x06, 
        Zero, 
        Zero
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x07, 
        Zero, 
        Zero
    })
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 000000F4
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 82
[00Ah 0010   6]                       Oem ID : "CORE  "
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000001

[024h 0036   4]                 FACS Address : 7F784210
[028h 0040   4]                 DSDT Address : 7F784250
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B2
[034h 0052   1]            ACPI Enable Value : E1
[035h 0053   1]           ACPI Disable Value : 1E
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00001000
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00001004
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00001050
[04Ch 0076   4]       PM Timer Block Address : 00001008
[050h 0080   4]           GPE0 Block Address : 00001080
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 20
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0001
[062h 0098   2]                   C3 Latency : 0057
[064h 0100   2]               CPU Cache Size : 0400
[066h 0102   2]           Cache Flush Stride : 0010
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 00
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 00
[06Dh 0109   2]   Boot Flags (decoded below) : 0003
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 0
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 00008CAD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 1
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 00 [Undefined/Legacy]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 00
[084h 0132   8]                 FACS Address : 000000007F784210
[08Ch 0140   8]                 DSDT Address : 000000007F784250
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 00 [Undefined/Legacy]
[098h 0152   8]                      Address : 0000000000001000

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0B0h 0176   8]                      Address : 0000000000001004

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0C8h 0200   8]                      Address : 0000000000001050

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0D4h 0212   8]                      Address : 0000000000001008

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 00 [SystemMemory]
[0DDh 0221   1]                    Bit Width : 00
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224   8]                      Address : 0000000000000000

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236   8]                      Address : 0000000000000000


Raw Table Data: Length 244 (0xF4)

    0000: 46 41 43 50 F4 00 00 00 03 82 43 4F 52 45 20 20  // FACP......CORE  
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 01 00 00 00 10 42 78 7F 50 42 78 7F 01 02 09 00  // .....Bx.PBx.....
    0030: B2 00 00 00 E1 1E 00 00 00 10 00 00 00 00 00 00  // ................
    0040: 04 10 00 00 00 00 00 00 50 10 00 00 08 10 00 00  // ........P.......
    0050: 80 10 00 00 00 00 00 00 04 02 01 04 20 00 00 00  // ............ ...
    0060: 01 00 57 00 00 04 10 00 01 00 0D 00 00 03 00 00  // ..W.............
    0070: AD 8C 00 00 01 08 00 00 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 00 10 42 78 7F 00 00 00 00 50 42 78 7F  // .....Bx.....PBx.
    0090: 00 00 00 00 01 20 00 00 00 10 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 00 00 00 00 00 00 00 00 00 01 10 00 00  // ................
    00B0: 04 10 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 00 50 10 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 00 08 10 00 00 00 00 00 00 00 00 00 00  // . ..............
    00E0: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00  // ................
    00F0: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 00000000
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 00 00 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 70
[00Ah 0010   6]                       Oem ID : "CORE  "
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   4]            Hardware Block ID : 8086A201

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 40
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 00
[035h 0053   2]          Minimum Clock Ticks : 0080
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 70 43 4F 52 45 20 20  // HPET8....pCORE  
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 00 00 00 00 01 A2 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 80 00 00                          // ........


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : E5
[00Ah 0010   6]                       Oem ID : "CORE  "
[010h 0016   8]                 Oem Table ID : "COREBOOT"
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "CORE"
[020h 0032   4]        Asl Compiler Revision : 00000000

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F0000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 777F0CA1

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 E5 43 4F 52 45 20 20  // MCFG<.....CORE  
    0010: 43 4F 52 45 42 4F 4F 54 00 00 00 00 43 4F 52 45  // COREBOOT....CORE
    0020: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F0  // ................
    0030: 00 00 00 00 00 00 00 3F A1 0C 7F 77              // .......?...w


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "CORE  ", "COREBOOT", 0x0000002A)
{
    Name (S0EN, 0x00)
    Name (S1EN, 0x00)
    Name (S2EN, 0x00)
    Name (S3EN, 0x00)
    Name (S4EN, 0x00)
    Name (S5EN, 0x00)
    Name (S6EN, 0x00)
    Name (S7EN, 0x00)
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "CORE  ", "COREBOOT", 0x0000002A)
{
    External (PPCM, IntObj)
    External (PWRS, IntObj)
    External (TLVL, IntObj)

    Processor (\_PR.CPU0, 0x00, 0x00001000, 0x06)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCM) /* External reference */
        }

        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000578, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x0000310F, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000027E9, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00001F2E, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (PWRS)
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000001, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x00000001, 
                        0x00000000, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000010, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x00000002, 
                        0x00000043, 
                        0x00000384
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000033, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x00000003, 
                        0x00000094, 
                        0x000002BC
                    }
                })
            }

            Return (Package (0x04)
            {
                0x03, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000001, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x00000001, 
                    0x00000000, 
                    0x000003E8
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000010, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x00000002, 
                    0x00000043, 
                    0x00000384
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000033, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x00000003, 
                    0x00000094, 
                    0x000002BC
                }
            })
        }

        Name (_TSD, Package (0x01)  // _TSD: Throttling State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PTC, Package (0x02)  // _PTC: Processor Throttling Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (\TLVL) /* External reference */
        }

        Name (_TSS, Package (0x0F)  // _TSS: Throttling Supported States
        {
            Package (0x05)
            {
                0x00000064, 
                0x000003E8, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000005E, 
                0x000003AC, 
                0x00000000, 
                0x0000001F, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000058, 
                0x00000370, 
                0x00000000, 
                0x0000001E, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000052, 
                0x00000334, 
                0x00000000, 
                0x0000001D, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000004B, 
                0x000002F8, 
                0x00000000, 
                0x0000001C, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000045, 
                0x000002BC, 
                0x00000000, 
                0x0000001B, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000003F, 
                0x00000280, 
                0x00000000, 
                0x0000001A, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000039, 
                0x00000244, 
                0x00000000, 
                0x00000019, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000032, 
                0x00000208, 
                0x00000000, 
                0x00000018, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000002C, 
                0x000001CC, 
                0x00000000, 
                0x00000017, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000026, 
                0x00000190, 
                0x00000000, 
                0x00000016, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000020, 
                0x00000154, 
                0x00000000, 
                0x00000015, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000019, 
                0x00000118, 
                0x00000000, 
                0x00000014, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000013, 
                0x000000DC, 
                0x00000000, 
                0x00000013, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000000D, 
                0x000000A0, 
                0x00000000, 
                0x00000012, 
                0x00000000
            }
        })
    }

    Processor (\_PR.CPU1, 0x01, 0x00000000, 0x00)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCM) /* External reference */
        }

        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (_PSS, Package (0x04)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x00000578, 
                0x00003A98, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x0000310F, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x000027E9, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00001F2E, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If (PWRS)
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000001, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x00000001, 
                        0x00000000, 
                        0x000003E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000010, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x00000002, 
                        0x00000043, 
                        0x00000384
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x01,               // Bit Width
                                0x02,               // Bit Offset
                                0x0000000000000033, // Address
                                0x01,               // Access Size
                                )
                        }, 

                        0x00000003, 
                        0x00000094, 
                        0x000002BC
                    }
                })
            }

            Return (Package (0x04)
            {
                0x03, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000001, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x00000001, 
                    0x00000000, 
                    0x000003E8
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000010, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x00000002, 
                    0x00000043, 
                    0x00000384
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000033, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x00000003, 
                    0x00000094, 
                    0x000002BC
                }
            })
        }

        Name (_TSD, Package (0x01)  // _TSD: Throttling State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FC, 
                0x00000002
            }
        })
        Name (_PTC, Package (0x02)  // _PTC: Processor Throttling Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x00,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
        {
            Return (\TLVL) /* External reference */
        }

        Name (_TSS, Package (0x0F)  // _TSS: Throttling Supported States
        {
            Package (0x05)
            {
                0x00000064, 
                0x000003E8, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000005E, 
                0x000003AC, 
                0x00000000, 
                0x0000001F, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000058, 
                0x00000370, 
                0x00000000, 
                0x0000001E, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000052, 
                0x00000334, 
                0x00000000, 
                0x0000001D, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000004B, 
                0x000002F8, 
                0x00000000, 
                0x0000001C, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000045, 
                0x000002BC, 
                0x00000000, 
                0x0000001B, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000003F, 
                0x00000280, 
                0x00000000, 
                0x0000001A, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000039, 
                0x00000244, 
                0x00000000, 
                0x00000019, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000032, 
                0x00000208, 
                0x00000000, 
                0x00000018, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000002C, 
                0x000001CC, 
                0x00000000, 
                0x00000017, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000026, 
                0x00000190, 
                0x00000000, 
                0x00000016, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000020, 
                0x00000154, 
                0x00000000, 
                0x00000015, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000019, 
                0x00000118, 
                0x00000000, 
                0x00000014, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x00000013, 
                0x000000DC, 
                0x00000000, 
                0x00000013, 
                0x00000000
            }, 

            Package (0x05)
            {
                0x0000000D, 
                0x000000A0, 
                0x00000000, 
                0x00000012, 
                0x00000000
            }
        })
    }
}



