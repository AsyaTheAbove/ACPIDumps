
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20221020
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x0000017C  0x02  "ACRSYS"  "ACRPRDCT"  0x00003000  "1025"   0x00040000
 02)  MCFG  0x0000003C  0x01  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 03)  APIC  0x00000084  0x03  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 04)  SSDT  0x00000024  0x01  "ACRSYS"  "ACRPRDCT"  0x00001000  "1025"   0x00040000
 05)  TPM2  0x00000034  0x03  "ACRSYS"  "ACRPRDCT"  0x00000002  "1025"   0x00040000
 06)  SSDT  0x000027DE  0x02  "ACRSYS"  "ACRPRDCT"  0x00003000  "1025"   0x00040000
 07)  NHLT  0x0000002D  0x00  "ACRSYS"  "ACRPRDCT"  0x00000002  "1025"   0x00040000
 08)  DSDT  0x00007B3B  0x02  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 09)  SSDT  0x0000032D  0x02  "ACRSYS"  "ACRPRDCT"  0x00003000  "1025"   0x00040000
 10)  WSMT  0x00000028  0x01  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 11)  LPIT  0x0000005C  0x01  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 12)  SSDT  0x000055D0  0x01  "ACRSYS"  "ACRPRDCT"  0x00001000  "1025"   0x00040000
 13)  UEFI  0x00000042  0x01  "ACRSYS"  "ACRPRDCT"  0x00000002  "1025"   0x00040000
 14)  DBG2  0x00000072  0x00  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 15)  WDAT  0x00000104  0x01  "ACRSYS"  "ACRPRDCT"  0x00000000  "1025"   0x00040000
 16)  SSDT  0x0000072B  0x02  "ACRSYS"  "ACRPRDCT"  0x00003000  "1025"   0x00040000
 17)  DMAR  0x000000A8  0x01  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 18)  FACP  0x00000114  0x06  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 19)  FPDT  0x00000034  0x01  "ACRSYS"  "ACRPRDCT"  0x00000002  "1025"   0x00040000
 20)  SSDT  0x00000554  0x01  "ACRSYS"  "ACRPRDCT"  0x00001000  "1025"   0x00040000
 21)  MSDM  0x00000055  0x03  "ACRSYS"  "ACRPRDCT"  0x00000001  "1025"   0x00040000
 22)  SSDT  0x000003DF  0x02  "ACRSYS"  "ACRPRDCT"  0x00003000  "1025"   0x00040000
 23)  DBGP  0x00000034  0x01  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 24)  HPET  0x00000038  0x01  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 25)  BDAT  0x00000030  0x02  "ACRSYS"  "ACRPRDCT"  0x00000000  "1025"   0x00040000
 26)  SSDT  0x00000F80  0x02  "ACRSYS"  "ACRPRDCT"  0x00000003  "1025"   0x00040000
 27)  UEFI  0x00000236  0x01  "ACRSYS"  "ACRPRDCT"  0x00000001  "1025"   0x00040000
 28)  FACS  0x00000040  0x02
 29)  BGRT  0x00000038  0x01  "ACRSYS"  "ACRPRDCT"  0x00000001  "1025"   0x00040000
 30)  SSDT  0x0000008D  0x02  "PmRef "  "ApCst   "  0x00003000  "INTL"   0x20130117
 31)  SSDT  0x00000102  0x02  "PmRef "  "Cpu0Cst "  0x00003001  "INTL"   0x20130117
 32)  SSDT  0x0000015F  0x02  "PmRef "  "ApIst   "  0x00003000  "INTL"   0x20130117

Found 32 ACPI tables in acpidump

APIC
----
[000h 0000 004h]                   Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004 004h]                Table Length : 00000084
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : DD
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000003
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]          Local Apic Address : FEE00000
[028h 0040 004h]       Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044 001h]               Subtable Type : 00 [Processor Local APIC]
[02Dh 0045 001h]                      Length : 08
[02Eh 0046 001h]                Processor ID : 01
[02Fh 0047 001h]               Local Apic ID : 00
[030h 0048 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052 001h]               Subtable Type : 00 [Processor Local APIC]
[035h 0053 001h]                      Length : 08
[036h 0054 001h]                Processor ID : 02
[037h 0055 001h]               Local Apic ID : 02
[038h 0056 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[03Ch 0060 001h]               Subtable Type : 00 [Processor Local APIC]
[03Dh 0061 001h]                      Length : 08
[03Eh 0062 001h]                Processor ID : 03
[03Fh 0063 001h]               Local Apic ID : 04
[040h 0064 004h]       Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068 001h]               Subtable Type : 00 [Processor Local APIC]
[045h 0069 001h]                      Length : 08
[046h 0070 001h]                Processor ID : 04
[047h 0071 001h]               Local Apic ID : 06
[048h 0072 004h]       Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[04Ch 0076 001h]               Subtable Type : 01 [I/O APIC]
[04Dh 0077 001h]                      Length : 0C
[04Eh 0078 001h]                 I/O Apic ID : 01
[04Fh 0079 001h]                    Reserved : 00
[050h 0080 004h]                     Address : FEC00000
[054h 0084 004h]                   Interrupt : 00000000

[058h 0088 001h]               Subtable Type : 02 [Interrupt Source Override]
[059h 0089 001h]                      Length : 0A
[05Ah 0090 001h]                         Bus : 00
[05Bh 0091 001h]                      Source : 00
[05Ch 0092 004h]                   Interrupt : 00000002
[060h 0096 002h]       Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[062h 0098 001h]               Subtable Type : 02 [Interrupt Source Override]
[063h 0099 001h]                      Length : 0A
[064h 0100 001h]                         Bus : 00
[065h 0101 001h]                      Source : 09
[066h 0102 004h]                   Interrupt : 00000009
[06Ah 0106 002h]       Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[06Ch 0108 001h]               Subtable Type : 04 [Local APIC NMI]
[06Dh 0109 001h]                      Length : 06
[06Eh 0110 001h]                Processor ID : 01
[06Fh 0111 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3
[071h 0113 001h]        Interrupt Input LINT : 01

[072h 0114 001h]               Subtable Type : 04 [Local APIC NMI]
[073h 0115 001h]                      Length : 06
[074h 0116 001h]                Processor ID : 02
[075h 0117 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3
[077h 0119 001h]        Interrupt Input LINT : 01

[078h 0120 001h]               Subtable Type : 04 [Local APIC NMI]
[079h 0121 001h]                      Length : 06
[07Ah 0122 001h]                Processor ID : 03
[07Bh 0123 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3
[07Dh 0125 001h]        Interrupt Input LINT : 01

[07Eh 0126 001h]               Subtable Type : 04 [Local APIC NMI]
[07Fh 0127 001h]                      Length : 06
[080h 0128 001h]                Processor ID : 04
[081h 0129 002h]       Flags (decoded below) : 000D
                                    Polarity : 1
                                Trigger Mode : 3
[083h 0131 001h]        Interrupt Input LINT : 01

Raw Table Data: Length 132 (0x84)

    0000: 41 50 49 43 84 00 00 00 03 DD 41 43 52 53 59 53  // APIC......ACRSYS
    0010: 41 43 52 50 52 44 43 54 03 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 00 00 E0 FE 01 00 00 00 00 08 01 00  // ................
    0030: 01 00 00 00 00 08 02 02 00 00 00 00 00 08 03 04  // ................
    0040: 01 00 00 00 00 08 04 06 00 00 00 00 01 0C 01 00  // ................
    0050: 00 00 C0 FE 00 00 00 00 02 0A 00 00 02 00 00 00  // ................
    0060: 00 00 02 0A 00 09 09 00 00 00 0F 00 04 06 01 0D  // ................
    0070: 00 01 04 06 02 0D 00 01 04 06 03 0D 00 01 04 06  // ................
    0080: 04 0D 00 01                                      // ....


BDAT
----
[000h 0000 004h]                   Signature : "BDAT"    [BIOS Data ACPI Table]
[004h 0004 004h]                Table Length : 00000030
[008h 0008 001h]                    Revision : 02
[009h 0009 001h]                    Checksum : 0A
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000


[024h 0036 00Ch]        BDAT Generic Address : [Generic Address Structure]
[024h 0036 001h]                    Space ID : 00 [SystemMemory]
[025h 0037 001h]                   Bit Width : 00
[026h 0038 001h]                  Bit Offset : 00
[027h 0039 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[028h 0040 008h]                     Address : 000000007AFB4000


Raw Table Data: Length 48 (0x30)

    0000: 42 44 41 54 30 00 00 00 02 0A 41 43 52 53 59 53  // BDAT0.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 00 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 00 00 00 00 00 40 FB 7A 00 00 00 00  // .........@.z....


BGRT
----
[000h 0000 004h]                   Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 74
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 002h]                     Version : 0001
[026h 0038 001h]      Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039 001h]                  Image Type : 00
[028h 0040 008h]               Image Address : 0000000076009000
[030h 0048 004h]               Image OffsetX : 0000019A
[034h 0052 004h]               Image OffsetY : 0000008C

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 74 41 43 52 53 59 53  // BGRT8....tACRSYS
    0010: 41 43 52 50 52 44 43 54 01 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 01 00 01 00 00 90 00 76 00 00 00 00  // ...........v....
    0030: 9A 01 00 00 8C 00 00 00                          // ........


DBG2
----
[000h 0000 004h]                   Signature : "DBG2"    [Debug Port Table type 2]
[004h 0004 004h]                Table Length : 00000072
[008h 0008 001h]                    Revision : 00
[009h 0009 001h]                    Checksum : E4
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000003
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]                 Info Offset : 0000002C
[028h 0040 004h]                  Info Count : 00000001

[02Ch 0044 001h]                    Revision : 00
[02Dh 0045 002h]                      Length : 0046
[02Fh 0047 001h]              Register Count : 01
[030h 0048 002h]             Namepath Length : 0020
[032h 0050 002h]             Namepath Offset : 0026
[034h 0052 002h]             OEM Data Length : 0000 [Optional field not present]
[036h 0054 002h]             OEM Data Offset : 0000 [Optional field not present]
[038h 0056 002h]                   Port Type : 8000
[03Ah 0058 002h]                Port Subtype : 0000
[03Ch 0060 002h]                    Reserved : 0000
[03Eh 0062 002h]         Base Address Offset : 0016
[040h 0064 002h]         Address Size Offset : 0022

[042h 0066 00Ch]       Base Address Register : [Generic Address Structure]
[042h 0066 001h]                    Space ID : 00 [SystemMemory]
[043h 0067 001h]                   Bit Width : 08
[044h 0068 001h]                  Bit Offset : 00
[045h 0069 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[046h 0070 008h]                     Address : 0000000000000000

[04Eh 0078 004h]                Address Size : 0000000C

[052h 0082 002h]                    Namepath : "."

Raw Table Data: Length 114 (0x72)

    0000: 44 42 47 32 72 00 00 00 00 E4 41 43 52 53 59 53  // DBG2r.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 03 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 2C 00 00 00 01 00 00 00 00 46 00 01  // ....,........F..
    0030: 20 00 26 00 00 00 00 00 00 80 00 00 00 00 16 00  //  .&.............
    0040: 22 00 00 08 00 00 00 00 00 00 00 00 00 00 0C 00  // "...............
    0050: 00 00 2E 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00                                            // ..


DBGP
----
[000h 0000 004h]                   Signature : "DBGP"    [Debug Port Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : AF
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000003
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]              Interface Type : 00
[025h 0037 003h]                    Reserved : 000000

[028h 0040 00Ch]         Debug Port Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 08
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 0000000000000000


Raw Table Data: Length 52 (0x34)

    0000: 44 42 47 50 34 00 00 00 01 AF 41 43 52 53 59 53  // DBGP4.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 03 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 00 00 00 00 00 08 00 00 00 00 00 00  // ................
    0030: 00 00 00 00                                      // ....


DMAR
----
[000h 0000 004h]                   Signature : "DMAR"    [DMA Remapping Table]
[004h 0004 004h]                Table Length : 000000A8
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 1A
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000003
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 001h]          Host Address Width : 26
[025h 0037 001h]                       Flags : 01
[026h 0038 00Ah]                    Reserved : 00 00 00 00 00 00 00 00 00 00

[030h 0048 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[032h 0050 002h]                      Length : 0018

[034h 0052 001h]                       Flags : 00
[035h 0053 001h]                    Reserved : 00
[036h 0054 002h]          PCI Segment Number : 0000
[038h 0056 008h]       Register Base Address : 00000000FED64000

[040h 0064 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[041h 0065 001h]                Entry Length : 08
[042h 0066 002h]                    Reserved : 0000
[044h 0068 001h]              Enumeration ID : 00
[045h 0069 001h]              PCI Bus Number : 00

[046h 0070 002h]                    PCI Path : 02,00


[048h 0072 002h]               Subtable Type : 0000 [Hardware Unit Definition]
[04Ah 0074 002h]                      Length : 0020

[04Ch 0076 001h]                       Flags : 01
[04Dh 0077 001h]                    Reserved : 00
[04Eh 0078 002h]          PCI Segment Number : 0000
[050h 0080 008h]       Register Base Address : 00000000FED65000

[058h 0088 001h]           Device Scope Type : 03 [IOAPIC Device]
[059h 0089 001h]                Entry Length : 08
[05Ah 0090 002h]                    Reserved : 0000
[05Ch 0092 001h]              Enumeration ID : 01
[05Dh 0093 001h]              PCI Bus Number : FA

[05Eh 0094 002h]                    PCI Path : 1F,00


[060h 0096 001h]           Device Scope Type : 04 [Message-capable HPET Device]
[061h 0097 001h]                Entry Length : 08
[062h 0098 002h]                    Reserved : 0000
[064h 0100 001h]              Enumeration ID : 00
[065h 0101 001h]              PCI Bus Number : 00

[066h 0102 002h]                    PCI Path : 1F,07


[068h 0104 002h]               Subtable Type : 0001 [Reserved Memory Region]
[06Ah 0106 002h]                      Length : 0020

[06Ch 0108 002h]                    Reserved : 0000
[06Eh 0110 002h]          PCI Segment Number : 0000
[070h 0112 008h]                Base Address : 000000007AE9C000
[078h 0120 008h]         End Address (limit) : 000000007AEBBFFF

[080h 0128 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[081h 0129 001h]                Entry Length : 08
[082h 0130 002h]                    Reserved : 0000
[084h 0132 001h]              Enumeration ID : 00
[085h 0133 001h]              PCI Bus Number : 00

[086h 0134 002h]                    PCI Path : 15,00


[088h 0136 002h]               Subtable Type : 0001 [Reserved Memory Region]
[08Ah 0138 002h]                      Length : 0020

[08Ch 0140 002h]                    Reserved : 0000
[08Eh 0142 002h]          PCI Segment Number : 0000
[090h 0144 008h]                Base Address : 000000007B800000
[098h 0152 008h]         End Address (limit) : 000000007FFFFFFF

[0A0h 0160 001h]           Device Scope Type : 01 [PCI Endpoint Device]
[0A1h 0161 001h]                Entry Length : 08
[0A2h 0162 002h]                    Reserved : 0000
[0A4h 0164 001h]              Enumeration ID : 00
[0A5h 0165 001h]              PCI Bus Number : 00

[0A6h 0166 002h]                    PCI Path : 02,00


Raw Table Data: Length 168 (0xA8)

    0000: 44 4D 41 52 A8 00 00 00 01 1A 41 43 52 53 59 53  // DMAR......ACRSYS
    0010: 41 43 52 50 52 44 43 54 03 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 26 01 00 00 00 00 00 00 00 00 00 00  // ....&...........
    0030: 00 00 18 00 00 00 00 00 00 40 D6 FE 00 00 00 00  // .........@......
    0040: 01 08 00 00 00 00 02 00 00 00 20 00 01 00 00 00  // .......... .....
    0050: 00 50 D6 FE 00 00 00 00 03 08 00 00 01 FA 1F 00  // .P..............
    0060: 04 08 00 00 00 00 1F 07 01 00 20 00 00 00 00 00  // .......... .....
    0070: 00 C0 E9 7A 00 00 00 00 FF BF EB 7A 00 00 00 00  // ...z.......z....
    0080: 01 08 00 00 00 00 15 00 01 00 20 00 00 00 00 00  // .......... .....
    0090: 00 00 80 7B 00 00 00 00 FF FF FF 7F 00 00 00 00  // ...{............
    00A0: 01 08 00 00 00 00 02 00                          // ........


DSDT
----
DefinitionBlock ("", "DSDT", 2, "ACRSYS", "ACRPRDCT", 0x00000003)
{
    /*
     * iASL Warning: There were 3 external control methods found during
     * disassembly, but only 0 were resolved (3 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CPU0._PPC, UnknownObj)
    External (_PR_.NLPC, UnknownObj)
    External (_SB_.CHRG, UnknownObj)
    External (_SB_.IETM, UnknownObj)
    External (_SB_.PCI0.GFX0.AINT, MethodObj)    // Warning: Unknown method, guessing 2 arguments
    External (_SB_.PCI0.GFX0.BLM0, UnknownObj)
    External (_SB_.PCI0.GFX0.BLM1, UnknownObj)
    External (_SB_.PCI0.GFX0.BLM2, UnknownObj)
    External (_SB_.PCI0.GFX0.BLM3, UnknownObj)
    External (_SB_.PCI0.GFX0.BLM4, UnknownObj)
    External (_SB_.PCI0.GFX0.BLM5, UnknownObj)
    External (_SB_.PCI0.GFX0.BLM6, UnknownObj)
    External (_SB_.PCI0.GFX0.BLM7, UnknownObj)
    External (_SB_.PCI0.GFX0.BLM8, UnknownObj)
    External (_SB_.PCI0.GFX0.BLM9, UnknownObj)
    External (_SB_.PCI0.GFX0.BLMX, UnknownObj)
    External (_SB_.PCI0.GFX0.CLID, UnknownObj)
    External (_SB_.PCI0.GFX0.DD1F, UnknownObj)
    External (_SB_.PCI0.GFX0.GHDS, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (_SB_.PCI0.WMID, UnknownObj)
    External (_SB_.PCI0.WMID.FEBC, UnknownObj)
    External (_SB_.TPM_.PTS_, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (PDC0, UnknownObj)
    External (PDC1, UnknownObj)
    External (PDC2, UnknownObj)
    External (PDC3, UnknownObj)
    External (SEN1, UnknownObj)
    External (WMID, UnknownObj)

    Name (SP3O, 0x2E)
    Name (IO4B, 0x0A20)
    Name (IO4L, 0x20)
    Name (SP1O, 0x4E)
    Name (PMBS, 0x0400)
    Name (SMIP, 0xB2)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PMCB, 0xFED03000)
    Name (IBAS, 0xFED08000)
    Name (SRCB, 0xFED1C000)
    Name (HPTB, 0xFED00000)
    Name (PEBS, 0xE0000000)
    Name (PELN, 0x10000000)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (GCDD, One)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x02)
    Name (DSLC, 0x03)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (PSSS, 0x2B)
    Name (SOOT, 0x35)
    Name (ESCS, 0x48)
    Name (SDGV, 0x1C)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, Zero)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (ITKE, Zero)
    Name (FTBL, 0x04)
    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    OperationRegion (GNVS, SystemMemory, 0x7AFAE000, 0x039D)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        LIDS,   8, 
        PWRS,   8, 
        ACTT,   8, 
        CRTT,   8, 
        DTS1,   8, 
        DTS2,   8, 
        APIC,   8, 
        MPEN,   8, 
        RSV0,   8, 
        CSTE,   16, 
        NSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        MORD,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        BDID,   8, 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        I409,   8, 
        I509,   8, 
        I609,   8, 
        I709,   8, 
        IDMS,   8, 
        IF1E,   8, 
        GSMI,   8, 
        PAVP,   8, 
        OSCC,   8, 
        NEXP,   8, 
        DSEN,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        DID9,   32, 
        DIDA,   32, 
        DIDB,   32, 
        DIDC,   32, 
        DIDD,   32, 
        DIDE,   32, 
        DIDF,   32, 
        NHLA,   32, 
        NHLL,   32, 
        ADFM,   32, 
        PFLV,   8, 
        BREV,   8, 
        XHCI,   8, 
        PMEN,   8, 
        IPUD,   8, 
        U21A,   32, 
        GP0A,   32, 
        GP0L,   32, 
        GP1A,   32, 
        GP1L,   32, 
        GP2A,   32, 
        GP2L,   32, 
        GP3A,   32, 
        GP3L,   32, 
        GP4A,   32, 
        GP4L,   32, 
        EM0A,   32, 
        EM0L,   32, 
        EM1A,   32, 
        EM1L,   32, 
        DPTE,   8, 
        S0DE,   8, 
        S0PT,   8, 
        S0C3,   8, 
        S0HT,   8, 
        S0CT,   8, 
        CHGE,   8, 
        DDSP,   8, 
        DFAN,   8, 
        DPSR,   8, 
        DPCT,   32, 
        DPPT,   32, 
        DGC0,   32, 
        DGP0,   32, 
        DGC1,   32, 
        DGP1,   32, 
        DGC2,   32, 
        DGP2,   32, 
        DGC3,   32, 
        DGP3,   32, 
        DGC4,   32, 
        DGP4,   32, 
        DLPM,   8, 
        DSC0,   32, 
        DSC1,   32, 
        DSC2,   32, 
        DSC3,   32, 
        DSC4,   32, 
        RSV1,   8, 
        LPOE,   32, 
        LPPS,   32, 
        LPST,   32, 
        LPPC,   32, 
        LPPF,   32, 
        DPME,   8, 
        BCSL,   8, 
        TPMA,   32, 
        TPML,   32, 
        PSSD,   8, 
        MDMS,   8, 
        GPSM,   8, 
        ADPM,   32, 
        OSSL,   8, 
        WIFD,   8, 
        DD1A,   32, 
        DD1L,   32, 
        DD3A,   32, 
        DD3L,   32, 
        BMDA,   32, 
        BMIA,   32, 
        P2BA,   32, 
        EDPV,   8, 
        DIDX,   32, 
        EPCS,   8, 
        EMNA,   64, 
        ELNG,   64, 
        WCAS,   8, 
        UCAS,   8, 
        ADOS,   8, 
        D11A,   32, 
        D11L,   32, 
        ECDB,   8, 
        ECLP,   8, 
        ECNO,   8, 
        EMOD,   8, 
        I21A,   32, 
        I21L,   32, 
        I31A,   32, 
        I31L,   32, 
        I41A,   32, 
        I41L,   32, 
        I51A,   32, 
        I51L,   32, 
        I61A,   32, 
        I61L,   32, 
        I71A,   32, 
        I71L,   32, 
        OTG0,   32, 
        OTG1,   32, 
        P10A,   32, 
        P10L,   32, 
        P11A,   32, 
        P11L,   32, 
        P21A,   32, 
        P21L,   32, 
        P80D,   32, 
        PEP0,   8, 
        PEPC,   16, 
        PEPY,   8, 
        PLCS,   8, 
        PLVL,   16, 
        PSCP,   8, 
        PSVT,   8, 
        RCG0,   16, 
        RTD3,   8, 
        S0ID,   8, 
        S21A,   32, 
        S21L,   32, 
        S31A,   32, 
        S31L,   32, 
        SD1A,   32, 
        SD1L,   32, 
        SI1A,   32, 
        SI1L,   32, 
        SP1A,   32, 
        SP1L,   32, 
        SPST,   8, 
        U11A,   32, 
        U11L,   32, 
        U21L,   32, 
        W381,   8, 
        ECON,   8, 
        PB1E,   8, 
        DBGS,   8, 
        IPUA,   32, 
        BNUM,   8, 
        B0SC,   8, 
        ECR1,   8, 
        HVCO,   8, 
        UBCB,   32, 
        SBTD,   8, 
        DPAT,   32, 
        ENMD,   8, 
        ATTP,   8, 
        PTTP,   8, 
        CTTP,   8, 
        TSLP,   8, 
        S1DE,   8, 
        S1AT,   8, 
        S1PT,   8, 
        S1CT,   8, 
        SSP1,   8, 
        DPAP,   8, 
        DPPP,   8, 
        DPCP,   8, 
        EAPP,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        DTSE,   8, 
        RSV2,   8, 
        IGDS,   8, 
        HPME,   8, 
        WWEN,   8, 
        Offset (0x23D), 
        PASL,   8, 
        IRMC,   8, 
        CPUS,   8, 
        STEP,   8, 
        RSV4,   8, 
        LTR1,   8, 
        LTR2,   8, 
        LTR3,   8, 
        LTR4,   8, 
        LTR5,   8, 
        LTR6,   8, 
        OBF1,   8, 
        OBF2,   8, 
        OBF3,   8, 
        OBF4,   8, 
        OBF5,   8, 
        OBF6,   8, 
        RPA1,   32, 
        RPA2,   32, 
        RPA3,   32, 
        RPA4,   32, 
        RPA5,   32, 
        RPA6,   32, 
        PML1,   16, 
        PML2,   16, 
        PML3,   16, 
        PML4,   16, 
        PML5,   16, 
        PML6,   16, 
        PNL1,   16, 
        PNL2,   16, 
        PNL3,   16, 
        PNL4,   16, 
        PNL5,   16, 
        PNL6,   16, 
        TRTV,   8, 
        RSV5,   32, 
        PWRE,   8, 
        PBPE,   8, 
        HGEN,   8, 
        XBAS,   32, 
        DLPW,   16, 
        DLHR,   16, 
        HRCO,   32, 
        HRPO,   16, 
        HRAI,   8, 
        PECO,   32, 
        PEPO,   16, 
        PEAI,   8, 
        SCBN,   8, 
        EECP,   8, 
        RPBA,   32, 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        GN1E,   8, 
        GN2E,   8, 
        GN3E,   8, 
        GN4E,   8, 
        G1AT,   8, 
        G1PT,   8, 
        G1CT,   8, 
        G1HT,   8, 
        G1C3,   8, 
        TSP1,   8, 
        G2AT,   8, 
        G2PT,   8, 
        G2CT,   8, 
        G2HT,   8, 
        G2C3,   8, 
        TSP2,   8, 
        G3AT,   8, 
        G3PT,   8, 
        G3CT,   8, 
        G3HT,   8, 
        G3C3,   8, 
        TSP3,   8, 
        G4AT,   8, 
        G4PT,   8, 
        G4CT,   8, 
        G4HT,   8, 
        G4C3,   8, 
        TSP4,   8, 
        DPC3,   32, 
        DPHT,   32, 
        S1S3,   8, 
        S1HT,   8, 
        PCSP,   8, 
        IOBF,   8, 
        XDCE,   8, 
        RSV6,   8, 
        RSV7,   8, 
        VTKB,   8, 
        WGEN,   8, 
        WGPL,   16, 
        WGTW,   32, 
        PSME,   8, 
        PSD0,   8, 
        PSP0,   16, 
        PST0,   32, 
        PSD1,   8, 
        PSP1,   16, 
        PST1,   32, 
        PDD0,   8, 
        PDP0,   8, 
        PDI0,   8, 
        PDL0,   16, 
        PDT0,   32, 
        PDD1,   8, 
        PDP1,   8, 
        PDI1,   8, 
        PDL1,   16, 
        PDT1,   32, 
        IS3A,   8, 
        ISC1,   8, 
        NFCN,   8, 
        PSSI,   8, 
        UARB,   8, 
        GSBC,   8, 
        AG1L,   64, 
        AG1H,   64, 
        AG2L,   64, 
        AG2H,   64, 
        AG3L,   64, 
        AG3H,   64, 
        PPPR,   16, 
        DCFE,   16, 
        ODV0,   8, 
        ODV1,   8, 
        ODV2,   8, 
        ODV3,   8, 
        ODV4,   8, 
        ODV5,   8, 
        VSP1,   8, 
        V1AT,   8, 
        V1PV,   8, 
        V1CR,   8, 
        V1C3,   8, 
        V1HT,   8, 
        VSP2,   8, 
        V2AT,   8, 
        V2PV,   8, 
        V2CR,   8, 
        V2C3,   8, 
        V2HT,   8, 
        VSP3,   8, 
        V3AT,   8, 
        V3PV,   8, 
        V3CR,   8, 
        V3C3,   8, 
        V3HT,   8, 
        VSPE,   8, 
        SDS1,   8, 
        NFCS,   8, 
        SPLP,   16, 
        SPLT,   32, 
        PNSL,   8, 
        EEPI,   8, 
        ETYC,   8, 
        WWPT,   8, 
        WWC3,   8, 
        WWHT,   8, 
        WWCT,   8, 
        DPHL,   8, 
        DPLL,   8, 
        IPCE,   8, 
        ODBG,   8, 
        P2ME,   8, 
        P2MK,   8, 
        M32B,   32, 
        M32L,   32, 
        LGBE,   8, 
        CROT,   8, 
        TCPL,   8, 
        TCPD,   8, 
        IC0S,   32, 
        IC1S,   32, 
        IC2S,   32, 
        IC3S,   32, 
        IC4S,   32, 
        IC5S,   32, 
        IC6S,   32, 
        IC7S,   32, 
        SDEN,   8, 
        SIOE,   8, 
        EMCE,   8, 
        EMMS,   8, 
        IUCE,   8, 
        IUDE,   8, 
        GBSX,   8
    }

    Scope (_SB)
    {
        Name (PR00, Package (0x12)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKE, 
                Zero
            }
        })
        Name (AR00, Package (0x24)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x18
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                One, 
                Zero, 
                0x28
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                Zero, 
                Zero, 
                0x19
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                Zero, 
                Zero, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                One, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                One, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0015FFFF, 
                One, 
                Zero, 
                0x0D
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x1B
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                Zero, 
                Zero, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                One, 
                Zero, 
                0x20
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                Zero, 
                0x21
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                Zero, 
                0x22
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                Zero, 
                Zero, 
                0x04
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                One, 
                Zero, 
                0x05
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                Zero, 
                0x06
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                Zero, 
                0x07
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x23
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                One, 
                Zero, 
                0x24
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                Zero, 
                0x25
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x03
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x27
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                Zero, 
                Zero, 
                0x2A
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x14
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x15
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKG, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x16
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKH, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x17
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x14
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PR00) /* \_SB_.PR00 */
            }

            Device (VLVC)
            {
                Name (_ADR, Zero)  // _ADR: Address
                OperationRegion (HBUS, PCI_Config, Zero, 0xFF)
                Field (HBUS, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x48), 
                    MHEN,   1, 
                        ,   14, 
                    MHBR,   24, 
                    Offset (0xB0), 
                    BDSM,   32, 
                    BGSM,   32, 
                    Offset (0xBC), 
                    TOLD,   32
                }
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RES0, \_SB.PCI0._Y00._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y00._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y00._LEN, M1LN)  // _LEN: Length
                M1LN = M32L /* \M32L */
                M1MN = M32B /* \M32B */
                M1MX = ((M1MN + M1LN) - One)
                CreateDWordField (RES0, \_SB.PCI0._Y01._MIN, GSMN)  // _MIN: Minimum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y01._MAX, GSMX)  // _MAX: Maximum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y01._LEN, GSLN)  // _LEN: Length
                GSMN = ^VLVC.BDSM /* \_SB_.PCI0.VLVC.BDSM */
                GSMX = (^VLVC.TOLD & 0xFFFFF000)
                GSMX--
                GSLN = ((GSMX - GSMN) + One)
                CreateDWordField (RES0, \_SB.PCI0._Y02._MIN, GDMN)  // _MIN: Minimum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y02._MAX, GDMX)  // _MAX: Maximum Base Address
                CreateDWordField (RES0, \_SB.PCI0._Y02._LEN, GDLN)  // _LEN: Length
                GDMN = ^VLVC.BGSM /* \_SB_.PCI0.VLVC.BGSM */
                GDMX = (^VLVC.BDSM & 0xFFFFF000)
                GDMX--
                GDLN = ((GDMX - GDMN) + One)
                If ((LGBE == Zero))
                {
                    CreateDWordField (RES0, \_SB.PCI0._Y03._LEN, LGR1)  // _LEN: Length
                    CreateDWordField (RES0, \_SB.PCI0._Y04._LEN, LGR2)  // _LEN: Length
                    CreateDWordField (RES0, \_SB.PCI0._Y05._LEN, LGR3)  // _LEN: Length
                    LGR1 = Zero
                    LGR2 = Zero
                    LGR3 = Zero
                }

                Return (RES0) /* \_SB_.PCI0.RES0 */
            }

            Name (RES0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0077,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x006F,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0070,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0078,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0C80,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x3BE00000,         // Range Minimum
                    0x3FFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x04200000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x3BE00000,         // Range Minimum
                    0x3FFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x04200000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x80000000,         // Range Minimum
                    0xBFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x40000000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xE0000000,         // Range Minimum
                    0xEFFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x10000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Local0 = Arg3
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (((Arg0 == GUID) && NEXP))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If (~(CDW1 & One))
                    {
                        If ((CTRL & One))
                        {
                            NHPG ()
                        }

                        If ((CTRL & 0x04))
                        {
                            NPME ()
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    OSCC = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Local0)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Local0)
                }
            }
        }
    }

    Scope (_SB)
    {
        Method (GPC0, 1, Serialized)
        {
            Local0 = Arg0
            OperationRegion (PDW0, SystemMemory, (P2BA | Local0), 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC0.TEMP */
        }

        Method (SPC0, 2, Serialized)
        {
            Local0 = Arg0
            OperationRegion (PDW0, SystemMemory, (P2BA | Local0), 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (GPC1, 1, Serialized)
        {
            Local0 = (Arg0 + 0x04)
            OperationRegion (PDW1, SystemMemory, (P2BA | Local0), 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            Return (TEMP) /* \_SB_.GPC1.TEMP */
        }

        Method (SPC1, 2, Serialized)
        {
            Local0 = (Arg0 + 0x04)
            OperationRegion (PDW1, SystemMemory, (P2BA | Local0), 0x04)
            Field (PDW1, AnyAcc, NoLock, Preserve)
            {
                TEMP,   32
            }

            TEMP = Arg1
        }

        Method (GGIV, 1, Serialized)
        {
            Local0 = Arg0
            OperationRegion (PDW0, SystemMemory, (P2BA | Local0), 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                    ,   1, 
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGIV.TEMP */
        }

        Method (GGOV, 1, Serialized)
        {
            Local0 = Arg0
            OperationRegion (PDW0, SystemMemory, (P2BA | Local0), 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            Return (TEMP) /* \_SB_.GGOV.TEMP */
        }

        Method (SGOV, 2, Serialized)
        {
            Local0 = Arg0
            OperationRegion (PDW0, SystemMemory, (P2BA | Local0), 0x04)
            Field (PDW0, AnyAcc, NoLock, Preserve)
            {
                TEMP,   1, 
                Offset (0x04)
            }

            TEMP = Arg1
        }
    }

    Scope (\)
    {
        OperationRegion (PMIO, SystemIO, PMBS, 0x46)
        Field (PMIO, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x20), 
                ,   3, 
            RP3S,   1, 
            PSCI,   1, 
            SCIS,   1, 
                ,   1, 
            RP1S,   1, 
            RP2S,   1, 
            Offset (0x34), 
                ,   25, 
            ZPGE,   1
        }

        OperationRegion (PMCR, SystemMemory, (DD1A + 0x1000), 0x80)
        Field (PMCR, DWordAcc, Lock, Preserve)
        {
            Offset (0x34), 
                ,   22, 
            RP2D,   1, 
            RP1D,   1, 
            Offset (0x38), 
                ,   3, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1
        }
    }

    Scope (_SB.PCI0)
    {
        Name (LTRN, Zero)
        Name (OBFN, Zero)
        Name (LMSL, Zero)
        Name (LNSL, Zero)
        Device (LPCB)
        {
            Name (_ADR, 0x001F0000)  // _ADR: Address
            OperationRegion (LPC, PCI_Config, Zero, 0x0100)
            Field (LPC, AnyAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                CDID,   16, 
                Offset (0x08), 
                CRID,   8, 
                Offset (0x80), 
                IOD0,   8, 
                IOD1,   8, 
                Offset (0xA0), 
                    ,   9, 
                PRBL,   1, 
                Offset (0xAC), 
                Offset (0xAD), 
                Offset (0xAE), 
                XUSB,   1, 
                Offset (0xB8), 
                    ,   22, 
                GR0B,   2, 
                Offset (0xBC), 
                    ,   2, 
                GR19,   2, 
                Offset (0xC0)
            }
        }

        Device (RP01)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA1 != Zero))
                {
                    Return (RPA1) /* \RPA1 */
                }
                Else
                {
                    Return (0x00140000)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR1 /* \LTR1 */
                LMSL = PML1 /* \PML1 */
                LNSL = PNL1 /* \PNL1 */
                OBFN = OBF1 /* \OBF1 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x07, 
                    0x05
                })
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x07, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR04) /* \_SB_.AR04 */
                }

                Return (PR04) /* \_SB_.PR04 */
            }
        }

        Device (RP02)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA2 != Zero))
                {
                    Return (RPA2) /* \RPA2 */
                }
                Else
                {
                    Return (0x00140001)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR2 /* \LTR2 */
                LMSL = PML2 /* \PML2 */
                LNSL = PNL2 /* \PNL2 */
                OBFN = OBF2 /* \OBF2 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x07, 
                    0x05
                })
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x07, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05) /* \_SB_.AR05 */
                }

                Return (PR05) /* \_SB_.PR05 */
            }
        }

        Device (RP03)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA3 != Zero))
                {
                    Return (RPA3) /* \RPA3 */
                }
                Else
                {
                    Return (0x00130000)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR3 /* \LTR3 */
                LMSL = PML3 /* \PML3 */
                LNSL = PNL3 /* \PNL3 */
                OBFN = OBF3 /* \OBF3 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x07, 
                    0x05
                })
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x07, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR04) /* \_SB_.AR04 */
                }

                Return (PR04) /* \_SB_.PR04 */
            }
        }

        Device (RP04)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA4 != Zero))
                {
                    Return (RPA4) /* \RPA4 */
                }
                Else
                {
                    Return (0x00130001)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR4 /* \LTR4 */
                LMSL = PML4 /* \PML4 */
                LNSL = PNL4 /* \PNL4 */
                OBFN = OBF4 /* \OBF4 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x07, 
                    0x05
                })
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x07, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05) /* \_SB_.AR05 */
                }

                Return (PR05) /* \_SB_.PR05 */
            }
        }

        Device (RP05)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA5 != Zero))
                {
                    Return (RPA5) /* \RPA5 */
                }
                Else
                {
                    Return (0x00130002)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR5 /* \LTR5 */
                LMSL = PML5 /* \PML5 */
                LNSL = PNL5 /* \PNL5 */
                OBFN = OBF5 /* \OBF5 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x07, 
                    0x05
                })
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x07, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR06) /* \_SB_.AR06 */
                }

                Return (PR06) /* \_SB_.PR06 */
            }
        }

        Device (RP06)
        {
            Method (_ADR, 0, NotSerialized)  // _ADR: Address
            {
                If ((RPA6 != Zero))
                {
                    Return (RPA6) /* \RPA6 */
                }
                Else
                {
                    Return (0x00130003)
                }
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                LTRN = LTR6 /* \LTR6 */
                LMSL = PML6 /* \PML6 */
                LNSL = PNL6 /* \PNL6 */
                OBFN = OBF6 /* \OBF6 */
            }

            OperationRegion (PXCS, PCI_Config, Zero, 0x0380)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x5A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x5B), 
                Offset (0x60), 
                Offset (0x62), 
                PSPX,   1, 
                Offset (0xA4), 
                D3HT,   2, 
                Offset (0xD8), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0xDC), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x07, 
                    0x05
                })
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Local0 = 0xC8
                    While (Local0)
                    {
                        PMSX = One
                        If (PMSX)
                        {
                            Local0--
                        }
                        Else
                        {
                            Local0 = Zero
                        }
                    }

                    Notify (PXSX, 0x02) // Device Wake
                }
            }

            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x07, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR07) /* \_SB_.AR07 */
                }

                Return (PR07) /* \_SB_.PR07 */
            }
        }

        Scope (\_SB.PCI0)
        {
            Device (SATA)
            {
                Name (_ADR, 0x00120000)  // _ADR: Address
                Device (PRT0)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }

                Device (PRT1)
                {
                    Name (_ADR, 0x0001FFFF)  // _ADR: Address
                }

                OperationRegion (SATR, PCI_Config, 0x74, 0x04)
                Field (SATR, WordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    PMEE = One
                    Return (0x0F)
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    If (Arg1)
                    {
                        PMEE = Zero
                    }
                    ElseIf ((Arg0 && Arg2))
                    {
                        PMEE = One
                    }
                    Else
                    {
                        PMEE = Zero
                    }
                }
            }
        }

        Device (XHC)
        {
            Name (_ADR, 0x00150000)  // _ADR: Address
            Name (_DDN, "Broxton XHCI controller (Host only)")  // _DDN: DOS Device Name
            Name (_STR, Unicode ("Broxton XHCI controller (Host only)"))  // _STR: Description String
            Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
            {
                Return (0x03)
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0D, 
                0x03
            })
            OperationRegion (USBR, PCI_Config, 0x74, 0x02)
            Field (USBR, ByteAcc, NoLock, Preserve)
            {
                PMST,   2, 
                Offset (0x01), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
                If ((PMST == 0x03))
                {
                    PMST = Zero
                    Local0 = SBIM (0xA2008008, Zero, Zero, 0x30A8)
                    If (((Local0 & 0x00080000) != Zero))
                    {
                        Local0 &= 0xFFF7FFFF
                        SBIM (0xA2008008, Local0, One, 0x30A8)
                    }
                }
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }

            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
            {
                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (TPLD, 2, Serialized)
                {
                    Name (PCKG, Package (0x01)
                    {
                        Buffer (0x14){}
                    })
                    CreateField (DerefOf (PCKG [Zero]), Zero, 0x07, REV)
                    REV = One
                    CreateField (DerefOf (PCKG [Zero]), 0x40, One, VISI)
                    VISI = Arg0
                    CreateField (DerefOf (PCKG [Zero]), 0x57, 0x08, GPOS)
                    GPOS = Arg1
                    CreateField (DerefOf (PCKG [Zero]), 0x80, 0x20, VHOS)
                    VHOS = 0xFFFFFFFF
                    CreateField (DerefOf (PCKG [Zero]), 0x4A, 0x04, SHAP)
                    SHAP = One
                    CreateField (DerefOf (PCKG [Zero]), 0x20, 0x10, WID)
                    WID = 0x08
                    CreateField (DerefOf (PCKG [Zero]), 0x30, 0x10, HGT)
                    HGT = 0x03
                    Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.TPLD.PCKG */
                }

                Method (TUPC, 1, Serialized)
                {
                    Name (PCKG, Package (0x04)
                    {
                        One, 
                        Zero, 
                        Zero, 
                        Zero
                    })
                    PCKG [One] = Arg0
                    Return (PCKG) /* \_SB_.PCI0.XHC_.RHUB.TUPC.PCKG */
                }

                Name (UPCN, Package (0x04)
                {
                    Zero, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (UPC1, Package (0x04)
                {
                    0xFF, 
                    0x03, 
                    Zero, 
                    Zero
                })
                Name (UPC2, Package (0x04)
                {
                    0xFF, 
                    Zero, 
                    Zero, 
                    Zero
                })
                Name (PLDN, Package (0x01)
                {
                    Buffer (0x10)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                    }
                })
                Name (PLD1, Package (0x01)
                {
                    Buffer (0x10)
                    {
                        /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                        /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00   // i.......
                    }
                })
                Name (PLD2, Package (0x01)
                {
                    Buffer (0x10)
                    {
                        /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,  // ..r.....
                        /* 0008 */  0x69, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00   // i.......
                    }
                })
                Device (HS01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (UPC1) /* \_SB_.PCI0.XHC_.RHUB.UPC1 */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (PLD1) /* \_SB_.PCI0.XHC_.RHUB.PLD1 */
                    }
                }

                Device (HS02)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        If ((TCEX == One))
                        {
                            Return (TUPC (0x0A))
                        }
                        Else
                        {
                            Return (UPCN) /* \_SB_.PCI0.XHC_.RHUB.UPCN */
                        }
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        If ((TCEX == One))
                        {
                            Return (TPLD (One, 0x02))
                        }
                        Else
                        {
                            Return (PLDN) /* \_SB_.PCI0.XHC_.RHUB.PLDN */
                        }
                    }
                }

                Device (HS03)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS03._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x41, 0x08, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,  // A.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS03._PLD.PLDP */
                    }
                }

                Device (HS04)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS04._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x41, 0x08, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // A.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS04._PLD.PLDP */
                    }
                }

                Device (HS05)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS05._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x40, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // @.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS05._PLD.PLDP */
                    }
                }

                Device (HS06)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS06._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x40, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // @.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS06._PLD.PLDP */
                    }
                }

                Device (HS07)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS07._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x24, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // $.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS07._PLD.PLDP */
                    }

                    Device (WCAM)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                        {
                            ToPLD (
                                PLD_Revision           = 0x2,
                                PLD_IgnoreColor        = 0x1,
                                PLD_Red                = 0x0,
                                PLD_Green              = 0x0,
                                PLD_Blue               = 0x0,
                                PLD_Width              = 0x0,
                                PLD_Height             = 0x0,
                                PLD_UserVisible        = 0x0,
                                PLD_Dock               = 0x0,
                                PLD_Lid                = 0x1,
                                PLD_Panel              = "FRONT",
                                PLD_VerticalPosition   = "UPPER",
                                PLD_HorizontalPosition = "CENTER",
                                PLD_Shape              = "UNKNOWN",
                                PLD_GroupOrientation   = 0x0,
                                PLD_GroupToken         = 0x0,
                                PLD_GroupPosition      = 0x0,
                                PLD_Bay                = 0x0,
                                PLD_Ejectable          = 0x0,
                                PLD_EjectRequired      = 0x0,
                                PLD_CabinetNumber      = 0x0,
                                PLD_CardCageNumber     = 0x0,
                                PLD_Reference          = 0x0,
                                PLD_Rotation           = 0x0,
                                PLD_Order              = 0x0,
                                PLD_VerticalOffset     = 0xFFFF,
                                PLD_HorizontalOffset   = 0xFFFF)

                        })
                    }
                }

                Device (HS08)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.HS08._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x40, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00,  // @.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.HS08._PLD.PLDP */
                    }
                }

                Device (SSP1)
                {
                    Name (_ADR, 0x09)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Return (UPC1) /* \_SB_.PCI0.XHC_.RHUB.UPC1 */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Return (PLD1) /* \_SB_.PCI0.XHC_.RHUB.PLD1 */
                    }
                }

                Device (SSP2)
                {
                    Name (_ADR, 0x0A)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        If ((TCEX == One))
                        {
                            Return (TUPC (0x0A))
                        }
                        Else
                        {
                            Return (UPCN) /* \_SB_.PCI0.XHC_.RHUB.UPCN */
                        }
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        If ((TCEX == One))
                        {
                            Return (TPLD (One, 0x02))
                        }
                        Else
                        {
                            Return (PLDN) /* \_SB_.PCI0.XHC_.RHUB.PLDN */
                        }
                    }
                }

                Device (SSP3)
                {
                    Name (_ADR, 0x0B)  // _ADR: Address
                    Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                    {
                        If ((TCEX == One))
                        {
                            Return (TUPC (0x0A))
                        }
                        Else
                        {
                            Return (UPCN) /* \_SB_.PCI0.XHC_.RHUB.UPCN */
                        }
                    }

                    Method (_PLD, 0, NotSerialized)  // _PLD: Physical Location of Device
                    {
                        If ((TCEX == One))
                        {
                            Return (TPLD (One, 0x02))
                        }
                        Else
                        {
                            Return (PLDN) /* \_SB_.PCI0.XHC_.RHUB.PLDN */
                        }
                    }
                }

                Device (SSP4)
                {
                    Name (_ADR, 0x0C)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP4._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // @.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP4._PLD.PLDP */
                    }
                }

                Device (SSP5)
                {
                    Name (_ADR, 0x0D)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP5._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x40, 0x08, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00,  // @.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP5._PLD.PLDP */
                    }
                }

                Device (SSP6)
                {
                    Name (_ADR, 0x0E)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP6._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x40, 0x08, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,  // @.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP6._PLD.PLDP */
                    }
                }

                Device (SSP7)
                {
                    Name (_ADR, 0x0F)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCP) /* \_SB_.PCI0.XHC_.RHUB.SSP7._UPC.UPCP */
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x14)
                            {
                                /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                /* 0008 */  0x40, 0x08, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00,  // @.......
                                /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                            }
                        })
                        Return (PLDP) /* \_SB_.PCI0.XHC_.RHUB.SSP7._PLD.PLDP */
                    }
                }
            }
        }

        Scope (\_SB.PCI0)
        {
            Device (XDCI)
            {
                Name (_ADR, 0x00150001)  // _ADR: Address
                OperationRegion (OTGD, PCI_Config, Zero, 0x0100)
                Field (OTGD, DWordAcc, NoLock, Preserve)
                {
                    DVID,   16, 
                    Offset (0x10), 
                    XDCB,   64
                }

                Field (OTGD, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x74), 
                    D0I3,   2, 
                    Offset (0x75), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1
                }

                Name (_DDN, "Broxton XDCI controller")  // _DDN: DOS Device Name
                Name (_STR, Unicode ("Broxton XDCI controller"))  // _STR: Description String
                Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                {
                    Return (0x03)
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                    Return (Zero)
                }

                Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                {
                    0x0C, 
                    0x03
                })
                Method (XDBA, 0, NotSerialized)
                {
                    Return ((XDCB & 0xFFFFFFFFFFFFFF00))
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If (PCIC (Arg0))
                    {
                        Return (PCID (Arg0, Arg1, Arg2, Arg3))
                    }

                    If ((Arg0 == ToUUID ("732b85d5-b7a7-4a1b-9ba0-4bbd00ffd511") /* Unknown UUID */))
                    {
                        If ((Arg1 == One))
                        {
                            Method (SPPS, 2, Serialized)
                            {
                                OperationRegion (XDBW, SystemMemory, XDBA (), 0x00110000)
                                Field (XDBW, WordAcc, NoLock, Preserve)
                                {
                                    Offset (0x10F80C), 
                                        ,   2, 
                                    CSEB,   1, 
                                        ,   1, 
                                    SWID,   2, 
                                        ,   9, 
                                    CHVB,   1, 
                                    Offset (0x10F810), 
                                    Offset (0x10F811), 
                                    U2CP,   2, 
                                    U3CP,   2, 
                                    Offset (0x10F818), 
                                    PUPS,   2, 
                                        ,   1, 
                                    PURC,   1, 
                                    Offset (0x10F81A), 
                                    Offset (0x10F81C), 
                                        ,   3, 
                                    UXPE,   2, 
                                    Offset (0x10F81E)
                                }

                                Local1 = Arg0
                                Local2 = Arg1
                                If ((Local1 == Zero))
                                {
                                    UXPE = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x0A))
                                    {
                                        Stall (0x64)
                                        Local0++
                                    }

                                    PUPS = Zero
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == Zero) && (U3CP == Zero)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != Zero)){}
                                    If ((U3CP != Zero)){}
                                    Return (Zero)
                                }

                                If ((Local1 == 0x03))
                                {
                                    If ((U2CP != Zero)){}
                                    If ((U3CP != Zero)){}
                                    PUPS = 0x03
                                    Local0 = Zero
                                    While ((Local0 < 0x07D0))
                                    {
                                        Stall (0x64)
                                        If (((U2CP == 0x03) && (U3CP == 0x03)))
                                        {
                                            Break
                                        }

                                        Local0++
                                    }

                                    If ((U2CP != 0x03)){}
                                    If ((U3CP != 0x03)){}
                                    UXPE = Local2
                                    Return (Zero)
                                }

                                Return (Zero)
                            }

                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    Return (Buffer (One)
                                    {
                                         0xFB                                             // .
                                    })
                                }
                                Case (One)
                                {
                                    Return (One)
                                }
                                Case (0x03)
                                {
                                    Return (XDCE) /* \XDCE */
                                }
                                Case (0x04)
                                {
                                    Local1 = DerefOf (Arg3 [Zero])
                                    SPPS (Local1, Zero)
                                }
                                Case (0x05)
                                {
                                    Return (Zero)
                                }
                                Case (0x06)
                                {
                                    OperationRegion (XDBD, SystemMemory, XDBA (), 0x00110000)
                                    Field (XDBD, DWordAcc, NoLock, Preserve)
                                    {
                                        Offset (0xC704), 
                                            ,   30, 
                                        CSFR,   1, 
                                        Offset (0xC708)
                                    }

                                    OperationRegion (XDW2, SystemMemory, XDBA (), 0x00110000)
                                    Field (XDW2, WordAcc, NoLock, Preserve)
                                    {
                                        Offset (0x10F820), 
                                            ,   13, 
                                        OTHC,   1
                                    }

                                    If ((OTHC == Zero))
                                    {
                                        CSFR = One
                                        Local0 = Zero
                                        While ((Local0 < 0x64))
                                        {
                                            If ((CSFR == Zero))
                                            {
                                                Break
                                            }

                                            Sleep (One)
                                        }
                                    }

                                    Return (Zero)
                                }
                                Case (0x07)
                                {
                                    OperationRegion (XD22, SystemMemory, XDBA (), 0x00110000)
                                    Field (XD22, WordAcc, NoLock, Preserve)
                                    {
                                        Offset (0x10F818), 
                                        P2PS,   2, 
                                        Offset (0x10F81A)
                                    }

                                    Local0 = P2PS /* \_SB_.PCI0.XDCI._DSM.P2PS */
                                    Return (Local0)
                                }

                            }
                        }
                    }

                    Return (Zero)
                }
            }
        }

        Scope (\_SB.PCI0)
        {
            OperationRegion (P2CG, SystemMemory, 0xE00680D0, 0x20)
            Field (P2CG, DWordAcc, NoLock, Preserve)
            {
                SBAD,   32, 
                SBDA,   32, 
                IRDY,   1, 
                    ,   6, 
                POST,   1, 
                OPCD,   8, 
                SBID,   16, 
                SBEA,   32, 
                Offset (0x11), 
                P2HD,   8
            }

            Method (SBIM, 4, Serialized)
            {
                Local0 = Zero
                Local1 = Acquire (_GL, 0x1F40)
                If ((Local1 == Zero))
                {
                    P2HD = Zero
                    While (IRDY)
                    {
                        Sleep (One)
                    }

                    SBAD &= 0x00F00000
                    SBAD |= Arg0
                    SBEA = Zero
                    SBDA = Arg1
                    SBID &= 0x0800
                    SBID |= Arg3
                    POST = Zero
                    OPCD = Arg2
                    IRDY = One
                    While (IRDY)
                    {
                        Sleep (One)
                    }

                    Local0 = SBDA /* \_SB_.PCI0.SBDA */
                    P2HD = One
                }

                Release (_GL)
                Return (Local0)
            }

            OperationRegion (SBMM, SystemMemory, ((P2BA | 0x00D60000) | 0x0600), 0x18)
            Field (SBMM, DWordAcc, NoLock, Preserve)
            {
                GENR,   32, 
                Offset (0x08), 
                    ,   5, 
                GRR3,   1
            }

            Method (SCPG, 2, Serialized)
            {
                If ((Arg0 == One))
                {
                    Local0 = GENR /* \_SB_.PCI0.GENR */
                    GENR = (Local0 | Arg1)
                }
                ElseIf ((Arg0 == Zero))
                {
                    Local0 = GENR /* \_SB_.PCI0.GENR */
                    GENR = (Local0 & Arg1)
                }
            }

            Device (SDHA)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                Name (_DDN, "Intel(R) eMMC Controller - 80865ACC")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (RBUF, Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
                OperationRegion (PMCS, PCI_Config, 0x84, 0x04)
                Field (PMCS, WordAcc, NoLock, Preserve)
                {
                    PMSR,   32
                }

                OperationRegion (SCPC, PCI_Config, 0xA0, 0x04)
                Field (SCPC, WordAcc, NoLock, Preserve)
                {
                        ,   17, 
                    I3EN,   1, 
                    DPGE,   1
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (RBUF) /* \_SB_.PCI0.SDHA.RBUF */
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    DPGE = Zero
                    I3EN = Zero
                    SCPG (Zero, 0xFFFFFFBE)
                    Sleep (0x02)
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    Local0 = SBIM (0xD600003C, Zero, Zero, 0x30E0)
                    Local1 = SBIM (0xD6000834, Zero, Zero, 0x30E0)
                    Local2 = SBIM (0xD6000840, Zero, Zero, 0x30E0)
                    If ((Local0 & 0x00800000))
                    {
                        Local3 = (((Local2 & 0x1F) * 0x02) + ((Local1 & 
                            0x3F00) >> 0x08))
                        Local1 = ((Local1 & 0xFFFFFF80) | (Local3 & 0x7F))
                        SBIM (0xD6000834, Local1, One, 0x30E0)
                    }

                    DPGE = One
                    I3EN = One
                    SCPG (One, 0x41)
                    Local0 = PMSR /* \_SB_.PCI0.SDHA.PMSR */
                    Local0 &= One
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61") /* Unknown UUID */))
                    {
                        If ((Arg1 == Zero))
                        {
                            Switch (ToInteger (Arg2))
                            {
                                Case (Zero)
                                {
                                    If ((EMMS == Zero))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x61                                             // a
                                        })
                                    }
                                    ElseIf ((EMMS == One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x21                                             // !
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x01                                             // .
                                        })
                                    }
                                }
                                Case (0x05)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Case (0x06)
                                {
                                    Return (Buffer (One)
                                    {
                                         0x05                                             // .
                                    })
                                }

                            }

                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }

                Device (EMMD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (UFSH)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Name (_DDN, "Intel(R) UFS Controller - 80865ACE")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                OperationRegion (PMCS, PCI_Config, 0x84, 0x04)
                Field (PMCS, WordAcc, NoLock, Preserve)
                {
                    PMSR,   32
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    Local0 = PMSR /* \_SB_.PCI0.UFSH.PMSR */
                    Local0 &= One
                }

                Name (RBUF, Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (RBUF) /* \_SB_.PCI0.UFSH.RBUF */
                }

                Device (UFSD)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_RMV, 0, NotSerialized)  // _RMV: Removal Status
                    {
                        Return (Zero)
                    }
                }
            }

            Device (SDIO)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Name (_DDN, "Intel(R) SDIO Controller - 80865AD0")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Name (RBUF, Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
                Name (PSTS, Zero)
                OperationRegion (SCPC, PCI_Config, 0xA0, 0x04)
                Field (SCPC, WordAcc, NoLock, Preserve)
                {
                        ,   17, 
                    I3EN,   1, 
                    DPGE,   1
                }

                OperationRegion (PMCS, PCI_Config, 0x84, 0x04)
                Field (PMCS, WordAcc, NoLock, Preserve)
                {
                    PMSR,   32
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (RBUF) /* \_SB_.PCI0.SDIO.RBUF */
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    If ((PSTS == Zero))
                    {
                        DPGE = Zero
                        I3EN = Zero
                        SCPG (Zero, 0xFFFFFEFE)
                        Sleep (0x02)
                        PSTS = One
                    }
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    If ((PSTS == One))
                    {
                        DPGE = One
                        I3EN = One
                        SCPG (One, 0x0101)
                        Local0 = PMSR /* \_SB_.PCI0.SDIO.PMSR */
                        Local0 &= One
                        PSTS = Zero
                    }
                }

                Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
                {
                }
            }

            Device (SDC)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
                Name (_DDN, "Intel(R) SD Card Controller - 80865ACA")  // _DDN: DOS Device Name
                Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
                Name (GDW0, Zero)
                Name (GDW1, Zero)
                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        GpioInt (Edge, ActiveBoth, SharedAndWake, PullNone, 0x0000,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x001A
                            }
                        GpioIo (Shared, PullDefault, 0x0000, 0x0000, IoRestrictionInputOnly,
                            "\\_SB.GPO3", 0x00, ResourceConsumer, ,
                            )
                            {   // Pin list
                                0x001A
                            }
                    })
                    Return (RBUF) /* \_SB_.PCI0.SDC_._CRS.RBUF */
                }

                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If ((EEPI == One))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                OperationRegion (SCPC, PCI_Config, 0xA0, 0x04)
                Field (SCPC, WordAcc, NoLock, Preserve)
                {
                        ,   17, 
                    I3EN,   1, 
                    DPGE,   1
                }

                OperationRegion (PCCS, PCI_Config, 0x84, 0x04)
                Field (PCCS, WordAcc, NoLock, Preserve)
                {
                    PMSR,   32
                }

                OperationRegion (SCGI, SystemMemory, (GP3A | 0x0100), 0x10)
                Field (SCGI, DWordAcc, NoLock, Preserve)
                {
                    GPIS,   32
                }

                OperationRegion (SCGP, SystemMemory, (GP3A | 0x05D0), 0x2C)
                Field (SCGP, DWordAcc, NoLock, Preserve)
                {
                        ,   1, 
                    RXST,   1, 
                        ,   23, 
                    RXEV,   2, 
                    Offset (0x20), 
                    GPOV,   1
                }

                Method (WAK, 0, Serialized)
                {
                    If ((GPIS == 0x04000000))
                    {
                        GPIS = 0x04000000
                    }

                    SPC0 (0x00C005D0, GDW0)
                    SPC1 (0x00C005D0, GDW1)
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    GRR3 = ~RXST /* \_SB_.PCI0.SDC_.RXST */
                }

                Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
                {
                    Local1 = GPC1 (0x00C005B0)
                    Local1 &= 0xFFFFC3FF
                    Local1 |= 0x3000
                    SPC1 (0x00C005B0, Local1)
                    Local1 = GPC1 (0x00C005B8)
                    Local1 &= 0xFFFFC3FF
                    Local1 |= 0x3000
                    SPC1 (0x00C005B8, Local1)
                    Local1 = GPC1 (0x00C005C0)
                    Local1 &= 0xFFFFC3FF
                    Local1 |= 0x3000
                    SPC1 (0x00C005C0, Local1)
                    Local1 = GPC1 (0x00C005C8)
                    Local1 &= 0xFFFFC3FF
                    Local1 |= 0x3000
                    SPC1 (0x00C005C8, Local1)
                    Local1 = GPC1 (0x00C005D8)
                    Local1 &= 0xFFFFC3FF
                    Local1 |= 0x3000
                    SPC1 (0x00C005D8, Local1)
                    GRR3 = ~RXST /* \_SB_.PCI0.SDC_.RXST */
                    DPGE = Zero
                    I3EN = Zero
                    SCPG (Zero, 0xFFFFFBFE)
                    Sleep (0x02)
                    SCPG (One, 0x0401)
                    GPOV = Zero
                    If (((GDW0 == Zero) && (RXEV == Zero)))
                    {
                        GDW0 = GPC0 (0x00C005D0)
                        GDW1 = GPC1 (0x00C005D0)
                    }
                }

                Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
                {
                    GPOV = One
                    If ((GRR3 == One))
                    {
                        SBIM (0xD6000034, Zero, One, 0x30D8)
                        SBIM (0xD6000038, Zero, One, 0x30D8)
                    }

                    GRR3 = Zero
                    SCPG (One, 0x0401)
                    DPGE = One
                    I3EN = One
                    Local0 = PMSR /* \_SB_.PCI0.SDC_.PMSR */
                    Local0 &= One
                    Local1 = GPC1 (0x00C005B0)
                    Local1 &= 0xFFFFC3FF
                    Local1 |= 0x1000
                    SPC1 (0x00C005B0, Local1)
                    Local1 = GPC1 (0x00C005B8)
                    Local1 &= 0xFFFFC3FF
                    Local1 |= 0x1000
                    SPC1 (0x00C005B8, Local1)
                    Local1 = GPC1 (0x00C005C0)
                    Local1 &= 0xFFFFC3FF
                    Local1 |= 0x1000
                    SPC1 (0x00C005C0, Local1)
                    Local1 = GPC1 (0x00C005C8)
                    Local1 &= 0xFFFFC3FF
                    Local1 |= 0x1000
                    SPC1 (0x00C005C8, Local1)
                    Local1 = GPC1 (0x00C005D8)
                    Local1 &= 0xFFFFC3FF
                    Local1 |= 0x1000
                    SPC1 (0x00C005D8, Local1)
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("f6c13ea5-65cd-461f-ab7a-29f7e8d5bd61") /* Unknown UUID */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (Zero)
                            {
                                Switch (ToInteger (Arg1))
                                {
                                    Case (Zero)
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x19                                             // .
                                        })
                                    }

                                }

                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (One)
                            {
                                Return (Zero)
                            }
                            Case (0x02)
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (0x03)
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (0x04)
                            {
                                GPOV = One
                                Sleep (0x32)
                                GPOV = Zero
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (0x05)
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                            Case (0x06)
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }

                        }

                        Return (Buffer (One)
                        {
                             0x01                                             // .
                        })
                    }
                    Else
                    {
                        Return (Buffer (One)
                        {
                             0x00                                             // .
                        })
                    }
                }
            }
        }

        Scope (\_SB.PCI0)
        {
            Device (I2C4)
            {
                Name (_ADR, 0x00170000)  // _ADR: Address
                Name (_DDN, "Intel(R) I2C Controller #4")  // _DDN: DOS Device Name
                Name (_UID, One)  // _UID: Unique ID
                Name (LINK, "\\_SB.PCI0.I2C4")
                Name (RBUF, Buffer (0x02)
                {
                     0x79, 0x00                                       // y.
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    Return (RBUF) /* \_SB_.PCI0.I2C4.RBUF */
                }

                Device (TPDS)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Name (_HID, "SYNA7DAB")  // _HID: Hardware ID
                    Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (SBFB, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Name (SBFI, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000075,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (SBFB, SBFI))
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((Arg1 == One))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }
                            ElseIf ((Arg2 == One))
                            {
                                Return (0x20)
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PTPS == Zero))
                        {
                            Return (Zero)
                        }

                        If ((TPVD == 0x53))
                        {
                            If ((OSYS >= 0x07DD))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }

                Device (TPDE)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Name (_HID, "ELAN0501")  // _HID: Hardware ID
                    Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
                    Name (_UID, One)  // _UID: Unique ID
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                    Name (SBFB, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.PCI0.I2C4",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                    Name (SBFI, ResourceTemplate ()
                    {
                        Interrupt (ResourceConsumer, Level, ActiveLow, Exclusive, ,, )
                        {
                            0x00000075,
                        }
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (ConcatenateResTemplate (SBFB, SBFI))
                    }

                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                        {
                            If ((Arg2 == Zero))
                            {
                                If ((Arg1 == One))
                                {
                                    Return (Buffer (One)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (One)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }
                            ElseIf ((Arg2 == One))
                            {
                                Return (One)
                            }
                            Else
                            {
                                Return (Buffer (One)
                                {
                                     0x00                                             // .
                                })
                            }
                        }
                        Else
                        {
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((PTPS == Zero))
                        {
                            Return (Zero)
                        }

                        If ((TPVD != 0x53))
                        {
                            If ((OSYS >= 0x07DD))
                            {
                                Return (0x0F)
                            }
                            Else
                            {
                                Return (Zero)
                            }
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }
                }
            }
        }

        Device (HDAS)
        {
            Name (_ADR, 0x000E0000)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, Zero, 0x0100)
            Field (HDAR, ByteAcc, NoLock, Preserve)
            {
                VDID,   32, 
                Offset (0x48), 
                    ,   6, 
                MBCG,   1, 
                Offset (0x54), 
                Offset (0x55), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1
            }

            Name (NBUF, ResourceTemplate ()
            {
                QWordMemory (ResourceConsumer, PosDecode, MinNotFixed, MaxNotFixed, NonCacheable, ReadOnly,
                    0x0000000000000001, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y06, AddressRangeACPI, TypeStatic)
            })
            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DSW, 3, NotSerialized)  // _DSW: Device Sleep Wake
            {
                PMEE = Arg0
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x0E, 
                0x03
            })
            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
            }

            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                ADBG ("HDAS _INI")
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y06._MIN, NBAS)  // _MIN: Minimum Base Address
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y06._MAX, NMAS)  // _MAX: Maximum Base Address
                CreateQWordField (NBUF, \_SB.PCI0.HDAS._Y06._LEN, NLEN)  // _LEN: Length
                NBAS = NHLA /* \NHLA */
                NMAS = (NHLA + (NHLL - One))
                NLEN = NHLL /* \NHLL */
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG ("HDAS _DSM")
                If ((Arg0 == ToUUID ("a69f886e-6ceb-4594-a41f-7b5dce24c553") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            Return (Buffer (One)
                            {
                                 0x0F                                             // .
                            })
                        }
                        Case (One)
                        {
                            ADBG ("_DSM Fun 1 NHLT")
                            Return (NBUF) /* \_SB_.PCI0.HDAS.NBUF */
                        }
                        Case (0x02)
                        {
                            ADBG ("_DSM Fun 2 FMSK")
                            Return (ADFM) /* \ADFM */
                        }
                        Case (0x03)
                        {
                            ADBG ("_DSM Fun 3 PPMS")
                            If ((Arg3 == ToUUID ("b489c2de-0f96-42e1-8a2d-c25b5091ee49") /* Unknown UUID */))
                            {
                                Return ((ADPM & One))
                            }

                            If ((Arg3 == ToUUID ("e1284052-8664-4fe4-a353-3878f72704c3") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x02))
                            }

                            If ((Arg3 == ToUUID ("7c708106-3aff-40fe-88be-8c999b3f7445") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x04))
                            }

                            If ((Arg3 == ToUUID ("e0e018a8-3550-4b54-a8d0-a8e05d0fcba2") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x08))
                            }

                            If ((Arg3 == ToUUID ("202badb5-8870-4290-b536-f2380c63f55d") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x10))
                            }

                            If ((Arg3 == ToUUID ("eb3fea76-394b-495d-a14d-8425092d5cb7") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x20))
                            }

                            If ((Arg3 == ToUUID ("f1c69181-329a-45f0-8eef-d8bddf81e036") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x40))
                            }

                            If ((Arg3 == ToUUID ("b3573eff-6441-4a75-91f7-4281eec4597d") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x80))
                            }

                            If ((Arg3 == ToUUID ("ec774fa9-28d3-424a-90e4-69f984f1eeb7") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x0100))
                            }

                            If ((Arg3 == ToUUID ("f101fef0-ff5a-4ad4-8710-43592a6f7948") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x0200))
                            }

                            If ((Arg3 == ToUUID ("f3578986-4400-4adf-ae7e-cd433cd3f26e") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x0400))
                            }

                            If ((Arg3 == ToUUID ("13b5e4d7-a91a-4059-8290-605b01ccb650") /* Unknown UUID */))
                            {
                                Return ((ADPM & 0x0800))
                            }

                            Return (Zero)
                        }
                        Default
                        {
                            ADBG ("_DSM Fun NOK")
                            Return (Buffer (One)
                            {
                                 0x00                                             // .
                            })
                        }

                    }
                }

                ADBG ("_DSM UUID NOK")
                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (ILBR, SystemMemory, IBAS, 0x8C)
        Field (ILBR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            PARC,   8, 
            PBRC,   8, 
            PCRC,   8, 
            PDRC,   8, 
            PERC,   8, 
            PFRC,   8, 
            PGRC,   8, 
            PHRC,   8, 
            Offset (0x88), 
                ,   4, 
            UI4E,   1
        }

        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PARC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLA, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLA, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PARC & 0x0F))
                Return (RTLA) /* \_SB_.LNKA._CRS.RTLA */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PARC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PARC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PBRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLB, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLB, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PBRC & 0x0F))
                Return (RTLB) /* \_SB_.LNKB._CRS.RTLB */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PBRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PBRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PCRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLC, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLC, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PCRC & 0x0F))
                Return (RTLC) /* \_SB_.LNKC._CRS.RTLC */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PCRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PCRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PDRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLD, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLD, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PDRC & 0x0F))
                Return (RTLD) /* \_SB_.LNKD._CRS.RTLD */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PDRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PDRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PERC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLE, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLE, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PERC & 0x0F))
                Return (RTLE) /* \_SB_.LNKE._CRS.RTLE */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PERC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PERC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PFRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLF, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLF, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PFRC & 0x0F))
                Return (RTLF) /* \_SB_.LNKF._CRS.RTLF */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PFRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PFRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PGRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLG, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLG, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PGRC & 0x0F))
                Return (RTLG) /* \_SB_.LNKG._CRS.RTLG */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PGRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PGRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_DIS, 0, Serialized)  // _DIS: Disable Device
            {
                PHRC |= 0x80
            }

            Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Name (RTLH, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {}
                })
                CreateWordField (RTLH, One, IRQ0)
                IRQ0 = Zero
                IRQ0 = (One << (PHRC & 0x0F))
                Return (RTLH) /* \_SB_.LNKH._CRS.RTLH */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, One, IRQ0)
                FindSetRightBit (IRQ0, Local0)
                Local0--
                PHRC = Local0
            }

            Method (_STA, 0, Serialized)  // _STA: Status
            {
                If ((PHRC & 0x80))
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
        Field (LPC0, AnyAcc, NoLock, Preserve)
        {
            Offset (0x40), 
            C1EN,   1, 
            Offset (0x44)
        }

        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            Method (_GPE, 0, NotSerialized)  // _GPE: General Purpose Events
            {
                Local0 = 0x2B
                Return (Local0)
            }

            Name (SEL0, 0xF0)
            Name (BFLG, Zero)
            Name (RDBT, Zero)
            Name (RDWL, Zero)
            Name (RD3G, Zero)
            Name (RDRF, Zero)
            Name (PB10, Zero)
            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If ((Arg0 == 0x03))
                {
                    Local0 = Arg1
                    If (Local0)
                    {
                        ECOK = One
                    }
                    Else
                    {
                        ECOK = Zero
                    }
                }

                If (ECOK)
                {
                    Acquire (MUT1, 0xFFFF)
                    If ((OSYS >= 0x07DC))
                    {
                        OSW8 = One
                        ^^^^RDWL = One
                        ^^^^RDBT = One
                        ^^^^RD3G = One
                    }
                    Else
                    {
                        OSW8 = Zero
                    }

                    If ((OSYS >= 0x07DD))
                    {
                        TPRS = 0x55
                        W81F = One
                    }
                    Else
                    {
                        TPRS = Zero
                        W81F = Zero
                    }

                    ILID ()
                    WLST = ^^^^RDWL /* \_SB_.RDWL */
                    BLTS = ^^^^RDBT /* \_SB_.RDBT */
                    ED3G = ^^^^RD3G /* \_SB_.RD3G */
                    CPLE = One
                    Release (MUT1)
                }

                If ((LINX != One))
                {
                    If (((BBTP == 0x02) && (OSYS == 0x07D9)))
                    {
                        SSMP = 0xD9
                    }
                }

                If ((OSYS == 0x07D9))
                {
                    CSBM = 0x07
                }
                Else
                {
                    CSBM = Zero
                }
            }

            OperationRegion (VERM, EmbeddedControl, Zero, 0xFF)
            Field (VERM, ByteAcc, NoLock, Preserve)
            {
                LNPS,   8
            }

            OperationRegion (ERAM, SystemMemory, 0xFE708500, 0x0100)
            Field (ERAM, ByteAcc, NoLock, Preserve)
            {
                ECTM,   8, 
                Offset (0x04), 
                CMCM,   8, 
                CMD1,   8, 
                CMD2,   8, 
                CMD3,   8, 
                Offset (0x18), 
                SMPR,   8, 
                SMST,   8, 
                SMAD,   8, 
                SMCM,   8, 
                SMD0,   256, 
                BCNT,   8, 
                SMAA,   8, 
                BATD,   16, 
                ACDF,   1, 
                Offset (0x41), 
                    ,   1, 
                APBF,   1, 
                    ,   3, 
                FLS4,   1, 
                Offset (0x42), 
                FLS3,   1, 
                    ,   1, 
                S0EF,   1, 
                    ,   4, 
                PECE,   1, 
                    ,   1, 
                LMAT,   1, 
                Offset (0x45), 
                ECPF,   8, 
                Offset (0x48), 
                KBBL,   1, 
                    ,   1, 
                RFST,   1, 
                Offset (0x49), 
                ERCT,   8, 
                Offset (0x4B), 
                TBLV,   8, 
                ARCD,   1, 
                    ,   3, 
                DOCK,   1, 
                LANC,   1, 
                LIDT,   1, 
                CRTS,   1, 
                Offset (0x4E), 
                TJMX,   3, 
                    ,   1, 
                VGAF,   1, 
                EDTS,   1, 
                Offset (0x53), 
                DOFF,   8, 
                Offset (0x58), 
                CTMP,   8, 
                RG59,   8, 
                RTMP,   8, 
                Offset (0x60), 
                WLAN,   1, 
                BLTH,   1, 
                ST3G,   1, 
                CPLE,   1, 
                    ,   1, 
                ED3G,   1, 
                WLST,   1, 
                BLTS,   1, 
                AIRF,   1, 
                DPBL,   1, 
                    ,   4, 
                NIWM,   1, 
                TOHP,   1, 
                Offset (0x63), 
                WLPH,   1, 
                BBST,   1, 
                ODST,   1, 
                GPSW,   1, 
                    ,   2, 
                EIDL,   1, 
                Offset (0x70), 
                BTMD,   8, 
                MBTS,   1, 
                MBTF,   1, 
                    ,   1, 
                MFCF,   1, 
                    ,   2, 
                MBDX,   1, 
                MBAD,   1, 
                MBTC,   1, 
                    ,   4, 
                MBPC,   1, 
                Offset (0x77), 
                BA1C,   8, 
                MCYC,   16, 
                MTMP,   16, 
                MDAT,   16, 
                MCUR,   16, 
                MBRM,   16, 
                MBVG,   16, 
                BHVC,   16, 
                BLVC,   16, 
                LFCC,   16, 
                BTSN,   16, 
                BTDC,   16, 
                BTDV,   16, 
                BTMN,   8, 
                Offset (0xBB), 
                TARU,   8, 
                TARN,   8, 
                TARD,   8, 
                Offset (0xC0), 
                ROMD,   8, 
                Offset (0xD0), 
                EBPL,   1, 
                    ,   1, 
                    ,   1, 
                TPRD,   1, 
                Offset (0xD1), 
                    ,   1, 
                ECS4,   1, 
                ECS3,   1, 
                RFAT,   1, 
                OSW8,   1, 
                WOLF,   1, 
                WOWL,   1, 
                Offset (0xD5), 
                ECDY,   8, 
                DBPL,   8, 
                CPTS,   8
            }

            Scope (\_SB)
            {
                OperationRegion (EROM, SystemMemory, 0xFE708900, 0x0100)
                Field (EROM, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x29), 
                    SPRG,   8, 
                    Offset (0x40), 
                    BCL0,   8, 
                    BCL1,   8, 
                    BCL2,   8, 
                    BCL3,   8, 
                    BCL4,   8, 
                    BCL5,   8, 
                    BCL6,   8, 
                    BCL7,   8, 
                    BCL8,   8, 
                    BCL9,   8, 
                    Offset (0xE3), 
                    CLOS,   8, 
                    Offset (0xF6), 
                    C6SW,   8, 
                    Offset (0xFC), 
                    TPVD,   8, 
                    SIMU,   8, 
                    Offset (0xFF), 
                    PJNA,   8
                }

                OperationRegion (EMBX, SystemMemory, 0xFE708A00, 0x0100)
                Field (EMBX, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x80), 
                    ODB0,   8, 
                    ODB1,   8, 
                    ODB2,   8, 
                    ODB3,   8, 
                    ODB4,   8, 
                    ODB5,   8, 
                    ODB6,   8, 
                    ODB7,   8, 
                    ODB8,   8, 
                    ODB9,   8, 
                    ODBA,   8, 
                    ODBB,   8, 
                    ODBC,   8, 
                    ODBD,   8, 
                    ODBE,   8, 
                    ODBF,   8, 
                    ODX0,   32, 
                    ODX1,   32, 
                    ODX2,   32, 
                    ODX3,   32, 
                    BID0,   1, 
                    BID1,   1, 
                    BID2,   1, 
                    BID3,   1, 
                    BID4,   1, 
                    BID5,   1, 
                    BID6,   1, 
                    BID7,   1, 
                    BID8,   1, 
                    BID9,   1, 
                    BIDA,   1, 
                    BIDB,   1, 
                    BIDC,   1, 
                    BIDD,   1, 
                    BIDE,   1, 
                    BIDF,   1, 
                    VSID,   8, 
                    DRID,   8, 
                    VRID,   8, 
                    Offset (0xA8), 
                    OSS3,   1, 
                    OSS4,   1, 
                    OSS5,   1, 
                    OSWB,   1, 
                    Offset (0xA9), 
                    W81F,   1, 
                    Offset (0xAB), 
                    WUSB,   1, 
                    WPBN,   1, 
                    Offset (0xB0), 
                    AUES,   1, 
                    CRES,   1, 
                    UPES,   1, 
                    BTES,   1, 
                    CDES,   1, 
                    Offset (0xB2), 
                    BBTP,   8, 
                    PTPS,   8, 
                        ,   1, 
                    PBWR,   1, 
                    Offset (0xC0), 
                    VSSD,   16, 
                    Offset (0xC3), 
                    Offset (0xC4), 
                    DVID,   16, 
                    Offset (0xC8), 
                    CFID,   8, 
                    CPSI,   8, 
                    PPCD,   8, 
                    CPTB,   1, 
                    DCTB,   1, 
                    Offset (0xCC), 
                    Offset (0xD0), 
                    Offset (0xD1), 
                    Offset (0xD2), 
                    Offset (0xD3), 
                    Offset (0xD4), 
                    VGAD,   2, 
                    Offset (0xD5), 
                    PPDC,   8, 
                    SGST,   8, 
                    EDSP,   8, 
                    Offset (0xE0), 
                    PMNL,   8, 
                    PMNH,   8, 
                    PPDL,   8, 
                    PPDH,   8, 
                    CDSB,   8, 
                    Offset (0xE8), 
                    BLVL,   8, 
                    BL86,   8, 
                    BL87,   8, 
                    BL88,   8, 
                    BL89,   8, 
                    BL8A,   8, 
                    BLVA,   8, 
                    Offset (0xF6), 
                    TPRS,   8, 
                    APS4,   8, 
                    LLCT,   8
                }
            }

            Mutex (MUT1, 0x00)
            Mutex (MUT0, 0x00)
            Method (APOL, 1, NotSerialized)
            {
                DBPL = Arg0
                EBPL = One
            }

            OperationRegion (ECIO, SystemIO, 0x60, 0x10)
            Field (ECIO, ByteAcc, NoLock, Preserve)
            {
                Offset (0x02), 
                EDAT,   8, 
                Offset (0x06), 
                CMDS,   8, 
                Offset (0x08), 
                EC68,   8, 
                Offset (0x0A), 
                EC6A,   8, 
                Offset (0x0C), 
                EC6C,   8, 
                Offset (0x0E), 
                EC6E,   8
            }

            Method (IBE2, 0, Serialized)
            {
                While ((EC6E & 0x02))
                {
                    Sleep (0x50)
                }
            }

            Method (ECMD, 1, Serialized)
            {
                IBE2 ()
                EC6E = Arg0
                IBE2 ()
            }

            Method (ILID, 0, NotSerialized)
            {
                LIDS = One
                ^^^GFX0.CLID = One
                If (IGDS)
                {
                    If ((ECTM == 0x08))
                    {
                        LIDS = One
                        ^^^GFX0.CLID = One
                    }
                    ElseIf (LIDT)
                    {
                        LIDS = Zero
                        ^^^GFX0.CLID = Zero
                    }
                    Else
                    {
                        LIDS = One
                        ^^^GFX0.CLID = One
                    }
                }
            }

            OperationRegion (GPM9, SystemMemory, 0xD0C50548, 0x04)
            Field (GPM9, DWordAcc, Lock, Preserve)
            {
                    ,   1, 
                CLBK,   1
            }

            Method (PJID, 0, NotSerialized)
            {
                If ((CLBK == One))
                {
                    Return (0x02)
                }
                ElseIf ((PJNA == 0x42))
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_Q01, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, One)
            }

            Method (_Q02, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (0x02, One)
                Notify (SMKB, 0x80) // Status Change
            }

            Method (_Q04, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x83)
            }

            Method (_Q05, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x82)
            }

            Method (_Q06, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x82)
            }

            Method (_Q0A, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x22)
            }

            Method (_Q0B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x24)
            }

            Method (_Q0C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x23)
            }

            Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((LMAT == One))
                {
                    HKEV (One, 0x64)
                }
                Else
                {
                    HKDS ()
                }
            }

            Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (0x02, 0x64)
            }

            Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x21)
            }

            Name (BATO, 0x80)
            Name (BATN, Zero)
            Name (ECEV, 0xC0)
            Name (Q29F, Zero)
            Method (_Q20, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((SMST & 0x40))
                {
                    Local0 = SMAA /* \_SB_.PCI0.LPCB.EC0_.SMAA */
                    If ((Local0 == 0x14))
                    {
                        SELE ()
                        If ((0x40 & ECEV))
                        {
                            Notify (BAT1, 0x81) // Information Change
                            BINH ()
                        }

                        If ((0x02 & ECEV))
                        {
                            Notify (ACAD, 0x80) // Status Change
                            AINH ()
                        }

                        ^^^^BAT1.RCAP = Zero
                        Notify (BAT1, 0x80) // Status Change
                        BATO = BATD /* \_SB_.PCI0.LPCB.EC0_.BATD */
                        SMST &= 0xBF
                    }
                }
            }

            Method (_Q29, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_Q30, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x43)
            }

            Method (_Q31, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x44)
            }

            Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x45)
            }

            Method (_Q34, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x46)
            }

            Method (_Q35, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x41)
            }

            Method (_Q36, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x42)
            }

            Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x47)
            }

            Method (_Q57, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x84)
            }

            Method (_Q58, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x84)
            }

            Method (_Q5B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x24)
            }

            Method (_Q62, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x25)
            }

            Method (_Q63, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If ((LMAT == One))
                {
                    If ((OSYS >= 0x07DC)){}
                    ElseIf ((RFST == Zero))
                    {
                        RFST = One
                        If ((WLAN == One))
                        {
                            WLST = One
                        }

                        If ((ST3G == One))
                        {
                            ED3G = One
                        }
                    }
                    Else
                    {
                        RFST = Zero
                        If ((WLAN == One))
                        {
                            WLST = Zero
                        }

                        If ((ST3G == One))
                        {
                            ED3G = Zero
                        }
                    }
                }

                HKEV (One, 0x02)
            }

            Method (_Q68, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^WMID.FEBC [Zero] = One
                Notify (WMID, 0xBD) // Device-Specific
            }

            Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
                SSMP = 0xCA
                If ((PJID () == 0x02))
                {
                    Notify (SEN1, 0x90) // Device-Specific
                }
            }

            Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
                SSMP = 0xCA
                If ((PJID () == 0x02))
                {
                    Notify (SEN1, 0x90) // Device-Specific
                }
            }

            Name (CPUF, Zero)
            Mutex (PPCF, 0x00)
            Method (_Q83, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_Q84, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_Q85, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (BAT1, 0x81) // Information Change
            }

            Method (_Q8C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                UTPS ()
                Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
            }

            Method (_Q8D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                UTPS ()
                Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
            }

            Method (_QAC, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_QAD, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (UTPS, 0, NotSerialized)
            {
                CPUF = One
                Acquire (PPCF, 0xFFFF)
                If (((CPTS == One) || (CPTS == 0x02)))
                {
                    If ((PPCD > One))
                    {
                        Divide (PPCD, 0x02, Local1, Local0)
                        \_PR.CPU0._PPC = Local0
                    }
                }
                ElseIf (((CPTS == 0x03) || (CPTS == 0x04)))
                {
                    If ((PPCD > One))
                    {
                        Divide (PPCD, 0x02, Local1, Local0)
                        \_PR.CPU0._PPC = Local0
                    }
                }
                Else
                {
                    \_PR.CPU0._PPC = Zero
                }

                PNOT ()
                Release (PPCF)
            }

            Method (_Q8E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (((OSYS < 0x07D6) || (LINX == One)))
                {
                    If ((BLVL < 0x09))
                    {
                        BLVL++
                    }

                    BRXP ()
                }
                Else
                {
                    P8XH (Zero, 0x8E)
                    Notify (^^^GFX0.DD1F, 0x86) // Device-Specific
                }

                If ((LMAT == One))
                {
                    HKEV (One, 0x61)
                }
            }

            Method (_Q8F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                If (((OSYS < 0x07D6) || (LINX == One)))
                {
                    If ((BLVL > Zero))
                    {
                        BLVL--
                    }

                    BRXP ()
                }
                Else
                {
                    P8XH (Zero, 0x8F)
                    Notify (^^^GFX0.DD1F, 0x87) // Device-Specific
                }

                If ((LMAT == One))
                {
                    HKEV (One, 0x62)
                }

                Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
                If ((PJID () == 0x02))
                {
                    Notify (SEN1, 0x90) // Device-Specific
                }
            }

            Method (_Q90, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^RDWL = WLST /* \_SB_.PCI0.LPCB.EC0_.WLST */
            }

            Method (_Q91, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^RDWL = WLST /* \_SB_.PCI0.LPCB.EC0_.WLST */
            }

            Method (_Q92, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^RDBT = BLTS /* \_SB_.PCI0.LPCB.EC0_.BLTS */
            }

            Method (_Q93, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^RDBT = BLTS /* \_SB_.PCI0.LPCB.EC0_.BLTS */
            }

            Method (_Q9B, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ILID ()
                Notify (LID0, 0x80) // Status Change
            }

            Method (_Q9C, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ILID ()
                Notify (LID0, 0x80) // Status Change
            }

            Method (_Q9D, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x63)
            }

            Method (_Q9E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x63)
            }

            Method (_QA0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^RD3G = ED3G /* \_SB_.PCI0.LPCB.EC0_.ED3G */
            }

            Method (_QA1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                ^^^^RD3G = ED3G /* \_SB_.PCI0.LPCB.EC0_.ED3G */
            }

            Method (_QA6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
            }

            Method (_QC1, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                SSMP = 0xCA
                Notify (\_TZ.TZ01, 0x80) // Thermal Status Change
            }

            Method (_QC6, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (BAT1, 0x80) // Status Change
            }

            Method (SELE, 0, NotSerialized)
            {
                BATN = BATD /* \_SB_.PCI0.LPCB.EC0_.BATD */
                ECEV = Zero
                If ((0xC0 & BATN))
                {
                    ECEV |= One
                    If ((0x0300 & BATN))
                    {
                        ECEV |= 0x04
                    }
                }

                Local0 = (BATN & One)
                Local1 = (BATO & One)
                If (Local0)
                {
                    ECEV |= 0x0100
                }
                Else
                {
                    ECEV &= 0xFEFF
                }

                If (~(Local0 == Local1))
                {
                    ECEV |= 0x40
                }

                Local0 = (BATN & 0x02)
                Local1 = (BATO & 0x02)
                If (Local0)
                {
                    ECEV |= 0x0200
                }
                Else
                {
                    ECEV &= 0xFDFF
                }

                If (~(Local0 == Local1))
                {
                    ECEV |= 0x80
                }

                Local0 = (BATN & 0xC0)
                Local1 = (BATO & 0xC0)
                If (~(Local0 == Local1))
                {
                    ECEV |= 0x02
                }

                If ((One & ECEV))
                {
                    If ((0x04 & ECEV))
                    {
                        If ((BATN & 0x20))
                        {
                            ECEV |= 0x10
                        }
                        Else
                        {
                            ECEV |= 0x20
                        }
                    }
                }
            }

            Method (BINH, 0, NotSerialized)
            {
            }

            Method (AINH, 0, NotSerialized)
            {
                Sleep (0x012C)
                HKEV (0x08, Zero)
                If (((OSYS < 0x07D6) || (LINX == One)))
                {
                    If (ACDF)
                    {
                        If ((BLVL < 0x04))
                        {
                            BLVL += 0x05
                        }
                        Else
                        {
                            BLVL = 0x09
                        }
                    }
                    ElseIf ((BLVL > 0x05))
                    {
                        BLVL -= 0x05
                    }
                    Else
                    {
                        BLVL = Zero
                    }

                    BRXP ()
                }
            }

            Method (_QC0, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                HKEV (One, 0x8A)
            }

            Method (_QC7, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
            {
                Notify (PWRB, 0x80) // Status Change
            }

            Method (HKEV, 2, NotSerialized)
            {
                ^^^WMID.FEBC [Zero] = Arg0
                ^^^WMID.FEBC [One] = Arg1
                ^^^WMID.FEBC [0x02] = Zero
                ^^^WMID.FEBC [0x03] = Zero
                Notify (WMID, 0xBC) // Device-Specific
            }

            Method (HKDS, 0, NotSerialized)
            {
                ^^^GFX0.GHDS (Zero)
            }

            Method (BRXP, 0, NotSerialized)
            {
                Local1 = (DerefOf (PNLT [BLVL]) * 0x64)
                Local2 = (Local1 / 0x0100)
                ^^^GFX0.AINT (One, Local2)
            }
        }

        Scope (\_SB)
        {
            Device (RTC)
            {
                Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    IO (Decode16,
                        0x0070,             // Range Minimum
                        0x0070,             // Range Maximum
                        0x01,               // Alignment
                        0x08,               // Length
                        )
                })
            }

            Device (HPET)
            {
                Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    Return (0x0F)
                }

                Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                {
                    Name (RBUF, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Interrupt (ResourceConsumer, Level, ActiveHigh, Exclusive, ,, )
                        {
                            0x00000008,
                        }
                    })
                    Return (RBUF) /* \_SB_.HPET._CRS.RBUF */
                }
            }
        }

        Device (IPIC)
        {
            Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0020,             // Range Minimum
                    0x0020,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0024,             // Range Minimum
                    0x0024,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0028,             // Range Minimum
                    0x0028,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x002C,             // Range Minimum
                    0x002C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0030,             // Range Minimum
                    0x0030,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0034,             // Range Minimum
                    0x0034,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0038,             // Range Minimum
                    0x0038,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x003C,             // Range Minimum
                    0x003C,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A0,             // Range Minimum
                    0x00A0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A4,             // Range Minimum
                    0x00A4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00A8,             // Range Minimum
                    0x00A8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00AC,             // Range Minimum
                    0x00AC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B0,             // Range Minimum
                    0x00B0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B4,             // Range Minimum
                    0x00B4,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00B8,             // Range Minimum
                    0x00B8,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x00BC,             // Range Minimum
                    0x00BC,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x04D0,             // Range Minimum
                    0x04D0,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IRQNoFlags ()
                    {2}
            })
        }

        Device (LDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x002E,             // Range Minimum
                    0x002E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x004E,             // Range Minimum
                    0x004E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0061,             // Range Minimum
                    0x0061,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0063,             // Range Minimum
                    0x0063,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0065,             // Range Minimum
                    0x0065,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0067,             // Range Minimum
                    0x0067,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0070,             // Range Minimum
                    0x0070,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0080,             // Range Minimum
                    0x0080,             // Range Maximum
                    0x01,               // Alignment
                    0x10,               // Length
                    )
                IO (Decode16,
                    0x0092,             // Range Minimum
                    0x0092,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x00B2,             // Range Minimum
                    0x00B2,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
                IO (Decode16,
                    0x0680,             // Range Minimum
                    0x0680,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x0400,             // Range Minimum
                    0x0400,             // Range Maximum
                    0x01,               // Alignment
                    0x80,               // Length
                    )
                IO (Decode16,
                    0x0500,             // Range Minimum
                    0x0500,             // Range Maximum
                    0x01,               // Alignment
                    0xFF,               // Length
                    )
                IO (Decode16,
                    0x0600,             // Range Minimum
                    0x0600,             // Range Maximum
                    0x01,               // Alignment
                    0x20,               // Length
                    )
                IO (Decode16,
                    0x164E,             // Range Minimum
                    0x164E,             // Range Maximum
                    0x01,               // Alignment
                    0x02,               // Length
                    )
            })
        }

        Device (TIMR)
        {
            Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0040,             // Range Minimum
                    0x0040,             // Range Maximum
                    0x01,               // Alignment
                    0x04,               // Length
                    )
                IO (Decode16,
                    0x0050,             // Range Minimum
                    0x0050,             // Range Maximum
                    0x10,               // Alignment
                    0x04,               // Length
                    )
                IRQNoFlags ()
                    {0}
            })
        }

        OperationRegion (PKBS, SystemIO, 0x60, 0x05)
        Field (PKBS, ByteAcc, Lock, Preserve)
        {
            PKBD,   8, 
            Offset (0x02), 
            Offset (0x03), 
            Offset (0x04), 
            PKBC,   8
        }

        Device (PS2K)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((OSYS >= 0x07DC))
                {
                    Return ("10251195")
                }
                Else
                {
                    Return (0x0303D041)
                }
            }

            Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {1}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    FixedIO (
                        0x0060,             // Address
                        0x01,               // Length
                        )
                    FixedIO (
                        0x0064,             // Address
                        0x01,               // Length
                        )
                    IRQNoFlags ()
                        {1}
                }
                EndDependentFn ()
            })
        }

        Device (PS2M)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                If ((TPVD == 0x53))
                {
                    Return (0x811B2E4F)
                }
                Else
                {
                    Return (0x0A058416)
                }
            }

            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                Return (Package (0x01)
                {
                    0x130FD041
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PTPS == Zero))
                {
                    Return (0x0F)
                }

                If ((OSYS >= 0x07DD))
                {
                    Return (Zero)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {12}
            })
            Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
            {
                StartDependentFn (0x00, 0x00)
                {
                    IRQNoFlags ()
                        {12}
                }
                EndDependentFn ()
            })
        }

        Device (SMKB)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "10251229")  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((CLOS == 0xA1))
                {
                    Return (0x0F)
                }
                ElseIf ((OSYS >= 0x07E2))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (ISH0)
        {
            Name (_ADR, 0x00110000)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("1730e71d-e5dd-4a34-be57-4d76b6a2fe37") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Local0 = DerefOf (Arg3 [Zero])
                        If ((Local0 == Zero))
                        {
                            P8XH (Zero, 0x5C)
                        }
                        Else
                        {
                        }

                        Return (Zero)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
            {
            }

            Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
            {
            }
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x01, 0x00000000, 0x00){}
        Processor (CPU1, 0x02, 0x00000000, 0x00){}
        Processor (CPU2, 0x03, 0x00000000, 0x00){}
        Processor (CPU3, 0x04, 0x00000000, 0x00){}
    }

    Name (ECUP, One)
    Mutex (EHLD, 0x00)
    Name (ADW1, Zero)
    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 2, Serialized)
    {
        If ((Arg0 == Zero))
        {
            P80D = ((P80D & 0xFFFFFF00) | Arg1)
        }

        If ((Arg0 == One))
        {
            P80D = ((P80D & 0xFFFF00FF) | (Arg1 << 0x08))
        }

        If ((Arg0 == 0x02))
        {
            P80D = ((P80D & 0xFF00FFFF) | (Arg1 << 0x10))
        }

        If ((Arg0 == 0x03))
        {
            P80D = ((P80D & 0x00FFFFFF) | (Arg1 << 0x18))
        }

        P80H = P80D /* \P80D */
    }

    Method (ADBG, 1, Serialized)
    {
        Return (Zero)
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        PICM = Arg0
    }

    OperationRegion (SWC0, SystemIO, 0x0610, 0x0F)
    Field (SWC0, ByteAcc, NoLock, Preserve)
    {
        G1S,    8, 
        Offset (0x04), 
        G1E,    8, 
        Offset (0x0A), 
        G1S2,   8, 
        G1S3,   8
    }

    OperationRegion (SWC1, SystemIO, PMBS, 0x34)
    Field (SWC1, DWordAcc, NoLock, Preserve)
    {
        Offset (0x20), 
        G0S,    32, 
        Offset (0x30), 
        G0EN,   32
    }

    OperationRegion (PMCM, SystemMemory, (DD1A + 0x1000), 0x1000)
    Field (PMCM, ByteAcc, NoLock, Preserve)
    {
        Offset (0x94), 
        DHPD,   32
    }

    Scope (_SB.PCI0.RP05)
    {
        OperationRegion (PCIN, PCI_Config, 0x60, 0x04)
        Field (PCIN, AnyAcc, NoLock, Preserve)
        {
            Offset (0x02), 
            PMES,   1, 
            PMEP,   1, 
            Offset (0x04)
        }
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        P80D = Zero
        P8XH (Zero, Arg0)
        G1S3 = Ones
        G1S2 = Ones
        G1S = One
        G1E = One
        G0S = Ones
        If ((\_SB.SPRG != 0x0C))
        {
            If (CondRefOf (\_SB.TPM.PTS))
            {
                \_SB.TPM.PTS (Arg0)
            }
        }

        If (((IOBF == 0x03) && (IS3A == One)))
        {
            ADW1 = \_SB.GPC1 (0x00C40728)
            ADW1 |= 0xFFFFC3FF
            ADW1 &= 0x1000
            \_SB.SPC1 (0x00C40728, ADW1)
        }

        If ((Arg0 == 0x03))
        {
            P8XH (Zero, 0x53)
        }

        If ((Arg0 == 0x04))
        {
            \_SB.PCI0.LPCB.EC0.FLS4 = One
            P8XH (Zero, 0x54)
        }

        \_SB.PTWL = \_SB.PCI0.LPCB.EC0.WLAN
        \_SB.PTBT = \_SB.PCI0.LPCB.EC0.BLTH
        \_SB.PT3G = \_SB.PCI0.LPCB.EC0.ST3G
        \_SB.RDWL = \_SB.PCI0.LPCB.EC0.WLST
        \_SB.RDBT = \_SB.PCI0.LPCB.EC0.BLTS
        \_SB.RD3G = \_SB.PCI0.LPCB.EC0.ED3G
        \_SB.PCI0.LPCB.EC0.CPLE = One
        If ((Arg0 == 0x05))
        {
            P8XH (Zero, 0x55)
        }
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        P8XH (One, 0xAB)
        If ((OSYS >= 0x07DC))
        {
            \_SB.PCI0.LPCB.EC0.OSW8 = One
        }
        Else
        {
            \_SB.PCI0.LPCB.EC0.OSW8 = Zero
        }

        If (NEXP)
        {
            If ((OSCC & 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If ((OSCC & 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If ((OSYS == 0x07D9))
        {
            \_SB.CSBM = 0x07
        }
        Else
        {
            \_SB.CSBM = 0x81
        }

        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            If (\_SB.PCI0.LPCB.EC0.WOLF)
            {
                If (!(\_SB.PCI0.RP05.PMEP && \_SB.PCI0.RP05.PMES))
                {
                    Notify (\_SB.PWRB, 0x02) // Device Wake
                }
            }
            Else
            {
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }

            If ((PFLV == FMBL)){}
            If ((Arg0 == 0x03))
            {
                P8XH (Zero, 0xE3)
            }

            If ((Arg0 == 0x04))
            {
                P8XH (Zero, 0xE4)
            }

            If ((Arg0 == 0x05))
            {
                P8XH (Zero, 0xE5)
            }

            \_SB.PCI0.LPCB.EC0.ILID ()
            \_SB.PCI0.LPCB.EC0.WLAN = \_SB.PTWL
            \_SB.PCI0.LPCB.EC0.BLTH = \_SB.PTBT
            \_SB.PCI0.LPCB.EC0.ST3G = \_SB.PT3G
            Sleep (0x0A)
            \_SB.PCI0.LPCB.EC0.WLST = \_SB.RDWL
            \_SB.PCI0.LPCB.EC0.BLTS = \_SB.RDBT
            \_SB.PCI0.LPCB.EC0.ED3G = \_SB.RD3G
            \_SB.PCI0.LPCB.EC0.CPLE = One
            If ((BNUM == Zero))
            {
                PNOT ()
            }
            Else
            {
                PNOT ()
            }

            If ((OSYS == 0x07D2))
            {
                If ((\_PR.CPU0._PPC > Zero))
                {
                    \_PR.CPU0._PPC -= One
                    PNOT ()
                    \_PR.CPU0._PPC += One
                    PNOT ()
                }
                Else
                {
                    \_PR.CPU0._PPC += One
                    PNOT ()
                    \_PR.CPU0._PPC -= One
                    PNOT ()
                }
            }
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (PNOT, 0, Serialized)
    {
        If (MPEN)
        {
            If ((PDC0 & 0x08))
            {
                Notify (\_PR.CPU0, 0x80) // Performance Capability Change
                If ((PDC0 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81) // C-State Change
                }
            }

            If ((PDC1 & 0x08))
            {
                Notify (\_PR.CPU1, 0x80) // Performance Capability Change
                If ((PDC1 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81) // C-State Change
                }
            }

            If ((PDC2 & 0x08))
            {
                Notify (\_PR.CPU2, 0x80) // Performance Capability Change
                If ((PDC2 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81) // C-State Change
                }
            }

            If ((PDC3 & 0x08))
            {
                Notify (\_PR.CPU3, 0x80) // Performance Capability Change
                If ((PDC3 & 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81) // C-State Change
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80) // Performance Capability Change
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81) // C-State Change
        }

        If ((DPTE == One))
        {
            Notify (\_SB.IETM, 0x86) // Device-Specific
            If ((CHGE == One))
            {
                Notify (\_SB.CHRG, 0x80) // Status Change
            }
        }
    }

    Name (CLMP, Zero)
    Name (PLEN, Zero)
    Name (PLSV, 0x8000)
    Name (CSEM, Zero)
    Method (SPL1, 0, Serialized)
    {
        If ((CSEM == One))
        {
            Return (Zero)
        }

        CSEM = One
    }

    Method (RPL1, 0, Serialized)
    {
        CSEM = Zero
    }

    Name (DDPS, Zero)
    Name (UAMS, Zero)
    Method (GUAM, 1, Serialized)
    {
        If ((Arg0 != DDPS))
        {
            DDPS = Arg0
            UAMS = (Arg0 && !PWRS)
            If (Arg0)
            {
                If ((ECNO == One))
                {
                    ADBG ("EC Notify")
                    If ((ECDB == One))
                    {
                        ADBG ("EC Debug")
                    }

                    If ((ECLP == One))
                    {
                        ECUP = Zero
                    }
                }

                If (PLCS)
                {
                    SPL1 ()
                }
            }
            Else
            {
                If ((ECNO == One))
                {
                    ADBG ("EC Notify")
                    Local0 = Acquire (EHLD, 0xFFFF)
                    If ((Local0 == Zero))
                    {
                        If ((ECLP == One))
                        {
                            ECUP = One
                        }

                        Release (EHLD)
                    }

                    If ((ECDB == One))
                    {
                        ADBG ("EC Debug")
                    }
                }

                P8XH (Zero, 0xC5)
                P8XH (One, 0xAB)
            }
        }
    }

    Method (P_CS, 0, Serialized)
    {
    }

    Scope (_SB)
    {
        Scope (PCI0)
        {
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                P8XH (Zero, 0xA8)
                OSYS = 0x07D0
                If (CondRefOf (\_OSI))
                {
                    If (_OSI ("Windows 2001"))
                    {
                        OSYS = 0x07D1
                    }

                    If (_OSI ("Windows 2001 SP1"))
                    {
                        OSYS = 0x07D1
                    }

                    If (_OSI ("Windows 2001 SP2"))
                    {
                        OSYS = 0x07D2
                    }

                    If (_OSI ("Windows 2006"))
                    {
                        OSYS = 0x07D6
                    }

                    If (_OSI ("Windows 2009"))
                    {
                        OSYS = 0x07D9
                    }

                    If (_OSI ("Windows 2012"))
                    {
                        OSYS = 0x07DC
                    }

                    If (_OSI ("Windows 2013"))
                    {
                        OSYS = 0x07DD
                    }

                    If (_OSI ("Windows 2015"))
                    {
                        OSYS = 0x07DF
                    }

                    If (_OSI ("Windows 2016"))
                    {
                        OSYS = 0x07E0
                    }

                    If (_OSI ("Windows 2017"))
                    {
                        OSYS = 0x07E1
                    }

                    If (_OSI ("Windows 2018"))
                    {
                        OSYS = 0x07E2
                    }

                    If (_OSI ("Windows 2019"))
                    {
                        OSYS = 0x07E3
                    }

                    If ((CLOS == 0xA1))
                    {
                        ^LPCB.EC0.AIRF = One
                    }
                    ElseIf ((OSYS >= 0x07E2))
                    {
                        ^LPCB.EC0.AIRF = One
                    }
                    Else
                    {
                        ^LPCB.EC0.AIRF = Zero
                    }

                    If ((OSYS == 0x07D9))
                    {
                        CSBM = 0x07
                    }
                    Else
                    {
                        CSBM = 0x81
                    }
                }
            }

            Method (NHPG, 0, Serialized)
            {
                ^RP01.HPEX = Zero
                ^RP02.HPEX = Zero
                ^RP03.HPEX = Zero
                ^RP04.HPEX = Zero
                ^RP05.HPEX = Zero
                ^RP06.HPEX = Zero
                ^RP01.HPSX = One
                ^RP02.HPSX = One
                ^RP03.HPSX = One
                ^RP04.HPSX = One
                ^RP05.HPSX = One
                ^RP06.HPSX = One
            }

            Method (NPME, 0, Serialized)
            {
                ^RP01.PMEX = Zero
                ^RP02.PMEX = Zero
                ^RP03.PMEX = Zero
                ^RP04.PMEX = Zero
                ^RP05.PMEX = Zero
                ^RP06.PMEX = Zero
                ^RP01.PMSX = One
                ^RP02.PMSX = One
                ^RP03.PMSX = One
                ^RP04.PMSX = One
                ^RP05.PMSX = One
                ^RP06.PMSX = One
            }
        }

        Device (GPO0)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3452")  // _HID: Hardware ID
            Name (_CID, "INT3452")  // _CID: Compatible ID
            Name (_DDN, "General Purpose Input/Output (GPIO) Controller - North")  // _DDN: DOS Device Name
            Name (_UID, One)  // _UID: Unique ID
            Name (LINK, "\\_SB.GPO0")
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y07)
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x0000000E,
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.GPO0._Y07._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.GPO0._Y07._LEN, B0LN)  // _LEN: Length
                B0BA = GP0A /* \GP0A */
                B0LN = GP0L /* \GP0L */
                Return (RBUF) /* \_SB_.GPO0.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }

        Device (GPO1)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3452")  // _HID: Hardware ID
            Name (_CID, "INT3452")  // _CID: Compatible ID
            Name (_DDN, "General Purpose Input/Output (GPIO) Controller - Northwest")  // _DDN: DOS Device Name
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y08)
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x0000000E,
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.GPO1._Y08._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.GPO1._Y08._LEN, B0LN)  // _LEN: Length
                B0BA = GP1A /* \GP1A */
                B0LN = GP1L /* \GP1L */
                Return (RBUF) /* \_SB_.GPO1.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS < 0x07DC))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }

        Device (GPO2)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3452")  // _HID: Hardware ID
            Name (_CID, "INT3452")  // _CID: Compatible ID
            Name (_DDN, "General Purpose Input/Output (GPIO) Controller - West")  // _DDN: DOS Device Name
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y09)
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x0000000E,
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.GPO2._Y09._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.GPO2._Y09._LEN, B0LN)  // _LEN: Length
                B0BA = GP2A /* \GP2A */
                B0LN = GP2L /* \GP2L */
                Return (RBUF) /* \_SB_.GPO2.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS < 0x07DC))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }
        }

        Device (GPO3)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Name (_HID, "INT3452")  // _HID: Hardware ID
            Name (_CID, "INT3452")  // _CID: Compatible ID
            Name (_DDN, "General Purpose Input/Output (GPIO) Controller - Southwest")  // _DDN: DOS Device Name
            Name (_UID, 0x04)  // _UID: Unique ID
            Name (RBUF, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y0A)
                Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                {
                    0x0000000E,
                }
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RBUF, \_SB.GPO3._Y0A._BAS, B0BA)  // _BAS: Base Address
                CreateDWordField (RBUF, \_SB.GPO3._Y0A._LEN, B0LN)  // _LEN: Length
                B0BA = GP3A /* \GP3A */
                B0LN = GP3L /* \GP3L */
                Return (RBUF) /* \_SB_.GPO3.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((OSYS < 0x07DC))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Name (AVBL, Zero)
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            PRWP [Zero] = Arg0
            Local0 = (SS1 << One)
            Local0 |= (SS2 << 0x02)
            Local0 |= (SS3 << 0x03)
            Local0 |= (SS4 << 0x04)
            If (((One << Arg1) & Local0))
            {
                PRWP [One] = Arg1
            }
            Else
            {
                Local0 >>= One
                FindSetLeftBit (Local0, PRWP [One])
            }

            Return (PRWP) /* \PRWP */
        }
    }

    Scope (_SB)
    {
        Name (OSCI, Zero)
        Name (OSCO, Zero)
        Name (OSCP, Zero)
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E") /* Sleep Button Device */)  // _HID: Hardware ID
        }

        Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
        {
            CreateDWordField (Arg3, Zero, STS0)
            CreateDWordField (Arg3, 0x04, CAP0)
            If ((Arg0 == ToUUID ("0811b06e-4a27-44f9-8d60-3cbbc22e7b48") /* Platform-wide Capabilities */))
            {
                If ((Arg1 == One))
                {
                    OSCP = CAP0 /* \_SB_._OSC.CAP0 */
                    If ((CAP0 & 0x04))
                    {
                        OSCO = 0x04
                        If ((RTD3 == Zero))
                        {
                            CAP0 &= 0x3B
                            STS0 |= 0x10
                        }
                    }
                }
                Else
                {
                    STS0 &= 0xFFFFFF00
                    STS0 |= 0x0A
                }
            }
            Else
            {
                STS0 &= 0xFFFFFF00
                STS0 |= 0x06
            }

            Return (Arg3)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0xE0000000,         // Address Base
                    0x10000000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFEA00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED01000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED03000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED06000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED08000,         // Address Base
                    0x00002000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED80000,         // Address Base
                    0x00040000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED1C000,         // Address Base
                    0x00001000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Return (BUF0) /* \_SB_.PCI0.PDRC.BUF0 */
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (((DIDX & 0x0F00) == 0x0400))
        {
            Notify (\_SB.PCI0.GFX0.DD1F, Arg0)
        }
    }

    If (((S0ID == One) || (OSYS >= 0x07DF)))
    {
        Scope (_SB.PCI0.SATA)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.I2C4)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_SB.PCI0.XHC)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }

        Scope (_PR.CPU0)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (_PR.CPU1)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (_PR.CPU2)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (_PR.CPU3)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                \_SB.PEPD
            })
        }

        Scope (_SB.PCI0.RP02.PXSX)
        {
            Name (_DEP, Package (0x01)  // _DEP: Dependencies
            {
                PEPD
            })
        }
    }

    Scope (_SB)
    {
        Device (PEPD)
        {
            Name (_HID, "INT33A1" /* Intel Power Engine */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0D80") /* Windows-compatible System Power Management Controller */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Name (PEPP, Zero)
            Name (DEVS, Package (0x02)
            {
                One, 
                Package (0x01)
                {
                    "\\_SB.PCI0.GFX0"
                }
            })
            Name (DEVY, Package (0x08)
            {
                Package (0x03)
                {
                    "\\_PR.CPU0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.CPU1", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.CPU2", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_PR.CPU3", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.GFX0", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.SATA", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x03)
                        {
                            0xFF, 
                            Zero, 
                            0x81
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.I2C4", 
                    One, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            0x03
                        }
                    }
                }, 

                Package (0x03)
                {
                    "\\_SB.PCI0.RP02.PXSX", 
                    Zero, 
                    Package (0x02)
                    {
                        Zero, 
                        Package (0x02)
                        {
                            0xFF, 
                            Zero
                        }
                    }
                }
            })
            Name (BCCD, Package (0x03)
            {
                Package (0x02)
                {
                    "\\_SB.PCI0.SATA", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SATA.PRT0", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }, 

                Package (0x02)
                {
                    "\\_SB.PCI0.SATA.PRT1", 
                    Package (0x01)
                    {
                        Package (0x03)
                        {
                            Package (0x05)
                            {
                                One, 
                                0x08, 
                                Zero, 
                                One, 
                                0xB2
                            }, 

                            Package (0x03)
                            {
                                Zero, 
                                0xCD, 
                                One
                            }, 

                            0x3E80
                        }
                    }
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (((OSYS >= 0x07DF) || ((OSYS >= 0x07DC) && (
                    S0ID == One))))
                {
                    Return (0x0F)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                ADBG (Concatenate ("PEPY = ", ToHexString (PEPY)))
                ADBG (Concatenate ("PEPC = ", ToHexString (PEPC)))
                ADBG (Concatenate ("OSYS = ", ToHexString (OSYS)))
                If ((Arg0 == ToUUID ("c4eb40a0-6cd2-11e2-bcfd-0800200c9a66") /* Unknown UUID */))
                {
                    If ((Arg2 == Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x7F                                             // .
                        })
                    }

                    If ((\_PR.NLPC == One))
                    {
                        DerefOf (DEVY [Zero]) [One] = One
                        DerefOf (DEVY [One]) [One] = Zero
                        DerefOf (DEVY [0x02]) [One] = Zero
                        DerefOf (DEVY [0x03]) [One] = Zero
                    }

                    If ((\_PR.NLPC == 0x02))
                    {
                        DerefOf (DEVY [Zero]) [One] = One
                        DerefOf (DEVY [One]) [One] = Zero
                        DerefOf (DEVY [0x02]) [One] = One
                        DerefOf (DEVY [0x03]) [One] = Zero
                    }

                    If ((\_PR.NLPC == 0x03))
                    {
                        DerefOf (DEVY [Zero]) [One] = One
                        DerefOf (DEVY [One]) [One] = One
                        DerefOf (DEVY [0x02]) [One] = One
                        DerefOf (DEVY [0x03]) [One] = Zero
                    }

                    If ((\_PR.NLPC == 0x04))
                    {
                        DerefOf (DEVY [Zero]) [One] = One
                        DerefOf (DEVY [One]) [One] = One
                        DerefOf (DEVY [0x02]) [One] = One
                        DerefOf (DEVY [0x03]) [One] = One
                    }

                    If ((ODBG == Zero))
                    {
                        DerefOf (DEVY [0x08]) [One] = One
                    }

                    If ((ODBG == One))
                    {
                        DerefOf (DEVY [0x08]) [One] = Zero
                    }

                    If ((SIOE == Zero))
                    {
                        DerefOf (DEVY [0x16]) [One] = Zero
                    }

                    If ((EMCE == Zero))
                    {
                        DerefOf (DEVY [0x17]) [One] = Zero
                    }

                    If ((SDEN == Zero))
                    {
                        DerefOf (DEVY [0x18]) [One] = Zero
                    }

                    If ((Arg2 == One))
                    {
                        If ((S0ID == One))
                        {
                            Return (DEVY) /* \_SB_.PEPD.DEVY */
                        }

                        Return (Package (0x01)
                        {
                            Zero
                        })
                    }

                    If ((Arg2 == 0x02))
                    {
                        Return (BCCD) /* \_SB_.PEPD.BCCD */
                    }

                    If ((Arg2 == 0x03))
                    {
                        ADBG ("Screen Off Notification")
                    }

                    If ((Arg2 == 0x04))
                    {
                        ADBG ("Screen On Notification")
                    }

                    If ((Arg2 == 0x05))
                    {
                        ADBG ("PEP DSM:5")
                        P8XH (Zero, 0xC5)
                        P8XH (One, Zero)
                    }

                    If ((Arg2 == 0x06))
                    {
                        ADBG ("PEP DSM:6")
                        P8XH (Zero, 0x50)
                        P8XH (One, Zero)
                    }
                }

                Return (One)
            }
        }
    }

    Scope (_GPE)
    {
        Method (XL07, 0, NotSerialized)
        {
            \_SB.PCI0.RP03.HPME ()
            \_SB.PCI0.RP05.HPME ()
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.XHC, 0x02) // Device Wake
        }

        Method (_L0F, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
        }
    }

    Name (NLID, Zero)
    Name (LINX, Zero)
    Scope (_SB)
    {
        Name (ECOK, Zero)
        Name (SEL0, 0xF0)
        Name (BFLG, Zero)
        Method (VTOB, 1, NotSerialized)
        {
            Local0 = One
            Local0 <<= Arg0
            Return (Local0)
        }

        Method (BTOV, 1, NotSerialized)
        {
            Local0 = (Arg0 >> One)
            Local1 = Zero
            While (Local0)
            {
                Local1++
                Local0 >>= One
            }

            Return (Local1)
        }

        Method (MKWD, 2, NotSerialized)
        {
            If ((Arg1 & 0x80))
            {
                Local0 = 0xFFFF0000
            }
            Else
            {
                Local0 = Zero
            }

            Local0 |= Arg0
            Local0 |= (Arg1 << 0x08)
            Return (Local0)
        }

        Method (POSW, 1, NotSerialized)
        {
            If ((Arg0 & 0x8000))
            {
                If ((Arg0 == 0xFFFF))
                {
                    Return (0xFFFFFFFF)
                }
                Else
                {
                    Local0 = ~Arg0
                    Local0++
                    Local0 &= 0xFFFF
                    Return (Local0)
                }
            }
            Else
            {
                Return (Arg0)
            }
        }

        Method (GBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            Arg2 = TIDX /* \_SB_.GBFE.TIDX */
        }

        Method (PBFE, 3, NotSerialized)
        {
            CreateByteField (Arg0, Arg1, TIDX)
            TIDX = Arg2
        }

        Method (ITOS, 1, NotSerialized)
        {
            Local0 = Buffer (0x09)
                {
                    /* 0000 */  0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0.......
                    /* 0008 */  0x00                                             // .
                }
            Local7 = Buffer (0x11)
                {
                    "0123456789ABCDEF"
                }
            Local1 = 0x08
            Local2 = Zero
            Local3 = Zero
            While (Local1)
            {
                Local1--
                Local4 = ((Arg0 >> (Local1 << 0x02)) & 0x0F)
                If (Local4)
                {
                    Local3 = Ones
                }

                If (Local3)
                {
                    GBFE (Local7, Local4, RefOf (Local5))
                    PBFE (Local0, Local2, Local5)
                    Local2++
                }
            }

            Return (Local0)
        }
    }

    Scope (_SB)
    {
        Device (ACAD)
        {
            Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (ACST, Zero)
            Name (ACWT, Zero)
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((SIMU == 0x53))
                {
                    ACST = Zero
                }
                ElseIf (ECOK)
                {
                    ACST = ^^PCI0.LPCB.EC0.ACDF /* \_SB_.PCI0.LPCB.EC0_.ACDF */
                }
                Else
                {
                    ACST = One
                }

                PWRS = ACST /* \_SB_.ACAD.ACST */
            }

            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                ACWT = ACST /* \_SB_.ACAD.ACST */
                If ((SIMU == 0x53))
                {
                    ACST = Zero
                }
                ElseIf (ECOK)
                {
                    ACST = ^^PCI0.LPCB.EC0.ACDF /* \_SB_.PCI0.LPCB.EC0_.ACDF */
                }
                Else
                {
                    ACST = One
                }

                If (ACST)
                {
                    Local0 = One
                    ^^BAT1.BCRI = Zero
                }
                Else
                {
                    Local0 = Zero
                }

                PWRS = ACST /* \_SB_.ACAD.ACST */
                If ((ACWT != ACST))
                {
                    PNOT ()
                }

                Return (Local0)
            }
        }
    }

    Scope (_SB)
    {
        Device (BAT1)
        {
            Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (CBTI, Zero)
            Name (PBTI, Zero)
            Name (BTIN, Zero)
            Name (BTCH, Zero)
            Name (BIFI, Zero)
            Name (SEL0, Zero)
            Name (BCRI, Zero)
            Name (PBIF, Package (0x0D)
            {
                One, 
                0x1130, 
                0x1130, 
                One, 
                0x2B5C, 
                0x012C, 
                0x84, 
                0x20, 
                0x20, 
                "BAT1      ", 
                "11        ", 
                "11        ", 
                "11        "
            })
            Name (PBIX, Package (0x14)
            {
                Zero, 
                One, 
                0x1130, 
                0x1130, 
                One, 
                0x2B5C, 
                0x012C, 
                0x84, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x20, 
                0x20, 
                "BAT1      ", 
                "11        ", 
                "11        ", 
                "11        "
            })
            Name (PBST, Package (0x04)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0x2710
            })
            Name (ERRC, Zero)
            Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
            {
                _SB
            })
            Name (BTPF, Zero)
            Method (_BTP, 1, NotSerialized)  // _BTP: Battery Trip Point
            {
                BTPF = Arg0
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (ECOK)
                {
                    If (^^PCI0.LPCB.EC0.MBTS)
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                IVBI ()
                If (ECOK)
                {
                    If (^^PCI0.LPCB.EC0.MBTS)
                    {
                        UBIF ()
                    }
                }

                Return (PBIF) /* \_SB_.BAT1.PBIF */
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                IVBX ()
                If (ECOK)
                {
                    If (^^PCI0.LPCB.EC0.MBTS)
                    {
                        UBIX ()
                    }
                }

                Return (PBIX) /* \_SB_.BAT1.PBIX */
            }

            Method (IVBI, 0, NotSerialized)
            {
                PBIF [One] = 0xFFFFFFFF
                PBIF [0x02] = 0xFFFFFFFF
                PBIF [0x04] = 0xFFFFFFFF
                PBIF [0x09] = "Bad"
                PBIF [0x0A] = "      "
                PBIF [0x0B] = "Bad"
                PBIF [0x0C] = "Bad"
            }

            Name (LFCC, 0x1130)
            Method (UBIF, 0, Serialized)
            {
                If (ECOK)
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.BTDC /* \_SB_.PCI0.LPCB.EC0_.BTDC */
                    Local1 = ^^PCI0.LPCB.EC0.LFCC /* \_SB_.PCI0.LPCB.EC0_.LFCC */
                    Local2 = ^^PCI0.LPCB.EC0.BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                    Local3 = ^^PCI0.LPCB.EC0.BTMD /* \_SB_.PCI0.LPCB.EC0_.BTMD */
                    Local4 = ^^PCI0.LPCB.EC0.BTMN /* \_SB_.PCI0.LPCB.EC0_.BTMN */
                    Local5 = ^^PCI0.LPCB.EC0.BTSN /* \_SB_.PCI0.LPCB.EC0_.BTSN */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    PBIF [One] = Local0
                    PBIF [0x02] = Local1
                    PBIF [0x04] = Local2
                    LFCC = Local1
                    Local7 = (Local1 * 0x04)
                    Local7 /= 0x64
                    PBIF [0x06] = Local7
                    PBIF [0x0B] = "LION"
                    Switch (Local3)
                    {
                        Case (One)
                        {
                            PBIF [0x09] = "AC14B3K"
                        }
                        Case (0x02)
                        {
                            PBIF [0x09] = "AS16A5K"
                        }
                        Case (0x03)
                        {
                            PBIF [0x09] = "AC14B13J"
                        }
                        Case (0x04)
                        {
                            PBIF [0x09] = "AC14B18J"
                        }
                        Case (0x05)
                        {
                            PBIF [0x09] = "AS16A8K"
                        }
                        Case (0x06)
                        {
                            PBIF [0x09] = "AP16M5J"
                        }
                        Case (0x07)
                        {
                            PBIF [0x09] = "AP16K5J"
                        }
                        Case (0x08)
                        {
                            PBIF [0x09] = "AC14B18J"
                        }
                        Case (0x09)
                        {
                            PBIF [0x09] = "AC14B13J"
                        }
                        Case (0x0A)
                        {
                            PBIF [0x09] = "AC14B17J"
                        }
                        Default
                        {
                            PBIF [0x09] = "xxxxx"
                        }

                    }

                    Switch (Local4)
                    {
                        Case (0x03)
                        {
                            PBIF [0x0C] = "SANYO"
                        }
                        Case (0x04)
                        {
                            PBIF [0x0C] = "SONY"
                        }
                        Case (0x05)
                        {
                            PBIF [0x0C] = "PANASONIC"
                        }
                        Case (0x06)
                        {
                            PBIF [0x0C] = "SAMSUNG"
                        }
                        Case (0x07)
                        {
                            PBIF [0x0C] = "SIMPLO"
                        }
                        Case (0x08)
                        {
                            PBIF [0x0C] = "MOTOROLA"
                        }
                        Case (0x09)
                        {
                            PBIF [0x0C] = "CELXPERT"
                        }
                        Case (0x0A)
                        {
                            PBIF [0x0C] = "LGC"
                        }
                        Default
                        {
                            PBIF [0x0C] = "UNKNOWN"
                        }

                    }

                    PBIF [0x0A] = ITOS (ToBCD (Local5))
                }
            }

            Method (IVBX, 0, NotSerialized)
            {
                PBIX [0x02] = 0xFFFFFFFF
                PBIX [0x03] = 0xFFFFFFFF
                PBIX [0x05] = 0xFFFFFFFF
                PBIX [0x10] = "Bad"
                PBIX [0x11] = "      "
                PBIX [0x12] = "Bad"
                PBIX [0x13] = "Bad"
            }

            Method (UBIX, 0, Serialized)
            {
                If (ECOK)
                {
                    Acquire (^^PCI0.LPCB.EC0.MUT1, 0xFFFF)
                    Local0 = ^^PCI0.LPCB.EC0.BTDC /* \_SB_.PCI0.LPCB.EC0_.BTDC */
                    Local1 = ^^PCI0.LPCB.EC0.LFCC /* \_SB_.PCI0.LPCB.EC0_.LFCC */
                    Local2 = ^^PCI0.LPCB.EC0.BTDV /* \_SB_.PCI0.LPCB.EC0_.BTDV */
                    Local3 = ^^PCI0.LPCB.EC0.BTMD /* \_SB_.PCI0.LPCB.EC0_.BTMD */
                    Local4 = ^^PCI0.LPCB.EC0.BTMN /* \_SB_.PCI0.LPCB.EC0_.BTMN */
                    Local5 = ^^PCI0.LPCB.EC0.BTSN /* \_SB_.PCI0.LPCB.EC0_.BTSN */
                    Release (^^PCI0.LPCB.EC0.MUT1)
                    PBIX [0x02] = Local0
                    PBIX [0x03] = Local1
                    PBIX [0x05] = Local2
                    LFCC = Local1
                    Local7 = (Local1 * 0x04)
                    Local7 /= 0x64
                    PBIX [0x07] = Local7
                    PBIX [0x12] = "LION"
                    Switch (Local3)
                    {
                        Case (One)
                        {
                            PBIX [0x10] = "AC14B3K"
                        }
                        Case (0x02)
                        {
                            PBIX [0x10] = "AS16A5K"
                        }
                        Case (0x03)
                        {
                            PBIX [0x10] = "AC14B13J"
                        }
                        Case (0x04)
                        {
                            PBIX [0x10] = "AC14B18J"
                        }
                        Case (0x05)
                        {
                            PBIX [0x10] = "AS16A8K"
                        }
                        Case (0x06)
                        {
                            PBIX [0x10] = "AP16M5J"
                        }
                        Case (0x07)
                        {
                            PBIX [0x10] = "AP16K5J"
                        }
                        Case (0x08)
                        {
                            PBIX [0x10] = "AC14B18J"
                        }
                        Case (0x09)
                        {
                            PBIX [0x10] = "AC14B13J"
                        }
                        Case (0x0A)
                        {
                            PBIX [0x10] = "AC14B17J"
                        }
                        Default
                        {
                            PBIX [0x10] = "UNKNOWN"
                        }

                    }

                    Switch (Local4)
                    {
                        Case (0x03)
                        {
                            PBIX [0x13] = "SANYO"
                        }
                        Case (0x04)
                        {
                            PBIX [0x13] = "SONY"
                        }
                        Case (0x05)
                        {
                            PBIX [0x13] = "PANASONIC"
                        }
                        Case (0x06)
                        {
                            PBIX [0x13] = "SAMSUNG"
                        }
                        Case (0x07)
                        {
                            PBIX [0x13] = "SIMPLO"
                        }
                        Case (0x08)
                        {
                            PBIX [0x13] = "MOTOROLA"
                        }
                        Case (0x09)
                        {
                            PBIX [0x13] = "CELXPERT"
                        }
                        Case (0x0A)
                        {
                            PBIX [0x13] = "LGC"
                        }
                        Default
                        {
                            PBIX [0x13] = "UNKNOWN"
                        }

                    }

                    PBIX [0x11] = ITOS (ToBCD (Local5))
                }
            }

            Name (RCAP, Zero)
            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                If (ECOK)
                {
                    Local0 = ^^PCI0.LPCB.EC0.MBTS /* \_SB_.PCI0.LPCB.EC0_.MBTS */
                    If ((Local0 == Zero))
                    {
                        PBST [Zero] = Zero
                        PBST [One] = 0xFFFFFFFF
                        PBST [0x02] = 0xFFFFFFFF
                        PBST [0x03] = 0xFFFFFFFF
                        RCAP = Zero
                        Return (PBST) /* \_SB_.BAT1.PBST */
                    }

                    Local1 = ^^PCI0.LPCB.EC0.MBRM /* \_SB_.PCI0.LPCB.EC0_.MBRM */
                    PBST [0x02] = Local1
                    RCAP = Local1
                    Local3 = ^^PCI0.LPCB.EC0.MCUR /* \_SB_.PCI0.LPCB.EC0_.MCUR */
                    PBST [One] = POSW (Local3)
                    If (^^PCI0.LPCB.EC0.MFCF)
                    {
                        PBST [Zero] = Zero
                    }
                    ElseIf (^^PCI0.LPCB.EC0.MBPC)
                    {
                        PBST [Zero] = 0x02
                    }
                    ElseIf (^^PCI0.LPCB.EC0.MBDX)
                    {
                        PBST [Zero] = One
                    }
                    Else
                    {
                        PBST [Zero] = Zero
                    }

                    PBST [0x03] = ^^PCI0.LPCB.EC0.MBVG /* \_SB_.PCI0.LPCB.EC0_.MBVG */
                }
                Else
                {
                    PBST [Zero] = Zero
                    PBST [One] = 0xFFFFFFFF
                    PBST [0x02] = 0xFFFFFFFF
                    PBST [0x03] = 0xFFFFFFFF
                    RCAP = Zero
                }

                Return (PBST) /* \_SB_.BAT1.PBST */
            }
        }
    }

    Scope (_SB)
    {
        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                If (((^^PCI0.LPCB.EC0.ECTM & 0x08) == 0x08))
                {
                    Return (One)
                }

                If (^^PCI0.LPCB.EC0.LIDT)
                {
                    Return (Zero)
                }
                Else
                {
                    Return (One)
                }
            }
        }
    }

    Scope (_TZ)
    {
        Name (LEGA, One)
        Name (LEGP, One)
        Name (LEGC, One)
        ThermalZone (TZ01)
        {
            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                If ((LEGC == Zero))
                {
                    Return (0x12E0)
                }
                ElseIf ((\_SB.PCI0.LPCB.EC0.TJMX == Zero))
                {
                    Return (0x0EBC)
                }
                ElseIf ((\_SB.PCI0.LPCB.EC0.TJMX == One))
                {
                    Return (0x0EBC)
                }
                ElseIf ((\_SB.PCI0.LPCB.EC0.TJMX == 0x02))
                {
                    Return (0x0EBC)
                }
                ElseIf ((\_SB.PCI0.LPCB.EC0.TJMX == 0x03))
                {
                    Return (0x0EBC)
                }
                ElseIf ((\_SB.PCI0.LPCB.EC0.TJMX == 0x04))
                {
                    Return (0x0EBC)
                }
                Else
                {
                    Return (0x0EBC)
                }
            }

            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                CTYP = Arg0
            }

            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                If (\_SB.ECOK)
                {
                    Local0 = \_SB.PCI0.LPCB.EC0.CTMP
                    Return (((Local0 * 0x0A) + 0x0AAC))
                }
                Else
                {
                    Return (0x0C3C)
                }
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                If ((LEGP == Zero))
                {
                    Return (0x0EF8)
                }
                ElseIf ((\_SB.PCI0.LPCB.EC0.TJMX == Zero))
                {
                    Return (0x0E94)
                }
                ElseIf ((\_SB.PCI0.LPCB.EC0.TJMX == One))
                {
                    Return (0x0E94)
                }
                ElseIf ((\_SB.PCI0.LPCB.EC0.TJMX == 0x02))
                {
                    Return (0x0E94)
                }
                ElseIf ((\_SB.PCI0.LPCB.EC0.TJMX == 0x03))
                {
                    Return (0x0E94)
                }
                ElseIf ((\_SB.PCI0.LPCB.EC0.TJMX == 0x04))
                {
                    Return (0x0E94)
                }
                Else
                {
                    Return (0x0E94)
                }
            }

            Name (_PSL, Package (0x01)  // _PSL: Passive List
            {
                \_PR.CPU0
            })
            Name (_TSP, 0x28)  // _TSP: Thermal Sampling Period
            Name (_TC1, 0x02)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x03)  // _TC2: Thermal Constant 2
        }
    }

    Scope (_SB.PCI0)
    {
        Name (PNLT, Buffer (0x0B)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00                                 // ...
        })
        Name (PNL7, Buffer (0x0A)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00                                       // ..
        })
        Method (CRBL, 0, NotSerialized)
        {
            If ((OSYS >= 0x07DC))
            {
                PNLT [Zero] = BCL0 /* \_SB_.BCL0 */
                PNLT [One] = BCL1 /* \_SB_.BCL1 */
                PNLT [0x02] = BCL2 /* \_SB_.BCL2 */
                PNLT [0x03] = BCL3 /* \_SB_.BCL3 */
                PNLT [0x04] = BCL4 /* \_SB_.BCL4 */
                PNLT [0x05] = BCL5 /* \_SB_.BCL5 */
                PNLT [0x06] = BCL6 /* \_SB_.BCL6 */
                PNLT [0x07] = BCL7 /* \_SB_.BCL7 */
                PNLT [0x08] = BCL8 /* \_SB_.BCL8 */
                PNLT [0x09] = BCL9 /* \_SB_.BCL9 */
                ^GFX0.BLM0 = (BCL0 | 0x8A00)
                ^GFX0.BLM1 = (BCL1 | 0x9400)
                ^GFX0.BLM2 = (BCL2 | 0x9E00)
                ^GFX0.BLM3 = (BCL3 | 0xA800)
                ^GFX0.BLM4 = (BCL4 | 0xB200)
                ^GFX0.BLM5 = (BCL5 | 0xBC00)
                ^GFX0.BLM6 = (BCL6 | 0xC600)
                ^GFX0.BLM7 = (BCL7 | 0xD000)
                ^GFX0.BLM8 = (BCL8 | 0xDA00)
                ^GFX0.BLM9 = (BCL9 | 0xE400)
                ^GFX0.BLMX = Zero
            }
            Else
            {
                PNL7 [Zero] = BCL0 /* \_SB_.BCL0 */
                PNL7 [One] = BCL1 /* \_SB_.BCL1 */
                PNL7 [0x02] = BCL2 /* \_SB_.BCL2 */
                PNL7 [0x03] = BCL3 /* \_SB_.BCL3 */
                PNL7 [0x04] = BCL4 /* \_SB_.BCL4 */
                PNL7 [0x05] = BCL5 /* \_SB_.BCL5 */
                PNL7 [0x06] = BCL6 /* \_SB_.BCL6 */
                PNL7 [0x07] = BCL7 /* \_SB_.BCL7 */
                PNL7 [0x08] = BCL8 /* \_SB_.BCL8 */
                PNL7 [0x09] = BCL9 /* \_SB_.BCL9 */
                ^GFX0.BLM0 = (BCL0 | 0x8A00)
                ^GFX0.BLM1 = (BCL1 | 0x9400)
                ^GFX0.BLM2 = (BCL2 | 0x9E00)
                ^GFX0.BLM3 = (BCL3 | 0xA800)
                ^GFX0.BLM4 = (BCL4 | 0xB200)
                ^GFX0.BLM5 = (BCL5 | 0xBC00)
                ^GFX0.BLM6 = (BCL6 | 0xC600)
                ^GFX0.BLM7 = (BCL7 | 0xD000)
                ^GFX0.BLM8 = (BCL8 | 0xDA00)
                ^GFX0.BLM9 = (BCL9 | 0xE400)
                ^GFX0.BLMX = Zero
            }
        }
    }

    Scope (_SB)
    {
        OperationRegion (EXCO, SystemIO, 0x72, 0x02)
        Field (EXCO, ByteAcc, NoLock, Preserve)
        {
            INDX,   8, 
            DATA,   8
        }

        IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
        {
            Offset (0x11), 
            DRAM,   8, 
            Offset (0x87), 
            RDWL,   1, 
            RDBT,   1, 
            RD3G,   1, 
            TPDS,   1, 
            PTWL,   1, 
            PTBT,   1, 
            PT3G,   1, 
            RDTS,   1, 
            Offset (0xEE), 
            CSBM,   8, 
            Offset (0xF3), 
            TCEX,   8, 
            Offset (0xFF), 
            Offset (0x100)
        }
    }

    Scope (_SB)
    {
        OperationRegion (GPM2, SystemMemory, 0xD0C50518, 0x04)
        Field (GPM2, DWordAcc, Lock, Preserve)
        {
                ,   1, 
            GSSE,   1
        }

        Device (A_CC)
        {
            Name (_HID, "SMO8820")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((GSSE == One))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (_UID, One)  // _UID: Unique ID
            Name (BUF2, ResourceTemplate ()
            {
                Interrupt (ResourceConsumer, Edge, ActiveLow, Exclusive, ,, )
                {
                    0x00000069,
                }
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                Return (BUF2) /* \_SB_.A_CC.BUF2 */
            }

            Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
            {
                Return (BUF2) /* \_SB_.A_CC.BUF2 */
            }
        }
    }

    Scope (_SB.PCI0.RP06.PXSX)
    {
        Name (WRDX, Package (0x03)
        {
            Zero, 
            Package (0x02)
            {
                0x80000000, 
                0x8000
            }, 

            Package (0x02)
            {
                0x80000000, 
                0x8000
            }
        })
        Method (WRDD, 0, Serialized)
        {
            DerefOf (WRDX [One]) [Zero] = 0x07
            If ((SPRG == 0x0D))
            {
                DerefOf (WRDX [One]) [One] = 0x4944
            }
            Else
            {
                DerefOf (WRDX [One]) [One] = 0x4150
            }

            DerefOf (WRDX [0x02]) [Zero] = 0x07
            If ((SPRG == 0x0D))
            {
                DerefOf (WRDX [0x02]) [One] = 0x4944
            }
            Else
            {
                DerefOf (WRDX [0x02]) [One] = 0x4150
            }

            Return (WRDX) /* \_SB_.PCI0.RP06.PXSX.WRDX */
        }
    }

    If ((ECR1 == One))
    {
        Scope (_SB.PCI0)
        {
            Name (PCIG, ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */)
            Method (PCID, 4, Serialized)
            {
                If ((Arg0 == PCIG))
                {
                    If ((Arg1 >= 0x03))
                    {
                        If ((Arg2 == Zero))
                        {
                            Return (Buffer (0x02)
                            {
                                 0x01, 0x03                                       // ..
                            })
                        }

                        If ((Arg2 == 0x08))
                        {
                            Return (One)
                        }

                        If ((Arg2 == 0x09))
                        {
                            Return (Package (0x05)
                            {
                                0xC350, 
                                Ones, 
                                Ones, 
                                0xC350, 
                                Ones
                            })
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Method (PCIC, 1, Serialized)
        {
            If ((ECR1 == One))
            {
                If ((Arg0 == PCIG))
                {
                    Return (One)
                }
            }

            Return (Zero)
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Method (PTS, 1, NotSerialized)
    {
        If (Arg0){}
    }

    Method (WAK, 1, NotSerialized)
    {
    }
}



FACP
----
[000h 0000 004h]                   Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004 004h]                Table Length : 00000114
[008h 0008 001h]                    Revision : 06
[009h 0009 001h]                    Checksum : EC
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000003
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]                FACS Address : 7AFAC000
[028h 0040 004h]                DSDT Address : 7AFE1000
[02Ch 0044 001h]                       Model : 01
[02Dh 0045 001h]                  PM Profile : 02 [Mobile]
[02Eh 0046 002h]               SCI Interrupt : 0009
[030h 0048 004h]            SMI Command Port : 000000B2
[034h 0052 001h]           ACPI Enable Value : A0
[035h 0053 001h]          ACPI Disable Value : A1
[036h 0054 001h]              S4BIOS Command : 00
[037h 0055 001h]             P-State Control : 00
[038h 0056 004h]    PM1A Event Block Address : 00000400
[03Ch 0060 004h]    PM1B Event Block Address : 00000000
[040h 0064 004h]  PM1A Control Block Address : 00000404
[044h 0068 004h]  PM1B Control Block Address : 00000000
[048h 0072 004h]   PM2 Control Block Address : 00000450
[04Ch 0076 004h]      PM Timer Block Address : 00000408
[050h 0080 004h]          GPE0 Block Address : 00000420
[054h 0084 004h]          GPE1 Block Address : 00000000
[058h 0088 001h]      PM1 Event Block Length : 04
[059h 0089 001h]    PM1 Control Block Length : 02
[05Ah 0090 001h]    PM2 Control Block Length : 01
[05Bh 0091 001h]       PM Timer Block Length : 04
[05Ch 0092 001h]           GPE0 Block Length : 20
[05Dh 0093 001h]           GPE1 Block Length : 00
[05Eh 0094 001h]            GPE1 Base Offset : 00
[05Fh 0095 001h]                _CST Support : 00
[060h 0096 002h]                  C2 Latency : 0032
[062h 0098 002h]                  C3 Latency : 0096
[064h 0100 002h]              CPU Cache Size : 0400
[066h 0102 002h]          Cache Flush Stride : 0010
[068h 0104 001h]           Duty Cycle Offset : 01
[069h 0105 001h]            Duty Cycle Width : 03
[06Ah 0106 001h]         RTC Day Alarm Index : 0D
[06Bh 0107 001h]       RTC Month Alarm Index : 00
[06Ch 0108 001h]           RTC Century Index : 32
[06Dh 0109 002h]  Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111 001h]                    Reserved : 00
[070h 0112 004h]       Flags (decoded below) : 000004B1
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 0
                  C2 works on MP system (V1) : 0
            Control Method Power Button (V1) : 1
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 0
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 0
                     Use Platform Timer (V4) : 0
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116 00Ch]              Reset Register : [Generic Address Structure]
[074h 0116 001h]                    Space ID : 01 [SystemIO]
[075h 0117 001h]                   Bit Width : 08
[076h 0118 001h]                  Bit Offset : 00
[077h 0119 001h]        Encoded Access Width : 01 [Byte Access:8]
[078h 0120 008h]                     Address : 00000000000000B2

[080h 0128 001h]        Value to cause reset : FB
[081h 0129 002h]   ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131 001h]         FADT Minor Revision : 00
[084h 0132 008h]                FACS Address : 000000007AFAC000
[08Ch 0140 008h]                DSDT Address : 000000007AFE1000
[094h 0148 00Ch]            PM1A Event Block : [Generic Address Structure]
[094h 0148 001h]                    Space ID : 01 [SystemIO]
[095h 0149 001h]                   Bit Width : 20
[096h 0150 001h]                  Bit Offset : 00
[097h 0151 001h]        Encoded Access Width : 03 [DWord Access:32]
[098h 0152 008h]                     Address : 0000000000000400

[0A0h 0160 00Ch]            PM1B Event Block : [Generic Address Structure]
[0A0h 0160 001h]                    Space ID : 00 [SystemMemory]
[0A1h 0161 001h]                   Bit Width : 00
[0A2h 0162 001h]                  Bit Offset : 00
[0A3h 0163 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0A4h 0164 008h]                     Address : 0000000000000000

[0ACh 0172 00Ch]          PM1A Control Block : [Generic Address Structure]
[0ACh 0172 001h]                    Space ID : 01 [SystemIO]
[0ADh 0173 001h]                   Bit Width : 10
[0AEh 0174 001h]                  Bit Offset : 00
[0AFh 0175 001h]        Encoded Access Width : 02 [Word Access:16]
[0B0h 0176 008h]                     Address : 0000000000000404

[0B8h 0184 00Ch]          PM1B Control Block : [Generic Address Structure]
[0B8h 0184 001h]                    Space ID : 00 [SystemMemory]
[0B9h 0185 001h]                   Bit Width : 00
[0BAh 0186 001h]                  Bit Offset : 00
[0BBh 0187 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0BCh 0188 008h]                     Address : 0000000000000000

[0C4h 0196 00Ch]           PM2 Control Block : [Generic Address Structure]
[0C4h 0196 001h]                    Space ID : 01 [SystemIO]
[0C5h 0197 001h]                   Bit Width : 08
[0C6h 0198 001h]                  Bit Offset : 00
[0C7h 0199 001h]        Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200 008h]                     Address : 0000000000000450

[0D0h 0208 00Ch]              PM Timer Block : [Generic Address Structure]
[0D0h 0208 001h]                    Space ID : 01 [SystemIO]
[0D1h 0209 001h]                   Bit Width : 20
[0D2h 0210 001h]                  Bit Offset : 00
[0D3h 0211 001h]        Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212 008h]                     Address : 0000000000000408

[0DCh 0220 00Ch]                  GPE0 Block : [Generic Address Structure]
[0DCh 0220 001h]                    Space ID : 01 [SystemIO]
[0DDh 0221 001h]                   Bit Width : 00
[0DEh 0222 001h]                  Bit Offset : 00
[0DFh 0223 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0E0h 0224 008h]                     Address : 0000000000000420

[0E8h 0232 00Ch]                  GPE1 Block : [Generic Address Structure]
[0E8h 0232 001h]                    Space ID : 00 [SystemMemory]
[0E9h 0233 001h]                   Bit Width : 00
[0EAh 0234 001h]                  Bit Offset : 00
[0EBh 0235 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[0ECh 0236 008h]                     Address : 0000000000000000


[0F4h 0244 00Ch]      Sleep Control Register : [Generic Address Structure]
[0F4h 0244 001h]                    Space ID : 01 [SystemIO]
[0F5h 0245 001h]                   Bit Width : 08
[0F6h 0246 001h]                  Bit Offset : 00
[0F7h 0247 001h]        Encoded Access Width : 01 [Byte Access:8]
[0F8h 0248 008h]                     Address : 0000000000000405

[100h 0256 00Ch]       Sleep Status Register : [Generic Address Structure]
[100h 0256 001h]                    Space ID : 01 [SystemIO]
[101h 0257 001h]                   Bit Width : 08
[102h 0258 001h]                  Bit Offset : 00
[103h 0259 001h]        Encoded Access Width : 01 [Byte Access:8]
[104h 0260 008h]                     Address : 0000000000000401

[10Ch 0268 008h]               Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 EC 41 43 52 53 59 53  // FACP......ACRSYS
    0010: 41 43 52 50 52 44 43 54 03 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 00 C0 FA 7A 00 10 FE 7A 01 02 09 00  // .......z...z....
    0030: B2 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 50 04 00 00 08 04 00 00  // ........P.......
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 20 00 00 00  //  ........... ...
    0060: 32 00 96 00 00 04 10 00 01 03 0D 00 32 13 00 00  // 2...........2...
    0070: B1 04 00 00 01 08 00 01 B2 00 00 00 00 00 00 00  // ................
    0080: FB 00 00 00 00 C0 FA 7A 00 00 00 00 00 10 FE 7A  // .......z.......z
    0090: 00 00 00 00 01 20 00 03 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 50 04 00 00 00 00 00 00  // ........P.......
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 00 00 00  // . ..............
    00E0: 20 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00  //  ...............
    00F0: 00 00 00 00 01 08 00 01 05 04 00 00 00 00 00 00  // ................
    0100: 01 08 00 01 01 04 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000 004h]                   Signature : "FACS"
[004h 0004 004h]                      Length : 00000040
[008h 0008 004h]          Hardware Signature : FBAB94F3
[00Ch 0012 004h]   32 Firmware Waking Vector : 00000000
[010h 0016 004h]                 Global Lock : 00000000
[014h 0020 004h]       Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024 008h]   64 Firmware Waking Vector : 0000000000000000
[020h 0032 001h]                     Version : 02
[021h 0033 003h]                    Reserved : 000000
[024h 0036 004h]   OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 F3 94 AB FB 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000 004h]                   Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 93
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000


[024h 0036 002h]               Subtable Type : 0000
[026h 0038 001h]                      Length : 10
[027h 0039 001h]                    Revision : 01
[028h 0040 004h]                    Reserved : 00000000
[02Ch 0044 008h]    FPDT Boot Record Address : 00000000789BF000

Raw Table Data: Length 52 (0x34)

    0000: 46 50 44 54 34 00 00 00 01 93 41 43 52 53 59 53  // FPDT4.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 02 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 00 00 10 01 00 00 00 00 00 F0 9B 78  // ...............x
    0030: 00 00 00 00                                      // ....


HPET
----
[000h 0000 004h]                   Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004 004h]                Table Length : 00000038
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 63
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000003
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]           Hardware Block ID : 8086A701

[028h 0040 00Ch]        Timer Block Register : [Generic Address Structure]
[028h 0040 001h]                    Space ID : 00 [SystemMemory]
[029h 0041 001h]                   Bit Width : 40
[02Ah 0042 001h]                  Bit Offset : 00
[02Bh 0043 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044 008h]                     Address : 00000000FED00000

[034h 0052 001h]             Sequence Number : 00
[035h 0053 002h]         Minimum Clock Ticks : 0080
[037h 0055 001h]       Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 63 41 43 52 53 59 53  // HPET8....cACRSYS
    0010: 41 43 52 50 52 44 43 54 03 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 01 A7 86 80 00 40 00 00 00 00 D0 FE  // .........@......
    0030: 00 00 00 00 00 80 00 00                          // ........


LPIT
----
[000h 0000 004h]                   Signature : "LPIT"    [Low Power Idle Table]
[004h 0004 004h]                Table Length : 0000005C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : FA
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000003
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]               Subtable Type : 00000000 [Native C-state Idle Structure]
[028h 0040 004h]                      Length : 00000038
[02Ch 0044 002h]                   Unique ID : 0000
[02Eh 0046 002h]                    Reserved : 0000
[030h 0048 004h]       Flags (decoded below) : 00000000
                              State Disabled : 0
                                  No Counter : 0

[034h 0052 00Ch]               Entry Trigger : [Generic Address Structure]
[034h 0052 001h]                    Space ID : 7F [FunctionalFixedHW]
[035h 0053 001h]                   Bit Width : 01
[036h 0054 001h]                  Bit Offset : 02
[037h 0055 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[038h 0056 008h]                     Address : 0000000000000060

[040h 0064 004h]                   Residency : 00007530
[044h 0068 004h]                     Latency : 00000BB8
[048h 0072 00Ch]           Residency Counter : [Generic Address Structure]
[048h 0072 001h]                    Space ID : 7F [FunctionalFixedHW]
[049h 0073 001h]                   Bit Width : 40
[04Ah 0074 001h]                  Bit Offset : 00
[04Bh 0075 001h]        Encoded Access Width : 00 [Undefined/Legacy]
[04Ch 0076 008h]                     Address : 0000000000000632

[054h 0084 008h]           Counter Frequency : 0000000000000000


Raw Table Data: Length 92 (0x5C)

    0000: 4C 50 49 54 5C 00 00 00 01 FA 41 43 52 53 59 53  // LPIT\.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 03 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 00 00 00 00 38 00 00 00 00 00 00 00  // ........8.......
    0030: 00 00 00 00 7F 01 02 00 60 00 00 00 00 00 00 00  // ........`.......
    0040: 30 75 00 00 B8 0B 00 00 7F 40 00 00 32 06 00 00  // 0u.......@..2...
    0050: 00 00 00 00 00 00 00 00 00 00 00 00              // ............


MCFG
----
[000h 0000 004h]                   Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004 004h]                Table Length : 0000003C
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 90
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000003
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 008h]                    Reserved : 0000000000000000

[02Ch 0044 008h]                Base Address : 00000000E0000000
[034h 0052 002h]        Segment Group Number : 0000
[036h 0054 001h]            Start Bus Number : 00
[037h 0055 001h]              End Bus Number : 3F
[038h 0056 004h]                    Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 90 41 43 52 53 59 53  // MCFG<.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 03 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 E0  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


MSDM
----
[000h 0000 004h]                   Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004 004h]                Table Length : 00000055
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 97
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 031h] Software Licensing Structure : 4D 53 44 4D 55 00 00 00 03 97 41 43 52 53 59 53 /* MSDMU.....ACRSYS */\
/* 034h 0052  16 */                            41 43 52 50 52 44 43 54 01 00 00 00 31 30 32 35 /* ACRPRDCT....1025 */\
/* 044h 0068  16 */                            00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00 /* ................ */\
/* 054h 0084   1 */                            00                                              /* . */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 97 41 43 52 53 59 53  // MSDMU.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 01 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 4E 34 59 46 39 2D 58 4B  // ........N4YF9-XK
    0040: 59 52 44 2D 42 43 39 47 47 2D 58 4B 57 44 51 2D  // YRD-BC9GG-XKWDQ-
    0050: 47 38 34 46 58                                   // G84FX


NHLT
----
[000h 0000 004h]                   Signature : "NHLT"    [Non HD Audio Link Table]
[004h 0004 004h]                Table Length : 0000002D
[008h 0008 001h]                    Revision : 00
[009h 0009 001h]                    Checksum : 6B
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

    /* Main table */
[024h 0036 001h]              Endpoint Count : 00

/* Terminating specific config (not part of NHLT spec) */
[025h 0037 004h]           Capabilities Size : 00000004
[029h 0041 004h]                Capabilities : DE AD BE EF                                     /* .... */\

Raw Table Data: Length 45 (0x2D)

    0000: 4E 48 4C 54 2D 00 00 00 00 6B 41 43 52 53 59 53  // NHLT-....kACRSYS
    0010: 41 43 52 50 52 44 43 54 02 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 00 04 00 00 00 DE AD BE EF           // .............


SSDT1
-----
DefinitionBlock ("", "SSDT", 2, "ACRSYS", "ACRPRDCT", 0x00003000)
{
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (NLPC, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU1)
    {
        Name (_TPC, Zero)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (!(PDC0 & 0x04))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFD, 
                        NLPC
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    One, 
                    0xFC, 
                    One
                }
            })
        }
    }

    Scope (\_PR.CPU2)
    {
        Name (_TPC, Zero)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (!(PDC0 & 0x04))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFD, 
                        NLPC
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    0x02, 
                    0xFC, 
                    One
                }
            })
        }
    }

    Scope (\_PR.CPU3)
    {
        Name (_TPC, Zero)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            Return (\_PR.CPU0._PTC) /* External reference */
        }

        Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
        {
            Return (\_PR.CPU0._TSS) /* External reference */
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (!(PDC0 & 0x04))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFD, 
                        NLPC
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    0x03, 
                    0xFC, 
                    One
                }
            })
        }
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApCst", 0x00003000)
{
    External (_PR_.CPU0._CST, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            Return (\_PR.CPU0._CST) /* External reference */
        }
    }
}



SSDT11
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "Cpu0Cst", 0x00003001)
{
    External (_PR_.CPU0, DeviceObj)
    External (MWEN, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Method (_CST, 0, NotSerialized)  // _CST: C-States
        {
            If ((MWEN == Zero))
            {
                Return (Package (0x04)
                {
                    0x03, 
                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        One, 
                        One, 
                        0x03E8
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000415, // Address
                                ,)
                        }, 

                        0x02, 
                        0x32, 
                        0x0A
                    }, 

                    Package (0x04)
                    {
                        ResourceTemplate ()
                        {
                            Register (SystemIO, 
                                0x08,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000419, // Address
                                ,)
                        }, 

                        0x03, 
                        0x96, 
                        0x0A
                    }
                })
            }

            Return (Package (0x04)
            {
                0x03, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000001, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    One, 
                    One, 
                    0x03E8
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000021, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x02, 
                    0x32, 
                    0x0A
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000060, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    0x03, 
                    0x96, 
                    0x0A
                }
            })
        }
    }
}



SSDT12
------
DefinitionBlock ("", "SSDT", 2, "PmRef", "ApIst", 0x00003000)
{
    External (_PR_.CPU0._PCT, IntObj)
    External (_PR_.CPU0._PPC, IntObj)
    External (_PR_.CPU0._PSD, IntObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)

    Scope (\_PR.CPU1)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (\_PR.CPU0._PPC) /* External reference */
        }

        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            Return (\_PR.CPU0._PCT) /* External reference */
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            Return (\_PR.CPU0._PSS) /* External reference */
        }

        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (\_PR.CPU0._PSD) /* External reference */
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 1, "ACRSYS", "ACRPRDCT", 0x00001000)
{


SSDT3
-----
DefinitionBlock ("", "SSDT", 2, "ACRSYS", "ACRPRDCT", 0x00003000)
{
    /*
     * iASL Warning: There were 3 external control methods found during
     * disassembly, but only 0 were resolved (3 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_SB_.BLVL, UnknownObj)
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.CRBL, MethodObj)    // Warning: Unknown method, guessing 0 arguments
    External (_SB_.PEPD, UnknownObj)
    External (ASLB, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (BRTL, IntObj)
    External (CSTE, UnknownObj)
    External (DHPD, UnknownObj)
    External (DID1, IntObj)
    External (DID2, IntObj)
    External (DID3, IntObj)
    External (DID4, IntObj)
    External (DID5, IntObj)
    External (DID6, IntObj)
    External (DID7, IntObj)
    External (DID8, IntObj)
    External (DID9, IntObj)
    External (DIDA, IntObj)
    External (DIDB, IntObj)
    External (DIDC, IntObj)
    External (DIDD, IntObj)
    External (DIDE, IntObj)
    External (DIDF, IntObj)
    External (DIDX, UnknownObj)
    External (DSEN, UnknownObj)
    External (EDPV, UnknownObj)
    External (GSMI, UnknownObj)
    External (GUAM, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (HVCO, UnknownObj)
    External (IBIA, UnknownObj)
    External (IBTT, UnknownObj)
    External (IDMS, UnknownObj)
    External (IPAT, UnknownObj)
    External (IPSC, IntObj)
    External (IPUD, UnknownObj)
    External (LIDS, UnknownObj)
    External (NDID, UnknownObj)
    External (NSTE, IntObj)
    External (OSSL, UnknownObj)
    External (OSYS, UnknownObj)
    External (PNSL, UnknownObj)
    External (S0ID, UnknownObj)

    Scope (\_SB.PCI0)
    {
        Device (GFX0)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                \_SB.PCI0.CRBL ()
                \_SB.BLVL = \_SB.PCI0.GFX0.CBLV
                If ((OSYS < 0x07D6))
                {
                    \_SB.BLVL = 0x64
                }
            }

            Name (_S0W, 0x03)  // _S0W: S0 Device Wake State
            Method (_DEP, 0, NotSerialized)  // _DEP: Dependencies
            {
                Return (Package (0x01)
                {
                    \_SB.PEPD
                })
            }

            Name (CBUF, ResourceTemplate ()
            {
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0025
                    }
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x0009
                    }
                GpioIo (Exclusive, PullDefault, 0x0000, 0x0000, IoRestrictionOutputOnly,
                    "\\_SB.GPO1", 0x00, ResourceConsumer, ,
                    )
                    {   // Pin list
                        0x000A
                    }
            })
            Name (DBUF, Buffer (0x02)
            {
                 0x79, 0x00                                       // y.
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                If (((PNSL != Zero) && (PNSL != 0x04)))
                {
                    Return (CBUF) /* \_SB_.PCI0.GFX0.CBUF */
                }
                Else
                {
                    Return (DBUF) /* \_SB_.PCI0.GFX0.DBUF */
                }
            }

            Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
            {
                DSEN = (Arg0 & 0x07)
            }

            Method (_DOD, 0, Serialized)  // _DOD: Display Output Devices
            {
                If ((IPUD == One))
                {
                    NDID = One
                }
                Else
                {
                    NDID = Zero
                }

                If ((DIDL != Zero))
                {
                    DID1 = SDDL (DIDL)
                }

                If ((DDL2 != Zero))
                {
                    DID2 = SDDL (DDL2)
                }

                If ((DDL3 != Zero))
                {
                    DID3 = SDDL (DDL3)
                }

                If ((DDL4 != Zero))
                {
                    DID4 = SDDL (DDL4)
                }

                If ((DDL5 != Zero))
                {
                    DID5 = SDDL (DDL5)
                }

                If ((DDL6 != Zero))
                {
                    DID6 = SDDL (DDL6)
                }

                If ((DDL7 != Zero))
                {
                    DID7 = SDDL (DDL7)
                }

                If ((DDL8 != Zero))
                {
                    DID8 = SDDL (DDL8)
                }

                If ((DDL9 != Zero))
                {
                    DID9 = SDDL (DDL9)
                }

                If ((DD10 != Zero))
                {
                    DIDA = SDDL (DD10)
                }

                If ((DD11 != Zero))
                {
                    DIDB = SDDL (DD11)
                }

                If ((DD12 != Zero))
                {
                    DIDC = SDDL (DD12)
                }

                If ((DD13 != Zero))
                {
                    DIDD = SDDL (DD13)
                }

                If ((DD14 != Zero))
                {
                    DIDE = SDDL (DD14)
                }

                If ((DD15 != Zero))
                {
                    DIDF = SDDL (DD15)
                }

                If ((NDID == One))
                {
                    Name (TMP1, Package (0x01)
                    {
                        0xFFFFFFFF
                    })
                    If ((IPUD == One))
                    {
                        TMP1 [Zero] = 0x000234D7
                    }
                    Else
                    {
                        TMP1 [Zero] = (0x00010000 | DID1)
                    }

                    Return (TMP1) /* \_SB_.PCI0.GFX0._DOD.TMP1 */
                }

                If ((NDID == 0x02))
                {
                    Name (TMP2, Package (0x02)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMP2 [Zero] = (0x00010000 | DID1)
                    If ((IPUD == One))
                    {
                        TMP2 [One] = 0x000234D7
                    }
                    Else
                    {
                        TMP2 [One] = (0x00010000 | DID2)
                    }

                    Return (TMP2) /* \_SB_.PCI0.GFX0._DOD.TMP2 */
                }

                If ((NDID == 0x03))
                {
                    Name (TMP3, Package (0x03)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMP3 [Zero] = (0x00010000 | DID1)
                    TMP3 [One] = (0x00010000 | DID2)
                    If ((IPUD == One))
                    {
                        TMP3 [0x02] = 0x000234D7
                    }
                    Else
                    {
                        TMP3 [0x02] = (0x00010000 | DID3)
                    }

                    Return (TMP3) /* \_SB_.PCI0.GFX0._DOD.TMP3 */
                }

                If ((NDID == 0x04))
                {
                    Name (TMP4, Package (0x04)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMP4 [Zero] = (0x00010000 | DID1)
                    TMP4 [One] = (0x00010000 | DID2)
                    TMP4 [0x02] = (0x00010000 | DID3)
                    If ((IPUD == One))
                    {
                        TMP4 [0x03] = 0x000234D7
                    }
                    Else
                    {
                        TMP4 [0x03] = (0x00010000 | DID4)
                    }

                    Return (TMP4) /* \_SB_.PCI0.GFX0._DOD.TMP4 */
                }

                If ((NDID == 0x05))
                {
                    Name (TMP5, Package (0x05)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMP5 [Zero] = (0x00010000 | DID1)
                    TMP5 [One] = (0x00010000 | DID2)
                    TMP5 [0x02] = (0x00010000 | DID3)
                    TMP5 [0x03] = (0x00010000 | DID4)
                    If ((IPUD == One))
                    {
                        TMP5 [0x04] = 0x000234D7
                    }
                    Else
                    {
                        TMP5 [0x04] = (0x00010000 | DID5)
                    }

                    Return (TMP5) /* \_SB_.PCI0.GFX0._DOD.TMP5 */
                }

                If ((NDID == 0x06))
                {
                    Name (TMP6, Package (0x06)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMP6 [Zero] = (0x00010000 | DID1)
                    TMP6 [One] = (0x00010000 | DID2)
                    TMP6 [0x02] = (0x00010000 | DID3)
                    TMP6 [0x03] = (0x00010000 | DID4)
                    TMP6 [0x04] = (0x00010000 | DID5)
                    If ((IPUD == One))
                    {
                        TMP6 [0x05] = 0x000234D7
                    }
                    Else
                    {
                        TMP6 [0x05] = (0x00010000 | DID6)
                    }

                    Return (TMP6) /* \_SB_.PCI0.GFX0._DOD.TMP6 */
                }

                If ((NDID == 0x07))
                {
                    Name (TMP7, Package (0x07)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMP7 [Zero] = (0x00010000 | DID1)
                    TMP7 [One] = (0x00010000 | DID2)
                    TMP7 [0x02] = (0x00010000 | DID3)
                    TMP7 [0x03] = (0x00010000 | DID4)
                    TMP7 [0x04] = (0x00010000 | DID5)
                    TMP7 [0x05] = (0x00010000 | DID6)
                    If ((IPUD == One))
                    {
                        TMP7 [0x06] = 0x000234D7
                    }
                    Else
                    {
                        TMP7 [0x06] = (0x00010000 | DID7)
                    }

                    Return (TMP7) /* \_SB_.PCI0.GFX0._DOD.TMP7 */
                }

                If ((NDID == 0x08))
                {
                    Name (TMP8, Package (0x08)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMP8 [Zero] = (0x00010000 | DID1)
                    TMP8 [One] = (0x00010000 | DID2)
                    TMP8 [0x02] = (0x00010000 | DID3)
                    TMP8 [0x03] = (0x00010000 | DID4)
                    TMP8 [0x04] = (0x00010000 | DID5)
                    TMP8 [0x05] = (0x00010000 | DID6)
                    TMP8 [0x06] = (0x00010000 | DID7)
                    If ((IPUD == One))
                    {
                        TMP8 [0x07] = 0x000234D7
                    }
                    Else
                    {
                        TMP8 [0x07] = (0x00010000 | DID8)
                    }

                    Return (TMP8) /* \_SB_.PCI0.GFX0._DOD.TMP8 */
                }

                If ((NDID == 0x09))
                {
                    Name (TMP9, Package (0x09)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMP9 [Zero] = (0x00010000 | DID1)
                    TMP9 [One] = (0x00010000 | DID2)
                    TMP9 [0x02] = (0x00010000 | DID3)
                    TMP9 [0x03] = (0x00010000 | DID4)
                    TMP9 [0x04] = (0x00010000 | DID5)
                    TMP9 [0x05] = (0x00010000 | DID6)
                    TMP9 [0x06] = (0x00010000 | DID7)
                    TMP9 [0x07] = (0x00010000 | DID8)
                    If ((IPUD == One))
                    {
                        TMP9 [0x08] = 0x000234D7
                    }
                    Else
                    {
                        TMP9 [0x08] = (0x00010000 | DID9)
                    }

                    Return (TMP9) /* \_SB_.PCI0.GFX0._DOD.TMP9 */
                }

                If ((NDID == 0x0A))
                {
                    Name (TMPA, Package (0x0A)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMPA [Zero] = (0x00010000 | DID1)
                    TMPA [One] = (0x00010000 | DID2)
                    TMPA [0x02] = (0x00010000 | DID3)
                    TMPA [0x03] = (0x00010000 | DID4)
                    TMPA [0x04] = (0x00010000 | DID5)
                    TMPA [0x05] = (0x00010000 | DID6)
                    TMPA [0x06] = (0x00010000 | DID7)
                    TMPA [0x07] = (0x00010000 | DID8)
                    TMPA [0x08] = (0x00010000 | DID9)
                    If ((IPUD == One))
                    {
                        TMPA [0x09] = 0x000234D7
                    }
                    Else
                    {
                        TMPA [0x09] = (0x00010000 | DIDA)
                    }

                    Return (TMPA) /* \_SB_.PCI0.GFX0._DOD.TMPA */
                }

                If ((NDID == 0x0B))
                {
                    Name (TMPB, Package (0x0B)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMPB [Zero] = (0x00010000 | DID1)
                    TMPB [One] = (0x00010000 | DID2)
                    TMPB [0x02] = (0x00010000 | DID3)
                    TMPB [0x03] = (0x00010000 | DID4)
                    TMPB [0x04] = (0x00010000 | DID5)
                    TMPB [0x05] = (0x00010000 | DID6)
                    TMPB [0x06] = (0x00010000 | DID7)
                    TMPB [0x07] = (0x00010000 | DID8)
                    TMPB [0x08] = (0x00010000 | DID9)
                    TMPB [0x09] = (0x00010000 | DIDA)
                    If ((IPUD == One))
                    {
                        TMPB [0x0A] = 0x000234D7
                    }
                    Else
                    {
                        TMPB [0x0A] = (0x00010000 | DIDB)
                    }

                    Return (TMPB) /* \_SB_.PCI0.GFX0._DOD.TMPB */
                }

                If ((NDID == 0x0C))
                {
                    Name (TMPC, Package (0x0C)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMPC [Zero] = (0x00010000 | DID1)
                    TMPC [One] = (0x00010000 | DID2)
                    TMPC [0x02] = (0x00010000 | DID3)
                    TMPC [0x03] = (0x00010000 | DID4)
                    TMPC [0x04] = (0x00010000 | DID5)
                    TMPC [0x05] = (0x00010000 | DID6)
                    TMPC [0x06] = (0x00010000 | DID7)
                    TMPC [0x07] = (0x00010000 | DID8)
                    TMPC [0x08] = (0x00010000 | DID9)
                    TMPC [0x09] = (0x00010000 | DIDA)
                    TMPC [0x0A] = (0x00010000 | DIDB)
                    If ((IPUD == One))
                    {
                        TMPC [0x0B] = 0x000234D7
                    }
                    Else
                    {
                        TMPC [0x0B] = (0x00010000 | DIDC)
                    }

                    Return (TMPC) /* \_SB_.PCI0.GFX0._DOD.TMPC */
                }

                If ((NDID == 0x0D))
                {
                    Name (TMPD, Package (0x0D)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMPD [Zero] = (0x00010000 | DID1)
                    TMPD [One] = (0x00010000 | DID2)
                    TMPD [0x02] = (0x00010000 | DID3)
                    TMPD [0x03] = (0x00010000 | DID4)
                    TMPD [0x04] = (0x00010000 | DID5)
                    TMPD [0x05] = (0x00010000 | DID6)
                    TMPD [0x06] = (0x00010000 | DID7)
                    TMPD [0x07] = (0x00010000 | DID8)
                    TMPD [0x08] = (0x00010000 | DID9)
                    TMPD [0x09] = (0x00010000 | DIDA)
                    TMPD [0x0A] = (0x00010000 | DIDB)
                    TMPD [0x0B] = (0x00010000 | DIDC)
                    If ((IPUD == One))
                    {
                        TMPD [0x0C] = 0x000234D7
                    }
                    Else
                    {
                        TMPD [0x0C] = (0x00010000 | DIDD)
                    }

                    Return (TMPD) /* \_SB_.PCI0.GFX0._DOD.TMPD */
                }

                If ((NDID == 0x0E))
                {
                    Name (TMPE, Package (0x0E)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMPE [Zero] = (0x00010000 | DID1)
                    TMPE [One] = (0x00010000 | DID2)
                    TMPE [0x02] = (0x00010000 | DID3)
                    TMPE [0x03] = (0x00010000 | DID4)
                    TMPE [0x04] = (0x00010000 | DID5)
                    TMPE [0x05] = (0x00010000 | DID6)
                    TMPE [0x06] = (0x00010000 | DID7)
                    TMPE [0x07] = (0x00010000 | DID8)
                    TMPE [0x08] = (0x00010000 | DID9)
                    TMPE [0x09] = (0x00010000 | DIDA)
                    TMPE [0x0A] = (0x00010000 | DIDB)
                    TMPE [0x0B] = (0x00010000 | DIDC)
                    TMPE [0x0C] = (0x00010000 | DIDD)
                    If ((IPUD == One))
                    {
                        TMPE [0x0D] = 0x000234D7
                    }
                    Else
                    {
                        TMPE [0x0D] = (0x00010000 | DIDE)
                    }

                    Return (TMPE) /* \_SB_.PCI0.GFX0._DOD.TMPE */
                }

                If ((NDID == 0x0F))
                {
                    Name (TMPF, Package (0x0F)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMPF [Zero] = (0x00010000 | DID1)
                    TMPF [One] = (0x00010000 | DID2)
                    TMPF [0x02] = (0x00010000 | DID3)
                    TMPF [0x03] = (0x00010000 | DID4)
                    TMPF [0x04] = (0x00010000 | DID5)
                    TMPF [0x05] = (0x00010000 | DID6)
                    TMPF [0x06] = (0x00010000 | DID7)
                    TMPF [0x07] = (0x00010000 | DID8)
                    TMPF [0x08] = (0x00010000 | DID9)
                    TMPF [0x09] = (0x00010000 | DIDA)
                    TMPF [0x0A] = (0x00010000 | DIDB)
                    TMPF [0x0B] = (0x00010000 | DIDC)
                    TMPF [0x0C] = (0x00010000 | DIDD)
                    TMPF [0x0D] = (0x00010000 | DIDE)
                    If ((IPUD == One))
                    {
                        TMPF [0x0E] = 0x000234D7
                    }
                    Else
                    {
                        TMPF [0x0E] = (0x00010000 | DIDF)
                    }

                    Return (TMPF) /* \_SB_.PCI0.GFX0._DOD.TMPF */
                }

                If ((NDID == 0x10))
                {
                    Name (TMPG, Package (0x10)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    TMPG [Zero] = (0x00010000 | DID1)
                    TMPG [One] = (0x00010000 | DID2)
                    TMPG [0x02] = (0x00010000 | DID3)
                    TMPG [0x03] = (0x00010000 | DID4)
                    TMPG [0x04] = (0x00010000 | DID5)
                    TMPG [0x05] = (0x00010000 | DID6)
                    TMPG [0x06] = (0x00010000 | DID7)
                    TMPG [0x07] = (0x00010000 | DID8)
                    TMPG [0x08] = (0x00010000 | DID9)
                    TMPG [0x09] = (0x00010000 | DIDA)
                    TMPG [0x0A] = (0x00010000 | DIDB)
                    TMPG [0x0B] = (0x00010000 | DIDC)
                    TMPG [0x0C] = (0x00010000 | DIDD)
                    TMPG [0x0D] = (0x00010000 | DIDE)
                    TMPG [0x0E] = (0x00010000 | DIDF)
                    TMPG [0x0F] = 0x000234D7
                    Return (TMPG) /* \_SB_.PCI0.GFX0._DOD.TMPG */
                }

                Return (Package (0x01)
                {
                    0x0400
                })
            }

            Device (DD01)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID1) == 0x0400))
                    {
                        EDPV = One
                        DIDX = DID1 /* External reference */
                        Return (One)
                    }

                    If ((DID1 == Zero))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID1))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    Return (CDDS (DID1))
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DID1))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD02)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID2) == 0x0400))
                    {
                        EDPV = 0x02
                        DIDX = DID2 /* External reference */
                        Return (0x02)
                    }

                    If ((DID2 == Zero))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID2))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    Return (CDDS (DID2))
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DID2))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD03)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID3) == 0x0400))
                    {
                        EDPV = 0x03
                        DIDX = DID3 /* External reference */
                        Return (0x03)
                    }

                    If ((DID3 == Zero))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID3))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID3 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID3))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DID3))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD04)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID4) == 0x0400))
                    {
                        EDPV = 0x04
                        DIDX = DID4 /* External reference */
                        Return (0x04)
                    }

                    If ((DID4 == Zero))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID4))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID4 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID4))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DID4))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD05)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID5) == 0x0400))
                    {
                        EDPV = 0x05
                        DIDX = DID5 /* External reference */
                        Return (0x05)
                    }

                    If ((DID5 == Zero))
                    {
                        Return (0x05)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID5))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID5 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID5))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DID5))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD06)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID6) == 0x0400))
                    {
                        EDPV = 0x06
                        DIDX = DID6 /* External reference */
                        Return (0x06)
                    }

                    If ((DID6 == Zero))
                    {
                        Return (0x06)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID6))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID6 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID6))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DID6))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (((Arg0 & 0xC0000000) == 0xC0000000))
                    {
                        CSTE = NSTE /* External reference */
                    }
                }
            }

            Device (DD07)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID7) == 0x0400))
                    {
                        EDPV = 0x07
                        DIDX = DID7 /* External reference */
                        Return (0x07)
                    }

                    If ((DID7 == Zero))
                    {
                        Return (0x07)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID7))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID7 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID7))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DID7))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD08)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID8) == 0x0400))
                    {
                        EDPV = 0x08
                        DIDX = DID8 /* External reference */
                        Return (0x08)
                    }

                    If ((DID8 == Zero))
                    {
                        Return (0x08)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID8))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID8 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID8))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DID8))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD09)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DID9) == 0x0400))
                    {
                        EDPV = 0x09
                        DIDX = DID9 /* External reference */
                        Return (0x09)
                    }

                    If ((DID9 == Zero))
                    {
                        Return (0x09)
                    }
                    Else
                    {
                        Return ((0xFFFF & DID9))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DID9 == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID9))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DID9))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD0A)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDA) == 0x0400))
                    {
                        EDPV = 0x0A
                        DIDX = DIDA /* External reference */
                        Return (0x0A)
                    }

                    If ((DIDA == Zero))
                    {
                        Return (0x0A)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDA))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDA == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DIDA))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DIDA))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD0B)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDB) == 0x0400))
                    {
                        EDPV = 0x0B
                        DIDX = DIDB /* External reference */
                        Return (0x0B)
                    }

                    If ((DIDB == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDB))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDB == Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DIDB))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DIDB))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD0C)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDC) == 0x0400))
                    {
                        EDPV = 0x0C
                        DIDX = DIDC /* External reference */
                        Return (0x0C)
                    }

                    If ((DIDC == Zero))
                    {
                        Return (0x0C)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDC))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDC == Zero))
                    {
                        Return (0x0C)
                    }
                    Else
                    {
                        Return (CDDS (DIDC))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DIDC))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD0D)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDD) == 0x0400))
                    {
                        EDPV = 0x0D
                        DIDX = DIDD /* External reference */
                        Return (0x0D)
                    }

                    If ((DIDD == Zero))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDD))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDD == Zero))
                    {
                        Return (0x0D)
                    }
                    Else
                    {
                        Return (CDDS (DIDD))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DIDD))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD0E)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDE) == 0x0400))
                    {
                        EDPV = 0x0E
                        DIDX = DIDE /* External reference */
                        Return (0x0E)
                    }

                    If ((DIDE == Zero))
                    {
                        Return (0x0E)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDE))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDE == Zero))
                    {
                        Return (0x0E)
                    }
                    Else
                    {
                        Return (CDDS (DIDE))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DIDE))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD0F)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (((0x0F00 & DIDF) == 0x0400))
                    {
                        EDPV = 0x0F
                        DIDX = DIDF /* External reference */
                        Return (0x0F)
                    }

                    If ((DIDF == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDF))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((DIDF == Zero))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (CDDS (DIDF))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DIDF))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }
            }

            Device (DD1F)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If ((EDPV == Zero))
                    {
                        Return (0x1F)
                    }
                    Else
                    {
                        Return ((0xFFFF & DIDX))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If ((EDPV == Zero))
                    {
                        Return (Zero)
                    }
                    Else
                    {
                        Return (CDDS (DIDX))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    Return (NDDS (DIDX))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    DSST (Arg0)
                }

                Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                {
                    Return (Package (0x66)
                    {
                        0x50, 
                        0x32, 
                        One, 
                        0x02, 
                        0x03, 
                        0x04, 
                        0x05, 
                        0x06, 
                        0x07, 
                        0x08, 
                        0x09, 
                        0x0A, 
                        0x0B, 
                        0x0C, 
                        0x0D, 
                        0x0E, 
                        0x0F, 
                        0x10, 
                        0x11, 
                        0x12, 
                        0x13, 
                        0x14, 
                        0x15, 
                        0x16, 
                        0x17, 
                        0x18, 
                        0x19, 
                        0x1A, 
                        0x1B, 
                        0x1C, 
                        0x1D, 
                        0x1E, 
                        0x1F, 
                        0x20, 
                        0x21, 
                        0x22, 
                        0x23, 
                        0x24, 
                        0x25, 
                        0x26, 
                        0x27, 
                        0x28, 
                        0x29, 
                        0x2A, 
                        0x2B, 
                        0x2C, 
                        0x2D, 
                        0x2E, 
                        0x2F, 
                        0x30, 
                        0x31, 
                        0x32, 
                        0x33, 
                        0x34, 
                        0x35, 
                        0x36, 
                        0x37, 
                        0x38, 
                        0x39, 
                        0x3A, 
                        0x3B, 
                        0x3C, 
                        0x3D, 
                        0x3E, 
                        0x3F, 
                        0x40, 
                        0x41, 
                        0x42, 
                        0x43, 
                        0x44, 
                        0x45, 
                        0x46, 
                        0x47, 
                        0x48, 
                        0x49, 
                        0x4A, 
                        0x4B, 
                        0x4C, 
                        0x4D, 
                        0x4E, 
                        0x4F, 
                        0x50, 
                        0x51, 
                        0x52, 
                        0x53, 
                        0x54, 
                        0x55, 
                        0x56, 
                        0x57, 
                        0x58, 
                        0x59, 
                        0x5A, 
                        0x5B, 
                        0x5C, 
                        0x5D, 
                        0x5E, 
                        0x5F, 
                        0x60, 
                        0x61, 
                        0x62, 
                        0x63, 
                        0x64
                    })
                }

                Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                {
                    If (((Arg0 >= Zero) && (Arg0 <= 0x64)))
                    {
                        \_SB.PCI0.GFX0.AINT (One, Arg0)
                        BRTL = Arg0
                    }
                }

                Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
                {
                    Return (BRTL) /* External reference */
                }
            }

            Method (SDDL, 1, NotSerialized)
            {
                NDID++
                Local0 = (Arg0 & 0x0F0F)
                Local1 = (0x80000000 | Local0)
                If ((DIDL == Local0))
                {
                    Return (Local1)
                }

                If ((DDL2 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL3 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL4 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL5 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL6 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL7 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL8 == Local0))
                {
                    Return (Local1)
                }

                If ((DDL9 == Local0))
                {
                    Return (Local1)
                }

                If ((DD10 == Local0))
                {
                    Return (Local1)
                }

                If ((DD11 == Local0))
                {
                    Return (Local1)
                }

                If ((DD12 == Local0))
                {
                    Return (Local1)
                }

                If ((DD13 == Local0))
                {
                    Return (Local1)
                }

                If ((DD14 == Local0))
                {
                    Return (Local1)
                }

                If ((DD15 == Local0))
                {
                    Return (Local1)
                }

                Return (Zero)
            }

            Method (CDDS, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x0F0F)
                If ((Zero == Local0))
                {
                    Return (0x1D)
                }

                If ((CADL == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL2 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL3 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL4 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL5 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL6 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL7 == Local0))
                {
                    Return (0x1F)
                }

                If ((CAL8 == Local0))
                {
                    Return (0x1F)
                }

                Return (0x1D)
            }

            Method (NDDS, 1, NotSerialized)
            {
                Local0 = (Arg0 & 0x0F0F)
                If ((Zero == Local0))
                {
                    Return (Zero)
                }

                If ((NADL == Local0))
                {
                    Return (One)
                }

                If ((NDL2 == Local0))
                {
                    Return (One)
                }

                If ((NDL3 == Local0))
                {
                    Return (One)
                }

                If ((NDL4 == Local0))
                {
                    Return (One)
                }

                If ((NDL5 == Local0))
                {
                    Return (One)
                }

                If ((NDL6 == Local0))
                {
                    Return (One)
                }

                If ((NDL7 == Local0))
                {
                    Return (One)
                }

                If ((NDL8 == Local0))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (DSST, 1, NotSerialized)
            {
                If (((Arg0 & 0xC0000000) == 0xC0000000))
                {
                    CSTE = NSTE /* External reference */
                }
            }

            OperationRegion (IGDP, PCI_Config, Zero, 0x0100)
            Field (IGDP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                MADR,   32, 
                Offset (0x50), 
                    ,   1, 
                GIVD,   1, 
                    ,   1, 
                    ,   3, 
                GUMA,   2, 
                Offset (0x52), 
                Offset (0x54), 
                    ,   4, 
                GMFN,   1, 
                Offset (0x58), 
                Offset (0x5C), 
                GSTM,   32, 
                Offset (0xB0), 
                    ,   12, 
                CDVL,   1, 
                Offset (0xB2), 
                Offset (0xE4), 
                ASLE,   8, 
                Offset (0xE8), 
                GSSE,   1, 
                GSSB,   14, 
                GSES,   1, 
                Offset (0xFC), 
                ASLS,   32
            }

            OperationRegion (IGDM, SystemMemory, ASLB (0x2000), Field (IGDM, AnyAcc, NoLock, Preserve)
                {
                    SIGN,   128, 
                    SIZE,   32, 
                    OVER,   32, 
                    SVER,   256, 
                    VVER,   128, 
                    GVER,   128, 
                    MBOX,   32, 
                    DMOD,   32, 
                    PCON,   32, 
                    DVER,   256, 
                    Offset (0x100), 
                    DRDY,   32, 
                    CSTS,   32, 
                    CEVT,   32, 
                    Offset (0x120), 
                    DIDL,   32, 
                    DDL2,   32, 
                    DDL3,   32, 
                    DDL4,   32, 
                    DDL5,   32, 
                    DDL6,   32, 
                    DDL7,   32, 
                    DDL8,   32, 
                    CPDL,   32, 
                    CPL2,   32, 
                    CPL3,   32, 
                    CPL4,   32, 
                    CPL5,   32, 
                    CPL6,   32, 
                    CPL7,   32, 
                    CPL8,   32, 
                    CADL,   32, 
                    CAL2,   32, 
                    CAL3,   32, 
                    CAL4,   32, 
                    CAL5,   32, 
                    CAL6,   32, 
                    CAL7,   32, 
                    CAL8,   32, 
                    NADL,   32, 
                    NDL2,   32, 
                    NDL3,   32, 
                    NDL4,   32, 
                    NDL5,   32, 
                    NDL6,   32, 
                    NDL7,   32, 
                    NDL8,   32, 
                    ASLP,   32, 
                    TIDX,   32, 
                    CHPD,   32, 
                    CLID,   32, 
                    CDCK,   32, 
                    SXSW,   32, 
                    EVTS,   32, 
                    CNOT,   32, 
                    NRDY,   32, 
                    DDL9,   32, 
                    DD10,   32, 
                    DD11,   32, 
                    DD12,   32, 
                    DD13,   32, 
                    DD14,   32, 
                    DD15,   32, 
                    CPL9,   32, 
                    CP10,   32, 
                    CP11,   32, 
                    CP12,   32, 
                    CP13,   32, 
                    CP14,   32, 
                    CP15,   32, 
                    Offset (0x200), 
                    SCIE,   1, 
                    GEFC,   4, 
                    GXFC,   3, 
                    GESF,   8, 
                    Offset (0x204), 
                    PARM,   32, 
                    DSLP,   32, 
                    Offset (0x300), 
                    ARDY,   32, 
                    ASLC,   32, 
                    TCHE,   32, 
                    ALSI,   32, 
                    BCLP,   32, 
                    PFIT,   32, 
                    CBLV,   32, 
                    BLM0,   16, 
                    BLM1,   16, 
                    BLM2,   16, 
                    BLM3,   16, 
                    BLM4,   16, 
                    BLM5,   16, 
                    BLM6,   16, 
                    BLM7,   16, 
                    BLM8,   16, 
                    BLM9,   16, 
                    BLMX,   160, 
                    CPFM,   32, 
                    EPFM,   32, 
                    PLUT,   592, 
                    PFMB,   32, 
                    CCDV,   32, 
                    PCFT,   32, 
                    SROT,   32, 
                    IUER,   32, 
                    FDSP,   64, 
                    FDSS,   32, 
                    STAT,   32, 
                    Offset (0x400), 
                    GVD1,   49152, 
                    PHED,   32, 
                    BDDC,   2048
                })
            Name (DBTB, Package (0x15)
            {
                Zero, 
                0x07, 
                0x38, 
                0x01C0, 
                0x0E00, 
                0x3F, 
                0x01C7, 
                0x0E07, 
                0x01F8, 
                0x0E38, 
                0x0FC0, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x7000, 
                0x7007, 
                0x7038, 
                0x71C0, 
                0x7E00
            })
            Name (CDCT, Package (0x06)
            {
                Package (0x01)
                {
                    0xA0
                }, 

                Package (0x01)
                {
                    0xC8
                }, 

                Package (0x01)
                {
                    0x010B
                }, 

                Package (0x01)
                {
                    0x0140
                }, 

                Package (0x01)
                {
                    0x0164
                }, 

                Package (0x01)
                {
                    0x0190
                }
            })
            Name (SUCC, One)
            Name (NVLD, 0x02)
            Name (CRIT, 0x04)
            Name (NCRT, 0x06)
            Method (PDRD, 0, NotSerialized)
            {
                If (!DRDY)
                {
                    Sleep (ASLP)
                }

                Return (!DRDY)
            }

            Method (PSTS, 0, NotSerialized)
            {
                If ((CSTS > 0x02))
                {
                    Sleep (ASLP)
                }

                Return ((CSTS == 0x03))
            }

            Method (GNOT, 2, NotSerialized)
            {
                If (PDRD ())
                {
                    Return (One)
                }

                CEVT = Arg0
                CSTS = 0x03
                If ((Arg0 == One))
                {
                    Notify (\_SB.PCI0.GFX0, 0x80) // Status Change
                }
                Else
                {
                    Notify (\_SB.PCI0.GFX0, Zero) // Bus Check
                }

                Return (Zero)
            }

            Method (GHDS, 1, NotSerialized)
            {
                TIDX = Arg0
                Return (GNOT (One, Zero))
            }

            Method (GLID, 1, NotSerialized)
            {
                CLID = Arg0
                Return (GNOT (0x02, Zero))
            }

            Method (GDCK, 1, NotSerialized)
            {
                CDCK = Arg0
                Return (GNOT (0x04, Zero))
            }

            Method (PARD, 0, NotSerialized)
            {
                If (!ARDY)
                {
                    Sleep (ASLP)
                }

                Return (!ARDY)
            }

            Method (AINT, 2, NotSerialized)
            {
                If (!(TCHE & (One << Arg0)))
                {
                    Return (One)
                }

                If (PARD ())
                {
                    Return (One)
                }

                If ((Arg0 == 0x02))
                {
                    If (CPFM)
                    {
                        Local0 = (CPFM & 0x0F)
                        Local1 = (EPFM & 0x0F)
                        If ((Local0 == One))
                        {
                            If ((Local1 & 0x06))
                            {
                                PFIT = 0x06
                            }
                            ElseIf ((Local1 & 0x08))
                            {
                                PFIT = 0x08
                            }
                            Else
                            {
                                PFIT = One
                            }
                        }

                        If ((Local0 == 0x06))
                        {
                            If ((Local1 & 0x08))
                            {
                                PFIT = 0x08
                            }
                            ElseIf ((Local1 & One))
                            {
                                PFIT = One
                            }
                            Else
                            {
                                PFIT = 0x06
                            }
                        }

                        If ((Local0 == 0x08))
                        {
                            If ((Local1 & One))
                            {
                                PFIT = One
                            }
                            ElseIf ((Local1 & 0x06))
                            {
                                PFIT = 0x06
                            }
                            Else
                            {
                                PFIT = 0x08
                            }
                        }
                    }
                    Else
                    {
                        PFIT ^= 0x07
                    }

                    PFIT |= 0x80000000
                    ASLC = 0x04
                }
                ElseIf ((Arg0 == One))
                {
                    BCLP = ((Arg1 * 0xFF) / 0x64)
                    BCLP |= 0x80000000
                    ASLC = 0x02
                }
                ElseIf ((Arg0 == Zero))
                {
                    ALSI = Arg1
                    ASLC = One
                }
                Else
                {
                    Return (One)
                }

                ASLE = One
                Return (Zero)
            }

            Method (SCIP, 0, NotSerialized)
            {
                If ((OVER != Zero))
                {
                    Return (!GSMI)
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3e5b41c6-eb1d-4260-9d15-c71fbadae414") /* Unknown UUID */))
                {
                    Switch (ToInteger (Arg2))
                    {
                        Case (Zero)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "iGfx Supported Functions Bitmap "
                                Return (0x0003E7FF)
                            }
                        }
                        Case (One)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = " Adapter Power State Notification "
                                If (((S0ID == One) && (OSYS < 0x07DF)))
                                {
                                    If (((DerefOf (Arg3 [Zero]) & 0xFF) == One))
                                    {
                                        \GUAM (One)
                                    }
                                }

                                If ((DerefOf (Arg3 [Zero]) == Zero))
                                {
                                    Local0 = CLID /* \_SB_.PCI0.GFX0.CLID */
                                    If ((0x80000000 & Local0))
                                    {
                                        CLID &= 0x0F
                                        GLID (CLID)
                                    }
                                }

                                Return (One)
                            }
                        }
                        Case (0x02)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "Display Power State Notification "
                                If (((S0ID == One) && (OSYS < 0x07DF)))
                                {
                                    Local0 = (DerefOf (Arg3 [One]) & 0xFF)
                                    If ((Local0 == Zero))
                                    {
                                        \GUAM (Zero)
                                    }
                                }

                                Return (One)
                            }
                        }
                        Case (0x03)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "BIOS POST Completion Notification "
                                Return (One)
                            }
                        }
                        Case (0x04)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "Pre-Hires Set Mode "
                                Return (One)
                            }
                        }
                        Case (0x05)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "Post-Hires Set Mode "
                                Return (One)
                            }
                        }
                        Case (0x06)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "SetDisplayDeviceNotification"
                                Return (One)
                            }
                        }
                        Case (0x07)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "SetBootDevicePreference "
                                IBTT = (DerefOf (Arg3 [Zero]) & 0xFF)
                                Return (One)
                            }
                        }
                        Case (0x08)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "SetPanelPreference "
                                IPSC = (DerefOf (Arg3 [Zero]) & 0xFF)
                                If ((DerefOf (Arg3 [One]) & 0xFF))
                                {
                                    IPAT = (DerefOf (Arg3 [One]) & 0xFF)
                                    IPAT--
                                }

                                IBIA = ((DerefOf (Arg3 [0x02]) >> 0x04) & 0x07)
                                Return (One)
                            }
                        }
                        Case (0x09)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "FullScreenDOS "
                                Return (One)
                            }
                        }
                        Case (0x0A)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "APM Complete "
                                Local0 = (LIDS << 0x08)
                                Local0 += 0x0100
                                Return (Local0)
                            }
                        }
                        Case (0x0D)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "GetBootDisplayPreference "
                                Local0 = ((DerefOf (Arg3 [0x03]) << 0x18) | (DerefOf (
                                    Arg3 [0x02]) << 0x10))
                                Local0 &= 0xEFFF0000
                                Local0 &= (DerefOf (DBTB [IBTT]) << 0x10)
                                Local0 |= IBTT
                                Return (Local0)
                            }
                        }
                        Case (0x0E)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "GetPanelDetails "
                                Local0 = IPSC /* External reference */
                                Local0 |= (IPAT << 0x08)
                                Local0 += 0x0100
                                Local0 |= (LIDS << 0x10)
                                Local0 += 0x00010000
                                Local0 |= (IBIA << 0x14)
                                Return (Local0)
                            }
                        }
                        Case (0x0F)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "GetInternalGraphics "
                                Local0 = GIVD /* \_SB_.PCI0.GFX0.GIVD */
                                Local0 ^= One
                                Local0 |= (GMFN << One)
                                Local0 |= 0x1800
                                Local0 |= (IDMS << 0x11)
                                Local0 |= (DerefOf (DerefOf (CDCT [HVCO]) [CDVL]) << 
                                    0x15)
                                Return (Local0)
                            }
                        }
                        Case (0x10)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "GetAKSV"
                                Return (One)
                            }
                        }
                        Case (0x11)
                        {
                            If ((Arg1 == One))
                            {
                                Debug = "SetDHPD"
                                \DHPD = Arg3
                            }
                        }

                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }

        Scope (\_SB)
        {
            Device (IPU0)
            {
                Name (_HID, "INT34D7")  // _HID: Hardware ID
                Name (_CID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _CID: Compatible ID
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((IPUD == 0x02) && (OSSL & Zero)))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }

        Scope (\_SB.PCI0.GFX0)
        {
            Device (IPU0)
            {
                Name (_ADR, 0x34D7)  // _ADR: Address
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (((IPUD == One) && (OSSL & Zero)))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
            }
        }
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 2, "ACRSYS", "ACRPRDCT", 0x00003000)
{
    External (_PR_.CFGD, UnknownObj)
    External (_PR_.CPU0, DeviceObj)
    External (_PSS, IntObj)
    External (NLPC, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_TPC, Zero)  // _TPC: Throttling Present Capabilities
        Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
        {
            If ((PDC0 & 0x04))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x05,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001810, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x05,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000001810, // Address
                        ,)
                }
            })
        }

        Name (TSMF, Package (0x10)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x05)
            {
                0x5E, 
                0x03AC, 
                Zero, 
                0x1F, 
                Zero
            }, 

            Package (0x05)
            {
                0x58, 
                0x0370, 
                Zero, 
                0x1E, 
                Zero
            }, 

            Package (0x05)
            {
                0x52, 
                0x0334, 
                Zero, 
                0x1D, 
                Zero
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02F8, 
                Zero, 
                0x1C, 
                Zero
            }, 

            Package (0x05)
            {
                0x45, 
                0x02BC, 
                Zero, 
                0x1B, 
                Zero
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0280, 
                Zero, 
                0x1A, 
                Zero
            }, 

            Package (0x05)
            {
                0x39, 
                0x0244, 
                Zero, 
                0x19, 
                Zero
            }, 

            Package (0x05)
            {
                0x32, 
                0x0208, 
                Zero, 
                0x18, 
                Zero
            }, 

            Package (0x05)
            {
                0x2C, 
                0x01CC, 
                Zero, 
                0x17, 
                Zero
            }, 

            Package (0x05)
            {
                0x26, 
                0x0190, 
                Zero, 
                0x16, 
                Zero
            }, 

            Package (0x05)
            {
                0x20, 
                0x0154, 
                Zero, 
                0x15, 
                Zero
            }, 

            Package (0x05)
            {
                0x19, 
                0x0118, 
                Zero, 
                0x14, 
                Zero
            }, 

            Package (0x05)
            {
                0x13, 
                0xDC, 
                Zero, 
                0x13, 
                Zero
            }, 

            Package (0x05)
            {
                0x0D, 
                0xA0, 
                Zero, 
                0x12, 
                Zero
            }, 

            Package (0x05)
            {
                0x07, 
                0x64, 
                Zero, 
                0x11, 
                Zero
            }
        })
        Name (TSMC, Package (0x08)
        {
            Package (0x05)
            {
                0x64, 
                0x03E8, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x05)
            {
                0x58, 
                0x036B, 
                Zero, 
                0x1E, 
                Zero
            }, 

            Package (0x05)
            {
                0x4B, 
                0x02EE, 
                Zero, 
                0x1C, 
                Zero
            }, 

            Package (0x05)
            {
                0x3F, 
                0x0271, 
                Zero, 
                0x1A, 
                Zero
            }, 

            Package (0x05)
            {
                0x32, 
                0x01F4, 
                Zero, 
                0x18, 
                Zero
            }, 

            Package (0x05)
            {
                0x26, 
                0x0177, 
                Zero, 
                0x16, 
                Zero
            }, 

            Package (0x05)
            {
                0x19, 
                0xFA, 
                Zero, 
                0x14, 
                Zero
            }, 

            Package (0x05)
            {
                0x0D, 
                0x7D, 
                Zero, 
                0x12, 
                Zero
            }
        })
        Name (TSSF, Zero)
        Mutex (TSMO, 0x00)
        Method (_TSS, 0, Serialized)  // _TSS: Throttling Supported States
        {
            If ((!TSSF && CondRefOf (_PSS)))
            {
                Acquire (TSMO, 0xFFFF)
                If ((!TSSF && CondRefOf (_PSS)))
                {
                    Name (LFMI, Zero)
                    Local0 = _PSS /* External reference */
                    LFMI = SizeOf (Local0)
                    LFMI--
                    Name (LFMP, Zero)
                    LFMP = DerefOf (DerefOf (Local0 [LFMI]) [One])
                    Local0 = Zero
                    If ((\_PR.CFGD & 0x2000))
                    {
                        Local1 = RefOf (TSMF)
                        Local2 = SizeOf (TSMF)
                    }
                    Else
                    {
                        Local1 = RefOf (TSMC)
                        Local2 = SizeOf (TSMC)
                    }

                    While ((Local0 < Local2))
                    {
                        Local4 = ((LFMP * (Local2 - Local0)) / Local2)
                        DerefOf (DerefOf (Local1) [Local0]) [One] = Local4
                        Local0++
                    }

                    TSSF = Ones
                }

                Release (TSMO)
            }

            If ((\_PR.CFGD & 0x2000))
            {
                Return (TSMF) /* \_PR_.CPU0.TSMF */
            }
            Else
            {
                Return (TSMC) /* \_PR_.CPU0.TSMC */
            }
        }

        Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
        {
            Debug = "Cpu0: _TDL Called"
            If ((\_PR.CFGD & 0x2000))
            {
                Return ((SizeOf (TSMF) - One))
            }
            Else
            {
                Return ((SizeOf (TSMC) - One))
            }
        }

        Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
        {
            If (!(PDC0 & 0x04))
            {
                Return (Package (0x01)
                {
                    Package (0x05)
                    {
                        0x05, 
                        Zero, 
                        Zero, 
                        0xFD, 
                        NLPC
                    }
                })
            }

            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFC, 
                    One
                }
            })
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "ACRSYS", "ACRPRDCT", 0x00001000)
{
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (ACDF, IntObj)
    External (TOHP, UnknownObj)

    Scope (\_SB.PCI0)
    {
        Device (WMID)
        {
            Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
            Name (_UID, "APGe")  // _UID: Unique ID
            OperationRegion (AGNS, SystemMemory, 0x7AFB2000, 0x00001187)
            Field (AGNS, AnyAcc, Lock, Preserve)
            {
                D2DF,   8, 
                MTID,   8, 
                WMIB,   33056, 
                ECDA,   2048, 
                HDIF,   504, 
                ODIF,   168, 
                CTID,   16, 
                LMST,   8, 
                EPMS,   8, 
                DCST,   8, 
                APUS,   8, 
                RFDS,   8, 
                ODST,   8, 
                HSST,   8, 
                TMGB,   16, 
                TOPT,   8, 
                PSSP,   8
            }

            Name (_WDG, Buffer (0xF0)
            {
                /* 0000 */  0x5E, 0xA1, 0x6A, 0x67, 0x47, 0x6A, 0x9F, 0x4D,  // ^.jgGj.M
                /* 0008 */  0xA2, 0xCC, 0x1E, 0x6D, 0x18, 0xD1, 0x40, 0x26,  // ...m..@&
                /* 0010 */  0xBC, 0x00, 0x01, 0x08, 0xEA, 0x69, 0xEF, 0x61,  // .....i.a
                /* 0018 */  0x5C, 0x86, 0xC3, 0x4B, 0xA5, 0x02, 0xA0, 0xDE,  // \..K....
                /* 0020 */  0xBA, 0x0C, 0xB5, 0x31, 0x41, 0x41, 0x01, 0x02,  // ...1AA..
                /* 0028 */  0xC5, 0x2E, 0x77, 0x79, 0xB1, 0x04, 0xFD, 0x4B,  // ..wy...K
                /* 0030 */  0x84, 0x3C, 0x61, 0xE7, 0xF7, 0x7B, 0x6C, 0xC9,  // .<a..{l.
                /* 0038 */  0x42, 0x45, 0x01, 0x02, 0xC6, 0x2E, 0x77, 0x79,  // BE....wy
                /* 0040 */  0xB1, 0x04, 0xFD, 0x4B, 0x84, 0x3C, 0x61, 0xE7,  // ...K.<a.
                /* 0048 */  0xF7, 0x7B, 0x6C, 0xC9, 0x42, 0x46, 0x01, 0x02,  // .{l.BF..
                /* 0050 */  0x66, 0x56, 0x5F, 0xF7, 0xB3, 0xB8, 0x5D, 0x4A,  // fV_...]J
                /* 0058 */  0xA9, 0x1C, 0x74, 0x88, 0xF6, 0x2E, 0x56, 0x37,  // ..t...V7
                /* 0060 */  0x42, 0x4B, 0x01, 0x02, 0xDA, 0xBB, 0x1D, 0xFE,  // BK......
                /* 0068 */  0x14, 0x30, 0x56, 0x48, 0x87, 0x0C, 0x5B, 0x3A,  // .0VH..[:
                /* 0070 */  0x74, 0x4B, 0xF3, 0x41, 0x42, 0x4C, 0x01, 0x02,  // tK.ABL..
                /* 0078 */  0xA7, 0xC3, 0xB0, 0x77, 0x1D, 0xF7, 0xCB, 0x43,  // ...w...C
                /* 0080 */  0xB7, 0x49, 0x91, 0xCB, 0xFF, 0x5D, 0xDC, 0x43,  // .I...].C
                /* 0088 */  0x42, 0x47, 0x01, 0x02, 0xE7, 0xDF, 0x4D, 0x7A,  // BG....Mz
                /* 0090 */  0x5D, 0x5B, 0xB4, 0x40, 0x85, 0x95, 0x44, 0x08,  // ][.@..D.
                /* 0098 */  0xE0, 0xCC, 0x7F, 0x56, 0x42, 0x48, 0x01, 0x02,  // ...VBH..
                /* 00A0 */  0x43, 0x34, 0xB5, 0x4B, 0x8A, 0x48, 0x0D, 0x43,  // C4.K.H.C
                /* 00A8 */  0xA2, 0x5C, 0x87, 0x46, 0x60, 0xE2, 0x3B, 0xDD,  // .\.F`.;.
                /* 00B0 */  0x41, 0x43, 0x01, 0x02, 0xF6, 0x7E, 0xD7, 0xA9,  // AC...~..
                /* 00B8 */  0xE0, 0x55, 0x06, 0x47, 0xB1, 0x39, 0x96, 0xAC,  // .U.G.9..
                /* 00C0 */  0xE1, 0x3F, 0x22, 0x69, 0xBD, 0x00, 0x01, 0x08,  // .?"i....
                /* 00C8 */  0x0E, 0x13, 0x98, 0x9F, 0x48, 0x3B, 0xB3, 0x40,  // ....H;.@
                /* 00D0 */  0x94, 0x02, 0xDE, 0x8E, 0x16, 0x0F, 0x30, 0xCC,  // ......0.
                /* 00D8 */  0x41, 0x42, 0x01, 0x02, 0x21, 0x12, 0x90, 0x05,  // AB..!...
                /* 00E0 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                /* 00E8 */  0xC9, 0x06, 0x29, 0x10, 0x41, 0x42, 0x01, 0x00   // ..).AB..
            })
            Name (BFFB, Buffer (0x02)
            {
                 0x00, 0x00                                       // ..
            })
            Name (FEBC, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (AAST, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (AAGT, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BEBI, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BKCP, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BKGP, Buffer (0x0C)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BKGB, Buffer (0x14)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BKSU, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BKSS, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BKSB, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BLCP, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BLSP, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (ACSB, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (ACGB, Buffer (0x0804)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0520 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0530 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0538 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0540 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0548 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0550 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0558 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0560 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0568 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0570 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0578 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0580 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0588 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0590 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0598 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0608 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0610 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0618 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0620 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0628 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0638 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0640 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0650 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0658 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0660 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0668 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0670 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0678 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0680 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0688 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0690 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0698 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0700 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0708 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0710 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0718 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0720 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0728 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0730 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0738 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0740 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0750 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0758 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0768 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0770 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0778 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0780 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0788 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0790 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0798 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0800 */  0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BLLB, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BLSD, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BLGD, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BLDR, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BLGP, Buffer (0x20)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BHSK, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (BHGK, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BGS3, Buffer (0x02)
            {
                 0x00, 0x00                                       // ..
            })
            Name (BKMN, Buffer (0x58)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BKSN, Buffer (0x30)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BKAT, Buffer (0x48)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BKGU, Buffer (0x48)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BKGS, Buffer (0x48)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
            })
            Name (BLGB, Buffer (0x100C)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0520 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0530 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0538 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0540 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0548 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0550 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0558 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0560 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0568 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0570 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0578 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0580 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0588 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0590 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0598 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 05F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0608 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0610 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0618 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0620 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0628 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0638 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0640 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0650 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0658 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0660 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0668 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0670 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0678 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0680 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0688 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0690 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0698 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 06F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0700 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0708 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0710 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0718 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0720 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0728 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0730 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0738 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0740 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0750 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0758 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0768 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0770 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0778 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0780 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0788 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0790 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0798 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 07F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0800 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0808 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0810 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0818 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0820 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0828 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0830 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0838 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0840 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0848 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0850 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0858 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0860 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0868 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0870 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0878 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0880 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0888 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0890 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0898 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 08F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0900 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0908 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0910 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0918 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0920 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0928 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0930 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0938 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0940 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0948 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0950 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0958 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0960 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0968 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0970 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0978 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0980 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0988 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0990 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0998 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 09F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0A98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0AF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0B98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0BF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0C98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0CF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0D98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0DF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0E98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0EA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0EA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0EB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0EB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0EC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0EC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0ED0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0ED8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0EE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0EE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0EF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0EF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F00 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F08 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F10 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F18 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F20 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F28 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F30 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F38 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F40 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F48 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F50 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F58 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F60 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F68 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F70 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F78 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F80 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F88 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F90 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0F98 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FA0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FA8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FB0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FB8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FC0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FC8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FD0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FD8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FE0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FE8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FF0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0FF8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 1000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 1008 */  0x00, 0x00, 0x00, 0x00                           // ....
            })
            Name (ABST, Buffer (0x02)
            {
                 0x00, 0x00                                       // ..
            })
            Name (ABGT, Buffer (0x84)
            {
                /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                /* 0080 */  0x00, 0x00, 0x00, 0x00                           // ....
            })
            Scope (\_SB.PCI0.LPCB.EC0)
            {
                Method (GCMS, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GOTS, 2, Serialized)
                {
                    Local0 = Zero
                    Local1 = (Arg0 & 0xFF)
                    Switch (Local1)
                    {
                        Case (0x82)
                        {
                            If ((TOHP == Zero))
                            {
                                Local0 |= 0x02
                            }
                        }

                    }

                    Arg1 = Local0
                    Return (Zero)
                }

                Method (GBL1, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GBL2, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GSTY, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GSDA, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GTTY, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GTDA, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GACS, 1, NotSerialized)
                {
                    Local0 = Zero
                    Local0 = ACDF /* External reference */
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GBBS, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GHKF, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GHKD, 1, NotSerialized)
                {
                    Local0 = Zero
                    Arg0 = Local0
                    Return (Zero)
                }

                Method (GGSI, 2, Serialized)
                {
                    Local0 = Zero
                    Local1 = DerefOf (Arg0 [Zero])
                    Local2 = DerefOf (Arg0 [One])
                    If ((Local1 == Zero))
                    {
                        Arg1 = Local0
                    }
                    ElseIf ((Local1 == One))
                    {
                        Switch (Local2)
                        {
                            Case (One)
                            {
                            }
                            Case (0x02)
                            {
                            }
                            Case (0x03)
                            {
                            }
                            Case (0x04)
                            {
                            }
                            Case (0x05)
                            {
                            }
                            Case (0x06)
                            {
                            }
                            Case (0x07)
                            {
                            }
                            Case (0x08)
                            {
                            }
                            Case (0x09)
                            {
                            }
                            Case (0x0A)
                            {
                            }
                            Case (0x0B)
                            {
                            }

                        }

                        Arg1 = Local0
                    }
                    ElseIf ((Local1 == 0x02))
                    {
                        Arg1 = Local0
                    }

                    Return (Zero)
                }
            }

            OperationRegion (XCMS, SystemIO, 0x72, 0x02)
            Field (XCMS, ByteAcc, NoLock, Preserve)
            {
                CMSI,   8, 
                CMSD,   8
            }

            Method (CMSW, 2, NotSerialized)
            {
                CMSI = Arg0
                CMSD = Arg1
            }

            Method (CLBC, 2, NotSerialized)
            {
                Local1 = Arg0
                Local2 = Arg1
                Local2 += Local1
                While (One)
                {
                    FEBC [Local1] = Zero
                    Local1 += One
                    If ((Local1 == Local2))
                    {
                        Break
                    }
                }
            }

            Method (CMSR, 1, NotSerialized)
            {
                CMSI = Arg0
                Return (CMSD) /* \_SB_.PCI0.WMID.CMSD */
            }

            OperationRegion (CSPR, SystemIO, PSSP, 0x02)
            Field (CSPR, ByteAcc, NoLock, Preserve)
            {
                WSSP,   8
            }

            Method (WSMI, 2, NotSerialized)
            {
                MTID = Arg0
                WMIB = Arg1
                WSSP = 0xD0
            }

            Name (WQAB, Buffer (0x28E1)
            {
                /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                /* 0008 */  0xD1, 0x28, 0x00, 0x00, 0xB8, 0x2D, 0x01, 0x00,  // .(...-..
                /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                /* 0018 */  0x28, 0x49, 0x90, 0x01, 0x01, 0x08, 0x09, 0x42,  // (I.....B
                /* 0020 */  0xD8, 0x06, 0x84, 0x48, 0x08, 0x81, 0x44, 0x40,  // ...H..D@
                /* 0028 */  0x28, 0x32, 0x0B, 0x83, 0x21, 0x04, 0x8E, 0x0B,  // (2..!...
                /* 0030 */  0x21, 0x07, 0x10, 0x12, 0x07, 0x85, 0x12, 0x02,  // !.......
                /* 0038 */  0xA1, 0xFE, 0x04, 0xF2, 0x2B, 0x00, 0xA1, 0x43,  // ....+..C
                /* 0040 */  0x01, 0x32, 0x05, 0x18, 0x14, 0xE0, 0x14, 0x41,  // .2.....A
                /* 0048 */  0x04, 0xBD, 0x0A, 0xB0, 0x29, 0xC0, 0xA4, 0x00,  // ....)...
                /* 0050 */  0x8B, 0x02, 0xB4, 0x0B, 0xB0, 0x2C, 0x40, 0xB7,  // .....,@.
                /* 0058 */  0x00, 0xE9, 0xB0, 0x44, 0x24, 0x38, 0x4A, 0x0C,  // ...D$8J.
                /* 0060 */  0x38, 0x4A, 0x27, 0xB6, 0x70, 0xC3, 0x06, 0x2F,  // 8J'.p../
                /* 0068 */  0x14, 0x45, 0x33, 0x88, 0x92, 0xA0, 0x72, 0x01,  // .E3...r.
                /* 0070 */  0xBE, 0x11, 0x04, 0x5E, 0xAE, 0x00, 0xC9, 0x13,  // ...^....
                /* 0078 */  0x90, 0x66, 0x01, 0x86, 0x05, 0x58, 0x17, 0x20,  // .f...X. 
                /* 0080 */  0x7B, 0x08, 0x54, 0xEA, 0x10, 0x50, 0x72, 0x86,  // {.T..Pr.
                /* 0088 */  0x80, 0x1A, 0x40, 0xAB, 0x13, 0x10, 0x7E, 0xA5,  // ..@...~.
                /* 0090 */  0x53, 0x42, 0x12, 0x84, 0x33, 0x56, 0xF1, 0xF8,  // SB..3V..
                /* 0098 */  0x9A, 0x45, 0xD3, 0x73, 0x92, 0x73, 0x0C, 0x39,  // .E.s.s.9
                /* 00A0 */  0x1E, 0x17, 0x7A, 0x10, 0x3C, 0xAC, 0x04, 0x10,  // ..z.<...
                /* 00A8 */  0x16, 0x60, 0xC8, 0x8A, 0x07, 0x83, 0xD2, 0x30,  // .`.....0
                /* 00B0 */  0x16, 0xEA, 0x62, 0xD4, 0xA8, 0x91, 0xB2, 0x01,  // ..b.....
                /* 00B8 */  0x19, 0xA2, 0x24, 0x38, 0xD4, 0xA8, 0x2D, 0x51,  // ..$8..-Q
                /* 00C0 */  0x80, 0xF9, 0x71, 0x68, 0x76, 0x6D, 0x8F, 0x85,  // ..qhvm..
                /* 00C8 */  0x40, 0x32, 0x69, 0x43, 0x41, 0x49, 0x81, 0xD0,  // @2iCAI..
                /* 00D0 */  0xD8, 0xCE, 0xD4, 0x33, 0x8A, 0x78, 0xA4, 0x86,  // ...3.x..
                /* 00D8 */  0x49, 0xE0, 0x51, 0x44, 0x36, 0x1A, 0x87, 0xC6,  // I.QD6...
                /* 00E0 */  0x0E, 0xC3, 0xC3, 0x0C, 0x76, 0x10, 0x87, 0x71,  // ....v..q
                /* 00E8 */  0xCC, 0x91, 0x13, 0x78, 0x42, 0x47, 0x7A, 0xE4,  // ...xBGz.
                /* 00F0 */  0x85, 0xCD, 0x53, 0xA8, 0x31, 0x9A, 0x83, 0x22,  // ..S.1.."
                /* 00F8 */  0x73, 0x78, 0x14, 0xC0, 0x8E, 0x29, 0xEC, 0xD1,  // sx...)..
                /* 0100 */  0xC6, 0x3E, 0x5F, 0x0B, 0x1F, 0xAC, 0x30, 0x8E,  // .>_...0.
                /* 0108 */  0xE0, 0xB8, 0x12, 0xFC, 0xFF, 0x4F, 0xFC, 0x50,  // .....O.P
                /* 0110 */  0x7A, 0x84, 0x93, 0xA0, 0x29, 0x52, 0x90, 0xA3,  // z...)R..
                /* 0118 */  0xC6, 0xC8, 0xC2, 0x91, 0xD6, 0x59, 0x91, 0xB9,  // .....Y..
                /* 0120 */  0x1B, 0xD8, 0x40, 0x95, 0x09, 0xD0, 0x25, 0xC0,  // ..@...%.
                /* 0128 */  0xDA, 0xA4, 0x08, 0xC1, 0x01, 0x1D, 0x09, 0x46,  // .......F
                /* 0130 */  0x06, 0x84, 0x3C, 0x1F, 0x0C, 0x34, 0x44, 0x13,  // ..<..4D.
                /* 0138 */  0xD8, 0xBD, 0x00, 0x6D, 0x02, 0xBC, 0x41, 0x68,  // ...m..Ah
                /* 0140 */  0x20, 0x11, 0x1A, 0x43, 0xD6, 0x2C, 0xDA, 0xC2,  //  ..C.,..
                /* 0148 */  0x21, 0xE8, 0xB1, 0xA2, 0xC4, 0x38, 0xA8, 0x43,  // !....8.C
                /* 0150 */  0xAB, 0x11, 0x45, 0x48, 0x27, 0xF1, 0x6A, 0x10,  // ..EH'.j.
                /* 0158 */  0x21, 0x4A, 0xCC, 0x90, 0x11, 0x83, 0x05, 0x79,  // !J.....y
                /* 0160 */  0x8E, 0x88, 0xE1, 0x31, 0x1A, 0x2E, 0x52, 0xFB,  // ...1..R.
                /* 0168 */  0x83, 0x20, 0xF2, 0x5E, 0x13, 0x3A, 0x10, 0x38,  // . .^.:.8
                /* 0170 */  0xD2, 0x68, 0x50, 0xA7, 0x05, 0x1F, 0x0A, 0x3C,  // .hP....<
                /* 0178 */  0xBB, 0x87, 0x04, 0x0F, 0xEE, 0xA4, 0x83, 0x9C,  // ........
                /* 0180 */  0xE8, 0xC1, 0x3D, 0x43, 0x3C, 0x0D, 0x78, 0xDC,  // ..=C<.x.
                /* 0188 */  0xEC, 0x9A, 0xE0, 0xC3, 0x85, 0x8F, 0x07, 0x78,  // .......x
                /* 0190 */  0xD7, 0x80, 0xBA, 0x17, 0x3C, 0x15, 0xB0, 0x59,  // ....<..Y
                /* 0198 */  0x86, 0xC3, 0x0C, 0xD1, 0x83, 0x0D, 0x77, 0x02,  // ......w.
                /* 01A0 */  0x87, 0xC8, 0x00, 0x3D, 0xA4, 0x07, 0x02, 0xEC,  // ...=....
                /* 01A8 */  0xDC, 0x4E, 0xE6, 0xD8, 0x5F, 0x28, 0x9A, 0xBD,  // .N.._(..
                /* 01B0 */  0x4A, 0x10, 0x82, 0xE3, 0xF1, 0x2D, 0x82, 0x4D,  // J....-.M
                /* 01B8 */  0x38, 0x81, 0xE5, 0x0F, 0x02, 0x35, 0x32, 0x43,  // 8....52C
                /* 01C0 */  0x7B, 0xA8, 0xA7, 0xF5, 0x36, 0xE0, 0x73, 0x80,  // {...6.s.
                /* 01C8 */  0x09, 0x2C, 0x16, 0x42, 0x0A, 0x20, 0x34, 0x1E,  // .,.B. 4.
                /* 01D0 */  0xF0, 0x2B, 0x3E, 0x79, 0x90, 0x2B, 0x83, 0xE7,  // .+>y.+..
                /* 01D8 */  0xEB, 0x43, 0x84, 0x8E, 0x16, 0x32, 0xB2, 0x0A,  // .C...2..
                /* 01E0 */  0x8F, 0x87, 0x9E, 0x17, 0x7C, 0x49, 0xC0, 0xDC,  // ....|I..
                /* 01E8 */  0x18, 0x3C, 0x74, 0x0F, 0xE9, 0xF9, 0xC0, 0x92,  // .<t.....
                /* 01F0 */  0x60, 0xF5, 0xFF, 0x3F, 0x05, 0x58, 0xD4, 0xC8,  // `..?.X..
                /* 01F8 */  0xE9, 0xA9, 0x82, 0x1F, 0x28, 0x18, 0x6C, 0xD0,  // ....(.l.
                /* 0200 */  0xB0, 0x1E, 0xCC, 0x39, 0xF9, 0xD3, 0xE2, 0xB1,  // ...9....
                /* 0208 */  0xC1, 0x07, 0xC4, 0x7B, 0x9F, 0x35, 0x19, 0xC1,  // ...{.5..
                /* 0210 */  0xC9, 0x1A, 0xD0, 0x87, 0x07, 0xDC, 0xA9, 0x02,  // ........
                /* 0218 */  0xBC, 0x30, 0x87, 0xC5, 0xEF, 0x15, 0xB0, 0x0F,  // .0......
                /* 0220 */  0x0B, 0x1E, 0x25, 0x1F, 0x8D, 0x87, 0x70, 0x16,  // ..%...p.
                /* 0228 */  0x4F, 0x03, 0x86, 0x31, 0xFA, 0x53, 0x00, 0xEC,  // O..1.S..
                /* 0230 */  0x1B, 0x86, 0xC7, 0xE2, 0x93, 0x8E, 0x8F, 0x3A,  // .......:
                /* 0238 */  0xE0, 0x18, 0x1C, 0xBF, 0xC3, 0xE0, 0x8E, 0x3A,  // .......:
                /* 0240 */  0xC0, 0x63, 0xAE, 0x8F, 0x3A, 0x60, 0x3B, 0x1F,  // .c..:`;.
                /* 0248 */  0xB0, 0x63, 0x0E, 0x2C, 0x09, 0xC7, 0x24, 0x54,  // .c.,..$T
                /* 0250 */  0x68, 0x28, 0xFA, 0xFF, 0x87, 0xE3, 0x81, 0x07,  // h(......
                /* 0258 */  0x4F, 0xE5, 0x0D, 0x16, 0x14, 0x10, 0xC7, 0xF1,  // O.......
                /* 0260 */  0x76, 0xF0, 0x9E, 0x04, 0xE3, 0x9C, 0x04, 0xF0,  // v.......
                /* 0268 */  0xF1, 0x68, 0xC0, 0x2E, 0x1D, 0xCF, 0x49, 0x70,  // .h....Ip
                /* 0270 */  0xFF, 0xFF, 0xE7, 0x24, 0xB0, 0x9E, 0x07, 0x4E,  // ...$...N
                /* 0278 */  0xE9, 0x6C, 0x5E, 0x91, 0x22, 0x9C, 0xC4, 0x1B,  // .l^."...
                /* 0280 */  0xD2, 0x93, 0xD1, 0xFB, 0x51, 0xF0, 0x27, 0x25,  // ....Q.'%
                /* 0288 */  0x4F, 0xEC, 0x39, 0xC9, 0x58, 0x41, 0x42, 0x59,  // O.9.XABY
                /* 0290 */  0xE1, 0x0D, 0x49, 0xCE, 0x50, 0x85, 0x12, 0xE2,  // ..I.P...
                /* 0298 */  0x79, 0xC9, 0xD7, 0x05, 0x23, 0x19, 0xF9, 0x54,  // y...#..T
                /* 02A0 */  0x5E, 0x93, 0x8C, 0xF5, 0x9C, 0x04, 0x30, 0xF0,  // ^.....0.
                /* 02A8 */  0xFF, 0x7F, 0x4E, 0x02, 0xBE, 0xA7, 0x0A, 0xB8,  // ..N.....
                /* 02B0 */  0xE7, 0x24, 0xC0, 0xC9, 0xE0, 0xD8, 0x09, 0x13,  // .$......
                /* 02B8 */  0x58, 0x9D, 0x93, 0x80, 0x4B, 0x54, 0x13, 0x67,  // X...KT.g
                /* 02C0 */  0x1C, 0x8C, 0xAC, 0x75, 0xD3, 0x63, 0x0E, 0x38,  // ...u.c.8
                /* 02C8 */  0xFE, 0xFF, 0xA7, 0x4B, 0xC0, 0x22, 0xC6, 0xF3,  // ...K."..
                /* 02D0 */  0x86, 0x45, 0x03, 0x6A, 0x04, 0xCF, 0x0F, 0xB0,  // .E.j....
                /* 02D8 */  0x4F, 0x97, 0xF0, 0x6F, 0x94, 0xBE, 0xE4, 0x78,  // O..o...x
                /* 02E0 */  0x52, 0x41, 0x0E, 0xE5, 0xF5, 0xE6, 0xC9, 0x21,  // RA.....!
                /* 02E8 */  0x4C, 0xF4, 0x07, 0x4B, 0xE3, 0x3F, 0xE4, 0x04,  // L..K.?..
                /* 02F0 */  0x79, 0xBF, 0x79, 0xBA, 0x34, 0xD2, 0x73, 0xA5,  // y.y.4.s.
                /* 02F8 */  0x51, 0x0C, 0x72, 0x66, 0x51, 0xA3, 0x45, 0x31,  // Q.rfQ.E1
                /* 0300 */  0x5E, 0x90, 0x68, 0x11, 0x8F, 0xE0, 0x31, 0x87,  // ^.h...1.
                /* 0308 */  0xC5, 0x3A, 0x10, 0xE8, 0x23, 0xE5, 0x63, 0x0E,  // .:..#.c.
                /* 0310 */  0xE0, 0xE6, 0xFF, 0x7F, 0xCC, 0x01, 0x1C, 0x9C,  // ........
                /* 0318 */  0xE6, 0xC0, 0x71, 0x5A, 0xE0, 0xA3, 0xE2, 0x57,  // ..qZ...W
                /* 0320 */  0x06, 0x76, 0x26, 0x01, 0x26, 0x51, 0x9E, 0x1E,  // .v&.&Q..
                /* 0328 */  0x1A, 0xA7, 0x35, 0x3E, 0x07, 0x64, 0xE3, 0x24,  // ..5>.d.$
                /* 0330 */  0x44, 0x07, 0x61, 0x25, 0x54, 0x3A, 0xB1, 0x18,  // D.a%T:..
                /* 0338 */  0xF3, 0xAD, 0x21, 0xEE, 0xB3, 0x81, 0xE7, 0x83,  // ..!.....
                /* 0340 */  0x49, 0x7F, 0x50, 0xD0, 0xF9, 0xC7, 0xE0, 0xCE,  // I.P.....
                /* 0348 */  0x4D, 0xA2, 0xDC, 0x03, 0xA2, 0xF0, 0x4E, 0x7A,  // M.....Nz
                /* 0350 */  0x0C, 0xA2, 0x20, 0x06, 0x74, 0x0C, 0x08, 0x59,  // .. .t..Y
                /* 0358 */  0x39, 0x08, 0xA0, 0xAF, 0x13, 0x3E, 0x32, 0xF8,  // 9....>2.
                /* 0360 */  0x9C, 0x11, 0xE5, 0x8C, 0x7C, 0xC0, 0x78, 0x5C,  // ....|.x\
                /* 0368 */  0x60, 0xC3, 0xF1, 0x41, 0x80, 0x1F, 0x50, 0x7C,  // `..A..P|
                /* 0370 */  0x33, 0x30, 0xB6, 0xD5, 0x1C, 0x77, 0x50, 0x60,  // 30...wP`
                /* 0378 */  0x86, 0x7F, 0x81, 0x31, 0x81, 0xEF, 0x19, 0x6F,  // ...1...o
                /* 0380 */  0x3B, 0x60, 0x39, 0x63, 0x3C, 0x71, 0x58, 0x1F,  // ;`9c<qX.
                /* 0388 */  0x2E, 0xEA, 0xFF, 0x7F, 0x18, 0x80, 0x07, 0xE4,  // ........
                /* 0390 */  0xE9, 0xFB, 0x44, 0xF3, 0x08, 0xC0, 0xC6, 0xF0,  // ..D.....
                /* 0398 */  0x50, 0x63, 0x34, 0xA3, 0xF3, 0xF8, 0x73, 0x45,  // Pc4...sE
                /* 03A0 */  0xDD, 0x1F, 0x3D, 0x57, 0x83, 0x78, 0xAE, 0x0E,  // ..=W.x..
                /* 03A8 */  0x03, 0x21, 0x27, 0x73, 0x45, 0xDD, 0x5E, 0x3C,  // .!'sE.^<
                /* 03B0 */  0x22, 0xFB, 0x9C, 0x2A, 0x19, 0x2C, 0x27, 0x88,  // "..*.,'.
                /* 03B8 */  0xF2, 0xAA, 0x01, 0xEB, 0x20, 0x10, 0x91, 0xCD,  // .... ...
                /* 03C0 */  0xC3, 0x77, 0x25, 0xFC, 0x6C, 0xF9, 0x60, 0x7C,  // .w%.l.`|
                /* 03C8 */  0x95, 0x80, 0x3F, 0x5C, 0x7E, 0x2A, 0x79, 0x37,  // ..?\~*y7
                /* 03D0 */  0x49, 0x60, 0x81, 0xD3, 0x05, 0x39, 0x3C, 0xE6,  // I`...9<.
                /* 03D8 */  0xF1, 0x2F, 0x01, 0x16, 0xEE, 0x52, 0x74, 0x5C,  // ./...Rt\
                /* 03E0 */  0xFC, 0x76, 0xE0, 0x1B, 0x0F, 0xBB, 0xD3, 0xE0,  // .v......
                /* 03E8 */  0x2E, 0x62, 0x18, 0x58, 0x8F, 0x94, 0xC3, 0x1A,  // .b.X....
                /* 03F0 */  0x2D, 0xEC, 0x01, 0xBF, 0x71, 0xF8, 0xB8, 0xE2,  // -...q...
                /* 03F8 */  0x99, 0x19, 0x23, 0xAC, 0xEF, 0x29, 0xE0, 0xB8,  // ..#..)..
                /* 0400 */  0x93, 0xC1, 0x0F, 0x70, 0x05, 0x02, 0xD1, 0xFF,  // ...p....
                /* 0408 */  0xFF, 0x0A, 0x84, 0x3F, 0x6B, 0xB0, 0x2B, 0x99,  // ...?k.+.
                /* 0410 */  0x41, 0x5E, 0x94, 0x7C, 0xAE, 0x31, 0x7A, 0xA0,  // A^.|.1z.
                /* 0418 */  0xF7, 0x0D, 0xFC, 0x4D, 0x08, 0xF6, 0x0D, 0x04,  // ...M....
                /* 0420 */  0xCE, 0x50, 0x7C, 0x03, 0x01, 0x0E, 0xC7, 0x08,  // .P|.....
                /* 0428 */  0xDC, 0x0D, 0x04, 0x58, 0xDF, 0x21, 0xD8, 0x0D,  // ...X.!..
                /* 0430 */  0x04, 0x58, 0x9E, 0x5E, 0x70, 0x37, 0x10, 0xE0,  // .X.^p7..
                /* 0438 */  0xF4, 0xFF, 0xBF, 0x81, 0x80, 0xEB, 0xFE, 0xC2,  // ........
                /* 0440 */  0x6E, 0x20, 0xC0, 0x7C, 0xD4, 0xBE, 0x81, 0x00,  // n .|....
                /* 0448 */  0x96, 0xCE, 0x1A, 0xEC, 0x06, 0x02, 0xFE, 0xA0,  // ........
                /* 0450 */  0x3E, 0xC6, 0xC3, 0x82, 0x0C, 0x5D, 0xE2, 0x16,  // >....]..
                /* 0458 */  0x4E, 0x61, 0x7C, 0x4A, 0x04, 0x2E, 0xFF, 0xFF,  // Na|J....
                /* 0460 */  0x53, 0x22, 0xF0, 0x3B, 0x50, 0xF8, 0x04, 0x00,  // S".;P...
                /* 0468 */  0xB6, 0xCB, 0x28, 0x1B, 0xFA, 0xBB, 0x81, 0x2F,  // ..(..../
                /* 0470 */  0x8A, 0xE0, 0x3C, 0x29, 0xC2, 0x1F, 0xD6, 0x1B,  // ..<)....
                /* 0478 */  0x41, 0x88, 0xC7, 0xC4, 0x57, 0x6A, 0xCF, 0xEC,  // A...Wj..
                /* 0480 */  0xAD, 0xE2, 0x0D, 0x31, 0xC8, 0xE3, 0x61, 0xF4,  // ...1..a.
                /* 0488 */  0x48, 0x4F, 0x8A, 0x46, 0x0A, 0xF3, 0xA4, 0x68,  // HO.F...h
                /* 0490 */  0xC4, 0x30, 0x3E, 0x29, 0xFA, 0xA0, 0x68, 0xB8,  // .0>)..h.
                /* 0498 */  0xD7, 0x6B, 0x1F, 0x38, 0x22, 0x85, 0x8F, 0xED,  // .k.8"...
                /* 04A0 */  0xAB, 0x46, 0x84, 0x27, 0x45, 0x16, 0xEA, 0xA4,  // .F.'E...
                /* 04A8 */  0x08, 0xE8, 0xFB, 0xFF, 0x9F, 0x14, 0x81, 0xE7,  // ........
                /* 04B0 */  0x59, 0x18, 0x1C, 0xF7, 0x65, 0x3E, 0x83, 0x73,  // Y...e>.s
                /* 04B8 */  0x89, 0xED, 0x01, 0x3E, 0x28, 0x02, 0x93, 0x08,  // ...>(...
                /* 04C0 */  0x2B, 0xD4, 0x30, 0x9D, 0xE8, 0x31, 0xA3, 0x6B,  // +.0..1.k
                /* 04C8 */  0x15, 0xE7, 0xB0, 0xF2, 0xF7, 0x81, 0x4E, 0x5B,  // ......N[
                /* 04D0 */  0xEC, 0xB8, 0x70, 0x82, 0xAF, 0x41, 0xA7, 0x64,  // ..p..A.d
                /* 04D8 */  0x1C, 0x8F, 0xDA, 0xC3, 0xF7, 0x88, 0xAC, 0x14,  // ........
                /* 04E0 */  0x52, 0x17, 0x2B, 0xAE, 0x11, 0x46, 0x0A, 0x9F,  // R.+..F..
                /* 04E8 */  0x07, 0x3A, 0x1D, 0x71, 0x4D, 0x30, 0x82, 0x33,  // .:.qM0.3
                /* 04F0 */  0x88, 0x8F, 0x25, 0x4E, 0x02, 0x21, 0x23, 0x27,  // ..%N.!#'
                /* 04F8 */  0x01, 0xD4, 0xE8, 0x7C, 0x5B, 0xC1, 0x8F, 0x2F,  // ...|[../
                /* 0500 */  0xD0, 0x23, 0x43, 0x82, 0x13, 0x7B, 0xB5, 0x02,  // .#C..{..
                /* 0508 */  0xEF, 0x4D, 0x1B, 0x5C, 0x41, 0x26, 0x85, 0xD6,  // .M.\A&..
                /* 0510 */  0x72, 0x7B, 0x27, 0x83, 0xF2, 0x51, 0x22, 0xF4,  // r{'..Q".
                /* 0518 */  0xFF, 0xFF, 0x2D, 0x04, 0x33, 0x28, 0xF0, 0x9E,  // ..-.3(..
                /* 0520 */  0xF3, 0xF8, 0xA0, 0xC0, 0x73, 0x42, 0xF3, 0xA0,  // ....sB..
                /* 0528 */  0x70, 0x4A, 0x2E, 0x02, 0xBE, 0xB5, 0x90, 0x4B,  // pJ.....K
                /* 0530 */  0x8A, 0x8F, 0x14, 0x1E, 0x13, 0x98, 0x2F, 0x4E,  // ....../N
                /* 0538 */  0x7C, 0x4C, 0xE0, 0x49, 0x31, 0x26, 0xF4, 0xDD,  // |L.I1&..
                /* 0540 */  0x87, 0xDD, 0x28, 0xD8, 0xB1, 0xE2, 0x21, 0xCA,  // ..(...!.
                /* 0548 */  0x53, 0x02, 0x2F, 0x92, 0xA7, 0x04, 0xAE, 0x50,  // S./....P
                /* 0550 */  0x53, 0xF2, 0xB1, 0x82, 0xCE, 0x9A, 0xDF, 0x0C,  // S.......
                /* 0558 */  0xF8, 0xA4, 0x38, 0xC1, 0x04, 0x10, 0xBA, 0xCB,  // ..8.....
                /* 0560 */  0x78, 0x4C, 0xF0, 0xAE, 0xFD, 0xF0, 0xAE, 0x58,  // xL.....X
                /* 0568 */  0x1E, 0x1A, 0xAC, 0xFF, 0xFF, 0x1C, 0x3C, 0x34,  // ......<4
                /* 0570 */  0x70, 0xDD, 0xF6, 0x80, 0xC5, 0xEB, 0xC1, 0x17,  // p.......
                /* 0578 */  0x10, 0x1E, 0xF9, 0x04, 0x41, 0x41, 0x7C, 0x40,  // ....AA|@
                /* 0580 */  0x70, 0x9C, 0xC3, 0xA3, 0x2F, 0x20, 0xE8, 0x83,  // p.../ ..
                /* 0588 */  0x83, 0x07, 0xF4, 0xD4, 0xE4, 0x21, 0x9D, 0xCA,  // .....!..
                /* 0590 */  0xBB, 0x85, 0xEF, 0x36, 0xEC, 0xBA, 0x07, 0xEE,  // ...6....
                /* 0598 */  0xEB, 0x9C, 0xAF, 0x7B, 0xE0, 0x39, 0x2F, 0xF9,  // ...{.9/.
                /* 05A0 */  0xBA, 0x07, 0x5C, 0xE4, 0x1C, 0x60, 0x01, 0x11,  // ..\..`..
                /* 05A8 */  0xFF, 0xFF, 0xEB, 0x1E, 0xAC, 0xAB, 0x93, 0x0F,  // ........
                /* 05B0 */  0xB0, 0xE0, 0x3F, 0x5D, 0xB0, 0xD3, 0x1E, 0xF8,  // ..?]....
                /* 05B8 */  0x08, 0xA6, 0x7D, 0x57, 0xE8, 0x62, 0x84, 0x4B,  // ..}W.b.K
                /* 05C0 */  0xB5, 0x74, 0x1D, 0x02, 0xD9, 0xC5, 0x08, 0x66,  // .t.....f
                /* 05C8 */  0x0A, 0x48, 0x5D, 0x8C, 0xB8, 0x7E, 0x18, 0xE9,  // .H]..~..
                /* 05D0 */  0xBB, 0x18, 0xA1, 0x14, 0x5D, 0x8C, 0x28, 0x88,  // ....].(.
                /* 05D8 */  0x2F, 0x46, 0x00, 0x23, 0xFE, 0xFF, 0x17, 0x23,  // /F.#...#
                /* 05E0 */  0xC0, 0x4F, 0x88, 0x31, 0xA1, 0x75, 0x00, 0x93,  // .O.1.u..
                /* 05E8 */  0x73, 0xC1, 0x09, 0x3D, 0x18, 0x01, 0xDB, 0x4C,  // s..=...L
                /* 05F0 */  0x07, 0x23, 0x34, 0xB0, 0x4F, 0x06, 0x7C, 0x50,  // .#4.O.|P
                /* 05F8 */  0xEC, 0x5E, 0x04, 0xE6, 0x5B, 0x8C, 0xEF, 0x45,  // .^..[..E
                /* 0600 */  0xC0, 0xFB, 0xFF, 0x7F, 0x2F, 0x82, 0x23, 0xEF,  // ..../.#.
                /* 0608 */  0x65, 0xA0, 0xFB, 0x07, 0x17, 0x04, 0xA3, 0x03,  // e.......
                /* 0610 */  0x84, 0x41, 0x3C, 0x27, 0xDF, 0x8B, 0x00, 0x37,  // .A<'...7
                /* 0618 */  0x51, 0xC6, 0x85, 0xBE, 0xA3, 0xC1, 0x19, 0x15,  // Q.......
                /* 0620 */  0xB8, 0x8F, 0x05, 0x1E, 0x15, 0xF8, 0x8E, 0x69,  // .......i
                /* 0628 */  0xF8, 0xBB, 0x90, 0x0F, 0x69, 0x98, 0x83, 0x06,  // ....i...
                /* 0630 */  0x3B, 0x06, 0x78, 0x50, 0xE0, 0xBA, 0xA5, 0xE1,  // ;.xP....
                /* 0638 */  0xC6, 0x06, 0xCF, 0xC3, 0xF5, 0x01, 0x34, 0xFF,  // ......4.
                /* 0640 */  0xFF, 0xEB, 0x03, 0xBF, 0x66, 0x01, 0xEF, 0x53,  // ....f..S
                /* 0648 */  0x3A, 0xF0, 0xBD, 0x66, 0x81, 0xF9, 0x94, 0x8E,  // :..f....
                /* 0650 */  0xB9, 0x66, 0x81, 0x57, 0xF2, 0xAB, 0xC0, 0xA7,  // .f.W....
                /* 0658 */  0x67, 0x2A, 0x77, 0xDD, 0x14, 0xC6, 0x87, 0x74,  // g*w....t
                /* 0660 */  0xE0, 0xFE, 0xFF, 0x3F, 0xA4, 0x83, 0xEF, 0xDC,  // ...?....
                /* 0668 */  0xE4, 0x03, 0x00, 0x38, 0x8E, 0x0F, 0x67, 0x70,  // ...8..gp
                /* 0670 */  0x0A, 0xD1, 0xDE, 0xF6, 0x3D, 0xF3, 0xD7, 0x27,  // ....=..'
                /* 0678 */  0x0F, 0x29, 0x4A, 0xC0, 0x78, 0x31, 0xE2, 0x86,  // .)J.x1..
                /* 0680 */  0xF4, 0xB9, 0xDA, 0x17, 0x67, 0x03, 0xC5, 0x3B,  // ....g..;
                /* 0688 */  0xAC, 0xB0, 0x71, 0xDE, 0x03, 0x7C, 0x7C, 0x7E,  // ..q..||~
                /* 0690 */  0x0F, 0xF0, 0xE1, 0xC0, 0x40, 0x67, 0xFA, 0x12,  // ....@g..
                /* 0698 */  0x00, 0xFB, 0xA8, 0x0E, 0xDB, 0xDB, 0xE4, 0x04,  // ........
                /* 06A0 */  0x11, 0x21, 0xF0, 0x9B, 0xC5, 0x39, 0x45, 0x7E,  // .!...9E~
                /* 06A8 */  0x45, 0x3F, 0xC2, 0xD8, 0x4F, 0x70, 0xAF, 0x25,  // E?..Op.%
                /* 06B0 */  0x8F, 0xEA, 0x1E, 0xCA, 0xE3, 0x53, 0xD4, 0x28,  // .....S.(
                /* 06B8 */  0xCF, 0x1B, 0x61, 0x5E, 0xD2, 0x03, 0x46, 0x79,  // ..a^..Fy
                /* 06C0 */  0x38, 0x89, 0x16, 0x35, 0xF0, 0x5B, 0x42, 0x6C,  // 8..5.[Bl
                /* 06C8 */  0x83, 0x06, 0x7A, 0x53, 0xF7, 0x08, 0x1E, 0xD5,  // ..zS....
                /* 06D0 */  0x59, 0xB4, 0xA3, 0x3A, 0xA0, 0xF5, 0xFF, 0x7F,  // Y..:....
                /* 06D8 */  0x54, 0x07, 0x3E, 0xF7, 0x19, 0x1F, 0x61, 0xE0,  // T.>...a.
                /* 06E0 */  0x9F, 0x03, 0x9E, 0x14, 0x70, 0x97, 0x27, 0xDF,  // ....p.'.
                /* 06E8 */  0x19, 0x30, 0x04, 0x3E, 0xAD, 0x03, 0x8F, 0xE8,  // .0.>....
                /* 06F0 */  0xD7, 0x45, 0x1A, 0x1B, 0x44, 0x97, 0x48, 0x7E,  // .E..D.H~
                /* 06F8 */  0x96, 0x71, 0xC8, 0xE5, 0xEA, 0x12, 0xC9, 0xA7,  // .q......
                /* 0700 */  0xC4, 0x2E, 0x08, 0x86, 0x3F, 0x84, 0x20, 0x1E,  // ....?. .
                /* 0708 */  0x16, 0x9B, 0x82, 0xCF, 0x08, 0x26, 0x70, 0x9C,  // .....&p.
                /* 0710 */  0x13, 0x17, 0x1D, 0xBC, 0x83, 0x50, 0x28, 0xCA,  // .....P(.
                /* 0718 */  0xFD, 0x16, 0x25, 0x1E, 0x46, 0x70, 0x06, 0xF1,  // ..%.Fp..
                /* 0720 */  0x51, 0xC1, 0x81, 0x20, 0xE4, 0xE4, 0x3C, 0x80,  // Q.. ..<.
                /* 0728 */  0x3A, 0x9F, 0x78, 0x52, 0x27, 0x8B, 0x9D, 0x0B,  // :.xR'...
                /* 0730 */  0x6E, 0x76, 0x3E, 0x88, 0x24, 0x78, 0xEA, 0x79,  // nv>.$x.y
                /* 0738 */  0x95, 0x04, 0xEF, 0x9D, 0xE3, 0x4D, 0x09, 0x2C,  // .....M.,
                /* 0740 */  0x37, 0x8D, 0x57, 0x8E, 0xF7, 0x4D, 0x36, 0x30,  // 7.W..M60
                /* 0748 */  0xDC, 0xFF, 0xFF, 0x2C, 0xE9, 0x81, 0xE1, 0x8F,  // ...,....
                /* 0750 */  0x02, 0xC7, 0x75, 0x52, 0xE0, 0x1D, 0xB3, 0x27,  // ..uR...'
                /* 0758 */  0x05, 0xB6, 0xD3, 0x1D, 0xB0, 0x08, 0x8F, 0x4E,  // .......N
                /* 0760 */  0x61, 0x1C, 0x77, 0x48, 0x14, 0xC4, 0xA7, 0x03,  // a.wH....
                /* 0768 */  0x1F, 0xDB, 0x3C, 0x5A, 0xDC, 0x4C, 0x3C, 0xA2,  // ..<Z.L<.
                /* 0770 */  0xB7, 0x3B, 0xDC, 0xB1, 0x0D, 0xEC, 0x23, 0xF1,  // .;....#.
                /* 0778 */  0xB1, 0x0D, 0x3C, 0xA3, 0x65, 0x87, 0x31, 0x60,  // ..<.e.1`
                /* 0780 */  0x22, 0xE4, 0x30, 0x06, 0xBA, 0x21, 0xFB, 0x30,  // ".0..!.0
                /* 0788 */  0x86, 0xFB, 0xFF, 0x1F, 0xC6, 0x80, 0xDF, 0x31,  // .......1
                /* 0790 */  0xC0, 0x87, 0x27, 0x70, 0xDC, 0xC3, 0xF8, 0x81,  // ..'p....
                /* 0798 */  0x09, 0x0B, 0xF4, 0xEC, 0xC1, 0x71, 0x9E, 0x9C,  // .....q..
                /* 07A0 */  0x0C, 0xCC, 0xC1, 0xD8, 0xD5, 0x04, 0x7B, 0x9B,  // ......{.
                /* 07A8 */  0x30, 0xC1, 0x44, 0x5B, 0x4F, 0x40, 0x82, 0x0C,  // 0.D[O@..
                /* 07B0 */  0x5B, 0x12, 0x17, 0x4D, 0x61, 0x7C, 0x12, 0x03,  // [..Ma|..
                /* 07B8 */  0x5C, 0x1D, 0x26, 0x7C, 0x12, 0x03, 0xF3, 0xDC,  // \.&|....
                /* 07C0 */  0x19, 0x92, 0x51, 0x8D, 0xF8, 0x4E, 0xE0, 0x2B,  // ..Q..N.+
                /* 07C8 */  0x18, 0xCC, 0xFF, 0xFF, 0xB9, 0x8E, 0x9F, 0xC1,  // ........
                /* 07D0 */  0x60, 0x9F, 0xBA, 0x5E, 0x27, 0xDE, 0xBB, 0x0E,  // `..^'...
                /* 07D8 */  0xE9, 0xD1, 0x25, 0x42, 0x8C, 0x1F, 0x81, 0x77,  // ..%B...w
                /* 07E0 */  0xAF, 0x47, 0x8C, 0x73, 0x8B, 0x14, 0xFE, 0x19,  // .G.s....
                /* 07E8 */  0xCC, 0x27, 0xB0, 0x33, 0x78, 0xF7, 0x7A, 0x06,  // .'.3x.z.
                /* 07F0 */  0xF3, 0xF1, 0x2B, 0xD6, 0x33, 0x98, 0x81, 0x82,  // ..+.3...
                /* 07F8 */  0x46, 0x0C, 0x1A, 0x28, 0xDE, 0xD3, 0x98, 0x07,  // F..(....
                /* 0800 */  0x10, 0x27, 0x48, 0xE0, 0x67, 0x30, 0x80, 0x51,  // .'H.g0.Q
                /* 0808 */  0x56, 0x6F, 0x0A, 0xC8, 0x4B, 0x25, 0xFE, 0x0C,  // Vo..K%..
                /* 0810 */  0x06, 0x86, 0xFF, 0xFF, 0x19, 0x0C, 0x3C, 0x2A,  // ......<*
                /* 0818 */  0x7F, 0x46, 0x1A, 0xA5, 0xF5, 0xBC, 0x65, 0x74,  // .F....et
                /* 0820 */  0x06, 0xE3, 0x47, 0x02, 0x2B, 0x78, 0x22, 0x08,  // ..G.+x".
                /* 0828 */  0xFF, 0x45, 0x26, 0xF0, 0xD9, 0x3C, 0x12, 0x1C,  // .E&..<..
                /* 0830 */  0xC3, 0x43, 0x05, 0xBB, 0xB1, 0x3C, 0x51, 0x78,  // .C...<Qx
                /* 0838 */  0xBA, 0xCE, 0x7C, 0x22, 0xA3, 0x03, 0x77, 0x5A,  // ..|"..wZ
                /* 0840 */  0x18, 0xA9, 0x3A, 0x47, 0xA3, 0x74, 0x1C, 0xC3,  // ..:G.t..
                /* 0848 */  0x28, 0x88, 0x0F, 0x0D, 0x3E, 0x20, 0xE3, 0x07,  // (...> ..
                /* 0850 */  0xE7, 0x49, 0xE0, 0x8F, 0xC8, 0xFC, 0xF0, 0x05,  // .I......
                /* 0858 */  0x0C, 0x2F, 0xC8, 0xEC, 0x80, 0x8C, 0x1F, 0x98,  // ./......
                /* 0860 */  0x67, 0x0A, 0xE3, 0xBA, 0x0E, 0xDE, 0x4B, 0x80,  // g.....K.
                /* 0868 */  0x8F, 0x60, 0x30, 0x0F, 0xC8, 0xE0, 0x3A, 0x96,  // .`0...:.
                /* 0870 */  0xE2, 0x8E, 0x16, 0xFC, 0x1A, 0xE8, 0xF3, 0xC7,  // ........
                /* 0878 */  0xE3, 0x8F, 0x8F, 0x72, 0x1E, 0x3D, 0xAC, 0xFF,  // ...r.=..
                /* 0880 */  0xFF, 0xE8, 0xC1, 0x70, 0x3D, 0xF0, 0xE8, 0xE1,  // ...p=...
                /* 0888 */  0xDF, 0x3E, 0xB0, 0x97, 0x34, 0x60, 0x11, 0xEB,  // .>..4`..
                /* 0890 */  0x26, 0x88, 0xBA, 0x20, 0x79, 0xD2, 0x06, 0xF1,  // &.. y...
                /* 0898 */  0xC4, 0x7C, 0xA3, 0xF7, 0x25, 0x0D, 0x77, 0xA3,  // .|..%.w.
                /* 08A0 */  0x07, 0x5E, 0x50, 0xBE, 0xA6, 0x81, 0x2F, 0xD6,  // .^P.../.
                /* 08A8 */  0xB8, 0xD0, 0xA2, 0x2E, 0x0F, 0x50, 0x26, 0x10,  // .....P&.
                /* 08B0 */  0xE6, 0x44, 0x82, 0x3F, 0x89, 0x44, 0x78, 0x2A,  // .D.?.Dx*
                /* 08B8 */  0xF2, 0x6D, 0x8C, 0x8D, 0x0D, 0xEC, 0x07, 0x0A,  // .m......
                /* 08C0 */  0xDF, 0xE8, 0xC0, 0xF8, 0xFF, 0xBF, 0xD1, 0x01,  // ........
                /* 08C8 */  0x0B, 0x11, 0x37, 0x3A, 0xD0, 0xDD, 0x33, 0xF8,  // ..7:..3.
                /* 08D0 */  0x8D, 0x0E, 0x78, 0x5E, 0x37, 0x7C, 0x09, 0x03,  // ..x^7|..
                /* 08D8 */  0xCB, 0x15, 0x87, 0x5F, 0xC2, 0xF8, 0x15, 0xCC,  // ..._....
                /* 08E0 */  0x20, 0x61, 0x62, 0x86, 0xF1, 0x59, 0xCD, 0x38,  //  ab..Y.8
                /* 08E8 */  0x0F, 0x62, 0x0C, 0xE9, 0x29, 0x01, 0x7B, 0xF2,  // .b..).{.
                /* 08F0 */  0x70, 0xBE, 0x7B, 0x0F, 0x6A, 0x28, 0xCE, 0xF4,  // p.{.j(..
                /* 08F8 */  0x2A, 0xD0, 0xD4, 0xCF, 0xD7, 0xA7, 0x17, 0x18,  // *.......
                /* 0900 */  0x39, 0xE0, 0x74, 0xED, 0xE1, 0x09, 0x60, 0xA4,  // 9.t...`.
                /* 0908 */  0x7F, 0xF9, 0x3A, 0x6C, 0x70, 0xC5, 0xB7, 0x1F,  // ..:lp...
                /* 0910 */  0x0A, 0xE2, 0x2B, 0x89, 0xD3, 0x5C, 0x7B, 0xD0,  // ..+..\{.
                /* 0918 */  0x7A, 0x40, 0xE4, 0x73, 0xEC, 0x1A, 0xC2, 0x83,  // z@.s....
                /* 0920 */  0x0F, 0xF8, 0xFF, 0xFF, 0x07, 0x1F, 0xF0, 0xE7,  // ........
                /* 0928 */  0x3A, 0xF8, 0xA0, 0x07, 0xE3, 0x69, 0xC1, 0xBA,  // :....i..
                /* 0930 */  0xF9, 0x00, 0x0E, 0x8E, 0x00, 0x70, 0xAE, 0x5C,  // .....p.\
                /* 0938 */  0x27, 0x7F, 0x64, 0x8F, 0x00, 0xC0, 0xE6, 0xF4,  // '.d.....
                /* 0940 */  0x03, 0x8E, 0x23, 0x00, 0x18, 0xA6, 0x05, 0xEB,  // ..#.....
                /* 0948 */  0x08, 0x00, 0x6C, 0xFE, 0xFF, 0x83, 0x63, 0x48,  // ..l...cH
                /* 0950 */  0xBE, 0x4B, 0x01, 0x16, 0x86, 0xE9, 0xBB, 0x14,  // .K......
                /* 0958 */  0x70, 0xFE, 0x42, 0xF8, 0x3E, 0xC2, 0x23, 0x5F,  // p.B.>.#_
                /* 0960 */  0x23, 0x28, 0x88, 0xAF, 0x08, 0xBE, 0x4B, 0x01,  // #(....K.
                /* 0968 */  0xCF, 0x0B, 0x90, 0x2F, 0x48, 0xC0, 0xF7, 0xFF,  // .../H...
                /* 0970 */  0x0F, 0xCF, 0x25, 0x5C, 0x90, 0x40, 0x37, 0x6C,  // ..%\.@7l
                /* 0978 */  0x5F, 0x90, 0x80, 0x2B, 0xAA, 0x2F, 0x48, 0xE0,  // _..+./H.
                /* 0980 */  0xB8, 0x0B, 0xB1, 0xFB, 0x11, 0x58, 0xB5, 0xFE,  // .....X..
                /* 0988 */  0x28, 0x74, 0x3F, 0xE2, 0x1C, 0x56, 0xBA, 0x68,  // (t?..V.h
                /* 0990 */  0x1D, 0xAB, 0xD9, 0x05, 0xF7, 0x38, 0xDF, 0x72,  // .....8.r
                /* 0998 */  0xDE, 0x01, 0x8C, 0xE3, 0xB9, 0xF8, 0x3C, 0x61,  // ......<a
                /* 09A0 */  0xFC, 0x04, 0x95, 0x41, 0xEA, 0x86, 0xC4, 0x35,  // ...A...5
                /* 09A8 */  0xC1, 0x48, 0xDB, 0x41, 0x13, 0xA5, 0xE6, 0xA0,  // .H.A....
                /* 09B0 */  0x49, 0x41, 0x7C, 0xD0, 0x04, 0xBC, 0xFC, 0xFF,  // IA|.....
                /* 09B8 */  0x0F, 0x9A, 0x80, 0xA7, 0x30, 0xE3, 0x47, 0x4F,  // ....0.GO
                /* 09C0 */  0xC6, 0x77, 0x02, 0xFC, 0xF9, 0xD9, 0x47, 0x12,  // .w....G.
                /* 09C8 */  0x9F, 0xC1, 0x1F, 0x8F, 0x80, 0xE9, 0x7D, 0x06,  // ......}.
                /* 09D0 */  0x58, 0xC4, 0xBE, 0x3D, 0xA0, 0x82, 0xDE, 0x1E,  // X..=....
                /* 09D8 */  0x28, 0x88, 0x2F, 0x25, 0xBE, 0xCF, 0x00, 0xBB,  // (./%....
                /* 09E0 */  0xFF, 0xFF, 0x59, 0x13, 0xEC, 0x97, 0x0C, 0xFC,  // ..Y.....
                /* 09E8 */  0xF5, 0x9F, 0xDD, 0x1F, 0x1E, 0xD0, 0x7D, 0xC5,  // ......}.
                /* 09F0 */  0xE0, 0xA7, 0x4C, 0xE0, 0x79, 0x28, 0x60, 0x97,  // ..L.y(`.
                /* 09F8 */  0x0C, 0x18, 0x27, 0x0A, 0x8F, 0x8A, 0x13, 0x38,  // ..'....8
                /* 0A00 */  0xC4, 0x30, 0xE8, 0xA0, 0xC0, 0x75, 0xC8, 0xE0,  // .0...u..
                /* 0A08 */  0x0B, 0xF2, 0xFD, 0x08, 0xEE, 0x25, 0x03, 0x5C,  // .....%.\
                /* 0A10 */  0xC1, 0x86, 0x86, 0x96, 0x72, 0x4C, 0xA0, 0xC7,  // ....rL..
                /* 0A18 */  0x1B, 0x76, 0x8E, 0xF7, 0xBD, 0x87, 0x0D, 0x0E,  // .v......
                /* 0A20 */  0xDC, 0x87, 0x0C, 0x0F, 0x0E, 0xDE, 0x6D, 0xC3,  // ......m.
                /* 0A28 */  0x83, 0xFB, 0xFF, 0x1F, 0x1C, 0x98, 0xAE, 0x52,  // .......R
                /* 0A30 */  0xC0, 0x23, 0xF8, 0xD8, 0x51, 0x57, 0x29, 0x70,  // .#..QW)p
                /* 0A38 */  0x9C, 0xEB, 0xF8, 0x55, 0x0A, 0x78, 0x0E, 0xF0,  // ...U.x..
                /* 0A40 */  0x55, 0x0A, 0x2C, 0xD7, 0x26, 0x36, 0x87, 0xE7,  // U.,.&6..
                /* 0A48 */  0x26, 0x7E, 0x95, 0xF2, 0xA1, 0x06, 0x7B, 0x85,  // &~....{.
                /* 0A50 */  0xF1, 0xF5, 0x46, 0xA7, 0x56, 0x14, 0x87, 0xA3,  // ..F.V...
                /* 0A58 */  0x9C, 0x5A, 0x11, 0xB7, 0x28, 0x98, 0xD2, 0xCF,  // .Z..(...
                /* 0A60 */  0xAD, 0x28, 0xD1, 0x30, 0x92, 0x7C, 0x6E, 0x45,  // .(.0.|nE
                /* 0A68 */  0x89, 0x3C, 0xB7, 0x52, 0x10, 0x9F, 0x10, 0x7C,  // .<.R...|
                /* 0A70 */  0x8B, 0x02, 0xFB, 0xFF, 0xFF, 0x16, 0x05, 0xD8,  // ........
                /* 0A78 */  0x3F, 0xB4, 0xC2, 0x01, 0x7C, 0x8C, 0x02, 0x1C,  // ?...|...
                /* 0A80 */  0x5C, 0x44, 0x7D, 0x0D, 0x82, 0x3F, 0x26, 0xB0,  // \D}..?&.
                /* 0A88 */  0x22, 0x79, 0x4C, 0x98, 0xFF, 0xFF, 0x98, 0xC0,  // "yL.....
                /* 0A90 */  0x11, 0xE8, 0x8E, 0x80, 0x56, 0x71, 0x09, 0x42,  // ....Vq.B
                /* 0A98 */  0xDE, 0x10, 0xC0, 0xBB, 0x1C, 0x9F, 0x58, 0x61,  // ......Xa
                /* 0AA0 */  0xDE, 0x10, 0xC0, 0x75, 0x61, 0x05, 0xB8, 0xF3,  // ...ua...
                /* 0AA8 */  0xFF, 0x3F, 0x16, 0x81, 0xF9, 0x66, 0xC0, 0x8F,  // .?...f..
                /* 0AB0 */  0x45, 0x80, 0x8F, 0x0B, 0x2B, 0x3F, 0x16, 0x81,  // E...+?..
                /* 0AB8 */  0x2F, 0xCC, 0xB1, 0x08, 0x21, 0x72, 0x1C, 0x42,  // /...!r.B
                /* 0AC0 */  0x78, 0xB8, 0x81, 0x41, 0x50, 0xFC, 0xB1, 0x08,  // x..AP...
                /* 0AC8 */  0x25, 0x1B, 0x46, 0xA2, 0x8F, 0x45, 0x28, 0x99,  // %.F..E(.
                /* 0AD0 */  0xC7, 0x22, 0x0A, 0xE2, 0x33, 0x86, 0x83, 0x5C,  // ."..3..\
                /* 0AD8 */  0x50, 0xD0, 0x07, 0x35, 0x0F, 0xEA, 0x95, 0x96,  // P..5....
                /* 0AE0 */  0x9D, 0x3F, 0x3C, 0x38, 0x7E, 0x2A, 0x02, 0x9E,  // .?<8~*..
                /* 0AE8 */  0x17, 0x79, 0x38, 0x53, 0xFD, 0xFF, 0x9F, 0x2A,  // .y8S...*
                /* 0AF0 */  0xAC, 0x6B, 0x11, 0x60, 0xE0, 0x96, 0x05, 0x0C,  // .k.`....
                /* 0AF8 */  0x4F, 0x45, 0xC0, 0xE2, 0x02, 0xC0, 0x90, 0x9B,  // OE......
                /* 0B00 */  0xBF, 0x26, 0x90, 0x53, 0x11, 0x30, 0xBD, 0x88,  // .&.S.0..
                /* 0B08 */  0xC1, 0xB9, 0x3F, 0xC2, 0x38, 0x22, 0x80, 0xE1,  // ..?.8"..
                /* 0B10 */  0xFF, 0x7F, 0x44, 0x80, 0x05, 0xEC, 0x73, 0x11,  // ..D...s.
                /* 0B18 */  0xC0, 0xC5, 0xD8, 0xE7, 0x22, 0xD0, 0xC1, 0xF2,  // ...."...
                /* 0B20 */  0x73, 0x11, 0x18, 0xFE, 0xFF, 0xE7, 0x22, 0x60,  // s....."`
                /* 0B28 */  0x31, 0xC7, 0xE7, 0x22, 0xB0, 0xDD, 0x3E, 0x18,  // 1.."..>.
                /* 0B30 */  0x48, 0xB8, 0x97, 0x14, 0xEC, 0x89, 0xC3, 0xF1,  // H.......
                /* 0B38 */  0xDE, 0x12, 0x3A, 0x16, 0xF1, 0x0B, 0x84, 0x03,  // ..:.....
                /* 0B40 */  0xAD, 0x51, 0xB0, 0x01, 0xCF, 0xA1, 0xEB, 0xA1,  // .Q......
                /* 0B48 */  0x0B, 0xD4, 0x13, 0xA8, 0x71, 0x12, 0x02, 0x39,  // ....q..9
                /* 0B50 */  0xC4, 0xE0, 0x07, 0x70, 0x6C, 0x06, 0x8B, 0x11,  // ...pl...
                /* 0B58 */  0xED, 0x39, 0xE9, 0x35, 0xC8, 0x58, 0x47, 0xED,  // .9.5.XG.
                /* 0B60 */  0xAB, 0x92, 0xEF, 0x24, 0x82, 0xD7, 0xE1, 0x88,  // ...$....
                /* 0B68 */  0xCB, 0x85, 0x91, 0xD8, 0xFF, 0x85, 0x8E, 0x10,  // ........
                /* 0B70 */  0x5C, 0xDE, 0x19, 0x89, 0x82, 0x78, 0x7C, 0xCE,  // \....x|.
                /* 0B78 */  0x71, 0x09, 0xF1, 0xE1, 0x08, 0x14, 0x9A, 0x0F,  // q.......
                /* 0B80 */  0x47, 0x20, 0x3E, 0x7E, 0x80, 0x6B, 0x4E, 0x70,  // G >~.kNp
                /* 0B88 */  0xE6, 0xFF, 0x7E, 0x70, 0x4A, 0xCF, 0x29, 0x3E,  // ..~pJ.)>
                /* 0B90 */  0x17, 0x18, 0xE1, 0xB0, 0xCE, 0x09, 0xBC, 0x77,  // .......w
                /* 0B98 */  0x22, 0xCC, 0xFF, 0x7F, 0x4E, 0x60, 0xB9, 0xEE,  // "...N`..
                /* 0BA0 */  0x78, 0x4E, 0xB8, 0xBB, 0x8C, 0xE7, 0xF4, 0x28,  // xN.....(
                /* 0BA8 */  0x50, 0x31, 0xA6, 0xEE, 0x07, 0xD1, 0xA3, 0x3C,  // P1.....<
                /* 0BB0 */  0x3B, 0x78, 0x4C, 0x60, 0x3D, 0x17, 0x78, 0xDA,  // ;xL`=.x.
                /* 0BB8 */  0xE0, 0x3F, 0xAB, 0x3D, 0x10, 0xBD, 0x53, 0xF8,  // .?.=..S.
                /* 0BC0 */  0xAC, 0x62, 0xD8, 0xA8, 0x9E, 0x13, 0x78, 0xEF,  // .b....x.
                /* 0BC8 */  0xD2, 0x7C, 0xDA, 0xE0, 0xBE, 0x9F, 0x9C, 0xD1,  // .|......
                /* 0BD0 */  0x49, 0xBF, 0xA3, 0x3C, 0x19, 0xB0, 0x73, 0x87,  // I..<..s.
                /* 0BD8 */  0xC7, 0x04, 0xD6, 0xB3, 0x10, 0xF8, 0xC6, 0x04,  // ........
                /* 0BE0 */  0x86, 0xE3, 0xC8, 0x31, 0xE1, 0xFF, 0xFF, 0x63,  // ...1...c
                /* 0BE8 */  0x02, 0xCF, 0x3D, 0x1F, 0x7C, 0x07, 0x2B, 0x38,  // ..=.|.+8
                /* 0BF0 */  0xA7, 0x57, 0x7E, 0x37, 0xE0, 0x07, 0x2B, 0x30,  // .W~7..+0
                /* 0BF8 */  0x1F, 0x8D, 0x3D, 0x34, 0x58, 0xB7, 0x7C, 0xF0,  // ..=4X.|.
                /* 0C00 */  0x1D, 0xAC, 0x00, 0x93, 0x1E, 0x0E, 0x56, 0x20,  // ......V 
                /* 0C08 */  0xFD, 0xFF, 0x1F, 0xAC, 0x80, 0x85, 0x88, 0xC5,  // ........
                /* 0C10 */  0xEA, 0x60, 0x05, 0xAE, 0x9B, 0x01, 0x3F, 0x58,  // .`....?X
                /* 0C18 */  0x01, 0xCF, 0x5B, 0xA1, 0x0F, 0x56, 0xE0, 0x38,  // ..[..V.8
                /* 0C20 */  0x4A, 0xF1, 0x41, 0xBC, 0x4A, 0x71, 0x94, 0x67,  // J.A.Jq.g
                /* 0C28 */  0x29, 0x3C, 0x9C, 0xEF, 0x52, 0x70, 0xCE, 0x57,  // )<..Rp.W
                /* 0C30 */  0x16, 0xFE, 0xC6, 0xD0, 0xF9, 0x8A, 0x4B, 0x3A,  // ......K:
                /* 0C38 */  0x4D, 0x79, 0xCD, 0x3A, 0x6D, 0xB1, 0xF1, 0x1F,  // My.:m...
                /* 0C40 */  0xC6, 0x2B, 0x94, 0x27, 0x12, 0x37, 0x76, 0xDC,  // .+.'.7v.
                /* 0C48 */  0xC8, 0x27, 0x70, 0x42, 0xA7, 0x63, 0xB0, 0x47,  // .'pB.c.G
                /* 0C50 */  0x2D, 0x9D, 0x5F, 0xE9, 0x99, 0x87, 0xC0, 0x48,  // -._....H
                /* 0C58 */  0xFE, 0x21, 0x02, 0x25, 0x18, 0x46, 0x70, 0x06,  // .!.%.Fp.
                /* 0C60 */  0xF1, 0x39, 0xC0, 0xC7, 0x58, 0xDF, 0x54, 0x70,  // .9..X.Tp
                /* 0C68 */  0x5A, 0x8E, 0x61, 0x88, 0x2B, 0x84, 0x07, 0xE5,  // Z.a.+...
                /* 0C70 */  0x81, 0x3C, 0xDC, 0xFB, 0xAA, 0x02, 0x96, 0xFF,  // .<......
                /* 0C78 */  0xFF, 0xD5, 0x0A, 0x18, 0xA4, 0x18, 0x14, 0x1A,  // ........
                /* 0C80 */  0xD8, 0x83, 0x8A, 0xF8, 0xDC, 0x74, 0xFA, 0xCF,  // .....t..
                /* 0C88 */  0x44, 0x1E, 0xA8, 0x6F, 0x56, 0xC0, 0xF2, 0x8C,  // D..oV...
                /* 0C90 */  0x02, 0x2C, 0x62, 0x9D, 0x07, 0x50, 0x41, 0xCE,  // .,b..PA.
                /* 0C98 */  0x03, 0x14, 0xC4, 0x03, 0x73, 0x98, 0xB1, 0xA2,  // ....s...
                /* 0CA0 */  0xCF, 0x28, 0x70, 0xAF, 0x18, 0xCF, 0x28, 0x60,  // .(p...(`
                /* 0CA8 */  0x3E, 0x75, 0x81, 0x2F, 0xD8, 0x5D, 0x08, 0x7D,  // >u./.].}
                /* 0CB0 */  0xEA, 0xF2, 0x9D, 0x15, 0x06, 0xC1, 0x10, 0x87,  // ........
                /* 0CB8 */  0x21, 0x3A, 0x2A, 0xCC, 0xFF, 0x7F, 0x54, 0x60,  // !:*...T`
                /* 0CC0 */  0x38, 0x0D, 0xF1, 0x31, 0xF2, 0xC1, 0xC1, 0xB9,  // 8..1....
                /* 0CC8 */  0x7D, 0x81, 0xEF, 0x38, 0x03, 0x3C, 0xDE, 0x05,  // }..8.<..
                /* 0CD0 */  0x3E, 0xCE, 0x80, 0xEB, 0xE4, 0xE3, 0xE3, 0x0C,  // >.......
                /* 0CD8 */  0x70, 0x15, 0x7C, 0xEC, 0x04, 0xDD, 0xCD, 0x85,  // p.|.....
                /* 0CE0 */  0xA3, 0x3C, 0xBA, 0xC0, 0xC1, 0x0A, 0xFA, 0x00,  // .<......
                /* 0CE8 */  0xE6, 0xBB, 0x84, 0x6F, 0xF8, 0x2C, 0xFD, 0x61,  // ...o.,.a
                /* 0CF0 */  0x06, 0x75, 0x5E, 0x72, 0xE6, 0x15, 0xCB, 0xE3,  // .u^r....
                /* 0CF8 */  0x61, 0x06, 0x04, 0x33, 0xC0, 0xFD, 0xFF, 0x09,  // a..3....
                /* 0D00 */  0x66, 0x3B, 0xCF, 0xA0, 0x52, 0xC1, 0x48, 0xFF,  // f;..R.H.
                /* 0D08 */  0x81, 0x03, 0xA5, 0xF8, 0xC0, 0x41, 0x41, 0x7C,  // .....AA|
                /* 0D10 */  0x9E, 0x81, 0x37, 0x18, 0x76, 0x9E, 0x01, 0xD6,  // ..7.v...
                /* 0D18 */  0x97, 0x3D, 0x58, 0xC7, 0x0D, 0xFC, 0x7D, 0x06,  // .=X...}.
                /* 0D20 */  0x70, 0x25, 0xEA, 0x47, 0xA0, 0xFB, 0x00, 0x97,  // p%.G....
                /* 0D28 */  0x01, 0xA3, 0x19, 0x19, 0xC4, 0xB7, 0x13, 0xDF,  // ........
                /* 0D30 */  0x67, 0x80, 0xD3, 0xFF, 0xFF, 0x3E, 0x03, 0x1C,  // g....>..
                /* 0D38 */  0x6E, 0x0D, 0x78, 0x60, 0xDF, 0x08, 0x18, 0xE6,  // n.x`....
                /* 0D40 */  0x21, 0x9D, 0x8B, 0x07, 0x05, 0xF6, 0x7B, 0x0C,  // !.....{.
                /* 0D48 */  0xF8, 0x2E, 0x83, 0xBE, 0x32, 0x78, 0xE8, 0x38,  // ....2x.8
                /* 0D50 */  0xE0, 0xD7, 0x8A, 0x77, 0x69, 0xDF, 0xAA, 0x82,  // ...wi...
                /* 0D58 */  0x1E, 0xD3, 0x93, 0x89, 0x4F, 0x94, 0x2F, 0x83,  // ....O./.
                /* 0D60 */  0xE0, 0x3F, 0x15, 0xF8, 0x32, 0x08, 0x1E, 0x63,  // .?..2..c
                /* 0D68 */  0x02, 0xB4, 0x5D, 0x06, 0x81, 0xCC, 0x75, 0x07,  // ..]...u.
                /* 0D70 */  0x7C, 0xE0, 0xBE, 0xEE, 0xC0, 0xF9, 0xFF, 0x5F,  // |......_
                /* 0D78 */  0x77, 0x80, 0xFF, 0xFD, 0x85, 0x5D, 0x77, 0xC0,  // w....]w.
                /* 0D80 */  0x18, 0xE0, 0xBA, 0x83, 0x12, 0x75, 0x55, 0xF7,  // .....uU.
                /* 0D88 */  0x8A, 0x35, 0x12, 0x9F, 0x56, 0x02, 0x1B, 0xE4,  // .5..V...
                /* 0D90 */  0x79, 0xEE, 0x94, 0xDF, 0xDA, 0xE1, 0x09, 0xBC,  // y.......
                /* 0D98 */  0xEC, 0xA0, 0xA4, 0xC1, 0x28, 0xC0, 0x65, 0x07,  // ....(.e.
                /* 0DA0 */  0x25, 0xF9, 0xB2, 0x43, 0x41, 0x7C, 0x0C, 0xF0,  // %..CA|..
                /* 0DA8 */  0xAD, 0x1D, 0xB0, 0x71, 0x20, 0x82, 0x73, 0xD8,  // ...q .s.
                /* 0DB0 */  0xC1, 0xE3, 0x1F, 0x14, 0xB8, 0xFE, 0xFF, 0xA7,  // ........
                /* 0DB8 */  0x1D, 0xC0, 0x41, 0xB0, 0x03, 0x01, 0x2A, 0xCA,  // ..A...*.
                /* 0DC0 */  0x81, 0x80, 0x82, 0xF8, 0x32, 0x08, 0xB8, 0x89,  // ....2...
                /* 0DC8 */  0x76, 0x19, 0x44, 0x0F, 0x8B, 0x5F, 0x09, 0x70,  // v.D.._.p
                /* 0DD0 */  0x47, 0x87, 0xC3, 0x61, 0xB7, 0x41, 0xC0, 0xCD,  // G..a.A..
                /* 0DD8 */  0xFF, 0xFF, 0x3C, 0x03, 0x4E, 0x09, 0xE7, 0x19,  // ..<.N...
                /* 0DE0 */  0xD0, 0x99, 0x38, 0xCF, 0x00, 0xDD, 0xC3, 0x0E,  // ..8.....
                /* 0DE8 */  0xBF, 0x2B, 0x83, 0xE1, 0xF0, 0x82, 0x39, 0x2A,  // .+....9*
                /* 0DF0 */  0x83, 0x8D, 0x60, 0xF6, 0xD7, 0x87, 0x0E, 0x34,  // ..`....4
                /* 0DF8 */  0x9C, 0xC3, 0xD9, 0x17, 0xAD, 0x33, 0x0E, 0x13,  // .....3..
                /* 0E00 */  0x39, 0x0C, 0x21, 0x84, 0x0F, 0x7D, 0x34, 0x11,  // 9.!..}4.
                /* 0E08 */  0xCE, 0xE1, 0x11, 0xDA, 0xE3, 0x63, 0x59, 0x21,  // .....cY!
                /* 0E10 */  0x75, 0x9C, 0xE1, 0x29, 0x61, 0xA4, 0xEA, 0xAC,  // u..)a...
                /* 0E18 */  0x86, 0xD2, 0x71, 0x56, 0xA3, 0x20, 0x3E, 0x3B,  // ..qV. >;
                /* 0E20 */  0xF8, 0xAA, 0xE2, 0x13, 0x16, 0xEE, 0x38, 0x03,  // ......8.
                /* 0E28 */  0xEF, 0x9A, 0xED, 0xE3, 0x0C, 0x58, 0x87, 0xE8,  // .....X..
                /* 0E30 */  0x99, 0xFF, 0xFF, 0x5F, 0xAF, 0xC0, 0x73, 0x15,  // ..._..s.
                /* 0E38 */  0xF4, 0xA0, 0x70, 0xC8, 0x9E, 0x2A, 0x43, 0x7E,  // ..p..*C~
                /* 0E40 */  0x05, 0x3B, 0x2C, 0x8F, 0x09, 0xBC, 0xB3, 0xF5,  // .;,.....
                /* 0E48 */  0x98, 0xC0, 0x16, 0xEB, 0x3C, 0x82, 0xBE, 0xF1,  // ....<...
                /* 0E50 */  0xC0, 0x4C, 0x70, 0x1D, 0xA1, 0x93, 0x82, 0x77,  // .Lp....w
                /* 0E58 */  0x1B, 0x81, 0x07, 0xE6, 0xB9, 0xC1, 0x3A, 0xBA,  // ......:.
                /* 0E60 */  0x80, 0xEF, 0xE2, 0x03, 0x2C, 0xE2, 0x2C, 0x49,  // ....,.,I
                /* 0E68 */  0x57, 0x07, 0x1E, 0xE0, 0x7E, 0x45, 0x41, 0x3C,  // W...~EA<
                /* 0E70 */  0x2C, 0xDF, 0xF5, 0xEC, 0xE4, 0xE2, 0x03, 0x9A,  // ,.......
                /* 0E78 */  0xBB, 0x1E, 0x8C, 0xFF, 0xFF, 0x8D, 0x10, 0x6C,  // .......l
                /* 0E80 */  0x77, 0x3D, 0xF0, 0x38, 0x13, 0xA0, 0x0C, 0x92,  // w=.8....
                /* 0E88 */  0xDC, 0x8F, 0x7C, 0xC3, 0xC0, 0xA3, 0x3E, 0xBA,  // ..|...>.
                /* 0E90 */  0xBC, 0xD0, 0x62, 0x6F, 0x84, 0xC0, 0xF8, 0x7E,  // ..bo...~
                /* 0E98 */  0x04, 0xE7, 0x78, 0x02, 0xEF, 0x7E, 0x04, 0xEE,  // ..x..~..
                /* 0EA0 */  0x7B, 0x8D, 0x87, 0x07, 0xEF, 0x02, 0xC4, 0x6F,  // {......o
                /* 0EA8 */  0x99, 0xE0, 0x9E, 0x1B, 0xFE, 0x14, 0xF1, 0x0C,  // ........
                /* 0EB0 */  0xE4, 0x43, 0x00, 0xB8, 0xFE, 0xFF, 0xC3, 0x82,  // .C......
                /* 0EB8 */  0x71, 0x8A, 0xF0, 0x21, 0x00, 0x38, 0xDC, 0xB9,  // q..!.8..
                /* 0EC0 */  0x80, 0xD3, 0x21, 0x00, 0xEE, 0x39, 0x9D, 0xDF,  // ..!..9..
                /* 0EC8 */  0xB9, 0x80, 0x6F, 0xEC, 0x33, 0x02, 0xEA, 0xCE,  // ..o.3...
                /* 0ED0 */  0x05, 0x0E, 0x15, 0x77, 0x2E, 0xA0, 0x3B, 0xC7,  // ...w..;.
                /* 0ED8 */  0x77, 0x2E, 0xB8, 0xFF, 0xFF, 0x2B, 0x29, 0x8C,  // w....+).
                /* 0EE0 */  0x23, 0x07, 0x03, 0x79, 0xF7, 0xF5, 0x39, 0x02,  // #..y..9.
                /* 0EE8 */  0x77, 0x32, 0xB2, 0xA6, 0x85, 0xEA, 0x36, 0x8A,  // w2....6.
                /* 0EF0 */  0x53, 0xF4, 0xE7, 0x11, 0x38, 0xBB, 0x4E, 0xF8,  // S...8.N.
                /* 0EF8 */  0x36, 0xC4, 0x30, 0x5E, 0xC2, 0x7C, 0x4F, 0x31,  // 6.0^.|O1
                /* 0F00 */  0xB8, 0xAF, 0x2A, 0x3E, 0xA9, 0xB0, 0xF4, 0xD7,  // ..*>....
                /* 0F08 */  0x44, 0x7A, 0x01, 0x72, 0x6E, 0x12, 0xE5, 0x3E,  // Dz.rn..>
                /* 0F10 */  0x0D, 0x50, 0x38, 0x27, 0x3D, 0x32, 0x51, 0x10,  // .P8'=2Q.
                /* 0F18 */  0x03, 0xFA, 0x2E, 0xE5, 0x53, 0x0E, 0xEE, 0x60,  // ....S..`
                /* 0F20 */  0xE0, 0xF3, 0x81, 0x07, 0xE2, 0x61, 0x3D, 0x3A,  // .....a=:
                /* 0F28 */  0xB0, 0xEB, 0x16, 0x30, 0xBC, 0xE1, 0xB0, 0x0B,  // ...0....
                /* 0F30 */  0x12, 0xB0, 0x88, 0x3F, 0x57, 0x54, 0xE0, 0xB9,  // ...?WT..
                /* 0F38 */  0x52, 0x10, 0xCF, 0xD5, 0x37, 0x1F, 0x5B, 0xB9,  // R...7.[.
                /* 0F40 */  0xF9, 0xA0, 0x47, 0xE4, 0xCB, 0x07, 0x1B, 0x2C,  // ..G....,
                /* 0F48 */  0xBF, 0xA5, 0x80, 0x7D, 0x30, 0xBE, 0xA5, 0xC0,  // ...}0...
                /* 0F50 */  0xF9, 0xFF, 0x0F, 0x17, 0xCE, 0x29, 0xA5, 0xB4,  // .....)..
                /* 0F58 */  0xB3, 0x35, 0x90, 0x09, 0x7E, 0xF1, 0x00, 0xDD,  // .5..~...
                /* 0F60 */  0x38, 0x7D, 0xF1, 0x00, 0xAE, 0x03, 0x7C, 0xF1,  // 8}....|.
                /* 0F68 */  0x00, 0xDB, 0x7C, 0x8F, 0xF4, 0xC5, 0xC3, 0x77,  // ..|....w
                /* 0F70 */  0x0D, 0x18, 0xE7, 0x46, 0xA6, 0xE7, 0xE6, 0x81,  // ...F....
                /* 0F78 */  0xE2, 0xB0, 0x9A, 0x97, 0x82, 0x26, 0xFD, 0xE6,  // .....&..
                /* 0F80 */  0x01, 0xF7, 0xDE, 0x01, 0xC6, 0xC3, 0x03, 0xEE,  // ........
                /* 0F88 */  0xDE, 0x01, 0xEE, 0xFF, 0xFF, 0xBD, 0x03, 0xCC,  // ........
                /* 0F90 */  0x37, 0x07, 0x76, 0xEF, 0x00, 0x96, 0x67, 0x16,  // 7.v...g.
                /* 0F98 */  0xDC, 0xBD, 0x03, 0xF8, 0x9F, 0xF3, 0xF8, 0xBD,  // ........
                /* 0FA0 */  0x03, 0x78, 0x5F, 0x30, 0x7C, 0xEF, 0x00, 0x26,  // .x_0|..&
                /* 0FA8 */  0xFF, 0xFF, 0x7B, 0x07, 0x30, 0xB9, 0x68, 0xB0,  // ..{.0.h.
                /* 0FB0 */  0x7B, 0x07, 0x18, 0x72, 0x3F, 0x0F, 0x9E, 0x32,  // {..r?..2
                /* 0FB8 */  0xD9, 0x6B, 0x40, 0x22, 0x17, 0x4B, 0x61, 0x7C,  // .k@".Ka|
                /* 0FC0 */  0xA3, 0xF0, 0xF9, 0x00, 0x3F, 0xE2, 0x03, 0x3E,  // ....?..>
                /* 0FC8 */  0x84, 0x43, 0x62, 0x92, 0xE0, 0x50, 0x87, 0x01,  // .Cb..P..
                /* 0FD0 */  0x8F, 0xE3, 0x71, 0xF6, 0x44, 0x5E, 0x8B, 0x3D,  // ..q.D^.=
                /* 0FD8 */  0x12, 0x43, 0xB2, 0x4B, 0x85, 0xC7, 0xC6, 0x8F,  // .C.K....
                /* 0FE0 */  0x0E, 0x1E, 0xD8, 0x0B, 0xB2, 0x4F, 0xCA, 0xBE,  // .....O..
                /* 0FE8 */  0x70, 0xFA, 0x28, 0xE2, 0x63, 0x00, 0x3F, 0x27,  // p.(.c.?'
                /* 0FF0 */  0x33, 0xB4, 0xD0, 0xD8, 0x61, 0x78, 0x80, 0xC1,  // 3...ax..
                /* 0FF8 */  0x8E, 0xCE, 0x77, 0x00, 0x13, 0x78, 0x42, 0xA7,  // ..w..xB.
                /* 1000 */  0x59, 0xEE, 0xBD, 0x41, 0xE2, 0x51, 0x85, 0xD1,  // Y..A.Q..
                /* 1008 */  0x1C, 0x14, 0x09, 0x30, 0x6A, 0xD0, 0x9C, 0x19,  // ...0j...
                /* 1010 */  0xCE, 0xE0, 0x0D, 0x8C, 0x0D, 0xFA, 0x59, 0xD3,  // ......Y.
                /* 1018 */  0xB7, 0x02, 0xA3, 0xD4, 0x3C, 0x67, 0x02, 0x52,  // ....<g.R
                /* 1020 */  0xE1, 0x38, 0xB5, 0xE6, 0xF3, 0x88, 0x12, 0xCD,  // .8......
                /* 1028 */  0xD8, 0xC1, 0x7D, 0x91, 0x36, 0xCE, 0x83, 0x42,  // ..}.6..B
                /* 1030 */  0xA8, 0x5A, 0x27, 0x47, 0x60, 0x8E, 0x81, 0x01,  // .Z'G`...
                /* 1038 */  0xBD, 0x4D, 0x3C, 0x00, 0xB4, 0x76, 0x2D, 0xA2,  // .M<..v-.
                /* 1040 */  0x57, 0x7D, 0x0F, 0x88, 0x9F, 0x0E, 0x0C, 0xFD,  // W}......
                /* 1048 */  0x5E, 0xE1, 0x53, 0x02, 0x73, 0x7F, 0xC5, 0x96,  // ^.S.s...
                /* 1050 */  0x37, 0x54, 0x61, 0x84, 0x78, 0x32, 0x89, 0x60,  // 7Ta.x2.`
                /* 1058 */  0x5B, 0x53, 0xD1, 0x65, 0x2F, 0xC4, 0xEB, 0x45,  // [S.e/..E
                /* 1060 */  0x94, 0x03, 0x38, 0xA8, 0x60, 0x51, 0xA3, 0xBC,  // ..8.`Q..
                /* 1068 */  0x54, 0x1C, 0xE3, 0x03, 0xE2, 0xFF, 0xFF, 0xC4,  // T.......
                /* 1070 */  0xA2, 0xC4, 0x8D, 0x15, 0x30, 0x42, 0xE4, 0xB0,  // ....0B..
                /* 1078 */  0x67, 0xF2, 0x7E, 0x10, 0xDC, 0xB0, 0xB1, 0xDA,  // g.~.....
                /* 1080 */  0x1F, 0x04, 0x89, 0x75, 0x2E, 0xD0, 0xE1, 0xD0,  // ...u....
                /* 1088 */  0x91, 0x46, 0x83, 0x3A, 0x6B, 0xF8, 0x6C, 0xE0,  // .F.:k.l.
                /* 1090 */  0x93, 0x82, 0x27, 0xF6, 0x8C, 0x6A, 0x90, 0x37,  // ..'..j.7
                /* 1098 */  0x70, 0xEB, 0x3C, 0x14, 0x90, 0xE1, 0xB3, 0xD3,  // p.<.....
                /* 10A0 */  0x88, 0x0F, 0x25, 0x70, 0x5C, 0x03, 0xEA, 0x7A,  // ..%p\..z
                /* 10A8 */  0xF0, 0x5C, 0x01, 0x96, 0x53, 0x09, 0xFC, 0xF1,  // .\..S...
                /* 10B0 */  0xF8, 0x34, 0xE0, 0xD9, 0x9B, 0xC0, 0xF2, 0x07,  // .4......
                /* 10B8 */  0x81, 0xBA, 0xF6, 0xF0, 0xA1, 0x9E, 0xD6, 0x6B,  // .......k
                /* 10C0 */  0x80, 0x6F, 0x94, 0x26, 0xF0, 0x11, 0xD2, 0xC7,  // .o.&....
                /* 10C8 */  0x18, 0x8F, 0x07, 0xFC, 0x8A, 0x8F, 0x05, 0x42,  // .......B
                /* 10D0 */  0x78, 0x73, 0xF0, 0x7C, 0x4D, 0x50, 0xDE, 0xA1,  // xs.|MP..
                /* 10D8 */  0x05, 0x14, 0x97, 0x05, 0x7E, 0xF6, 0x60, 0x87,  // ....~.`.
                /* 10E0 */  0x05, 0x7E, 0x9E, 0xF5, 0x21, 0x02, 0x0B, 0xCF,  // .~..!...
                /* 10E8 */  0x0F, 0x01, 0x8F, 0x2F, 0x0C, 0xF8, 0x0D, 0xC6,  // .../....
                /* 10F0 */  0x53, 0x38, 0x1C, 0x1F, 0x2F, 0x8C, 0x10, 0xFE,  // S8../...
                /* 10F8 */  0xA9, 0xE2, 0x29, 0xC3, 0x67, 0x88, 0xF3, 0x79,  // ..).g..y
                /* 1100 */  0x5E, 0x38, 0xA3, 0x27, 0x1E, 0x96, 0xE4, 0xAD,  // ^8.'....
                /* 1108 */  0xA8, 0xE3, 0x86, 0xD3, 0x1E, 0x0D, 0xD1, 0x29,  // .......)
                /* 1110 */  0x17, 0x2B, 0xFC, 0x37, 0x98, 0xC0, 0xC7, 0xFC,  // .+.7....
                /* 1118 */  0x40, 0xF0, 0xF6, 0x8A, 0xFB, 0xFF, 0x5F, 0x13,  // @....._.
                /* 1120 */  0x3D, 0x8B, 0xE7, 0x8C, 0x53, 0x7A, 0x06, 0x30,  // =...Sz.0
                /* 1128 */  0x81, 0x13, 0x5D, 0xE9, 0xE9, 0xC8, 0x9D, 0x85,  // ..].....
                /* 1130 */  0x42, 0x57, 0x2A, 0xF8, 0xA7, 0x06, 0xDC, 0xD0,  // BW*.....
                /* 1138 */  0xD9, 0x2C, 0xDE, 0xFD, 0x3D, 0x6B, 0xDF, 0x01,  // .,..=k..
                /* 1140 */  0x7C, 0xA5, 0x02, 0x66, 0xF7, 0x05, 0xEC, 0x95,  // |..f....
                /* 1148 */  0x0A, 0x58, 0x44, 0xDA, 0xA7, 0xE6, 0xCA, 0x43,  // .XD....C
                /* 1150 */  0x9C, 0xCA, 0x28, 0x88, 0x27, 0xE6, 0xAB, 0x38,  // ..(.'..8
                /* 1158 */  0xF0, 0xBC, 0x53, 0x81, 0xF3, 0x5E, 0xE2, 0x71,  // ..S..^.q
                /* 1160 */  0xE1, 0xDE, 0x0B, 0x3E, 0x2A, 0xC0, 0xBC, 0x8D,  // ...>*...
                /* 1168 */  0x63, 0xFE, 0xFF, 0x23, 0x03, 0xEF, 0x7D, 0xC1,  // c..#..}.
                /* 1170 */  0x97, 0x2F, 0xE0, 0x7D, 0x77, 0xF3, 0xE5, 0x0B,  // ./.}w...
                /* 1178 */  0x5C, 0x87, 0x00, 0x5F, 0xBE, 0x80, 0xEB, 0xB5,  // \.._....
                /* 1180 */  0xE4, 0xBD, 0x09, 0x3C, 0x97, 0x12, 0x7E, 0x17,  // ...<..~.
                /* 1188 */  0x86, 0x81, 0x14, 0xED, 0xDD, 0x80, 0x0F, 0xCC,  // ........
                /* 1190 */  0xF7, 0x20, 0x1F, 0x3A, 0x2C, 0xE3, 0x9A, 0x82,  // . .:,...
                /* 1198 */  0x3A, 0x33, 0x39, 0xFA, 0x3A, 0x75, 0xAC, 0x64,  // :39.:u.d
                /* 11A0 */  0xB3, 0x8F, 0x1E, 0xFF, 0xE9, 0xC9, 0x17, 0x99,  // ........
                /* 11A8 */  0xC0, 0xCF, 0x0B, 0xF8, 0x23, 0xB1, 0x8F, 0x64,  // ....#..d
                /* 11B0 */  0xBE, 0x51, 0x99, 0xC0, 0x01, 0xCF, 0x19, 0xF4,  // .Q......
                /* 11B8 */  0xFF, 0x0F, 0xE1, 0x68, 0x14, 0x0A, 0x76, 0xDC,  // ...h..v.
                /* 11C0 */  0x40, 0x45, 0x81, 0xA3, 0x20, 0x3E, 0x6E, 0x00,  // @E.. >n.
                /* 11C8 */  0x57, 0x02, 0x9F, 0x22, 0xC0, 0x17, 0x6C, 0x5C,  // W.."..l\
                /* 11D0 */  0xE8, 0xA3, 0x82, 0xA7, 0x0C, 0xAE, 0xDB, 0x23,  // .......#
                /* 11D8 */  0xE0, 0x4D, 0xC2, 0x7A, 0x74, 0xE2, 0x00, 0xD7,  // .M.zt...
                /* 11E0 */  0xE1, 0xC4, 0x27, 0x0E, 0x38, 0xFF, 0xFF, 0x13,  // ..'.8...
                /* 11E8 */  0x07, 0xF0, 0x42, 0xF5, 0x29, 0x18, 0x5C, 0x50,  // ..B.).\P
                /* 11F0 */  0x4F, 0x07, 0x1C, 0xE6, 0x61, 0x8F, 0x5D, 0x3A,  // O...a.]:
                /* 11F8 */  0x60, 0x5C, 0xE5, 0xD8, 0xF5, 0x80, 0x9D, 0x39,  // `\.....9
                /* 1200 */  0x9C, 0xE8, 0x57, 0xA7, 0x33, 0x07, 0x2E, 0xC5,  // ..W.3...
                /* 1208 */  0x92, 0x75, 0x0D, 0x63, 0x67, 0x0E, 0xB0, 0x69,  // .u.cg..i
                /* 1210 */  0x05, 0xD7, 0x65, 0x8B, 0xAB, 0x84, 0x91, 0x46,  // ..e....F
                /* 1218 */  0x12, 0x9D, 0x39, 0xB8, 0xAA, 0x3B, 0x17, 0x05,  // ..9..;..
                /* 1220 */  0xF1, 0x8D, 0xCF, 0x51, 0x20, 0xA4, 0xE4, 0xCC,  // ...Q ...
                /* 1228 */  0x81, 0x1E, 0x08, 0xFE, 0xA6, 0xEC, 0x71, 0xFA,  // ......q.
                /* 1230 */  0x44, 0x0C, 0x0C, 0x0F, 0x88, 0xAF, 0x86, 0x09,  // D.......
                /* 1238 */  0x86, 0x82, 0x90, 0x91, 0x21, 0xD3, 0x51, 0x79,  // ....!.Qy
                /* 1240 */  0x60, 0x1E, 0x15, 0x9E, 0x60, 0x82, 0xDB, 0x83,  // `...`...
                /* 1248 */  0xE7, 0x04, 0xE1, 0xFF, 0x3F, 0x27, 0xCC, 0x4D,  // ....?'.M
                /* 1250 */  0x03, 0x3F, 0x98, 0xF7, 0x89, 0x67, 0x3F, 0xDF,  // .?...g?.
                /* 1258 */  0x13, 0x3C, 0x35, 0x58, 0xC7, 0x20, 0x3E, 0x35,  // .<5X. >5
                /* 1260 */  0x70, 0xDC, 0x23, 0x0F, 0x8D, 0x8D, 0x1F, 0x77,  // p.#....w
                /* 1268 */  0x36, 0x01, 0xDF, 0x21, 0x00, 0xAC, 0xB7, 0x04,  // 6..!....
                /* 1270 */  0x1F, 0x02, 0xC0, 0x76, 0x85, 0x03, 0x16, 0xFB,  // ...v....
                /* 1278 */  0xF6, 0x0D, 0x82, 0x47, 0x9E, 0x3B, 0x05, 0xF1,  // ...G.;..
                /* 1280 */  0xA0, 0x7C, 0x09, 0x02, 0x9E, 0x50, 0xBE, 0xD8,  // .|...P..
                /* 1288 */  0xC0, 0xFE, 0xFF, 0x5F, 0x6C, 0x00, 0x13, 0x90,  // ..._l...
                /* 1290 */  0xBE, 0xD8, 0x00, 0x4E, 0x8E, 0xD9, 0xFC, 0x62,  // ...N...b
                /* 1298 */  0x03, 0x4E, 0xD9, 0x17, 0x1B, 0xD4, 0x91, 0xC0,  // .N......
                /* 12A0 */  0x62, 0x57, 0xAA, 0xCB, 0x0E, 0xBB, 0xB2, 0xBE,  // bW......
                /* 12A8 */  0xA1, 0xB2, 0xD9, 0xF8, 0x60, 0xED, 0x83, 0x9A,  // ....`...
                /* 12B0 */  0x47, 0xFD, 0xB6, 0xC0, 0x06, 0xFB, 0x08, 0x8C,  // G.......
                /* 12B8 */  0x13, 0x75, 0xAF, 0x41, 0xC9, 0x81, 0x51, 0x80,  // .u.A..Q.
                /* 12C0 */  0x63, 0x04, 0x4A, 0xF2, 0xD5, 0x8C, 0x82, 0xF8,  // c.J.....
                /* 12C8 */  0x00, 0xE0, 0x43, 0x29, 0x18, 0xFF, 0xFF, 0x87,  // ..C)....
                /* 12D0 */  0x52, 0x60, 0x96, 0xE4, 0xAE, 0x82, 0xD6, 0x72,  // R`.....r
                /* 12D8 */  0x12, 0x20, 0x97, 0x3C, 0x1F, 0xF6, 0x0E, 0xF4,  // . .<....
                /* 12E0 */  0xC4, 0x4F, 0xEA, 0x05, 0xF8, 0xA9, 0x9C, 0x4D,  // .O.....M
                /* 12E8 */  0x0A, 0xAC, 0xC3, 0xF5, 0x31, 0x05, 0x38, 0x87,  // ....1.8.
                /* 12F0 */  0x39, 0x10, 0xA0, 0xE4, 0x1F, 0x08, 0x28, 0x88,  // 9.....(.
                /* 12F8 */  0xAF, 0x7E, 0xC0, 0xF5, 0x3E, 0x0A, 0xCE, 0x30,  // .~..>..0
                /* 1300 */  0xE7, 0x06, 0xF4, 0xD1, 0xD9, 0xC0, 0xFF, 0xFF,  // ........
                /* 1308 */  0x97, 0x09, 0x18, 0x87, 0x19, 0xE0, 0x77, 0x3A,  // ......w:
                /* 1310 */  0xC7, 0x1F, 0x66, 0x80, 0xC7, 0x93, 0xC0, 0x87,  // ..f.....
                /* 1318 */  0x19, 0x70, 0x81, 0xFB, 0x30, 0x03, 0x5C, 0x05,  // .p..0.\.
                /* 1320 */  0x5F, 0xFA, 0x40, 0x77, 0x90, 0x67, 0x28, 0xBE,  // _.@w.g(.
                /* 1328 */  0x18, 0xF8, 0xE4, 0xC2, 0x71, 0x4E, 0xEB, 0xE9,  // ....qN..
                /* 1330 */  0x80, 0xC3, 0x04, 0x7E, 0x3B, 0x60, 0x47, 0x0E,  // ...~;`G.
                /* 1338 */  0x8B, 0xBF, 0xF3, 0xA1, 0xE5, 0x9E, 0x65, 0x20,  // ......e 
                /* 1340 */  0xDF, 0x72, 0x3C, 0x1D, 0xFF, 0xFF, 0x07, 0xF0,  // .r<.....
                /* 1348 */  0xBC, 0xE0, 0x3B, 0x09, 0xEE, 0x30, 0x03, 0xB0,  // ..;..0..
                /* 1350 */  0xFD, 0xFF, 0x7F, 0x98, 0x01, 0xB6, 0xB7, 0x09,  // ........
                /* 1358 */  0x18, 0x87, 0x19, 0xC0, 0x9C, 0x88, 0xC3, 0x0C,  // ........
                /* 1360 */  0xE8, 0x4C, 0x1C, 0x66, 0x80, 0xEE, 0x4D, 0xC3,  // .L.f..M.
                /* 1368 */  0x87, 0x19, 0x30, 0xFC, 0xFF, 0x0F, 0x33, 0x60,  // ..0...3`
                /* 1370 */  0x80, 0x7E, 0x3A, 0xC0, 0x5C, 0x66, 0x7C, 0x05,  // .~:.\f|.
                /* 1378 */  0xC1, 0xDC, 0x39, 0x4C, 0x30, 0xDE, 0xBB, 0x41,  // ..9L0..A
                /* 1380 */  0xC7, 0x19, 0x3E, 0x14, 0x5F, 0xE3, 0x3D, 0x0A,  // ..>._.=.
                /* 1388 */  0x36, 0xFE, 0xF7, 0x3E, 0xA3, 0xF8, 0x00, 0x10,  // 6..>....
                /* 1390 */  0xFF, 0x7D, 0xC0, 0xA1, 0x6E, 0xF3, 0xA8, 0x38,  // .}..n..8
                /* 1398 */  0x14, 0x3A, 0x67, 0x00, 0x0E, 0x6E, 0xF3, 0xE0,  // .:g..n..
                /* 13A0 */  0x3C, 0x67, 0xC0, 0x99, 0x2B, 0x8C, 0x7B, 0x3C,  // <g..+.{<
                /* 13A8 */  0x30, 0x3C, 0x67, 0x00, 0x83, 0xFF, 0xFF, 0x39,  // 0<g....9
                /* 13B0 */  0x03, 0x56, 0x68, 0x08, 0x9D, 0x33, 0xC0, 0xA5,  // .Vh..3..
                /* 13B8 */  0xE2, 0x9C, 0x01, 0x74, 0x45, 0x9E, 0x33, 0x40,  // ...tE.3@
                /* 13C0 */  0x77, 0x34, 0x65, 0x30, 0xEC, 0x62, 0xEA, 0xB9,  // w4e0.b..
                /* 13C8 */  0x3F, 0x5F, 0x30, 0xA1, 0xA7, 0x2F, 0xD4, 0x10,  // ?_0../..
                /* 13D0 */  0x2C, 0xF5, 0x02, 0x8F, 0xB8, 0x23, 0xC0, 0x90,  // ,....#..
                /* 13D8 */  0x77, 0xEC, 0x42, 0x09, 0x83, 0x91, 0xAC, 0x9B,  // w.B.....
                /* 13E0 */  0x3B, 0x4A, 0xC8, 0xCD, 0x9D, 0x82, 0xF8, 0xE6,  // ;J......
                /* 13E8 */  0x0E, 0xD8, 0xFA, 0xFF, 0xDF, 0xDC, 0x01, 0x23,  // .......#
                /* 13F0 */  0x39, 0xCE, 0x21, 0xE8, 0xA1, 0xF9, 0x4E, 0x00,  // 9.!...N.
                /* 13F8 */  0xE3, 0xCC, 0x0E, 0xCC, 0x4E, 0x21, 0xD8, 0x33,  // ....N!.3
                /* 1400 */  0x3B, 0xE0, 0xF7, 0xFF, 0x7F, 0x66, 0x07, 0x96,  // ;....f..
                /* 1408 */  0x87, 0x18, 0xF0, 0x8D, 0xD3, 0x87, 0x18, 0xC0,  // ........
                /* 1410 */  0xC9, 0x99, 0x9D, 0x1F, 0x62, 0xE0, 0x25, 0x5D,  // ....b.%]
                /* 1418 */  0xA7, 0x0E, 0x31, 0x9C, 0xC3, 0x39, 0x1F, 0x0A,  // ..1..9..
                /* 1420 */  0x9A, 0x7A, 0xF8, 0x63, 0xF2, 0x8D, 0xF4, 0x04,  // .z.c....
                /* 1428 */  0xFB, 0x9C, 0x80, 0xC6, 0x61, 0xCD, 0x48, 0x3A,  // ....a.H:
                /* 1430 */  0x0B, 0x1C, 0xE3, 0xD3, 0x81, 0x73, 0x9D, 0x5F,  // .....s._
                /* 1438 */  0xE8, 0x99, 0xC1, 0x89, 0x28, 0x94, 0xE7, 0xEC,  // ....(...
                /* 1440 */  0x80, 0x4A, 0x70, 0xEA, 0xA2, 0x20, 0x1E, 0xBE,  // .Jp.. ..
                /* 1448 */  0x8F, 0x31, 0xC0, 0xE8, 0xFF, 0x7F, 0x8C, 0x01,  // .1......
                /* 1450 */  0x4C, 0x5F, 0x51, 0x00, 0x93, 0x77, 0x52, 0x70,  // L_Q..wRp
                /* 1458 */  0x5E, 0x51, 0xE0, 0xFD, 0xFF, 0xAF, 0x28, 0xE0,  // ^Q....(.
                /* 1460 */  0x0B, 0x7E, 0x45, 0x01, 0x9D, 0x8D, 0x2B, 0x0A,  // .~E...+.
                /* 1468 */  0xD0, 0x1D, 0xE0, 0x2B, 0x0A, 0x58, 0x6E, 0x25,  // ...+.Xn%
                /* 1470 */  0x7C, 0x10, 0x8F, 0x25, 0xFC, 0xB8, 0xC9, 0xAE,  // |..%....
                /* 1478 */  0x25, 0x98, 0x4B, 0x0A, 0x8B, 0x7D, 0xCF, 0x44,  // %.K..}.D
                /* 1480 */  0x71, 0x38, 0xF4, 0x3D, 0x13, 0x71, 0x0B, 0xE7,  // q8.=.q..
                /* 1488 */  0xA7, 0x16, 0x1B, 0x87, 0xD6, 0x14, 0x7D, 0xF9,  // ......}.
                /* 1490 */  0x34, 0xC1, 0x90, 0x37, 0x4D, 0x54, 0x3C, 0x0A,  // 4..7MT<.
                /* 1498 */  0x85, 0x3B, 0x3D, 0xA0, 0x6E, 0x9B, 0xBE, 0x6F,  // .;=.n..o
                /* 14A0 */  0xF2, 0x9B, 0x26, 0xE0, 0xE0, 0xFF, 0x7F, 0x7A,  // ..&....z
                /* 14A8 */  0x80, 0x1B, 0xEE, 0x9A, 0x82, 0x1E, 0x87, 0x67,  // .......g
                /* 14B0 */  0xCB, 0x91, 0x5F, 0x02, 0x7C, 0x4F, 0xF1, 0x7D,  // .._.|O.}
                /* 14B8 */  0xC0, 0xE6, 0x21, 0x49, 0x88, 0x93, 0x0A, 0x1D,  // ..!I....
                /* 14C0 */  0x18, 0xB8, 0x8E, 0x2A, 0x7C, 0x50, 0xBE, 0x72,  // ...*|P.r
                /* 14C8 */  0xC2, 0xBD, 0xAA, 0x80, 0xEB, 0xAC, 0x01, 0xBC,  // ........
                /* 14D0 */  0xC7, 0xE2, 0xB3, 0x06, 0xE0, 0xE4, 0xA2, 0x0C,  // ........
                /* 14D8 */  0xE3, 0x7C, 0xE5, 0xD3, 0x05, 0xFB, 0xFF, 0x9F,  // .|......
                /* 14E0 */  0x2E, 0xD8, 0x59, 0x83, 0x25, 0xB8, 0x73, 0xA2,  // ..Y.%.s.
                /* 14E8 */  0x38, 0xAC, 0xFF, 0xCE, 0x89, 0x38, 0x6B, 0xC0,  // 8....8k.
                /* 14F0 */  0xD4, 0x7B, 0xEB, 0x44, 0x29, 0x85, 0x91, 0xCE,  // .{.D)...
                /* 14F8 */  0x5B, 0x27, 0x4A, 0xD9, 0x35, 0x8B, 0x82, 0xF8,  // ['J.5...
                /* 1500 */  0xD6, 0x09, 0xF0, 0x27, 0xD8, 0xD0, 0xD0, 0xB3,  // ...'....
                /* 1508 */  0xF0, 0x99, 0x04, 0xE6, 0xE0, 0xC0, 0xF4, 0xFF,  // ........
                /* 1510 */  0xBF, 0x91, 0xC0, 0xB8, 0x7E, 0xC2, 0xBC, 0x8B,  // ....~...
                /* 1518 */  0x01, 0xD6, 0x8F, 0x9F, 0xC0, 0xFD, 0x42, 0x03,  // ......B.
                /* 1520 */  0x3E, 0x23, 0x17, 0x1A, 0x10, 0xFE, 0xFF, 0x2F,  // >#...../
                /* 1528 */  0x34, 0xC0, 0xF2, 0xF8, 0xC9, 0x2F, 0x34, 0xF0,  // 4..../4.
                /* 1530 */  0x03, 0x1F, 0x40, 0x51, 0xA2, 0x20, 0x14, 0xF3,  // ..@Q. ..
                /* 1538 */  0xA9, 0xA0, 0xFB, 0x0D, 0x9B, 0x86, 0xB5, 0x0F,  // ........
                /* 1540 */  0x42, 0xB0, 0x9E, 0xCD, 0xB3, 0x86, 0xEF, 0x34,  // B......4
                /* 1548 */  0x3E, 0x8F, 0x7A, 0x4E, 0x8C, 0x60, 0xA4, 0x23,  // >.zN.`.#
                /* 1550 */  0x28, 0x2A, 0x0C, 0x85, 0xC2, 0x1F, 0x07, 0x28,  // (*.....(
                /* 1558 */  0x9C, 0xE3, 0x9E, 0x1F, 0x28, 0x88, 0x01, 0x9D,  // ....(...
                /* 1560 */  0xE5, 0xFC, 0x80, 0x3E, 0x6D, 0x78, 0x22, 0xB8,  // ...>mx".
                /* 1568 */  0x33, 0xC1, 0x1B, 0xC8, 0x01, 0x06, 0x79, 0x62,  // 3.....yb
                /* 1570 */  0x60, 0x67, 0x1A, 0x60, 0x78, 0x7C, 0x60, 0xA7,  // `g.`x|`.
                /* 1578 */  0x0F, 0x60, 0x71, 0x8D, 0xF3, 0x70, 0x79, 0x80,  // .`q..py.
                /* 1580 */  0xBB, 0x1C, 0x05, 0xF1, 0x5D, 0x0E, 0xD6, 0xFF,  // ....]...
                /* 1588 */  0xFF, 0xF4, 0x01, 0xAC, 0x46, 0xE3, 0xD3, 0x07,  // ....F...
                /* 1590 */  0xF8, 0xC6, 0x05, 0xE7, 0x54, 0x80, 0xBB, 0x2B,  // ....T..+
                /* 1598 */  0xE0, 0xEE, 0x9F, 0x80, 0xB7, 0x65, 0xFB, 0x90,  // .....e..
                /* 15A0 */  0x02, 0xAE, 0x3B, 0x95, 0x0F, 0x29, 0xC0, 0xEE,  // ..;..)..
                /* 15A8 */  0xFF, 0x7F, 0x48, 0xC1, 0x0A, 0xBE, 0xC4, 0x81,  // ..H.....
                /* 15B0 */  0xEE, 0xEC, 0xE0, 0x83, 0x01, 0xBF, 0x75, 0x1B,  // ......u.
                /* 15B8 */  0xEE, 0x25, 0xD4, 0xA8, 0x0F, 0x26, 0xEC, 0xA6,  // .%...&..
                /* 15C0 */  0xE2, 0xD3, 0x01, 0x3F, 0xA8, 0xB0, 0x44, 0xEB,  // ...?..D.
                /* 15C8 */  0xD5, 0x41, 0x05, 0x97, 0xE3, 0x65, 0xA5, 0x73,  // .A...e.s
                /* 15D0 */  0x0B, 0x3B, 0xA8, 0x80, 0x41, 0x33, 0xAC, 0x0E,  // .;..A3..
                /* 15D8 */  0x2A, 0x5C, 0x2D, 0x8C, 0xB4, 0x3E, 0x00, 0x74,  // *\-..>.t
                /* 15E0 */  0xD4, 0xE0, 0xEA, 0x6E, 0x74, 0x14, 0xC4, 0x17,  // ...nt...
                /* 15E8 */  0x12, 0x5F, 0xE5, 0x00, 0xA6, 0xFC, 0xFF, 0xAF,  // ._......
                /* 15F0 */  0x67, 0x30, 0x72, 0x8C, 0x1F, 0x0D, 0xE3, 0x93,  // g0r.....
                /* 15F8 */  0x8B, 0x2F, 0x47, 0x1E, 0xD9, 0x93, 0xC1, 0xBB,  // ./G.....
                /* 1600 */  0x04, 0x9B, 0x3D, 0x58, 0xCF, 0x07, 0x9E, 0x3D,  // ..=X...=
                /* 1608 */  0xD8, 0xAE, 0x46, 0xC0, 0x11, 0xC9, 0x57, 0x23,  // ..F...W#
                /* 1610 */  0xB0, 0x1D, 0x24, 0x7C, 0xB6, 0x01, 0xCF, 0xA8,  // ..$|....
                /* 1618 */  0xC0, 0x7A, 0x62, 0xF0, 0xFD, 0x09, 0x38, 0xFE,  // .zb...8.
                /* 1620 */  0xFF, 0x2F, 0x83, 0x80, 0x93, 0x8B, 0x8F, 0x2F,  // ./...../
                /* 1628 */  0x46, 0x80, 0xA7, 0x41, 0xFB, 0x62, 0x04, 0x38,  // F..A.b.8
                /* 1630 */  0xB9, 0x0C, 0xF2, 0x8B, 0x11, 0xFC, 0xFF, 0xFF,  // ........
                /* 1638 */  0xC5, 0x08, 0x1F, 0xE8, 0xB0, 0x8F, 0x3A, 0x02,  // ......:.
                /* 1640 */  0x38, 0xD8, 0x61, 0x1F, 0x61, 0x15, 0x41, 0x17,  // 8.a.a.A.
                /* 1648 */  0x03, 0x16, 0xE8, 0xA0, 0x8F, 0x8A, 0x42, 0xA1,  // ......B.
                /* 1650 */  0x20, 0xA7, 0x07, 0x94, 0x74, 0x38, 0x0A, 0xE2,  //  ...t8..
                /* 1658 */  0x83, 0x3E, 0xE0, 0x27, 0x08, 0x30, 0x6A, 0x5C,  // .>.'.0j\
                /* 1660 */  0x3E, 0x0C, 0x78, 0xA6, 0x98, 0x0B, 0x1F, 0x30,  // >.x....0
                /* 1668 */  0x3C, 0x0F, 0xF8, 0x78, 0xE0, 0x51, 0xF5, 0x7C,  // <..x.Q.|
                /* 1670 */  0xC2, 0x00, 0x32, 0x37, 0x4D, 0x9F, 0x30, 0xC0,  // ..27M.0.
                /* 1678 */  0xF3, 0xFF, 0xBF, 0x4E, 0x58, 0xCA, 0x09, 0x03,  // ...NX...
                /* 1680 */  0xE8, 0xCA, 0xBB, 0xC9, 0x81, 0xEE, 0x54, 0xC0,  // ......T.
                /* 1688 */  0x2F, 0x16, 0x96, 0x76, 0xB2, 0x47, 0x8D, 0xDC,  // /..v.G..
                /* 1690 */  0x12, 0x4F, 0xF6, 0x88, 0xEB, 0x01, 0x46, 0xDA,  // .O....F.
                /* 1698 */  0xA9, 0x1E, 0x25, 0x0A, 0x46, 0x92, 0x4E, 0xF5,  // ..%.F.N.
                /* 16A0 */  0x28, 0x11, 0x37, 0x57, 0x0A, 0xE2, 0x53, 0x3D,  // (.7W..S=
                /* 16A8 */  0xC0, 0x81, 0xFF, 0xFF, 0xD5, 0x0D, 0xDC, 0x19,  // ........
                /* 16B0 */  0x0E, 0x20, 0x68, 0x15, 0x07, 0x10, 0xE4, 0xC5,  // . h.....
                /* 16B8 */  0x0D, 0x98, 0x1D, 0x3F, 0xB0, 0x57, 0x79, 0x80,  // ...?.Wy.
                /* 16C0 */  0x3D, 0xFF, 0xFF, 0xD3, 0x0B, 0x78, 0xAD, 0x9C,  // =....x..
                /* 16C8 */  0x5E, 0x00, 0x2D, 0xC7, 0x2D, 0x7E, 0x7A, 0xC1,  // ^.-.-~z.
                /* 16D0 */  0x45, 0x3D, 0x65, 0xA1, 0x38, 0x1C, 0xF4, 0x94,  // E=e.8...
                /* 16D8 */  0x85, 0xC0, 0xF5, 0x04, 0x3C, 0xA5, 0xB3, 0xAB,  // ....<...
                /* 16E0 */  0xF3, 0x1C, 0xA0, 0xE1, 0xBD, 0xD8, 0x47, 0xF2,  // ......G.
                /* 16E8 */  0x71, 0x8B, 0x9D, 0xB4, 0x78, 0x24, 0x0A, 0x9D,  // q...x$..
                /* 16F0 */  0xB6, 0x7C, 0x70, 0xE0, 0x11, 0xE0, 0x28, 0x88,  // .|p...(.
                /* 16F8 */  0x4F, 0x5A, 0x80, 0x9F, 0x40, 0x27, 0x13, 0xF4,  // OZ..@'..
                /* 1700 */  0x38, 0x3C, 0x5B, 0xDC, 0xFF, 0x7F, 0xB6, 0xD8,  // 8<[.....
                /* 1708 */  0xD3, 0x16, 0x60, 0x2E, 0xF8, 0x01, 0x03, 0x74,  // ..`....t
                /* 1710 */  0x5A, 0x0E, 0x18, 0x40, 0x77, 0x80, 0x4F, 0x5B,  // Z..@w.O[
                /* 1718 */  0x60, 0x3B, 0x19, 0xE0, 0x70, 0xDE, 0x0C, 0x70,  // `;..p..p
                /* 1720 */  0x47, 0x43, 0x26, 0xFA, 0xC8, 0x85, 0xE2, 0xB0,  // GC&.....
                /* 1728 */  0xE4, 0x23, 0x17, 0xE2, 0x9E, 0x00, 0xF3, 0xEC,  // .#......
                /* 1730 */  0xE5, 0x63, 0x17, 0x17, 0x07, 0x23, 0x69, 0x24,  // .c...#i$
                /* 1738 */  0xFA, 0xFF, 0x9F, 0x32, 0xB8, 0x98, 0x63, 0x17,  // ...2..c.
                /* 1740 */  0x05, 0xF1, 0xB1, 0x0B, 0xE0, 0xCF, 0xE9, 0xDA,  // ........
                /* 1748 */  0xA7, 0x11, 0xDC, 0x2C, 0x7C, 0x2B, 0x80, 0x79,  // ...,|+.y
                /* 1750 */  0xF4, 0x02, 0xF6, 0xFF, 0xFF, 0xA3, 0x17, 0xC0,  // ........
                /* 1758 */  0x97, 0xA3, 0x0C, 0xF8, 0xBC, 0x1C, 0x65, 0x00,  // ......e.
                /* 1760 */  0x2D, 0x47, 0x2F, 0xFE, 0xFF, 0x3F, 0xCA, 0xC0,  // -G/..?..
                /* 1768 */  0x3F, 0x7F, 0xC1, 0x9C, 0x4A, 0x85, 0x43, 0x17,  // ?...J.C.
                /* 1770 */  0x46, 0x9F, 0x07, 0x00, 0x72, 0x83, 0x66, 0xF8,  // F...r.f.
                /* 1778 */  0xC7, 0xF2, 0xFC, 0x05, 0xD8, 0x1C, 0x17, 0x6E,  // .......n
                /* 1780 */  0x1C, 0x9E, 0x2D, 0xCC, 0xF3, 0x17, 0x30, 0x3C,  // ..-...0<
                /* 1788 */  0x65, 0x00, 0xA7, 0xFF, 0xFF, 0x29, 0x03, 0x9C,  // e....)..
                /* 1790 */  0x70, 0x3E, 0x7F, 0x01, 0x6E, 0x4E, 0x06, 0x0C,  // p>..nN..
                /* 1798 */  0xC4, 0x37, 0x03, 0x9F, 0xF4, 0x31, 0x47, 0x03,  // .7...1G.
                /* 17A0 */  0xDF, 0x32, 0x2C, 0x64, 0xAD, 0x3A, 0x65, 0xE0,  // .2,d.:e.
                /* 17A8 */  0x64, 0xFC, 0x9D, 0x74, 0xE8, 0x60, 0xF7, 0x04,  // d..t.`..
                /* 17B0 */  0x98, 0xB1, 0xCF, 0x5F, 0xA8, 0xC0, 0xE7, 0x2F,  // ..._.../
                /* 17B8 */  0x40, 0xE5, 0xFF, 0xFF, 0xFC, 0x05, 0x38, 0x19,  // @.....8.
                /* 17C0 */  0x3F, 0x6E, 0x16, 0xBE, 0x15, 0xC0, 0x3C, 0x7F,  // ?n....<.
                /* 17C8 */  0x01, 0xB3, 0xF9, 0x63, 0xCF, 0x5F, 0xC0, 0x22,  // ...c._."
                /* 17D0 */  0xD4, 0x91, 0x07, 0x15, 0xE3, 0xC8, 0x43, 0x41,  // ......CA
                /* 17D8 */  0x7C, 0xE4, 0x01, 0xAE, 0xE7, 0x2F, 0xFC, 0xFF,  // |..../..
                /* 17E0 */  0xFF, 0x28, 0x03, 0x8E, 0xF3, 0x83, 0xC7, 0x85,  // .(......
                /* 17E8 */  0x93, 0x74, 0x7E, 0x80, 0x02, 0x5E, 0x3C, 0xB6,  // .t~..^<.
                /* 17F0 */  0xAE, 0x22, 0x3E, 0x66, 0xF8, 0x5C, 0x72, 0x6A,  // .">f.\rj
                /* 17F8 */  0x1E, 0x1A, 0xB8, 0x6F, 0x14, 0x3E, 0xF4, 0x00,  // ...o.>..
                /* 1800 */  0x9E, 0xCC, 0x9C, 0xD4, 0x00, 0x3D, 0x87, 0x1E,  // .....=..
                /* 1808 */  0xB8, 0xFF, 0xFF, 0x9B, 0x1A, 0x59, 0xA9, 0x0E,  // .....Y..
                /* 1810 */  0x3D, 0xFC, 0x50, 0xE0, 0xD0, 0x27, 0x35, 0x48,  // =.P..'5H
                /* 1818 */  0x33, 0x09, 0x6D, 0x88, 0x04, 0x63, 0x1E, 0xD4,  // 3.m..c..
                /* 1820 */  0x50, 0x01, 0x29, 0x14, 0xEF, 0x98, 0x81, 0x3A,  // P.)....:
                /* 1828 */  0xAB, 0x19, 0xCC, 0x20, 0x3E, 0xA8, 0x01, 0x7E,  // ... >..~
                /* 1830 */  0xE2, 0x9D, 0x7A, 0xD0, 0x2C, 0xC6, 0x3D, 0xAB,  // ..z.,.=.
                /* 1838 */  0x23, 0x8D, 0x79, 0xDA, 0x35, 0xDF, 0xF8, 0xC8,  // #.y.5...
                /* 1840 */  0xB9, 0xC0, 0x03, 0x3B, 0x5E, 0x4C, 0x88, 0x73,  // ...;^L.s
                /* 1848 */  0x05, 0x1D, 0x19, 0xB8, 0x6E, 0x3E, 0x1C, 0xC6,  // ....n>..
                /* 1850 */  0x07, 0x36, 0xB8, 0x47, 0x1F, 0x70, 0x9D, 0x35,  // .6.G.p.5
                /* 1858 */  0x80, 0xC7, 0xFF, 0x5F, 0xC2, 0x72, 0x74, 0xD6,  // ..._.rt.
                /* 1860 */  0x00, 0xD7, 0x25, 0xC8, 0x67, 0x0D, 0xE0, 0x8A,  // ..%.g...
                /* 1868 */  0xEA, 0xF3, 0x1A, 0xB8, 0x2F, 0xBC, 0x3E, 0x24,  // ..../.>$
                /* 1870 */  0xC0, 0x00, 0x0B, 0xF1, 0x92, 0xC0, 0x0E, 0x1C,  // ........
                /* 1878 */  0x96, 0x7B, 0xE0, 0x40, 0x4B, 0x7C, 0x38, 0xE9,  // .{.@K|8.
                /* 1880 */  0xD0, 0x06, 0xE3, 0xC4, 0x80, 0x11, 0x75, 0x58,  // ......uX
                /* 1888 */  0xA3, 0x47, 0x28, 0xCB, 0xA1, 0x90, 0x98, 0x03,  // .G(.....
                /* 1890 */  0x07, 0x2A, 0xFE, 0x19, 0x81, 0x82, 0x18, 0xD0,  // .*......
                /* 1898 */  0xD9, 0x4E, 0x12, 0xA0, 0xBC, 0x91, 0x81, 0x17,  // .N......
                /* 18A0 */  0xC6, 0x87, 0x37, 0x98, 0xF7, 0x08, 0x58, 0xFF,  // ..7...X.
                /* 18A8 */  0xFF, 0x7B, 0x04, 0xAC, 0xB3, 0x33, 0x60, 0xF2,  // .{...3`.
                /* 18B0 */  0x18, 0x0A, 0xDC, 0xCF, 0x21, 0xE0, 0x73, 0x73,  // ....!.ss
                /* 18B8 */  0x0E, 0x01, 0xCA, 0xFF, 0xFF, 0x23, 0x14, 0xB8,  // .....#..
                /* 18C0 */  0xCF, 0x21, 0xE0, 0x50, 0x48, 0x9A, 0x80, 0xC4,  // .!.PH...
                /* 18C8 */  0x19, 0xB3, 0xC4, 0xAE, 0x98, 0xC2, 0xF8, 0x5C,  // .......\
                /* 18D0 */  0xE1, 0x43, 0x02, 0x7E, 0xD8, 0x47, 0x7D, 0xB0,  // .C.~.G}.
                /* 18D8 */  0xC7, 0xC5, 0x4E, 0x72, 0x86, 0xE3, 0x27, 0x02,  // ..Nr..'.
                /* 18E0 */  0x8F, 0xAB, 0xF9, 0xA9, 0x68, 0x14, 0xA7, 0xEF,  // ....h...
                /* 18E8 */  0x89, 0x85, 0x64, 0xD2, 0x06, 0x88, 0x92, 0x72,  // ..d....r
                /* 18F0 */  0xAA, 0x23, 0x13, 0x3A, 0xB9, 0xDA, 0x11, 0x75,  // .#.:...u
                /* 18F8 */  0x7D, 0x30, 0x4C, 0x02, 0x9F, 0x05, 0x18, 0x1A,  // }0L.....
                /* 1900 */  0x87, 0xC6, 0x0E, 0xC3, 0x97, 0x84, 0x60, 0x07,  // ......`.
                /* 1908 */  0xF1, 0xBE, 0xED, 0xB3, 0x04, 0x9B, 0xD0, 0xB9,  // ........
                /* 1910 */  0x96, 0x7B, 0x79, 0xD0, 0x1D, 0x2F, 0x6A, 0x8C,  // .{y../j.
                /* 1918 */  0xE6, 0xA0, 0x48, 0x80, 0xA1, 0x83, 0xE6, 0xE0,  // ..H.....
                /* 1920 */  0x70, 0x06, 0x6F, 0x7D, 0x6C, 0xC4, 0xCF, 0x61,  // p.o}l..a
                /* 1928 */  0x9E, 0x33, 0x03, 0x8C, 0x17, 0xE3, 0xC1, 0xE6,  // .3......
                /* 1930 */  0xF8, 0x18, 0x68, 0xCF, 0x38, 0xD2, 0x08, 0xA8,  // ..h.8...
                /* 1938 */  0x9B, 0x9F, 0xE1, 0xF9, 0x6D, 0x21, 0x54, 0xAD,  // ....m!T.
                /* 1940 */  0xA3, 0x23, 0xD8, 0x91, 0x18, 0xD0, 0x33, 0xC5,  // .#....3.
                /* 1948 */  0x03, 0x40, 0x6B, 0x83, 0x23, 0xB3, 0x38, 0x20,  // .@k.#.8 
                /* 1950 */  0xCC, 0x11, 0xC1, 0x13, 0x78, 0xB9, 0xF0, 0x51,  // ....x..Q
                /* 1958 */  0x81, 0xB9, 0x17, 0xE0, 0xED, 0x4C, 0x20, 0xCC,  // .....L .
                /* 1960 */  0xA3, 0x8A, 0x70, 0x16, 0x4F, 0x14, 0x71, 0xDA,  // ..p.O.q.
                /* 1968 */  0xC2, 0xD6, 0xD1, 0x20, 0x44, 0xA0, 0x28, 0x47,  // ... D.(G
                /* 1970 */  0x68, 0x98, 0x18, 0x51, 0xDE, 0x52, 0x22, 0x9D,  // h..Q.R".
                /* 1978 */  0x63, 0x88, 0x50, 0xC6, 0x32, 0x50, 0xD8, 0x18,  // c.P.2P..
                /* 1980 */  0x27, 0xF7, 0xFF, 0x8F, 0x10, 0x39, 0x78, 0xB0,  // '....9x.
                /* 1988 */  0x37, 0xCD, 0xF6, 0x4F, 0x5D, 0xEC, 0x5C, 0xA0,  // 7..O].\.
                /* 1990 */  0xF3, 0x8C, 0x23, 0x8D, 0x06, 0x75, 0xDE, 0xE6,  // ..#..u..
                /* 1998 */  0xE7, 0x82, 0x67, 0x05, 0x5F, 0x13, 0x7C, 0x51,  // ..g._.|Q
                /* 19A0 */  0x64, 0x77, 0xF7, 0xA3, 0xF4, 0xF0, 0xD9, 0x91,  // dw......
                /* 19A8 */  0xC4, 0x27, 0x13, 0x38, 0xAE, 0x01, 0x75, 0x3D,  // .'.8..u=
                /* 19B0 */  0x78, 0xB8, 0x00, 0xCB, 0xD1, 0x04, 0xFE, 0x78,  // x......x
                /* 19B8 */  0x7C, 0x1A, 0xF0, 0x09, 0xC0, 0x04, 0x96, 0x3F,  // |......?
                /* 19C0 */  0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x31, 0xBF, 0x05,  // .....1..
                /* 19C8 */  0xB0, 0xB3, 0xC2, 0x61, 0xB1, 0x63, 0x8F, 0x0F,  // ...a.c..
                /* 19D0 */  0x33, 0x1E, 0x0F, 0xF8, 0x4F, 0xFD, 0x6F, 0x05,  // 3...O.o.
                /* 19D8 */  0x11, 0xDE, 0x1C, 0x3C, 0x5F, 0x1F, 0x1F, 0x7C,  // ...<_..|
                /* 19E0 */  0x72, 0x01, 0xC3, 0x98, 0x7C, 0x4A, 0xF0, 0x79,  // r...|J.y
                /* 19E8 */  0x01, 0x77, 0x5D, 0xC0, 0x13, 0x58, 0xE4, 0x41,  // .w]..X.A
                /* 19F0 */  0x02, 0x3D, 0x06, 0x7E, 0x10, 0x78, 0x8E, 0x61,  // .=.~.x.a
                /* 19F8 */  0x63, 0x78, 0x95, 0xF1, 0x34, 0x0E, 0xC9, 0x47,  // cx..4..G
                /* 1A00 */  0x0C, 0x23, 0xC4, 0x7F, 0xB2, 0x78, 0xD2, 0xF0,  // .#...x..
                /* 1A08 */  0x71, 0xE4, 0x34, 0x0E, 0xE2, 0xAC, 0xDE, 0x07,  // q.4.....
                /* 1A10 */  0x4C, 0x30, 0xAB, 0xBD, 0x53, 0x10, 0x53, 0x79,  // L0..S.Sy
                /* 1A18 */  0xC8, 0x42, 0x1D, 0x41, 0xAC, 0xE7, 0x90, 0x85,  // .B.A....
                /* 1A20 */  0x98, 0x12, 0xEE, 0xD4, 0xC1, 0xFE, 0xFF, 0x13,  // ........
                /* 1A28 */  0x88, 0xF3, 0xBC, 0xC1, 0xD3, 0x9F, 0x0F, 0xE9,  // ........
                /* 1A30 */  0xE0, 0x9D, 0x9B, 0x44, 0xB9, 0xC7, 0x44, 0xE1,  // ...D..D.
                /* 1A38 */  0x9C, 0xF4, 0x0C, 0x44, 0x41, 0x0C, 0xE8, 0x18,  // ...DA...
                /* 1A40 */  0x10, 0xB2, 0x72, 0x1E, 0x40, 0x8F, 0xE2, 0x38,  // ..r.@..8
                /* 1A48 */  0x9E, 0x1C, 0x7C, 0xEA, 0x78, 0x2C, 0x62, 0xE7,  // ..|.x,b.
                /* 1A50 */  0x6C, 0x60, 0x78, 0xBB, 0x78, 0xF0, 0xF0, 0xDD,  // l`x.x...
                /* 1A58 */  0x0A, 0x58, 0x5C, 0xCE, 0x3C, 0x57, 0x1E, 0x78,  // .X\.<W.x
                /* 1A60 */  0xAE, 0x14, 0xC4, 0x73, 0x75, 0x98, 0xBB, 0x15,  // ...su...
                /* 1A68 */  0xFA, 0x2E, 0xE3, 0xB9, 0xFA, 0xC8, 0x73, 0xAA,  // ......s.
                /* 1A70 */  0x1E, 0x2C, 0xBF, 0x5A, 0x01, 0xCE, 0xFE, 0xFF,  // .,.Z....
                /* 1A78 */  0xB7, 0x09, 0x7A, 0xB5, 0x02, 0xDD, 0xDD, 0x92,  // ..z.....
                /* 1A80 */  0x5F, 0xAD, 0x80, 0xE7, 0x9D, 0xE8, 0xD5, 0x0A,  // _.......
                /* 1A88 */  0x6C, 0xD7, 0x11, 0x7E, 0x1C, 0xC2, 0x9F, 0x36,  // l..~...6
                /* 1A90 */  0xB0, 0x40, 0x6F, 0x72, 0x46, 0x0B, 0xE4, 0x53,  // .@orF..S
                /* 1A98 */  0x90, 0xEF, 0x58, 0x1E, 0x03, 0x3F, 0xF6, 0x12,  // ..X..?..
                /* 1AA0 */  0x8C, 0xD7, 0x46, 0xB4, 0x96, 0x2B, 0x08, 0xA4,  // ..F..+..
                /* 1AA8 */  0xB3, 0xC0, 0x4B, 0xC0, 0x13, 0x02, 0xBB, 0x80,  // ..K.....
                /* 1AB0 */  0x00, 0xC6, 0xFE, 0xFF, 0x17, 0x10, 0x80, 0x47,  // .......G
                /* 1AB8 */  0x67, 0x45, 0xF0, 0x8D, 0xDA, 0x67, 0x45, 0xC0,  // gE...gE.
                /* 1AC0 */  0xC1, 0xFF, 0xFF, 0x02, 0x02, 0xBE, 0xB3, 0x06,  // ........
                /* 1AC8 */  0x03, 0x79, 0x8B, 0x8B, 0x77, 0x90, 0xD1, 0xDE,  // .y..w...
                /* 1AD0 */  0x05, 0x8D, 0x1E, 0xF4, 0x61, 0xC2, 0xC7, 0x29,  // ....a..)
                /* 1AD8 */  0x38, 0xC7, 0x62, 0x76, 0x9C, 0x02, 0x36, 0x47,  // 8.bv..6G
                /* 1AE0 */  0x08, 0xDC, 0xED, 0x03, 0x58, 0xDF, 0x1F, 0xD8,  // ....X...
                /* 1AE8 */  0xED, 0x03, 0x58, 0x9E, 0x5C, 0x70, 0xB7, 0x0F,  // ..X.\p..
                /* 1AF0 */  0x60, 0xF4, 0xFF, 0xBF, 0x7D, 0x80, 0xED, 0xEE,  // `...}...
                /* 1AF8 */  0xC2, 0x8E, 0x53, 0xC0, 0x1C, 0xD2, 0xC7, 0x29,  // ..S....)
                /* 1B00 */  0xC0, 0xC9, 0x7D, 0x9E, 0x1F, 0xA7, 0x80, 0xDB,  // ..}.....
                /* 1B08 */  0x15, 0x04, 0xC6, 0x71, 0x0A, 0xCC, 0x17, 0x10,  // ...q....
                /* 1B10 */  0xCC, 0xFF, 0xFF, 0x02, 0x02, 0xF0, 0xF7, 0x38,  // .......8
                /* 1B18 */  0x05, 0xBE, 0x73, 0xB2, 0x2F, 0x20, 0xB8, 0xFF,  // ..s./ ..
                /* 1B20 */  0xFF, 0x71, 0x0A, 0xF0, 0x70, 0x01, 0x81, 0x7F,  // .q..p...
                /* 1B28 */  0x9C, 0x82, 0xAB, 0xF0, 0x38, 0x05, 0x92, 0xE1,  // ....8...
                /* 1B30 */  0x3F, 0x52, 0x9F, 0xCE, 0x9B, 0x86, 0x8F, 0x23,  // ?R.....#
                /* 1B38 */  0xD1, 0xDF, 0x3E, 0x00, 0x1E, 0xFC, 0xFF, 0x6F,  // ..>....o
                /* 1B40 */  0x1F, 0x80, 0x75, 0x21, 0xB7, 0x0F, 0xD0, 0xC1,  // ..u!....
                /* 1B48 */  0xF2, 0xDB, 0x07, 0xF0, 0x3C, 0x06, 0xF8, 0xF6,  // ....<...
                /* 1B50 */  0x01, 0x1C, 0x4E, 0x1B, 0x6C, 0x18, 0x86, 0x8A,  // ..N.l...
                /* 1B58 */  0xF3, 0xBC, 0xC1, 0x41, 0xE3, 0xBC, 0x4C, 0xF1,  // ...A..L.
                /* 1B60 */  0xFF, 0xFF, 0x65, 0x8A, 0x5D, 0x40, 0x70, 0x1C,  // ..e.]@p.
                /* 1B68 */  0x56, 0x73, 0xD4, 0x85, 0x74, 0x03, 0x08, 0xF1,  // Vs..t...
                /* 1B70 */  0xC8, 0xDF, 0x25, 0x84, 0xEE, 0x1F, 0x00, 0x93,  // ..%.....
                /* 1B78 */  0xFF, 0xFF, 0xF7, 0x0F, 0x70, 0x4A, 0xB9, 0x7F,  // ....pJ..
                /* 1B80 */  0x80, 0xEE, 0x6E, 0xE0, 0xFB, 0x07, 0x70, 0x1D,  // ..n...p.
                /* 1B88 */  0xBF, 0xCF, 0xBA, 0xC0, 0x61, 0xB8, 0x81, 0x1E,  // ....a...
                /* 1B90 */  0xA6, 0x82, 0xBC, 0x6C, 0xC4, 0x7B, 0x04, 0x79,  // ...l.{.y
                /* 1B98 */  0xDB, 0x88, 0x1D, 0x2F, 0xE6, 0x21, 0x3D, 0x86,  // .../.!=.
                /* 1BA0 */  0x18, 0xDD, 0x53, 0x30, 0xAA, 0x2F, 0x20, 0xF0,  // ..S0./ .
                /* 1BA8 */  0x4E, 0x54, 0x30, 0x2E, 0x20, 0x80, 0x91, 0xFF,  // NT0. ...
                /* 1BB0 */  0xFF, 0x05, 0x04, 0x60, 0xA9, 0x87, 0x0B, 0x08,  // ...`....
                /* 1BB8 */  0x10, 0xFB, 0xFF, 0x5F, 0x40, 0xC0, 0x7E, 0xA0,  // ..._@.~.
                /* 1BC0 */  0x82, 0x7F, 0x01, 0x01, 0xD7, 0xFD, 0x1D, 0x77,  // .......w
                /* 1BC8 */  0x2C, 0xB0, 0xAA, 0x13, 0x15, 0xA4, 0x2B, 0x30,  // ,.....+0
                /* 1BD0 */  0x76, 0x06, 0xD8, 0x4B, 0x08, 0x18, 0x4F, 0x12,  // v..K..O.
                /* 1BD8 */  0xB8, 0x4B, 0x08, 0xB0, 0xBE, 0x46, 0xB0, 0x4B,  // .K...F.K
                /* 1BE0 */  0x08, 0xB0, 0x3C, 0xC0, 0xE0, 0x2E, 0x21, 0xFC,  // ..<...!.
                /* 1BE8 */  0xFF, 0x7F, 0x09, 0x01, 0xDE, 0x57, 0x18, 0x76,  // .....W.v
                /* 1BF0 */  0x09, 0x01, 0x26, 0x32, 0x2E, 0x21, 0xA0, 0x03,  // ..&2.!..
                /* 1BF8 */  0xF7, 0x25, 0x04, 0xB8, 0xCE, 0xE2, 0xA9, 0x0A,  // .%......
                /* 1C00 */  0x58, 0x5C, 0xE1, 0xF1, 0x47, 0x10, 0x18, 0x57,  // X\..G..W
                /* 1C08 */  0x10, 0x58, 0x67, 0x2A, 0x18, 0x53, 0x60, 0xFF,  // .Xg*.S`.
                /* 1C10 */  0xFF, 0x2B, 0x08, 0xF0, 0x38, 0x57, 0x01, 0xBC,  // .+..8W..
                /* 1C18 */  0xFD, 0xFF, 0x5F, 0x41, 0x80, 0x81, 0x89, 0x2B,  // .._A...+
                /* 1C20 */  0x08, 0xA0, 0xE5, 0x5C, 0x05, 0xFF, 0x0A, 0x02,  // ...\....
                /* 1C28 */  0xBE, 0x91, 0x5A, 0xD3, 0xA9, 0x0A, 0xD2, 0xB9,  // ..Z.....
                /* 1C30 */  0x9E, 0x5D, 0xEB, 0xF1, 0x17, 0x45, 0x70, 0x1E,  // .]...Ep.
                /* 1C38 */  0xAA, 0x80, 0xF1, 0xFF, 0xFF, 0x50, 0x05, 0xF0,  // .....P..
                /* 1C40 */  0xEA, 0x22, 0x0F, 0x3E, 0x15, 0x17, 0x79, 0xA0,  // .".>..y.
                /* 1C48 */  0xFD, 0xFF, 0x3F, 0x54, 0x81, 0xFF, 0xBC, 0xC1,  // ..?T....
                /* 1C50 */  0xB0, 0x7C, 0x07, 0xF1, 0x1D, 0x20, 0x7C, 0x98,  // .|... |.
                /* 1C58 */  0x57, 0x0E, 0xFC, 0x3D, 0x11, 0x7F, 0x05, 0xE1,  // W..=....
                /* 1C60 */  0xA7, 0x2A, 0x18, 0x57, 0x10, 0x60, 0x72, 0xA8,  // .*.W.`r.
                /* 1C68 */  0x02, 0x78, 0xF2, 0xFF, 0x3F, 0x54, 0x01, 0x86,  // .x..?T..
                /* 1C70 */  0xAE, 0x20, 0xE0, 0x1B, 0xA7, 0xAF, 0x20, 0x80,  // . .... .
                /* 1C78 */  0x93, 0x43, 0x15, 0xFC, 0x2B, 0x08, 0x78, 0xF4,  // .C..+.x.
                /* 1C80 */  0x5D, 0x41, 0x50, 0x92, 0x20, 0xA4, 0xE7, 0x54,  // ]AP. ..T
                /* 1C88 */  0x05, 0xF5, 0x2C, 0x10, 0xFB, 0x6C, 0x9F, 0x40,  // ..,..l.@
                /* 1C90 */  0xD8, 0x05, 0x04, 0xD6, 0xFF, 0xFF, 0xDC, 0x0B,  // ........
                /* 1C98 */  0xF0, 0xFF, 0xFF, 0x7F, 0x01, 0x81, 0x73, 0xD3,  // ......s.
                /* 1CA0 */  0xF0, 0xB9, 0x17, 0x70, 0x76, 0x01, 0x81, 0x73,  // ...pv..s
                /* 1CA8 */  0xE1, 0xC0, 0x5C, 0x12, 0xD9, 0xFD, 0x03, 0xCE,  // ..\.....
                /* 1CB0 */  0x91, 0x0A, 0xDE, 0xFD, 0x03, 0xDC, 0x07, 0x2A,  // .......*
                /* 1CB8 */  0xC0, 0xD3, 0xFF, 0xFF, 0xD0, 0x0B, 0x30, 0xCA,  // ......0.
                /* 1CC0 */  0xC6, 0xA1, 0x17, 0x90, 0xF5, 0xFF, 0xBF, 0x7F,  // ........
                /* 1CC8 */  0x80, 0xED, 0xD0, 0x0B, 0x16, 0x8D, 0x30, 0x02,  // ......0.
                /* 1CD0 */  0x79, 0xE8, 0x05, 0x58, 0xFA, 0xFF, 0x3F, 0xF4,  // y..X..?.
                /* 1CD8 */  0x02, 0x5E, 0x74, 0x1C, 0x7A, 0x01, 0x6D, 0xE7,  // .^t.z.m.
                /* 1CE0 */  0x0D, 0x76, 0xE8, 0x05, 0x1E, 0x57, 0x10, 0x60,  // .v...W.`
                /* 1CE8 */  0x72, 0xA8, 0x82, 0xF7, 0xFF, 0x3F, 0xF4, 0x02,  // r....?..
                /* 1CF0 */  0x0C, 0xF7, 0x71, 0x05, 0x81, 0xFC, 0xFF, 0x3F,  // ..q....?
                /* 1CF8 */  0xF4, 0x02, 0x66, 0xAE, 0x20, 0xE0, 0x39, 0xF4,  // ..f. .9.
                /* 1D00 */  0x82, 0x65, 0x0E, 0x0C, 0xEC, 0x0C, 0xA2, 0x1D,  // .e......
                /* 1D08 */  0x2B, 0x3B, 0x53, 0x01, 0x2C, 0xF8, 0xFF, 0x1F,  // +;S.,...
                /* 1D10 */  0x7A, 0x01, 0x8E, 0x8C, 0xC5, 0x87, 0x5E, 0xC0,  // z.....^.
                /* 1D18 */  0xD9, 0x05, 0x04, 0xCE, 0x85, 0x03, 0x73, 0x49,  // ......sI
                /* 1D20 */  0x64, 0xFF, 0xFF, 0x43, 0x2F, 0x58, 0xEE, 0x1F,  // d..C/X..
                /* 1D28 */  0xC0, 0xE0, 0x40, 0x05, 0xF0, 0xF2, 0xFF, 0x7F,  // ..@.....
                /* 1D30 */  0xFF, 0x00, 0x86, 0x46, 0x0E, 0xBD, 0x80, 0xB6,  // ...F....
                /* 1D38 */  0xFB, 0x07, 0x38, 0x94, 0x9D, 0xA7, 0x40, 0x75,  // ..8...@u
                /* 1D40 */  0x06, 0x88, 0x51, 0xF1, 0x68, 0xC9, 0x79, 0x0A,  // ..Q.h.y.
                /* 1D48 */  0x70, 0xF1, 0xFF, 0x3F, 0x4F, 0x01, 0x7C, 0x5B,  // p..?O.|[
                /* 1D50 */  0x8F, 0xEF, 0x1F, 0xE0, 0x52, 0x72, 0xFF, 0x00,  // ....Rr..
                /* 1D58 */  0x7A, 0xFF, 0xFF, 0xFB, 0x07, 0x5E, 0xF0, 0x79,  // z....^.y
                /* 1D60 */  0x0A, 0xE8, 0xDC, 0x36, 0x30, 0x97, 0x0F, 0x98,  // ...60...
                /* 1D68 */  0x87, 0x29, 0x78, 0x97, 0x0F, 0x70, 0x1F, 0xA6,  // .)x..p..
                /* 1D70 */  0x00, 0x9E, 0xFC, 0xFF, 0x0F, 0x53, 0x80, 0xA1,  // .....S..
                /* 1D78 */  0xCB, 0x07, 0xF8, 0xAE, 0x0B, 0xBE, 0x7C, 0x00,  // ......|.
                /* 1D80 */  0x4E, 0x0E, 0x53, 0xE0, 0xB9, 0x7C, 0xE0, 0x33,  // N.S..|.3
                /* 1D88 */  0xD8, 0x18, 0x07, 0x0B, 0x32, 0x64, 0x49, 0x5C,  // ....2dI\
                /* 1D90 */  0x30, 0x85, 0xF1, 0xAD, 0xC2, 0x67, 0x04, 0xFC,  // 0....g..
                /* 1D98 */  0xA8, 0x0F, 0xFA, 0x58, 0x0F, 0x8B, 0xDD, 0x43,  // ...X...C
                /* 1DA0 */  0x0C, 0xC7, 0x0F, 0x04, 0x1E, 0x56, 0xF3, 0x03,  // .....V..
                /* 1DA8 */  0xD1, 0x64, 0xD8, 0x84, 0x42, 0xB2, 0xAB, 0xC1,  // .d..B...
                /* 1DB0 */  0xFF, 0xFF, 0xF8, 0x30, 0xC7, 0x07, 0x9F, 0x09,  // ...0....
                /* 1DB8 */  0x9E, 0xB5, 0x7C, 0x0F, 0xF6, 0x80, 0x8F, 0xCC,  // ..|.....
                /* 1DC0 */  0x04, 0x3E, 0x0A, 0x30, 0x34, 0x0E, 0x8D, 0x1D,  // .>.04...
                /* 1DC8 */  0x86, 0xEF, 0x08, 0xC1, 0x0E, 0xE2, 0x30, 0x1E,  // ......0.
                /* 1DD0 */  0x4D, 0x18, 0xC1, 0x09, 0x3D, 0x20, 0x94, 0x7B,  // M...= .{
                /* 1DD8 */  0x77, 0x90, 0x78, 0x54, 0x61, 0x34, 0x07, 0x45,  // w.xTa4.E
                /* 1DE0 */  0x0E, 0x12, 0x1E, 0x39, 0x38, 0xCE, 0x0D, 0x67,  // ...98..g
                /* 1DE8 */  0x70, 0x0A, 0xD1, 0x22, 0x1C, 0xF2, 0x43, 0x44,  // p.."..CD
                /* 1DF0 */  0x8C, 0x37, 0x03, 0xA3, 0x04, 0x8C, 0x17, 0xE3,  // .7......
                /* 1DF8 */  0x50, 0x3C, 0x75, 0x76, 0x71, 0x08, 0x17, 0xE5,  // P<uvq...
                /* 1E00 */  0x49, 0x21, 0x4A, 0xAD, 0x33, 0x23, 0xA0, 0x07,  // I!J.3#..
                /* 1E08 */  0xC0, 0x80, 0x5E, 0x46, 0x8E, 0xBE, 0xB5, 0x03,  // ..^F....
                /* 1E10 */  0x05, 0x3D, 0xB2, 0xE1, 0x8E, 0x07, 0x46, 0x7F,  // .=....F.
                /* 1E18 */  0xB1, 0xF0, 0x31, 0x81, 0xB9, 0x17, 0xE0, 0x6D,  // ..1....m
                /* 1E20 */  0x5A, 0x82, 0x88, 0x10, 0xF9, 0x65, 0xE2, 0x6C,  // Z....e.l
                /* 1E28 */  0x9E, 0x2E, 0xDA, 0x1A, 0x9B, 0xC0, 0x1F, 0xA4,  // ........
                /* 1E30 */  0x1B, 0x43, 0x11, 0xC8, 0x03, 0x41, 0xCD, 0xA8,  // .C...A..
                /* 1E38 */  0x42, 0x29, 0x0E, 0x46, 0x47, 0x94, 0x80, 0x51,  // B).FG..Q
                /* 1E40 */  0x22, 0x46, 0x8B, 0x1A, 0xF8, 0xCD, 0x20, 0xB6,  // "F.... .
                /* 1E48 */  0x41, 0x03, 0xC5, 0x8A, 0x70, 0x04, 0xED, 0x0F,  // A...p...
                /* 1E50 */  0x82, 0x44, 0x3B, 0x14, 0x48, 0x02, 0x88, 0x22,  // .D;.H.."
                /* 1E58 */  0x8D, 0x06, 0x75, 0xD8, 0xF0, 0xC1, 0xC0, 0xB7,  // ..u.....
                /* 1E60 */  0x19, 0x4F, 0xEC, 0x08, 0xDF, 0x13, 0x7C, 0x5D,  // .O....|]
                /* 1E68 */  0xB0, 0xCE, 0x13, 0x01, 0x19, 0x3B, 0x1B, 0xB6,  // .....;..
                /* 1E70 */  0x4F, 0x25, 0x70, 0x5C, 0x03, 0xEA, 0x6E, 0xF0,  // O%p\..n.
                /* 1E78 */  0x60, 0x01, 0x96, 0x63, 0x09, 0xFC, 0xF1, 0xF8,  // `..c....
                /* 1E80 */  0x28, 0xE0, 0xF1, 0x9B, 0xC0, 0xF2, 0x07, 0x81,  // (.......
                /* 1E88 */  0x1A, 0xC0, 0xFF, 0xFF, 0xBD, 0x87, 0x9D, 0x2A,  // .......*
                /* 1E90 */  0x7C, 0x23, 0xF0, 0x41, 0xE1, 0xB0, 0x98, 0xD8,  // |#.A....
                /* 1E98 */  0x73, 0x0C, 0x1D, 0x0F, 0xF8, 0x8F, 0x00, 0x8F,  // s.......
                /* 1EA0 */  0x05, 0x11, 0x5E, 0x1B, 0x3C, 0x5F, 0x1F, 0x17,  // ..^.<_..
                /* 1EA8 */  0x7C, 0x6A, 0x01, 0xC3, 0x51, 0x81, 0xDF, 0x14,  // |j..Q...
                /* 1EB0 */  0xD8, 0x61, 0x20, 0x86, 0xE7, 0xC5, 0x4E, 0x0E,  // .a ...N.
                /* 1EB8 */  0x4C, 0xE4, 0x19, 0x02, 0x3D, 0x02, 0x7E, 0x0C,  // L...=.~.
                /* 1EC0 */  0x78, 0x82, 0x61, 0x23, 0x78, 0x89, 0xF1, 0x24,  // x.a#x..$
                /* 1EC8 */  0x0E, 0xC8, 0xA7, 0x0B, 0x23, 0x84, 0x7F, 0xA8,  // ....#...
                /* 1ED0 */  0x78, 0xC8, 0xF0, 0x29, 0xE1, 0x8C, 0xCE, 0xE1,  // x..)....
                /* 1ED8 */  0x9C, 0x1E, 0x7A, 0x98, 0x2E, 0x15, 0xE7, 0x01,  // ..z.....
                /* 1EE0 */  0x16, 0xF1, 0x52, 0x85, 0xE2, 0x70, 0xAC, 0x13,  // ..R..p..
                /* 1EE8 */  0x22, 0x62, 0x4A, 0xD8, 0x59, 0xC4, 0x3F, 0x88,  // "bJ.Y.?.
                /* 1EF0 */  0x10, 0x09, 0x1C, 0x03, 0x52, 0x77, 0x2A, 0x1E,  // ....Rw*.
                /* 1EF8 */  0x80, 0x42, 0x01, 0x68, 0x74, 0x30, 0xE2, 0x92,  // .B.ht0..
                /* 1F00 */  0xAF, 0x56, 0x14, 0xC4, 0x03, 0x71, 0x96, 0x13,  // .V...q..
                /* 1F08 */  0x27, 0x3D, 0x35, 0xE0, 0x66, 0x89, 0x3F, 0x39,  // '=5.f.?9
                /* 1F10 */  0x78, 0x62, 0x3E, 0x7D, 0x24, 0x38, 0xB3, 0xD7,  // xb>}$8..
                /* 1F18 */  0x2A, 0xF0, 0xDE, 0x76, 0x7C, 0x31, 0x02, 0xC7,  // *..v|1..
                /* 1F20 */  0x2D, 0x23, 0xC1, 0x10, 0xB3, 0xA2, 0xFF, 0xFF,  // -#......
                /* 1F28 */  0x59, 0x71, 0x1D, 0xF7, 0x15, 0x72, 0x07, 0xF1,  // Yq...r..
                /* 1F30 */  0xA4, 0x7C, 0x51, 0xF0, 0x90, 0xC0, 0x3A, 0x5D,  // .|Q...:]
                /* 1F38 */  0x0F, 0x09, 0x5C, 0x07, 0x2F, 0x60, 0x79, 0x03,  // ..\./`y.
                /* 1F40 */  0xF4, 0xC1, 0x0B, 0x37, 0x80, 0x43, 0x7D, 0x6E,  // ...7.C}n
                /* 1F48 */  0x30, 0xC4, 0xA1, 0x9C, 0xAB, 0x6F, 0x1B, 0x3E,  // 0....o.>
                /* 1F50 */  0x78, 0x81, 0x7B, 0x28, 0x3E, 0x78, 0x81, 0xE7,  // x.{(>x..
                /* 1F58 */  0x08, 0xF3, 0xFC, 0xF2, 0xE0, 0x05, 0x5C, 0x24,  // ......\$
                /* 1F60 */  0x1C, 0xBC, 0x40, 0x77, 0x31, 0xE0, 0x23, 0x65,  // ..@w1.#e
                /* 1F68 */  0xFF, 0xFF, 0x83, 0x17, 0x30, 0x44, 0xF5, 0x79,  // ....0D.y
                /* 1F70 */  0x09, 0x1C, 0x07, 0x25, 0x3C, 0xC8, 0xCB, 0x08,  // ...%<...
                /* 1F78 */  0x3F, 0x25, 0x85, 0x61, 0xC7, 0x26, 0x76, 0x67,  // ?%.a.&vg
                /* 1F80 */  0x62, 0x17, 0xA2, 0xA3, 0x7B, 0xD1, 0x3B, 0xE5,  // b...{.;.
                /* 1F88 */  0x27, 0x2F, 0x26, 0xF0, 0x16, 0x89, 0x16, 0x75,  // '/&....u
                /* 1F90 */  0x42, 0x41, 0x5C, 0x45, 0xE0, 0x8E, 0x5F, 0x47,  // BA\E.._G
                /* 1F98 */  0x14, 0x54, 0x78, 0x12, 0x85, 0x3F, 0x42, 0xA0,  // .Tx..?B.
                /* 1FA0 */  0xE2, 0x8E, 0x9D, 0x82, 0x18, 0xD0, 0x47, 0x14,  // ......G.
                /* 1FA8 */  0xC0, 0xCA, 0x01, 0x04, 0xFC, 0xFF, 0xFF, 0x03,  // ........
                /* 1FB0 */  0x08, 0x60, 0xE1, 0x20, 0x09, 0xAE, 0x03, 0x08,  // .`. ....
                /* 1FB8 */  0xF0, 0x1F, 0xB5, 0x0F, 0x20, 0x80, 0xC9, 0xFF,  // .... ...
                /* 1FC0 */  0xFF, 0x01, 0x84, 0x29, 0x3A, 0x80, 0xA0, 0x0E,  // ...):...
                /* 1FC8 */  0x0A, 0x56, 0x71, 0x00, 0x41, 0x9C, 0x9A, 0xB0,  // .Vq.A...
                /* 1FD0 */  0xD9, 0x6F, 0xC4, 0xA8, 0xD4, 0x24, 0x4A, 0x7D,  // .o...$J}
                /* 1FD8 */  0x7C, 0x40, 0xE5, 0x3C, 0x22, 0x50, 0x10, 0x03,  // |@.<"P..
                /* 1FE0 */  0xFA, 0x22, 0x05, 0xBC, 0x2E, 0x1E, 0x00, 0x9B,  // ."......
                /* 1FE8 */  0xFE, 0xFF, 0x17, 0x0F, 0xE0, 0x04, 0xE9, 0x8B,  // ........
                /* 1FF0 */  0x07, 0xE0, 0x33, 0xDA, 0x83, 0xC2, 0xD7, 0x61,  // ..3....a
                /* 1FF8 */  0x2A, 0xF2, 0x46, 0x0C, 0xA8, 0xFC, 0xFF, 0xDF,  // *.F.....
                /* 2000 */  0x88, 0xC1, 0x37, 0x8B, 0x87, 0xDE, 0x07, 0x00,  // ..7.....
                /* 2008 */  0xA3, 0x1B, 0xEE, 0x19, 0xC1, 0x47, 0x62, 0xD8,  // .....Gb.
                /* 2010 */  0x37, 0x62, 0xF8, 0x67, 0x60, 0x0F, 0xEC, 0x64,  // 7b.g`..d
                /* 2018 */  0xCE, 0xE2, 0x81, 0x22, 0xCC, 0xA3, 0xF0, 0x83,  // ..."....
                /* 2020 */  0xB0, 0x0F, 0x18, 0xA7, 0xF5, 0x46, 0x6C, 0xA8,  // .....Fl.
                /* 2028 */  0xE3, 0x7A, 0x81, 0x8D, 0x12, 0x31, 0x54, 0x9C,  // .z...1T.
                /* 2030 */  0x23, 0x8C, 0x12, 0x22, 0x5C, 0xD8, 0x40, 0x31,  // #.."\.@1
                /* 2038 */  0x23, 0x1C, 0x48, 0xCC, 0x08, 0x71, 0x82, 0xFA,  // #.H..q..
                /* 2040 */  0x46, 0xCC, 0xC2, 0xDD, 0x88, 0x01, 0x9A, 0x5C,  // F......\
                /* 2048 */  0x80, 0x71, 0xFF, 0xFF, 0x63, 0x0B, 0xBC, 0xA3,  // .q..c...
                /* 2050 */  0x82, 0x6F, 0x0A, 0xB8, 0x23, 0x31, 0x8C, 0x2B,  // .o..#1.+
                /* 2058 */  0x31, 0x30, 0x11, 0xFB, 0x1E, 0xD0, 0x41, 0xC7,  // 10....A.
                /* 2060 */  0x42, 0xAF, 0xC4, 0x68, 0x59, 0xEB, 0xD5, 0xED,  // B..hY...
                /* 2068 */  0x9F, 0xCD, 0x09, 0x3F, 0xCE, 0x33, 0x7A, 0x3F,  // ...?.3z?
                /* 2070 */  0x60, 0x32, 0x2E, 0x88, 0x28, 0x0A, 0x5F, 0x10,  // `2..(._.
                /* 2078 */  0xC1, 0x77, 0x81, 0x38, 0x89, 0x17, 0x16, 0x5F,  // .w.8..._
                /* 2080 */  0x10, 0x01, 0x7F, 0x27, 0x23, 0x0F, 0x97, 0x87,  // ...'#...
                /* 2088 */  0x1E, 0x2E, 0x05, 0xF1, 0x70, 0x1D, 0xE8, 0x60,  // ....p..`
                /* 2090 */  0x85, 0x1E, 0x2E, 0xEE, 0xFF, 0x3F, 0x5C, 0x7E,  // .....?\~
                /* 2098 */  0x09, 0xC0, 0x1C, 0xAD, 0x00, 0x73, 0x42, 0xAE,  // .....sB.
                /* 20A0 */  0xBC, 0x80, 0x9E, 0x63, 0x80, 0x0F, 0x44, 0xE0,  // ...c..D.
                /* 20A8 */  0x18, 0xC2, 0xDB, 0x06, 0xBB, 0x0B, 0xC1, 0xC1,  // ........
                /* 20B0 */  0x79, 0x35, 0xE0, 0x28, 0x6F, 0x57, 0xF0, 0x45,  // y5.(oW.E
                /* 20B8 */  0xAE, 0xC8, 0x17, 0x7B, 0x9F, 0xAE, 0x50, 0x30,  // ...{..P0
                /* 20C0 */  0x3E, 0x5D, 0xE1, 0xFE, 0xFF, 0xA7, 0x2B, 0xC0,  // >]....+.
                /* 20C8 */  0xCF, 0x39, 0x0D, 0x3C, 0xE7, 0x1F, 0x0F, 0xC7,  // .9.<....
                /* 20D0 */  0x13, 0xC6, 0xA0, 0xBC, 0x0E, 0x1A, 0xEE, 0x0D,  // ........
                /* 20D8 */  0x25, 0xE4, 0xDB, 0x94, 0xEF, 0x1A, 0xB8, 0x1B,  // %.......
                /* 20E0 */  0x80, 0x4F, 0x3D, 0x8C, 0xC0, 0x27, 0x2B, 0xD8,  // .O=..'+.
                /* 20E8 */  0x63, 0x3A, 0x89, 0x08, 0xEF, 0x52, 0xAF, 0x04,  // c:...R..
                /* 20F0 */  0x51, 0x9E, 0xA5, 0x7C, 0xAD, 0xF2, 0xF1, 0x24,  // Q..|...$
                /* 20F8 */  0xC2, 0xC9, 0x3C, 0x59, 0xB1, 0xA9, 0xBD, 0x5B,  // ..<Y...[
                /* 2100 */  0x19, 0xE7, 0x69, 0x2B, 0xE4, 0xC9, 0x44, 0x89,  // ..i+..D.
                /* 2108 */  0xF6, 0x6E, 0xE5, 0x6B, 0x46, 0x84, 0x68, 0x4F,  // .n.kF.hO
                /* 2110 */  0x16, 0xB1, 0x22, 0xC6, 0x7F, 0xB5, 0xF2, 0xC9,  // ..".....
                /* 2118 */  0x8A, 0x85, 0x3C, 0x59, 0x01, 0x3A, 0xFE, 0xFF,  // ..<Y.:..
                /* 2120 */  0x27, 0x2B, 0xC0, 0xCB, 0x30, 0x7C, 0x6A, 0x81,  // '+..0|j.
                /* 2128 */  0x7F, 0x5A, 0xE0, 0x07, 0x81, 0xB7, 0x04, 0xCF,  // .Z......
                /* 2130 */  0xEF, 0x61, 0x01, 0xE6, 0x5D, 0x01, 0x73, 0xBA,  // .a..].s.
                /* 2138 */  0x02, 0x1E, 0xB1, 0x57, 0xA0, 0xE1, 0x5A, 0xF7,  // ...W..Z.
                /* 2140 */  0x1B, 0x41, 0xA7, 0x2B, 0x9C, 0xEE, 0x97, 0x81,  // .A.+....
                /* 2148 */  0xAE, 0xBF, 0x6C, 0x56, 0xFC, 0x4C, 0xF1, 0x68,  // ..lV.L.h
                /* 2150 */  0x81, 0xC1, 0x49, 0x60, 0x9D, 0x87, 0x2D, 0x3A,  // ..I`..-:
                /* 2158 */  0x00, 0x2B, 0x84, 0x91, 0x3E, 0x12, 0x9D, 0x8F,  // .+..>...
                /* 2160 */  0xB8, 0xA2, 0x43, 0x16, 0x05, 0xF1, 0xD1, 0xC1,  // ..C.....
                /* 2168 */  0x51, 0xCE, 0x47, 0xE8, 0xD1, 0xF9, 0xB4, 0xC2,  // Q.G.....
                /* 2170 */  0x0F, 0x32, 0x0F, 0xB2, 0x1E, 0xD7, 0x49, 0xBF,  // .2....I.
                /* 2178 */  0xDA, 0x98, 0xE0, 0x39, 0xE7, 0xE1, 0x0A, 0x8C,  // ...9....
                /* 2180 */  0xFF, 0x7F, 0x02, 0x76, 0x77, 0xF1, 0xE5, 0x08,  // ...vw...
                /* 2188 */  0x4C, 0xA1, 0x8E, 0x60, 0x1E, 0x2D, 0x1D, 0x95,  // L..`.-..
                /* 2190 */  0x07, 0xE6, 0x51, 0xE1, 0x09, 0x26, 0xB8, 0x55,  // ..Q..&.U
                /* 2198 */  0x79, 0x4E, 0x50, 0x2F, 0x50, 0xF8, 0xC1, 0x3C,  // yNP/P..<
                /* 21A0 */  0x0E, 0xBC, 0x2D, 0xF8, 0xFE, 0xE0, 0xA9, 0xC1,  // ..-.....
                /* 21A8 */  0x3A, 0x1C, 0xF1, 0x6B, 0x18, 0x78, 0x8E, 0x5B,  // :..k.x.[
                /* 21B0 */  0x1E, 0x1A, 0x4E, 0xC5, 0x01, 0x86, 0xDC, 0x1A,  // ..N.....
                /* 21B8 */  0x0C, 0x71, 0x60, 0x60, 0xA6, 0xF1, 0xC0, 0x60,  // .q``...`
                /* 21C0 */  0x5D, 0xDB, 0xF9, 0x75, 0x0D, 0xD8, 0xEE, 0xDA,  // ]..u....
                /* 21C8 */  0xF7, 0x07, 0x1E, 0x79, 0xE6, 0x14, 0xC4, 0x73,  // ...y...s
                /* 21D0 */  0x72, 0x1C, 0x08, 0x39, 0xB9, 0x3F, 0xA0, 0xEF,  // r..9.?..
                /* 21D8 */  0x50, 0x1E, 0xD0, 0x83, 0x87, 0x87, 0x74, 0x2A,  // P.....t*
                /* 21E0 */  0xFF, 0xFF, 0xE7, 0x6A, 0x7E, 0x5B, 0x03, 0x3B,  // ...j~[.;
                /* 21E8 */  0x94, 0x6F, 0x6B, 0xE0, 0x39, 0xF4, 0x3C, 0xF5,  // .ok.9.<.
                /* 21F0 */  0xBC, 0xAD, 0x01, 0x97, 0xD8, 0x10, 0xBA, 0xAD,  // ........
                /* 21F8 */  0x01, 0x6E, 0xE6, 0xF8, 0x82, 0x05, 0x96, 0xDB,  // .n......
                /* 2200 */  0x0B, 0x3B, 0x60, 0xE1, 0xAE, 0x2F, 0x30, 0xB4,  // .;`../0.
                /* 2208 */  0xDF, 0x65, 0xD0, 0xDA, 0x17, 0xAB, 0xB3, 0x1B,  // .e......
                /* 2210 */  0xBB, 0xCB, 0xC0, 0xD4, 0x7A, 0x97, 0x41, 0xA9,  // ....z.A.
                /* 2218 */  0x84, 0x51, 0x9E, 0xC3, 0x03, 0x2A, 0x81, 0x81,  // .Q...*..
                /* 2220 */  0xFF, 0x3F, 0x1C, 0x03, 0xF1, 0xF8, 0x7D, 0x97,  // .?....}.
                /* 2228 */  0x01, 0xB8, 0x73, 0x47, 0x01, 0x16, 0xA1, 0xEE,  // ..sG....
                /* 2230 */  0x05, 0xA8, 0x18, 0xF7, 0x02, 0x0A, 0xE2, 0x81,  // ........
                /* 2238 */  0xF9, 0x8E, 0x02, 0x9C, 0xFE, 0xFF, 0x77, 0x14,  // ......w.
                /* 2240 */  0x38, 0x57, 0x07, 0xDF, 0x51, 0xC0, 0x77, 0x33,  // 8W..Q.w3
                /* 2248 */  0xC0, 0x1F, 0x03, 0x7C, 0x16, 0xC2, 0x10, 0x0C,  // ...|....
                /* 2250 */  0x71, 0x30, 0xA0, 0x83, 0x02, 0xD7, 0x65, 0x08,  // q0....e.
                /* 2258 */  0x77, 0x9D, 0x81, 0x7B, 0x33, 0x00, 0xD7, 0x6D,  // w..{3..m
                /* 2260 */  0x06, 0x78, 0x9F, 0x9B, 0xF8, 0x6D, 0x06, 0xF0,  // .x...m..
                /* 2268 */  0xF1, 0xFF, 0xBF, 0xCA, 0xF2, 0xDB, 0x0C, 0x5C,  // .......\
                /* 2270 */  0x85, 0x36, 0x7D, 0x6A, 0x34, 0x6A, 0xD5, 0xA0,  // .6}j4j..
                /* 2278 */  0x4C, 0x8D, 0x32, 0x0D, 0x6A, 0xF5, 0xA9, 0xD4,  // L.2.j...
                /* 2280 */  0x98, 0xB1, 0x60, 0x87, 0x0A, 0x49, 0x5A, 0xAD,  // ..`..IZ.
                /* 2288 */  0x86, 0xEB, 0x40, 0x20, 0x34, 0xFA, 0x3B, 0x41,  // ..@ 4.;A
                /* 2290 */  0x43, 0x26, 0x26, 0x40, 0x98, 0x7C, 0x10, 0x1A,  // C&&@.|..
                /* 2298 */  0xF4, 0x35, 0x26, 0x10, 0x87, 0xB5, 0x01, 0xC2,  // .5&.....
                /* 22A0 */  0xA4, 0xEA, 0x00, 0x61, 0xB1, 0x7C, 0x9C, 0xC9,  // ...a.|..
                /* 22A8 */  0x59, 0x46, 0x10, 0x01, 0x39, 0xD1, 0x9B, 0x40,  // YF..9..@
                /* 22B0 */  0x40, 0xCE, 0x07, 0x22, 0x20, 0x27, 0xFF, 0xA9,  // @.." '..
                /* 22B8 */  0x08, 0xC8, 0x32, 0x1E, 0x1B, 0x02, 0x72, 0x68,  // ..2...rh
                /* 22C0 */  0x10, 0x01, 0x59, 0xC2, 0x5B, 0x56, 0x40, 0x8E,  // ..Y.[V@.
                /* 22C8 */  0xE7, 0x05, 0x84, 0x89, 0x5B, 0xA7, 0xCE, 0x1D,  // ....[...
                /* 22D0 */  0xC4, 0x0C, 0x20, 0xCB, 0x06, 0xA2, 0x53, 0x03,  // .. ...S.
                /* 22D8 */  0x79, 0xA5, 0x08, 0xC8, 0x1A, 0x41, 0x04, 0xE4,  // y....A..
                /* 22E0 */  0x70, 0x40, 0x34, 0x29, 0x10, 0x55, 0xE8, 0x06,  // p@4).U..
                /* 22E8 */  0x88, 0xC9, 0x05, 0x11, 0x90, 0x53, 0x03, 0x51,  // .....S.Q
                /* 22F0 */  0x09, 0x4F, 0x09, 0x01, 0x39, 0x31, 0x88, 0x80,  // .O..91..
                /* 22F8 */  0x9C, 0x1F, 0x88, 0xEA, 0xF3, 0x03, 0xC4, 0xC4,  // ........
                /* 2300 */  0x82, 0x08, 0xC8, 0x39, 0x81, 0x68, 0x68, 0x20,  // ...9.hh 
                /* 2308 */  0xAA, 0xF6, 0x51, 0x20, 0x20, 0x4B, 0x07, 0xD1,  // ..Q  K..
                /* 2310 */  0x00, 0x08, 0x10, 0x8D, 0x0F, 0x44, 0x43, 0x18,  // .....DC.
                /* 2318 */  0x02, 0x62, 0x89, 0x40, 0x04, 0xE4, 0x00, 0x8A,  // .b.@....
                /* 2320 */  0x80, 0x58, 0x1C, 0x10, 0x01, 0x59, 0x8A, 0x23,  // .X...Y.#
                /* 2328 */  0x20, 0x26, 0x0C, 0x44, 0x40, 0x0E, 0x08, 0x44,  //  &.D@..D
                /* 2330 */  0xE3, 0x02, 0xD1, 0x48, 0x9E, 0x40, 0x98, 0x20,  // ...H.@. 
                /* 2338 */  0x51, 0x20, 0x2C, 0x94, 0x29, 0x40, 0x96, 0x10,  // Q ,.)@..
                /* 2340 */  0x44, 0x40, 0x56, 0xA7, 0x0A, 0x88, 0x49, 0x05,  // D@V...I.
                /* 2348 */  0xD1, 0x80, 0x89, 0x2B, 0x20, 0x26, 0x12, 0x44,  // ...+ &.D
                /* 2350 */  0x40, 0x0E, 0xFE, 0x1A, 0x12, 0x88, 0x65, 0xFB,  // @.....e.
                /* 2358 */  0x3A, 0x14, 0xD0, 0x87, 0x8A, 0x00, 0xFD, 0xFF,  // :.......
                /* 2360 */  0x4F, 0x0E, 0x22, 0x20, 0x27, 0x78, 0x0B, 0x1D,  // O." 'x..
                /* 2368 */  0x14, 0x03, 0x11, 0x90, 0x65, 0xFC, 0x52, 0x04,  // ....e.R.
                /* 2370 */  0x64, 0x4D, 0x20, 0x02, 0xB2, 0x86, 0xA7, 0x4A,  // dM ....J
                /* 2378 */  0x20, 0xA2, 0x08, 0x44, 0x40, 0x4E, 0x06, 0x44,  //  ..D@N.D
                /* 2380 */  0x73, 0x02, 0xD1, 0xF0, 0xEF, 0xDD, 0x40, 0x44,  // s.....@D
                /* 2388 */  0xC9, 0xE7, 0x48, 0x03, 0x23, 0x20, 0x1A, 0x18,  // ..H.# ..
                /* 2390 */  0x01, 0xA2, 0x02, 0x5F, 0xBD, 0x81, 0x88, 0x5A,  // ..._...Z
                /* 2398 */  0x10, 0x0D, 0x8A, 0x00, 0x51, 0x15, 0xAF, 0x12,  // ....Q...
                /* 23A0 */  0x01, 0x59, 0x3D, 0x88, 0x80, 0x1C, 0x05, 0x88,  // .Y=.....
                /* 23A8 */  0x4A, 0xFF, 0x2F, 0x0B, 0xC8, 0x41, 0x40, 0x74,  // J./..A@t
                /* 23B0 */  0x40, 0x20, 0xEE, 0x0E, 0x08, 0x14, 0x44, 0x40,  // @ ....D@
                /* 23B8 */  0x56, 0x2C, 0x0F, 0x88, 0xC9, 0x07, 0xD1, 0x80,  // V,......
                /* 23C0 */  0x08, 0x10, 0x55, 0x62, 0xEF, 0x00, 0x41, 0x41,  // ..Ub..AA
                /* 23C8 */  0x04, 0x64, 0x1D, 0xBF, 0x22, 0x01, 0x39, 0x03,  // .d..".9.
                /* 23D0 */  0x88, 0x0E, 0x04, 0x04, 0x88, 0x2A, 0xF3, 0x07,  // .....*..
                /* 23D8 */  0xC4, 0x74, 0x82, 0xE8, 0x70, 0x40, 0x80, 0x68,  // .t..p@.h
                /* 23E0 */  0x7E, 0x20, 0xAA, 0xE3, 0xD1, 0x11, 0x88, 0x88,  // ~ ......
                /* 23E8 */  0x02, 0xD1, 0x80, 0x08, 0x10, 0x4D, 0x0A, 0x44,  // .....M.D
                /* 23F0 */  0x85, 0x3E, 0x5E, 0x02, 0x11, 0xD5, 0x20, 0x02,  // .>^... .
                /* 23F8 */  0x72, 0x5C, 0x20, 0x9A, 0x1D, 0x88, 0xEA, 0xFF,  // r\ .....
                /* 2400 */  0xD7, 0x08, 0xC8, 0x61, 0x40, 0x04, 0x64, 0xED,  // ...a@.d.
                /* 2408 */  0x4F, 0x1A, 0x01, 0x39, 0x09, 0x88, 0x0E, 0x1B,  // O..9....
                /* 2410 */  0xE4, 0x39, 0x12, 0x88, 0xC4, 0x03, 0x11, 0x90,  // .9......
                /* 2418 */  0x95, 0x3E, 0x6B, 0x05, 0x64, 0xD9, 0x20, 0x02,  // .>k.d. .
                /* 2420 */  0x72, 0x64, 0x20, 0x9A, 0x1F, 0x88, 0x0A, 0x7F,  // rd .....
                /* 2428 */  0x97, 0x0B, 0xC8, 0x29, 0x40, 0x04, 0x64, 0x35,  // ...)@.d5
                /* 2430 */  0x2A, 0x81, 0x98, 0x34, 0x10, 0x01, 0x59, 0x89,  // *..4..Y.
                /* 2438 */  0x4B, 0x20, 0xA6, 0x0B, 0x44, 0x83, 0x20, 0x1F,  // K ..D. .
                /* 2440 */  0x9A, 0x83, 0x60, 0x20, 0x02, 0x72, 0x60, 0x20,  // ..` .r` 
                /* 2448 */  0x9A, 0x1E, 0x88, 0xCA, 0x7E, 0xEC, 0x06, 0x22,  // ....~.."
                /* 2450 */  0xFF, 0xFF, 0x0C, 0x20, 0x02, 0x72, 0x7A, 0x20,  // ... .rz 
                /* 2458 */  0x2A, 0xE5, 0xBF, 0x72, 0xF0, 0x0C, 0x44, 0x40,  // *..r..D@
                /* 2460 */  0x0E, 0x04, 0x44, 0x95, 0x3C, 0x7A, 0x02, 0x11,  // ..D.<z..
                /* 2468 */  0x59, 0x20, 0x02, 0x72, 0x3A, 0x20, 0x1A, 0x15,  // Y .r: ..
                /* 2470 */  0x88, 0x26, 0x33, 0x7A, 0x68, 0xA0, 0x20, 0x02,  // .&3zh. .
                /* 2478 */  0x72, 0xFC, 0xBF, 0x8F, 0x80, 0xAC, 0xE5, 0xFD,  // r.......
                /* 2480 */  0x73, 0x10, 0x0C, 0x44, 0x83, 0x20, 0x40, 0x54,  // s..D. @T
                /* 2488 */  0xBF, 0x55, 0x20, 0x96, 0x06, 0x44, 0x40, 0xD6,  // .U ..D@.
                /* 2490 */  0xA5, 0x15, 0x88, 0xA9, 0x04, 0x11, 0x90, 0xC5,  // ........
                /* 2498 */  0x3F, 0x97, 0x34, 0x78, 0x02, 0x22, 0x20, 0x4B,  // ?.4x." K
                /* 24A0 */  0x78, 0x23, 0x05, 0x22, 0x7A, 0x40, 0x34, 0x10,  // x#."z@4.
                /* 24A8 */  0x02, 0x44, 0xC5, 0xA8, 0x05, 0x62, 0x31, 0x40,  // .D...b1@
                /* 24B0 */  0x04, 0xE4, 0x50, 0x40, 0x54, 0x92, 0x5B, 0x20,  // ..P@T.[ 
                /* 24B8 */  0x26, 0x10, 0x44, 0x40, 0x16, 0x6D, 0x17, 0x88,  // &.D@.m..
                /* 24C0 */  0x25, 0x00, 0xD1, 0xE1, 0x81, 0x00, 0x51, 0x25,  // %.....Q%
                /* 24C8 */  0x7A, 0x0F, 0x15, 0x14, 0x44, 0x87, 0x19, 0xF2,  // z...D...
                /* 24D0 */  0x5D, 0x7A, 0x18, 0x61, 0x20, 0x02, 0x72, 0x40,  // ]z.a .r@
                /* 24D8 */  0x20, 0x1A, 0xF8, 0x87, 0xA5, 0x03, 0x00, 0x01,  //  .......
                /* 24E0 */  0xD1, 0x01, 0x80, 0x3C, 0xAE, 0x1F, 0x00, 0x18,  // ...<....
                /* 24E8 */  0x88, 0x0E, 0x05, 0xE4, 0xD9, 0xAF, 0x43, 0x01,  // ......C.
                /* 24F0 */  0x01, 0xD1, 0xE0, 0xC9, 0xD7, 0x48, 0x87, 0x02,  // .....H..
                /* 24F8 */  0x02, 0x22, 0x20, 0xA7, 0x02, 0xA2, 0x19, 0x81,  // ." .....
                /* 2500 */  0xA8, 0xE2, 0xA7, 0x91, 0x80, 0xAC, 0x1F, 0x44,  // .......D
                /* 2508 */  0x07, 0x02, 0x02, 0x44, 0xB5, 0xFC, 0xA4, 0x1F,  // ...D....
                /* 2510 */  0x02, 0x18, 0x88, 0x0E, 0x01, 0x04, 0x88, 0xA6,  // ........
                /* 2518 */  0xFD, 0x0B, 0x0A, 0xC8, 0xD1, 0x41, 0x74, 0x0C,  // .....At.
                /* 2520 */  0x22, 0x0F, 0xA3, 0x40, 0x24, 0x36, 0x88, 0x06,  // "..@$6..
                /* 2528 */  0x49, 0x9E, 0xEC, 0x07, 0xC9, 0x5E, 0xDA, 0x02,  // I....^..
                /* 2530 */  0x72, 0x6E, 0x10, 0x1D, 0x44, 0xC8, 0x37, 0xEA,  // rn..D.7.
                /* 2538 */  0x80, 0xD8, 0x5B, 0x49, 0x67, 0x38, 0xE7, 0x79,  // ..[Ig8.y
                /* 2540 */  0xB6, 0x69, 0x70, 0xC4, 0x38, 0x08, 0xFB, 0xFF,  // .ip.8...
                /* 2548 */  0x27, 0x78, 0x34, 0x3D, 0xAE, 0x30, 0x10, 0x1D,  // 'x4=.0..
                /* 2550 */  0x8F, 0xC8, 0x67, 0x49, 0xC7, 0x0B, 0x02, 0xA2,  // ..gI....
                /* 2558 */  0xC3, 0x0C, 0x79, 0x97, 0x09, 0xC8, 0xF2, 0x40,  // ..y....@
                /* 2560 */  0x74, 0x2C, 0x21, 0xCF, 0xF5, 0xC7, 0x12, 0x06,  // t,!.....
                /* 2568 */  0xA2, 0xA3, 0x00, 0x79, 0x4E, 0x3D, 0x0A, 0x30,  // ...yN=.0
                /* 2570 */  0x10, 0x0D, 0x80, 0xBC, 0xE9, 0x05, 0xE4, 0x2C,  // .......,
                /* 2578 */  0x20, 0x02, 0xB2, 0x26, 0xF5, 0x80, 0x14, 0x44,  //  ..&...D
                /* 2580 */  0x40, 0x8E, 0x09, 0x44, 0x33, 0x03, 0xD1, 0x8C,  // @..D3...
                /* 2588 */  0xEE, 0x81, 0x58, 0x62, 0x10, 0x0D, 0x9F, 0xE8,  // ..Xb....
                /* 2590 */  0x3F, 0x4A, 0x50, 0x10, 0x1D, 0x09, 0x08, 0x10,  // ?JP.....
                /* 2598 */  0xCD, 0x07, 0x44, 0xF3, 0xF8, 0x07, 0x62, 0xE9,  // ..D...b.
                /* 25A0 */  0x40, 0x04, 0x64, 0x6D, 0x01, 0x80, 0x98, 0x52,  // @.dm...R
                /* 25A8 */  0x10, 0x0D, 0x92, 0x3C, 0x19, 0x35, 0x48, 0x02,  // ...<.5H.
                /* 25B0 */  0xA2, 0x63, 0x10, 0x69, 0x70, 0x24, 0xA0, 0x20,  // .c.ip$. 
                /* 25B8 */  0x3A, 0xA6, 0x90, 0x08, 0x40, 0x4C, 0x15, 0x88,  // :...@L..
                /* 25C0 */  0x80, 0x9C, 0x09, 0x88, 0x26, 0x04, 0xA2, 0xA9,  // ....&...
                /* 25C8 */  0x33, 0x00, 0x31, 0x0D, 0x1D, 0x06, 0x41, 0x41,  // 3.1...AA
                /* 25D0 */  0x04, 0xE4, 0x3C, 0x40, 0x34, 0x51, 0x89, 0xE3,  // ..<@4Q..
                /* 25D8 */  0x09, 0x05, 0x11, 0x90, 0x65, 0xA6, 0x00, 0x62,  // ....e..b
                /* 25E0 */  0x9A, 0x41, 0x74, 0x0C, 0x22, 0x40, 0x34, 0x39,  // .At."@49
                /* 25E8 */  0x10, 0x4D, 0xDA, 0x02, 0x88, 0xE5, 0x06, 0xD1,  // .M......
                /* 25F0 */  0x51, 0x81, 0xD4, 0x38, 0x8A, 0xD0, 0x1C, 0x03,  // Q..8....
                /* 25F8 */  0xA5, 0x20, 0x1A, 0x28, 0x01, 0xA2, 0x71, 0x7A,  // . .(..qz
                /* 2600 */  0x00, 0xB1, 0x70, 0x20, 0x3A, 0x2A, 0x90, 0x22,  // ..p :*."
                /* 2608 */  0x47, 0x05, 0x0A, 0xA2, 0xA3, 0x06, 0x49, 0x72,  // G.....Ir
                /* 2610 */  0xD4, 0xA0, 0x20, 0x3A, 0xD6, 0x90, 0xCF, 0xA9,  // .. :....
                /* 2618 */  0x8E, 0x35, 0x04, 0x44, 0xC7, 0x08, 0x52, 0xE5,  // .5.D..R.
                /* 2620 */  0xD8, 0x43, 0x41, 0x74, 0x08, 0x20, 0x59, 0x0E,  // .CAt. Y.
                /* 2628 */  0x01, 0x14, 0x44, 0x40, 0x56, 0xD1, 0xE5, 0x98,  // ..D@V...
                /* 2630 */  0x44, 0x41, 0x04, 0xE4, 0xFF, 0xBF, 0xC4, 0x32,  // DA.....2
                /* 2638 */  0x40, 0x4C, 0x2F, 0x88, 0x8E, 0x5A, 0x24, 0xCD,  // @L/..Z$.
                /* 2640 */  0xD1, 0x88, 0x82, 0xE8, 0x38, 0x41, 0x80, 0x68,  // ....8A.h
                /* 2648 */  0x76, 0x20, 0xAA, 0xA8, 0xCE, 0xA1, 0x81, 0x82,  // v ......
                /* 2650 */  0xE8, 0x90, 0x40, 0x80, 0x68, 0x66, 0x20, 0x2A,  // ..@.hf *
                /* 2658 */  0x36, 0x0F, 0x10, 0x53, 0x0E, 0xA2, 0x23, 0x05,  // 6..S..#.
                /* 2660 */  0x01, 0xA2, 0x22, 0xFA, 0x1C, 0x02, 0x28, 0x88,  // .."...(.
                /* 2668 */  0x0E, 0x06, 0x04, 0x88, 0xCA, 0x7F, 0x99, 0xEB,  // ........
                /* 2670 */  0x30, 0x41, 0x40, 0x04, 0xE4, 0x60, 0x89, 0x80,  // 0A@..`..
                /* 2678 */  0x58, 0x4C, 0x10, 0x1D, 0x9F, 0x48, 0xA3, 0xA3,  // XL...H..
                /* 2680 */  0x19, 0x05, 0xD1, 0x61, 0x80, 0x54, 0x3A, 0x0C,  // ...a.T:.
                /* 2688 */  0x50, 0x10, 0x01, 0x39, 0x3B, 0x10, 0x15, 0x92,  // P..9;...
                /* 2690 */  0xE9, 0x08, 0x45, 0x41, 0x74, 0x84, 0x22, 0x40,  // ..EAt."@
                /* 2698 */  0x54, 0x7A, 0xA7, 0xC3, 0x05, 0x05, 0xD1, 0x45,  // Tz.....E
                /* 26A0 */  0x97, 0x94, 0x02, 0x62, 0xC1, 0x40, 0x04, 0x64,  // ...b.@.d
                /* 26A8 */  0x69, 0xA9, 0x80, 0x98, 0x50, 0x10, 0x01, 0x59,  // i...P..Y
                /* 26B0 */  0x72, 0xAC, 0x63, 0x09, 0x05, 0xD1, 0xE1, 0x81,  // r.c.....
                /* 26B8 */  0xD4, 0x3A, 0x32, 0x51, 0x10, 0x1D, 0x18, 0x08,  // .:2Q....
                /* 26C0 */  0x10, 0x8D, 0x07, 0x44, 0xE3, 0xE4, 0x3A, 0x1C,  // ...D..:.
                /* 26C8 */  0x50, 0x10, 0x1D, 0x0E, 0x48, 0xB0, 0xC3, 0x01,  // P...H...
                /* 26D0 */  0x05, 0xD1, 0xF1, 0x88, 0x14, 0x03, 0x62, 0x31,  // ......b1
                /* 26D8 */  0x40, 0x74, 0xF8, 0x23, 0xCD, 0x0E, 0x18, 0x14,  // @t.#....
                /* 26E0 */  0x44, 0x40, 0x56, 0x19, 0x0D, 0x88, 0x49, 0x06,  // D@V...I.
                /* 26E8 */  0x11, 0x90, 0xF3, 0x02, 0xD1, 0xF0, 0x40, 0x34,  // ......@4
                /* 26F0 */  0x6C, 0xB5, 0xE3, 0x0A, 0x05, 0xD1, 0xF1, 0x8D,  // l.......
                /* 26F8 */  0x64, 0x3B, 0x00, 0x50, 0x10, 0x0D, 0x9E, 0x84,  // d;.P....
                /* 2700 */  0x1B, 0x3C, 0x05, 0xD1, 0x60, 0x48, 0xB9, 0xC1,  // .<..`H..
                /* 2708 */  0x50, 0x10, 0x0D, 0x8A, 0xB4, 0x03, 0x62, 0xA9,  // P.....b.
                /* 2710 */  0x41, 0x04, 0xE4, 0x90, 0xF1, 0x80, 0x58, 0x64,  // A.....Xd
                /* 2718 */  0x10, 0x01, 0xF9, 0xFF, 0x1F, 0x23, 0x20, 0x08,  // .....# .
                /* 2720 */  0x13, 0x51, 0xF0, 0x50, 0x40, 0x13, 0x1E, 0x50,  // .Q.P@..P
                /* 2728 */  0x28, 0x88, 0x80, 0xAC, 0xBC, 0x21, 0x10, 0xCB,  // (....!..
                /* 2730 */  0x01, 0x22, 0x20, 0xE7, 0xAB, 0x08, 0xC4, 0xC2,  // ." .....
                /* 2738 */  0x82, 0x08, 0xC8, 0xD1, 0x32, 0x02, 0xB1, 0xA0,  // ....2...
                /* 2740 */  0x20, 0x3A, 0x32, 0x92, 0x90, 0xC7, 0x31, 0x5A,  //  :2...1Z
                /* 2748 */  0xF2, 0x10, 0x42, 0x41, 0x74, 0x08, 0x21, 0x29,  // ..BAt.!)
                /* 2750 */  0x0F, 0x27, 0x34, 0xE6, 0x61, 0x80, 0x82, 0xE8,  // .'4.a...
                /* 2758 */  0x68, 0x47, 0x6A, 0x1E, 0xED, 0x28, 0x88, 0x8E,  // hGj..(..
                /* 2760 */  0x41, 0xA4, 0xE7, 0x31, 0x88, 0x82, 0xE8, 0x90,  // A..1....
                /* 2768 */  0x41, 0x82, 0x1E, 0x0A, 0x28, 0x88, 0x8E, 0x38,  // A...(..8
                /* 2770 */  0x24, 0x29, 0x10, 0x8B, 0x08, 0xA2, 0x43, 0x00,  // $)....C.
                /* 2778 */  0x69, 0x7A, 0x28, 0xA0, 0x20, 0x02, 0x72, 0xEC,  // iz(. .r.
                /* 2780 */  0xAA, 0x83, 0xA1, 0x59, 0x8F, 0x69, 0x14, 0x44,  // ...Y.i.D
                /* 2788 */  0x47, 0x30, 0x02, 0x44, 0xF5, 0x95, 0x3D, 0x22,  // G0.D..="
                /* 2790 */  0x52, 0x10, 0x1D, 0x18, 0x48, 0xDA, 0x41, 0x51,  // R...H.AQ
                /* 2798 */  0x10, 0x1D, 0x0D, 0x49, 0xDC, 0xA3, 0x1B, 0x05,  // ...I....
                /* 27A0 */  0xD1, 0xD1, 0x8A, 0xD4, 0x3D, 0x5A, 0x51, 0x10,  // ....=ZQ.
                /* 27A8 */  0x1D, 0x17, 0x49, 0xDF, 0xE3, 0x22, 0x05, 0x11,  // ..I.."..
                /* 27B0 */  0x90, 0x23, 0x06, 0x06, 0x62, 0x81, 0x41, 0x74,  // .#..b.At
                /* 27B8 */  0xE7, 0x26, 0x8D, 0x81, 0x98, 0x32, 0x10, 0x1D,  // .&...2..
                /* 27C0 */  0x20, 0x48, 0xE4, 0xC3, 0x0C, 0x05, 0xD1, 0xD1,  //  H......
                /* 27C8 */  0x91, 0x64, 0x3E, 0x3A, 0x52, 0x10, 0x1D, 0xE1,  // .d>:R...
                /* 27D0 */  0x48, 0xE7, 0xA3, 0x19, 0x05, 0x11, 0x90, 0xC3,  // H.......
                /* 27D8 */  0x94, 0x06, 0x62, 0xC9, 0x40, 0x04, 0xE4, 0x1C,  // ..b.@...
                /* 27E0 */  0xA9, 0x81, 0x58, 0x2A, 0x10, 0x1D, 0x1C, 0xC8,  // ..X*....
                /* 27E8 */  0x73, 0x56, 0x07, 0x07, 0x02, 0x22, 0x20, 0x47,  // sV..." G
                /* 27F0 */  0xAD, 0x0D, 0xC4, 0x82, 0x83, 0x08, 0xC8, 0xA2,  // ........
                /* 27F8 */  0x82, 0x03, 0x31, 0x85, 0x20, 0x02, 0xB2, 0x9E,  // ..1. ...
                /* 2800 */  0xE2, 0x40, 0x4C, 0x1D, 0x88, 0x80, 0xAC, 0xBA,  // .@L.....
                /* 2808 */  0x39, 0x10, 0x8B, 0x00, 0x22, 0x20, 0xFF, 0xFF,  // 9..." ..
                /* 2810 */  0x05, 0x47, 0x3F, 0xBC, 0x50, 0x10, 0x1D, 0x0F,  // .G?.P...
                /* 2818 */  0x49, 0xF6, 0x43, 0x0F, 0x05, 0xD1, 0x61, 0x88,  // I.C...a.
                /* 2820 */  0x74, 0x3F, 0x5C, 0x50, 0x10, 0x01, 0x39, 0x73,  // t?\P..9s
                /* 2828 */  0x79, 0x20, 0xF6, 0xC4, 0x79, 0xDC, 0xA3, 0x20,  // y ..y.. 
                /* 2830 */  0x1A, 0x14, 0x01, 0xA2, 0x62, 0xEA, 0x0F, 0x98,  // ....b...
                /* 2838 */  0x82, 0x68, 0xC0, 0x24, 0xFF, 0x80, 0x29, 0x88,  // .h.$..).
                /* 2840 */  0x80, 0x9C, 0xD0, 0xC0, 0x8D, 0xEA, 0x91, 0x80,  // ........
                /* 2848 */  0x28, 0x00, 0x61, 0xC9, 0x1C, 0x80, 0x3C, 0x60,  // (.a...<`
                /* 2850 */  0x10, 0x10, 0x1D, 0x31, 0x89, 0x04, 0x20, 0x26,  // ...1.. &
                /* 2858 */  0x15, 0x44, 0xC7, 0x36, 0x62, 0x01, 0x88, 0xA9,  // .D.6b...
                /* 2860 */  0x04, 0xD1, 0x41, 0x85, 0x78, 0x00, 0x62, 0x51,  // ..A.x.bQ
                /* 2868 */  0x40, 0x04, 0x64, 0xDD, 0x22, 0x80, 0x58, 0x0A,  // @.d.".X.
                /* 2870 */  0x10, 0x1D, 0x4A, 0x88, 0x0A, 0x20, 0x96, 0x0D,  // ..J.. ..
                /* 2878 */  0x44, 0x40, 0x0E, 0xE2, 0x02, 0x88, 0xC5, 0x02,  // D@......
                /* 2880 */  0x11, 0x90, 0x45, 0xFA, 0x00, 0x61, 0x11, 0x41,  // ..E..a.A
                /* 2888 */  0xA8, 0x3C, 0x23, 0x80, 0x4C, 0x2B, 0x88, 0x0E,  // .<#.L+..
                /* 2890 */  0xB1, 0x44, 0xC9, 0x80, 0x28, 0x88, 0x0E, 0x50,  // .D..(..P
                /* 2898 */  0x44, 0x0A, 0xC8, 0xE3, 0x97, 0x63, 0x5B, 0x01,  // D....c[.
                /* 28A0 */  0x62, 0xA2, 0xB5, 0x80, 0xB0, 0xD8, 0x5E, 0x40,  // b.....^@
                /* 28A8 */  0x99, 0x06, 0x31, 0x40, 0x2C, 0x0B, 0x88, 0x8E,  // ..1@,...
                /* 28B0 */  0x31, 0x04, 0x88, 0x6A, 0x33, 0x03, 0xC4, 0x84,  // 1..j3...
                /* 28B8 */  0x82, 0x68, 0x88, 0x44, 0xCD, 0x10, 0x29, 0x88,  // .h.D..).
                /* 28C0 */  0x8E, 0x0C, 0x44, 0x0E, 0x10, 0x93, 0x0E, 0xA2,  // ..D.....
                /* 28C8 */  0x83, 0x1E, 0xB1, 0x03, 0xC4, 0xF4, 0x80, 0xE8,  // ........
                /* 28D0 */  0xA0, 0x47, 0x80, 0xA8, 0x18, 0x3D, 0x40, 0x2C,  // .G...=@,
                /* 28D8 */  0x14, 0x88, 0x8E, 0x1B, 0x04, 0x88, 0xFE, 0xFF,  // ........
                /* 28E0 */  0x01                                             // .
            })
            Method (WMAA, 3, Serialized)
            {
                CTID = 0x4141
                WSMI (Arg1, Arg2)
                Switch (ToInteger (Arg1))
                {
                    Case (One)
                    {
                        AAST = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (AAST) /* \_SB_.PCI0.WMID.AAST */
                    }
                    Case (0x02)
                    {
                        AAGT = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (AAGT) /* \_SB_.PCI0.WMID.AAGT */
                    }

                }

                Return (0xE1)
            }

            Method (WMAB, 3, Serialized)
            {
                CTID = 0x4241
                WSMI (Arg1, Arg2)
                Switch (ToInteger (Arg1))
                {
                    Case (One)
                    {
                        ABST = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (ABST) /* \_SB_.PCI0.WMID.ABST */
                    }
                    Case (0x02)
                    {
                        ABGT = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (ABGT) /* \_SB_.PCI0.WMID.ABGT */
                    }

                }

                Return (0xE1)
            }

            Method (WMBE, 3, Serialized)
            {
                CTID = 0x4542
                WSMI (Arg1, Arg2)
                Switch (ToInteger (Arg1))
                {
                    Case (0x13)
                    {
                        BEBI = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BEBI) /* \_SB_.PCI0.WMID.BEBI */
                    }

                }

                BEBI [0x02] = One
                Return (BEBI) /* \_SB_.PCI0.WMID.BEBI */
            }

            Method (WMBK, 3, Serialized)
            {
                CTID = 0x4B42
                WSMI (Arg1, Arg2)
                Switch (ToInteger (Arg1))
                {
                    Case (One)
                    {
                        BKCP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKCP) /* \_SB_.PCI0.WMID.BKCP */
                    }
                    Case (0x02)
                    {
                        BKCP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKCP) /* \_SB_.PCI0.WMID.BKCP */
                    }
                    Case (0x03)
                    {
                        BKCP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKCP) /* \_SB_.PCI0.WMID.BKCP */
                    }
                    Case (0x08)
                    {
                        BKMN = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKMN) /* \_SB_.PCI0.WMID.BKMN */
                    }
                    Case (0x09)
                    {
                        BKSN = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKSN) /* \_SB_.PCI0.WMID.BKSN */
                    }
                    Case (0x0A)
                    {
                        BKAT = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKAT) /* \_SB_.PCI0.WMID.BKAT */
                    }
                    Case (0x0B)
                    {
                        BKSB = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKSB) /* \_SB_.PCI0.WMID.BKSB */
                    }
                    Case (0x0D)
                    {
                        BKSB = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKSB) /* \_SB_.PCI0.WMID.BKSB */
                    }
                    Case (0x10)
                    {
                        BKGB = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKGB) /* \_SB_.PCI0.WMID.BKGB */
                    }
                    Case (0x11)
                    {
                        BKSB = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKSB) /* \_SB_.PCI0.WMID.BKSB */
                    }
                    Case (0x12)
                    {
                        BKCP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKCP) /* \_SB_.PCI0.WMID.BKCP */
                    }
                    Case (0x13)
                    {
                        BKCP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKCP) /* \_SB_.PCI0.WMID.BKCP */
                    }
                    Case (0x14)
                    {
                        BKGU = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKGU) /* \_SB_.PCI0.WMID.BKGU */
                    }
                    Case (0x15)
                    {
                        BKSU = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKSU) /* \_SB_.PCI0.WMID.BKSU */
                    }
                    Case (0x16)
                    {
                        BKGS = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKGS) /* \_SB_.PCI0.WMID.BKGS */
                    }
                    Case (0x17)
                    {
                        BKSS = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKSS) /* \_SB_.PCI0.WMID.BKSS */
                    }
                    Case (0x18)
                    {
                        BKCP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKCP) /* \_SB_.PCI0.WMID.BKCP */
                    }
                    Case (0x19)
                    {
                        BKCP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKCP) /* \_SB_.PCI0.WMID.BKCP */
                    }
                    Case (0x1A)
                    {
                        BKGP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKGP) /* \_SB_.PCI0.WMID.BKGP */
                    }
                    Case (0x1B)
                    {
                        BKSS = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BKSS) /* \_SB_.PCI0.WMID.BKSS */
                    }

                }

                Return (One)
            }

            Method (WMBL, 3, Serialized)
            {
                CTID = 0x4C42
                WSMI (Arg1, Arg2)
                Switch (ToInteger (Arg1))
                {
                    Case (One)
                    {
                        BLCP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLCP) /* \_SB_.PCI0.WMID.BLCP */
                    }
                    Case (0x02)
                    {
                        BLSP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLSP) /* \_SB_.PCI0.WMID.BLSP */
                    }
                    Case (0x03)
                    {
                        BLGB = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLGB) /* \_SB_.PCI0.WMID.BLGB */
                    }
                    Case (0x04)
                    {
                        BLSP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLSP) /* \_SB_.PCI0.WMID.BLSP */
                    }
                    Case (0x05)
                    {
                        BLSP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLSP) /* \_SB_.PCI0.WMID.BLSP */
                    }
                    Case (0x06)
                    {
                        BLLB = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLLB) /* \_SB_.PCI0.WMID.BLLB */
                    }
                    Case (0x07)
                    {
                        BLSD = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLSD) /* \_SB_.PCI0.WMID.BLSD */
                    }
                    Case (0x08)
                    {
                        BLGD = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLGD) /* \_SB_.PCI0.WMID.BLGD */
                    }
                    Case (0x09)
                    {
                        BLDR = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLDR) /* \_SB_.PCI0.WMID.BLDR */
                    }
                    Case (0x0A)
                    {
                        BLGP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLGP) /* \_SB_.PCI0.WMID.BLGP */
                    }
                    Case (0x0B)
                    {
                        BLCP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLCP) /* \_SB_.PCI0.WMID.BLCP */
                    }
                    Case (0x0C)
                    {
                        BLCP = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BLCP) /* \_SB_.PCI0.WMID.BLCP */
                    }

                }

                Return (One)
            }

            Method (WMBG, 3, Serialized)
            {
                CTID = 0x4742
                WSMI (Arg1, Arg2)
                Switch (ToInteger (Arg1))
                {
                    Case (One)
                    {
                        BGS3 = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BGS3) /* \_SB_.PCI0.WMID.BGS3 */
                    }

                }

                Return (0xFFFF)
            }

            Method (WMBH, 3, Serialized)
            {
                CTID = 0x4842
                If ((Arg1 == 0x05))
                {
                    BHSK = Arg2
                    Local0 = DerefOf (BHSK [Zero])
                    Local1 = DerefOf (BHSK [One])
                    Local3 = 0x02
                    BHGK [One] = Zero
                    BHGK [0x02] = Zero
                    BHGK [0x03] = Zero
                    BHGK [0x04] = Zero
                    BHGK [0x05] = Zero
                    BHGK [0x06] = Zero
                    BHGK [0x07] = Zero
                    If ((Local0 == Zero))
                    {
                        Local3 = \_SB.PCI0.LPCB.EC0.GGSI (Arg2, RefOf (Local2))
                        If ((Local3 == Zero))
                        {
                            BHGK [0x03] = (Local2 & 0xFF)
                            Local2 >>= 0x08
                            BHGK [0x04] = (Local2 & 0xFF)
                        }
                    }
                    ElseIf ((Local0 == One))
                    {
                        Local3 = \_SB.PCI0.LPCB.EC0.GGSI (Arg2, RefOf (Local2))
                        If ((Local3 == Zero))
                        {
                            BHGK [One] = (Local2 & 0xFF)
                            Local2 >>= 0x08
                            BHGK [0x02] = (Local2 & 0xFF)
                        }
                    }
                    ElseIf ((Local0 == 0x02))
                    {
                        Local3 = \_SB.PCI0.LPCB.EC0.GGSI (Arg2, RefOf (Local2))
                        If ((Local3 == Zero))
                        {
                            BHGK [0x05] = Local2
                        }
                    }

                    BHGK [Zero] = Local3
                    Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                }

                WSMI (Arg1, Arg2)
                Switch (ToInteger (Arg1))
                {
                    Case (One)
                    {
                        BHSK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHSK) /* \_SB_.PCI0.WMID.BHSK */
                    }
                    Case (0x02)
                    {
                        BHSK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHSK) /* \_SB_.PCI0.WMID.BHSK */
                    }
                    Case (0x03)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x04)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x06)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x07)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x08)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x09)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x0A)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x0B)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x0C)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x0D)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x0E)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x0F)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x10)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x11)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x12)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }
                    Case (0x13)
                    {
                        BHGK = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (BHGK) /* \_SB_.PCI0.WMID.BHGK */
                    }

                }

                Return (One)
            }

            Method (WMAC, 3, Serialized)
            {
                CTID = 0x4143
                WSMI (Arg1, Arg2)
                Switch (ToInteger (Arg1))
                {
                    Case (One)
                    {
                        ACSB = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (ACSB) /* \_SB_.PCI0.WMID.ACSB */
                    }
                    Case (0x02)
                    {
                        ACGB = WMIB /* \_SB_.PCI0.WMID.WMIB */
                        Return (ACGB) /* \_SB_.PCI0.WMID.ACGB */
                    }

                }

                Return (One)
            }

            Method (EVBC, 0, Serialized)
            {
                Local0 = DerefOf (FEBC [Zero])
                Switch (Local0)
                {
                    Case (One)
                    {
                        CLBC (0x04, 0x04)
                        Local1 = DerefOf (FEBC [One])
                        Local2 = Zero
                        If (((Local1 > Zero) && (Local1 < 0x20)))
                        {
                            Local3 = \_SB.PCI0.LPCB.EC0.GCMS (RefOf (Local2))
                            If ((Local3 != Zero))
                            {
                                CLBC (Zero, 0x08)
                            }
                            Else
                            {
                                FEBC [0x02] = (Local2 & 0xFF)
                                Local2 >>= 0x08
                                FEBC [0x03] = (Local2 & 0xFF)
                            }
                        }
                        ElseIf (((Local1 > 0x80) && (Local1 < 0xA0)))
                        {
                            Local3 = \_SB.PCI0.LPCB.EC0.GOTS (Local1, RefOf (Local2))
                            If ((Local3 != Zero))
                            {
                                CLBC (Zero, 0x08)
                            }
                            Else
                            {
                                FEBC [0x02] = (Local2 & 0xFF)
                                Local2 >>= 0x08
                                FEBC [0x03] = (Local2 & 0xFF)
                            }
                        }
                        Else
                        {
                            FEBC [0x02] = Zero
                            FEBC [0x03] = Zero
                        }
                    }
                    Case (0x02)
                    {
                        CLBC (0x02, 0x06)
                    }
                    Case (0x03)
                    {
                        CLBC (0x02, 0x06)
                    }
                    Case (0x04)
                    {
                        CLBC (0x03, 0x05)
                        Local1 = Zero
                        Local2 = \_SB.PCI0.LPCB.EC0.GBL1 (RefOf (Local1))
                        If ((Local2 != Zero))
                        {
                            CLBC (Zero, 0x08)
                        }
                        Else
                        {
                            FEBC [One] = (Local1 & 0xFF)
                            Local2 = \_SB.PCI0.LPCB.EC0.GBL2 (RefOf (Local1))
                            If ((Local2 != Zero))
                            {
                                FEBC [0x02] = Zero
                            }
                            Else
                            {
                                FEBC [0x02] = (Local1 & 0xFF)
                            }
                        }
                    }
                    Case (0x05)
                    {
                        Local1 = Zero
                        Local3 = \_SB.PCI0.LPCB.EC0.GSTY (RefOf (Local1))
                        If ((Local3 != Zero))
                        {
                            CLBC (Zero, 0x08)
                        }
                        Else
                        {
                            FEBC [One] = (Local1 & 0xFF)
                            Local4 = Zero
                            Local5 = \_SB.PCI0.LPCB.EC0.GSDA (RefOf (Local4))
                            If ((Local5 != Zero))
                            {
                                CLBC (Zero, 0x08)
                            }
                            Else
                            {
                                FEBC [0x02] = (Local4 & 0xFF)
                                Local4 >>= 0x08
                                FEBC [0x03] = (Local4 & 0xFF)
                                Local4 >>= 0x08
                                FEBC [0x04] = (Local4 & 0xFF)
                                Local4 >>= 0x08
                                FEBC [0x05] = (Local4 & 0xFF)
                            }
                        }
                    }
                    Case (0x06)
                    {
                        CLBC (0x03, 0x05)
                        Local1 = Zero
                        Local3 = \_SB.PCI0.LPCB.EC0.GTTY (RefOf (Local1))
                        If ((Local3 != Zero))
                        {
                            CLBC (Zero, 0x08)
                        }
                        Else
                        {
                            FEBC [One] = (Local1 & 0xFF)
                            Local4 = Zero
                            Local5 = \_SB.PCI0.LPCB.EC0.GTDA (RefOf (Local4))
                            If ((Local5 != Zero))
                            {
                                CLBC (Zero, 0x08)
                            }
                            Else
                            {
                                FEBC [0x02] = (Local4 & 0xFF)
                            }
                        }
                    }
                    Case (0x07)
                    {
                        CLBC (0x03, 0x05)
                        Local1 = Zero
                        Local3 = \_SB.PCI0.LPCB.EC0.GHKF (RefOf (Local1))
                        If ((Local3 != Zero))
                        {
                            CLBC (Zero, 0x08)
                        }
                        Else
                        {
                            FEBC [One] = (Local1 & 0xFF)
                            Local4 = Zero
                            Local5 = \_SB.PCI0.LPCB.EC0.GHKD (RefOf (Local4))
                            If ((Local5 != Zero))
                            {
                                CLBC (Zero, 0x08)
                            }
                            Else
                            {
                                FEBC [0x02] = (Local4 & 0xFF)
                            }
                        }
                    }
                    Case (0x08)
                    {
                        CLBC (0x02, 0x06)
                        Local1 = Zero
                        Local3 = \_SB.PCI0.LPCB.EC0.GACS (RefOf (Local1))
                        If ((Local3 != Zero))
                        {
                            CLBC (Zero, 0x08)
                        }
                        Else
                        {
                            FEBC [One] = (Local1 & 0xFF)
                        }
                    }
                    Case (0x09)
                    {
                        CLBC (0x02, 0x06)
                        Local1 = Zero
                        Local3 = \_SB.PCI0.LPCB.EC0.GBBS (RefOf (Local1))
                        If ((Local3 != Zero))
                        {
                            CLBC (Zero, 0x08)
                        }
                        Else
                        {
                            FEBC [One] = (Local1 & 0xFF)
                        }
                    }
                    Default
                    {
                        CLBC (Zero, 0x08)
                    }

                }

                Return (FEBC) /* \_SB_.PCI0.WMID.FEBC */
            }

            Method (EVBD, 0, Serialized)
            {
                Local0 = DerefOf (FEBC [Zero])
                Switch (Local0)
                {
                    Case (One)
                    {
                        CLBC (0x02, 0x06)
                    }
                    Default
                    {
                        CLBC (Zero, 0x08)
                        FEBC [One] = 0xE1
                    }

                }

                Return (FEBC) /* \_SB_.PCI0.WMID.FEBC */
            }

            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
            {
                If ((Arg0 == 0xBC))
                {
                    Return (EVBC ())
                }
                ElseIf ((Arg0 == 0xBD))
                {
                    Return (EVBD ())
                }
                Else
                {
                    CLBC (Zero, 0x08)
                    Return (FEBC) /* \_SB_.PCI0.WMID.FEBC */
                }
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 2, "ACRSYS", "ACRPRDCT", 0x00003000)
{
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)

    Scope (\)
    {
        Name (SSDT, Package (0x0C)
        {
            "CPU0IST ", 
            0x7AE856D8, 
            0x000003DF, 
            "APIST   ", 
            0x7AE85C18, 
            0x0000015F, 
            "CPU0CST ", 
            0x7ADCA018, 
            0x00000102, 
            "APCST   ", 
            0x7ADCAF18, 
            0x0000008D
        })
        Name (\PDC0, 0x80000000)
        Name (\PDC1, 0x80000000)
        Name (\PDC2, 0x80000000)
        Name (\PDC3, 0x80000000)
        Name (\SDTL, Zero)
    }

    Scope (\_PR)
    {
        OperationRegion (PNVS, SystemMemory, 0x68B9D000, 0x006D)
        Field (PNVS, AnyAcc, Lock, Preserve)
        {
            PGRV,   8, 
            CFGD,   32, 
            NLPC,   8, 
            ACRT,   8, 
            APSV,   8, 
            AAC0,   8, 
            CPID,   32, 
            Offset (0x29), 
            C3MW,   8, 
            C6MW,   8, 
            C7MW,   8, 
            CDMW,   8, 
            C3LT,   16, 
            C6LT,   16, 
            C7LT,   16, 
            CDLT,   16, 
            CDLV,   16, 
            CDPW,   16, 
            MPMF,   8, 
            DTSE,   8, 
            DTS1,   8, 
            DTS2,   8, 
            DTSF,   8, 
            PDTS,   8, 
            PKGA,   8, 
            DTS3,   8, 
            DTS4,   8, 
            Offset (0x53), 
            EPCS,   8, 
            EMNA,   64, 
            ELNG,   64, 
            HWPV,   8, 
            HWPA,   16, 
            HWPL,   16, 
            POWS,   8, 
            HDCE,   8, 
            HWPI,   8, 
            MWEN,   8
        }
    }

    Scope (\_PR.CPU0)
    {
        Name (HI0, Zero)
        Name (HC0, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (CPDC, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, REVS)
            CreateDWordField (Arg0, 0x04, SIZE)
            Local0 = SizeOf (Arg0)
            Local1 = (Local0 - 0x08)
            CreateField (Arg0, 0x40, (Local1 * 0x08), TEMP)
            Name (STS0, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                           // ....
            })
            Concatenate (STS0, TEMP, Local2)
            Return (COSC (ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */, REVS, SIZE, Local2))
        }

        Method (COSC, 4, Serialized)
        {
            If ((Arg2 > Zero))
            {
                CreateDWordField (Arg3, Zero, STS0)
            }

            CreateDWordField (Arg0, Zero, IID0)
            CreateDWordField (Arg0, 0x04, IID1)
            CreateDWordField (Arg0, 0x08, IID2)
            CreateDWordField (Arg0, 0x0C, IID3)
            Name (UID0, ToUUID ("4077a616-290c-47be-9ebd-d87058713953") /* Unknown UUID */)
            CreateDWordField (UID0, Zero, EID0)
            CreateDWordField (UID0, 0x04, EID1)
            CreateDWordField (UID0, 0x08, EID2)
            CreateDWordField (UID0, 0x0C, EID3)
            If (!(((IID0 == EID0) && (IID1 == EID1)) && ((
                IID2 == EID2) && (IID3 == EID3))))
            {
                STS0 = 0x06
                Return (Arg3)
            }

            If ((Arg1 != One))
            {
                STS0 = 0x0A
                Return (Arg3)
            }

            Return (Arg3)
        }

        Method (GCAP, 1, Serialized)
        {
            CreateDWordField (Arg0, Zero, STS0)
            CreateDWordField (Arg0, 0x04, CAP0)
            If (((STS0 == 0x06) || (STS0 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS0 & One))
            {
                CAP0 &= 0x0BFF
                Return (Zero)
            }

            PDC0 = ((PDC0 & 0x7FFFFFFF) | CAP0) /* \_PR_.CPU0.GCAP.CAP0 */
            If ((CFGD & 0x02))
            {
                If ((((CFGD & 0x02) && (PDC0 & 0x18)) && !
                    (SDTL & 0x02)))
                {
                    SDTL |= 0x02
                    OperationRegion (CST0, SystemMemory, DerefOf (SSDT [0x07]), DerefOf (SSDT [0x08]))
                    Load (CST0, HC0) /* \_PR_.CPU0.HC0_ */
                }
            }

            If ((!(CFGD & One) && ((CFGD & One) && 
                !(SDTL & 0x08))))
            {
                SDTL |= 0x08
                OperationRegion (IST0, SystemMemory, DerefOf (SSDT [One]), DerefOf (SSDT [0x02]))
                Load (IST0, HI0) /* \_PR_.CPU0.HI0_ */
            }

            Return (Zero)
        }
    }

    Scope (\_PR.CPU1)
    {
        Name (HI1, Zero)
        Name (HC1, Zero)
        Name (HW1, Zero)
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS1)
            CreateDWordField (Arg0, 0x04, CAP1)
            If (((STS1 == 0x06) || (STS1 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS1 & One))
            {
                CAP1 &= 0x0BFF
                Return (Zero)
            }

            PDC1 = ((PDC1 & 0x7FFFFFFF) | CAP1) /* \_PR_.CPU1.GCAP.CAP1 */
            If (((PDC1 & 0x09) == 0x09))
            {
                APPT ()
            }

            If ((PDC1 & 0x18))
            {
                APCT ()
            }

            PDC0 = PDC1 /* \PDC1 */
            Return (Zero)
        }

        Method (APCT, 0, Serialized)
        {
            If (((CFGD & 0x02) && !(SDTL & 0x20)))
            {
                SDTL |= 0x20
                OperationRegion (CST1, SystemMemory, DerefOf (SSDT [0x0A]), DerefOf (SSDT [0x0B]))
                Load (CST1, HC1) /* \_PR_.CPU1.HC1_ */
            }
        }

        Method (APPT, 0, Serialized)
        {
            If (((CFGD & One) && !(SDTL & 0x10)))
            {
                SDTL |= 0x10
                OperationRegion (IST1, SystemMemory, DerefOf (SSDT [0x04]), DerefOf (SSDT [0x05]))
                Load (IST1, HI1) /* \_PR_.CPU1.HI1_ */
            }
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS2)
            CreateDWordField (Arg0, 0x04, CAP2)
            If (((STS2 == 0x06) || (STS2 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS2 & One))
            {
                CAP2 &= 0x0BFF
                Return (Zero)
            }

            PDC2 = ((PDC2 & 0x7FFFFFFF) | CAP2) /* \_PR_.CPU2.GCAP.CAP2 */
            If (((PDC2 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC2 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC2 /* \PDC2 */
            Return (Zero)
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (_PDC, 1, NotSerialized)  // _PDC: Processor Driver Capabilities
        {
            Local0 = \_PR.CPU0.CPDC (Arg0)
            GCAP (Local0)
        }

        Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
        {
            Local0 = \_PR.CPU0.COSC (Arg0, Arg1, Arg2, Arg3)
            GCAP (Local0)
            Return (Local0)
        }

        Method (GCAP, 1, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, STS3)
            CreateDWordField (Arg0, 0x04, CAP3)
            If (((STS3 == 0x06) || (STS3 == 0x0A)))
            {
                Return (Zero)
            }

            If ((STS3 & One))
            {
                CAP3 &= 0x0BFF
                Return (Zero)
            }

            PDC3 = ((PDC3 & 0x7FFFFFFF) | CAP3) /* \_PR_.CPU3.GCAP.CAP3 */
            If (((PDC3 & 0x09) == 0x09))
            {
                \_PR.CPU1.APPT ()
            }

            If ((PDC3 & 0x18))
            {
                \_PR.CPU1.APCT ()
            }

            PDC0 = PDC3 /* \PDC3 */
            Return (Zero)
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "ACRSYS", "ACRPRDCT", 0x00001000)
{
    Scope (\_SB)
    {
        Device (TPM)
        {
            Name (_HID, "MSFT0101" /* TPM 2.0 Security Device */)  // _HID: Hardware ID
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadOnly,
                    0xFED40000,         // Address Base
                    0x00005000,         // Address Length
                    )
            })
            OperationRegion (SMIP, SystemIO, 0xB2, One)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB2,   8
            }

            OperationRegion (TPMR, SystemMemory, 0xFED40000, 0x5000)
            Field (TPMR, AnyAcc, NoLock, Preserve)
            {
                ACC0,   8, 
                Offset (0x18), 
                TSTS,   32, 
                Offset (0x30), 
                TITP,   8, 
                Offset (0x40), 
                CREQ,   32, 
                CSTS,   32, 
                Offset (0x4C), 
                HCMD,   32
            }

            OperationRegion (TNVS, SystemMemory, 0x7AFB1000, 0x27)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                CAIN,   8
            }

            OperationRegion (CONA, SystemMemory, 0x7AFB0000, 0x30)
            Field (CONA, DWordAcc, NoLock, Preserve)
            {
                HRTB,   32, 
                ERRR,   32, 
                CLFG,   32, 
                STA1,   32, 
                AccessAs (QWordAcc, 0x00), 
                INTC,   64, 
                AccessAs (DWordAcc, 0x00), 
                CMSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                CMDB,   64, 
                AccessAs (DWordAcc, 0x00), 
                RPSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                RESP,   64
            }

            OperationRegion (STRT, SystemMemory, 0x7B5B6AF0, 0x04)
            Field (STRT, AnyAcc, NoLock, Preserve)
            {
                SMTD,   32
            }

            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        IOB2 = MCIN /* \_SB_.TPM_.MCIN */
                    }
                }

                Return (Zero)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((ACC0 == 0xFF))
                {
                    Return (Zero)
                }

                Return (0x0F)
            }

            Method (HINF, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (TPMV, Package (0x02)
                        {
                            One, 
                            Package (0x02)
                            {
                                0x02, 
                                Zero
                            }
                        })
                        If ((_STA () == Zero))
                        {
                            Return (Package (0x01)
                            {
                                Zero
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM_.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (One)
                    {
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPIP = 0x02
                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x03)
                    {
                        TPM2 [One] = PPRQ /* \_SB_.TPM_.PPRQ */
                        Return (TPM2) /* \_SB_.TPM_.TPM2 */
                    }
                    Case (0x04)
                    {
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        PPIP = 0x05
                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        TPM3 [One] = LPPR /* \_SB_.TPM_.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM_.PPRP */
                        Return (TPM3) /* \_SB_.TPM_.TPM3 */
                    }
                    Case (0x06)
                    {
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg2 [Zero])
                        PPRM = Zero
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg2 [One])
                        }

                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x08)
                    {
                        PPIP = 0x08
                        PPRQ = DerefOf (Arg2 [Zero])
                        IOB2 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (TMCI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        MORD = DerefOf (Arg2 [Zero])
                        MCIP = One
                        IOB2 = MCIN /* \_SB_.TPM_.MCIN */
                        Return (MRET) /* \_SB_.TPM_.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (OASM, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (Zero)
                    {
                        Return (Buffer (One)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (One)
                    {
                        Name (WTME, Zero)
                        If ((SMTD == 0x07))
                        {
                            CREQ = One
                            While (((WTME <= 0xC8) && ((CSTS & 0x02) != 
                                Zero)))
                            {
                                Sleep (One)
                                WTME++
                            }

                            HCMD = 0x02
                        }
                        Else
                        {
                            IOB2 = CAIN /* \_SB_.TPM_.CAIN */
                            While ((STA1 == One))
                            {
                                If (((TSTS & 0x90) == 0x90))
                                {
                                    IOB2 = CAIN /* \_SB_.TPM_.CAIN */
                                    Return (Zero)
                                }

                                If ((CLFG == One))
                                {
                                    If ((WTME == 0x00015F90))
                                    {
                                        Break
                                    }

                                    WTME++
                                }

                                Sleep (One)
                            }

                            STA1 = Zero
                            Return (Zero)
                        }
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (One)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    Return (HINF (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    Return (TPPI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    Return (TMCI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
                {
                    Return (OASM (Arg1, Arg2, Arg3))
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 2, "ACRSYS", "ACRPRDCT", 0x00003000)
{
    External (_PR_.CFGD, UnknownObj)
    External (_PR_.CPU0, DeviceObj)
    External (NLPC, UnknownObj)
    External (OSSL, UnknownObj)
    External (PDC0, UnknownObj)

    Scope (\_PR.CPU0)
    {
        Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
        Method (_PCT, 0, NotSerialized)  // _PCT: Performance Control
        {
            \_PR.CPU0._PPC = Zero
            If (((\_PR.CFGD & One) && (PDC0 & One)))
            {
                Return (Package (0x02)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }, 

                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x00,               // Bit Width
                            0x00,               // Bit Offset
                            0x0000000000000000, // Address
                            ,)
                    }
                })
            }

            Return (Package (0x02)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }
            })
        }

        Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
        {
            If ((OSSL == One))
            {
                Return (SPSS) /* \_PR_.CPU0.SPSS */
            }
            Else
            {
                Return (NPSS) /* \_PR_.CPU0.NPSS */
            }
        }

        Name (NPSS, Package (0x05)
        {
            Package (0x06)
            {
                0x0000044D, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Name (SPSS, Package (0x11)
        {
            Package (0x06)
            {
                0x00000960, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00001800, 
                0x00001800
            }, 

            Package (0x06)
            {
                0x000008FC, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00001700, 
                0x00001700
            }, 

            Package (0x06)
            {
                0x00000898, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00001600, 
                0x00001600
            }, 

            Package (0x06)
            {
                0x00000834, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00001500, 
                0x00001500
            }, 

            Package (0x06)
            {
                0x000007D0, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00001400, 
                0x00001400
            }, 

            Package (0x06)
            {
                0x0000076C, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00001300, 
                0x00001300
            }, 

            Package (0x06)
            {
                0x00000708, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00001200, 
                0x00001200
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00001100, 
                0x00001100
            }, 

            Package (0x06)
            {
                0x00000640, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00001000, 
                0x00001000
            }, 

            Package (0x06)
            {
                0x000005DC, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000F00, 
                0x00000F00
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000E00, 
                0x00000E00
            }, 

            Package (0x06)
            {
                0x00000514, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000D00, 
                0x00000D00
            }, 

            Package (0x06)
            {
                0x000004B0, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000C00, 
                0x00000C00
            }, 

            Package (0x06)
            {
                0x0000044C, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000B00, 
                0x00000B00
            }, 

            Package (0x06)
            {
                0x000003E8, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000A00, 
                0x00000A00
            }, 

            Package (0x06)
            {
                0x00000384, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000900, 
                0x00000900
            }, 

            Package (0x06)
            {
                0x00000320, 
                0x00000000, 
                0x0000000A, 
                0x0000000A, 
                0x00000800, 
                0x00000800
            }
        })
        Method (_PSD, 0, NotSerialized)  // _PSD: Power State Dependencies
        {
            Return (Package (0x01)
            {
                Package (0x05)
                {
                    0x05, 
                    Zero, 
                    Zero, 
                    0xFE, 
                    NLPC
                }
            })
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 2, "ACRSYS", "ACRPRDCT", 0x00000003)
{
    External (_PR_.CPU0, UnknownObj)
    External (_PR_.CPU0._PPC, UnknownObj)
    External (_PR_.CPU0._PSS, IntObj)
    External (_PR_.CPU0._PTC, IntObj)
    External (_PR_.CPU0._TDL, IntObj)
    External (_PR_.CPU0._TPC, IntObj)
    External (_PR_.CPU0._TSD, IntObj)
    External (_PR_.CPU0._TSS, IntObj)
    External (_PR_.CPU0.NPSS, UnknownObj)
    External (_PR_.CPU0.SPSS, UnknownObj)
    External (_PR_.CPU1, UnknownObj)
    External (_PR_.CPU2, UnknownObj)
    External (_PR_.CPU3, UnknownObj)
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.PJID, UnknownObj)
    External (_SB_.PCI0.LPCB.EC0_.RTMP, IntObj)
    External (_TZ_.LEGA, UnknownObj)
    External (_TZ_.LEGC, UnknownObj)
    External (_TZ_.LEGP, UnknownObj)
    External (_TZ_.TZ01, UnknownObj)
    External (ACTT, IntObj)
    External (CPUS, IntObj)
    External (CRTT, IntObj)
    External (DCFE, IntObj)
    External (DPAP, UnknownObj)
    External (DPCP, UnknownObj)
    External (DPPP, UnknownObj)
    External (DPSR, UnknownObj)
    External (DPTE, UnknownObj)
    External (ODV0, IntObj)
    External (ODV1, IntObj)
    External (ODV2, IntObj)
    External (ODV3, IntObj)
    External (ODV4, IntObj)
    External (ODV5, IntObj)
    External (OSSL, UnknownObj)
    External (PBPE, UnknownObj)
    External (PSVT, IntObj)
    External (S1DE, UnknownObj)
    External (SSP1, IntObj)
    External (TRTV, IntObj)
    External (VSPE, UnknownObj)

    Scope (\_SB)
    {
        Device (IETM)
        {
            Name (_HID, EisaId ("INT3400") /* Intel Dynamic Power Performance Management */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\DPTE == One))
                {
                    If ((\_SB.PCI0.LPCB.EC0.PJID == 0x02))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (TMPP, Package (0x05)
            {
                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x10)
                {
                    /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            })
            Method (IDSP, 0, Serialized)
            {
                Name (TMPI, Zero)
                If (((\DPPP == 0x02) && CondRefOf (DP2P)))
                {
                    TMPP [TMPI] = DerefOf (DP2P [Zero])
                    TMPI++
                }

                If (((\DPPP == One) && CondRefOf (DPSP)))
                {
                    TMPP [TMPI] = DerefOf (DPSP [Zero])
                    TMPI++
                }

                If (((\DPAP == One) && CondRefOf (DASP)))
                {
                    TMPP [TMPI] = DerefOf (DASP [Zero])
                    TMPI++
                }

                If (((\DPCP == One) && CondRefOf (DCSP)))
                {
                    TMPP [TMPI] = DerefOf (DCSP [Zero])
                    TMPI++
                }

                If (((\PBPE == One) && CondRefOf (POBP)))
                {
                    TMPP [TMPI] = DerefOf (POBP [Zero])
                    TMPI++
                }

                If (((\VSPE == One) && CondRefOf (DVSP)))
                {
                    TMPP [TMPI] = DerefOf (DVSP [Zero])
                    TMPI++
                }

                Return (TMPP) /* \_SB_.IETM.TMPP */
            }

            Name (PTRP, Zero)
            Name (PSEM, Zero)
            Name (ATRP, Zero)
            Name (ASEM, Zero)
            Name (YTRP, Zero)
            Name (YSEM, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (NUMP, Zero)
                Name (UID2, Buffer (0x10)
                {
                    /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                    /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
                })
                CreateDWordField (Arg3, Zero, STS1)
                CreateDWordField (Arg3, 0x04, CAP1)
                IDSP ()
                NUMP = SizeOf (TMPP)
                CreateDWordField (Arg0, Zero, IID0)
                CreateDWordField (Arg0, 0x04, IID1)
                CreateDWordField (Arg0, 0x08, IID2)
                CreateDWordField (Arg0, 0x0C, IID3)
                CreateDWordField (UID2, Zero, EID0)
                CreateDWordField (UID2, 0x04, EID1)
                CreateDWordField (UID2, 0x08, EID2)
                CreateDWordField (UID2, 0x0C, EID3)
                While (NUMP)
                {
                    UID2 = DerefOf (TMPP [(NUMP - One)])
                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        Break
                    }

                    NUMP--
                }

                If ((NUMP == Zero))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x06
                    Return (Arg3)
                }

                If ((Arg1 != One))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x0A
                    Return (Arg3)
                }

                If ((Arg2 != 0x02))
                {
                    STS1 &= 0xFFFFFF00
                    STS1 |= 0x02
                    Return (Arg3)
                }

                If (CondRefOf (\PSVT))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \PSVT /* External reference */
                    }

                    If (CondRefOf (DPSP))
                    {
                        UID2 = DerefOf (DPSP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \PSVT = 0x6E
                                \_TZ.LEGP = Zero
                            }
                            Else
                            {
                                \PSVT = PTRP /* \_SB_.IETM.PTRP */
                                \_TZ.LEGP = One
                            }

                            Notify (\_TZ.TZ01, 0x81) // Information Change
                        }

                        Return (Arg3)
                    }
                }

                If (CondRefOf (\PSVT))
                {
                    If ((PSEM == Zero))
                    {
                        PSEM = One
                        PTRP = \PSVT /* External reference */
                    }

                    If (CondRefOf (DP2P))
                    {
                        UID2 = DerefOf (DP2P [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \PSVT = 0x6E
                                \_TZ.LEGP = Zero
                            }
                            Else
                            {
                                \PSVT = PTRP /* \_SB_.IETM.PTRP */
                                \_TZ.LEGP = One
                            }

                            Notify (\_TZ.TZ01, 0x81) // Information Change
                        }

                        Return (Arg3)
                    }
                }

                If (CondRefOf (\ACTT))
                {
                    If ((ASEM == Zero))
                    {
                        ASEM = One
                        ATRP = \ACTT /* External reference */
                    }

                    If (CondRefOf (DASP))
                    {
                        UID2 = DerefOf (DASP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \ACTT = 0x6E
                                \_TZ.LEGA = Zero
                            }
                            Else
                            {
                                \ACTT = ATRP /* \_SB_.IETM.ATRP */
                                \_TZ.LEGA = One
                            }

                            Notify (\_TZ.TZ01, 0x81) // Information Change
                        }

                        Return (Arg3)
                    }
                }

                If (CondRefOf (\CRTT))
                {
                    If ((YSEM == Zero))
                    {
                        YSEM = One
                        YTRP = \CRTT /* External reference */
                    }

                    If (CondRefOf (DCSP))
                    {
                        UID2 = DerefOf (DCSP [Zero])
                    }

                    If ((((IID0 == EID0) && (IID1 == EID1)) && ((IID2 == 
                        EID2) && (IID3 == EID3))))
                    {
                        If (~(STS1 & One))
                        {
                            If ((CAP1 & One))
                            {
                                \CRTT = 0xD2
                                \_TZ.LEGC = Zero
                            }
                            Else
                            {
                                \CRTT = YTRP /* \_SB_.IETM.YTRP */
                                \_TZ.LEGC = One
                            }

                            Notify (\_TZ.TZ01, 0x81) // Information Change
                        }

                        Return (Arg3)
                    }
                }

                Return (Arg3)
            }

            Method (KTOC, 1, Serialized)
            {
                If ((Arg0 > 0x0AAC))
                {
                    Return (((Arg0 - 0x0AAC) / 0x0A))
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (CTOK, 1, Serialized)
            {
                Return (((Arg0 * 0x0A) + 0x0AAC))
            }

            Method (DCFG, 0, NotSerialized)
            {
                Return (\DCFE) /* External reference */
            }

            Name (ODVX, Package (0x06)
            {
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            })
            Method (ODVP, 0, Serialized)
            {
                ODVX [Zero] = \ODV0 /* External reference */
                ODVX [One] = \ODV1 /* External reference */
                ODVX [0x02] = \ODV2 /* External reference */
                ODVX [0x03] = \ODV3 /* External reference */
                ODVX [0x04] = \ODV4 /* External reference */
                ODVX [0x05] = \ODV5 /* External reference */
                Return (ODVX) /* \_SB_.IETM.ODVX */
            }
        }
    }

    Scope (\_SB.PCI0)
    {
        Device (TCPU)
        {
            Name (_ADR, One)  // _ADR: Address
            Name (GTSH, 0x28)
            Name (LSTM, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\DPSR == One))
                {
                    If ((\_SB.PCI0.LPCB.EC0.PJID == 0x02))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (PPCC, Package (0x02)
            {
                0x02, 
                Package (0x06)
                {
                    Zero, 
                    0x0FA0, 
                    0x1D4C, 
                    0x03E8, 
                    0x03E8, 
                    0xC8
                }
            })
            Name (_PPC, Zero)  // _PPC: Performance Present Capabilities
            Method (SPPC, 1, Serialized)
            {
                Debug = "cpudptf: SPPC Called"
                If (CondRefOf (\_PR.CPU0._PPC))
                {
                    \_PR.CPU0._PPC = Arg0
                }

                Notify (\_PR.CPU0, 0x80) // Status Change
                Notify (\_PR.CPU1, 0x80) // Status Change
                Notify (\_PR.CPU2, 0x80) // Status Change
                Notify (\_PR.CPU3, 0x80) // Status Change
            }

            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (TCPU, 0x91) // Device-Specific
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_PSS, 0, NotSerialized)  // _PSS: Performance Supported States
            {
                Debug = "cpudptf: _PSS Called"
                If (CondRefOf (\_PR.CPU0._PSS))
                {
                    Return (\_PR.CPU0._PSS) /* External reference */
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }, 

                        Package (0x06)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                }
            }

            Method (_TSS, 0, NotSerialized)  // _TSS: Throttling Supported States
            {
                Debug = "cpudptf: _TSS Called"
                If (CondRefOf (\_PR.CPU0._TSS))
                {
                    Return (\_PR.CPU0._TSS) /* External reference */
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        Package (0x05)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }, 

                        Package (0x05)
                        {
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                }
            }

            Method (_TPC, 0, NotSerialized)  // _TPC: Throttling Present Capabilities
            {
                Debug = "cpudptf: _TPC Called"
                If (CondRefOf (\_PR.CPU0._TPC))
                {
                    Return (\_PR.CPU0._TPC) /* External reference */
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PTC, 0, NotSerialized)  // _PTC: Processor Throttling Control
            {
                Debug = "cpudptf: _PTC Called"
                If (CondRefOf (\_PR.CPU0._PTC))
                {
                    Return (\_PR.CPU0._PTC) /* External reference */
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }, 

                        ResourceTemplate ()
                        {
                            Register (FFixedHW, 
                                0x00,               // Bit Width
                                0x00,               // Bit Offset
                                0x0000000000000000, // Address
                                ,)
                        }
                    })
                }
            }

            Method (_TSD, 0, NotSerialized)  // _TSD: Throttling State Dependencies
            {
                Debug = "cpudptf: _TSD Called"
                If (CondRefOf (\_PR.CPU0._TSD))
                {
                    Return (\_PR.CPU0._TSD) /* External reference */
                }
                Else
                {
                    Return (Package (0x02)
                    {
                        Package (0x05)
                        {
                            0x05, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }, 

                        Package (0x05)
                        {
                            0x05, 
                            Zero, 
                            Zero, 
                            Zero, 
                            Zero
                        }
                    })
                }
            }

            Method (_TDL, 0, NotSerialized)  // _TDL: T-State Depth Limit
            {
                Debug = "cpudptf: _TDL Called"
                If (CondRefOf (\_PR.CPU0._TDL))
                {
                    Return (\_PR.CPU0._TDL) /* External reference */
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PDL, 0, NotSerialized)  // _PDL: P-state Depth Limit
            {
                Debug = "cpudptf: _PDL Called"
                If (CondRefOf (\_PR.CPU0._PSS))
                {
                    If ((\OSSL == One))
                    {
                        Return ((SizeOf (\_PR.CPU0.SPSS) - One))
                    }
                    Else
                    {
                        Return ((SizeOf (\_PR.CPU0.NPSS) - One))
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\CPUS) /* External reference */
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (0x4B))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (0x69))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (0xFA))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (0x61))
            }

            Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    CTYP = Arg0
                    Notify (TCPU, 0x91) // Device-Specific
                }
            }

            Name (VERS, Zero)
            Name (CTYP, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    VERS = Arg0
                    CTYP = Arg1
                    ALMT = Arg2
                    PLMT = Arg3
                    WKLD = Arg4
                    DSTA = Arg5
                    RES1 = Arg6
                    Notify (TCPU, 0x91) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB)
    {
        Device (SEN1)
        {
            Name (_HID, EisaId ("INT3403") /* DPTF Temperature Sensor */)  // _HID: Hardware ID
            Name (_UID, "SEN1")  // _UID: Unique ID
            Name (_STR, Unicode ("Sensor 1 CPU VR Temp"))  // _STR: Description String
            Name (PTYP, 0x03)
            Name (FAUX, Zero)
            Name (SAUX, Zero)
            Name (CTYP, Zero)
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((\S1DE == One))
                {
                    If ((\_SB.PCI0.LPCB.EC0.PJID == 0x02))
                    {
                        Return (0x0F)
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }
                Else
                {
                    Return (Zero)
                }
            }

            Name (LRTM, 0x20)
            Method (_TMP, 0, Serialized)  // _TMP: Temperature
            {
                Local0 = \_SB.PCI0.LPCB.EC0.RTMP /* External reference */
                If ((Local0 > 0x6E))
                {
                    Local0 = 0x50
                }

                If ((Local0 < 0x0A))
                {
                    Local0 = 0x20
                }

                LRTM = Local0
                Return (\_SB.IETM.CTOK (Local0))
            }

            Name (PATC, 0x02)
            Method (PAT0, 1, Serialized)
            {
            }

            Method (PAT1, 1, Serialized)
            {
            }

            Name (GTSH, 0x14)
            Name (LSTM, Zero)
            Method (_DTI, 1, NotSerialized)  // _DTI: Device Temperature Indication
            {
                LSTM = Arg0
                Notify (\_SB.SEN1, 0x91) // Device-Specific
            }

            Method (_NTT, 0, NotSerialized)  // _NTT: Notification Temperature Threshold
            {
                Return (0x0ADE)
            }

            Method (_TSP, 0, Serialized)  // _TSP: Thermal Sampling Period
            {
                Return (\SSP1) /* External reference */
            }

            Method (_PSV, 0, Serialized)  // _PSV: Passive Temperature
            {
                Return (\_SB.IETM.CTOK (0x37))
            }

            Method (_CRT, 0, Serialized)  // _CRT: Critical Temperature
            {
                Return (\_SB.IETM.CTOK (0x5F))
            }

            Method (_CR3, 0, Serialized)  // _CR3: Warm/Standby Temperature
            {
                Return (\_SB.IETM.CTOK (0xFA))
            }

            Method (_HOT, 0, Serialized)  // _HOT: Hot Temperature
            {
                Return (\_SB.IETM.CTOK (0x57))
            }

            Method (_SCP, 3, Serialized)  // _SCP: Set Cooling Policy
            {
                If (((Arg0 == Zero) || (Arg0 == One)))
                {
                    CTYP = Arg0
                    Notify (\_SB.SEN1, 0x91) // Device-Specific
                }
            }

            Name (VERS, Zero)
            Name (ALMT, Zero)
            Name (PLMT, Zero)
            Name (WKLD, Zero)
            Name (DSTA, Zero)
            Name (RES1, Zero)
            Method (DSCP, 7, Serialized)
            {
                If (((Arg1 == Zero) || (Arg1 == One)))
                {
                    VERS = Arg0
                    CTYP = Arg1
                    ALMT = Arg2
                    PLMT = Arg3
                    WKLD = Arg4
                    DSTA = Arg5
                    RES1 = Arg6
                    Notify (\_SB.SEN1, 0x91) // Device-Specific
                }
            }
        }
    }

    Scope (\_SB.IETM)
    {
        Name (_TRT, Package (0x02)  // _TRT: Thermal Relationship Table
        {
            Package (0x08)
            {
                \_SB.PCI0.TCPU, 
                \_SB.PCI0.TCPU, 
                0x64, 
                0x32, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }, 

            Package (0x08)
            {
                \_SB.PCI0.TCPU, 
                \_SB.SEN1, 
                0x64, 
                0x28, 
                Zero, 
                Zero, 
                Zero, 
                Zero
            }
        })
        Method (TRTR, 0, NotSerialized)
        {
            Return (TRTV) /* External reference */
        }
    }

    Scope (\_SB.IETM)
    {
        Name (PTTL, 0x14)
        Name (PSVT, Package (0x03)
        {
            0x02, 
            Package (0x0C)
            {
                \_SB.PCI0.TCPU, 
                \_SB.SEN1, 
                0x02, 
                0x28, 
                0x0CD2, 
                0x09, 
                0x00010000, 
                "MIN", 
                0x01F4, 
                0x0A, 
                0x14, 
                Zero
            }, 

            Package (0x0C)
            {
                \_SB.PCI0.TCPU, 
                \_SB.PCI0.TCPU, 
                One, 
                0x32, 
                0x0D9A, 
                0x09, 
                0x00010000, 
                "MIN", 
                0x01F4, 
                0x0A, 
                0x14, 
                Zero
            }
        })
    }

    Scope (\_SB.IETM)
    {
        Name (DP2P, Package (0x01)
        {
            ToUUID ("9e04115a-ae87-4d1c-9500-0f3e340bfe75") /* Unknown UUID */
        })
        Name (DPSP, Package (0x01)
        {
            ToUUID ("42a441d6-ae6a-462b-a84b-4a8ce79027d3") /* Unknown UUID */
        })
        Name (DASP, Package (0x01)
        {
            ToUUID ("3a95c389-e4b8-4629-a526-c52c88626bae") /* Unknown UUID */
        })
        Name (DCSP, Package (0x01)
        {
            ToUUID ("97c68ae7-15fa-499c-b8c9-5da81d606e0a") /* Unknown UUID */
        })
        Name (POBP, Package (0x01)
        {
            ToUUID ("f5a35014-c209-46a4-993a-eb56de7530a1") /* Unknown UUID */
        })
        Name (DVSP, Package (0x01)
        {
            ToUUID ("6ed722a7-9240-48a5-b479-31eef723d7cf") /* Unknown UUID */
        })
    }

    Scope (\_SB.IETM)
    {
        Method (GDDV, 0, Serialized)
        {
            Return (Package (0x01)
            {
                Buffer (0x0C)
                {
                    /* 0000 */  0xE5, 0x1F, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01,  // ........
                    /* 0008 */  0x00, 0x00, 0x00, 0x00                           // ....
                }
            })
        }
    }
}



TPM2
----
[000h 0000 004h]                   Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004 004h]                Table Length : 00000034
[008h 0008 001h]                    Revision : 03
[009h 0009 001h]                    Checksum : 97
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]                    Reserved : 00000000
[028h 0040 008h]             Control Address : 00000000FED40040
[030h 0048 004h]                Start Method : 00000007

Raw Table Data: Length 52 (0x34)

    0000: 54 50 4D 32 34 00 00 00 03 97 41 43 52 53 59 53  // TPM24.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 02 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 00 00 00 00 40 00 D4 FE 00 00 00 00  // ........@.......
    0030: 07 00 00 00                                      // ....


UEFI1
-----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000042
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 16
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000002
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 010h]             UUID Identifier : C68ED8E2-9DC6-4CBD-9D94-DB65ACC5C332
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 66 (0x42)

    0000: 55 45 46 49 42 00 00 00 01 16 41 43 52 53 59 53  // UEFIB.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 02 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 E2 D8 8E C6 C6 9D BD 4C 9D 94 DB 65  // ...........L...e
    0030: AC C5 C3 32 36 00 01 00 00 00 00 00 00 00 00 00  // ...26...........
    0040: 00 00                                            // ..


UEFI2
-----
[000h 0000 004h]                   Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004 004h]                Table Length : 00000236
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : D1
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000001
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 010h]             UUID Identifier : 9D4BF935-A674-4710-BA02-BF0AA1758C7B
[034h 0052 002h]                 Data Offset : 0036

Raw Table Data: Length 566 (0x236)

    0000: 55 45 46 49 36 02 00 00 01 D1 41 43 52 53 59 53  // UEFI6.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 01 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 35 F9 4B 9D 74 A6 10 47 BA 02 BF 0A  // ....5.K.t..G....
    0030: A1 75 8C 7B 36 00 24 42 56 44 54 24 00 00 00 24  // .u.{6.$BVDT$...$
    0040: 00 00 00 24 56 31 2E 32 39 00 00 00 00 00 00 00  // ...$V1.29.......
    0050: 00 00 00 00 00 00 00 00 00 00 00 00 24 5A 38 50  // ............$Z8P
    0060: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0070: 00 00 00 00 00 00 24 30 35 2E 31 31 2E 35 31 00  // ......$05.11.51.
    0080: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 FF FF FF FF  // ................
    00A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    00F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0100: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0110: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0120: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0130: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0140: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0150: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0160: FF FF FF FF FF 24 42 4D 45 24 00 A0 31 00 00 10  // .....$BME$..1...
    0170: 00 00 24 00 00 38 00 00 00 00 00 24 00 FF FF FF  // ..$..8.....$....
    0180: FF FF FF FF FF 24 5F 4D 53 43 5F 56 45 52 3D 40  // .....$_MSC_VER=@
    0190: 06 24 52 44 41 54 45 18 10 29 24 45 53 52 54 29  // .$RDATE..)$ESRT)
    01A0: 71 14 56 5E 67 D4 FF 47 FF D9 46 AC 24 8B 33 1F  // q.V^g..G..F.$.3.
    01B0: 93 11 95 8B 01 00 00 24 45 4E 44 4F 46 42 56 44  // .......$ENDOFBVD
    01C0: 54 FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // T...............
    01D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    01F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0200: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0210: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0220: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    0230: FF FF FF FF FF FF                                // ......


WDAT
----
[000h 0000 004h]                   Signature : "WDAT"    [Watchdog Action Table]
[004h 0004 004h]                Table Length : 00000104
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : D6
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000000
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]               Header Length : 00000020
[028h 0040 002h]                 PCI Segment : 00FF
[02Ah 0042 001h]                     PCI Bus : FF
[02Bh 0043 001h]                  PCI Device : FF
[02Ch 0044 001h]                PCI Function : FF
[02Dh 0045 003h]                    Reserved : 000000
[030h 0048 004h]                Timer Period : 00000258
[034h 0052 004h]                   Max Count : 000003FF
[038h 0056 004h]                   Min Count : 00000002
[03Ch 0060 001h]       Flags (decoded below) : 81
                                     Enabled : 1
                         Stopped When Asleep : 1
[03Dh 0061 003h]                    Reserved : 000000
[040h 0064 004h]        Watchdog Entry Count : 00000008

[044h 0068 001h]             Watchdog Action : 01
[045h 0069 001h]                 Instruction : 82
[046h 0070 002h]                    Reserved : 0000

[048h 0072 00Ch]             Register Region : [Generic Address Structure]
[048h 0072 001h]                    Space ID : 01 [SystemIO]
[049h 0073 001h]                   Bit Width : 0A
[04Ah 0074 001h]                  Bit Offset : 00
[04Bh 0075 001h]        Encoded Access Width : 03 [DWord Access:32]
[04Ch 0076 008h]                     Address : 0000000000000460

[054h 0084 004h]                       Value : 00000004
[058h 0088 004h]               Register Mask : 000003FF

[05Ch 0092 001h]             Watchdog Action : 06
[05Dh 0093 001h]                 Instruction : 83
[05Eh 0094 002h]                    Reserved : 0000

[060h 0096 00Ch]             Register Region : [Generic Address Structure]
[060h 0096 001h]                    Space ID : 01 [SystemIO]
[061h 0097 001h]                   Bit Width : 0A
[062h 0098 001h]                  Bit Offset : 10
[063h 0099 001h]        Encoded Access Width : 03 [DWord Access:32]
[064h 0100 008h]                     Address : 0000000000000470

[06Ch 0108 004h]                       Value : 000003FF
[070h 0112 004h]               Register Mask : 000003FF

[074h 0116 001h]             Watchdog Action : 08
[075h 0117 001h]                 Instruction : 00
[076h 0118 002h]                    Reserved : 0000

[078h 0120 00Ch]             Register Region : [Generic Address Structure]
[078h 0120 001h]                    Space ID : 01 [SystemIO]
[079h 0121 001h]                   Bit Width : 01
[07Ah 0122 001h]                  Bit Offset : 0B
[07Bh 0123 001h]        Encoded Access Width : 03 [DWord Access:32]
[07Ch 0124 008h]                     Address : 0000000000000468

[084h 0132 004h]                       Value : 00000000
[088h 0136 004h]               Register Mask : 00000001

[08Ch 0140 001h]             Watchdog Action : 09
[08Dh 0141 001h]                 Instruction : 82
[08Eh 0142 002h]                    Reserved : 0000

[090h 0144 00Ch]             Register Region : [Generic Address Structure]
[090h 0144 001h]                    Space ID : 01 [SystemIO]
[091h 0145 001h]                   Bit Width : 01
[092h 0146 001h]                  Bit Offset : 0B
[093h 0147 001h]        Encoded Access Width : 03 [DWord Access:32]
[094h 0148 008h]                     Address : 0000000000000468

[09Ch 0156 004h]                       Value : 00000000
[0A0h 0160 004h]               Register Mask : 00000001

[0A4h 0164 001h]             Watchdog Action : 0A
[0A5h 0165 001h]                 Instruction : 00
[0A6h 0166 002h]                    Reserved : 0000

[0A8h 0168 00Ch]             Register Region : [Generic Address Structure]
[0A8h 0168 001h]                    Space ID : 01 [SystemIO]
[0A9h 0169 001h]                   Bit Width : 01
[0AAh 0170 001h]                  Bit Offset : 0B
[0ABh 0171 001h]        Encoded Access Width : 03 [DWord Access:32]
[0ACh 0172 008h]                     Address : 0000000000000468

[0B4h 0180 004h]                       Value : 00000001
[0B8h 0184 004h]               Register Mask : 00000001

[0BCh 0188 001h]             Watchdog Action : 0B
[0BDh 0189 001h]                 Instruction : 82
[0BEh 0190 002h]                    Reserved : 0000

[0C0h 0192 00Ch]             Register Region : [Generic Address Structure]
[0C0h 0192 001h]                    Space ID : 01 [SystemIO]
[0C1h 0193 001h]                   Bit Width : 01
[0C2h 0194 001h]                  Bit Offset : 0B
[0C3h 0195 001h]        Encoded Access Width : 03 [DWord Access:32]
[0C4h 0196 008h]                     Address : 0000000000000468

[0CCh 0204 004h]                       Value : 00000001
[0D0h 0208 004h]               Register Mask : 00000001

[0D4h 0212 001h]             Watchdog Action : 20
[0D5h 0213 001h]                 Instruction : 00
[0D6h 0214 002h]                    Reserved : 0000

[0D8h 0216 00Ch]             Register Region : [Generic Address Structure]
[0D8h 0216 001h]                    Space ID : 01 [SystemIO]
[0D9h 0217 001h]                   Bit Width : 01
[0DAh 0218 001h]                  Bit Offset : 11
[0DBh 0219 001h]        Encoded Access Width : 03 [DWord Access:32]
[0DCh 0220 008h]                     Address : 0000000000000464

[0E4h 0228 004h]                       Value : 00000001
[0E8h 0232 004h]               Register Mask : 00000001

[0ECh 0236 001h]             Watchdog Action : 21
[0EDh 0237 001h]                 Instruction : 82
[0EEh 0238 002h]                    Reserved : 0000

[0F0h 0240 00Ch]             Register Region : [Generic Address Structure]
[0F0h 0240 001h]                    Space ID : 01 [SystemIO]
[0F1h 0241 001h]                   Bit Width : 01
[0F2h 0242 001h]                  Bit Offset : 11
[0F3h 0243 001h]        Encoded Access Width : 03 [DWord Access:32]
[0F4h 0244 008h]                     Address : 0000000000000464

[0FCh 0252 004h]                       Value : 00000001
[100h 0256 004h]               Register Mask : 00000001

Raw Table Data: Length 260 (0x104)

    0000: 57 44 41 54 04 01 00 00 01 D6 41 43 52 53 59 53  // WDAT......ACRSYS
    0010: 41 43 52 50 52 44 43 54 00 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 20 00 00 00 FF 00 FF FF FF 00 00 00  // .... ...........
    0030: 58 02 00 00 FF 03 00 00 02 00 00 00 81 00 00 00  // X...............
    0040: 08 00 00 00 01 82 00 00 01 0A 00 03 60 04 00 00  // ............`...
    0050: 00 00 00 00 04 00 00 00 FF 03 00 00 06 83 00 00  // ................
    0060: 01 0A 10 03 70 04 00 00 00 00 00 00 FF 03 00 00  // ....p...........
    0070: FF 03 00 00 08 00 00 00 01 01 0B 03 68 04 00 00  // ............h...
    0080: 00 00 00 00 00 00 00 00 01 00 00 00 09 82 00 00  // ................
    0090: 01 01 0B 03 68 04 00 00 00 00 00 00 00 00 00 00  // ....h...........
    00A0: 01 00 00 00 0A 00 00 00 01 01 0B 03 68 04 00 00  // ............h...
    00B0: 00 00 00 00 01 00 00 00 01 00 00 00 0B 82 00 00  // ................
    00C0: 01 01 0B 03 68 04 00 00 00 00 00 00 01 00 00 00  // ....h...........
    00D0: 01 00 00 00 20 00 00 00 01 01 11 03 64 04 00 00  // .... .......d...
    00E0: 00 00 00 00 01 00 00 00 01 00 00 00 21 82 00 00  // ............!...
    00F0: 01 01 11 03 64 04 00 00 00 00 00 00 01 00 00 00  // ....d...........
    0100: 01 00 00 00                                      // ....


WSMT
----
[000h 0000 004h]                   Signature : "WSMT"    [Windows SMM Security Mitigations Table]
[004h 0004 004h]                Table Length : 00000028
[008h 0008 001h]                    Revision : 01
[009h 0009 001h]                    Checksum : 95
[00Ah 0010 006h]                      Oem ID : "ACRSYS"
[010h 0016 008h]                Oem Table ID : "ACRPRDCT"
[018h 0024 004h]                Oem Revision : 00000003
[01Ch 0028 004h]             Asl Compiler ID : "1025"
[020h 0032 004h]       Asl Compiler Revision : 00040000

[024h 0036 004h]            Protection Flags : 00000000
                          FIXED_COMM_BUFFERS : 0
           COMM_BUFFER_NESTED_PTR_PROTECTION : 0
                  SYSTEM_RESOURCE_PROTECTION : 0

Raw Table Data: Length 40 (0x28)

    0000: 57 53 4D 54 28 00 00 00 01 95 41 43 52 53 59 53  // WSMT(.....ACRSYS
    0010: 41 43 52 50 52 44 43 54 03 00 00 00 31 30 32 35  // ACRPRDCT....1025
    0020: 00 00 04 00 00 00 00 00                          // ........


