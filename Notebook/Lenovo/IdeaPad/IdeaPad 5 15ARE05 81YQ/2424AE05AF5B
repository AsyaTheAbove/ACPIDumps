
Intel ACPI Component Architecture
ACPI Binary Table Extraction Utility version 20220331
Copyright (c) 2000 - 2022 Intel Corporation


 Signature  Length    Version Oem       Oem         Oem         Compiler Compiler
                              Id        TableId     RevisionId  Name     Revision
 _________  __________  ____  ________  __________  __________  _______  __________

 01)  SSDT  0x00001BF4  0x01  "LENOVO"  "AmdTable"  0x00000001  "AMD "   0x00000001
 02)  MCFG  0x0000003C  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 03)  APIC  0x00000138  0x02  "LENOVO"  "CB-01   "  0x00000000  "PTEC"   0x00000002
 04)  CRAT  0x00000F00  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 05)  SSDT  0x00007216  0x02  "LENOVO"  "AmdTable"  0x00000002  "MSFT"   0x04000000
 06)  TPM2  0x00000038  0x04  "LENOVO"  "CB-01   "  0x00000002  "PTEC"   0x00000002
 07)  VFCT  0x0000D484  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 08)  BATB  0x0000004A  0x02  "LENOVO"  "CB-01   "  0x00000000  "PTEC"   0x00000002
 09)  SSDT  0x00000090  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 10)  CDIT  0x00000029  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 11)  UEFI  0x000000EE  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 12)  IVRS  0x000001A4  0x02  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 13)  DSDT  0x00009676  0x01  "LENOVO"  "AMD     "  0x00001000  "INTL"   0x20180313
 14)  SSDT  0x00001598  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 15)  SSDT  0x00000556  0x01  "LENOVO"  "Tpm2Tabl"  0x00009999  "INTL"   0x20180313
 16)  SSDT  0x000009AD  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 17)  SSDT  0x00000266  0x01  "LENOVO"  "STD3    "  0x00000001  "INTL"   0x20180313
 18)  FACP  0x00000114  0x06  "LENOVO"  "CB-01   "  0x00000003  "PTEC"   0x00000002
 19)  FPDT  0x00000034  0x01  "LENOVO"  "CB-01   "  0x00000002  "PTEC"   0x00000002
 20)  SSDT  0x00000CC9  0x01  "LENOVO"  "UsbCTabl"  0x00000001  "INTL"   0x20180313
 21)  MSDM  0x00000055  0x03  "LENOVO"  "CB-01   "  0x00000000  "PTEC"   0x00000002
 22)  SSDT  0x0000353C  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 23)  HPET  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000001  "PTEC"   0x00000002
 24)  SSDT  0x000013CF  0x01  "LENOVO"  "AmdTable"  0x00000001  "INTL"   0x20180313
 25)  FACS  0x00000040  0x01
 26)  BGRT  0x00000038  0x01  "LENOVO"  "CB-01   "  0x00000002  "PTEC"   0x00000002

Found 26 ACPI tables in acpidump

APIC
----
[000h 0000   4]                    Signature : "APIC"    [Multiple APIC Description Table (MADT)]
[004h 0004   4]                 Table Length : 00000138
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 2B
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]           Local Apic Address : FEE00000
[028h 0040   4]        Flags (decoded below) : 00000001
                         PC-AT Compatibility : 1

[02Ch 0044   1]                Subtable Type : 00 [Processor Local APIC]
[02Dh 0045   1]                       Length : 08
[02Eh 0046   1]                 Processor ID : 00
[02Fh 0047   1]                Local Apic ID : 00
[030h 0048   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[034h 0052   1]                Subtable Type : 00 [Processor Local APIC]
[035h 0053   1]                       Length : 08
[036h 0054   1]                 Processor ID : 01
[037h 0055   1]                Local Apic ID : 01
[038h 0056   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[03Ch 0060   1]                Subtable Type : 00 [Processor Local APIC]
[03Dh 0061   1]                       Length : 08
[03Eh 0062   1]                 Processor ID : 02
[03Fh 0063   1]                Local Apic ID : 02
[040h 0064   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[044h 0068   1]                Subtable Type : 00 [Processor Local APIC]
[045h 0069   1]                       Length : 08
[046h 0070   1]                 Processor ID : 03
[047h 0071   1]                Local Apic ID : 03
[048h 0072   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[04Ch 0076   1]                Subtable Type : 00 [Processor Local APIC]
[04Dh 0077   1]                       Length : 08
[04Eh 0078   1]                 Processor ID : 04
[04Fh 0079   1]                Local Apic ID : 04
[050h 0080   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[054h 0084   1]                Subtable Type : 00 [Processor Local APIC]
[055h 0085   1]                       Length : 08
[056h 0086   1]                 Processor ID : 05
[057h 0087   1]                Local Apic ID : 05
[058h 0088   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[05Ch 0092   1]                Subtable Type : 00 [Processor Local APIC]
[05Dh 0093   1]                       Length : 08
[05Eh 0094   1]                 Processor ID : 06
[05Fh 0095   1]                Local Apic ID : 06
[060h 0096   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[064h 0100   1]                Subtable Type : 00 [Processor Local APIC]
[065h 0101   1]                       Length : 08
[066h 0102   1]                 Processor ID : 07
[067h 0103   1]                Local Apic ID : 07
[068h 0104   4]        Flags (decoded below) : 00000001
                           Processor Enabled : 1
                      Runtime Online Capable : 0

[06Ch 0108   1]                Subtable Type : 00 [Processor Local APIC]
[06Dh 0109   1]                       Length : 08
[06Eh 0110   1]                 Processor ID : 08
[06Fh 0111   1]                Local Apic ID : 08
[070h 0112   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[074h 0116   1]                Subtable Type : 00 [Processor Local APIC]
[075h 0117   1]                       Length : 08
[076h 0118   1]                 Processor ID : 09
[077h 0119   1]                Local Apic ID : 09
[078h 0120   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[07Ch 0124   1]                Subtable Type : 00 [Processor Local APIC]
[07Dh 0125   1]                       Length : 08
[07Eh 0126   1]                 Processor ID : 0A
[07Fh 0127   1]                Local Apic ID : 0A
[080h 0128   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[084h 0132   1]                Subtable Type : 00 [Processor Local APIC]
[085h 0133   1]                       Length : 08
[086h 0134   1]                 Processor ID : 0B
[087h 0135   1]                Local Apic ID : 0B
[088h 0136   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[08Ch 0140   1]                Subtable Type : 00 [Processor Local APIC]
[08Dh 0141   1]                       Length : 08
[08Eh 0142   1]                 Processor ID : 0C
[08Fh 0143   1]                Local Apic ID : 0C
[090h 0144   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[094h 0148   1]                Subtable Type : 00 [Processor Local APIC]
[095h 0149   1]                       Length : 08
[096h 0150   1]                 Processor ID : 0D
[097h 0151   1]                Local Apic ID : 0D
[098h 0152   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[09Ch 0156   1]                Subtable Type : 00 [Processor Local APIC]
[09Dh 0157   1]                       Length : 08
[09Eh 0158   1]                 Processor ID : 0E
[09Fh 0159   1]                Local Apic ID : 0E
[0A0h 0160   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0A4h 0164   1]                Subtable Type : 00 [Processor Local APIC]
[0A5h 0165   1]                       Length : 08
[0A6h 0166   1]                 Processor ID : 0F
[0A7h 0167   1]                Local Apic ID : 0F
[0A8h 0168   4]        Flags (decoded below) : 00000000
                           Processor Enabled : 0
                      Runtime Online Capable : 0

[0ACh 0172   1]                Subtable Type : 01 [I/O APIC]
[0ADh 0173   1]                       Length : 0C
[0AEh 0174   1]                  I/O Apic ID : 20
[0AFh 0175   1]                     Reserved : 00
[0B0h 0176   4]                      Address : FEC00000
[0B4h 0180   4]                    Interrupt : 00000000

[0B8h 0184   1]                Subtable Type : 01 [I/O APIC]
[0B9h 0185   1]                       Length : 0C
[0BAh 0186   1]                  I/O Apic ID : 21
[0BBh 0187   1]                     Reserved : 00
[0BCh 0188   4]                      Address : FEC01000
[0C0h 0192   4]                    Interrupt : 00000018

[0C4h 0196   1]                Subtable Type : 02 [Interrupt Source Override]
[0C5h 0197   1]                       Length : 0A
[0C6h 0198   1]                          Bus : 00
[0C7h 0199   1]                       Source : 00
[0C8h 0200   4]                    Interrupt : 00000002
[0CCh 0204   2]        Flags (decoded below) : 0000
                                    Polarity : 0
                                Trigger Mode : 0

[0CEh 0206   1]                Subtable Type : 02 [Interrupt Source Override]
[0CFh 0207   1]                       Length : 0A
[0D0h 0208   1]                          Bus : 00
[0D1h 0209   1]                       Source : 09
[0D2h 0210   4]                    Interrupt : 00000009
[0D6h 0214   2]        Flags (decoded below) : 000F
                                    Polarity : 3
                                Trigger Mode : 3

[0D8h 0216   1]                Subtable Type : 04 [Local APIC NMI]
[0D9h 0217   1]                       Length : 06
[0DAh 0218   1]                 Processor ID : 00
[0DBh 0219   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0DDh 0221   1]         Interrupt Input LINT : 01

[0DEh 0222   1]                Subtable Type : 04 [Local APIC NMI]
[0DFh 0223   1]                       Length : 06
[0E0h 0224   1]                 Processor ID : 01
[0E1h 0225   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E3h 0227   1]         Interrupt Input LINT : 01

[0E4h 0228   1]                Subtable Type : 04 [Local APIC NMI]
[0E5h 0229   1]                       Length : 06
[0E6h 0230   1]                 Processor ID : 02
[0E7h 0231   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0E9h 0233   1]         Interrupt Input LINT : 01

[0EAh 0234   1]                Subtable Type : 04 [Local APIC NMI]
[0EBh 0235   1]                       Length : 06
[0ECh 0236   1]                 Processor ID : 03
[0EDh 0237   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0EFh 0239   1]         Interrupt Input LINT : 01

[0F0h 0240   1]                Subtable Type : 04 [Local APIC NMI]
[0F1h 0241   1]                       Length : 06
[0F2h 0242   1]                 Processor ID : 04
[0F3h 0243   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0F5h 0245   1]         Interrupt Input LINT : 01

[0F6h 0246   1]                Subtable Type : 04 [Local APIC NMI]
[0F7h 0247   1]                       Length : 06
[0F8h 0248   1]                 Processor ID : 05
[0F9h 0249   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[0FBh 0251   1]         Interrupt Input LINT : 01

[0FCh 0252   1]                Subtable Type : 04 [Local APIC NMI]
[0FDh 0253   1]                       Length : 06
[0FEh 0254   1]                 Processor ID : 06
[0FFh 0255   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[101h 0257   1]         Interrupt Input LINT : 01

[102h 0258   1]                Subtable Type : 04 [Local APIC NMI]
[103h 0259   1]                       Length : 06
[104h 0260   1]                 Processor ID : 07
[105h 0261   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[107h 0263   1]         Interrupt Input LINT : 01

[108h 0264   1]                Subtable Type : 04 [Local APIC NMI]
[109h 0265   1]                       Length : 06
[10Ah 0266   1]                 Processor ID : 08
[10Bh 0267   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[10Dh 0269   1]         Interrupt Input LINT : 01

[10Eh 0270   1]                Subtable Type : 04 [Local APIC NMI]
[10Fh 0271   1]                       Length : 06
[110h 0272   1]                 Processor ID : 09
[111h 0273   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[113h 0275   1]         Interrupt Input LINT : 01

[114h 0276   1]                Subtable Type : 04 [Local APIC NMI]
[115h 0277   1]                       Length : 06
[116h 0278   1]                 Processor ID : 0A
[117h 0279   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[119h 0281   1]         Interrupt Input LINT : 01

[11Ah 0282   1]                Subtable Type : 04 [Local APIC NMI]
[11Bh 0283   1]                       Length : 06
[11Ch 0284   1]                 Processor ID : 0B
[11Dh 0285   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[11Fh 0287   1]         Interrupt Input LINT : 01

[120h 0288   1]                Subtable Type : 04 [Local APIC NMI]
[121h 0289   1]                       Length : 06
[122h 0290   1]                 Processor ID : 0C
[123h 0291   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[125h 0293   1]         Interrupt Input LINT : 01

[126h 0294   1]                Subtable Type : 04 [Local APIC NMI]
[127h 0295   1]                       Length : 06
[128h 0296   1]                 Processor ID : 0D
[129h 0297   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[12Bh 0299   1]         Interrupt Input LINT : 01

[12Ch 0300   1]                Subtable Type : 04 [Local APIC NMI]
[12Dh 0301   1]                       Length : 06
[12Eh 0302   1]                 Processor ID : 0E
[12Fh 0303   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[131h 0305   1]         Interrupt Input LINT : 01

[132h 0306   1]                Subtable Type : 04 [Local APIC NMI]
[133h 0307   1]                       Length : 06
[134h 0308   1]                 Processor ID : 0F
[135h 0309   2]        Flags (decoded below) : 0005
                                    Polarity : 1
                                Trigger Mode : 1
[137h 0311   1]         Interrupt Input LINT : 01

Raw Table Data: Length 312 (0x138)

    0000: 41 50 49 43 38 01 00 00 02 2B 4C 45 4E 4F 56 4F  // APIC8....+LENOVO
    0010: 43 42 2D 30 31 20 20 20 00 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 00 E0 FE 01 00 00 00 00 08 00 00  // ................
    0030: 01 00 00 00 00 08 01 01 01 00 00 00 00 08 02 02  // ................
    0040: 01 00 00 00 00 08 03 03 01 00 00 00 00 08 04 04  // ................
    0050: 01 00 00 00 00 08 05 05 01 00 00 00 00 08 06 06  // ................
    0060: 01 00 00 00 00 08 07 07 01 00 00 00 00 08 08 08  // ................
    0070: 00 00 00 00 00 08 09 09 00 00 00 00 00 08 0A 0A  // ................
    0080: 00 00 00 00 00 08 0B 0B 00 00 00 00 00 08 0C 0C  // ................
    0090: 00 00 00 00 00 08 0D 0D 00 00 00 00 00 08 0E 0E  // ................
    00A0: 00 00 00 00 00 08 0F 0F 00 00 00 00 01 0C 20 00  // .............. .
    00B0: 00 00 C0 FE 00 00 00 00 01 0C 21 00 00 10 C0 FE  // ..........!.....
    00C0: 18 00 00 00 02 0A 00 00 02 00 00 00 00 00 02 0A  // ................
    00D0: 00 09 09 00 00 00 0F 00 04 06 00 05 00 01 04 06  // ................
    00E0: 01 05 00 01 04 06 02 05 00 01 04 06 03 05 00 01  // ................
    00F0: 04 06 04 05 00 01 04 06 05 05 00 01 04 06 06 05  // ................
    0100: 00 01 04 06 07 05 00 01 04 06 08 05 00 01 04 06  // ................
    0110: 09 05 00 01 04 06 0A 05 00 01 04 06 0B 05 00 01  // ................
    0120: 04 06 0C 05 00 01 04 06 0D 05 00 01 04 06 0E 05  // ................
    0130: 00 01 04 06 0F 05 00 01                          // ........


BATB
----
[000h 0000   4]                    Signature : "BATB"    
[004h 0004   4]                 Table Length : 0000004A
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : E6
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [BATB]


Raw Table Data: Length 74 (0x4A)

    0000: 42 41 54 42 4A 00 00 00 02 E6 4C 45 4E 4F 56 4F  // BATBJ.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 00 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 E8 63 95 D2 E1 CF 41 4D 8E 54 DA 43  // .....c....AM.T.C
    0030: 22 FE DE 5C 36 00 00 40 76 CB 00 00 00 00 00 00  // "..\6..@v.......
    0040: 75 CB 00 00 00 00 00 00 01 00                    // u.........


BGRT
----
[000h 0000   4]                    Signature : "BGRT"    [Boot Graphics Resource Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 49
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   2]                      Version : 0001
[026h 0038   1]       Status (decoded below) : 01
                                   Displayed : 1
                          Orientation Offset : 0
[027h 0039   1]                   Image Type : 00
[028h 0040   8]                Image Address : 00000000C2F70018
[030h 0048   4]                Image OffsetX : 00000240
[034h 0052   4]                Image OffsetY : 000000C4

Raw Table Data: Length 56 (0x38)

    0000: 42 47 52 54 38 00 00 00 01 49 4C 45 4E 4F 56 4F  // BGRT8....ILENOVO
    0010: 43 42 2D 30 31 20 20 20 02 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 01 00 01 00 18 00 F7 C2 00 00 00 00  // ................
    0030: 40 02 00 00 C4 00 00 00                          // @.......


CDIT
----
[000h 0000   4]                    Signature : "CDIT"    
[004h 0004   4]                 Table Length : 00000029
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 32
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [CDIT]


Raw Table Data: Length 41 (0x29)

    0000: 43 44 49 54 29 00 00 00 01 32 4C 45 4E 4F 56 4F  // CDIT)....2LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 01 00 00 00 0A                       // .........


CRAT
----
[000h 0000   4]                    Signature : "CRAT"    
[004h 0004   4]                 Table Length : 00000F00
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F9
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [CRAT]


Raw Table Data: Length 3840 (0xF00)

    0000: 43 52 41 54 00 0F 00 00 01 F9 4C 45 4E 4F 56 4F  // CRAT......LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 3C 00 00 00 00 00 00 00 00 00 00 00  // ....<...........
    0030: 01 28 00 00 01 00 00 00 00 00 00 00 00 00 00 00  // .(..............
    0040: 00 00 00 00 00 00 00 D0 00 00 00 00 40 00 00 00  // ............@...
    0050: 00 00 00 00 00 00 00 00 01 28 00 00 01 00 00 00  // .........(......
    0060: 00 00 00 00 00 00 00 00 01 00 00 00 00 00 00 30  // ...............0
    0070: 03 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00  // ....@...........
    0080: 02 40 00 00 0B 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    0090: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    00B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    00C0: 02 40 00 00 0D 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    00D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    00E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    00F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0100: 02 40 00 00 0F 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    0110: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0120: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0130: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0140: 02 40 00 00 0F 00 00 00 00 00 00 00 0F 00 00 00  // .@..............
    0150: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0160: 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00 00  // ................
    0170: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0180: 02 40 00 00 0B 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    0190: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    01B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    01C0: 02 40 00 00 0D 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    01D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    01E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    01F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0200: 02 40 00 00 0F 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    0210: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0220: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0230: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0240: 02 40 00 00 0B 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0270: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0280: 02 40 00 00 0D 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    0290: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    02B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    02C0: 02 40 00 00 0F 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    02D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    02E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    02F0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0300: 02 40 00 00 0B 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    0310: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0320: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0330: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0340: 02 40 00 00 0D 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    0350: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0360: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0370: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0380: 02 40 00 00 0F 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    0390: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    03B0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    03C0: 02 40 00 00 0B 00 00 00 04 00 00 00 10 00 00 00  // .@..............
    03D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    03E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    03F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0400: 02 40 00 00 0D 00 00 00 04 00 00 00 10 00 00 00  // .@..............
    0410: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0420: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0430: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0440: 02 40 00 00 0F 00 00 00 04 00 00 00 10 00 00 00  // .@..............
    0450: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0460: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0470: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0480: 02 40 00 00 0F 00 00 00 04 00 00 00 F0 00 00 00  // .@..............
    0490: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04A0: 00 00 00 00 00 00 00 00 00 00 00 00 00 10 00 00  // ................
    04B0: 03 01 40 00 10 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    04C0: 02 40 00 00 0B 00 00 00 05 00 00 00 20 00 00 00  // .@.......... ...
    04D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    04E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    04F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0500: 02 40 00 00 0D 00 00 00 05 00 00 00 20 00 00 00  // .@.......... ...
    0510: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0520: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0530: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0540: 02 40 00 00 0F 00 00 00 05 00 00 00 20 00 00 00  // .@.......... ...
    0550: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0560: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0570: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0580: 02 40 00 00 0B 00 00 00 06 00 00 00 40 00 00 00  // .@..........@...
    0590: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    05B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    05C0: 02 40 00 00 0D 00 00 00 06 00 00 00 40 00 00 00  // .@..........@...
    05D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    05E0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    05F0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0600: 02 40 00 00 0F 00 00 00 06 00 00 00 40 00 00 00  // .@..........@...
    0610: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0620: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    0630: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0640: 02 40 00 00 0B 00 00 00 07 00 00 00 80 00 00 00  // .@..............
    0650: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0660: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    0670: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0680: 02 40 00 00 0D 00 00 00 07 00 00 00 80 00 00 00  // .@..............
    0690: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06A0: 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 00  // ............ ...
    06B0: 01 01 40 00 08 00 01 00 00 00 00 00 00 00 00 00  // ..@.............
    06C0: 02 40 00 00 0F 00 00 00 07 00 00 00 80 00 00 00  // .@..............
    06D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    06E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00  // ................
    06F0: 02 01 40 00 08 02 01 00 00 00 00 00 00 00 00 00  // ..@.............
    0700: 03 40 00 00 0B 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    0710: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0720: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0730: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0740: 03 40 00 00 0D 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    0750: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0760: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0770: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0780: 03 40 00 00 AB 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    0790: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07A0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    07B0: 04 08 00 00 08 08 00 00 00 40 00 00 00 00 00 00  // .........@......
    07C0: 03 40 00 00 AD 00 00 00 00 00 00 00 01 00 00 00  // .@..............
    07D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    07E0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    07F0: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0800: 03 40 00 00 0B 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    0810: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0820: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0830: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0840: 03 40 00 00 0D 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    0850: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0860: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0870: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0880: 03 40 00 00 AB 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    0890: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08A0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    08B0: 04 08 00 00 08 08 00 00 00 40 00 00 00 00 00 00  // .........@......
    08C0: 03 40 00 00 AD 00 00 00 01 00 00 00 02 00 00 00  // .@..............
    08D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    08E0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    08F0: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0900: 03 40 00 00 0B 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    0910: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0920: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0930: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0940: 03 40 00 00 0D 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    0950: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0960: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0970: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0980: 03 40 00 00 AB 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    0990: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09A0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    09B0: 04 08 00 00 08 08 00 00 00 40 00 00 00 00 00 00  // .........@......
    09C0: 03 40 00 00 AD 00 00 00 02 00 00 00 04 00 00 00  // .@..............
    09D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    09E0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    09F0: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0A00: 03 40 00 00 0B 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    0A10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A30: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0A40: 03 40 00 00 0D 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    0A50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0A60: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0A70: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0A80: 03 40 00 00 AB 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    0A90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0AB0: 04 08 00 00 08 08 00 00 00 40 00 00 00 00 00 00  // .........@......
    0AC0: 03 40 00 00 AD 00 00 00 03 00 00 00 08 00 00 00  // .@..............
    0AD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0AE0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0AF0: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0B00: 03 40 00 00 0B 00 00 00 04 00 00 00 10 00 00 00  // .@..............
    0B10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B30: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0B40: 03 40 00 00 0D 00 00 00 04 00 00 00 10 00 00 00  // .@..............
    0B50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0B60: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0B70: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0B80: 03 40 00 00 AB 00 00 00 04 00 00 00 10 00 00 00  // .@..............
    0B90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0BB0: 04 08 00 00 08 08 00 00 00 40 00 00 00 00 00 00  // .........@......
    0BC0: 03 40 00 00 AD 00 00 00 04 00 00 00 10 00 00 00  // .@..............
    0BD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0BE0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0BF0: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0C00: 03 40 00 00 0B 00 00 00 05 00 00 00 20 00 00 00  // .@.......... ...
    0C10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C30: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0C40: 03 40 00 00 0D 00 00 00 05 00 00 00 20 00 00 00  // .@.......... ...
    0C50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0C60: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0C70: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0C80: 03 40 00 00 AB 00 00 00 05 00 00 00 20 00 00 00  // .@.......... ...
    0C90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0CB0: 04 08 00 00 08 08 00 00 00 40 00 00 00 00 00 00  // .........@......
    0CC0: 03 40 00 00 AD 00 00 00 05 00 00 00 20 00 00 00  // .@.......... ...
    0CD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0CE0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0CF0: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0D00: 03 40 00 00 0B 00 00 00 06 00 00 00 40 00 00 00  // .@..........@...
    0D10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D30: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0D40: 03 40 00 00 0D 00 00 00 06 00 00 00 40 00 00 00  // .@..........@...
    0D50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0D60: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0D70: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0D80: 03 40 00 00 AB 00 00 00 06 00 00 00 40 00 00 00  // .@..........@...
    0D90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0DB0: 04 08 00 00 08 08 00 00 00 40 00 00 00 00 00 00  // .........@......
    0DC0: 03 40 00 00 AD 00 00 00 06 00 00 00 40 00 00 00  // .@..........@...
    0DD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0DE0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0DF0: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................
    0E00: 03 40 00 00 0B 00 00 00 07 00 00 00 80 00 00 00  // .@..............
    0E10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E20: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E30: FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00 00 00  // .@...@...@......
    0E40: 03 40 00 00 0D 00 00 00 07 00 00 00 80 00 00 00  // .@..............
    0E50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0E60: 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00  // ................
    0E70: 00 00 FF 40 00 00 FF 40 00 00 0F 40 00 00 00 00  // ...@...@...@....
    0E80: 03 40 00 00 AB 00 00 00 07 00 00 00 80 00 00 00  // .@..............
    0E90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EA0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0EB0: 04 08 00 00 08 08 00 00 00 40 00 00 00 00 00 00  // .........@......
    0EC0: 03 40 00 00 AD 00 00 00 07 00 00 00 80 00 00 00  // .@..............
    0ED0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0EE0: 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00 00  // ................
    0EF0: 00 00 08 04 00 00 08 04 00 00 00 00 00 00 00 00  // ................


DSDT
----
DefinitionBlock ("", "DSDT", 1, "LENOVO", "AMD", 0x00001000)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.APTS, MethodObj)    // 1 Arguments
    External (_SB_.AWAK, MethodObj)    // 1 Arguments
    External (_SB_.LSKD, UnknownObj)
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPC0.TPOS, UnknownObj)
    External (_SB_.PCI0.SMB_.GP62, UnknownObj)
    External (_SB_.TPM_.PTS_, MethodObj)    // 1 Arguments

    OperationRegion (SYST, SystemMemory, 0xCD62EF18, 0x00000001)
    Field (SYST, AnyAcc, Lock, Preserve)
    {
        RV2,    8
    }

    Scope (_SB)
    {
        Device (PLTF)
        {
            Name (_HID, "ACPI0010" /* Processor Container Device */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A05") /* Generic Container Device */)  // _CID: Compatible ID
            Name (_UID, One)  // _UID: Unique ID
            Device (C000)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, Zero)  // _UID: Unique ID
            }

            Device (C001)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, One)  // _UID: Unique ID
            }

            Device (C002)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
            }

            Device (C003)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x03)  // _UID: Unique ID
            }

            Device (C004)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x04)  // _UID: Unique ID
            }

            Device (C005)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x05)  // _UID: Unique ID
            }

            Device (C006)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x06)  // _UID: Unique ID
            }

            Device (C007)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x07)  // _UID: Unique ID
            }

            Device (C008)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x08)  // _UID: Unique ID
            }

            Device (C009)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x09)  // _UID: Unique ID
            }

            Device (C00A)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0A)  // _UID: Unique ID
            }

            Device (C00B)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0B)  // _UID: Unique ID
            }

            Device (C00C)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0C)  // _UID: Unique ID
            }

            Device (C00D)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0D)  // _UID: Unique ID
            }

            Device (C00E)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0E)  // _UID: Unique ID
            }

            Device (C00F)
            {
                Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                Name (_UID, 0x0F)  // _UID: Unique ID
            }
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S3, Package (0x04)  // _S3_: S3 System State
    {
        0x03, 
        0x03, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x04, 
        0x04, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x05, 
        0x05, 
        0x00, 
        0x00
    })
    Name (TZFG, 0x00)
    OperationRegion (DBG0, SystemIO, 0x80, 0x01)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8
    }

    OperationRegion (DEB2, SystemIO, 0x80, 0x02)
    Field (DEB2, WordAcc, NoLock, Preserve)
    {
        P80H,   16
    }

    Method (TPST, 1, Serialized)
    {
        Local0 = (Arg0 + 0xB0000000)
        OperationRegion (VARM, SystemIO, 0x80, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        VARR = Local0
    }

    OperationRegion (P01, SystemIO, 0x0401, 0x01)
    Field (P01, ByteAcc, NoLock, Preserve)
    {
        PST1,   8
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [Zero] = Arg0
        PRWP [One] = Arg1
        Return (PRWP) /* \PRWP */
    }

    OperationRegion (GNVS, SystemMemory, 0xCD779C98, 0x0000000B)
    Field (GNVS, AnyAcc, NoLock, Preserve)
    {
        BRTL,   8, 
        DAS3,   8, 
        WKPM,   8, 
        PCBA,   32, 
        BLTH,   8, 
        MWTT,   8, 
        DPTC,   8, 
        WOVS,   8
    }

    OperationRegion (OGNS, SystemMemory, 0xCD62EE98, 0x00000005)
    Field (OGNS, AnyAcc, Lock, Preserve)
    {
        THPN,   8, 
        THPD,   8, 
        SDMO,   8, 
        TBEN,   8, 
        TBNH,   8
    }

    OperationRegion (SM66, SystemIO, 0xB0, 0x01)
    Field (SM66, ByteAcc, NoLock, Preserve)
    {
        IOB0,   8
    }

    Name (LINX, 0x00)
    Name (OSSP, 0x00)
    Name (OSTB, Ones)
    Name (TPOS, Zero)
    Method (OSTP, 0, NotSerialized)
    {
        If ((OSTB == Ones))
        {
            If (CondRefOf (\_OSI, Local0))
            {
                OSTB = 0x00
                TPOS = 0x00
                If (_OSI ("Windows 2001"))
                {
                    OSTB = 0x08
                    TPOS = 0x08
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSTB = 0x20
                    TPOS = 0x20
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    OSTB = 0x10
                    TPOS = 0x10
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSTB = 0x11
                    TPOS = 0x11
                }

                If (_OSI ("Windows 2001 SP3"))
                {
                    OSTB = 0x12
                    TPOS = 0x12
                }

                If (_OSI ("Windows 2006"))
                {
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSSP = 0x01
                    OSTB = 0x40
                    TPOS = 0x40
                }

                If (_OSI ("Windows 2009"))
                {
                    OSSP = 0x01
                    OSTB = 0x50
                    TPOS = 0x50
                }

                If (_OSI ("Windows 2012"))
                {
                    OSSP = 0x01
                    OSTB = 0x60
                    TPOS = 0x60
                }

                If (_OSI ("Windows 2013"))
                {
                    OSSP = 0x01
                    OSTB = 0x61
                    TPOS = 0x61
                }

                If (_OSI ("Windows 2015"))
                {
                    OSSP = 0x01
                    OSTB = 0x70
                    TPOS = 0x70
                }

                If (_OSI ("Linux"))
                {
                    LINX = 0x01
                    OSTB = 0x80
                    TPOS = 0x80
                }
            }
            ElseIf (CondRefOf (\_OS, Local0))
            {
                If (SEQL (_OS, "Microsoft Windows"))
                {
                    OSTB = 0x01
                    TPOS = 0x01
                }
                ElseIf (SEQL (_OS, "Microsoft WindowsME: Millennium Edition"))
                {
                    OSTB = 0x02
                    TPOS = 0x02
                }
                ElseIf (SEQL (_OS, "Microsoft Windows NT"))
                {
                    OSTB = 0x04
                    TPOS = 0x04
                }
                Else
                {
                    OSTB = 0x00
                    TPOS = 0x00
                }
            }
            Else
            {
                OSTB = 0x00
                TPOS = 0x00
            }

            If ((TPOS == 0x80)) {}
        }

        Return (OSTB) /* \OSTB */
    }

    Method (SEQL, 2, Serialized)
    {
        Local0 = SizeOf (Arg0)
        Local1 = SizeOf (Arg1)
        If ((Local0 != Local1))
        {
            Return (Zero)
        }

        Name (BUF0, Buffer (Local0) {})
        BUF0 = Arg0
        Name (BUF1, Buffer (Local0) {})
        BUF1 = Arg1
        Local2 = Zero
        While ((Local2 < Local0))
        {
            Local3 = DerefOf (BUF0 [Local2])
            Local4 = DerefOf (BUF1 [Local2])
            If ((Local3 != Local4))
            {
                Return (Zero)
            }

            Local2++
        }

        Return (One)
    }

    Name (FIRT, 0x00)
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If ((Arg0 != 0x03))
        {
            IOB0 = 0x66
        }

        If ((Arg0 != 0x03))
        {
            If ((Arg0 != 0x04))
            {
                \_SB.PCI0.LPC0.EC0.FBRS = 0x01
            }
        }

        If (CondRefOf (\_SB.TPM.PTS))
        {
            \_SB.TPM.PTS (Arg0)
        }

        If ((Arg0 == 0x05))
        {
            P80H = 0xC5
            \_SB.PCI0.SMB.BLNK = 0x00
        }

        If ((Arg0 == 0x04))
        {
            P80H = 0xC4
            \_SB.PCI0.SMB.BLNK = 0x00
        }

        If ((Arg0 == 0x03))
        {
            P80H = 0xC3
            \_SB.PCI0.SMB.BLNK = 0x01
            \_SB.PCI0.SMB.RSTU = Zero
        }

        \_SB.PCI0.SMB.CLPS = 0x01
        \_SB.PCI0.SMB.SLPS = 0x01
        \_SB.PCI0.SMB.PEWS = \_SB.PCI0.SMB.PEWS
        \_SB.APTS (Arg0)
    }

    OperationRegion (XMOS, SystemIO, 0x72, 0x02)
    Field (XMOS, ByteAcc, Lock, Preserve)
    {
        XIDX,   8, 
        XDAT,   8
    }

    IndexField (XIDX, XDAT, ByteAcc, Lock, Preserve)
    {
        Offset (0x74), 
        WKSR,   8, 
        Offset (0xD0), 
        WLNS,   1, 
        BTNS,   1
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        \_SB.ADP0.ACDC = 0xFF
        \_SB.PCI0.SMB.BLNK = 0x03
        If ((\_SB.PCI0.LPC0.EC0.SPMO == 0x01))
        {
            SMUF = 0x05
            If ((\_SB.PCI0.LPC0.EC0.PSYS == 0x01))
            {
                SMUD = SPL5 /* \SPL5 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.LBPR == 0x01))
            {
                SMUD = SPL6 /* \SPL6 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.OVLD == 0x01))
            {
                SMUD = SPL4 /* \SPL4 */
            }
            Else
            {
                SMUD = SPL2 /* \SPL2 */
            }

            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x07
            If ((\_SB.PCI0.LPC0.EC0.PSYS == 0x01))
            {
                SMUD = SPP5 /* \SPP5 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.LBPR == 0x01))
            {
                SMUD = SPP6 /* \SPP6 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.OVLD == 0x01))
            {
                SMUD = SPP4 /* \SPP4 */
            }
            Else
            {
                SMUD = SPP2 /* \SPP2 */
            }

            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x06
            If ((\_SB.PCI0.LPC0.EC0.PSYS == 0x01))
            {
                SMUD = FPP5 /* \FPP5 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.LBPR == 0x01))
            {
                SMUD = FPP6 /* \FPP6 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.OVLD == 0x01))
            {
                SMUD = FPP4 /* \FPP4 */
            }
            Else
            {
                SMUD = FPP2 /* \FPP2 */
            }

            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x0B
            SMUD = TDC2 /* \TDC2 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x0C
            SMUD = EDC2 /* \EDC2 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x08
            SMUD = SPT2 /* \SPT2 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x01
            SMUD = STC2 /* \STC2 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x03
            SMUD = TCL2 /* \TCL2 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x20
            SMUD = 0x199A
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x22
            SMUD = 0x4000
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x24
            SMUD = 0x0148
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x25
            SMUD = 0x2666
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x26
            SMUD = 0x01EF
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x27
            SMUD = 0x0430
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x2C
            SMUD = 0xB06D
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x2E
            SMUD = 0x61A8
            \_SB.ALIB (0x0C, XX11)
        }
        ElseIf ((\_SB.PCI0.LPC0.EC0.SPMO == 0x02))
        {
            SMUF = 0x05
            SMUD = SPL3 /* \SPL3 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x07
            SMUD = SPP3 /* \SPP3 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x06
            SMUD = FPP3 /* \FPP3 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x0B
            SMUD = TDC3 /* \TDC3 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x0C
            SMUD = EDC3 /* \EDC3 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x08
            SMUD = SPT3 /* \SPT3 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x01
            SMUD = STC3 /* \STC3 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x03
            SMUD = TCL3 /* \TCL3 */
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x20
            SMUD = 0x199A
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x22
            SMUD = 0x2C00
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x24
            SMUD = 0x0148
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x25
            SMUD = 0x2666
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x26
            SMUD = 0x011C
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x27
            SMUD = 0x040B
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x2C
            SMUD = 0xC936
            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x2E
            SMUD = 0x2EE0
            \_SB.ALIB (0x0C, XX11)
        }
        ElseIf ((\_SB.PCI0.LPC0.EC0.FCMO == 0x03))
        {
            \_SB.PCI0.LPC0.EC0.VPC0.DYTC (0x001F5001)
            SMUF = 0x05
            If ((\_SB.PCI0.LPC0.EC0.PSYS == 0x01))
            {
                SMUD = SPL5 /* \SPL5 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.LBPR == 0x01))
            {
                SMUD = SPL6 /* \SPL6 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.OVLD == 0x01))
            {
                SMUD = SPL4 /* \SPL4 */
            }
            Else
            {
                SMUD = SPL7 /* \SPL7 */
            }

            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x07
            If ((\_SB.PCI0.LPC0.EC0.PSYS == 0x01))
            {
                SMUD = SPP5 /* \SPP5 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.LBPR == 0x01))
            {
                SMUD = SPP6 /* \SPP6 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.OVLD == 0x01))
            {
                SMUD = SPP4 /* \SPP4 */
            }
            Else
            {
                SMUD = SPP7 /* \SPP7 */
            }

            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x06
            If ((\_SB.PCI0.LPC0.EC0.PSYS == 0x01))
            {
                SMUD = FPP5 /* \FPP5 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.LBPR == 0x01))
            {
                SMUD = FPP6 /* \FPP6 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.OVLD == 0x01))
            {
                SMUD = FPP4 /* \FPP4 */
            }
            Else
            {
                SMUD = FPP7 /* \FPP7 */
            }

            \_SB.ALIB (0x0C, XX11)
        }
        ElseIf ((\_SB.PCI0.LPC0.EC0.FCMO == 0x04))
        {
            \_SB.PCI0.LPC0.EC0.VPC0.DYTC (0x001F6001)
        }
        Else
        {
            \_SB.PCI0.LPC0.EC0.VPC0.DYTC (0x000FB001)
            SMUF = 0x05
            If ((\_SB.PCI0.LPC0.EC0.LBPR == 0x01))
            {
                SMUD = SPL6 /* \SPL6 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.OVLD == 0x01))
            {
                SMUD = SPL4 /* \SPL4 */
            }
            Else
            {
                SMUD = SPL9 /* \SPL9 */
            }

            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x07
            If ((\_SB.PCI0.LPC0.EC0.LBPR == 0x01))
            {
                SMUD = SPP6 /* \SPP6 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.OVLD == 0x01))
            {
                SMUD = SPP4 /* \SPP4 */
            }
            Else
            {
                SMUD = SPP9 /* \SPP9 */
            }

            \_SB.ALIB (0x0C, XX11)
            SMUF = 0x06
            If ((\_SB.PCI0.LPC0.EC0.LBPR == 0x01))
            {
                SMUD = FPP6 /* \FPP6 */
            }
            ElseIf ((\_SB.PCI0.LPC0.EC0.OVLD == 0x01))
            {
                SMUD = FPP4 /* \FPP4 */
            }
            Else
            {
                SMUD = FPP9 /* \FPP9 */
            }

            \_SB.ALIB (0x0C, XX11)
        }

        If ((Arg0 == 0x03))
        {
            If ((\_SB.PCI0.LPC0.EC0.HKDB == 0x01))
            {
                \_SB.PCI0.SMB.GP62 = 0xA4
            }
            Else
            {
                \_SB.PCI0.SMB.GP62 = 0xC5
            }
        }

        If ((Arg0 == 0x03))
        {
            FIRT = 0x01
            \_SB.PCI0.SMB.RSTU = One
        }

        \_SB.PCI0.SMB.PEWS = \_SB.PCI0.SMB.PEWS
        \_SB.PCI0.SMB.PWDE = 0x01
        \_SB.PCI0.SMB.PEWD = Zero
        \_SB.AWAK (Arg0)
        If ((Arg0 == 0x03))
        {
            FIRT = 0x01
            P80H = 0xE3
            If (GPIC)
            {
                \_SB.PCI0.LPC0.DSPI ()
            }

            If (((WKSR == 0x06) || (WKSR == 0x07)))
            {
                Notify (\_SB.GPIO, 0x00) // Bus Check
                Notify (\_SB.I2CD, 0x00) // Bus Check
            }
            Else
            {
                Notify (_SB, 0x00) // Bus Check
                Notify (\_SB.PWRB, 0x02) // Device Wake
            }
        }

        If ((Arg0 == 0x04))
        {
            FIRT = 0x01
            P80H = 0xE4
            If (GPIC)
            {
                \_SB.PCI0.LPC0.DSPI ()
            }

            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        If ((Arg0 == 0x05))
        {
            P80H = 0xE5
        }

        If ((TPOS == 0x40))
        {
            Local0 = 0x01
        }

        If ((TPOS == 0x80))
        {
            Local0 = 0x02
        }

        If ((TPOS == 0x50))
        {
            Local0 = 0x03
        }

        If ((TPOS == 0x60))
        {
            Local0 = 0x04
        }

        If ((TPOS == 0x61))
        {
            Local0 = 0x05
        }

        If ((TPOS == 0x70))
        {
            Local0 = 0x06
        }

        \_SB.PCI0.LPC0.EC0.OSTY = Local0
        Notify (\_SB.PCI0, 0x00) // Bus Check
        Return (Zero)
    }

    Scope (_SI)
    {
        Method (_SST, 1, NotSerialized)  // _SST: System Status
        {
            If ((Arg0 == 0x01))
            {
                Debug = "===== SST Working ====="
            }

            If ((Arg0 == 0x02))
            {
                Debug = "===== SST Waking ====="
            }

            If ((Arg0 == 0x03))
            {
                Debug = "===== SST Sleeping ====="
            }

            If ((Arg0 == 0x04))
            {
                Debug = "===== SST Sleeping S4 ====="
            }
        }
    }

    Name (GPIC, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        GPIC = Arg0
        If (Arg0)
        {
            \_SB.PCI0.LPC0.DSPI ()
        }
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Name (_BBN, 0x00)  // _BBN: BIOS Bus Number
            Name (_ADR, 0x00)  // _ADR: Address
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((GPIC != Zero))
                {
                    ^LPC0.DSPI ()
                }

                OSTP ()
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                CreateDWordField (Arg3, 0x08, CDW3)
                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((TBEN == One))
                    {
                        If ((TBNH != Zero))
                        {
                            CTRL &= 0xFFFFFFF5
                        }
                        Else
                        {
                            CTRL &= 0xFFFFFFF4
                        }
                    }

                    If (((SUPP & 0x16) != 0x16))
                    {
                        CTRL &= 0x1E
                    }

                    CTRL &= 0x1D
                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01)) {}
                        If ((CTRL & 0x04)) {}
                        If ((CTRL & 0x10)) {}
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CTRL &= 0xF7
                    CDW3 = CTRL /* \_SB_.PCI0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    Return (Arg3)
                }
            }

            OperationRegion (K8ST, SystemMemory, 0xCD779B98, 0x00000068)
            Field (K8ST, AnyAcc, NoLock, Preserve)
            {
                C0_0,   16, 
                C2_0,   16, 
                C4_0,   16, 
                C6_0,   16, 
                C8_0,   16, 
                CA_0,   16, 
                CC_0,   16, 
                CE_0,   16, 
                D0_0,   16, 
                D2_0,   16, 
                D4_0,   16, 
                D6_0,   16, 
                D8_0,   16, 
                DA_0,   16, 
                DC_0,   16, 
                DE_0,   16, 
                E0_0,   16, 
                E2_0,   16, 
                E4_0,   16, 
                E6_0,   16, 
                E8_0,   16, 
                EA_0,   16, 
                EC_0,   16, 
                EE_0,   16, 
                F0_0,   16, 
                F2_0,   16, 
                F4_0,   16, 
                F6_0,   16, 
                F8_0,   16, 
                FA_0,   16, 
                FC_0,   16, 
                FE_0,   16, 
                TOML,   32, 
                TOMH,   32, 
                PCIB,   32, 
                PCIS,   32, 
                T1MN,   64, 
                T1MX,   64, 
                T1LN,   64
            }

            Name (RSRC, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, SubDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    0x00,, )
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C2000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C6000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000C9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CA000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CE000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D2000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D6000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000D9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DA000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DE000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E1FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E2000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E5FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E6000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000E9FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EA000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EDFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EE000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00002000,         // Length
                    0x00,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    0x00,, _Y00, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, SubDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0xFC000000,         // Range Minimum
                    0xFDFFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x02000000,         // Length
                    0x00,, _Y01, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0D00,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF300,             // Length
                    0x00,, , TypeStatic, DenseTranslation)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (RSRC, \_SB.PCI0._Y00._MIN, BT1S)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y00._MAX, BT1M)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y00._LEN, BT1L)  // _LEN: Length
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MIN, BT2S)  // _MIN: Minimum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._MAX, BT2M)  // _MAX: Maximum Base Address
                CreateDWordField (RSRC, \_SB.PCI0._Y01._LEN, BT2L)  // _LEN: Length
                Local0 = PCIB /* \_SB_.PCI0.PCIB */
                BT1S = TOML /* \_SB_.PCI0.TOML */
                BT1M = (Local0 - 0x01)
                BT1L = (Local0 - TOML) /* \_SB_.PCI0.TOML */
                CreateQWordField (RSRC, \_SB.PCI0._Y02._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateQWordField (RSRC, \_SB.PCI0._Y02._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateQWordField (RSRC, \_SB.PCI0._Y02._LEN, M1LN)  // _LEN: Length
                M1MN = T1MN /* \_SB_.PCI0.T1MN */
                M1MX = T1MX /* \_SB_.PCI0.T1MX */
                M1LN = T1LN /* \_SB_.PCI0.T1LN */
                Return (RSRC) /* \_SB_.PCI0.RSRC */
            }

            Device (MEMR)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (MEM1, ResourceTemplate ()
                {
                    IO (Decode16,
                        0x0F50,             // Range Minimum
                        0x0F50,             // Range Maximum
                        0x01,               // Alignment
                        0x02,               // Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y03)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y04)
                    Memory32Fixed (ReadWrite,
                        0x00000000,         // Address Base
                        0x00000000,         // Address Length
                        _Y05)
                })
                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._BAS, MB01)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y03._LEN, ML01)  // _LEN: Length
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._BAS, MB02)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y04._LEN, ML02)  // _LEN: Length
                    If (GPIC)
                    {
                        MB01 = 0xFEC00000
                        MB02 = 0xFEE00000
                        ML01 = 0x2000
                        ML02 = 0x1000
                    }

                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._BAS, MB03)  // _BAS: Base Address
                    CreateDWordField (MEM1, \_SB.PCI0.MEMR._Y05._LEN, ML03)  // _LEN: Length
                    MB03 = PCIB /* \_SB_.PCI0.PCIB */
                    ML03 = PCIS /* \_SB_.PCI0.PCIS */
                    Return (MEM1) /* \_SB_.PCI0.MEMR.MEM1 */
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (GPIC)
                {
                    Return (Package (0x0E)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            0x00, 
                            0x28
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            0x00, 
                            0x29
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            0x00, 
                            0x2A
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            0x00, 
                            0x24
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x01, 
                            0x00, 
                            0x25
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x02, 
                            0x00, 
                            0x26
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x03, 
                            0x00, 
                            0x27
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x00, 
                            0x00, 
                            0x20
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x01, 
                            0x00, 
                            0x21
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x01, 
                            0x00, 
                            0x22
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x00, 
                            0x00, 
                            0x10
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x01, 
                            0x00, 
                            0x11
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            0x00, 
                            0x12
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            0x00, 
                            0x13
                        }
                    })
                }
                Else
                {
                    Return (Package (0x0E)
                    {
                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0001FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x00, 
                            ^LPC0.LNKE, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x01, 
                            ^LPC0.LNKF, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x02, 
                            ^LPC0.LNKG, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0002FFFF, 
                            0x03, 
                            ^LPC0.LNKH, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0008FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x00, 
                            ^LPC0.LNKA, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x01, 
                            ^LPC0.LNKB, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x02, 
                            ^LPC0.LNKC, 
                            0x00
                        }, 

                        Package (0x04)
                        {
                            0x0014FFFF, 
                            0x03, 
                            ^LPC0.LNKD, 
                            0x00
                        }
                    })
                }
            }

            OperationRegion (BAR1, PCI_Config, 0x14, 0x04)
            Field (BAR1, ByteAcc, NoLock, Preserve)
            {
                NBBA,   32
            }

            Device (GPP4)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                Method (RHRW, 0, NotSerialized)
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x0E, 0x03))
                    }
                    Else
                    {
                        Return (GPRW (0x0E, Zero))
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x28
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x29
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x2A
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x2B
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }

                Device (PXSX)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    OperationRegion (FLDR, PCI_Config, 0x44, 0x06)
                    Field (FLDR, ByteAcc, NoLock, Preserve)
                    {
                        DCAP,   32, 
                        DCTR,   16
                    }

                    PowerResource (WRST, 0x05, 0x0000)
                    {
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x01)
                        }

                        Method (_ON, 0, NotSerialized)  // _ON_: Power On
                        {
                        }

                        Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
                        {
                        }

                        Method (_RST, 0, NotSerialized)  // _RST: Device Reset
                        {
                            If ((DCAP & 0x10000000))
                            {
                                Local0 = DCTR /* \_SB_.PCI0.GPP4.PXSX.DCTR */
                                Local0 |= 0x8000
                                DCTR = Local0
                            }
                        }
                    }

                    Method (_PRR, 0, NotSerialized)  // _PRR: Power Resource for Reset
                    {
                        Return (Package (0x01)
                        {
                            WRST
                        })
                    }
                }
            }

            Device (GPP6)
            {
                Name (_ADR, 0x00020004)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x30
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x31
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x32
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x33
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKB, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKD, 
                                0x00
                            }
                        })
                    }
                }
            }

            Device (GP17)
            {
                Name (_ADR, 0x00080001)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    If ((WKPM == One))
                    {
                        Return (GPRW (0x19, 0x03))
                    }
                    Else
                    {
                        Return (GPRW (0x19, Zero))
                    }
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x26
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x27
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x24
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x25
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKG, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKH, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKE, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKF, 
                                0x00
                            }
                        })
                    }
                }

                Device (VGA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Name (DOSA, Zero)
                    Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
                    {
                        DOSA = Arg0
                    }

                    Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
                    {
                        Return (Package (0x07)
                        {
                            0x00010110, 
                            0x00010210, 
                            0x00010220, 
                            0x00010230, 
                            0x00010240, 
                            0x00031000, 
                            0x00032000
                        })
                    }

                    Device (LCD)
                    {
                        Name (_ADR, 0x0110)  // _ADR: Address
                        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
                        {
                            Return (Package (0x67)
                            {
                                0x50, 
                                0x32, 
                                0x00, 
                                0x02, 
                                0x03, 
                                0x03, 
                                0x04, 
                                0x05, 
                                0x06, 
                                0x07, 
                                0x08, 
                                0x09, 
                                0x0A, 
                                0x0B, 
                                0x0C, 
                                0x0D, 
                                0x0E, 
                                0x0F, 
                                0x10, 
                                0x11, 
                                0x12, 
                                0x13, 
                                0x14, 
                                0x15, 
                                0x16, 
                                0x17, 
                                0x18, 
                                0x19, 
                                0x1A, 
                                0x1B, 
                                0x1C, 
                                0x1D, 
                                0x1E, 
                                0x1F, 
                                0x20, 
                                0x21, 
                                0x22, 
                                0x23, 
                                0x24, 
                                0x25, 
                                0x26, 
                                0x27, 
                                0x28, 
                                0x29, 
                                0x2A, 
                                0x2B, 
                                0x2C, 
                                0x2D, 
                                0x2E, 
                                0x2F, 
                                0x30, 
                                0x31, 
                                0x32, 
                                0x33, 
                                0x34, 
                                0x35, 
                                0x36, 
                                0x37, 
                                0x38, 
                                0x39, 
                                0x3A, 
                                0x3B, 
                                0x3C, 
                                0x3D, 
                                0x3E, 
                                0x3F, 
                                0x40, 
                                0x41, 
                                0x42, 
                                0x43, 
                                0x44, 
                                0x45, 
                                0x46, 
                                0x47, 
                                0x48, 
                                0x49, 
                                0x4A, 
                                0x4B, 
                                0x4C, 
                                0x4D, 
                                0x4E, 
                                0x4F, 
                                0x50, 
                                0x51, 
                                0x52, 
                                0x53, 
                                0x54, 
                                0x55, 
                                0x56, 
                                0x57, 
                                0x58, 
                                0x59, 
                                0x5A, 
                                0x5B, 
                                0x5C, 
                                0x5D, 
                                0x5E, 
                                0x5F, 
                                0x60, 
                                0x61, 
                                0x62, 
                                0x63, 
                                0x64
                            })
                        }

                        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
                        {
                            Divide ((Arg0 * 0xFF), 0x64, Local1, Local0)
                            AFN7 (Local0)
                            BRTL = Arg0
                        }
                    }

                    OperationRegion (GPUM, PCI_Config, 0x24, 0x04)
                    Field (GPUM, ByteAcc, NoLock, Preserve)
                    {
                        GPUB,   32
                    }

                    Method (GBSA, 0, Serialized)
                    {
                        Local0 = GPUB /* \_SB_.PCI0.GP17.VGA_.GPUB */
                        Local0 &= 0xFFFFFF00
                        Local0 += 0x0138
                        Return (Local0)
                    }

                    OperationRegion (SCRA, SystemMemory, GBSA (), 0x04)
                    Field (SCRA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x01), 
                        BRIL,   8
                    }
                }

                Device (PSP)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                }

                Device (ACP)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                }

                Device (AZAL)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                }

                Device (HDAU)
                {
                    Name (_ADR, One)  // _ADR: Address
                }

                Device (XHC0)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x00)
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x19, 
                        0x03
                    })
                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HSP1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x09, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "UNKNOWN",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (SSP1)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x09, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "UNKNOWN",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x1,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (HSP2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "UNKNOWN",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (SSP2)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "UNKNOWN",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x2,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (HSP3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x0,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x1,
                                    PLD_Panel              = "FRONT",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "CENTER",
                                    PLD_Shape              = "ROUND",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x4,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x3,
                                    PLD_VerticalOffset     = 0xFFFF,
                                    PLD_HorizontalOffset   = 0xFFFF)

                            })
                            Device (CAMA)
                            {
                                Name (_ADR, 0x03)  // _ADR: Address
                                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x1,
                                        PLD_Panel              = "FRONT",
                                        PLD_VerticalPosition   = "UPPER",
                                        PLD_HorizontalPosition = "CENTER",
                                        PLD_Shape              = "ROUND",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x4,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x3,
                                        PLD_VerticalOffset     = 0xFFFF,
                                        PLD_HorizontalOffset   = 0xFFFF)

                                })
                            }
                        }

                        Device (HSP4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                        }
                    }
                }

                Device (XHC1)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
                    {
                        Return (0x00)
                    }

                    Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
                    {
                        0x19, 
                        0x03
                    })
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }

                    Device (RHUB)
                    {
                        Name (_ADR, Zero)  // _ADR: Address
                        Device (HSP1)
                        {
                            Name (_ADR, 0x01)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "UNKNOWN",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (SSP1)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x1,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "UNKNOWN",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x5,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (HSP2)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x0,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "UNKNOWN",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x6,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (HSP3)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0xFF, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x0,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "RIGHT",
                                    PLD_VerticalPosition   = "CENTER",
                                    PLD_HorizontalPosition = "RIGHT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x7,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                            Device (BLTH)
                            {
                                Name (_ADR, One)  // _ADR: Address
                                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                                {
                                    ToPLD (
                                        PLD_Revision           = 0x2,
                                        PLD_IgnoreColor        = 0x1,
                                        PLD_Red                = 0x0,
                                        PLD_Green              = 0x0,
                                        PLD_Blue               = 0x0,
                                        PLD_Width              = 0x0,
                                        PLD_Height             = 0x0,
                                        PLD_UserVisible        = 0x0,
                                        PLD_Dock               = 0x0,
                                        PLD_Lid                = 0x0,
                                        PLD_Panel              = "RIGHT",
                                        PLD_VerticalPosition   = "CENTER",
                                        PLD_HorizontalPosition = "RIGHT",
                                        PLD_Shape              = "UNKNOWN",
                                        PLD_GroupOrientation   = 0x0,
                                        PLD_GroupToken         = 0x0,
                                        PLD_GroupPosition      = 0x7,
                                        PLD_Bay                = 0x0,
                                        PLD_Ejectable          = 0x0,
                                        PLD_EjectRequired      = 0x0,
                                        PLD_CabinetNumber      = 0x0,
                                        PLD_CardCageNumber     = 0x0,
                                        PLD_Reference          = 0x0,
                                        PLD_Rotation           = 0x0,
                                        PLD_Order              = 0x0)

                                })
                            }

                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }
                        }

                        Device (HSP4)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (UPC, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                0x00, 
                                0x00
                            })
                            Name (UPCN, Package (0x04)
                            {
                                0x00, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Method (_UPC, 0, NotSerialized)  // _UPC: USB Port Capabilities
                            {
                                If (FPEX)
                                {
                                    Return (UPC) /* \_SB_.PCI0.GP17.XHC1.RHUB.HSP4.UPC_ */
                                }
                                Else
                                {
                                    Return (UPCN) /* \_SB_.PCI0.GP17.XHC1.RHUB.HSP4.UPCN */
                                }
                            }

                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                ToPLD (
                                    PLD_Revision           = 0x2,
                                    PLD_IgnoreColor        = 0x1,
                                    PLD_Red                = 0x0,
                                    PLD_Green              = 0x0,
                                    PLD_Blue               = 0x0,
                                    PLD_Width              = 0x0,
                                    PLD_Height             = 0x0,
                                    PLD_UserVisible        = 0x0,
                                    PLD_Dock               = 0x0,
                                    PLD_Lid                = 0x0,
                                    PLD_Panel              = "UNKNOWN",
                                    PLD_VerticalPosition   = "UPPER",
                                    PLD_HorizontalPosition = "LEFT",
                                    PLD_Shape              = "UNKNOWN",
                                    PLD_GroupOrientation   = 0x0,
                                    PLD_GroupToken         = 0x0,
                                    PLD_GroupPosition      = 0x8,
                                    PLD_Bay                = 0x0,
                                    PLD_Ejectable          = 0x0,
                                    PLD_EjectRequired      = 0x0,
                                    PLD_CabinetNumber      = 0x0,
                                    PLD_CardCageNumber     = 0x0,
                                    PLD_Reference          = 0x0,
                                    PLD_Rotation           = 0x0,
                                    PLD_Order              = 0x0)

                            })
                        }

                        Device (SSP2)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                            {
                                0x00, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                        }
                    }
                }
            }

            Device (GP18)
            {
                Name (_ADR, 0x00080002)  // _ADR: Address
                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (GPIC)
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                0x00, 
                                0x22
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                0x00, 
                                0x23
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                0x00, 
                                0x20
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                0x00, 
                                0x21
                            }
                        })
                    }
                    Else
                    {
                        Return (Package (0x04)
                        {
                            Package (0x04)
                            {
                                0xFFFF, 
                                0x00, 
                                ^^LPC0.LNKC, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x01, 
                                ^^LPC0.LNKD, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x02, 
                                ^^LPC0.LNKA, 
                                0x00
                            }, 

                            Package (0x04)
                            {
                                0xFFFF, 
                                0x03, 
                                ^^LPC0.LNKB, 
                                0x00
                            }
                        })
                    }
                }

                Device (SATA)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                }

                Device (SAT1)
                {
                    Name (_ADR, One)  // _ADR: Address
                }
            }

            Scope (GPP4)
            {
                Device (WLAN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                }
            }

            Scope (GPP6)
            {
                Device (NVME)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_S0W, 0x04)  // _S0W: S0 Device Wake State
                }
            }

            Device (SMB)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                OperationRegion (SBRV, PCI_Config, 0x08, 0x0100)
                Field (SBRV, AnyAcc, NoLock, Preserve)
                {
                    RVID,   8, 
                    Offset (0x5A), 
                    I1F,    1, 
                    I12F,   1, 
                    Offset (0x7A), 
                        ,   2, 
                    G31O,   1, 
                    Offset (0xD9), 
                        ,   6, 
                    ACIR,   1
                }

                OperationRegion (PMIO, SystemIO, 0x0CD6, 0x02)
                Field (PMIO, ByteAcc, NoLock, Preserve)
                {
                    INPM,   8, 
                    DAPM,   8
                }

                IndexField (INPM, DAPM, ByteAcc, NoLock, Preserve)
                {
                        ,   6, 
                    HPEN,   1, 
                    Offset (0x60), 
                    P1EB,   16, 
                    Offset (0xF0), 
                        ,   3, 
                    RSTU,   1
                }

                OperationRegion (ERMG, SystemMemory, 0xFED81500, 0x03FF)
                Field (ERMG, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x1A), 
                    GE10,   1, 
                    Offset (0x1C), 
                    Offset (0x1E), 
                    GE11,   1, 
                    Offset (0x40), 
                    Offset (0x42), 
                    GE12,   1, 
                    Offset (0x46), 
                    GS17,   1, 
                        ,   5, 
                    GV17,   1, 
                    GE17,   1, 
                    Offset (0x62), 
                    GP62,   8, 
                    Offset (0x108), 
                    Offset (0x10A), 
                    P33I,   1, 
                    Offset (0x10C), 
                    Offset (0x10E), 
                    P37I,   1, 
                    Offset (0x118), 
                    Offset (0x11A), 
                    P3BI,   1, 
                    Offset (0x11C), 
                    Offset (0x11E), 
                    P40I,   1
                }

                OperationRegion (ERMM, SystemMemory, 0xFED80000, 0x1000)
                Field (ERMM, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x200), 
                        ,   1, 
                    E01S,   1, 
                        ,   3, 
                    E05S,   1, 
                        ,   9, 
                    E15S,   1, 
                    E16S,   1, 
                        ,   5, 
                    E22S,   1, 
                    Offset (0x204), 
                        ,   1, 
                    E01E,   1, 
                        ,   3, 
                    E05E,   1, 
                        ,   9, 
                    E15E,   1, 
                    E16E,   1, 
                        ,   5, 
                    E22E,   1, 
                    Offset (0x208), 
                        ,   1, 
                    E01C,   1, 
                        ,   3, 
                    E05C,   1, 
                        ,   4, 
                    E10C,   1, 
                        ,   4, 
                    E15C,   1, 
                    E16C,   1, 
                        ,   4, 
                    E21C,   1, 
                    E22C,   1, 
                        ,   3, 
                    E26C,   1, 
                    Offset (0x20C), 
                        ,   1, 
                    E01L,   1, 
                        ,   3, 
                    E05L,   1, 
                        ,   9, 
                    E15L,   1, 
                    E16L,   1, 
                        ,   5, 
                    E22L,   1, 
                    Offset (0x288), 
                        ,   1, 
                    CLPS,   1, 
                    Offset (0x299), 
                        ,   7, 
                    G15A,   1, 
                    Offset (0x2AC), 
                        ,   6, 
                    SRBT,   2, 
                    Offset (0x2B0), 
                        ,   2, 
                    SLPS,   2, 
                    Offset (0x2B2), 
                        ,   4, 
                    SPBT,   2, 
                    Offset (0x362), 
                        ,   6, 
                    MT3A,   1, 
                    Offset (0x377), 
                    EPNM,   1, 
                    DPPF,   1, 
                    Offset (0x3BB), 
                        ,   6, 
                    PWDE,   1, 
                    Offset (0x3BE), 
                        ,   5, 
                    ALLS,   1, 
                    Offset (0x3C8), 
                        ,   2, 
                    TFTE,   1, 
                    Offset (0x3DF), 
                    BLNK,   2, 
                    Offset (0x3F0), 
                    PHYD,   1, 
                        ,   1, 
                        ,   1, 
                    US5R,   1, 
                    Offset (0x400), 
                    F0CT,   8, 
                    F0MS,   8, 
                    F0FQ,   8, 
                    F0LD,   8, 
                    F0MD,   8, 
                    F0MP,   8, 
                    LT0L,   8, 
                    LT0H,   8, 
                    MT0L,   8, 
                    MT0H,   8, 
                    HT0L,   8, 
                    HT0H,   8, 
                    LRG0,   8, 
                    LHC0,   8, 
                    Offset (0x410), 
                    F1CT,   8, 
                    F1MS,   8, 
                    F1FQ,   8, 
                    F1LD,   8, 
                    F1MD,   8, 
                    F1MP,   8, 
                    LT1L,   8, 
                    LT1H,   8, 
                    MT1L,   8, 
                    MT1H,   8, 
                    HT1L,   8, 
                    HT1H,   8, 
                    LRG1,   8, 
                    LHC1,   8, 
                    Offset (0x420), 
                    F2CT,   8, 
                    F2MS,   8, 
                    F2FQ,   8, 
                    F2LD,   8, 
                    F2MD,   8, 
                    F2MP,   8, 
                    LT2L,   8, 
                    LT2H,   8, 
                    MT2L,   8, 
                    MT2H,   8, 
                    HT2L,   8, 
                    HT2H,   8, 
                    LRG2,   8, 
                    LHC2,   8, 
                    Offset (0x430), 
                    F3CT,   8, 
                    F3MS,   8, 
                    F3FQ,   8, 
                    F3LD,   8, 
                    F3MD,   8, 
                    F3MP,   8, 
                    LT3L,   8, 
                    LT3H,   8, 
                    MT3L,   8, 
                    MT3H,   8, 
                    HT3L,   8, 
                    HT3H,   8, 
                    LRG3,   8, 
                    LHC3,   8, 
                    Offset (0x700), 
                    SEC,    8, 
                    Offset (0x702), 
                    MIN,    8, 
                    Offset (0xD01), 
                    MX01,   8, 
                    Offset (0xD07), 
                    MX07,   8, 
                    Offset (0xD0E), 
                    MX14,   8, 
                    MX15,   8, 
                    MX16,   8, 
                    Offset (0xD15), 
                    MX21,   8, 
                    MX22,   8, 
                    MX23,   8, 
                    Offset (0xD1B), 
                    MX27,   8, 
                    MX28,   8, 
                    Offset (0xD20), 
                    MX32,   8, 
                    MX33,   8, 
                    MX34,   8, 
                    Offset (0xD29), 
                    MX41,   8, 
                    Offset (0xD2C), 
                    MX44,   8, 
                    Offset (0xD33), 
                    MX51,   8, 
                    Offset (0xD35), 
                    MX53,   8, 
                    Offset (0xD39), 
                    MX57,   8, 
                    MX58,   8, 
                    MX59,   8, 
                    Offset (0xD42), 
                    MX66,   8, 
                    Offset (0xD66), 
                    M102,   8, 
                    Offset (0xD6C), 
                    M108,   8, 
                    Offset (0xDAA), 
                    M170,   8, 
                    Offset (0xDAF), 
                    M175,   8, 
                    M176,   8, 
                    Offset (0xDB4), 
                    M180,   8, 
                    M181,   8, 
                    M182,   8, 
                    Offset (0xDC5), 
                    M197,   8, 
                    Offset (0xDC7), 
                    M199,   8, 
                    M200,   8, 
                    Offset (0xE00), 
                    MS00,   8, 
                    MS01,   8, 
                    MS02,   8, 
                    MS03,   8, 
                    MS04,   8, 
                    Offset (0xE40), 
                    MS40,   8, 
                    Offset (0xE81), 
                        ,   2, 
                    ECES,   1
                }

                OperationRegion (P1E0, SystemIO, P1EB, 0x04)
                Field (P1E0, ByteAcc, NoLock, Preserve)
                {
                        ,   14, 
                    PEWS,   1, 
                    WSTA,   1, 
                        ,   14, 
                    PEWD,   1
                }

                Method (TRMD, 0, NotSerialized)
                {
                    TFTE = Zero
                }

                Method (HTCD, 0, NotSerialized)
                {
                }

                OperationRegion (ABIO, SystemIO, 0x0CD8, 0x08)
                Field (ABIO, DWordAcc, NoLock, Preserve)
                {
                    INAB,   32, 
                    DAAB,   32
                }

                Method (RDAB, 1, NotSerialized)
                {
                    INAB = Arg0
                    Return (DAAB) /* \_SB_.PCI0.SMB_.DAAB */
                }

                Method (WTAB, 2, NotSerialized)
                {
                    INAB = Arg0
                    DAAB = Arg1
                }

                Method (RWAB, 3, NotSerialized)
                {
                    Local0 = (RDAB (Arg0) & Arg1)
                    Local1 = (Local0 | Arg2)
                    WTAB (Arg0, Local1)
                }

                Method (CABR, 3, NotSerialized)
                {
                    Local0 = (Arg0 << 0x05)
                    Local1 = (Local0 + Arg1)
                    Local2 = (Local1 << 0x18)
                    Local3 = (Local2 + Arg2)
                    Return (Local3)
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x00140003)  // _ADR: Address
                OperationRegion (PIRQ, SystemIO, 0x0C00, 0x02)
                Field (PIRQ, ByteAcc, NoLock, Preserve)
                {
                    PIID,   8, 
                    PIDA,   8
                }

                IndexField (PIID, PIDA, ByteAcc, NoLock, Preserve)
                {
                    PIRA,   8, 
                    PIRB,   8, 
                    PIRC,   8, 
                    PIRD,   8, 
                    PIRE,   8, 
                    PIRF,   8, 
                    PIRG,   8, 
                    PIRH,   8, 
                    Offset (0x0C), 
                    SIRA,   8, 
                    SIRB,   8, 
                    SIRC,   8, 
                    SIRD,   8, 
                    PIRS,   8, 
                    Offset (0x13), 
                    HDAD,   8, 
                    Offset (0x17), 
                    SDCL,   8, 
                    Offset (0x1A), 
                    SDIO,   8, 
                    Offset (0x30), 
                    USB1,   8, 
                    Offset (0x34), 
                    USB3,   8, 
                    Offset (0x41), 
                    SATA,   8, 
                    Offset (0x62), 
                    GIOC,   8, 
                    Offset (0x70), 
                    I2C0,   8, 
                    I2C1,   8, 
                    I2C2,   8, 
                    I2C3,   8, 
                    URT0,   8, 
                    URT1,   8
                }

                Name (IPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Shared, )
                        {3,4,5,7,10,11,12,14,15}
                })
                Name (UPRS, ResourceTemplate ()
                {
                    IRQ (Level, ActiveLow, Exclusive, )
                        {3,4,5,7}
                })
                OperationRegion (KBDD, SystemIO, 0x64, 0x01)
                Field (KBDD, ByteAcc, NoLock, Preserve)
                {
                    PD64,   8
                }

                Method (DSPI, 0, NotSerialized)
                {
                    INTA (0x1F)
                    INTB (0x1F)
                    INTC (0x1F)
                    INTD (0x1F)
                    Local1 = PD64 /* \_SB_.PCI0.LPC0.PD64 */
                    PIRE = 0x1F
                    PIRF = 0x1F
                    PIRG = 0x1F
                    PIRH = 0x1F
                }

                Method (INTA, 1, NotSerialized)
                {
                    PIRA = Arg0
                    If (GPIC)
                    {
                        HDAD = Arg0
                        SDCL = Arg0
                    }
                }

                Method (INTB, 1, NotSerialized)
                {
                    PIRB = Arg0
                }

                Method (INTC, 1, NotSerialized)
                {
                    PIRC = Arg0
                    If (GPIC)
                    {
                        USB1 = Arg0
                        USB3 = Arg0
                    }
                }

                Method (INTD, 1, NotSerialized)
                {
                    PIRD = Arg0
                    If (GPIC)
                    {
                        SATA = Arg0
                    }
                }

                Device (LNKA)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRA)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTA (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRA) /* \_SB_.PCI0.LPC0.PIRA */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTA (Local0)
                    }
                }

                Device (LNKB)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRB)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTB (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRB) /* \_SB_.PCI0.LPC0.PIRB */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTB (Local0)
                    }
                }

                Device (LNKC)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x03)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRC)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTC (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRC) /* \_SB_.PCI0.LPC0.PIRC */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTC (Local0)
                    }
                }

                Device (LNKD)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x04)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRD)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        INTD (0x1F)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRD) /* \_SB_.PCI0.LPC0.PIRD */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        INTD (Local0)
                    }
                }

                Device (LNKE)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x05)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRE)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRE = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRE) /* \_SB_.PCI0.LPC0.PIRE */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRE = Local0
                    }
                }

                Device (LNKF)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x06)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRF)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRF = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRF) /* \_SB_.PCI0.LPC0.PIRF */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRF = Local0
                    }
                }

                Device (LNKG)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x07)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRG)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRG = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRG) /* \_SB_.PCI0.LPC0.PIRG */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRG = Local0
                    }
                }

                Device (LNKH)
                {
                    Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
                    Name (_UID, 0x08)  // _UID: Unique ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (PIRH)
                        {
                            Return (0x0B)
                        }
                        Else
                        {
                            Return (0x09)
                        }
                    }

                    Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
                    {
                        Return (IPRS) /* \_SB_.PCI0.LPC0.IPRS */
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        PIRH = 0x1F
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Local0 = IPRS /* \_SB_.PCI0.LPC0.IPRS */
                        CreateWordField (Local0, 0x01, IRQ0)
                        IRQ0 = (0x01 << PIRH) /* \_SB_.PCI0.LPC0.PIRH */
                        Return (Local0)
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        CreateWordField (Arg0, 0x01, IRQ0)
                        FindSetRightBit (IRQ0, Local0)
                        Local0--
                        PIRH = Local0
                    }
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x0F,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {2}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                    Name (BUF1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        If ((^^^SMB.HPEN == One))
                        {
                            Return (BUF0) /* \_SB_.PCI0.LPC0.RTC_.BUF0 */
                        }

                        Return (BUF1) /* \_SB_.PCI0.LPC0.RTC_.BUF1 */
                    }
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (TIME)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {0}
                    })
                }

                Device (KBC0)
                {
                    Name (_HID, "PTL0001")  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _CID: Compatible ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQ (Edge, ActiveHigh, Exclusive, )
                            {1}
                    })
                }

                Device (SYSR)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0022,             // Range Minimum
                            0x0022,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0530,             // Range Minimum
                            0x0530,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x28,               // Length
                            )
                        IO (Decode16,
                            0x0430,             // Range Minimum
                            0x0430,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0440,             // Range Minimum
                            0x0440,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0B00,             // Range Minimum
                            0x0B00,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0B20,             // Range Minimum
                            0x0B20,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0C00,             // Range Minimum
                            0x0C00,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0C14,             // Range Minimum
                            0x0C14,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0C50,             // Range Minimum
                            0x0C50,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0CD0,             // Range Minimum
                            0x0CD0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD2,             // Range Minimum
                            0x0CD2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD4,             // Range Minimum
                            0x0CD4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD6,             // Range Minimum
                            0x0CD6,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0CD8,             // Range Minimum
                            0x0CD8,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        IO (Decode16,
                            0x0CF9,             // Range Minimum
                            0x0CF9,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                            0x0000,             // Granularity
                            0x8100,             // Range Minimum
                            0x81FF,             // Range Maximum
                            0x0000,             // Translation Offset
                            0x0100,             // Length
                            ,, , TypeStatic, DenseTranslation)
                        WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                            0x0000,             // Granularity
                            0x8200,             // Range Minimum
                            0x82FF,             // Range Maximum
                            0x0000,             // Translation Offset
                            0x0100,             // Length
                            ,, , TypeStatic, DenseTranslation)
                    })
                }

                OperationRegion (LPCS, PCI_Config, 0xA0, 0x04)
                Field (LPCS, DWordAcc, NoLock, Preserve)
                {
                    SPBA,   32
                }

                Device (MEM)
                {
                    Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
                    Name (MSRC, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadOnly,
                            0x000E0000,         // Address Base
                            0x00020000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0x00000000,         // Address Base
                            0x00000000,         // Address Length
                            _Y06)
                        Memory32Fixed (ReadWrite,
                            0xFEC10000,         // Address Base
                            0x00000020,         // Address Length
                            _Y07)
                        Memory32Fixed (ReadOnly,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED61000,         // Address Base
                            0x00000400,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED80000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y06._BAS, BARX)  // _BAS: Base Address
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y06._LEN, GALN)  // _LEN: Length
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y07._BAS, MB01)  // _BAS: Base Address
                        CreateDWordField (MSRC, \_SB.PCI0.LPC0.MEM._Y07._LEN, ML01)  // _LEN: Length
                        Local0 = SPBA /* \_SB_.PCI0.LPC0.SPBA */
                        MB01 = (Local0 & 0xFFFFFFE0)
                        Local0 = NBBA /* \_SB_.PCI0.NBBA */
                        If (Local0)
                        {
                            GALN = 0x1000
                            BARX = (Local0 & 0xFFFFFFF0)
                        }

                        Return (MSRC) /* \_SB_.PCI0.LPC0.MEM_.MSRC */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x0F)
                    }
                }

                Scope (\)
                {
                    Name (ECON, 0x01)
                }

                Scope (\)
                {
                    OperationRegion (LFCN, SystemMemory, 0xCB766B18, 0x0100)
                    Field (LFCN, AnyAcc, Lock, Preserve)
                    {
                        TSEX,   8, 
                        FPEX,   8, 
                        PS2V,   8, 
                        KBID,   8, 
                        MCSZ,   8, 
                        OKRB,   8, 
                        HEAD,   80, 
                        PAID,   16, 
                        REST,   928, 
                        TPTY,   8, 
                        SORV,   8, 
                        TPTP,   16, 
                        TPNY,   8, 
                        TPNP,   16, 
                        DYTP,   32, 
                        FCAP,   16, 
                        VSTD,   1, 
                            ,   1, 
                        VFBC,   1, 
                        VMYH,   1, 
                        VSTP,   1, 
                        VAPM,   1, 
                        VAQM,   1, 
                        Offset (0x94), 
                            ,   1, 
                            ,   1, 
                        VAAA,   1, 
                        VMMC,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        Offset (0x95), 
                        MYHC,   8, 
                        MMCC,   8, 
                        SMYH,   8, 
                        SMMC,   8, 
                        CICF,   4, 
                        CICM,   4, 
                        HDIS,   8, 
                        IDTP,   8, 
                        LFCO,   800
                    }

                    OperationRegion (SMIO, SystemIO, 0xB0, 0x02)
                    Field (SMIO, ByteAcc, NoLock, Preserve)
                    {
                        SMBA,   8, 
                        SMBB,   8
                    }
                }

                Device (EC0)
                {
                    Name (_HID, EisaId ("PNP0C09") /* Embedded Controller Device */)  // _HID: Hardware ID
                    Name (_UID, 0x01)  // _UID: Unique ID
                    Name (ECAV, Zero)
                    Name (DPTI, Buffer (0x07) {})
                    Name (XX11, Buffer (0x07) {})
                    CreateWordField (XX11, 0x00, SSZE)
                    CreateByteField (XX11, 0x02, SMUF)
                    CreateDWordField (XX11, 0x03, SMUD)
                    SSZE = 0x07
                    Name (SPL2, 0x61A8)
                    Name (SPL3, 0x2EE0)
                    Name (SPL9, 0x4E20)
                    Name (SPP2, 0x927C)
                    Name (SPP3, 0x3A98)
                    Name (SPP9, 0x61A8)
                    Name (FPP2, 0xA410)
                    Name (FPP3, 0x4E20)
                    Name (FPP9, 0x7530)
                    Name (TDC2, 0xABE0)
                    Name (TDC3, 0x88B8)
                    Name (TDC9, 0x88B8)
                    Name (EDC2, 0x00011170)
                    Name (EDC3, 0xAFC8)
                    Name (EDC9, 0xAFC8)
                    Name (SPT2, 0x0F)
                    Name (SPT3, 0x05)
                    Name (SPT9, 0x05)
                    Name (STC2, 0x01F4)
                    Name (STC3, 0xC8)
                    Name (STC9, 0xC8)
                    Name (TCL2, 0x62)
                    Name (TCL3, 0x5F)
                    Name (TCL9, 0x5F)
                    Name (SPL4, 0x3A98)
                    Name (SPP4, 0x3A98)
                    Name (FPP4, 0x4E20)
                    Name (SPL5, 0x4E20)
                    Name (SPP5, 0x7530)
                    Name (FPP5, 0x9C40)
                    Name (SPL6, 0x3A98)
                    Name (SPP6, 0x4650)
                    Name (FPP6, 0x4E20)
                    Mutex (LFCM, 0x00)
                    Name (_GPE, 0x03)  // _GPE: General Purpose Events
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Name (BFFR, ResourceTemplate ()
                        {
                            IO (Decode16,
                                0x0062,             // Range Minimum
                                0x0062,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0066,             // Range Minimum
                                0x0066,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                        })
                        Return (BFFR) /* \_SB_.PCI0.LPC0.EC0_._CRS.BFFR */
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((ECON == 0x01))
                        {
                            Return (0x0F)
                        }

                        Return (0x00)
                    }

                    OperationRegion (ECB2, SystemMemory, 0xFE00D22E, 0xFF)
                    Field (ECB2, AnyAcc, Lock, Preserve)
                    {
                        BAR1,   184, 
                        BAR2,   80
                    }

                    OperationRegion (ERAM, EmbeddedControl, 0x00, 0xFF)
                    Field (ERAM, ByteAcc, Lock, Preserve)
                    {
                        VCMD,   8, 
                        Offset (0x60), 
                        SMPR,   8
                    }

                    OperationRegion (ERAX, SystemMemory, 0xFE00D400, 0xFF)
                    Field (ERAX, ByteAcc, Lock, Preserve)
                    {
                        Offset (0x01), 
                        VDAT,   8, 
                        VPCS,   8, 
                        Offset (0x06), 
                        FANS,   8, 
                        BUSG,   1, 
                        BLEG,   1, 
                        BATF,   1, 
                        BNSM,   1, 
                        BTST,   1, 
                        BBAD,   1, 
                        AUTO,   1, 
                        FCHG,   1, 
                        ABTL,   8, 
                        DBTL,   8, 
                        EDCC,   1, 
                        ALSC,   1, 
                        CDMB,   1, 
                        CCSB,   1, 
                        BTSM,   1, 
                        BTCM,   1, 
                        LBTM,   1, 
                        CSBM,   1, 
                        SGST,   1, 
                        HDMI,   1, 
                        HYBD,   1, 
                        SWST,   1, 
                        EVNT,   1, 
                        DCRF,   1, 
                        COLR,   1, 
                        SGCN,   1, 
                        ODPO,   1, 
                        EODD,   1, 
                        ODPK,   1, 
                        CMEX,   1, 
                        CMON,   1, 
                        SODD,   1, 
                        ODFB,   1, 
                        EODS,   1, 
                        RTMP,   8, 
                        VTMP,   8, 
                        AFCC,   8, 
                        PINF,   3, 
                        SUPR,   1, 
                        GTMP,   1, 
                        QUIT,   1, 
                        LS35,   1, 
                        Offset (0x11), 
                        RMBT,   1, 
                        RSBT,   1, 
                        VTYP,   2, 
                        Offset (0x12), 
                        FUSL,   8, 
                        FUSH,   8, 
                        FWBT,   64, 
                        Offset (0x1D), 
                        SPMO,   8, 
                        Offset (0x1F), 
                        LSKV,   8, 
                        FCMO,   8, 
                        BTFW,   8, 
                        Offset (0x31), 
                        GIRT,   8, 
                        PIRT,   8, 
                        KIRT,   8, 
                        IRTI,   8, 
                        Offset (0x36), 
                        DGPU,   8, 
                        GUST,   8, 
                        GDST,   8, 
                        FCST,   8, 
                        Offset (0x43), 
                        ECTP,   8, 
                        Offset (0x4A), 
                        ESMC,   1, 
                        Offset (0x4B), 
                        EMOD,   8, 
                        BFUD,   16, 
                        Offset (0x5D), 
                        EXSI,   8, 
                        EXSB,   8, 
                        EXND,   8, 
                        Offset (0x61), 
                        SMST,   8, 
                        SMAD,   8, 
                        SMCM,   8, 
                        SMDA,   256, 
                        BCNT,   8, 
                        SMAA,   8, 
                        SAD0,   8, 
                        SAD1,   8, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        FBFG,   1, 
                        Offset (0x8A), 
                        KBLO,   1, 
                        UCHE,   1, 
                        KLCH,   1, 
                            ,   1, 
                        KLFS,   1, 
                        KLOR,   1, 
                        CIBM,   1, 
                        UCER,   1, 
                        TPDV,   3, 
                        Offset (0x8C), 
                        QCHO,   1, 
                        BKLT,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        QCBX,   1, 
                            ,   1, 
                        QCCX,   1, 
                        FLBT,   1, 
                        PSYS,   1, 
                        LBPR,   1, 
                            ,   1, 
                            ,   1, 
                            ,   1, 
                        OVLD,   1, 
                        Offset (0x8F), 
                        BMN0,   72, 
                        BDN0,   64, 
                        IBTL,   1, 
                        IBCL,   1, 
                        ISS0,   1, 
                        IRTC,   1, 
                        ISUP,   1, 
                        ISC2,   1, 
                        IWAK,   1, 
                        Offset (0xA1), 
                            ,   1, 
                        VOUT,   1, 
                        TPAD,   1, 
                        HKDB,   1, 
                        Offset (0xA2), 
                        Offset (0xA3), 
                        OSTY,   3, 
                            ,   1, 
                        ADPI,   2, 
                            ,   1, 
                        ADPT,   1, 
                        PMEW,   1, 
                        MODW,   1, 
                        LANW,   1, 
                        RTCW,   1, 
                        WLAW,   1, 
                        USBW,   1, 
                        KEYW,   1, 
                        TPWK,   1, 
                        CHCR,   1, 
                        ADPP,   1, 
                        LERN,   1, 
                        ACMD,   1, 
                        BOVP,   1, 
                        LEAK,   1, 
                        AIRP,   1, 
                        ACOF,   1, 
                        S3EN,   1, 
                        S3RS,   1, 
                        S4EN,   1, 
                        S4RS,   1, 
                        S5EN,   1, 
                        S5RS,   1, 
                        Offset (0xA7), 
                        OSTT,   8, 
                        OSST,   8, 
                        THRT,   8, 
                        TCOT,   8, 
                        MODE,   1, 
                            ,   2, 
                        INIT,   1, 
                        FAN1,   1, 
                        FAN2,   1, 
                        FAOK,   1, 
                        SKIN,   1, 
                        SDTE,   8, 
                        SPDN,   4, 
                        FNUM,   4, 
                        TLVL,   4, 
                            ,   2, 
                        THSW,   1, 
                        TPIN,   1, 
                        TSTH,   1, 
                        TSCP,   1, 
                            ,   2, 
                        PLVL,   4, 
                        CPUT,   8, 
                        CPTL,   8, 
                        Offset (0xB7), 
                            ,   1, 
                        PWDB,   1, 
                        DIGT,   1, 
                        CDLK,   1, 
                        Offset (0xB8), 
                            ,   1, 
                        LSTE,   1, 
                        PMEE,   1, 
                        PWBE,   1, 
                        RNGE,   1, 
                        BTWE,   1, 
                        Offset (0xB9), 
                        LCBV,   8, 
                        AOAC,   1, 
                        S35F,   1, 
                        IFFS,   1, 
                        INS0,   1, 
                        ISBL,   1, 
                        ISOV,   1, 
                            ,   1, 
                        ISRT,   1, 
                        WLAN,   1, 
                        BLUE,   1, 
                        WEXT,   1, 
                        BEXT,   1, 
                        KILL,   1, 
                        WLOK,   1, 
                        EN3G,   1, 
                        EX3G,   1, 
                        KPID,   8, 
                        CTYP,   3, 
                        CORE,   3, 
                        GATY,   2, 
                        BA1P,   1, 
                        BA2P,   1, 
                            ,   2, 
                        B1CH,   1, 
                        B2CH,   1, 
                        Offset (0xBF), 
                        PBY1,   1, 
                        PBY2,   1, 
                            ,   2, 
                        SMB1,   1, 
                        SMB2,   1, 
                        Offset (0xC0), 
                        B1TY,   1, 
                        B1MD,   1, 
                        B1LW,   1, 
                            ,   1, 
                        B1MF,   3, 
                        Offset (0xC1), 
                        B1ST,   8, 
                        B1RC,   16, 
                        B1SN,   16, 
                        B1FV,   16, 
                        B1DV,   16, 
                        B1DC,   16, 
                        B1FC,   16, 
                        B1GS,   8, 
                        B1XX,   8, 
                        B1CR,   16, 
                        B1AC,   16, 
                        B1PC,   8, 
                        B1VL,   8, 
                        B1TM,   8, 
                        B1AT,   8, 
                        B1CC,   16, 
                        B1TC,   8, 
                        B1CI,   8, 
                        B1CU,   8, 
                        B1CA,   8, 
                        B1SM,   16, 
                        B1VC,   8, 
                        B1FA,   8, 
                        B1VA,   8, 
                        B1C1,   16, 
                        B1C2,   16, 
                        B1C3,   16, 
                        B1C4,   16, 
                        Offset (0xEE), 
                        B1CT,   16, 
                        B1EX,   1, 
                        B1FL,   1, 
                        B1EP,   1, 
                        B1FI,   1, 
                            ,   2, 
                        B1RE,   1, 
                        Offset (0xF1), 
                        B1LL,   1, 
                        B1CE,   1, 
                        B1SE,   1, 
                        B1S5,   1, 
                        B1SR,   1, 
                        B1SC,   1, 
                        Offset (0xF2), 
                        B1TO,   1, 
                        B1BC,   1, 
                        B1CF,   1, 
                        B1CS,   1, 
                        B1SG,   1, 
                        B1SU,   1, 
                        B1OV,   1, 
                        B1OT,   1, 
                        B1TT,   1, 
                        B1SA,   1, 
                        B1SS,   1, 
                            ,   1, 
                        B1SF,   1, 
                        B1WN,   1, 
                        Offset (0xF4), 
                        B1DA,   16, 
                        Offset (0xF8), 
                        B1CN,   8, 
                        ITMD,   1, 
                        Offset (0xFA), 
                        Offset (0xFB), 
                        FBRS,   1, 
                        Offset (0xFE), 
                        FA2S,   8
                    }

                    OperationRegion (ECMS, SystemIO, 0x72, 0x02)
                    Field (ECMS, ByteAcc, Lock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    Method (RECM, 1, Serialized)
                    {
                        INDX = Arg0
                        Return (DATA) /* \_SB_.PCI0.LPC0.EC0_.DATA */
                    }

                    Method (WECM, 2, Serialized)
                    {
                        INDX = Arg0
                        DATA = Arg1
                    }

                    OperationRegion (CMDE, SystemIO, 0x62, 0x0B)
                    Field (CMDE, ByteAcc, Lock, Preserve)
                    {
                        EC62,   8, 
                        Offset (0x02), 
                        Offset (0x03), 
                        Offset (0x04), 
                        EC66,   8, 
                        Offset (0x06), 
                        EC68,   8, 
                        Offset (0x08), 
                        Offset (0x09), 
                        Offset (0x0A), 
                        EC6C,   8
                    }

                    Method (WIBE, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == 0x01))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & 0x02) == 0x00))
                            {
                                Return (0x00)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (0x01)
                    }

                    Method (WOBF, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == 0x01))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & 0x01) == 0x01))
                            {
                                Return (0x00)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (0x01)
                    }

                    Method (WOBE, 1, Serialized)
                    {
                        Local0 = 0x00010000
                        While (Local0)
                        {
                            If ((Arg0 == 0x01))
                            {
                                Local1 = EC66 /* \_SB_.PCI0.LPC0.EC0_.EC66 */
                            }
                            ElseIf ((Arg0 == 0x02))
                            {
                                Local1 = EC6C /* \_SB_.PCI0.LPC0.EC0_.EC6C */
                            }
                            Else
                            {
                                Return (0x02)
                            }

                            If (((Local1 & 0x01) == 0x01))
                            {
                                If ((Arg0 == 0x01))
                                {
                                    Local2 = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                                }
                                ElseIf ((Arg0 == 0x02))
                                {
                                    Local2 = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                                }
                                Else
                                {
                                    Return (0x02)
                                }
                            }
                            Else
                            {
                                Return (0x00)
                            }

                            Stall (0x0A)
                            Local0--
                        }

                        Return (0x01)
                    }

                    Method (LCMD, 2, Serialized)
                    {
                        Name (LBUF, Buffer (0x1E)
                        {
                             0x00                                             // .
                        })
                        If ((WIBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        If ((WOBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        If (((Arg1 != 0x00) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != 0x00))
                            {
                                Return (0x01)
                            }
                        }

                        If ((WOBF (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        Local0 = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                        Local1 = 0x00
                        While (Local0)
                        {
                            If ((WOBF (0x02) != 0x00))
                            {
                                Return (0x01)
                            }

                            LBUF [Local1] = EC68 /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                            Local1++
                            Local0--
                        }

                        Return (LBUF) /* \_SB_.PCI0.LPC0.EC0_.LCMD.LBUF */
                    }

                    Method (NCMD, 2, Serialized)
                    {
                        If ((WIBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        If ((WOBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        EC6C = Arg0
                        If ((WIBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        If (((Arg1 != 0x00) && (Arg1 != 0xFF)))
                        {
                            EC68 = Arg1
                            If ((WIBE (0x02) != 0x00))
                            {
                                Return (0x01)
                            }
                        }

                        Return (0x00)
                    }

                    Method (SCMD, 2, Serialized)
                    {
                        Name (LBUF, Buffer (0x1E)
                        {
                             0x00                                             // .
                        })
                        If ((WIBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        If ((WOBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        EC66 = Arg0
                        If ((WIBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        If (((Arg1 != 0x00) && (Arg1 != 0xFF)))
                        {
                            EC62 = Arg1
                            If ((WIBE (0x01) != 0x00))
                            {
                                Return (0x01)
                            }
                        }

                        If ((WOBF (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        Local0 = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                        Local1 = 0x00
                        While (Local0)
                        {
                            If ((WOBF (0x01) != 0x00))
                            {
                                Return (0x01)
                            }

                            LBUF [Local1] = EC62 /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                            Local1++
                            Local0--
                        }

                        Return (LBUF) /* \_SB_.PCI0.LPC0.EC0_.SCMD.LBUF */
                    }

                    Method (TCMD, 2, Serialized)
                    {
                        If ((WIBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        If ((WOBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        EC66 = Arg0
                        If ((WIBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        If (((Arg1 != 0x00) && (Arg1 != 0xFF)))
                        {
                            EC62 = Arg1
                            If ((WIBE (0x01) != 0x00))
                            {
                                Return (0x01)
                            }
                        }

                        Return (0x00)
                    }

                    Method (LRAM, 2, Serialized)
                    {
                        If ((WIBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        If ((WOBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        EC6C = 0x7E
                        If ((WIBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        EC68 = Arg0
                        If ((WIBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        EC68 = Arg1
                        If ((WIBE (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        If ((WOBF (0x02) != 0x00))
                        {
                            Return (0x01)
                        }

                        Return (EC68) /* \_SB_.PCI0.LPC0.EC0_.EC68 */
                    }

                    Method (SRAM, 2, Serialized)
                    {
                        If ((WIBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        If ((WOBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        EC66 = 0x7E
                        If ((WIBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        EC62 = Arg0
                        If ((WIBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        EC62 = Arg1
                        If ((WIBE (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        If ((WOBF (0x01) != 0x00))
                        {
                            Return (0x01)
                        }

                        Return (EC62) /* \_SB_.PCI0.LPC0.EC0_.EC62 */
                    }

                    Device (BAT0)
                    {
                        Name (_HID, EisaId ("PNP0C0A") /* Control Method Battery */)  // _HID: Hardware ID
                        Name (_UID, 0x01)  // _UID: Unique ID
                        Name (_PCL, Package (0x01)  // _PCL: Power Consumer List
                        {
                            _SB
                        })
                        Name (PBIF, Package (0x0D)
                        {
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x01, 
                            0xFFFFFFFF, 
                            0x00, 
                            0x00, 
                            0x64, 
                            0x00, 
                            "LCFC", 
                            "BAT20101001", 
                            "LiP", 
                            "LENOVO"
                        })
                        Name (XBIF, Package (0x15)
                        {
                            0x01, 
                            0x00, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x01, 
                            0xFFFFFFFF, 
                            0x00, 
                            0x00, 
                            0x00, 
                            0x00017318, 
                            0xFFFFFFFF, 
                            0xFFFFFFFF, 
                            0x03E8, 
                            0x03E8, 
                            0x64, 
                            0x00, 
                            "LCFC", 
                            "BAT20101001", 
                            "LiP", 
                            "LENOVO", 
                            0x01
                        })
                        Name (PBST, Package (0x04)
                        {
                            0x01, 
                            0x0A90, 
                            0x1000, 
                            0x2A30
                        })
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((ECON == 0x01))
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        Local0 = BA1P /* \_SB_.PCI0.LPC0.EC0_.BA1P */
                                        Release (LFCM)
                                    }
                                }

                                If ((Local0 & 0x01))
                                {
                                    Return (0x1F)
                                }
                                Else
                                {
                                    Return (0x0F)
                                }
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }

                        Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
                        {
                            If ((ECAV == 0x01))
                            {
                                If ((Acquire (LFCM, 0xA000) == 0x00))
                                {
                                    Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                    Local0 *= 0x0A
                                    PBIF [0x01] = Local0
                                    Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                    Local0 *= 0x0A
                                    PBIF [0x02] = Local0
                                    PBIF [0x04] = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                    If (B1FC)
                                    {
                                        PBIF [0x05] = ((B1FC * 0x0A) / 0x0A)
                                        PBIF [0x06] = ((B1FC * 0x0A) / 0x18)
                                        PBIF [0x07] = ((B1DC * 0x0A) / 0x64)
                                    }

                                    PBIF [0x09] = ""
                                    PBIF [0x0A] = ""
                                    PBIF [0x0B] = ""
                                    PBIF [0x0C] = ""
                                    Name (BDNT, Buffer (0x09)
                                    {
                                         0x00                                             // .
                                    })
                                    BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                    PBIF [0x09] = ToString (BDNT, Ones)
                                    Local0 = B1SN /* \_SB_.PCI0.LPC0.EC0_.B1SN */
                                    Name (SERN, Buffer (0x06)
                                    {
                                        "     "
                                    })
                                    Local2 = 0x04
                                    While (Local0)
                                    {
                                        Divide (Local0, 0x0A, Local1, Local0)
                                        SERN [Local2] = (Local1 + 0x30)
                                        Local2--
                                    }

                                    PBIF [0x0A] = SERN /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.SERN */
                                    Name (DCH0, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    Name (DCH1, "LION")
                                    Name (DCH2, "LiP")
                                    If ((B1TY == 0x01))
                                    {
                                        DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.DCH1 */
                                        PBIF [0x0B] = ToString (DCH0, Ones)
                                    }
                                    Else
                                    {
                                        DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIF.DCH2 */
                                        PBIF [0x0B] = ToString (DCH0, Ones)
                                    }

                                    Name (BMNT, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                    PBIF [0x0C] = ToString (BMNT, Ones)
                                    Release (LFCM)
                                }
                            }

                            Return (PBIF) /* \_SB_.PCI0.LPC0.EC0_.BAT0.PBIF */
                        }

                        Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
                        {
                            If ((ECAV == 0x01))
                            {
                                If ((Acquire (LFCM, 0xA000) == 0x00))
                                {
                                    Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                    Local0 *= 0x0A
                                    XBIF [0x02] = Local0
                                    Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                    Local0 *= 0x0A
                                    XBIF [0x03] = Local0
                                    XBIF [0x05] = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                    If (B1FC)
                                    {
                                        XBIF [0x06] = ((B1FC * 0x0A) / 0x0A)
                                        PBIF [0x06] = ((B1FC * 0x0A) / 0x18)
                                        XBIF [0x0E] = ((B1DC * 0x0A) / 0x64)
                                    }

                                    XBIF [0x08] = B1CT /* \_SB_.PCI0.LPC0.EC0_.B1CT */
                                    XBIF [0x10] = ""
                                    XBIF [0x11] = ""
                                    XBIF [0x12] = ""
                                    XBIF [0x13] = ""
                                    Name (BDNT, Buffer (0x09)
                                    {
                                         0x00                                             // .
                                    })
                                    BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                    XBIF [0x10] = ToString (BDNT, Ones)
                                    Local0 = B1SN /* \_SB_.PCI0.LPC0.EC0_.B1SN */
                                    Name (SERN, Buffer (0x06)
                                    {
                                        "     "
                                    })
                                    Local2 = 0x04
                                    While (Local0)
                                    {
                                        Divide (Local0, 0x0A, Local1, Local0)
                                        SERN [Local2] = (Local1 + 0x30)
                                        Local2--
                                    }

                                    XBIF [0x11] = SERN /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.SERN */
                                    Name (DCH0, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    Name (DCH1, "LION")
                                    Name (DCH2, "LiP")
                                    If ((B1TY == 0x01))
                                    {
                                        DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.DCH1 */
                                        XBIF [0x12] = ToString (DCH0, Ones)
                                    }
                                    Else
                                    {
                                        DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.BAT0._BIX.DCH2 */
                                        XBIF [0x12] = ToString (DCH0, Ones)
                                    }

                                    Name (BMNT, Buffer (0x0A)
                                    {
                                         0x00                                             // .
                                    })
                                    BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                    XBIF [0x13] = ToString (BMNT, Ones)
                                    Release (LFCM)
                                }
                            }

                            Return (XBIF) /* \_SB_.PCI0.LPC0.EC0_.BAT0.XBIF */
                        }

                        Name (OBST, 0x00)
                        Name (OBAC, 0x00)
                        Name (OBPR, 0x00)
                        Name (OBRC, 0x00)
                        Name (OBPV, 0x00)
                        Method (_BST, 0, Serialized)  // _BST: Battery Status
                        {
                            If ((ECAV == 0x01))
                            {
                                If ((Acquire (LFCM, 0xA000) == 0x00))
                                {
                                    Sleep (0x10)
                                    Local0 = B1ST /* \_SB_.PCI0.LPC0.EC0_.B1ST */
                                    Local1 = DerefOf (PBST [0x00])
                                    Switch ((Local0 & 0x07))
                                    {
                                        Case (0x00)
                                        {
                                            OBST = (Local1 & 0xF8)
                                        }
                                        Case (0x01)
                                        {
                                            OBST = (0x01 | (Local1 & 0xF8))
                                        }
                                        Case (0x02)
                                        {
                                            OBST = (0x02 | (Local1 & 0xF8))
                                        }
                                        Case (0x04)
                                        {
                                            OBST = (0x04 | (Local1 & 0xF8))
                                        }

                                    }

                                    Sleep (0x10)
                                    OBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                    If ((OBST & 0x01))
                                    {
                                        If ((OBAC != Zero))
                                        {
                                            OBAC = (~OBAC & 0x7FFF)
                                        }
                                    }
                                    ElseIf ((FBFG != 0x01))
                                    {
                                        If ((OBAC & 0x8000))
                                        {
                                            OBAC = 0x00
                                        }
                                    }

                                    Sleep (0x10)
                                    OBRC = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                    Sleep (0x10)
                                    OBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                    OBRC *= 0x0A
                                    OBPR = ((OBAC * OBPV) / 0x03E8)
                                    PBST [0x00] = OBST /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBST */
                                    PBST [0x01] = OBPR /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBPR */
                                    PBST [0x02] = OBRC /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBRC */
                                    PBST [0x03] = OBPV /* \_SB_.PCI0.LPC0.EC0_.BAT0.OBPV */
                                    Release (LFCM)
                                }
                            }

                            Return (PBST) /* \_SB_.PCI0.LPC0.EC0_.BAT0.PBST */
                        }
                    }

                    Scope (\_SB.PCI0.LPC0.EC0)
                    {
                        Device (VPC0)
                        {
                            Name (_HID, "VPC2004")  // _HID: Hardware ID
                            Name (_UID, 0x00)  // _UID: Unique ID
                            Name (_VPC, 0xFE0D0018)
                            Name (VPCD, 0x00)
                            Method (_STA, 0, NotSerialized)  // _STA: Status
                            {
                                Return (0x0F)
                            }

                            Method (_CFG, 0, NotSerialized)
                            {
                                Return (_VPC) /* \_SB_.PCI0.LPC0.EC0_.VPC0._VPC */
                            }

                            Method (VPCR, 1, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        If ((Arg0 == 0x01))
                                        {
                                            VPCD = VCMD /* \_SB_.PCI0.LPC0.EC0_.VCMD */
                                        }
                                        Else
                                        {
                                            VPCD = VDAT /* \_SB_.PCI0.LPC0.EC0_.VDAT */
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (VPCD) /* \_SB_.PCI0.LPC0.EC0_.VPC0.VPCD */
                            }

                            Method (VPCW, 2, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        If ((Arg0 == 0x01))
                                        {
                                            VCMD = Arg1
                                        }
                                        Else
                                        {
                                            VDAT = Arg1
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (0x00)
                            }

                            Method (SVCR, 1, Serialized)
                            {
                            }

                            Method (HALS, 0, NotSerialized)
                            {
                                Local0 = Zero
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        Local0 |= 0x40
                                        If ((One == UCHE))
                                        {
                                            Local0 |= 0x80
                                        }

                                        Local0 |= 0x0200
                                        If (HKDB)
                                        {
                                            Local0 |= 0x0400
                                        }

                                        Local0 |= 0x0800
                                        If (ITMD)
                                        {
                                            Local0 |= 0x2000
                                        }

                                        Local0 |= 0x4000
                                        If ((One == CIBM))
                                        {
                                            Local0 |= 0x8000
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Method (SALS, 1, Serialized)
                            {
                                Local0 = ToInteger (Arg0)
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        If ((Local0 == 0x08))
                                        {
                                            KBLO = 0x01
                                            Release (LFCM)
                                            Return (0x00)
                                        }

                                        If ((Local0 == 0x09))
                                        {
                                            KBLO = 0x00
                                            Release (LFCM)
                                            Return (0x00)
                                        }

                                        If ((Local0 == 0x0A))
                                        {
                                            UCHE = 0x01
                                            SMBB = 0x32
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (0x00)
                                        }

                                        If ((Local0 == 0x0B))
                                        {
                                            UCHE = 0x00
                                            SMBB = 0x33
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (0x00)
                                        }

                                        If ((Local0 == 0x0E))
                                        {
                                            HKDB = 0x01
                                            SMBB = 0x31
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (0x00)
                                        }

                                        If ((Local0 == 0x0F))
                                        {
                                            HKDB = 0x00
                                            SMBB = 0x30
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (0x00)
                                        }

                                        If ((Local0 == 0x12))
                                        {
                                            CIBM = 0x00
                                            SMBB = 0x34
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (0x00)
                                        }

                                        If ((Local0 == 0x13))
                                        {
                                            CIBM = 0x01
                                            SMBB = 0x35
                                            SMBA = 0xCA
                                            Release (LFCM)
                                            Return (0x00)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (GBMD, 0, NotSerialized)
                            {
                                Local0 = 0x10000000
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        If ((One == CDMB))
                                        {
                                            Local0 |= One
                                        }

                                        If ((0x01 == QCBX))
                                        {
                                            If ((One == QCHO))
                                            {
                                                Local0 |= 0x04
                                            }
                                        }

                                        If ((0x01 == QCCX))
                                        {
                                            If ((One == QCHO))
                                            {
                                                Local0 |= 0x04
                                            }
                                        }

                                        If ((One == BBAD))
                                        {
                                            Local0 |= 0x08
                                        }

                                        If ((One == BTSM))
                                        {
                                            Local0 |= 0x20
                                        }

                                        If ((One == BLEG))
                                        {
                                            Local0 |= 0x80
                                        }

                                        If ((One == BATF))
                                        {
                                            Local0 |= 0x0100
                                        }

                                        If ((Zero == BTSM))
                                        {
                                            Local0 |= 0x0200
                                        }

                                        If ((One == BUSG))
                                        {
                                            Local0 |= 0x0800
                                        }

                                        If ((0x00 == ADPI))
                                        {
                                            Local0 &= 0xFFFE7FFF
                                        }

                                        If ((0x01 == ADPI))
                                        {
                                            Local0 |= 0x8000
                                        }

                                        If ((0x02 == ADPI))
                                        {
                                            Local0 |= 0x00010000
                                        }

                                        If ((0x01 == QCBX))
                                        {
                                            Local0 |= 0x00020000
                                        }

                                        Local0 |= 0x00040000
                                        If ((One == ESMC))
                                        {
                                            Local0 |= 0x00400000
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Name (VBST, 0x00)
                            Name (VBAC, 0x00)
                            Name (VBPR, 0x00)
                            Name (VBRC, 0x00)
                            Name (VBPV, 0x00)
                            Name (VBFC, 0x00)
                            Name (VBCT, 0x00)
                            Method (SMTF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        If ((Arg0 == 0x00))
                                        {
                                            If ((B1FV == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            If ((B1AC == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local0 *= 0x0A
                                            VBFC = Local0
                                            Local1 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local1 *= 0x0A
                                            VBRC = Local1
                                            If ((VBFC > VBRC))
                                            {
                                                VBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                                VBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                                Local0 -= Local1
                                                Local1 = (VBAC * VBPV)
                                                Local3 = (Local0 * 0x03E8)
                                                Local3 = (Local3 * 0x3C)
                                                VBCT = (Local3 / Local1)
                                                Release (LFCM)
                                                Return (VBCT) /* \_SB_.PCI0.LPC0.EC0_.VPC0.VBCT */
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }
                                        }

                                        If ((Arg0 == 0x01))
                                        {
                                            Release (LFCM)
                                            Return (0xFFFF)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (0xFFFF)
                            }

                            Name (QBST, 0x00)
                            Name (QBAC, 0x00)
                            Name (QBPR, 0x00)
                            Name (QBRC, 0x00)
                            Name (QBPV, 0x00)
                            Name (QBFC, 0x00)
                            Name (QBCT, 0x00)
                            Method (SMTE, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        If ((Arg0 == 0x00))
                                        {
                                            If ((B1FV == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            If ((B1AC == Zero))
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }

                                            Local0 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local0 *= 0x0A
                                            QBRC = Local0
                                            Local1 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local1 *= 0x0A
                                            QBFC = Local1
                                            If ((QBFC > QBRC))
                                            {
                                                QBPV = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                                If (((B1AC & 0x8000) == Zero))
                                                {
                                                    QBAC = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                                }
                                                Else
                                                {
                                                    QBAC = (0xFFFF - B1AC)
                                                }

                                                Local1 = (QBAC * QBPV)
                                                Local3 = (Local0 * 0x03E8)
                                                Local3 = (Local3 * 0x3C)
                                                QBCT = (Local3 / Local1)
                                                Release (LFCM)
                                                Return (QBCT) /* \_SB_.PCI0.LPC0.EC0_.VPC0.QBCT */
                                            }
                                            Else
                                            {
                                                Release (LFCM)
                                                Return (0xFFFF)
                                            }
                                        }

                                        If ((Arg0 == 0x01))
                                        {
                                            Release (LFCM)
                                            Return (0xFFFF)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (0xFFFF)
                            }

                            Method (SBMC, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        If ((Arg0 == Zero))
                                        {
                                            CDMB = 0x00
                                            EDCC = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == One))
                                        {
                                            CDMB = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x03))
                                        {
                                            BTSM = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x05))
                                        {
                                            BTSM = 0x00
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((0x01 == QCBX))
                                        {
                                            If ((Arg0 == 0x07))
                                            {
                                                QCHO = One
                                                BTSM = Zero
                                                Release (LFCM)
                                                Return (Zero)
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                QCHO = Zero
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                        }

                                        If ((0x01 == QCCX))
                                        {
                                            If ((Arg0 == 0x07))
                                            {
                                                QCHO = One
                                                BTSM = Zero
                                                Release (LFCM)
                                                Return (Zero)
                                            }

                                            If ((Arg0 == 0x08))
                                            {
                                                QCHO = Zero
                                                Release (LFCM)
                                                Return (Zero)
                                            }
                                        }

                                        If ((Arg0 == 0x09))
                                        {
                                            ESMC = One
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        If ((Arg0 == 0x10))
                                        {
                                            ESMC = Zero
                                            Release (LFCM)
                                            Return (Zero)
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (Zero)
                            }

                            Method (MHCF, 1, NotSerialized)
                            {
                                P80H = 0x78
                                Local0 = Arg0
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        Local0 &= 0x20
                                        Local0 >>= 0x05
                                        RMBT = Local0
                                        Sleep (0x14)
                                        Release (LFCM)
                                    }
                                }

                                Return (Local0)
                            }

                            Method (MHPF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        Name (BFWB, Buffer (0x25) {})
                                        CreateByteField (BFWB, Zero, FB0)
                                        CreateByteField (BFWB, One, FB1)
                                        CreateByteField (BFWB, 0x02, FB2)
                                        CreateByteField (BFWB, 0x03, FB3)
                                        CreateField (BFWB, 0x20, 0x0100, FB4)
                                        CreateByteField (BFWB, 0x24, FB5)
                                        If ((SizeOf (Arg0) <= 0x25))
                                        {
                                            If ((SMPR != Zero))
                                            {
                                                FB1 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                                            }
                                            Else
                                            {
                                                BFWB = Arg0
                                                SMAD = FB2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB2_ */
                                                SMCM = FB3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB3_ */
                                                BCNT = FB5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB5_ */
                                                Local0 = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                If (((Local0 & One) == Zero))
                                                {
                                                    SMDA = FB4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB4_ */
                                                }

                                                SMST = 0x00
                                                SMPR = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                BTFW = 0x80
                                                Local1 = 0x03E8
                                                While (Local1)
                                                {
                                                    Sleep (One)
                                                    Local1--
                                                    If (((SMST && 0x80) || (SMPR == 0x00)))
                                                    {
                                                        Break
                                                    }
                                                }

                                                Local0 = FB0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.FB0_ */
                                                If (((Local0 & One) != Zero))
                                                {
                                                    FB4 = SMDA /* \_SB_.PCI0.LPC0.EC0_.SMDA */
                                                }

                                                FB1 = SMST /* \_SB_.PCI0.LPC0.EC0_.SMST */
                                                If (((Local1 == 0x00) || !(SMST && 0x80)))
                                                {
                                                    SMPR = 0x00
                                                    FB1 = 0x92
                                                }
                                            }

                                            Release (LFCM)
                                            Return (BFWB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHPF.BFWB */
                                        }

                                        Release (LFCM)
                                    }
                                }
                            }

                            Method (MHIF, 1, NotSerialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        P80H = 0x50
                                        If ((Arg0 == 0x00))
                                        {
                                            Name (RETB, Buffer (0x0A) {})
                                            Name (BUF1, Buffer (0x08) {})
                                            BUF1 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                            CreateByteField (BUF1, 0x00, FW0)
                                            CreateByteField (BUF1, 0x01, FW1)
                                            CreateByteField (BUF1, 0x02, FW2)
                                            CreateByteField (BUF1, 0x03, FW3)
                                            CreateByteField (BUF1, 0x04, FW4)
                                            CreateByteField (BUF1, 0x05, FW5)
                                            CreateByteField (BUF1, 0x06, FW6)
                                            CreateByteField (BUF1, 0x07, FW7)
                                            RETB [Zero] = FUSL /* \_SB_.PCI0.LPC0.EC0_.FUSL */
                                            RETB [One] = FUSH /* \_SB_.PCI0.LPC0.EC0_.FUSH */
                                            RETB [0x02] = FW0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW0_ */
                                            RETB [0x03] = FW1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW1_ */
                                            RETB [0x04] = FW2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW2_ */
                                            RETB [0x05] = FW3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW3_ */
                                            RETB [0x06] = FW4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW4_ */
                                            RETB [0x07] = FW5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW5_ */
                                            RETB [0x08] = FW6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW6_ */
                                            RETB [0x09] = FW7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.FW7_ */
                                            Release (LFCM)
                                            Return (RETB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.MHIF.RETB */
                                        }

                                        Release (LFCM)
                                    }
                                }
                            }

                            Method (GSBI, 1, NotSerialized)
                            {
                                Name (BIFB, Buffer (0x53)
                                {
                                    /* 0000 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0008 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0018 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0030 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0038 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0040 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0048 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                                    /* 0050 */  0xFF, 0xFF, 0xFF                                 // ...
                                })
                                CreateWordField (BIFB, 0x00, DCAP)
                                CreateWordField (BIFB, 0x02, FCAP)
                                CreateWordField (BIFB, 0x04, RCAP)
                                CreateWordField (BIFB, 0x06, ATTE)
                                CreateWordField (BIFB, 0x08, ATTF)
                                CreateWordField (BIFB, 0x0A, BTVT)
                                CreateWordField (BIFB, 0x0C, BTCT)
                                CreateWordField (BIFB, 0x0E, BTMP)
                                CreateWordField (BIFB, 0x10, MDAT)
                                CreateWordField (BIFB, 0x12, FUDT)
                                CreateWordField (BIFB, 0x14, DVLT)
                                CreateField (BIFB, 0xB0, 0x50, DCHE)
                                CreateField (BIFB, 0x0100, 0x40, DNAM)
                                CreateField (BIFB, 0x0140, 0x60, MNAM)
                                CreateField (BIFB, 0x01A0, 0xB8, BRNB)
                                CreateQWordField (BIFB, 0x4B, BFW0)
                                If (((Arg0 == 0x00) || (Arg0 == 0x01)))
                                {
                                    If (ECAV)
                                    {
                                        If ((Acquire (LFCM, 0xA000) == 0x00))
                                        {
                                            Local0 = B1DC /* \_SB_.PCI0.LPC0.EC0_.B1DC */
                                            Local0 *= 0x0A
                                            DCAP = Local0
                                            Local0 = B1FC /* \_SB_.PCI0.LPC0.EC0_.B1FC */
                                            Local0 *= 0x0A
                                            FCAP = Local0
                                            Local0 = B1RC /* \_SB_.PCI0.LPC0.EC0_.B1RC */
                                            Local0 *= 0x0A
                                            RCAP = Local0
                                            ATTE = SMTE (0x00)
                                            ATTF = SMTF (0x00)
                                            BTVT = B1FV /* \_SB_.PCI0.LPC0.EC0_.B1FV */
                                            BTCT = B1AC /* \_SB_.PCI0.LPC0.EC0_.B1AC */
                                            Local0 = B1AT /* \_SB_.PCI0.LPC0.EC0_.B1AT */
                                            Local0 += 0x0111
                                            Local0 *= 0x0A
                                            BTMP = Local0
                                            MDAT = B1DA /* \_SB_.PCI0.LPC0.EC0_.B1DA */
                                            If ((BFUD != 0x00))
                                            {
                                                FUDT = BFUD /* \_SB_.PCI0.LPC0.EC0_.BFUD */
                                            }

                                            DVLT = B1DV /* \_SB_.PCI0.LPC0.EC0_.B1DV */
                                            Name (DCH0, Buffer (0x0A)
                                            {
                                                 0x00                                             // .
                                            })
                                            Name (DCH1, "LION")
                                            Name (DCH2, "LiP")
                                            If ((B1TY == 0x01))
                                            {
                                                DCH0 = DCH1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH1 */
                                                DCHE = DCH0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH0 */
                                            }
                                            Else
                                            {
                                                DCH0 = DCH2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH2 */
                                                DCHE = DCH0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.DCH0 */
                                            }

                                            Name (BDNT, Buffer (0x08)
                                            {
                                                 0x00                                             // .
                                            })
                                            BDNT = BDN0 /* \_SB_.PCI0.LPC0.EC0_.BDN0 */
                                            DNAM = BDNT /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BDNT */
                                            Name (BMNT, Buffer (0x0C)
                                            {
                                                 0x00                                             // .
                                            })
                                            BMNT = BMN0 /* \_SB_.PCI0.LPC0.EC0_.BMN0 */
                                            MNAM = BMNT /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BMNT */
                                            Name (BRN0, Buffer (0x17)
                                            {
                                                 0x00                                             // .
                                            })
                                            BRN0 = BAR1 /* \_SB_.PCI0.LPC0.EC0_.BAR1 */
                                            BRNB = BRN0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BRN0 */
                                            BFW0 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                            Release (LFCM)
                                        }
                                    }

                                    Return (BIFB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BIFB */
                                }

                                If ((Arg0 == 0x02))
                                {
                                    Return (BIFB) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GSBI.BIFB */
                                }

                                Return (Zero)
                            }

                            Method (HODD, 0, NotSerialized)
                            {
                            }

                            Method (SODD, 1, Serialized)
                            {
                            }

                            Method (GBID, 0, Serialized)
                            {
                                Name (GBUF, Package (0x04)
                                {
                                    Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    }, 

                                    Buffer (0x02)
                                    {
                                         0x00, 0x00                                       // ..
                                    }, 

                                    Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }, 

                                    Buffer (0x08)
                                    {
                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        DerefOf (GBUF [Zero]) [Zero] = B1CT /* \_SB_.PCI0.LPC0.EC0_.B1CT */
                                        DerefOf (GBUF [0x01]) [Zero] = 0x00
                                        Name (BUF1, Buffer (0x08) {})
                                        BUF1 = FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                                        CreateByteField (BUF1, 0x00, FW0)
                                        CreateByteField (BUF1, 0x01, FW1)
                                        CreateByteField (BUF1, 0x02, FW2)
                                        CreateByteField (BUF1, 0x03, FW3)
                                        CreateByteField (BUF1, 0x04, FW4)
                                        CreateByteField (BUF1, 0x05, FW5)
                                        CreateByteField (BUF1, 0x06, FW6)
                                        CreateByteField (BUF1, 0x07, FW7)
                                        DerefOf (GBUF [0x02]) [Zero] = FW0 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW0_ */
                                        DerefOf (GBUF [0x02]) [0x01] = FW1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW1_ */
                                        DerefOf (GBUF [0x02]) [0x02] = FW2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW2_ */
                                        DerefOf (GBUF [0x02]) [0x03] = FW3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW3_ */
                                        DerefOf (GBUF [0x02]) [0x04] = FW4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW4_ */
                                        DerefOf (GBUF [0x02]) [0x05] = FW5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW5_ */
                                        DerefOf (GBUF [0x02]) [0x06] = FW6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW6_ */
                                        DerefOf (GBUF [0x02]) [0x07] = FW7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.FW7_ */
                                        DerefOf (GBUF [0x03]) [Zero] = 0x00
                                        Release (LFCM)
                                    }
                                }

                                Return (GBUF) /* \_SB_.PCI0.LPC0.EC0_.VPC0.GBID.GBUF */
                            }

                            Name (APDT, 0x00)
                            Method (APPC, 1, Serialized)
                            {
                                APDT = Arg0
                                Return (0x00)
                            }

                            Method (DBSL, 0, NotSerialized)
                            {
                                Return (Package (0x10)
                                {
                                    0xC9, 
                                    0xAE, 
                                    0x95, 
                                    0x7E, 
                                    0x69, 
                                    0x56, 
                                    0x45, 
                                    0x36, 
                                    0x29, 
                                    0x1E, 
                                    0x15, 
                                    0x0E, 
                                    0x09, 
                                    0x06, 
                                    0x05, 
                                    0x00
                                })
                            }

                            Method (SBSL, 1, Serialized)
                            {
                                If (ECAV)
                                {
                                    If ((Acquire (LFCM, 0xA000) == 0x00))
                                    {
                                        Local0 = Arg0
                                        If ((Local0 == One))
                                        {
                                            LCBV = 0x0E
                                        }

                                        If ((Local0 == 0x02))
                                        {
                                            LCBV = 0x07
                                        }

                                        Release (LFCM)
                                    }
                                }

                                Return (0x00)
                            }

                            Method (STHT, 1, Serialized)
                            {
                                Return (0x00)
                            }

                            Name (NITS, 0x3E)
                            Name (SPL1, 0x2EE0)
                            Name (SPL2, 0x61A8)
                            Name (SPL3, 0x2EE0)
                            Name (SPL7, 0x55F0)
                            Name (SPL8, 0x2EE0)
                            Name (SPL9, 0x4E20)
                            Name (SPP1, 0x2EE0)
                            Name (SPP2, 0x927C)
                            Name (SPP3, 0x3A98)
                            Name (SPP7, 0x6D60)
                            Name (SPP8, 0x3A98)
                            Name (SPP9, 0x61A8)
                            Name (FPP1, 0x2EE0)
                            Name (FPP2, 0xA410)
                            Name (FPP3, 0x4E20)
                            Name (FPP7, 0x9C40)
                            Name (FPP8, 0x4E20)
                            Name (FPP9, 0x7530)
                            Name (TDC1, 0x88B8)
                            Name (TDC2, 0xABE0)
                            Name (TDC3, 0x88B8)
                            Name (TDC7, 0xABE0)
                            Name (TDC8, 0x88B8)
                            Name (TDC9, 0x88B8)
                            Name (EDC1, 0xAFC8)
                            Name (EDC2, 0x00011170)
                            Name (EDC3, 0xAFC8)
                            Name (EDC7, 0x00011170)
                            Name (EDC8, 0xAFC8)
                            Name (EDC9, 0xAFC8)
                            Name (SPT1, 0x05)
                            Name (SPT2, 0x0F)
                            Name (SPT3, 0x05)
                            Name (SPT7, 0x05)
                            Name (SPT8, 0x05)
                            Name (SPT9, 0x05)
                            Name (STC1, 0xC8)
                            Name (STC2, 0x01F4)
                            Name (STC3, 0xC8)
                            Name (STC7, 0xC8)
                            Name (STC8, 0xC8)
                            Name (STC9, 0xC8)
                            Name (TCL2, 0x62)
                            Name (TCL3, 0x5F)
                            Name (TCL7, 0x5F)
                            Name (TCL8, 0x5F)
                            Name (TCL9, 0x5F)
                            Name (SPL4, 0x3A98)
                            Name (SPP4, 0x3A98)
                            Name (FPP4, 0x4E20)
                            Name (SPL5, 0x4E20)
                            Name (SPP5, 0x7530)
                            Name (FPP5, 0x9C40)
                            Name (SPL6, 0x3A98)
                            Name (SPP6, 0x4E20)
                            Name (FPP6, 0x4E20)
                            Method (DYTC, 1, Serialized)
                            {
                                Local0 = Arg0
                                DYTP = Local0
                                Local1 = 0x00
                                Name (XX11, Buffer (0x07) {})
                                CreateWordField (XX11, 0x00, SSZE)
                                CreateByteField (XX11, 0x02, SMUF)
                                CreateDWordField (XX11, 0x03, SMUD)
                                SSZE = 0x07
                                Switch (ToInteger ((Local0 & 0x01FF)))
                                {
                                    Case (0x00)
                                    {
                                        Local1 = 0x0100
                                        Local1 |= 0x40000000
                                        Local1 |= 0x00
                                        Local1 |= 0x01
                                    }
                                    Case (0x01)
                                    {
                                        Local2 = ((Local0 >> 0x0C) & 0x0F)
                                        Local3 = ((Local0 >> 0x10) & 0x0F)
                                        Local4 = ((Local0 >> 0x14) & 0x01)
                                        Switch (Local2)
                                        {
                                            Case (0x04)
                                            {
                                                If ((Local3 != 0x0F))
                                                {
                                                    Local1 = 0x0A
                                                    Return (Local1)
                                                }

                                                If ((Local4 == 0x00))
                                                {
                                                    VSTP = 0x00
                                                }
                                                Else
                                                {
                                                    VSTP = 0x01
                                                }
                                            }
                                            Case (0x05)
                                            {
                                                If ((Local3 != 0x0F))
                                                {
                                                    Local1 = 0x0A
                                                    Return (Local1)
                                                }

                                                If ((Local4 == 0x00))
                                                {
                                                    VAPM = 0x00
                                                }
                                                Else
                                                {
                                                    VAPM = 0x01
                                                }
                                            }
                                            Case (0x06)
                                            {
                                                If ((Local3 != 0x0F))
                                                {
                                                    Local1 = 0x0A
                                                    Return (Local1)
                                                }

                                                If ((Local4 == 0x00))
                                                {
                                                    VAQM = 0x00
                                                }
                                                Else
                                                {
                                                    VAQM = 0x01
                                                }
                                            }
                                            Case (0x0B)
                                            {
                                                Switch (Local3)
                                                {
                                                    Case (0x02)
                                                    {
                                                        If ((Local4 != 0x01))
                                                        {
                                                            Local1 = 0x0A
                                                            Return (Local1)
                                                        }
                                                    }
                                                    Case (0x03)
                                                    {
                                                        If ((Local4 != 0x01))
                                                        {
                                                            Local1 = 0x0A
                                                            Return (Local1)
                                                        }
                                                    }
                                                    Case (0x0F)
                                                    {
                                                        If ((Local4 != 0x00))
                                                        {
                                                            Local1 = 0x0A
                                                            Return (Local1)
                                                        }
                                                    }
                                                    Default
                                                    {
                                                        Local1 = 0x0A
                                                        Return (Local1)
                                                    }

                                                }

                                                If ((Local4 == 0x00))
                                                {
                                                    If ((Local3 == 0x0F))
                                                    {
                                                        VMMC = 0x00
                                                        SMMC = 0x0F
                                                    }
                                                    Else
                                                    {
                                                        VMMC = 0x00
                                                        SMMC = 0x00
                                                    }
                                                }
                                                Else
                                                {
                                                    VMMC = 0x01
                                                    SMMC = Local3
                                                }
                                            }
                                            Case (0x00)
                                            {
                                                If ((Local3 != 0x0F))
                                                {
                                                    Local1 = 0x0A
                                                    Return (Local1)
                                                }
                                            }
                                            Default
                                            {
                                                Local1 = 0x02
                                                Return (Local1)
                                            }

                                        }

                                        If ((VSTP == 0x01))
                                        {
                                            CICF = 0x04
                                            FCMO = 0x05
                                            SMUF = 0x05
                                            SMUD = SPL1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL1 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x07
                                            SMUD = SPP1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP1 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x06
                                            SMUD = FPP1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP1 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0B
                                            SMUD = TDC1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TDC1 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0C
                                            SMUD = EDC1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.EDC1 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x08
                                            SMUD = SPT1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPT1 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x01
                                            SMUD = STC1 /* \_SB_.PCI0.LPC0.EC0_.VPC0.STC1 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2E
                                            SMUD = SPL8 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL8 */
                                            ALIB (0x0C, XX11)
                                        }
                                        ElseIf (((VMMC == 0x01) && (SMMC == 0x02)))
                                        {
                                            CICF = 0x0B
                                            SPMO = 0x01
                                            FCMO = 0x01
                                            SMUF = 0x05
                                            If ((PSYS == 0x01))
                                            {
                                                SMUD = SPL5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL5 */
                                            }
                                            ElseIf ((LBPR == 0x01))
                                            {
                                                SMUD = SPL6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL6 */
                                            }
                                            ElseIf ((OVLD == 0x01))
                                            {
                                                SMUD = SPL4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL4 */
                                            }
                                            Else
                                            {
                                                SMUD = SPL2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL2 */
                                            }

                                            ALIB (0x0C, XX11)
                                            SMUF = 0x07
                                            If ((PSYS == 0x01))
                                            {
                                                SMUD = SPP5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP5 */
                                            }
                                            ElseIf ((LBPR == 0x01))
                                            {
                                                SMUD = SPP6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP6 */
                                            }
                                            ElseIf ((OVLD == 0x01))
                                            {
                                                SMUD = SPP4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP4 */
                                            }
                                            Else
                                            {
                                                SMUD = SPP2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP2 */
                                            }

                                            ALIB (0x0C, XX11)
                                            SMUF = 0x06
                                            If ((PSYS == 0x01))
                                            {
                                                SMUD = FPP5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP5 */
                                            }
                                            ElseIf ((LBPR == 0x01))
                                            {
                                                SMUD = FPP6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP6 */
                                            }
                                            ElseIf ((OVLD == 0x01))
                                            {
                                                SMUD = FPP4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP4 */
                                            }
                                            Else
                                            {
                                                SMUD = FPP2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP2 */
                                            }

                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0B
                                            SMUD = TDC2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TDC2 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0C
                                            SMUD = EDC2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.EDC2 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x08
                                            SMUD = SPT2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPT2 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x01
                                            SMUD = STC2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.STC2 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x03
                                            SMUD = TCL2 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TCL2 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x20
                                            SMUD = 0x199A
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x22
                                            SMUD = 0x4000
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x24
                                            SMUD = 0x0148
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x25
                                            SMUD = 0x2666
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x26
                                            SMUD = 0x01EF
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x27
                                            SMUD = 0x0430
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2C
                                            SMUD = 0xB06D
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2E
                                            SMUD = 0x61A8
                                            ALIB (0x0C, XX11)
                                        }
                                        ElseIf (((VMMC == 0x01) && (SMMC == 0x03)))
                                        {
                                            CICF = 0x0B
                                            SPMO = 0x02
                                            FCMO = 0x02
                                            SMUF = 0x05
                                            SMUD = SPL3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL3 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x07
                                            SMUD = SPP3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP3 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x06
                                            SMUD = FPP3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP3 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0B
                                            SMUD = TDC3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TDC3 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0C
                                            SMUD = EDC3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.EDC3 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x08
                                            SMUD = SPT3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPT3 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x01
                                            SMUD = STC3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.STC3 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x03
                                            SMUD = TCL3 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TCL3 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x20
                                            SMUD = 0x199A
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x22
                                            SMUD = 0x2C00
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x24
                                            SMUD = 0x0148
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x25
                                            SMUD = 0x2666
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x26
                                            SMUD = 0x011C
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x27
                                            SMUD = 0x040B
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2C
                                            SMUD = 0xC936
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2E
                                            SMUD = 0x2EE0
                                            ALIB (0x0C, XX11)
                                        }
                                        ElseIf ((VAPM == 0x01))
                                        {
                                            CICF = 0x05
                                            FCMO = 0x03
                                            SMUF = 0x05
                                            If ((PSYS == 0x01))
                                            {
                                                SMUD = SPL5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL5 */
                                            }
                                            ElseIf ((LBPR == 0x01))
                                            {
                                                SMUD = SPL6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL6 */
                                            }
                                            ElseIf ((OVLD == 0x01))
                                            {
                                                SMUD = SPL4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL4 */
                                            }
                                            Else
                                            {
                                                SMUD = SPL7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL7 */
                                            }

                                            ALIB (0x0C, XX11)
                                            SMUF = 0x07
                                            If ((PSYS == 0x01))
                                            {
                                                SMUD = SPP5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP5 */
                                            }
                                            ElseIf ((LBPR == 0x01))
                                            {
                                                SMUD = SPP6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP6 */
                                            }
                                            ElseIf ((OVLD == 0x01))
                                            {
                                                SMUD = SPP4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP4 */
                                            }
                                            Else
                                            {
                                                SMUD = SPP7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP7 */
                                            }

                                            ALIB (0x0C, XX11)
                                            SMUF = 0x06
                                            If ((PSYS == 0x01))
                                            {
                                                SMUD = FPP5 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP5 */
                                            }
                                            ElseIf ((LBPR == 0x01))
                                            {
                                                SMUD = FPP6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP6 */
                                            }
                                            ElseIf ((OVLD == 0x01))
                                            {
                                                SMUD = FPP4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP4 */
                                            }
                                            Else
                                            {
                                                SMUD = FPP7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP7 */
                                            }

                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0B
                                            SMUD = TDC7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TDC7 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0C
                                            SMUD = EDC7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.EDC7 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x08
                                            SMUD = SPT7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPT7 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x01
                                            SMUD = STC7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.STC7 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x03
                                            SMUD = TCL7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TCL7 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x20
                                            SMUD = 0x199A
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x22
                                            SMUD = 0x3400
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x24
                                            SMUD = 0xC5
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x25
                                            SMUD = 0x2666
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x26
                                            SMUD = 0x023E
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x27
                                            SMUD = 0x0239
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2C
                                            SMUD = 0xEED2
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2E
                                            SMUD = SPL7 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL7 */
                                            ALIB (0x0C, XX11)
                                        }
                                        ElseIf ((VAQM == 0x01))
                                        {
                                            CICF = 0x06
                                            FCMO = 0x04
                                            SMUF = 0x05
                                            SMUD = SPL8 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL8 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x07
                                            SMUD = SPP8 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP8 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x06
                                            SMUD = FPP8 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP8 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0B
                                            SMUD = TDC8 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TDC8 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0C
                                            SMUD = EDC8 /* \_SB_.PCI0.LPC0.EC0_.VPC0.EDC8 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x08
                                            SMUD = SPT8 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPT8 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x01
                                            SMUD = STC8 /* \_SB_.PCI0.LPC0.EC0_.VPC0.STC8 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x03
                                            SMUD = TCL8 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TCL8 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x20
                                            SMUD = 0x199A
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x22
                                            SMUD = 0x2D00
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x24
                                            SMUD = 0x0148
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x25
                                            SMUD = 0x2666
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x26
                                            SMUD = 0x011C
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x27
                                            SMUD = 0x040B
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2C
                                            SMUD = 0xC936
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2E
                                            SMUD = SPL8 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL8 */
                                            ALIB (0x0C, XX11)
                                        }
                                        ElseIf (((VMMC == 0x00) && (SMMC == 0x0F)))
                                        {
                                            CICF = 0x0B
                                            SPMO = 0x00
                                            FCMO = 0x00
                                            SMUF = 0x05
                                            If ((LBPR == 0x01))
                                            {
                                                SMUD = SPL6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL6 */
                                            }
                                            ElseIf ((OVLD == 0x01))
                                            {
                                                SMUD = SPL4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL4 */
                                            }
                                            Else
                                            {
                                                SMUD = SPL9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL9 */
                                            }

                                            ALIB (0x0C, XX11)
                                            SMUF = 0x07
                                            If ((LBPR == 0x01))
                                            {
                                                SMUD = SPP6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP6 */
                                            }
                                            ElseIf ((OVLD == 0x01))
                                            {
                                                SMUD = SPP4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP4 */
                                            }
                                            Else
                                            {
                                                SMUD = SPP9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP9 */
                                            }

                                            ALIB (0x0C, XX11)
                                            SMUF = 0x06
                                            If ((LBPR == 0x01))
                                            {
                                                SMUD = FPP6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP6 */
                                            }
                                            ElseIf ((OVLD == 0x01))
                                            {
                                                SMUD = FPP4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP4 */
                                            }
                                            Else
                                            {
                                                SMUD = FPP9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP9 */
                                            }

                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0B
                                            SMUD = TDC9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TDC9 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x0C
                                            SMUD = EDC9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.EDC9 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x08
                                            SMUD = SPT9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPT9 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x01
                                            SMUD = STC9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.STC9 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x03
                                            SMUD = TCL9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TCL9 */
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x20
                                            SMUD = 0x199A
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x22
                                            SMUD = 0x3200
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x24
                                            SMUD = 0x0148
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x25
                                            SMUD = 0x2666
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x26
                                            SMUD = 0x0145
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x27
                                            SMUD = 0x043D
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2C
                                            SMUD = 0xC003
                                            ALIB (0x0C, XX11)
                                            SMUF = 0x2E
                                            SMUD = SPL9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL9 */
                                            ALIB (0x0C, XX11)
                                        }
                                        Else
                                        {
                                            CICF = 0x00
                                        }

                                        Local5 = VSTD /* \VSTD */
                                        Local5 |= (VFBC << 0x02)
                                        Local5 |= (VMYH << 0x03)
                                        Local5 |= (VSTP << 0x04)
                                        Local5 |= (VAPM << 0x05)
                                        Local5 |= (VAQM << 0x06)
                                        Local5 |= (VAAA << 0x0A)
                                        Local5 |= (VMMC << 0x0B)
                                        Local1 = (CICF << 0x08)
                                        If ((CICF == 0x03))
                                        {
                                            CICM = SMYH /* \SMYH */
                                        }
                                        ElseIf ((CICF == 0x0B))
                                        {
                                            CICM = SMMC /* \SMMC */
                                        }
                                        Else
                                        {
                                            CICM = 0x0F
                                        }

                                        Local1 |= (CICM << 0x0C)
                                        Local1 |= (Local5 << 0x10)
                                        Local1 |= 0x01
                                    }
                                    Case (0x02)
                                    {
                                        Local5 = VSTD /* \VSTD */
                                        Local5 |= (VFBC << 0x02)
                                        Local5 |= (VMYH << 0x03)
                                        Local5 |= (VSTP << 0x04)
                                        Local5 |= (VAPM << 0x05)
                                        Local5 |= (VAQM << 0x06)
                                        Local5 |= (VAAA << 0x0A)
                                        Local5 |= (VMMC << 0x0B)
                                        Local1 = (CICF << 0x08)
                                        If ((CICF == 0x03))
                                        {
                                            CICM = SMYH /* \SMYH */
                                        }
                                        ElseIf ((CICF == 0x0B))
                                        {
                                            CICM = SMMC /* \SMMC */
                                        }
                                        Else
                                        {
                                            CICM = 0x0F
                                        }

                                        Local1 |= (CICM << 0x0C)
                                        Local1 |= (Local5 << 0x10)
                                        Local1 |= 0x01
                                    }
                                    Case (0x03)
                                    {
                                        Local1 = (FCAP << 0x10)
                                        Local1 |= 0x01
                                    }
                                    Case (0x04)
                                    {
                                        Local1 = (MYHC << 0x10)
                                        Local1 |= 0x01
                                    }
                                    Case (0x06)
                                    {
                                        Local2 = ((Local0 >> 0x09) & 0x0F)
                                        If ((Local2 != 0x01))
                                        {
                                            Local1 = (MMCC << 0x10)
                                        }
                                        Else
                                        {
                                            Local1 = 0x0200
                                        }

                                        Local1 |= 0x01
                                    }
                                    Case (0x07)
                                    {
                                        Local1 = (SMMC << 0x10)
                                        Local1 |= 0x01
                                    }
                                    Case (0x0100)
                                    {
                                        Local1 = 0x10010000
                                        Local1 |= 0x01
                                    }
                                    Case (0x09)
                                    {
                                        If ((((PAID == 0x238D) || (PAID == 0x08D5)) || (PAID == 0x15F5)))
                                        {
                                            NITS = 0x42
                                        }
                                        Else
                                        {
                                            NITS = 0x3E
                                        }

                                        Local1 = (NITS << 0x10)
                                        Local1 |= 0x01
                                    }
                                    Case (0x01FF)
                                    {
                                        SPMO = 0x00
                                        FCMO = 0x00
                                        SMUF = 0x05
                                        If ((LBPR == 0x01))
                                        {
                                            SMUD = SPL6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL6 */
                                        }
                                        ElseIf ((OVLD == 0x01))
                                        {
                                            SMUD = SPL4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL4 */
                                        }
                                        Else
                                        {
                                            SMUD = SPL9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPL9 */
                                        }

                                        ALIB (0x0C, XX11)
                                        SMUF = 0x07
                                        If ((LBPR == 0x01))
                                        {
                                            SMUD = SPP6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP6 */
                                        }
                                        ElseIf ((OVLD == 0x01))
                                        {
                                            SMUD = SPP4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP4 */
                                        }
                                        Else
                                        {
                                            SMUD = SPP9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPP9 */
                                        }

                                        ALIB (0x0C, XX11)
                                        SMUF = 0x06
                                        If ((LBPR == 0x01))
                                        {
                                            SMUD = FPP6 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP6 */
                                        }
                                        ElseIf ((OVLD == 0x01))
                                        {
                                            SMUD = FPP4 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP4 */
                                        }
                                        Else
                                        {
                                            SMUD = FPP9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.FPP9 */
                                        }

                                        ALIB (0x0C, XX11)
                                        SMUF = 0x0B
                                        SMUD = TDC9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TDC9 */
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x0C
                                        SMUD = EDC9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.EDC9 */
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x08
                                        SMUD = SPT9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.SPT9 */
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x01
                                        SMUD = STC9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.STC9 */
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x03
                                        SMUD = TCL9 /* \_SB_.PCI0.LPC0.EC0_.VPC0.TCL9 */
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x20
                                        SMUD = 0x199A
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x22
                                        SMUD = 0x2E00
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x24
                                        SMUD = 0x0148
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x25
                                        SMUD = 0x2666
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x26
                                        SMUD = 0x0145
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x27
                                        SMUD = 0x043D
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x2C
                                        SMUD = 0xC003
                                        ALIB (0x0C, XX11)
                                        SMUF = 0x2E
                                        SMUD = 0x4650
                                        ALIB (0x0C, XX11)
                                        VFBC = 0x00
                                        VMYH = 0x00
                                        VSTP = 0x00
                                        VAPM = 0x00
                                        VAQM = 0x00
                                        VAAA = 0x00
                                        VMMC = 0x00
                                        SMYH = 0x00
                                        SMMC = 0x00
                                        CICF = 0x00
                                        CICM = 0x0F
                                        Local5 = VSTD /* \VSTD */
                                        Local5 |= (VFBC << 0x02)
                                        Local5 |= (VMYH << 0x03)
                                        Local5 |= (VSTP << 0x04)
                                        Local5 |= (VAPM << 0x05)
                                        Local5 |= (VAQM << 0x06)
                                        Local5 |= (VAAA << 0x0A)
                                        Local5 |= (VMMC << 0x0B)
                                        Local1 = (CICF << 0x08)
                                        Local1 |= (CICM << 0x0C)
                                        Local1 |= (Local5 << 0x10)
                                        Local1 |= 0x01
                                    }
                                    Default
                                    {
                                        Local1 = 0x04
                                    }

                                }

                                Return (Local1)
                            }

                            Scope (^^EC0)
                            {
                                Device (ITSD)
                                {
                                    Name (_HID, "IDEA2004")  // _HID: Hardware ID
                                    Method (_STA, 0, NotSerialized)  // _STA: Status
                                    {
                                        Return (0x0F)
                                    }
                                }
                            }
                        }
                    }

                    Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                    {
                        If ((Arg0 == 0x03))
                        {
                            ECAV = Arg1
                        }

                        If (((Arg0 == 0x03) && (Arg1 == 0x01)))
                        {
                            If ((TPOS == 0x40))
                            {
                                Local0 = 0x01
                            }

                            If ((TPOS == 0x80))
                            {
                                Local0 = 0x02
                            }

                            If ((TPOS == 0x50))
                            {
                                Local0 = 0x03
                            }

                            If ((TPOS == 0x60))
                            {
                                Local0 = 0x04
                            }

                            If ((TPOS == 0x61))
                            {
                                Local0 = 0x05
                            }

                            If ((TPOS == 0x70))
                            {
                                Local0 = 0x06
                            }

                            If ((Acquire (LFCM, 0xA000) == 0x00))
                            {
                                OSTY = Local0
                                Release (LFCM)
                            }
                        }

                        If ((SPMO == 0x01))
                        {
                            SMUF = 0x05
                            If ((PSYS == 0x01))
                            {
                                SMUD = SPL5 /* \_SB_.PCI0.LPC0.EC0_.SPL5 */
                            }
                            ElseIf ((LBPR == 0x01))
                            {
                                SMUD = SPL6 /* \_SB_.PCI0.LPC0.EC0_.SPL6 */
                            }
                            ElseIf ((OVLD == 0x01))
                            {
                                SMUD = SPL4 /* \_SB_.PCI0.LPC0.EC0_.SPL4 */
                            }
                            Else
                            {
                                SMUD = SPL2 /* \_SB_.PCI0.LPC0.EC0_.SPL2 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x07
                            If ((PSYS == 0x01))
                            {
                                SMUD = SPP5 /* \_SB_.PCI0.LPC0.EC0_.SPP5 */
                            }
                            ElseIf ((LBPR == 0x01))
                            {
                                SMUD = SPP6 /* \_SB_.PCI0.LPC0.EC0_.SPP6 */
                            }
                            ElseIf ((OVLD == 0x01))
                            {
                                SMUD = SPP4 /* \_SB_.PCI0.LPC0.EC0_.SPP4 */
                            }
                            Else
                            {
                                SMUD = SPP2 /* \_SB_.PCI0.LPC0.EC0_.SPP2 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x06
                            If ((PSYS == 0x01))
                            {
                                SMUD = FPP5 /* \_SB_.PCI0.LPC0.EC0_.FPP5 */
                            }
                            ElseIf ((LBPR == 0x01))
                            {
                                SMUD = FPP6 /* \_SB_.PCI0.LPC0.EC0_.FPP6 */
                            }
                            ElseIf ((OVLD == 0x01))
                            {
                                SMUD = FPP4 /* \_SB_.PCI0.LPC0.EC0_.FPP4 */
                            }
                            Else
                            {
                                SMUD = FPP2 /* \_SB_.PCI0.LPC0.EC0_.FPP2 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x0B
                            SMUD = TDC2 /* \_SB_.PCI0.LPC0.EC0_.TDC2 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x0C
                            SMUD = EDC2 /* \_SB_.PCI0.LPC0.EC0_.EDC2 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x08
                            SMUD = SPT2 /* \_SB_.PCI0.LPC0.EC0_.SPT2 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x01
                            SMUD = STC2 /* \_SB_.PCI0.LPC0.EC0_.STC2 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x03
                            SMUD = TCL2 /* \_SB_.PCI0.LPC0.EC0_.TCL2 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x20
                            SMUD = 0x199A
                            ALIB (0x0C, XX11)
                            SMUF = 0x22
                            SMUD = 0x4000
                            ALIB (0x0C, XX11)
                            SMUF = 0x24
                            SMUD = 0x0148
                            ALIB (0x0C, XX11)
                            SMUF = 0x25
                            SMUD = 0x2666
                            ALIB (0x0C, XX11)
                            SMUF = 0x26
                            SMUD = 0x01EF
                            ALIB (0x0C, XX11)
                            SMUF = 0x27
                            SMUD = 0x0430
                            ALIB (0x0C, XX11)
                            SMUF = 0x2C
                            SMUD = 0xB06D
                            ALIB (0x0C, XX11)
                            SMUF = 0x2E
                            SMUD = 0x61A8
                            ALIB (0x0C, XX11)
                        }
                        ElseIf ((SPMO == 0x02))
                        {
                            SMUF = 0x05
                            SMUD = SPL3 /* \_SB_.PCI0.LPC0.EC0_.SPL3 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x07
                            SMUD = SPP3 /* \_SB_.PCI0.LPC0.EC0_.SPP3 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x06
                            SMUD = FPP3 /* \_SB_.PCI0.LPC0.EC0_.FPP3 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x0B
                            SMUD = TDC3 /* \_SB_.PCI0.LPC0.EC0_.TDC3 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x0C
                            SMUD = EDC3 /* \_SB_.PCI0.LPC0.EC0_.EDC3 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x08
                            SMUD = SPT3 /* \_SB_.PCI0.LPC0.EC0_.SPT3 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x01
                            SMUD = STC3 /* \_SB_.PCI0.LPC0.EC0_.STC3 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x03
                            SMUD = TCL3 /* \_SB_.PCI0.LPC0.EC0_.TCL3 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x20
                            SMUD = 0x199A
                            ALIB (0x0C, XX11)
                            SMUF = 0x22
                            SMUD = 0x2C00
                            ALIB (0x0C, XX11)
                            SMUF = 0x24
                            SMUD = 0x0148
                            ALIB (0x0C, XX11)
                            SMUF = 0x25
                            SMUD = 0x2666
                            ALIB (0x0C, XX11)
                            SMUF = 0x26
                            SMUD = 0x011C
                            ALIB (0x0C, XX11)
                            SMUF = 0x27
                            SMUD = 0x040B
                            ALIB (0x0C, XX11)
                            SMUF = 0x2C
                            SMUD = 0xC936
                            ALIB (0x0C, XX11)
                            SMUF = 0x2E
                            SMUD = 0x2EE0
                            ALIB (0x0C, XX11)
                        }
                        Else
                        {
                            SMUF = 0x05
                            If ((LBPR == 0x01))
                            {
                                SMUD = SPL6 /* \_SB_.PCI0.LPC0.EC0_.SPL6 */
                            }
                            ElseIf ((OVLD == 0x01))
                            {
                                SMUD = SPL4 /* \_SB_.PCI0.LPC0.EC0_.SPL4 */
                            }
                            Else
                            {
                                SMUD = SPL9 /* \_SB_.PCI0.LPC0.EC0_.SPL9 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x07
                            If ((LBPR == 0x01))
                            {
                                SMUD = SPP6 /* \_SB_.PCI0.LPC0.EC0_.SPP6 */
                            }
                            ElseIf ((OVLD == 0x01))
                            {
                                SMUD = SPP4 /* \_SB_.PCI0.LPC0.EC0_.SPP4 */
                            }
                            Else
                            {
                                SMUD = SPP9 /* \_SB_.PCI0.LPC0.EC0_.SPP9 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x06
                            If ((LBPR == 0x01))
                            {
                                SMUD = FPP6 /* \_SB_.PCI0.LPC0.EC0_.FPP6 */
                            }
                            ElseIf ((OVLD == 0x01))
                            {
                                SMUD = FPP4 /* \_SB_.PCI0.LPC0.EC0_.FPP4 */
                            }
                            Else
                            {
                                SMUD = FPP9 /* \_SB_.PCI0.LPC0.EC0_.FPP9 */
                            }

                            ALIB (0x0C, XX11)
                            SMUF = 0x0B
                            SMUD = TDC9 /* \_SB_.PCI0.LPC0.EC0_.TDC9 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x0C
                            SMUD = EDC9 /* \_SB_.PCI0.LPC0.EC0_.EDC9 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x08
                            SMUD = SPT9 /* \_SB_.PCI0.LPC0.EC0_.SPT9 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x01
                            SMUD = STC9 /* \_SB_.PCI0.LPC0.EC0_.STC9 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x03
                            SMUD = TCL9 /* \_SB_.PCI0.LPC0.EC0_.TCL9 */
                            ALIB (0x0C, XX11)
                            SMUF = 0x20
                            SMUD = 0x199A
                            ALIB (0x0C, XX11)
                            SMUF = 0x22
                            SMUD = 0x2E00
                            ALIB (0x0C, XX11)
                            SMUF = 0x24
                            SMUD = 0x0148
                            ALIB (0x0C, XX11)
                            SMUF = 0x25
                            SMUD = 0x2666
                            ALIB (0x0C, XX11)
                            SMUF = 0x26
                            SMUD = 0x0145
                            ALIB (0x0C, XX11)
                            SMUF = 0x27
                            SMUD = 0x043D
                            ALIB (0x0C, XX11)
                            SMUF = 0x2C
                            SMUD = 0xC003
                            ALIB (0x0C, XX11)
                            SMUF = 0x2E
                            SMUD = 0x4E20
                            ALIB (0x0C, XX11)
                        }
                    }

                    Method (CMFC, 0, Serialized)
                    {
                        Name (EDXX, Buffer (0x80) {})
                        CreateField (EDXX, 0x00, 0x50, EDI1)
                        CreateField (EDXX, 0x50, 0x10, EDI2)
                        CreateField (EDXX, 0x60, 0x03A0, EDI3)
                        EDI1 = HEAD /* \HEAD */
                        EDI2 = PAID /* \PAID */
                        EDI3 = REST /* \REST */
                        Return (EDXX) /* \_SB_.PCI0.LPC0.EC0_.CMFC.EDXX */
                    }

                    Method (LFCI, 2, Serialized)
                    {
                        Return (OKRB) /* \OKRB */
                    }

                    Method (_Q11, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((^^^GP17.VGA.BRIL == 0x00))
                        {
                            BKLT = 0x01
                        }

                        P80H = 0x11
                        Notify (^^^GP17.VGA.LCD, 0x87) // Device-Specific
                        Notify (VPC0, 0x80) // Status Change
                    }

                    Method (_Q12, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        If ((BKLT == 0x01))
                        {
                            BKLT = 0x00
                        }
                        Else
                        {
                            P80H = 0x12
                            Notify (^^^GP17.VGA.LCD, 0x86) // Device-Specific
                            Notify (VPC0, 0x80) // Status Change
                        }
                    }

                    Method (_Q15, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x15
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == 0x00))
                            {
                                Release (LFCM)
                            }
                        }

                        Notify (LID, 0x80) // Status Change
                    }

                    Method (_Q16, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x16
                        If (ECAV)
                        {
                            If ((Acquire (LFCM, 0xA000) == 0x00))
                            {
                                Release (LFCM)
                            }
                        }

                        Notify (LID, 0x80) // Status Change
                    }

                    Method (_Q25, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x25
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                        Notify (BAT0, 0x81) // Information Change
                    }

                    Method (_Q37, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x37
                        Sleep (0x012C)
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q38, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x38
                        Sleep (0x012C)
                        Notify (ADP0, 0x80) // Status Change
                        Notify (BAT0, 0x80) // Status Change
                    }

                    Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x32
                        Notify (PWRB, 0x80) // Status Change
                    }

                    Method (_Q44, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x44
                        Notify (VPC0, 0x80) // Status Change
                    }

                    Method (_Q48, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x48
                        Notify (WMIL, 0xD0) // Hardware-Specific
                    }

                    Method (_Q86, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x86
                        Sleep (0x05)
                        ^VPC0.DYTC (0x001F4001)
                    }

                    Method (_Q87, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x87
                        Sleep (0x05)
                        ^VPC0.DYTC (0x000F4001)
                    }

                    Method (_Q79, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x79
                        ^VPC0.DYTC (0x001F0001)
                    }

                    Method (_Q80, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x80
                        ^VPC0.DYTC (0x001F0001)
                    }

                    Method (_Q81, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x81
                        ^VPC0.DYTC (0x001F0001)
                    }

                    Method (_Q82, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0x82
                        If ((Acquire (LFCM, 0xA000) == 0x00))
                        {
                            CreateWordField (XX11, 0x00, SSZF)
                            CreateByteField (XX11, 0x02, SMUF)
                            CreateDWordField (XX11, 0x03, SMUD)
                            SSZF = 0x07
                            SMUF = 0x05
                            SMUD = 0x2710
                            ALIB (0x0C, XX11)
                            SMUF = 0x07
                            SMUD = 0x2710
                            ALIB (0x0C, XX11)
                            SMUF = 0x06
                            SMUD = 0x2710
                            ALIB (0x0C, XX11)
                            Release (LFCM)
                        }
                    }

                    Method (_Q66, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        SMBA = 0xCC
                    }

                    Method (_Q67, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        SMBA = 0xCD
                    }

                    Scope (\)
                    {
                        Name (LSKD, 0x00)
                    }

                    Method (_QDF, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
                    {
                        P80H = 0xDF
                        If ((Acquire (LFCM, 0xA000) == 0x00))
                        {
                            If ((LSKV != 0x00))
                            {
                                If ((LSKV < 0x06))
                                {
                                    LSKD = LSKV /* \_SB_.PCI0.LPC0.EC0_.LSKV */
                                }

                                If ((LSKV == 0x04))
                                {
                                    If ((HKDB == 0x01))
                                    {
                                        ^^^SMB.GP62 = 0xA4
                                    }
                                    Else
                                    {
                                        ^^^SMB.GP62 = 0xC5
                                    }
                                }

                                LSKV = 0x00
                            }

                            Release (LFCM)
                        }

                        Notify (WMIU, 0xD0) // Hardware-Specific
                    }
                }

                Scope (\_SB)
                {
                    Device (ADP0)
                    {
                        Name (_HID, "ACPI0003" /* Power Source Device */)  // _HID: Hardware ID
                        Name (XX00, Buffer (0x03) {})
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((ECON == 0x01))
                            {
                                Return (0x0F)
                            }

                            Return (0x00)
                        }

                        Name (ACDC, 0xFF)
                        Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
                        {
                            If (^^PCI0.LPC0.EC0.ECAV)
                            {
                                If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == 0x00))
                                {
                                    Local0 = 0x01
                                    Local0 = ^^PCI0.LPC0.EC0.ADPT /* \_SB_.PCI0.LPC0.EC0_.ADPT */
                                    CreateWordField (XX00, 0x00, SSZE)
                                    CreateByteField (XX00, 0x02, ACST)
                                    SSZE = 0x03
                                    If ((Local0 != ACDC))
                                    {
                                        If (Local0)
                                        {
                                            P80H = 0xECAC
                                            ^^PCI0.GP17.VGA.AFN4 (0x01)
                                            ACST = 0x00
                                        }
                                        Else
                                        {
                                            P80H = 0xECDC
                                            ^^PCI0.GP17.VGA.AFN4 (0x02)
                                            ACST = 0x01
                                        }

                                        ALIB (0x01, XX00)
                                        ACDC = Local0
                                    }

                                    Release (^^PCI0.LPC0.EC0.LFCM)
                                    Return (Local0)
                                }
                            }
                        }

                        Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
                        {
                            Return (Package (0x01)
                            {
                                _SB
                            })
                        }
                    }

                    Device (LID)
                    {
                        Name (_HID, EisaId ("PNP0C0D") /* Lid Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((ECON == 0x01))
                            {
                                Return (0x0F)
                            }

                            Return (0x00)
                        }

                        Method (_LID, 0, NotSerialized)  // _LID: Lid Status
                        {
                            Local0 = 0x00
                            If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == 0x00))
                            {
                                Local0 = ^^PCI0.LPC0.EC0.LSTE /* \_SB_.PCI0.LPC0.EC0_.LSTE */
                                Release (^^PCI0.LPC0.EC0.LFCM)
                            }

                            Return (Local0)
                        }
                    }

                    Device (PWRB)
                    {
                        Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            If ((ECON == 0x01))
                            {
                                Return (0x0F)
                            }

                            Return (0x00)
                        }
                    }

                    Device (WMI4)
                    {
                        Name (_HID, EisaId ("PNP0C14") /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Mutex (MWMI, 0x00)
                        Name (_WDG, Buffer (0x28)
                        {
                            /* 0000 */  0x76, 0x37, 0xA0, 0xC3, 0xAC, 0x51, 0xAA, 0x49,  // v7...Q.I
                            /* 0008 */  0xAD, 0x0F, 0xF2, 0xF7, 0xD6, 0x2C, 0x3F, 0x3C,  // .....,?<
                            /* 0010 */  0x41, 0x44, 0x03, 0x05, 0x21, 0x12, 0x90, 0x05,  // AD..!...
                            /* 0018 */  0x66, 0xD5, 0xD1, 0x11, 0xB2, 0xF0, 0x00, 0xA0,  // f.......
                            /* 0020 */  0xC9, 0x06, 0x29, 0x10, 0x42, 0x44, 0x01, 0x00   // ..).BD..
                        })
                        Name (ITEM, Package (0x03)
                        {
                            Package (0x03)
                            {
                                0x00, 
                                0x00, 
                                "BAT0 BatMaker"
                            }, 

                            Package (0x03)
                            {
                                0x00, 
                                0x01, 
                                "BAT0 HwId "
                            }, 

                            Package (0x03)
                            {
                                0x00, 
                                0x02, 
                                "BAT0 MfgDate "
                            }
                        })
                        Method (WQAD, 1, NotSerialized)
                        {
                            If (^^PCI0.LPC0.EC0.ECAV)
                            {
                                If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == 0x00))
                                {
                                    Local0 = PSAG (Arg0)
                                    Local1 = DerefOf (ITEM [Local0])
                                    Local2 = DerefOf (Local1 [0x00])
                                    Local3 = DerefOf (Local1 [0x01])
                                    Local4 = DerefOf (Local1 [0x02])
                                    Local5 = BATD (Local2, Local3)
                                    Concatenate (Local4, ",", Local6)
                                    Concatenate (Local6, Local5, Local7)
                                    Release (^^PCI0.LPC0.EC0.LFCM)
                                }
                            }

                            Return (Local7)
                        }

                        Method (PSAG, 1, NotSerialized)
                        {
                            Return (Arg0)
                        }

                        Method (BATD, 2, NotSerialized)
                        {
                            Name (STRB, Buffer (0x0A)
                            {
                                 0x00                                             // .
                            })
                            Name (BUFR, Buffer (0x08) {})
                            BUFR = ^^PCI0.LPC0.EC0.FWBT /* \_SB_.PCI0.LPC0.EC0_.FWBT */
                            CreateWordField (BUFR, 0x00, MID0)
                            CreateWordField (BUFR, 0x02, HID0)
                            CreateWordField (BUFR, 0x04, FIR0)
                            CreateWordField (BUFR, 0x06, DAT0)
                            If ((Arg0 == 0x00))
                            {
                                If ((Arg1 == 0x00))
                                {
                                    STRB = ToHexString (MID0)
                                }

                                If ((Arg1 == 0x01))
                                {
                                    STRB = ToHexString (HID0)
                                }

                                If ((Arg1 == 0x02))
                                {
                                    Local0 = ^^PCI0.LPC0.EC0.B1DA /* \_SB_.PCI0.LPC0.EC0_.B1DA */
                                    Name (DATB, Buffer (0x09)
                                    {
                                        "00000000"
                                    })
                                    Local3 = 0x07
                                    Local1 = (Local0 & 0x1F)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    Local3 = 0x05
                                    Local1 = ((Local0 & 0x01E0) >> 0x05)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    Local3 = 0x03
                                    Local1 = (((Local0 & 0xFE00) >> 0x09) + 0x07BC)
                                    While (Local1)
                                    {
                                        Divide (Local1, 0x0A, Local2, Local1)
                                        DATB [Local3] = (Local2 + 0x30)
                                        Local3--
                                    }

                                    STRB = DATB /* \_SB_.WMI4.BATD.DATB */
                                }
                            }

                            Return (ToString (STRB, Ones))
                        }

                        Name (WQBD, Buffer (0x0275)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0x65, 0x02, 0x00, 0x00, 0xF8, 0x05, 0x00, 0x00,  // e.......
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0x18, 0xD1, 0x82, 0x00, 0x01, 0x06, 0x18, 0x42,  // .......B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x0D, 0x21, 0x02, 0x0B,  // .....!..
                            /* 0028 */  0x83, 0x50, 0x50, 0x18, 0x14, 0xA0, 0x45, 0x41,  // .PP...EA
                            /* 0030 */  0xC8, 0x05, 0x14, 0x95, 0x02, 0x21, 0xC3, 0x02,  // .....!..
                            /* 0038 */  0x14, 0x0B, 0x70, 0x2E, 0x40, 0xBA, 0x00, 0xE5,  // ..p.@...
                            /* 0040 */  0x28, 0x72, 0x0C, 0x22, 0x02, 0xF7, 0xEF, 0x0F,  // (r."....
                            /* 0048 */  0x31, 0xD0, 0x18, 0xA8, 0x50, 0x08, 0x89, 0x00,  // 1...P...
                            /* 0050 */  0xA6, 0x42, 0xE0, 0x08, 0x41, 0xBF, 0x02, 0x10,  // .B..A...
                            /* 0058 */  0x3A, 0x14, 0x20, 0x53, 0x80, 0x41, 0x01, 0x4E,  // :. S.A.N
                            /* 0060 */  0x11, 0x44, 0x10, 0xA5, 0x65, 0x01, 0xBA, 0x05,  // .D..e...
                            /* 0068 */  0xF8, 0x16, 0xA0, 0x1D, 0x42, 0x68, 0x91, 0x9A,  // ....Bh..
                            /* 0070 */  0x9F, 0x04, 0x81, 0x6A, 0x5B, 0x80, 0x45, 0x01,  // ...j[.E.
                            /* 0078 */  0xB2, 0x41, 0x08, 0xA0, 0xC7, 0xC1, 0x44, 0x0E,  // .A....D.
                            /* 0080 */  0x02, 0x25, 0x66, 0x10, 0x28, 0x9D, 0x73, 0x90,  // .%f.(.s.
                            /* 0088 */  0x4D, 0x60, 0xE1, 0x9F, 0x4C, 0x94, 0xF3, 0x88,  // M`..L...
                            /* 0090 */  0x92, 0xE0, 0xA8, 0x0E, 0x22, 0x42, 0xF0, 0x72,  // ...."B.r
                            /* 0098 */  0x05, 0x48, 0x9E, 0x80, 0x34, 0x4F, 0x4C, 0xD6,  // .H..4OL.
                            /* 00A0 */  0x07, 0xA1, 0x21, 0xB0, 0x11, 0xF0, 0x88, 0x12,  // ..!.....
                            /* 00A8 */  0x40, 0x58, 0xA0, 0x75, 0x2A, 0x14, 0x0C, 0xCA,  // @X.u*...
                            /* 00B0 */  0x03, 0x88, 0xE4, 0x8C, 0x15, 0x05, 0x6C, 0xAF,  // ......l.
                            /* 00B8 */  0x13, 0x91, 0xC9, 0x81, 0x52, 0x49, 0x70, 0xA8,  // ....RIp.
                            /* 00C0 */  0x61, 0x5A, 0xE2, 0xEC, 0x34, 0xB2, 0x13, 0x39,  // aZ..4..9
                            /* 00C8 */  0xB6, 0xA6, 0x87, 0x2C, 0x48, 0x26, 0x6D, 0x28,  // ...,H&m(
                            /* 00D0 */  0xA8, 0xB1, 0x7B, 0x5A, 0x27, 0xE5, 0x99, 0x46,  // ..{Z'..F
                            /* 00D8 */  0x3C, 0x28, 0xC3, 0x24, 0xF0, 0x28, 0x18, 0x1A,  // <(.$.(..
                            /* 00E0 */  0x27, 0x28, 0x0B, 0x42, 0x0E, 0x06, 0x8A, 0x02,  // '(.B....
                            /* 00E8 */  0x3C, 0x09, 0xCF, 0xB1, 0x78, 0x01, 0xC2, 0x67,  // <...x..g
                            /* 00F0 */  0x4C, 0xA6, 0x1D, 0x23, 0x81, 0xCF, 0x04, 0x1E,  // L..#....
                            /* 00F8 */  0xE6, 0x31, 0x63, 0x47, 0x14, 0x2E, 0xE0, 0xF9,  // .1cG....
                            /* 0100 */  0x1C, 0x43, 0xE4, 0xB8, 0x87, 0x1A, 0xE3, 0x28,  // .C.....(
                            /* 0108 */  0x22, 0x3F, 0x08, 0x60, 0x05, 0x1D, 0x04, 0x90,  // "?.`....
                            /* 0110 */  0x38, 0xFF, 0xFF, 0xE3, 0x89, 0x76, 0xDA, 0xC1,  // 8....v..
                            /* 0118 */  0x42, 0xC7, 0x39, 0xBF, 0xD0, 0x18, 0xD1, 0xE3,  // B.9.....
                            /* 0120 */  0x40, 0xC9, 0x80, 0x90, 0x47, 0x01, 0x56, 0x61,  // @...G.Va
                            /* 0128 */  0x35, 0x91, 0x04, 0xBE, 0x07, 0x74, 0x76, 0x12,  // 5....tv.
                            /* 0130 */  0xD0, 0xA5, 0x21, 0x46, 0x6F, 0x08, 0xD2, 0x26,  // ..!Fo..&
                            /* 0138 */  0xC0, 0x96, 0x00, 0x6B, 0x02, 0x8C, 0xDD, 0x06,  // ...k....
                            /* 0140 */  0x08, 0xCA, 0xD1, 0x36, 0x87, 0x22, 0x84, 0x28,  // ...6.".(
                            /* 0148 */  0x21, 0xE2, 0x86, 0xAC, 0x11, 0x45, 0x10, 0x95,  // !....E..
                            /* 0150 */  0x41, 0x08, 0x35, 0x50, 0xD8, 0x28, 0xF1, 0x8D,  // A.5P.(..
                            /* 0158 */  0x13, 0x22, 0x48, 0x02, 0x8F, 0x1C, 0x77, 0x04,  // ."H...w.
                            /* 0160 */  0xF0, 0xD8, 0x0E, 0xE8, 0x04, 0x4F, 0xE9, 0x71,  // .....O.q
                            /* 0168 */  0xC1, 0x04, 0x9E, 0xF7, 0xC1, 0x1D, 0xEA, 0x21,  // .......!
                            /* 0170 */  0x1C, 0x70, 0xD4, 0x18, 0xC7, 0xF1, 0x4C, 0x40,  // .p....L@
                            /* 0178 */  0x16, 0x2E, 0x0D, 0x20, 0x8A, 0x04, 0x8F, 0x3A,  // ... ...:
                            /* 0180 */  0x32, 0xF8, 0x70, 0xE0, 0x41, 0x7A, 0x9E, 0x9E,  // 2.p.Az..
                            /* 0188 */  0x40, 0x90, 0x43, 0x38, 0x82, 0xC7, 0x86, 0xA7,  // @.C8....
                            /* 0190 */  0x02, 0x8F, 0x81, 0x5D, 0x17, 0x7C, 0x0E, 0xF0,  // ...].|..
                            /* 0198 */  0x31, 0x01, 0xEF, 0x1A, 0x50, 0xA3, 0x7E, 0x3A,  // 1...P.~:
                            /* 01A0 */  0x60, 0x93, 0x0E, 0x87, 0x19, 0xAE, 0x87, 0x1D,  // `.......
                            /* 01A8 */  0xEE, 0x04, 0x1E, 0x0E, 0x1E, 0x33, 0xF8, 0x91,  // .....3..
                            /* 01B0 */  0xC3, 0x83, 0xC3, 0xCD, 0xF0, 0x64, 0x8E, 0xAC,  // .....d..
                            /* 01B8 */  0x54, 0x01, 0x66, 0x4F, 0x08, 0x3A, 0x4D, 0xF8,  // T.fO.:M.
                            /* 01C0 */  0xCC, 0xC1, 0x6E, 0x00, 0xE7, 0xD3, 0x33, 0x24,  // ..n...3$
                            /* 01C8 */  0x91, 0x3F, 0x08, 0xD4, 0xC8, 0x0C, 0xED, 0x69,  // .?.....i
                            /* 01D0 */  0xBF, 0x7A, 0x18, 0xF2, 0xA1, 0xE0, 0xB0, 0x98,  // .z......
                            /* 01D8 */  0xD8, 0xB3, 0x07, 0x1D, 0x0F, 0xF8, 0xAF, 0x24,  // .......$
                            /* 01E0 */  0x0F, 0x1B, 0x9E, 0xBE, 0xE7, 0x6B, 0x82, 0x91,  // .....k..
                            /* 01E8 */  0x07, 0x8E, 0x1E, 0x88, 0xA1, 0x9F, 0x38, 0x0E,  // ......8.
                            /* 01F0 */  0xE3, 0x34, 0x7C, 0x09, 0xF1, 0x39, 0xE0, 0xFF,  // .4|..9..
                            /* 01F8 */  0x1F, 0x24, 0xC6, 0x31, 0x79, 0x70, 0x3C, 0xD8,  // .$.1yp<.
                            /* 0200 */  0xC8, 0xE9, 0x51, 0xC5, 0x47, 0x0A, 0x7E, 0xBE,  // ..Q.G.~.
                            /* 0208 */  0xF0, 0x91, 0x82, 0x5D, 0x10, 0x9E, 0x1C, 0x0C,  // ...]....
                            /* 0210 */  0x71, 0x38, 0x67, 0xE5, 0x13, 0x85, 0x0F, 0x2A,  // q8g....*
                            /* 0218 */  0xB8, 0x13, 0x05, 0x5C, 0x85, 0xE8, 0xE4, 0x36,  // ...\...6
                            /* 0220 */  0x61, 0xB4, 0x67, 0x81, 0xC7, 0x09, 0x98, 0x07,  // a.g.....
                            /* 0228 */  0x01, 0xF0, 0x8D, 0xDF, 0x07, 0x19, 0xB0, 0x4D,  // .......M
                            /* 0230 */  0x09, 0x3B, 0x24, 0x78, 0x47, 0x19, 0xE0, 0x71,  // .;$xG..q
                            /* 0238 */  0x32, 0xC1, 0x1D, 0x27, 0x3C, 0x04, 0x3E, 0x80,  // 2..'<.>.
                            /* 0240 */  0x87, 0x90, 0x93, 0xB4, 0xD2, 0xA9, 0x21, 0xCF,  // ......!.
                            /* 0248 */  0x3C, 0x60, 0x1B, 0x06, 0x57, 0x68, 0xD3, 0xA7,  // <`..Wh..
                            /* 0250 */  0x46, 0xA3, 0x56, 0x0D, 0xCA, 0xD4, 0x28, 0xD3,  // F.V...(.
                            /* 0258 */  0xA0, 0x56, 0x9F, 0x4A, 0x8D, 0x19, 0xFB, 0xE1,  // .V.J....
                            /* 0260 */  0x58, 0xDC, 0xBB, 0x40, 0x07, 0x03, 0x0B, 0x7B,  // X..@...{
                            /* 0268 */  0x21, 0xE8, 0x88, 0xE0, 0x58, 0x20, 0x34, 0x08,  // !...X 4.
                            /* 0270 */  0x9D, 0x40, 0xFC, 0xFF, 0x07                     // .@...
                        })
                    }

                    Device (WMIL)
                    {
                        Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, "LSK")  // _UID: Unique ID
                        Name (_WDG, Buffer (0x3C)
                        {
                            /* 0000 */  0xB9, 0xEC, 0x18, 0x7F, 0xE6, 0xED, 0x4F, 0x4A,  // ......OJ
                            /* 0008 */  0xA7, 0xCA, 0xB8, 0xDC, 0xF1, 0x5F, 0xA1, 0xD3,  // ....._..
                            /* 0010 */  0x53, 0x4B, 0x01, 0x02, 0x73, 0x9C, 0x64, 0x1F,  // SK..s.d.
                            /* 0018 */  0xC5, 0xD9, 0x5A, 0x47, 0xA8, 0xC9, 0x34, 0x73,  // ..ZG..4s
                            /* 0020 */  0x06, 0xCD, 0x33, 0x29, 0xD0, 0x00, 0x01, 0x08,  // ..3)....
                            /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                            /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                            /* 0038 */  0x44, 0x46, 0x01, 0x00                           // DF..
                        })
                        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                        {
                            If ((Arg0 == 0xD0))
                            {
                                Return (0x01)
                            }
                        }

                        Name (WQDF, Buffer (0x04D4)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0xC4, 0x04, 0x00, 0x00, 0xA8, 0x12, 0x00, 0x00,  // ........
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0x28, 0x43, 0x89, 0x00, 0x01, 0x06, 0x18, 0x42,  // (C.....B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x28, 0x81, 0x42, 0x04,  // ....(.B.
                            /* 0028 */  0x0A, 0x40, 0xA4, 0x50, 0x30, 0x28, 0x0D, 0x20,  // .@.P0(. 
                            /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                            /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                            /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                            /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                            /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                            /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                            /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                            /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                            /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                            /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                            /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                            /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x32,  // .....9(2
                            /* 0090 */  0x87, 0xD0, 0x18, 0x31, 0x63, 0x22, 0xB0, 0x9D,  // ...1c"..
                            /* 0098 */  0x63, 0x6B, 0x14, 0xA7, 0x51, 0xB8, 0x00, 0xE9,  // ck..Q...
                            /* 00A0 */  0x18, 0x1A, 0xC1, 0x71, 0x1D, 0x83, 0xC1, 0x82,  // ...q....
                            /* 00A8 */  0x1C, 0x8A, 0x21, 0x0A, 0x1A, 0x82, 0xAC, 0x0E,  // ..!.....
                            /* 00B0 */  0x47, 0x16, 0x05, 0x28, 0x85, 0x91, 0x4B, 0x34,  // G..(..K4
                            /* 00B8 */  0x0D, 0x30, 0xC8, 0x21, 0x19, 0xDE, 0x08, 0x61,  // .0.!...a
                            /* 00C0 */  0xA2, 0x05, 0x0D, 0xEC, 0x01, 0x24, 0xF0, 0x80,  // .....$..
                            /* 00C8 */  0x8E, 0x04, 0x23, 0x03, 0x42, 0x9E, 0x05, 0x58,  // ..#.B..X
                            /* 00D0 */  0x1F, 0x22, 0x21, 0xB0, 0x7B, 0x01, 0xC6, 0x04,  // ."!.{...
                            /* 00D8 */  0x68, 0x14, 0xA0, 0x6D, 0x52, 0x1A, 0x54, 0x87,  // h..mR.T.
                            /* 00E0 */  0x02, 0xBC, 0x09, 0x70, 0x26, 0xC0, 0xD6, 0x88,  // ...p&...
                            /* 00E8 */  0x04, 0x63, 0x6B, 0x28, 0xC2, 0x8A, 0x14, 0xA4,  // .ck(....
                            /* 00F0 */  0x41, 0x14, 0x41, 0x14, 0x07, 0x25, 0xB0, 0x28,  // A.A..%.(
                            /* 00F8 */  0x11, 0x63, 0x19, 0xE3, 0x04, 0x63, 0x47, 0x0A,  // .c...cG.
                            /* 0100 */  0x1B, 0x25, 0x42, 0x65, 0x68, 0xB2, 0x3F, 0x08,  // .%Beh.?.
                            /* 0108 */  0x22, 0xCA, 0xC1, 0x81, 0x80, 0x45, 0x1A, 0x0D,  // "....E..
                            /* 0110 */  0xEA, 0x10, 0x90, 0xE0, 0xA1, 0xC0, 0x07, 0x82,  // ........
                            /* 0118 */  0x93, 0x3A, 0xAF, 0xA3, 0x3A, 0xE9, 0x20, 0x27,  // .:..:. '
                            /* 0120 */  0x7A, 0x60, 0x75, 0x9E, 0x06, 0xC8, 0xB8, 0xD9,  // z`u.....
                            /* 0128 */  0xD4, 0xCC, 0xAE, 0xE3, 0x01, 0x04, 0xD7, 0xF3,  // ........
                            /* 0130 */  0x24, 0x04, 0xFF, 0xFF, 0xA7, 0x02, 0x0F, 0x33,  // $......3
                            /* 0138 */  0x1C, 0x66, 0x88, 0x1E, 0xAC, 0x27, 0x70, 0x88,  // .f...'p.
                            /* 0140 */  0x0C, 0xD0, 0x93, 0x7A, 0x20, 0xC0, 0xCE, 0xEB,  // ...z ...
                            /* 0148 */  0x64, 0x9E, 0x06, 0x4A, 0x15, 0x60, 0x76, 0xEC,  // d..J.`v.
                            /* 0150 */  0x84, 0xE0, 0x78, 0x7C, 0x0C, 0xF0, 0x7C, 0x4E,  // ..x|..|N
                            /* 0158 */  0x38, 0x81, 0xE5, 0x0F, 0x02, 0x35, 0x32, 0x43,  // 8....52C
                            /* 0160 */  0x7B, 0xA8, 0xA7, 0xF5, 0x36, 0xE0, 0x03, 0x80,  // {...6...
                            /* 0168 */  0x09, 0x2C, 0xF6, 0x2C, 0x41, 0xC7, 0x03, 0x7E,  // .,.,A..~
                            /* 0170 */  0xC5, 0xC7, 0x03, 0x21, 0xBC, 0x32, 0x78, 0xBE,  // ...!.2x.
                            /* 0178 */  0x3E, 0x51, 0xE8, 0x68, 0xA1, 0xF1, 0xE0, 0x4E,  // >Q.h...N
                            /* 0180 */  0x15, 0xBE, 0x20, 0x60, 0xC0, 0x8F, 0xF6, 0x7D,  // .. `...}
                            /* 0188 */  0x21, 0xCC, 0x7B, 0x40, 0xDC, 0x83, 0xB7, 0xD6,  // !.{@....
                            /* 0190 */  0x1B, 0x04, 0x21, 0x70, 0x6C, 0x08, 0x7D, 0x35,  // ..!pl.}5
                            /* 0198 */  0x2C, 0x6A, 0xF0, 0xF4, 0x60, 0xC1, 0xCF, 0x14,  // ,j..`...
                            /* 01A0 */  0x0C, 0x98, 0x8F, 0xE7, 0xB4, 0x7C, 0xF4, 0xF0,  // .....|..
                            /* 01A8 */  0xF0, 0xE0, 0x9F, 0x1B, 0x70, 0x07, 0x0A, 0x60,  // ....p..`
                            /* 01B0 */  0x32, 0x40, 0x7E, 0xA5, 0xC0, 0x8E, 0x1C, 0x7C,  // 2@~....|
                            /* 01B8 */  0x58, 0x81, 0x31, 0xFF, 0x7F, 0x60, 0x0F, 0xDD,  // X.1..`..
                            /* 01C0 */  0x7E, 0x05, 0x20, 0x04, 0x3F, 0xA7, 0x47, 0x83,  // ~. .?.G.
                            /* 01C8 */  0x23, 0x8A, 0x70, 0x58, 0x46, 0x7F, 0x84, 0xE8,  // #.pXF...
                            /* 01D0 */  0x73, 0xE2, 0x82, 0x88, 0x76, 0x58, 0x98, 0x59,  // s...vX.Y
                            /* 01D8 */  0xC5, 0x38, 0x8C, 0x48, 0x31, 0xA2, 0x45, 0xF4,  // .8.H1.E.
                            /* 01E0 */  0x4C, 0x12, 0x14, 0x39, 0x56, 0xF4, 0x20, 0x38,  // L..9V. 8
                            /* 01E8 */  0xDE, 0x39, 0x1C, 0x52, 0xCC, 0xF8, 0xE1, 0xA3,  // .9.R....
                            /* 01F0 */  0x9C, 0xC7, 0x31, 0xF9, 0x94, 0x62, 0x84, 0xB3,  // ..1..b..
                            /* 01F8 */  0x7B, 0x38, 0x79, 0x58, 0xB1, 0xE6, 0x49, 0xE9,  // {8yX..I.
                            /* 0200 */  0xF4, 0x71, 0x5A, 0x0F, 0x21, 0x6C, 0xE4, 0x87,  // .qZ.!l..
                            /* 0208 */  0x80, 0x39, 0x5C, 0x78, 0x08, 0x7C, 0x3E, 0x98,  // .9\x.|>.
                            /* 0210 */  0x89, 0xE1, 0xCE, 0x33, 0xFC, 0x54, 0x82, 0x1D,  // ...3.T..
                            /* 0218 */  0x00, 0x97, 0x66, 0x03, 0x84, 0xC9, 0x7F, 0x1B,  // ..f.....
                            /* 0220 */  0x48, 0xDE, 0x23, 0x81, 0xC2, 0xF8, 0x84, 0x03,  // H.#.....
                            /* 0228 */  0xB8, 0x12, 0x7C, 0x82, 0x00, 0xD1, 0xD9, 0x00,  // ..|.....
                            /* 0230 */  0x36, 0xF8, 0xD1, 0x3F, 0x1A, 0x84, 0x78, 0x7B,  // 6..?..x{
                            /* 0238 */  0x08, 0x7F, 0x30, 0x47, 0xF3, 0x0C, 0xE1, 0x03,  // ..0G....
                            /* 0240 */  0x0E, 0xFF, 0xFF, 0x1F, 0x70, 0x60, 0x9E, 0x69,  // ....p`.i
                            /* 0248 */  0x1E, 0x70, 0x9E, 0x70, 0xDE, 0x6B, 0x8E, 0xE0,  // .p.p.k..
                            /* 0250 */  0x6D, 0xA0, 0xC2, 0x8B, 0x0D, 0x41, 0x39, 0x85,  // m....A9.
                            /* 0258 */  0x10, 0xEF, 0x35, 0x0F, 0x38, 0x9E, 0x43, 0x88,  // ..5.8.C.
                            /* 0260 */  0x80, 0x0F, 0x38, 0x06, 0x0D, 0xF8, 0x8A, 0x63,  // ..8....c
                            /* 0268 */  0xC8, 0xB0, 0x01, 0xC3, 0xC4, 0xF6, 0x39, 0x27,  // ......9'
                            /* 0270 */  0x46, 0xA8, 0x20, 0x6F, 0x38, 0x3E, 0xE0, 0xB0,  // F. o8>..
                            /* 0278 */  0x80, 0xE7, 0x01, 0x1D, 0x44, 0x7C, 0xC0, 0x01,  // ....D|..
                            /* 0280 */  0xF8, 0x71, 0x2E, 0x01, 0x0E, 0x87, 0x05, 0x4E,  // .q.....N
                            /* 0288 */  0xE0, 0x73, 0x09, 0xFC, 0xFF, 0xFF, 0xB9, 0x04,  // .s......
                            /* 0290 */  0x3C, 0x91, 0x4D, 0x1C, 0x09, 0x98, 0x76, 0x0A,  // <.M...v.
                            /* 0298 */  0xD9, 0x58, 0xAD, 0x4F, 0x05, 0x34, 0xD3, 0x8A,  // .X.O.4..
                            /* 02A0 */  0xE5, 0x11, 0x57, 0x98, 0x4F, 0x41, 0x58, 0xF4,  // ..W.OAX.
                            /* 02A8 */  0x43, 0x67, 0x29, 0x00, 0x75, 0x8C, 0xE3, 0xFA,  // Cg).u...
                            /* 02B0 */  0x29, 0xA4, 0x8C, 0x46, 0x23, 0x32, 0x9C, 0xB5,  // )..F#2..
                            /* 02B8 */  0xC0, 0x08, 0xCE, 0x20, 0x06, 0x74, 0x50, 0x08,  // ... .tP.
                            /* 02C0 */  0x39, 0x39, 0x0E, 0xA0, 0x7E, 0x75, 0x9A, 0x92,  // 99..~u..
                            /* 02C8 */  0x66, 0xC1, 0x20, 0x5E, 0x77, 0x18, 0xC1, 0x54,  // f. ^w..T
                            /* 02D0 */  0x57, 0x23, 0x3A, 0x47, 0x5F, 0x07, 0xF8, 0x2D,  // W#:G_..-
                            /* 02D8 */  0xC5, 0x07, 0x04, 0x83, 0xFB, 0x48, 0xF1, 0xF6,  // .....H..
                            /* 02E0 */  0x01, 0x96, 0xD1, 0x06, 0xF1, 0x75, 0xC1, 0x07,  // .....u..
                            /* 02E8 */  0x02, 0x6F, 0xF2, 0x44, 0x30, 0x6A, 0x4E, 0x4C,  // .o.D0jNL
                            /* 02F0 */  0xA8, 0x69, 0xF8, 0x72, 0xF0, 0x5A, 0x63, 0x02,  // .i.r.Zc.
                            /* 02F8 */  0xEB, 0xBA, 0x23, 0x40, 0x3F, 0x80, 0x78, 0x14,  // ..#@?.x.
                            /* 0300 */  0xBE, 0x9E, 0x99, 0xA0, 0xBE, 0x33, 0x02, 0x28,  // .....3.(
                            /* 0308 */  0x80, 0x7C, 0x21, 0xF0, 0xFD, 0xE0, 0xA1, 0x80,  // .|!.....
                            /* 0310 */  0x8D, 0xE1, 0x15, 0xC1, 0x68, 0x46, 0xE7, 0x22,  // ....hF."
                            /* 0318 */  0x27, 0x8F, 0x92, 0x35, 0x79, 0x0A, 0xE2, 0xC9,  // '..5y...
                            /* 0320 */  0x3B, 0xF2, 0xE4, 0xD1, 0x17, 0x0A, 0x1F, 0x09,  // ;.......
                            /* 0328 */  0x38, 0x81, 0x23, 0x8E, 0x9D, 0xDE, 0x3F, 0xF0,  // 8.#...?.
                            /* 0330 */  0x93, 0x3D, 0xB5, 0xC7, 0x04, 0x23, 0xFF, 0xFF,  // .=...#..
                            /* 0338 */  0x43, 0xBC, 0x20, 0x79, 0xF0, 0xE0, 0x38, 0x57,  // C. y..8W
                            /* 0340 */  0xC1, 0x19, 0x0B, 0x47, 0x79, 0x5B, 0xC0, 0x0E,  // ...Gy[..
                            /* 0348 */  0xC6, 0x17, 0x00, 0x3E, 0x0E, 0x5F, 0x00, 0xF8,  // ...>._..
                            /* 0350 */  0xF8, 0x7C, 0xE9, 0x80, 0x7F, 0x02, 0xC0, 0x12,  // .|......
                            /* 0358 */  0x14, 0x78, 0x03, 0x00, 0x39, 0x3C, 0x26, 0xDE,  // .x..9<&.
                            /* 0360 */  0xA8, 0xA8, 0xAC, 0x71, 0xA1, 0x06, 0xEB, 0xAB,  // ...q....
                            /* 0368 */  0x11, 0xC3, 0x7E, 0xC2, 0xB0, 0xE8, 0xB1, 0xEA,  // ..~.....
                            /* 0370 */  0x32, 0xF1, 0xA6, 0x86, 0x81, 0xF5, 0xF0, 0x39,  // 2......9
                            /* 0378 */  0xAC, 0xD1, 0xC2, 0x1E, 0xF5, 0xBB, 0x89, 0x0F,  // ........
                            /* 0380 */  0x36, 0x9E, 0x99, 0x31, 0xC2, 0xFA, 0x08, 0xE0,  // 6..1....
                            /* 0388 */  0xDB, 0xC7, 0x23, 0x00, 0x98, 0x4F, 0x6A, 0xB0,  // ..#..Oj.
                            /* 0390 */  0xAE, 0x08, 0x18, 0x41, 0x6F, 0x05, 0xDD, 0x46,  // ...Ao..F
                            /* 0398 */  0xF8, 0x38, 0x2C, 0x79, 0x5D, 0xBA, 0x8D, 0xB0,  // .8,y]...
                            /* 03A0 */  0x09, 0xB0, 0xCB, 0x0F, 0x4E, 0xE6, 0xC9, 0x81,  // ....N...
                            /* 03A8 */  0x42, 0x58, 0xE0, 0x7D, 0xCB, 0x07, 0x08, 0x94,  // BX.}....
                            /* 03B0 */  0x20, 0x38, 0x0A, 0xE2, 0x03, 0x84, 0xC3, 0x0A,  //  8......
                            /* 03B8 */  0xF8, 0xFF, 0xDF, 0x89, 0xB0, 0x07, 0x08, 0x7C,  // .......|
                            /* 03C0 */  0xB8, 0x03, 0x04, 0x28, 0x2E, 0x32, 0xF8, 0xE1,  // ...(.2..
                            /* 03C8 */  0x82, 0x6B, 0x78, 0xB8, 0xD3, 0x03, 0x3C, 0x02,  // .kx...<.
                            /* 03D0 */  0x5F, 0x90, 0xC0, 0x77, 0x7A, 0x00, 0x1E, 0xA1,  // _..wz...
                            /* 03D8 */  0x4E, 0x0F, 0xA0, 0x3B, 0x05, 0xF8, 0xF4, 0x00,  // N..;....
                            /* 03E0 */  0xAE, 0xF1, 0x03, 0x0F, 0x8D, 0x2F, 0x03, 0xDD,  // ...../..
                            /* 03E8 */  0x8A, 0x70, 0x8A, 0xD7, 0x26, 0xE8, 0xB7, 0x22,  // .p..&.."
                            /* 03F0 */  0x98, 0x1A, 0x01, 0x75, 0x2B, 0x62, 0xFF, 0x7F,  // ...u+b..
                            /* 03F8 */  0x82, 0xEA, 0x60, 0x94, 0xFF, 0xE4, 0x80, 0x4A,  // ..`....J
                            /* 0400 */  0x7C, 0x72, 0xA0, 0x20, 0x1E, 0xAD, 0x6F, 0x45,  // |r. ..oE
                            /* 0408 */  0x80, 0xCF, 0x98, 0xA7, 0x1F, 0x28, 0xB7, 0xB4,  // .....(..
                            /* 0410 */  0xF3, 0xC6, 0xC4, 0x9A, 0x22, 0xF4, 0x9B, 0x25,  // ...."..%
                            /* 0418 */  0x6E, 0x8A, 0xE0, 0x1A, 0x09, 0x6E, 0x8C, 0xB0,  // n....n..
                            /* 0420 */  0x6E, 0x03, 0xBE, 0x48, 0x01, 0xDF, 0xFF, 0x3F,  // n..H...?
                            /* 0428 */  0x81, 0xC5, 0xDD, 0x17, 0x50, 0x72, 0xEE, 0x0B,  // ....Pr..
                            /* 0430 */  0x14, 0xC4, 0xF7, 0x06, 0x47, 0x9D, 0x3B, 0x1A,  // ....G.;.
                            /* 0438 */  0xDA, 0x67, 0x1B, 0xDF, 0x57, 0x7C, 0x6F, 0x01,  // .g..W|o.
                            /* 0440 */  0x2E, 0x73, 0xC7, 0x1F, 0x7A, 0xD8, 0x81, 0x0E,  // .s..z...
                            /* 0448 */  0x73, 0x6F, 0x81, 0x37, 0x32, 0x5F, 0xA2, 0x80,  // so.72_..
                            /* 0450 */  0xF7, 0xB5, 0xC3, 0xF7, 0x16, 0x70, 0xC1, 0xF2,  // .....p..
                            /* 0458 */  0x7B, 0x0B, 0x78, 0xC0, 0xDE, 0x5B, 0xC0, 0x78,  // {.x..[.x
                            /* 0460 */  0x04, 0xC0, 0x5F, 0x7B, 0x3C, 0xA2, 0xB7, 0x88,  // .._{<...
                            /* 0468 */  0x28, 0xAF, 0x92, 0x6F, 0x2F, 0xBE, 0xB5, 0xB0,  // (..o/...
                            /* 0470 */  0x33, 0xBD, 0x2F, 0x28, 0xEC, 0xFF, 0x7F, 0x6C,  // 3./(...l
                            /* 0478 */  0xC1, 0x29, 0xB4, 0xE9, 0x53, 0xA3, 0x51, 0xAB,  // .)..S.Q.
                            /* 0480 */  0x06, 0x65, 0x6A, 0x94, 0x69, 0x50, 0xAB, 0x4F,  // .ej.iP.O
                            /* 0488 */  0xA5, 0xC6, 0x8C, 0x19, 0x39, 0x84, 0xFB, 0x21,  // ....9..!
                            /* 0490 */  0xA0, 0xE1, 0x39, 0x10, 0x08, 0x8D, 0x48, 0x21,  // ..9...H!
                            /* 0498 */  0x10, 0x47, 0xFE, 0x5D, 0x08, 0xC4, 0x82, 0x3D,  // .G.]...=
                            /* 04A0 */  0x80, 0x30, 0x29, 0x07, 0x47, 0x01, 0x5B, 0xD7,  // .0).G.[.
                            /* 04A8 */  0xD1, 0x91, 0x6A, 0x55, 0x01, 0xC4, 0x94, 0x83,  // ..jU....
                            /* 04B0 */  0x08, 0xC8, 0x29, 0x7E, 0x22, 0x02, 0x72, 0x26,  // ..)~".r&
                            /* 04B8 */  0x10, 0x01, 0x39, 0x95, 0x0E, 0x20, 0x16, 0x11,  // ..9.. ..
                            /* 04C0 */  0x44, 0xC7, 0x48, 0xE2, 0x03, 0x88, 0x05, 0x01,  // D.H.....
                            /* 04C8 */  0x11, 0x90, 0x43, 0x3D, 0x0B, 0x04, 0x48, 0x40,  // ..C=..H@
                            /* 04D0 */  0x04, 0xE4, 0xFF, 0x3F                           // ...?
                        })
                    }

                    Device (HKDV)
                    {
                        Name (_HID, "LHK2019")  // _HID: Hardware ID
                        Name (_UID, 0x00)  // _UID: Unique ID
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }
                    }

                    Device (WMIU)
                    {
                        Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                        Name (_UID, "LSK20")  // _UID: Unique ID
                        Name (_WDG, Buffer (0x3C)
                        {
                            /* 0000 */  0x74, 0x09, 0x6C, 0xCE, 0x07, 0x04, 0x50, 0x4F,  // t.l...PO
                            /* 0008 */  0x88, 0xBA, 0x4F, 0xC3, 0xB6, 0x55, 0x9A, 0xD8,  // ..O..U..
                            /* 0010 */  0x53, 0x4B, 0x01, 0x02, 0x0C, 0xDE, 0xC0, 0x8F,  // SK......
                            /* 0018 */  0xE4, 0xB4, 0xFD, 0x43, 0xB0, 0xF3, 0x88, 0x71,  // ...C...q
                            /* 0020 */  0x71, 0x1C, 0x12, 0x94, 0xD0, 0x00, 0x01, 0x08,  // q.......
                            /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,  // !...f...
                            /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,  // ......).
                            /* 0038 */  0x44, 0x41, 0x01, 0x00                           // DA..
                        })
                        Method (WMSK, 3, NotSerialized)
                        {
                            If ((Arg1 == 0x01))
                            {
                                If ((ToInteger (Arg2) == 0x01))
                                {
                                    Return (0x02)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x02))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x03))
                                {
                                    Return (0x01)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x04))
                                {
                                    Return (0x01)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x05))
                                {
                                    Return (0x00)
                                }
                                ElseIf ((ToInteger (Arg2) == 0x06))
                                {
                                    Return (0x00)
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }

                        Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event, xx=0x00-0xFF
                        {
                            If ((Arg0 == 0xD0))
                            {
                                If ((LSKD == 0x01))
                                {
                                    Return (0x01)
                                }
                                ElseIf ((LSKD == 0x02))
                                {
                                    Return (0x05)
                                }
                                ElseIf ((LSKD == 0x03))
                                {
                                    Return (0x06)
                                }
                                ElseIf ((LSKD == 0x04))
                                {
                                    If ((Acquire (^^PCI0.LPC0.EC0.LFCM, 0xA000) == 0x00))
                                    {
                                        If ((^^PCI0.LPC0.EC0.HKDB == 0x01))
                                        {
                                            Return (0x02)
                                        }
                                        Else
                                        {
                                            Return (0x03)
                                        }

                                        Release (^^PCI0.LPC0.EC0.LFCM)
                                    }
                                }
                                ElseIf ((LSKD == 0x05))
                                {
                                    Return (0x04)
                                }
                                ElseIf ((LSKD == 0x06))
                                {
                                    Return (0x07)
                                }
                                ElseIf ((LSKD == 0x07))
                                {
                                    Return (0x08)
                                }
                                ElseIf ((LSKD == 0x08))
                                {
                                    Return (0x09)
                                }
                                ElseIf ((LSKD == 0x09))
                                {
                                    Return (0x0A)
                                }
                                ElseIf ((LSKD == 0x0A))
                                {
                                    Return (0x0B)
                                }
                                Else
                                {
                                    Return (0x00)
                                }
                            }
                        }

                        Name (WQDA, Buffer (0x0418)
                        {
                            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,  // FOMB....
                            /* 0008 */  0x08, 0x04, 0x00, 0x00, 0x5E, 0x0C, 0x00, 0x00,  // ....^...
                            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,  // DS...}.T
                            /* 0018 */  0xA8, 0x40, 0x86, 0x00, 0x01, 0x06, 0x18, 0x42,  // .@.....B
                            /* 0020 */  0x10, 0x05, 0x10, 0x8A, 0x28, 0x81, 0x42, 0x04,  // ....(.B.
                            /* 0028 */  0x8A, 0x40, 0xA4, 0x50, 0x30, 0x28, 0x0D, 0x20,  // .@.P0(. 
                            /* 0030 */  0x92, 0x03, 0x21, 0x17, 0x4C, 0x4C, 0x80, 0x08,  // ..!.LL..
                            /* 0038 */  0x08, 0x79, 0x15, 0x60, 0x53, 0x80, 0x49, 0x10,  // .y.`S.I.
                            /* 0040 */  0xF5, 0xEF, 0x0F, 0x51, 0x12, 0x1C, 0x4A, 0x08,  // ...Q..J.
                            /* 0048 */  0x84, 0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00,  // .$.0/@..
                            /* 0050 */  0xC3, 0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31,  // ..l.0-.1
                            /* 0058 */  0x24, 0x95, 0x06, 0x4E, 0x09, 0x2C, 0x05, 0x42,  // $..N.,.B
                            /* 0060 */  0x42, 0x05, 0x28, 0x17, 0xE0, 0x5B, 0x80, 0x76,  // B.(..[.v
                            /* 0068 */  0x44, 0x49, 0x16, 0x60, 0x19, 0x46, 0x04, 0x1E,  // DI.`.F..
                            /* 0070 */  0x45, 0x64, 0xA3, 0x71, 0x68, 0xEC, 0x30, 0x2C,  // Ed.qh.0,
                            /* 0078 */  0x13, 0x4C, 0x83, 0x38, 0x8C, 0xB2, 0x91, 0x45,  // .L.8...E
                            /* 0080 */  0xE0, 0x09, 0x75, 0x2A, 0x40, 0xAE, 0x00, 0x61,  // ..u*@..a
                            /* 0088 */  0x02, 0xC4, 0xA3, 0x0A, 0xA3, 0x39, 0x28, 0x22,  // .....9("
                            /* 0090 */  0x1A, 0x1A, 0x25, 0x66, 0x4C, 0x04, 0xB6, 0x73,  // ..%fL..s
                            /* 0098 */  0x6C, 0x8D, 0xE2, 0x34, 0x0A, 0x17, 0x20, 0x1D,  // l..4.. .
                            /* 00A0 */  0x43, 0x23, 0x38, 0xAE, 0x63, 0x30, 0x58, 0x90,  // C#8.c0X.
                            /* 00A8 */  0x43, 0x31, 0x44, 0x41, 0x02, 0xAC, 0xA2, 0x91,  // C1DA....
                            /* 00B0 */  0x61, 0x84, 0x08, 0x72, 0x7C, 0x81, 0xBA, 0xC4,  // a..r|...
                            /* 00B8 */  0x13, 0x88, 0xC7, 0xE4, 0x01, 0x18, 0x21, 0x4C,  // ......!L
                            /* 00C0 */  0x8B, 0xB0, 0x82, 0x36, 0x62, 0x02, 0xC3, 0x1E,  // ...6b...
                            /* 00C8 */  0x0A, 0xE6, 0x07, 0x20, 0x01, 0x9E, 0x05, 0x58,  // ... ...X
                            /* 00D0 */  0x1F, 0x23, 0x21, 0xB0, 0x7B, 0x01, 0xE2, 0x04,  // .#!.{...
                            /* 00D8 */  0x68, 0x1E, 0x8D, 0x46, 0x75, 0x9C, 0xC6, 0x88,  // h..Fu...
                            /* 00E0 */  0xD2, 0x96, 0x00, 0xC5, 0x23, 0x13, 0x4C, 0x88,  // ....#.L.
                            /* 00E8 */  0x28, 0x21, 0x3A, 0xC3, 0x13, 0x5A, 0x28, 0xC3,  // (!:..Z(.
                            /* 00F0 */  0x45, 0x89, 0x13, 0x25, 0x70, 0x84, 0xDE, 0x04,  // E..%p...
                            /* 00F8 */  0x18, 0x83, 0x20, 0x08, 0x81, 0x43, 0x54, 0x36,  // .. ..CT6
                            /* 0100 */  0x48, 0xA1, 0xB6, 0x3F, 0x08, 0x22, 0xC9, 0xC1,  // H..?."..
                            /* 0108 */  0x89, 0x80, 0x45, 0x1A, 0x0D, 0xEA, 0x14, 0x90,  // ..E.....
                            /* 0110 */  0xE0, 0xA9, 0xC0, 0x27, 0x82, 0x93, 0x3A, 0xAF,  // ...'..:.
                            /* 0118 */  0xA3, 0x3A, 0xEB, 0x20, 0xC1, 0x4F, 0xA4, 0xCE,  // .:. .O..
                            /* 0120 */  0xE3, 0x00, 0x19, 0x38, 0x9B, 0x9A, 0xD9, 0x75,  // ...8...u
                            /* 0128 */  0x3E, 0x80, 0xE0, 0x1A, 0x50, 0xFF, 0xFF, 0x79,  // >...P..y
                            /* 0130 */  0x3E, 0x16, 0xB0, 0x61, 0x86, 0xC3, 0x0C, 0xD1,  // >..a....
                            /* 0138 */  0x83, 0xF5, 0x04, 0x0E, 0x91, 0x01, 0x7A, 0x62,  // ......zb
                            /* 0140 */  0x4F, 0x04, 0x58, 0x87, 0x93, 0xD1, 0x71, 0xA0,  // O.X...q.
                            /* 0148 */  0x54, 0x01, 0x66, 0xC7, 0xAD, 0x49, 0x27, 0x38,  // T.f..I'8
                            /* 0150 */  0x1E, 0x9F, 0x03, 0x3C, 0x9F, 0x13, 0x4E, 0x60,  // ...<..N`
                            /* 0158 */  0xF9, 0x83, 0x40, 0x8D, 0xCC, 0xD0, 0x36, 0x38,  // ..@...68
                            /* 0160 */  0x2D, 0x1D, 0x04, 0x7C, 0x00, 0x30, 0x81, 0xC5,  // -..|.0..
                            /* 0168 */  0x1E, 0x26, 0xE8, 0x78, 0xC0, 0x7F, 0x00, 0x78,  // .&.x...x
                            /* 0170 */  0x3E, 0x88, 0xF0, 0xCE, 0xE0, 0xF9, 0x7A, 0x10,  // >.....z.
                            /* 0178 */  0x3A, 0x5B, 0xC8, 0xC9, 0x78, 0x50, 0xC7, 0x0A,  // :[..xP..
                            /* 0180 */  0x5F, 0x10, 0x30, 0xE0, 0x47, 0xFB, 0xC2, 0x10,  // _.0.G...
                            /* 0188 */  0xE6, 0xA5, 0x21, 0xEE, 0xC1, 0x5B, 0xEB, 0x15,  // ..!..[..
                            /* 0190 */  0x82, 0x10, 0x38, 0x34, 0x84, 0xFE, 0x1A, 0x16,  // ..84....
                            /* 0198 */  0x35, 0x78, 0x7A, 0xB2, 0xE0, 0x87, 0x0A, 0x06,  // 5xz.....
                            /* 01A0 */  0xCC, 0xC7, 0x73, 0x5A, 0x3E, 0x7B, 0x78, 0x78,  // ..sZ>{xx
                            /* 01A8 */  0xF0, 0x4F, 0x14, 0xC0, 0xE2, 0x3C, 0x81, 0xBB,  // .O...<..
                            /* 01B0 */  0x1C, 0xB0, 0x13, 0x05, 0x7E, 0xE0, 0xF0, 0x2F,  // ....~../
                            /* 01B8 */  0x15, 0x86, 0xF5, 0x45, 0xE2, 0x1D, 0x22, 0x81,  // ...E..".
                            /* 01C0 */  0xB1, 0x02, 0x63, 0xFE, 0xFF, 0xC0, 0x1E, 0xB9,  // ..c.....
                            /* 01C8 */  0xFD, 0x0A, 0x40, 0x08, 0x7E, 0x4A, 0x4F, 0x06,  // ..@.~JO.
                            /* 01D0 */  0xCF, 0x20, 0x11, 0x8E, 0xCA, 0xE8, 0x4F, 0x10,  // . ....O.
                            /* 01D8 */  0x7D, 0xCE, 0x5B, 0x10, 0xD1, 0x8E, 0xEA, 0x1C,  // }.[.....
                            /* 01E0 */  0x8E, 0x22, 0x54, 0x88, 0xB3, 0x30, 0x50, 0xB8,  // ."T..0P.
                            /* 01E8 */  0x60, 0x01, 0x8D, 0x93, 0xC0, 0x22, 0x87, 0x8A,  // `...."..
                            /* 01F0 */  0x1E, 0x04, 0x07, 0x3C, 0x87, 0x43, 0x0A, 0x7A,  // ...<.C.z
                            /* 01F8 */  0x10, 0x27, 0x13, 0xE5, 0x3C, 0x8E, 0xC9, 0xA7,  // .'..<...
                            /* 0200 */  0x14, 0x23, 0x1C, 0xD3, 0xC3, 0xC9, 0x53, 0x87,  // .#....S.
                            /* 0208 */  0x6F, 0x1B, 0x07, 0x7F, 0x5E, 0xC7, 0x7A, 0x88,  // o...^.z.
                            /* 0210 */  0x6C, 0xE0, 0x87, 0x80, 0x39, 0x5B, 0x78, 0x08,  // l...9[x.
                            /* 0218 */  0x7C, 0x00, 0x07, 0x74, 0x8A, 0x56, 0x3A, 0x31,  // |..t.V:1
                            /* 0220 */  0xE4, 0x79, 0x86, 0x8F, 0x19, 0x3B, 0x00, 0xAE,  // .y...;..
                            /* 0228 */  0xCA, 0x03, 0x08, 0x13, 0xFF, 0x34, 0x90, 0xB4,  // .....4..
                            /* 0230 */  0x37, 0x02, 0x85, 0xF1, 0x09, 0x07, 0x70, 0x05,  // 7.....p.
                            /* 0238 */  0xF4, 0x00, 0x01, 0x9E, 0xB3, 0x01, 0x5C, 0xEC,  // ......\.
                            /* 0240 */  0x93, 0x8F, 0x12, 0xE2, 0xED, 0x21, 0xFA, 0xB9,  // .....!..
                            /* 0248 */  0x9C, 0xCC, 0x2B, 0x84, 0x8F, 0x37, 0x98, 0xFF,  // ..+..7..
                            /* 0250 */  0xFF, 0xF1, 0x06, 0xD6, 0x05, 0xC6, 0xDA, 0xAE,  // ........
                            /* 0258 */  0x37, 0x64, 0x4A, 0xCF, 0x34, 0xEF, 0x36, 0x46,  // 7dJ.4.6F
                            /* 0260 */  0x39, 0x2C, 0xC3, 0x3C, 0xDE, 0xF8, 0x76, 0xD0,  // 9,.<..v.
                            /* 0268 */  0x1A, 0x8C, 0xEE, 0x36, 0xEC, 0x3C, 0x72, 0x12,  // ...6.<r.
                            /* 0270 */  0xA1, 0x18, 0xEE, 0x83, 0x44, 0x9C, 0xD8, 0xE1,  // ....D...
                            /* 0278 */  0x22, 0xC4, 0x7E, 0xE4, 0x30, 0xDE, 0xE3, 0x0D,  // ".~.0...
                            /* 0280 */  0x8B, 0x77, 0x1C, 0xD0, 0x31, 0xC4, 0xC7, 0x1B,  // .w..1...
                            /* 0288 */  0x80, 0x1F, 0xA7, 0x83, 0xC7, 0x12, 0xF0, 0x9F,  // ........
                            /* 0290 */  0x15, 0xF8, 0xA9, 0x04, 0x4C, 0xFF, 0xFF, 0x53,  // ....L..S
                            /* 0298 */  0x09, 0xFC, 0xC4, 0x0F, 0x02, 0x9D, 0x75, 0x9C,  // ......u.
                            /* 02A0 */  0x16, 0x44, 0x36, 0x16, 0x6B, 0x02, 0xC9, 0x82,  // .D6.k...
                            /* 02A8 */  0x50, 0xCE, 0x05, 0xCB, 0x23, 0xAE, 0x30, 0x8F,  // P...#.0.
                            /* 02B0 */  0x27, 0xF2, 0x39, 0x44, 0x7E, 0xA9, 0x88, 0x70,  // '.9D~..p
                            /* 02B8 */  0x06, 0xC7, 0x10, 0xE9, 0xB4, 0x62, 0x1C, 0xD8,  // .....b..
                            /* 02C0 */  0x2B, 0x87, 0xEF, 0x01, 0x4F, 0x16, 0x3C, 0x11,  // +...O.<.
                            /* 02C8 */  0xB0, 0x0E, 0x72, 0x3C, 0x0B, 0x85, 0x94, 0xD1,  // ..r<....
                            /* 02D0 */  0x68, 0x54, 0x1E, 0x84, 0xB5, 0xC0, 0x08, 0xCE,  // hT......
                            /* 02D8 */  0x20, 0x06, 0x74, 0x50, 0x08, 0x1D, 0x90, 0x70,  //  .tP...p
                            /* 02E0 */  0x4A, 0x40, 0x34, 0xAD, 0xF7, 0x21, 0x76, 0xEA,  // J@4..!v.
                            /* 02E8 */  0xF1, 0xFD, 0xC8, 0x04, 0x53, 0xDD, 0x8D, 0xE8,  // ....S...
                            /* 02F0 */  0x3C, 0x7D, 0x23, 0xE0, 0xF7, 0x14, 0x9F, 0x11,  // <}#.....
                            /* 02F8 */  0x0C, 0x6E, 0x85, 0xF7, 0x0F, 0xD0, 0x8C, 0x38,  // .n.....8
                            /* 0300 */  0x88, 0x6F, 0x0C, 0x3E, 0x13, 0x78, 0xA3, 0x27,  // .o.>.x.'
                            /* 0308 */  0x82, 0x51, 0x73, 0x64, 0x42, 0x4D, 0xC3, 0x53,  // .QsdBM.S
                            /* 0310 */  0x7D, 0xB1, 0x31, 0x81, 0x75, 0x5D, 0x86, 0x40,  // }.1.u].@
                            /* 0318 */  0xA6, 0xEF, 0x98, 0x00, 0x0A, 0x20, 0x5F, 0x0A,  // ..... _.
                            /* 0320 */  0x7C, 0xD2, 0x79, 0x30, 0x60, 0x63, 0x78, 0xD8,  // |.y0`cx.
                            /* 0328 */  0x31, 0x9A, 0xD1, 0xB9, 0xE0, 0xC9, 0xA3, 0x24,  // 1......$
                            /* 0330 */  0x4E, 0x9E, 0x82, 0x78, 0xF2, 0x8E, 0x3F, 0x79,  // N..x..?y
                            /* 0338 */  0xF4, 0x9D, 0xC2, 0x87, 0x2B, 0x4E, 0xE0, 0xB8,  // ....+N..
                            /* 0340 */  0x63, 0xA7, 0x57, 0x10, 0xFC, 0x64, 0xFF, 0xFF,  // c.W..d..
                            /* 0348 */  0xA7, 0xF6, 0xA8, 0xE0, 0x59, 0xF8, 0xD2, 0x82,  // ....Y...
                            /* 0350 */  0x1B, 0x3C, 0xDC, 0x5B, 0xC6, 0x91, 0x87, 0x79,  // .<.[...y
                            /* 0358 */  0xA7, 0xF2, 0xE9, 0xCA, 0x60, 0x41, 0xC2, 0xBC,  // ....`A..
                            /* 0360 */  0x2F, 0xE0, 0x80, 0xDE, 0xEE, 0x5E, 0x1C, 0x0E,  // /....^..
                            /* 0368 */  0x37, 0xC4, 0xF9, 0x1E, 0x7A, 0x04, 0x1F, 0x3F,  // 7...z..?
                            /* 0370 */  0x7C, 0x66, 0xC0, 0x0D, 0x89, 0x5D, 0x03, 0xF8,  // |f...]..
                            /* 0378 */  0x68, 0x7C, 0x0D, 0xE0, 0xA3, 0xF4, 0x1D, 0x0B,  // h|......
                            /* 0380 */  0x7C, 0x02, 0xEF, 0x01, 0x20, 0x87, 0xC7, 0x84,  // |... ...
                            /* 0388 */  0x1F, 0x15, 0xBD, 0x67, 0x78, 0x5C, 0x7C, 0xC8,  // ...gx\|.
                            /* 0390 */  0xBE, 0x22, 0x31, 0xEC, 0x67, 0x0D, 0x5F, 0xD2,  // ."1.g._.
                            /* 0398 */  0x4E, 0xF0, 0x95, 0xE2, 0x85, 0x0D, 0x03, 0xEB,  // N.......
                            /* 03A0 */  0x43, 0x00, 0x87, 0x35, 0x5A, 0xD8, 0x43, 0x7E,  // C..5Z.C~
                            /* 03A8 */  0x49, 0xF1, 0x09, 0xC7, 0x33, 0x33, 0x46, 0x58,  // I...33FX
                            /* 03B0 */  0x1F, 0x04, 0x1C, 0xE6, 0x20, 0x00, 0x9A, 0x03,  // .... ...
                            /* 03B8 */  0x1B, 0xFE, 0x06, 0xE0, 0x4B, 0x40, 0x90, 0x37,  // ....K@.7
                            /* 03C0 */  0x91, 0xD3, 0x7D, 0xF2, 0x31, 0x2A, 0xBF, 0x11,  // ..}.1*..
                            /* 03C8 */  0xF0, 0xF3, 0x08, 0x16, 0x28, 0x88, 0x6F, 0x18,  // ....(.o.
                            /* 03D0 */  0x1E, 0xDB, 0x81, 0xC4, 0x86, 0x73, 0x2D, 0xC1,  // .....s-.
                            /* 03D8 */  0xFE, 0xFF, 0x09, 0x2A, 0xB4, 0xE9, 0x53, 0xA3,  // ...*..S.
                            /* 03E0 */  0x51, 0xAB, 0x06, 0x65, 0x6A, 0x94, 0x69, 0x50,  // Q..ej.iP
                            /* 03E8 */  0xAB, 0x4F, 0xA5, 0xC6, 0x8C, 0x99, 0xB8, 0xF0,  // .O......
                            /* 03F0 */  0xF9, 0x15, 0xA1, 0x11, 0x3B, 0x12, 0x08, 0x8D,  // ....;...
                            /* 03F8 */  0x48, 0x21, 0x10, 0x07, 0xFE, 0x71, 0x08, 0xC4,  // H!...q..
                            /* 0400 */  0x72, 0xEF, 0x61, 0xBA, 0x16, 0x11, 0x5A, 0x19,  // r.a...Z.
                            /* 0408 */  0x01, 0x91, 0x36, 0x10, 0x01, 0x59, 0xBB, 0x0A,  // ..6..Y..
                            /* 0410 */  0x20, 0x96, 0x04, 0x44, 0x40, 0xFE, 0xFF, 0x03   //  ..D@...
                        })
                    }
                }
            }
        }
    }

    Scope (\)
    {
        Name (HPDT, Package (0x09)
        {
            "LEGACYHP", 
            0x80000000, 
            0x80000000, 
            "NATIVEHP", 
            0x80000000, 
            0x80000000, 
            "THERMALX", 
            0x80000000, 
            0x80000000
        })
        Name (DDB0, 0x00)
        Name (DDB1, 0x00)
        Name (DDB2, 0x00)
    }

    Scope (_GPE)
    {
        Method (XL08, 0, NotSerialized)
        {
            TPST (0x3908)
            Notify (\_SB.PCI0.GP17, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP18, 0x02) // Device Wake
        }

        Method (XL0E, 0, NotSerialized)
        {
            TPST (0x390E)
            Notify (\_SB.PCI0.GPP4, 0x02) // Device Wake
        }

        Method (XL19, 0, NotSerialized)
        {
            TPST (0x3919)
            Notify (\_SB.PCI0.GP17.XHC0, 0x02) // Device Wake
            Notify (\_SB.PCI0.GP17.XHC1, 0x02) // Device Wake
        }
    }

    Name (TSOS, 0x75)
    If (CondRefOf (\_OSI))
    {
        If (_OSI ("Windows 2009"))
        {
            TSOS = 0x50
        }

        If (_OSI ("Windows 2015"))
        {
            TSOS = 0x70
        }
    }

    Scope (_SB)
    {
        OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
        Field (SMIC, ByteAcc, NoLock, Preserve)
        {
            Offset (0x36A), 
            SMIB,   8
        }

        OperationRegion (SSMI, SystemIO, SMIB, 0x02)
        Field (SSMI, AnyAcc, NoLock, Preserve)
        {
            SMIW,   16
        }

        OperationRegion (ECMC, SystemIO, 0x72, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            ECMI,   8, 
            ECMD,   8
        }

        IndexField (ECMI, ECMD, ByteAcc, NoLock, Preserve)
        {
            Offset (0x08), 
            FRTB,   32
        }

        OperationRegion (FRTP, SystemMemory, FRTB, 0x0100)
        Field (FRTP, AnyAcc, NoLock, Preserve)
        {
            PEBA,   32, 
                ,   5, 
            IC0E,   1, 
            IC1E,   1, 
            IC2E,   1, 
            IC3E,   1, 
            IC4E,   1, 
            IC5E,   1, 
            UT0E,   1, 
            UT1E,   1, 
                ,   1, 
                ,   1, 
            ST_E,   1, 
            UT2E,   1, 
                ,   1, 
            EMMD,   2, 
                ,   3, 
            XHCE,   1, 
                ,   1, 
                ,   1, 
            UT3E,   1, 
            ESPI,   1, 
            EMME,   1, 
            HFPE,   1, 
            Offset (0x08), 
            PCEF,   1, 
                ,   4, 
            IC0D,   1, 
            IC1D,   1, 
            IC2D,   1, 
            IC3D,   1, 
            IC4D,   1, 
            IC5D,   1, 
            UT0D,   1, 
            UT1D,   1, 
                ,   1, 
                ,   1, 
            ST_D,   1, 
            UT2D,   1, 
                ,   1, 
            EHCD,   1, 
                ,   4, 
            XHCD,   1, 
            SD_D,   1, 
                ,   1, 
            UT3D,   1, 
                ,   1, 
            EMD3,   1, 
                ,   2, 
            S03D,   1, 
            FW00,   16, 
            FW01,   32, 
            FW02,   16, 
            FW03,   32, 
            SDS0,   8, 
            SDS1,   8, 
            CZFG,   1, 
            Offset (0x20), 
            SD10,   32, 
            EH10,   32, 
            XH10,   32, 
            STBA,   32
        }

        OperationRegion (FCFG, SystemMemory, PEBA, 0x01000000)
        Field (FCFG, DWordAcc, NoLock, Preserve)
        {
            Offset (0xA3044), 
            IPDE,   32, 
            IMPE,   32, 
            Offset (0xA3078), 
                ,   2, 
            LDQ0,   1, 
            Offset (0xA30CB), 
                ,   7, 
            AUSS,   1
        }

        OperationRegion (IOMX, SystemMemory, 0xFED80D00, 0x0100)
        Field (IOMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0x15), 
            IM15,   8, 
            IM16,   8, 
            Offset (0x1F), 
            IM1F,   8, 
            IM20,   8, 
            Offset (0x44), 
            IM44,   8, 
            Offset (0x46), 
            IM46,   8, 
            Offset (0x4A), 
            IM4A,   8, 
            IM4B,   8, 
            Offset (0x57), 
            IM57,   8, 
            IM58,   8, 
            Offset (0x68), 
            IM68,   8, 
            IM69,   8, 
            IM6A,   8, 
            IM6B,   8, 
            Offset (0x6D), 
            IM6D,   8
        }

        OperationRegion (FACR, SystemMemory, 0xFED81E00, 0x0100)
        Field (FACR, AnyAcc, NoLock, Preserve)
        {
            Offset (0x80), 
                ,   28, 
            RD28,   1, 
                ,   1, 
            RQTY,   1, 
            Offset (0x84), 
                ,   28, 
            SD28,   1, 
                ,   1, 
            Offset (0xA0), 
            PG1A,   1
        }

        OperationRegion (EMMX, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMX, AnyAcc, NoLock, Preserve)
        {
            Offset (0xD0), 
                ,   17, 
            FC18,   1, 
            FC33,   1, 
                ,   7, 
            CD_T,   1, 
            WP_T,   1
        }

        OperationRegion (EMMB, SystemMemory, 0xFEDD5800, 0x0130)
        Field (EMMB, AnyAcc, NoLock, Preserve)
        {
            Offset (0xA4), 
            E0A4,   32, 
            E0A8,   32, 
            Offset (0xB0), 
            E0B0,   32, 
            Offset (0xD0), 
            E0D0,   32, 
            Offset (0x116), 
            E116,   32
        }

        Name (SVBF, Buffer (0x0100)
        {
             0x00                                             // .
        })
        CreateDWordField (SVBF, 0x00, S0A4)
        CreateDWordField (SVBF, 0x04, S0A8)
        CreateDWordField (SVBF, 0x08, S0B0)
        CreateDWordField (SVBF, 0x0C, S0D0)
        CreateDWordField (SVBF, 0x10, S116)
        Method (SECR, 0, Serialized)
        {
            S116 = E116 /* \_SB_.E116 */
            RQTY = Zero
            RD28 = One
            Local0 = SD28 /* \_SB_.SD28 */
            While (Local0)
            {
                Local0 = SD28 /* \_SB_.SD28 */
            }
        }

        Method (RECR, 0, Serialized)
        {
            E116 = S116 /* \_SB_.S116 */
        }

        OperationRegion (LUIE, SystemMemory, 0xFEDC0020, 0x04)
        Field (LUIE, AnyAcc, NoLock, Preserve)
        {
            IER0,   1, 
            IER1,   1, 
            IER2,   1, 
            IER3,   1, 
            UOL0,   1, 
            UOL1,   1, 
            UOL2,   1, 
            UOL3,   1, 
            WUR0,   2, 
            WUR1,   2, 
            WUR2,   2, 
            WUR3,   2
        }

        Method (FRUI, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Arg1 = IUA0 /* \_SB_.IUA0 */
            }

            If ((Arg0 == 0x01))
            {
                Arg1 = IUA1 /* \_SB_.IUA1 */
            }

            If ((Arg0 == 0x02))
            {
                Arg1 = IUA2 /* \_SB_.IUA2 */
            }

            If ((Arg0 == 0x03))
            {
                Arg1 = IUA3 /* \_SB_.IUA3 */
            }
        }

        Method (SRAD, 2, Serialized)
        {
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            ADIS = One
            ADSR = Zero
            Stall (Arg1)
            ADSR = One
            ADIS = Zero
            Stall (Arg1)
        }

        Method (DSAD, 2, Serialized)
        {
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg0 != ADTD))
            {
                If ((Arg1 == 0x00))
                {
                    ADTD = 0x00
                    ADPD = One
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    While ((Local0 != 0x00))
                    {
                        Local0 = ADDS /* \_SB_.DSAD.ADDS */
                    }

                    ADTD = 0x03
                }
            }
        }

        Method (HSAD, 2, Serialized)
        {
            Local3 = (0x01 << Arg0)
            Local0 = (Arg0 << 0x01)
            Local0 += 0xFED81E40
            OperationRegion (ADCR, SystemMemory, Local0, 0x02)
            Field (ADCR, ByteAcc, NoLock, Preserve)
            {
                ADTD,   2, 
                ADPS,   1, 
                ADPD,   1, 
                ADSO,   1, 
                ADSC,   1, 
                ADSR,   1, 
                ADIS,   1, 
                ADDS,   3
            }

            If ((Arg1 != ADTD))
            {
                If ((Arg1 == 0x00))
                {
                    PG1A = One
                    ADTD = 0x00
                    ADPD = One
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x07))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    RQTY = One
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (!Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }
                }

                If ((Arg1 == 0x03))
                {
                    RQTY = Zero
                    RD28 = One
                    Local0 = SD28 /* \_SB_.SD28 */
                    While (Local0)
                    {
                        Local0 = SD28 /* \_SB_.SD28 */
                    }

                    ADPD = Zero
                    Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    While ((Local0 != 0x00))
                    {
                        Local0 = ADDS /* \_SB_.HSAD.ADDS */
                    }

                    ADTD = 0x03
                    PG1A = Zero
                }
            }
        }

        OperationRegion (FPIC, SystemIO, 0x0C00, 0x02)
        Field (ECMC, AnyAcc, NoLock, Preserve)
        {
            FPII,   8, 
            FPID,   8
        }

        IndexField (FPII, FPID, ByteAcc, NoLock, Preserve)
        {
            Offset (0xF4), 
            IUA0,   8, 
            IUA1,   8, 
            Offset (0xF8), 
            IUA2,   8, 
            IUA3,   8
        }

        Device (HFP1)
        {
            Name (_HID, "AMDI0060")  // _HID: Hardware ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (HFPE)
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xFEC11000,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.HFP1._CRS.RBUF */
            }
        }

        Device (GPIO)
        {
            Name (_HID, "AMDI0030")  // _HID: Hardware ID
            Name (_CID, "AMDI0030")  // _CID: Compatible ID
            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Interrupt (ResourceConsumer, Level, ActiveLow, Shared, ,, )
                    {
                        0x00000007,
                    }
                    Memory32Fixed (ReadWrite,
                        0xFED81500,         // Address Base
                        0x00000400,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0xFED81200,         // Address Base
                        0x00000100,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.GPIO._CRS.RBUF */
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TSOS >= 0x70))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }
        }

        Device (I2CC)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {4}
                Memory32Fixed (ReadWrite,
                    0xFEDC4000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x07, 0xC8)
            }
        }

        Device (I2CD)
        {
            Name (_HID, "AMDI0010")  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {6}
                Memory32Fixed (ReadWrite,
                    0xFEDC5000,         // Address Base
                    0x00001000,         // Address Length
                    )
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (RSET, 0, NotSerialized)
            {
                SRAD (0x08, 0xC8)
            }
        }
    }

    Scope (_SB.I2CD)
    {
        Device (TPD0)
        {
            Name (_HID, "MSFT0001")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                If ((TPTY == 0x04))
                {
                    _HID = "CRQ0350"
                }

                If ((TPTY == 0x05))
                {
                    _HID = "FTCS1003"
                }

                If ((TPTY == 0x01))
                {
                    _HID = "ELAN0001"
                }

                If ((TPTY == 0x02))
                {
                    _HID = "SYNA0001"
                }

                Return (Zero)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        If (((TPTY == 0x01) || (TPTY == 0x05)))
                        {
                            Return (0x01)
                        }

                        If ((((TPTY == 0x02) || (TPTY == 0x03)) || (TPTY == 0x04)))
                        {
                            Return (0x20)
                        }
                    }
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPTY == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                If ((TPTY == 0x01))
                {
                    Name (SBFB, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0015, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                If ((((TPTY == 0x02) || (TPTY == 0x03)) || (TPTY == 0x04)))
                {
                    Name (SBFS, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x002C, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                If ((TPTY == 0x05))
                {
                    Name (SBFC, ResourceTemplate ()
                    {
                        I2cSerialBusV2 (0x0038, ControllerInitiated, 0x00061A80,
                            AddressingMode7Bit, "\\_SB.I2CD",
                            0x00, ResourceConsumer, , Exclusive,
                            )
                    })
                }

                Name (SBFI, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x0059
                        }
                })
                If ((TPTY == 0x01))
                {
                    Return (ConcatenateResTemplate (SBFB, SBFI))
                }

                If ((((TPTY == 0x02) || (TPTY == 0x03)) || (TPTY == 0x04)))
                {
                    Return (ConcatenateResTemplate (SBFS, SBFI))
                }

                If ((TPTY == 0x05))
                {
                    Return (ConcatenateResTemplate (SBFC, SBFI))
                }
            }

            Method (TPRD, 0, Serialized)
            {
            }

            Method (TPWR, 1, Serialized)
            {
            }
        }
    }

    Scope (_SB.I2CC)
    {
        Device (TPSC)
        {
            Name (_HID, "MSFT0002")  // _HID: Hardware ID
            Name (_CID, "PNP0C50" /* HID Protocol Device (I2C bus) */)  // _CID: Compatible ID
            If ((TPNY == 0x02))
            {
                _HID = "GTCH7503"
            }

            If ((TPNY == 0x01))
            {
                _HID = "ELAN901C"
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (SBFS, ResourceTemplate ()
                {
                    I2cSerialBusV2 (0x0010, ControllerInitiated, 0x00061A80,
                        AddressingMode7Bit, "\\_SB.I2CC",
                        0x00, ResourceConsumer, , Exclusive,
                        )
                })
                Name (SBFI, ResourceTemplate ()
                {
                    GpioInt (Level, ActiveLow, ExclusiveAndWake, PullUp, 0x0000,
                        "\\_SB.GPIO", 0x00, ResourceConsumer, ,
                        )
                        {   // Pin list
                            0x005A
                        }
                })
                Return (ConcatenateResTemplate (SBFS, SBFI))
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((TPNY != 0x00))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (0x00)
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("3cdff6f7-4267-4555-ad05-b30a3d8938de") /* HID I2C Device */))
                {
                    If ((Arg2 == Zero))
                    {
                        If ((Arg1 == One))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                             // .
                            })
                        }
                    }

                    If ((Arg2 == One))
                    {
                        Return (0x01)
                    }

                    Return (Buffer (One)
                    {
                         0x00                                             // .
                    })
                }

                Return (Buffer (One)
                {
                     0x00                                             // .
                })
            }
        }
    }

    Name (SPL2, 0x61A8)
    Name (SPL3, 0x2EE0)
    Name (SPL9, 0x4E20)
    Name (SPP2, 0x927C)
    Name (SPP3, 0x3A98)
    Name (SPP9, 0x61A8)
    Name (FPP2, 0xA410)
    Name (FPP3, 0x4E20)
    Name (FPP9, 0x7530)
    Name (TDC2, 0xABE0)
    Name (TDC3, 0x88B8)
    Name (TDC9, 0x88B8)
    Name (EDC2, 0x00011170)
    Name (EDC3, 0xAFC8)
    Name (EDC9, 0xAFC8)
    Name (SPT2, 0x0F)
    Name (SPT3, 0x05)
    Name (SPT9, 0x05)
    Name (STC2, 0x01F4)
    Name (STC3, 0xC8)
    Name (STC9, 0xC8)
    Name (TCL2, 0x62)
    Name (TCL3, 0x5F)
    Name (TCL9, 0x5F)
    Name (SPL4, 0x3A98)
    Name (SPP4, 0x3A98)
    Name (FPP4, 0x4E20)
    Name (SPL5, 0x4E20)
    Name (SPP5, 0x7530)
    Name (FPP5, 0x9C40)
    Name (SPL6, 0x3A98)
    Name (SPP6, 0x4650)
    Name (FPP6, 0x4E20)
    Name (SPL7, 0x55F0)
    Name (SPP7, 0x6D60)
    Name (FPP7, 0x9C40)
    Name (XX11, Buffer (0x07) {})
    CreateWordField (XX11, 0x00, SSZE)
    CreateByteField (XX11, 0x02, SMUF)
    CreateDWordField (XX11, 0x03, SMUD)
    SSZE = 0x07
}



FACP
----
[000h 0000   4]                    Signature : "FACP"    [Fixed ACPI Description Table (FADT)]
[004h 0004   4]                 Table Length : 00000114
[008h 0008   1]                     Revision : 06
[009h 0009   1]                     Checksum : A5
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000003
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]                 FACS Address : CD620000
[028h 0040   4]                 DSDT Address : C8229000
[02Ch 0044   1]                        Model : 01
[02Dh 0045   1]                   PM Profile : 02 [Mobile]
[02Eh 0046   2]                SCI Interrupt : 0009
[030h 0048   4]             SMI Command Port : 000000B0
[034h 0052   1]            ACPI Enable Value : A0
[035h 0053   1]           ACPI Disable Value : A1
[036h 0054   1]               S4BIOS Command : 00
[037h 0055   1]              P-State Control : 00
[038h 0056   4]     PM1A Event Block Address : 00000400
[03Ch 0060   4]     PM1B Event Block Address : 00000000
[040h 0064   4]   PM1A Control Block Address : 00000404
[044h 0068   4]   PM1B Control Block Address : 00000000
[048h 0072   4]    PM2 Control Block Address : 00000800
[04Ch 0076   4]       PM Timer Block Address : 00000408
[050h 0080   4]           GPE0 Block Address : 00000420
[054h 0084   4]           GPE1 Block Address : 00000000
[058h 0088   1]       PM1 Event Block Length : 04
[059h 0089   1]     PM1 Control Block Length : 02
[05Ah 0090   1]     PM2 Control Block Length : 01
[05Bh 0091   1]        PM Timer Block Length : 04
[05Ch 0092   1]            GPE0 Block Length : 08
[05Dh 0093   1]            GPE1 Block Length : 00
[05Eh 0094   1]             GPE1 Base Offset : 00
[05Fh 0095   1]                 _CST Support : 00
[060h 0096   2]                   C2 Latency : 0064
[062h 0098   2]                   C3 Latency : 03E9
[064h 0100   2]               CPU Cache Size : 0000
[066h 0102   2]           Cache Flush Stride : 0000
[068h 0104   1]            Duty Cycle Offset : 01
[069h 0105   1]             Duty Cycle Width : 03
[06Ah 0106   1]          RTC Day Alarm Index : 0D
[06Bh 0107   1]        RTC Month Alarm Index : 00
[06Ch 0108   1]            RTC Century Index : 32
[06Dh 0109   2]   Boot Flags (decoded below) : 0013
               Legacy Devices Supported (V2) : 1
            8042 Present on ports 60/64 (V2) : 1
                        VGA Not Present (V4) : 0
                      MSI Not Supported (V4) : 0
                PCIe ASPM Not Supported (V4) : 1
                   CMOS RTC Not Present (V5) : 0
[06Fh 0111   1]                     Reserved : 00
[070h 0112   4]        Flags (decoded below) : 0000C5AD
      WBINVD instruction is operational (V1) : 1
              WBINVD flushes all caches (V1) : 0
                    All CPUs support C1 (V1) : 1
                  C2 works on MP system (V1) : 1
            Control Method Power Button (V1) : 0
            Control Method Sleep Button (V1) : 1
        RTC wake not in fixed reg space (V1) : 0
            RTC can wake system from S4 (V1) : 1
                        32-bit PM Timer (V1) : 1
                      Docking Supported (V1) : 0
               Reset Register Supported (V2) : 1
                            Sealed Case (V3) : 0
                    Headless - No Video (V3) : 0
        Use native instr after SLP_TYPx (V3) : 0
              PCIEXP_WAK Bits Supported (V4) : 1
                     Use Platform Timer (V4) : 1
               RTC_STS valid on S4 wake (V4) : 0
                Remote Power-on capable (V4) : 0
                 Use APIC Cluster Model (V4) : 0
     Use APIC Physical Destination Mode (V4) : 0
                       Hardware Reduced (V5) : 0
                      Low Power S0 Idle (V5) : 0

[074h 0116  12]               Reset Register : [Generic Address Structure]
[074h 0116   1]                     Space ID : 01 [SystemIO]
[075h 0117   1]                    Bit Width : 08
[076h 0118   1]                   Bit Offset : 00
[077h 0119   1]         Encoded Access Width : 01 [Byte Access:8]
[078h 0120   8]                      Address : 0000000000000CF9

[080h 0128   1]         Value to cause reset : 06
[081h 0129   2]    ARM Flags (decoded below) : 0000
                              PSCI Compliant : 0
                       Must use HVC for PSCI : 0

[083h 0131   1]          FADT Minor Revision : 03
[084h 0132   8]                 FACS Address : 0000000000000000
[08Ch 0140   8]                 DSDT Address : 00000000C8229000
[094h 0148  12]             PM1A Event Block : [Generic Address Structure]
[094h 0148   1]                     Space ID : 01 [SystemIO]
[095h 0149   1]                    Bit Width : 20
[096h 0150   1]                   Bit Offset : 00
[097h 0151   1]         Encoded Access Width : 02 [Word Access:16]
[098h 0152   8]                      Address : 0000000000000400

[0A0h 0160  12]             PM1B Event Block : [Generic Address Structure]
[0A0h 0160   1]                     Space ID : 01 [SystemIO]
[0A1h 0161   1]                    Bit Width : 00
[0A2h 0162   1]                   Bit Offset : 00
[0A3h 0163   1]         Encoded Access Width : 02 [Word Access:16]
[0A4h 0164   8]                      Address : 0000000000000000

[0ACh 0172  12]           PM1A Control Block : [Generic Address Structure]
[0ACh 0172   1]                     Space ID : 01 [SystemIO]
[0ADh 0173   1]                    Bit Width : 10
[0AEh 0174   1]                   Bit Offset : 00
[0AFh 0175   1]         Encoded Access Width : 02 [Word Access:16]
[0B0h 0176   8]                      Address : 0000000000000404

[0B8h 0184  12]           PM1B Control Block : [Generic Address Structure]
[0B8h 0184   1]                     Space ID : 01 [SystemIO]
[0B9h 0185   1]                    Bit Width : 00
[0BAh 0186   1]                   Bit Offset : 00
[0BBh 0187   1]         Encoded Access Width : 02 [Word Access:16]
[0BCh 0188   8]                      Address : 0000000000000000

[0C4h 0196  12]            PM2 Control Block : [Generic Address Structure]
[0C4h 0196   1]                     Space ID : 01 [SystemIO]
[0C5h 0197   1]                    Bit Width : 08
[0C6h 0198   1]                   Bit Offset : 00
[0C7h 0199   1]         Encoded Access Width : 01 [Byte Access:8]
[0C8h 0200   8]                      Address : 0000000000000800

[0D0h 0208  12]               PM Timer Block : [Generic Address Structure]
[0D0h 0208   1]                     Space ID : 01 [SystemIO]
[0D1h 0209   1]                    Bit Width : 20
[0D2h 0210   1]                   Bit Offset : 00
[0D3h 0211   1]         Encoded Access Width : 03 [DWord Access:32]
[0D4h 0212   8]                      Address : 0000000000000408

[0DCh 0220  12]                   GPE0 Block : [Generic Address Structure]
[0DCh 0220   1]                     Space ID : 01 [SystemIO]
[0DDh 0221   1]                    Bit Width : 40
[0DEh 0222   1]                   Bit Offset : 00
[0DFh 0223   1]         Encoded Access Width : 03 [DWord Access:32]
[0E0h 0224   8]                      Address : 0000000000000420

[0E8h 0232  12]                   GPE1 Block : [Generic Address Structure]
[0E8h 0232   1]                     Space ID : 01 [SystemIO]
[0E9h 0233   1]                    Bit Width : 00
[0EAh 0234   1]                   Bit Offset : 00
[0EBh 0235   1]         Encoded Access Width : 03 [DWord Access:32]
[0ECh 0236   8]                      Address : 0000000000000000


[0F4h 0244  12]       Sleep Control Register : [Generic Address Structure]
[0F4h 0244   1]                     Space ID : 01 [SystemIO]
[0F5h 0245   1]                    Bit Width : 08
[0F6h 0246   1]                   Bit Offset : 00
[0F7h 0247   1]         Encoded Access Width : 00 [Undefined/Legacy]
[0F8h 0248   8]                      Address : 0000000000000000

[100h 0256  12]        Sleep Status Register : [Generic Address Structure]
[100h 0256   1]                     Space ID : 01 [SystemIO]
[101h 0257   1]                    Bit Width : 08
[102h 0258   1]                   Bit Offset : 00
[103h 0259   1]         Encoded Access Width : 00 [Undefined/Legacy]
[104h 0260   8]                      Address : 0000000000000000

[10Ch 0268   8]                Hypervisor ID : 0000000000000000

Raw Table Data: Length 276 (0x114)

    0000: 46 41 43 50 14 01 00 00 06 A5 4C 45 4E 4F 56 4F  // FACP......LENOVO
    0010: 43 42 2D 30 31 20 20 20 03 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 00 62 CD 00 90 22 C8 01 02 09 00  // ......b...".....
    0030: B0 00 00 00 A0 A1 00 00 00 04 00 00 00 00 00 00  // ................
    0040: 04 04 00 00 00 00 00 00 00 08 00 00 08 04 00 00  // ................
    0050: 20 04 00 00 00 00 00 00 04 02 01 04 08 00 00 00  //  ...............
    0060: 64 00 E9 03 00 00 00 00 01 03 0D 00 32 13 00 00  // d...........2...
    0070: AD C5 00 00 01 08 00 01 F9 0C 00 00 00 00 00 00  // ................
    0080: 06 00 00 03 00 00 00 00 00 00 00 00 00 90 22 C8  // ..............".
    0090: 00 00 00 00 01 20 00 02 00 04 00 00 00 00 00 00  // ..... ..........
    00A0: 01 00 00 02 00 00 00 00 00 00 00 00 01 10 00 02  // ................
    00B0: 04 04 00 00 00 00 00 00 01 00 00 02 00 00 00 00  // ................
    00C0: 00 00 00 00 01 08 00 01 00 08 00 00 00 00 00 00  // ................
    00D0: 01 20 00 03 08 04 00 00 00 00 00 00 01 40 00 03  // . ...........@..
    00E0: 20 04 00 00 00 00 00 00 01 00 00 03 00 00 00 00  //  ...............
    00F0: 00 00 00 00 01 08 00 00 00 00 00 00 00 00 00 00  // ................
    0100: 01 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0110: 00 00 00 00                                      // ....


FACS
----
[000h 0000   4]                    Signature : "FACS"
[004h 0004   4]                       Length : 00000040
[008h 0008   4]           Hardware Signature : 000019F4
[00Ch 0012   4]    32 Firmware Waking Vector : 00000000
[010h 0016   4]                  Global Lock : 00000000
[014h 0020   4]        Flags (decoded below) : 00000000
                      S4BIOS Support Present : 0
                  64-bit Wake Supported (V2) : 0
[018h 0024   8]    64 Firmware Waking Vector : 0000000000000000
[020h 0032   1]                      Version : 01
[021h 0033   3]                     Reserved : 000000
[024h 0036   4]    OspmFlags (decoded below) : 00000000
               64-bit Wake Env Required (V2) : 0

Raw Table Data: Length 64 (0x40)

    0000: 46 41 43 53 40 00 00 00 F4 19 00 00 00 00 00 00  // FACS@...........
    0010: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0020: 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0030: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................


FPDT
----
[000h 0000   4]                    Signature : "FPDT"    [Firmware Performance Data Table]
[004h 0004   4]                 Table Length : 00000034
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : B5
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


[024h 0036   2]                Subtable Type : 0000
[026h 0038   1]                       Length : 10
[027h 0039   1]                     Revision : 01
[028h 0040   4]                     Reserved : 00000000
[02Ch 0044   8]     FPDT Boot Record Address : 00000000CB762000

Raw Table Data: Length 52 (0x34)

    0000: 46 50 44 54 34 00 00 00 01 B5 4C 45 4E 4F 56 4F  // FPDT4.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 02 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 00 10 01 00 00 00 00 00 20 76 CB  // ............. v.
    0030: 00 00 00 00                                      // ....


HPET
----
[000h 0000   4]                    Signature : "HPET"    [High Precision Event Timer Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 0D
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]            Hardware Block ID : 43538210

[028h 0040  12]         Timer Block Register : [Generic Address Structure]
[028h 0040   1]                     Space ID : 00 [SystemMemory]
[029h 0041   1]                    Bit Width : 08
[02Ah 0042   1]                   Bit Offset : 00
[02Bh 0043   1]         Encoded Access Width : 00 [Undefined/Legacy]
[02Ch 0044   8]                      Address : 00000000FED00000

[034h 0052   1]              Sequence Number : 02
[035h 0053   2]          Minimum Clock Ticks : 0014
[037h 0055   1]        Flags (decoded below) : 00
                             4K Page Protect : 0
                            64K Page Protect : 0

Raw Table Data: Length 56 (0x38)

    0000: 48 50 45 54 38 00 00 00 01 0D 4C 45 4E 4F 56 4F  // HPET8.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 10 82 53 43 00 08 00 00 00 00 D0 FE  // ......SC........
    0030: 00 00 00 00 02 14 00 00                          // ........


IVRS
----
[000h 0000   4]                    Signature : "IVRS"    [I/O Virtualization Reporting Structure]
[004h 0004   4]                 Table Length : 000001A4
[008h 0008   1]                     Revision : 02
[009h 0009   1]                     Checksum : 6F
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   4]          Virtualization Info : 00203041
[028h 0040   8]                     Reserved : 0000000000000000

[030h 0048   1]                Subtable Type : 10 [Hardware Definition Block (IVHD)]
[031h 0049   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[032h 0050   2]                       Length : 0048
[034h 0052   2]                     DeviceId : 0002
[036h 0054   2]            Capability Offset : 0040
[038h 0056   8]                 Base Address : 00000000FDF00000
[040h 0064   2]            PCI Segment Group : 0000
[042h 0066   2]          Virtualization Info : 0000
[044h 0068   4]            Feature Reporting : 80048F6F

[048h 0072   1]                Subtable Type : 03 [Device Entry: Start of Range]
[049h 0073   2]                    Device ID : 0008
[04Bh 0075   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[04Ch 0076   1]                Subtable Type : 04 [Device Entry: End of Range]
[04Dh 0077   2]                    Device ID : FFFE
[04Fh 0079   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[050h 0080   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[051h 0081   2]                    Device ID : FF00
[053h 0083   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[054h 0084   1]                     Reserved : 00
[055h 0085   2]        Source Used Device ID : 00A5
[057h 0087   1]                     Reserved : 00

[058h 0088   1]                Subtable Type : 04 [Device Entry: End of Range]
[059h 0089   2]                    Device ID : FFFF
[05Bh 0091   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[05Ch 0092   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[05Dh 0093   2]                    Device ID : 0000
[05Fh 0095   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[060h 0096   1]                Subtable Type : 48 [Device Entry: Special Device]
[061h 0097   2]                    Device ID : 0000
[063h 0099   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[064h 0100   1]                       Handle : 00
[065h 0101   2]        Source Used Device ID : 00A0
[067h 0103   1]                      Variety : 02

[068h 0104   1]                Subtable Type : 48 [Device Entry: Special Device]
[069h 0105   2]                    Device ID : 0000
[06Bh 0107   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[06Ch 0108   1]                       Handle : 20
[06Dh 0109   2]        Source Used Device ID : 00A0
[06Fh 0111   1]                      Variety : 01

[070h 0112   1]                Subtable Type : 48 [Device Entry: Special Device]
[071h 0113   2]                    Device ID : 0000
[073h 0115   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[074h 0116   1]                       Handle : 21
[075h 0117   2]        Source Used Device ID : 0001
[077h 0119   1]                      Variety : 01

[078h 0120   1]                Subtable Type : 11 [Hardware Definition Block (IVHD)]
[079h 0121   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[07Ah 0122   2]                       Length : 0058
[07Ch 0124   2]                     DeviceId : 0002
[07Eh 0126   2]            Capability Offset : 0040
[080h 0128   8]                 Base Address : 00000000FDF00000
[088h 0136   2]            PCI Segment Group : 0000
[08Ah 0138   2]          Virtualization Info : 0000
[08Ch 0140   4]                   Attributes : 00040200
[090h 0144   8]                    EFR Image : 206D73EF22254ADE
[098h 0152   8]                     Reserved : 0000000000000000

[0A0h 0160   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0A1h 0161   2]                    Device ID : 0008
[0A3h 0163   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A4h 0164   1]                Subtable Type : 04 [Device Entry: End of Range]
[0A5h 0165   2]                    Device ID : FFFE
[0A7h 0167   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0A8h 0168   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[0A9h 0169   2]                    Device ID : FF00
[0ABh 0171   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0ACh 0172   1]                     Reserved : 00
[0ADh 0173   2]        Source Used Device ID : 00A5
[0AFh 0175   1]                     Reserved : 00

[0B0h 0176   1]                Subtable Type : 04 [Device Entry: End of Range]
[0B1h 0177   2]                    Device ID : FFFF
[0B3h 0179   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B4h 0180   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[0B5h 0181   2]                    Device ID : 0000
[0B7h 0183   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0B8h 0184   1]                Subtable Type : 48 [Device Entry: Special Device]
[0B9h 0185   2]                    Device ID : 0000
[0BBh 0187   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0BCh 0188   1]                       Handle : 00
[0BDh 0189   2]        Source Used Device ID : 00A0
[0BFh 0191   1]                      Variety : 02

[0C0h 0192   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C1h 0193   2]                    Device ID : 0000
[0C3h 0195   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[0C4h 0196   1]                       Handle : 20
[0C5h 0197   2]        Source Used Device ID : 00A0
[0C7h 0199   1]                      Variety : 01

[0C8h 0200   1]                Subtable Type : 48 [Device Entry: Special Device]
[0C9h 0201   2]                    Device ID : 0000
[0CBh 0203   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[0CCh 0204   1]                       Handle : 21
[0CDh 0205   2]        Source Used Device ID : 0001
[0CFh 0207   1]                      Variety : 01

[0D0h 0208   1]                Subtable Type : 40 [Hardware Definition Block - Mixed Format (IVHD)]
[0D1h 0209   1]        Flags (decoded below) : B0
                                     HtTunEn : 0
                                      PassPW : 0
                                   ResPassPW : 0
                                Isoc Control : 0
                               Iotlb Support : 1
                                    Coherent : 1
                            Prefetch Support : 0
                                 PPR Support : 1
[0D2h 0210   2]                       Length : 00D4
[0D4h 0212   2]                     DeviceId : 0002
[0D6h 0214   2]            Capability Offset : 0040
[0D8h 0216   8]                 Base Address : 00000000FDF00000
[0E0h 0224   2]            PCI Segment Group : 0000
[0E2h 0226   2]          Virtualization Info : 0000
[0E4h 0228   4]                   Attributes : 00040200
[0E8h 0232   8]                    EFR Image : 206D73EF22254ADE
[0F0h 0240   8]                     Reserved : 0000000000000000

[0F8h 0248   1]                Subtable Type : 03 [Device Entry: Start of Range]
[0F9h 0249   2]                    Device ID : 0008
[0FBh 0251   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[0FCh 0252   1]                Subtable Type : 04 [Device Entry: End of Range]
[0FDh 0253   2]                    Device ID : FFFE
[0FFh 0255   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[100h 0256   1]                Subtable Type : 43 [Device Entry: Alias Start of Range]
[101h 0257   2]                    Device ID : FF00
[103h 0259   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[104h 0260   1]                     Reserved : 00
[105h 0261   2]        Source Used Device ID : 00A5
[107h 0263   1]                     Reserved : 00

[108h 0264   1]                Subtable Type : 04 [Device Entry: End of Range]
[109h 0265   2]                    Device ID : FFFF
[10Bh 0267   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[10Ch 0268   1]                Subtable Type : 00 [Unknown/Reserved Device Entry Type]
[10Dh 0269   2]                    Device ID : 0000
[10Fh 0271   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0

[110h 0272   1]                Subtable Type : 48 [Device Entry: Special Device]
[111h 0273   2]                    Device ID : 0000
[113h 0275   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[114h 0276   1]                       Handle : 00
[115h 0277   2]        Source Used Device ID : 00A0
[117h 0279   1]                      Variety : 02

[118h 0280   1]                Subtable Type : 48 [Device Entry: Special Device]
[119h 0281   2]                    Device ID : 0000
[11Bh 0283   1] Data Setting (decoded below) : D7
                                    INITPass : 1
                                    EIntPass : 1
                                     NMIPass : 1
                                    Reserved : 0
                                 System MGMT : 1
                                  LINT0 Pass : 1
                                  LINT1 Pass : 1
[11Ch 0284   1]                       Handle : 20
[11Dh 0285   2]        Source Used Device ID : 00A0
[11Fh 0287   1]                      Variety : 01

[120h 0288   1]                Subtable Type : 48 [Device Entry: Special Device]
[121h 0289   2]                    Device ID : 0000
[123h 0291   1] Data Setting (decoded below) : 00
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 0
                                  LINT1 Pass : 0
[124h 0292   1]                       Handle : 21
[125h 0293   2]        Source Used Device ID : 0001
[127h 0295   1]                      Variety : 01

[128h 0296   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[129h 0297   2]                    Device ID : 00A5
[12Bh 0299   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[12Ch 0300   8]                     ACPI HID : "AMDI0020"
[134h 0308   8]                     ACPI CID : 0000000000000000
[13Ch 0316   1]                   UID Format : 02
[13Dh 0317   1]                   UID Length : 09
[13Eh 0318   9]                          UID : "\_SB.FUR0"

[147h 0327   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[148h 0328   2]                    Device ID : 00A5
[14Ah 0330   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[14Bh 0331   8]                     ACPI HID : "AMDI0020"
[153h 0339   8]                     ACPI CID : 0000000000000000
[15Bh 0347   1]                   UID Format : 02
[15Ch 0348   1]                   UID Length : 09
[15Dh 0349   9]                          UID : "\_SB.FUR1"

[166h 0358   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[167h 0359   2]                    Device ID : 00A5
[169h 0361   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[16Ah 0362   8]                     ACPI HID : "AMDI0020"
[172h 0370   8]                     ACPI CID : 0000000000000000
[17Ah 0378   1]                   UID Format : 02
[17Bh 0379   1]                   UID Length : 09
[17Ch 0380   9]                          UID : "\_SB.FUR2"

[185h 0389   1]                Subtable Type : F0 [Device Entry: ACPI HID Named Device]
[186h 0390   2]                    Device ID : 00A5
[188h 0392   1] Data Setting (decoded below) : 40
                                    INITPass : 0
                                    EIntPass : 0
                                     NMIPass : 0
                                    Reserved : 0
                                 System MGMT : 0
                                  LINT0 Pass : 1
                                  LINT1 Pass : 0
[189h 0393   8]                     ACPI HID : "AMDI0020"
[191h 0401   8]                     ACPI CID : 0000000000000000
[199h 0409   1]                   UID Format : 02
[19Ah 0410   1]                   UID Length : 09
[19Bh 0411   9]                          UID : "\_SB.FUR3"

Raw Table Data: Length 420 (0x1A4)

    0000: 49 56 52 53 A4 01 00 00 02 6F 4C 45 4E 4F 56 4F  // IVRS.....oLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 41 30 20 00 00 00 00 00 00 00 00 00  // ....A0 .........
    0030: 10 B0 48 00 02 00 40 00 00 00 F0 FD 00 00 00 00  // ..H...@.........
    0040: 00 00 00 00 6F 8F 04 80 03 08 00 00 04 FE FF 00  // ....o...........
    0050: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0060: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0070: 48 00 00 00 21 01 00 01 11 B0 58 00 02 00 40 00  // H...!.....X...@.
    0080: 00 00 F0 FD 00 00 00 00 00 00 00 00 00 02 04 00  // ................
    0090: DE 4A 25 22 EF 73 6D 20 00 00 00 00 00 00 00 00  // .J%".sm ........
    00A0: 03 08 00 00 04 FE FF 00 43 00 FF 00 00 A5 00 00  // ........C.......
    00B0: 04 FF FF 00 00 00 00 00 48 00 00 00 00 A0 00 02  // ........H.......
    00C0: 48 00 00 D7 20 A0 00 01 48 00 00 00 21 01 00 01  // H... ...H...!...
    00D0: 40 B0 D4 00 02 00 40 00 00 00 F0 FD 00 00 00 00  // @.....@.........
    00E0: 00 00 00 00 00 02 04 00 DE 4A 25 22 EF 73 6D 20  // .........J%".sm 
    00F0: 00 00 00 00 00 00 00 00 03 08 00 00 04 FE FF 00  // ................
    0100: 43 00 FF 00 00 A5 00 00 04 FF FF 00 00 00 00 00  // C...............
    0110: 48 00 00 00 00 A0 00 02 48 00 00 D7 20 A0 00 01  // H.......H... ...
    0120: 48 00 00 00 21 01 00 01 F0 A5 00 40 41 4D 44 49  // H...!......@AMDI
    0130: 30 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F  // 0020..........\_
    0140: 53 42 2E 46 55 52 30 F0 A5 00 40 41 4D 44 49 30  // SB.FUR0...@AMDI0
    0150: 30 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53  // 020..........\_S
    0160: 42 2E 46 55 52 31 F0 A5 00 40 41 4D 44 49 30 30  // B.FUR1...@AMDI00
    0170: 32 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42  // 20..........\_SB
    0180: 2E 46 55 52 32 F0 A5 00 40 41 4D 44 49 30 30 32  // .FUR2...@AMDI002
    0190: 30 00 00 00 00 00 00 00 00 02 09 5C 5F 53 42 2E  // 0..........\_SB.
    01A0: 46 55 52 33                                      // FUR3


MCFG
----
[000h 0000   4]                    Signature : "MCFG"    [Memory Mapped Configuration Table]
[004h 0004   4]                 Table Length : 0000003C
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : FA
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   8]                     Reserved : 0000000000000000

[02Ch 0044   8]                 Base Address : 00000000F8000000
[034h 0052   2]         Segment Group Number : 0000
[036h 0054   1]             Start Bus Number : 00
[037h 0055   1]               End Bus Number : 3F
[038h 0056   4]                     Reserved : 00000000

Raw Table Data: Length 60 (0x3C)

    0000: 4D 43 46 47 3C 00 00 00 01 FA 4C 45 4E 4F 56 4F  // MCFG<.....LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 F8  // ................
    0030: 00 00 00 00 00 00 00 3F 00 00 00 00              // .......?....


MSDM
----
[000h 0000   4]                    Signature : "MSDM"    [Microsoft Data Management Table]
[004h 0004   4]                 Table Length : 00000055
[008h 0008   1]                     Revision : 03
[009h 0009   1]                     Checksum : 7D
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000000
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036  49] Software Licensing Structure : 66 B0 00 00 00 00 4D 60 75 A0 00 00 00 00 4E 9A /* f.....M`u.....N. */\
/* 034h 0052  16 */                            48 B0 00 00 00 00 4F 49 92 20 00 00 00 00 50 83 /* H.....OI. ....P. */\
/* 044h 0068  16 */                            65 30 00 00 00 00 51 20 39 A0 00 00 00 00 52 63 /* e0....Q 9.....Rc */\
/* 054h 0084   1 */                            47                                              /* G */\

Raw Table Data: Length 85 (0x55)

    0000: 4D 53 44 4D 55 00 00 00 03 7D 4C 45 4E 4F 56 4F  // MSDMU....}LENOVO
    0010: 43 42 2D 30 31 20 20 20 00 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 01 00 00 00 00 00 00 00 01 00 00 00  // ................
    0030: 00 00 00 00 1D 00 00 00 56 48 4A 4B 32 2D 4E 38  // ........VHJK2-N8
    0040: 43 36 58 2D 36 4B 59 59 33 2D 32 34 34 48 4B 2D  // C6X-6KYY3-244HK-
    0050: 32 59 54 33 52                                   // 2YT3R


SSDT1
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF.C000, DeviceObj)
    External (_SB_.PLTF.C001, DeviceObj)
    External (_SB_.PLTF.C002, DeviceObj)
    External (_SB_.PLTF.C003, DeviceObj)
    External (_SB_.PLTF.C004, DeviceObj)
    External (_SB_.PLTF.C005, DeviceObj)
    External (_SB_.PLTF.C006, DeviceObj)
    External (_SB_.PLTF.C007, DeviceObj)

    Scope (\_SB.PLTF.C000)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000000, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C000.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C001)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000001, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C001.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C002)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000002, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C002.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C003)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000003, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C003.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C004)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000004, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C004.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C005)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000005, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C005.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C006)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000006, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C006.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }

    Scope (\_SB.PLTF.C007)
    {
        Name (_PCT, Package (0x02)  // _PCT: Performance Control
        {
            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x00000000C0010062, // Address
                    ,)
            }, 

            ResourceTemplate ()
            {
                Register (FFixedHW, 
                    0x40,               // Bit Width
                    0x00,               // Bit Offset
                    0x0000000000000000, // Address
                    ,)
            }
        })
        Name (_PSS, Package (0x03)  // _PSS: Performance Supported States
        {
            Package (0x06)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                0x00000000
            }, 

            Package (0x06)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                0x00000001
            }, 

            Package (0x06)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                0x00000002, 
                0x00000002
            }
        })
        Name (XPSS, Package (0x03)
        {
            Package (0x08)
            {
                0x000007D0, 
                0x00000985, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x000006A4, 
                0x0000064F, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }, 

            Package (0x08)
            {
                0x00000578, 
                0x000004FD, 
                0x00000000, 
                0x00000000, 
                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }, 

                Buffer (0x08)
                {
                     0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                }
            }
        })
        Name (_PSD, Package (0x01)  // _PSD: Power State Dependencies
        {
            Package (0x05)
            {
                0x05, 
                0x00, 
                0x00000007, 
                0x000000FE, 
                0x00000001
            }
        })
        Name (PPCV, 0x00)
        Method (_PPC, 0, NotSerialized)  // _PPC: Performance Present Capabilities
        {
            Return (PPCV) /* \_SB_.PLTF.C007.PPCV */
        }

        Name (_CST, Package (0x04)  // _CST: C-States
        {
            0x03, 
            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                0x01, 
                0x0001, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x02, 
                0x0190, 
                0x00000000
            }, 

            Package (0x04)
            {
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                0x03, 
                0x015E, 
                0x00000000
            }
        })
        Name (_LPI, Package (0x06)  // _LPI: Low Power Idle States
        {
            0x0000, 
            0x0000000000000000, 
            0x0003, 
            Package (0x0A)
            {
                0x00000000, 
                0x00000001, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (FFixedHW, 
                        0x02,               // Bit Width
                        0x02,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C1"
            }, 

            Package (0x0A)
            {
                0x0000003C, 
                0x00000012, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000000, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000414, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C2"
            }, 

            Package (0x0A)
            {
                0x000003E8, 
                0x0000015E, 
                0x00000001, 
                0x00000000, 
                0x00000000, 
                0x00000001, 
                ResourceTemplate ()
                {
                    Register (SystemIO, 
                        0x08,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000415, // Address
                        0x01,               // Access Size
                        )
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "C3"
            }
        })
    }
}



SSDT10
------
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.SWUS.SWDS.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN0, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN1, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN2, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN3, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN4, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN5, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN6, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN7, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFN8, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GPP0.VGA_.AFNC, MethodObj)    // 2 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M207, Buffer (0xFF) {})
        Name (M208, Buffer (0x03) {})
        Name (M204, 0x01)
        Method (ATCS, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                ATC0 ()
            }

            If ((Arg0 == 0x01))
            {
                ATC1 ()
            }

            If ((Arg0 == 0x02))
            {
                ATC2 (Arg1)
            }

            If ((Arg0 == 0x03))
            {
                ATC3 ()
            }

            If ((Arg0 == 0x04))
            {
                ATC4 (Arg1)
            }

            If ((Arg0 == 0x06))
            {
                ATC6 (Arg1)
            }

            If ((Arg0 == 0x07))
            {
                ATC7 (Arg1)
            }

            Return (M207) /* \_SB_.PCI0.GP17.VGA_.M207 */
        }

        Method (ATC0, 0, NotSerialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateWordField (M207, 0x02, M158)
            CreateDWordField (M207, 0x04, M160)
            M157 = 0x08
            M158 = 0x01
            M160 = 0x6F
            M207 = \_SB.ALIB (0x00, M207)
        }

        Method (ATC1, 0, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateDWordField (M207, 0x02, M161)
            CreateDWordField (M207, 0x06, M162)
            CreateField (M207, 0x30, 0x01, M203)
            M157 = 0x0A
            M161 = 0x01
            M162 = M100 /* External reference */
            Local0 = M049 (M133, 0x15)
            If ((Local0 & 0x80))
            {
                M204 = (Local0 & 0x01)
            }
            ElseIf ((Local0 & 0x7F))
            {
                M204 = M113 (Local0)
            }

            M203 = M204 /* \_SB_.PCI0.GP17.VGA_.M204 */
        }

        Method (ATC2, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M205)
            M157 = 0x03
            M205 = 0x01
            M207 = \_SB.ALIB (0x02, Arg0)
        }

        Method (ATC3, 0, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M205)
            CreateWordField (M208, 0x00, M197)
            CreateByteField (M208, 0x02, M206)
            M157 = 0x03
            M205 = 0x01
            M197 = 0x03
            M206 = 0x01
            M207 = \_SB.ALIB (0x03, M208)
        }

        Method (ATC4, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateByteField (M207, 0x02, M209)
            M157 = 0x03
            M209 = 0x01
            M207 = \_SB.ALIB (0x04, Arg0)
        }

        Method (ATC6, 1, Serialized)
        {
            CreateWordField (M207, 0x00, M157)
            CreateDWordField (M207, 0x02, M234)
            M157 = 0x06
            M234 = M233 /* External reference */
        }

        Method (ATC7, 1, Serialized)
        {
            M232 (M235, 0x00, 0x01)
        }

        Method (XTRM, 2, Serialized)
        {
            If ((M105 == 0x00))
            {
                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Local4 = M105 /* External reference */
            If ((Local4 > 0x00010000))
            {
                Local4 = 0x00010000
            }

            Local5 = Arg0
            Local6 = Arg1
            If ((Local6 > 0x1000))
            {
                Local6 = 0x1000
            }

            If ((Local5 >= Local4))
            {
                Return (Buffer (Local6)
                {
                     0x00                                             // .
                })
            }

            If ((((Local5 & 0x0FFF) + Local6) > 0x1000))
            {
                Local6 = (0x1000 - (Local5 & 0x0FFF))
            }

            Name (M202, Buffer (0x1000)
            {
                 0x00                                             // .
            })
            If (((Local5 & 0xF000) == 0x00))
            {
                M202 = M106 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x1000))
            {
                M202 = M378 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x2000))
            {
                M202 = M379 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x3000))
            {
                M202 = M380 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x4000))
            {
                M202 = M381 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x5000))
            {
                M202 = M382 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x6000))
            {
                M202 = M383 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x7000))
            {
                M202 = M384 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x8000))
            {
                M202 = M385 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0x9000))
            {
                M202 = M386 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xA000))
            {
                M202 = M387 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xB000))
            {
                M202 = M388 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xC000))
            {
                M202 = M389 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xD000))
            {
                M202 = M390 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xE000))
            {
                M202 = M391 /* External reference */
            }
            ElseIf (((Local5 & 0xF000) == 0xF000))
            {
                M202 = M392 /* External reference */
            }

            If (((Local5 + Local6) <= Local4))
            {
                If ((Local6 == 0x1000))
                {
                    Return (M202) /* \_SB_.PCI0.GP17.VGA_.XTRM.M202 */
                }
            }
            Else
            {
                Local6 = (Local4 - Local5)
            }

            Name (M393, Buffer (Local6)
            {
                 0x00                                             // .
            })
            CreateField (M202, ((Local5 & 0x0FFF) * 0x08), (Local6 * 0x08
                ), M394)
            M393 = M394 /* \_SB_.PCI0.GP17.VGA_.XTRM.M394 */
            Return (M393) /* \_SB_.PCI0.GP17.VGA_.XTRM.M393 */
        }
    }

    Method (AFN0, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN0))
            {
                \_SB.PCI0.GP17.VGA.AFN0 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.VGA.AFN0 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN0 ()
            }
        }
    }

    Method (AFN1, 1, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN1))
            {
                \_SB.PCI0.GP17.VGA.AFN1 (Arg0)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.VGA.AFN1 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN1 (Arg0)
            }
        }
    }

    Method (AFN2, 2, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN2))
            {
                \_SB.PCI0.GP17.VGA.AFN2 (Arg0, Arg1)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.VGA.AFN2 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN2 (Arg0, Arg1)
            }
        }
    }

    Method (AFN3, 2, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN3))
            {
                \_SB.PCI0.GP17.VGA.AFN3 (Arg0, Arg1)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.VGA.AFN3 (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN3 (Arg0, Arg1)
            }
        }
    }

    Method (AFN4, 1, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN4))
            {
                \_SB.PCI0.GP17.VGA.AFN4 (Arg0)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.VGA.AFN4 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN4 (Arg0)
            }
        }
    }

    Method (AFN5, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN5))
            {
                \_SB.PCI0.GP17.VGA.AFN5 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.VGA.AFN5 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN5 ()
            }
        }
    }

    Method (AFN6, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN6))
            {
                \_SB.PCI0.GP17.VGA.AFN6 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.VGA.AFN6 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN6 ()
            }
        }
    }

    Method (AFN7, 1, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN7))
            {
                \_SB.PCI0.GP17.VGA.AFN7 (Arg0)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.VGA.AFN7 (Arg0)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN7 (Arg0)
            }
        }
    }

    Method (AFN8, 0, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFN8))
            {
                \_SB.PCI0.GP17.VGA.AFN8 ()
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.VGA.AFN8 ()
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFN8 ()
            }
        }
    }

    Method (AFNC, 2, Serialized)
    {
        If ((M087 == 0x00))
        {
            If (CondRefOf (\_SB.PCI0.GP17.VGA.AFNC))
            {
                \_SB.PCI0.GP17.VGA.AFNC (Arg0, Arg1)
            }
        }

        If ((M087 == 0x01))
        {
            If (CondRefOf (\_SB.PCI0.GPP0.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.VGA.AFNC (Arg0, Arg1)
            }

            If (CondRefOf (\_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC))
            {
                \_SB.PCI0.GPP0.SWUS.SWDS.VGA.AFNC (Arg0, Arg1)
            }
        }
    }
}



SSDT2
-----
DefinitionBlock ("", "SSDT", 2, "LENOVO", "AmdTable", 0x00000002)
{
    Scope (\_SB)
    {
        Name (AGRB, 0xF8000000)
        Name (ADBG, Buffer (0x0100) {})
        Name (ADAT, Buffer (0x0520)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0020 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0038 */  0x00, 0x00, 0x01, 0x03, 0x00, 0xFF, 0xFF, 0x01,  // ........
            /* 0040 */  0x00, 0x02, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0048 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x04,  // ........
            /* 0050 */  0x04, 0xFF, 0xFF, 0x02, 0x00, 0x02, 0x02, 0x00,  // ........
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0060 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0070 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01,  // ........
            /* 0088 */  0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0098 */  0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00,  // ........
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
        })
        Method (ALIB, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                CreateWordField (Arg1, 0x00, A013)
                CreateWordField (Arg1, 0x02, A014)
                CreateDWordField (Arg1, 0x04, A015)
                Local0 = Buffer (0x0100) {}
                CreateWordField (Local0, 0x00, A016)
                A016 = A013 /* \_SB_.ALIB.A013 */
                CreateWordField (Local0, 0x02, A017)
                A017 = A014 /* \_SB_.ALIB.A014 */
                CreateDWordField (Local0, 0x04, A018)
                A018 = A015 /* \_SB_.ALIB.A015 */
                A018 &= ~0x0F
                If ((DerefOf (\_SB.ADAT [0x00]) > 0x00))
                {
                    Local1 = 0x0F
                }
                Else
                {
                    Local1 = 0x01
                }

                A018 |= Local1
                Return (Local0)
            }

            If ((Arg0 == 0x01))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A019 (Local0))
            }

            If ((Arg0 == 0x02))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x03))
            {
                Local0 = Buffer (0x0100)
                    {
                         0x03, 0x00, 0x00                                 // ...
                    }
                Return (Local0)
            }

            If ((Arg0 == 0x06))
            {
                Local0 = DerefOf (Arg1 [0x04])
                Local1 = DerefOf (Arg1 [0x02])
                Return (A022 (Local0, Local1))
            }

            If ((Arg0 == 0x0A))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Return (A023 (Local0))
            }

            If ((Arg0 == 0x0B))
            {
                Local0 = DerefOf (Arg1 [0x02])
                Local1 = DerefOf (Arg1 [0x03])
                Local2 = DerefOf (Arg1 [0x04])
                Local2 |= (DerefOf (Arg1 [0x05]) << 0x08)
                Local2 |= (DerefOf (Arg1 [0x06]) << 0x10)
                Local2 |= (DerefOf (Arg1 [0x07]) << 0x18)
                Local3 = DerefOf (Arg1 [0x08])
                Local3 |= (DerefOf (Arg1 [0x09]) << 0x08)
                Local3 |= (DerefOf (Arg1 [0x0A]) << 0x10)
                Local3 |= (DerefOf (Arg1 [0x0B]) << 0x18)
                Local4 = DerefOf (Arg1 [0x0C])
                Local4 |= (DerefOf (Arg1 [0x0D]) << 0x08)
                Local4 |= (DerefOf (Arg1 [0x0E]) << 0x10)
                Local4 |= (DerefOf (Arg1 [0x0F]) << 0x18)
                Return (A024 (Local0, Local1, Local2, Local3, Local4))
            }

            If ((Arg0 == 0x0C))
            {
                A025 (Arg1)
            }

            If ((Arg0 == 0x10))
            {
                Local7 = Buffer (0x18) {}
                CreateDWordField (Local7, 0x00, A026)
                CreateDWordField (Local7, 0x04, A027)
                CreateDWordField (Local7, 0x08, A028)
                CreateDWordField (Local7, 0x0C, A029)
                CreateDWordField (Local7, 0x10, A030)
                CreateDWordField (Local7, 0x14, A031)
                A026 = 0x00
                A027 = 0x00
                A028 = 0x00
                A029 = 0x00
                A030 = 0x00
                A031 = 0x00
                A011 (0x26, Local7)
            }

            If ((Arg0 == 0x11))
            {
                Local6 = Buffer (0x18) {}
                CreateDWordField (Local6, 0x00, A005)
                CreateDWordField (Local6, 0x04, A006)
                CreateDWordField (Local6, 0x08, A007)
                CreateDWordField (Local6, 0x0C, A008)
                CreateDWordField (Local6, 0x10, A009)
                CreateDWordField (Local6, 0x14, A010)
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                A011 (0x25, Local6)
            }

            If ((Arg0 == 0xAA))
            {
                Local6 = Buffer (0x18) {}
                CreateDWordField (Local6, 0x00, A032)
                CreateDWordField (Local6, 0x04, A033)
                CreateDWordField (Local6, 0x08, A034)
                CreateDWordField (Local6, 0x0C, A035)
                CreateDWordField (Local6, 0x10, A036)
                CreateDWordField (Local6, 0x14, A037)
                A032 = 0x00
                A033 = 0x00
                A034 = 0x00
                A035 = 0x00
                A036 = 0x00
                A037 = 0x00
                A038 (Arg1)
            }

            Return (0x00)
        }

        Method (A022, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A089 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    Local2 = A090 (Local0, Arg0)
                    Break
                }

                Local0++
            }

            Local7 = Buffer (0x0A) {}
            CreateWordField (Local7, 0x00, A016)
            CreateByteField (Local7, 0x02, A040)
            CreateByteField (Local7, 0x03, A091)
            A016 = 0x04
            A040 = 0x00
            If ((Local2 == 0x00))
            {
                A091 = 0x00
            }
            Else
            {
                A091 = 0x01
            }

            Return (Local7)
        }

        Method (A089, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A084 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A084 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A084 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A084 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A084 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A084 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A084 (Arg1))
            }
        }

        Method (A090, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A085 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A085 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A085 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A085 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A085 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A085 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A085 (Arg1))
            }
        }

        Name (AD00, 0x00)
        Name (DK00, 0x00)
        Method (A019, 1, NotSerialized)
        {
            AD00 = Arg0
            A004 ()
        }

        Method (A023, 1, NotSerialized)
        {
            DK00 = Arg0
        }

        Method (A024, 5, NotSerialized)
        {
        }

        Name (AP01, 0x00)
        Name (AP02, 0x00)
        Name (AP03, 0x00)
        Name (AP05, 0x00)
        Name (AP0B, 0xFF)
        Name (AP10, 0x00)
        Method (A039, 1, NotSerialized)
        {
            Local7 = Buffer (0x0100) {}
            CreateWordField (Local7, 0x00, A016)
            A016 = 0x03
            CreateByteField (Local7, 0x02, A040)
            A040 = 0x01
            If ((DerefOf (\_SB.ADAT [0x00]) == 0x01))
            {
                A040 = 0x02
                Return (Local7)
            }

            If ((DerefOf (\_SB.ADAT [0x00]) == 0x00))
            {
                A040 = 0x01
                Return (Local7)
            }

            A041 (Arg0)
            If ((AP05 != 0x01))
            {
                Return (Local7)
            }

            A042 ()
            A040 = 0x02
            Return (Local7)
        }

        Method (A043, 0, NotSerialized)
        {
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            If ((AP05 != 0x01))
            {
                Return (0x00)
            }

            A042 ()
        }

        Method (A044, 1, NotSerialized)
        {
            If ((Arg0 == 0x03))
            {
                AP01 = 0x00
            }
        }

        Method (A045, 1, NotSerialized)
        {
            AP10 = 0x01
        }

        Method (A046, 1, NotSerialized)
        {
            AP05 = Arg0
            If ((DerefOf (\_SB.ADAT [0x00]) <= 0x01))
            {
                Return (0x00)
            }

            Local1 = AP0B /* \_SB_.AP0B */
            If ((AP05 == 0x00))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A047 (Local0)
                    Local0++
                }

                AP0B = 0x00
            }

            A042 ()
            AP0B = Local1
            Local7 = Buffer (0x0100) {}
            Local7 [0x00] = 0x03
            Local7 [0x01] = 0x00
            Local7 [0x02] = 0x00
            Return (Local7)
        }

        Method (A048, 0, NotSerialized)
        {
            If ((AP0B != 0xFF))
            {
                Return (AP0B) /* \_SB_.AP0B */
            }

            Return (AD00) /* \_SB_.AD00 */
        }

        Method (A041, 1, NotSerialized)
        {
            CreateWordField (Arg0, 0x02, AP06)
            CreateWordField (Arg0, 0x04, AP07)
            CreateWordField (Arg0, 0x06, AP08)
            CreateByteField (Arg0, 0x08, AP09)
            CreateByteField (Arg0, 0x09, AP0A)
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                If ((A049 (Local0, AP06) == 0x01))
                {
                    If (((AP07 & AP08) == 0x01))
                    {
                        Local1 = A050 (Local0)
                        A051 (Local0, Local1)
                    }
                    Else
                    {
                        A051 (Local0, AP0A)
                    }

                    Break
                }

                Local0++
            }
        }

        Method (A052, 0, NotSerialized)
        {
            AP02 = 0x01
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                If ((Local1 > AP02))
                {
                    AP02 = Local1
                }

                Local0++
            }
        }

        Method (A054, 0, NotSerialized)
        {
            AP03 = 0x00
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A055 (Local0)
                If ((Local1 > AP03))
                {
                    AP03 = Local1
                }

                Local0++
            }
        }

        Method (A042, 0, NotSerialized)
        {
            A054 ()
            A052 ()
            If ((AP02 != AP01))
            {
                A012 (AP02, AP01)
            }

            If ((AP02 > AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A053 (Local0)
                Local2 = A056 (Local0)
                If ((Local1 != Local2))
                {
                    A057 (Local0, Local1)
                }
                ElseIf ((AP10 == 0x01))
                {
                    A057 (Local0, Local1)
                }

                Local0++
            }

            If ((AP02 < AP01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }
            ElseIf ((AP10 == 0x01))
            {
                AP01 = AP02 /* \_SB_.AP02 */
            }

            AP10 = 0x00
        }

        Method (A057, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A058 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A058 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A058 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A058 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A058 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A058 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A058 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A058 (Arg1))
            }
        }

        Method (A056, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A059 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A059 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A059 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A059 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A059 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A059 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A059 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A059 ())
            }
        }

        Method (A053, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A060 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A060 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A060 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A060 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A060 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A060 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A060 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A060 ())
            }
        }

        Method (A055, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A061 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A061 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A061 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A061 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A061 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A061 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A061 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A061 ())
            }
        }

        Method (A050, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A062 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A062 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A062 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A062 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A062 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A062 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A062 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A062 ())
            }
        }

        Method (A051, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A063 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A063 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A063 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A063 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A063 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A063 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A063 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A063 (Arg1))
            }
        }

        Method (A049, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A064 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A064 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A064 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A064 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A064 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A064 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A064 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A064 (Arg1))
            }
        }

        Method (A047, 1, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A065 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A065 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A065 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A065 ())
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A065 ())
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A065 ())
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A065 ())
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A065 ())
            }
        }

        OperationRegion (A120, SystemMemory, AGRB, 0x1000)
        Field (A120, DWordAcc, Lock, Preserve)
        {
            Offset (0xB8), 
            A121,   32
        }

        BankField (A120, A121, 0x03B10528, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A118,   32
        }

        BankField (A120, A121, 0x03B10564, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A111,   32
        }

        BankField (A120, A121, 0x03B10998, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A112,   32
        }

        BankField (A120, A121, 0x03B1099C, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A113,   32
        }

        BankField (A120, A121, 0x03B109A0, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A114,   32
        }

        BankField (A120, A121, 0x03B109A4, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A115,   32
        }

        BankField (A120, A121, 0x03B109A8, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A116,   32
        }

        BankField (A120, A121, 0x03B109AC, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A117,   32
        }

        BankField (A120, A121, 0x13B00084, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A094,   32
        }

        BankField (A120, A121, 0x11140280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A102,   32
        }

        BankField (A120, A121, 0x11141280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A103,   32
        }

        BankField (A120, A121, 0x11142280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A104,   32
        }

        BankField (A120, A121, 0x11240280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A095,   32
        }

        BankField (A120, A121, 0x11241280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A096,   32
        }

        BankField (A120, A121, 0x11242280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A097,   32
        }

        BankField (A120, A121, 0x11243280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A098,   32
        }

        BankField (A120, A121, 0x11244280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A099,   32
        }

        BankField (A120, A121, 0x11245280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A100,   32
        }

        BankField (A120, A121, 0x11246280, DWordAcc, Lock, Preserve)
        {
            Offset (0xBC), 
            A101,   32
        }

        Method (A092, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A073 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A073 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A073 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A073 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A073 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A073 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A073 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A073 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A073 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A073 (Arg1))
            }
        }

        Method (A093, 2, NotSerialized)
        {
            If ((Arg1 == 0x01))
            {
                If ((Arg0 == 0x00))
                {
                    Local0 = 0x00190300
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = 0x001A0300
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = 0x001B0300
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = 0x001C0300
                }

                If ((Arg0 == 0x04))
                {
                    Local0 = 0x001D0300
                }

                If ((Arg0 == 0x05))
                {
                    Local0 = 0x001E0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x001F0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x00090300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000A0300
                }

                If ((Arg0 == 0x06))
                {
                    Local0 = 0x000B0300
                }

                Local1 = A094 /* \_SB_.A094 */
                Local1 &= 0xFF00FCFF
                A094 = (Local0 | Local1)
                Local1 = A094 /* \_SB_.A094 */
                A094 = (0xFFFFFDFF & Local1)
            }
            ElseIf ((Arg1 == 0x00))
            {
                If ((Arg0 == 0x00))
                {
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0x00400000 | Local1)
                    Local1 = A095 /* \_SB_.A095 */
                    A095 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x01))
                {
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0x00400000 | Local1)
                    Local1 = A096 /* \_SB_.A096 */
                    A096 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x02))
                {
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0x00400000 | Local1)
                    Local1 = A097 /* \_SB_.A097 */
                    A097 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x03))
                {
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0x00400000 | Local1)
                    Local1 = A098 /* \_SB_.A098 */
                    A098 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x04))
                {
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0x00400000 | Local1)
                    Local1 = A099 /* \_SB_.A099 */
                    A099 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x05))
                {
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0x00400000 | Local1)
                    Local1 = A100 /* \_SB_.A100 */
                    A100 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x06))
                {
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0x00400000 | Local1)
                    Local1 = A101 /* \_SB_.A101 */
                    A101 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x07))
                {
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0x00400000 | Local1)
                    Local1 = A102 /* \_SB_.A102 */
                    A102 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x08))
                {
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0x00400000 | Local1)
                    Local1 = A103 /* \_SB_.A103 */
                    A103 = (0xFFBFFFFF & Local1)
                }

                If ((Arg0 == 0x09))
                {
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0x00400000 | Local1)
                    Local1 = A104 /* \_SB_.A104 */
                    A104 = (0xFFBFFFFF & Local1)
                }
            }
        }

        Method (A003, 2, NotSerialized)
        {
            Local0 = 0x00
            While ((Local0 < 0x0A))
            {
                Local1 = A092 (Local0, Arg1)
                If ((Local1 == 0x01))
                {
                    A093 (Local0, Arg1)
                    Break
                }

                Local0++
            }
        }

        Method (A011, 2, Serialized)
        {
            CreateDWordField (Arg1, 0x00, A105)
            CreateDWordField (Arg1, 0x04, A106)
            CreateDWordField (Arg1, 0x08, A107)
            CreateDWordField (Arg1, 0x0C, A108)
            CreateDWordField (Arg1, 0x10, A109)
            CreateDWordField (Arg1, 0x14, A110)
            A111 = 0x00
            While ((A111 != 0x00)) {}
            A112 = A105 /* \_SB_.A011.A105 */
            A113 = A106 /* \_SB_.A011.A106 */
            A114 = A107 /* \_SB_.A011.A107 */
            A115 = A108 /* \_SB_.A011.A108 */
            A116 = A109 /* \_SB_.A011.A109 */
            A117 = A110 /* \_SB_.A011.A110 */
            A118 = Arg0
            While ((A111 == 0x00)) {}
        }

        Method (A087, 5, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg0
            A006 = Arg1
            A007 = Arg2
            A008 = Arg3
            A011 (0x09, Local7)
        }

        Method (A025, 1, Serialized)
        {
            CreateWordField (Arg0, 0x00, A119)
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            While ((Local0 < A119))
            {
                Local1 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 = DerefOf (Arg0 [Local0])
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x10)
                Local0++
                Local2 |= (DerefOf (Arg0 [Local0]) << 0x18)
                Local0++
                A005 = 0x00
                A006 = 0x00
                A007 = 0x00
                A008 = 0x00
                A009 = 0x00
                A010 = 0x00
                If ((Local1 == 0x01))
                {
                    A005 = Local2
                    A011 (0x18, Local7)
                }

                If ((Local1 == 0x03))
                {
                    A005 = Local2
                    A011 (0x19, Local7)
                }

                If ((Local1 == 0x05))
                {
                    A005 = Local2
                    A011 (0x14, Local7)
                }

                If ((Local1 == 0x06))
                {
                    A005 = Local2
                    A011 (0x15, Local7)
                }

                If ((Local1 == 0x07))
                {
                    A005 = Local2
                    A011 (0x16, Local7)
                }

                If ((Local1 == 0x08))
                {
                    A005 = Local2
                    A011 (0x17, Local7)
                }

                If ((Local1 == 0x09))
                {
                    A005 = Local2
                    A011 (0x20, Local7)
                }

                If ((Local1 == 0x0B))
                {
                    A005 = Local2
                    A011 (0x1A, Local7)
                }

                If ((Local1 == 0x0C))
                {
                    A005 = Local2
                    A011 (0x1C, Local7)
                }

                If ((Local1 == 0x0D))
                {
                    A005 = Local2
                    A011 (0x1E, Local7)
                }

                If ((Local1 == 0x0E))
                {
                    A005 = Local2
                    A011 (0x1B, Local7)
                }

                If ((Local1 == 0x0F))
                {
                    A005 = Local2
                    A011 (0x1F, Local7)
                }

                If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
                {
                    If ((Local1 == 0x10))
                    {
                        If ((Local2 == 0x00))
                        {
                            A011 (0x26, Local7)
                        }
                        Else
                        {
                            A011 (0x25, Local7)
                        }
                    }
                }

                If ((Local1 == 0x11))
                {
                    A005 = Local2
                    A011 (0x1D, Local7)
                }

                If ((Local1 == 0x20))
                {
                    A005 = Local2
                    A011 (0x36, Local7)
                }

                If ((Local1 == 0x21))
                {
                    A005 = Local2
                    A011 (0x37, Local7)
                }

                If ((Local1 == 0x22))
                {
                    A005 = Local2
                    A011 (0x38, Local7)
                }

                If ((Local1 == 0x23))
                {
                    A005 = Local2
                    A011 (0x39, Local7)
                }

                If ((Local1 == 0x24))
                {
                    A005 = Local2
                    A011 (0x3A, Local7)
                }

                If ((Local1 == 0x25))
                {
                    A005 = Local2
                    A011 (0x3B, Local7)
                }

                If ((Local1 == 0x26))
                {
                    A005 = Local2
                    A011 (0x3C, Local7)
                }

                If ((Local1 == 0x27))
                {
                    A005 = Local2
                    A011 (0x3D, Local7)
                }

                If ((Local1 == 0x28))
                {
                    A005 = Local2
                    A011 (0x3E, Local7)
                }

                If ((Local1 == 0x29))
                {
                    A005 = Local2
                    A011 (0x3F, Local7)
                }

                If ((Local1 == 0x2A))
                {
                    A005 = Local2
                    A011 (0x40, Local7)
                }

                If ((Local1 == 0x2B))
                {
                    A005 = Local2
                    A011 (0x41, Local7)
                }

                If ((Local1 == 0x2C))
                {
                    A005 = Local2
                    A011 (0x42, Local7)
                }

                If ((Local1 == 0x2D))
                {
                    A005 = Local2
                    A011 (0x43, Local7)
                }

                If ((Local1 == 0x2E))
                {
                    A005 = Local2
                    A011 (0x53, Local7)
                }
            }
        }

        Device (AWR0)
        {
            Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
            Name (_UID, 0x90)  // _UID: Unique ID
            Device (ABR0)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x80)  // _UID: Unique ID
                Name (AB12, 0x20)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR0.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR0.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR0.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR0.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR0.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR0.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR0.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR0.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR1)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x81)  // _UID: Unique ID
                Name (AB12, 0x34)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR1.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR1.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR1.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR1.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR1.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR1.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR1.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR1.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR2)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x82)  // _UID: Unique ID
                Name (AB12, 0x48)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR2.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR2.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR2.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR2.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR2.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR2.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR2.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR2.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR3)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x83)  // _UID: Unique ID
                Name (AB12, 0x5C)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR3.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR3.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR3.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR3.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR3.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR3.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR3.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR3.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR4)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x84)  // _UID: Unique ID
                Name (AB12, 0x70)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR4.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR4.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR4.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR4.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR4.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR4.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR4.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR4.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR5)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x85)  // _UID: Unique ID
                Name (AB12, 0x84)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR5.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR5.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR5.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR5.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR5.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR5.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR5.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR5.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR6)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x86)  // _UID: Unique ID
                Name (AB12, 0x98)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR6.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR6.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR6.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR6.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR6.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR6.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR6.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR6.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR7)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x87)  // _UID: Unique ID
                Name (AB12, 0xAC)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR7.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR7.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR7.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR7.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR7.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR7.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR7.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR7.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR8)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x88)  // _UID: Unique ID
                Name (AB12, 0xC0)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR8.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR8.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR8.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR8.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR8.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR8.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR8.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR8.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }

            Device (ABR9)
            {
                Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                Name (_UID, 0x89)  // _UID: Unique ID
                Name (AB12, 0xD4)
                Name (AB00, 0x00)
                Name (AB01, 0x00)
                Name (AB0E, 0x00)
                Name (AB02, 0x00)
                Name (AB03, 0x00)
                Name (AB04, 0x00)
                Name (AB05, 0x00)
                Name (AB06, 0x00)
                Name (AB07, 0x00)
                Name (AB08, 0x00)
                Name (AB09, 0x00)
                Name (AB0A, 0x00)
                Name (AB0B, 0x00)
                Name (AB0C, 0x00)
                Name (AB0D, 0x00)
                OperationRegion (A077, SystemMemory, (AGRB + ((DerefOf (\_SB.ADAT [(AB12 + 0x0D)]
                    ) << 0x0F) | (DerefOf (\_SB.ADAT [(AB12 + 0x0E)]) << 0x0C
                    ))), 0x1000)
                Field (A077, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x18), 
                    Offset (0x19), 
                    A071,   8, 
                    A072,   8, 
                    Offset (0x68), 
                    A078,   2, 
                        ,   2, 
                    A079,   1, 
                    A080,   1, 
                    Offset (0x6A), 
                        ,   11, 
                    A081,   1, 
                    Offset (0x88), 
                    A082,   4, 
                        ,   1, 
                    A083,   1
                }

                Name (AB10, 0x00)
                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    AB00 = DerefOf (\_SB.ADAT [(AB12 + 0x00)])
                    AB0E = DerefOf (\_SB.ADAT [(AB12 + 0x01)])
                    AB01 = DerefOf (\_SB.ADAT [(AB12 + 0x02)])
                    AB02 = DerefOf (\_SB.ADAT [(AB12 + 0x03)])
                    AB03 = DerefOf (\_SB.ADAT [(AB12 + 0x04)])
                    AB04 = DerefOf (\_SB.ADAT [(AB12 + 0x05)])
                    AB05 = DerefOf (\_SB.ADAT [(AB12 + 0x06)])
                    AB06 = DerefOf (\_SB.ADAT [(AB12 + 0x07)])
                    AB07 = DerefOf (\_SB.ADAT [(AB12 + 0x08)])
                    AB08 = DerefOf (\_SB.ADAT [(AB12 + 0x09)])
                    AB09 = DerefOf (\_SB.ADAT [(AB12 + 0x0A)])
                    AB0A = DerefOf (\_SB.ADAT [(AB12 + 0x0B)])
                    AB0B = DerefOf (\_SB.ADAT [(AB12 + 0x0C)])
                    AB0C = DerefOf (\_SB.ADAT [(AB12 + 0x0D)])
                    AB0D = DerefOf (\_SB.ADAT [(AB12 + 0x0E)])
                }

                Method (A066, 0, NotSerialized)
                {
                    Local0 = A048 ()
                    If ((Local0 == 0x01))
                    {
                        Return (AB01) /* \_SB_.AWR0.ABR9.AB01 */
                    }

                    If ((Local0 == 0x00))
                    {
                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }
                }

                Method (A061, 0, NotSerialized)
                {
                    If ((AB10 != 0x00))
                    {
                        If ((AB10 == 0x01))
                        {
                            Return (0x01)
                        }
                    }

                    Return (0x00)
                }

                Method (A067, 0, NotSerialized)
                {
                    If ((AB05 != 0x00))
                    {
                        Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                    }

                    If ((AB10 > 0x01))
                    {
                        Return ((AB10 - 0x01))
                    }

                    Return (0x00)
                }

                Method (A060, 0, NotSerialized)
                {
                    If ((\_SB.AP05 == 0x00))
                    {
                        If ((AB05 != 0x00))
                        {
                            Return (AB05) /* \_SB_.AWR0.ABR9.AB05 */
                        }

                        Return (AB0E) /* \_SB_.AWR0.ABR9.AB0E */
                    }

                    Local0 = A067 ()
                    If ((Local0 != 0x00))
                    {
                        If ((Local0 > AB00))
                        {
                            Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                        }
                        Else
                        {
                            Return (Local0)
                        }
                    }

                    Local0 = A066 ()
                    If ((\_SB.AP03 != 0x00))
                    {
                        If ((\_SB.AP03 < Local0))
                        {
                            Return (\_SB.AP03)
                        }
                    }

                    Return (Local0)
                }

                Method (A059, 0, NotSerialized)
                {
                    Return (AB02) /* \_SB_.AWR0.ABR9.AB02 */
                }

                Method (A062, 0, NotSerialized)
                {
                    Return (AB00) /* \_SB_.AWR0.ABR9.AB00 */
                }

                Method (A058, 1, NotSerialized)
                {
                    AB02 = Arg0
                    A068 (Arg0)
                    If ((AB10 != 0x00)) {}
                    Else
                    {
                    }

                    A069 (0x00)
                    Name (A070, 0x00)
                    A069 (0x01)
                }

                Method (A063, 1, NotSerialized)
                {
                    AB10 = Arg0
                }

                Method (A064, 1, NotSerialized)
                {
                    Local0 = (Arg0 >> 0x08)
                    If (((Local0 >= A071) && (Local0 <= A072)))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A073, 1, NotSerialized)
                {
                    Local0 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == Local0))
                    {
                        Return (0x01)
                    }

                    Return (0x00)
                }

                Method (A065, 0, NotSerialized)
                {
                    AB10 = 0x00
                }

                Method (A068, 1, NotSerialized)
                {
                    If ((Arg0 >= 0x02)) {}
                    If ((Arg0 >= 0x03)) {}
                    If ((Arg0 == 0x01))
                    {
                        If ((AB04 == 0x01)) {}
                    }
                    Else
                    {
                    }
                }

                Method (A074, 1, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = A075 (Local0, 0x00)
                    Local2 = A075 (Local0, 0x08)
                    If ((Local1 != 0xFFFFFFFF))
                    {
                        Local3 = ((Local1 >> 0x10) & 0xFFFF)
                        Local1 &= 0xFFFF
                        Local2 = ((Local2 >> 0x18) & 0xFF)
                        If ((Local2 == 0x03))
                        {
                            If (((Local1 == 0x1002) || (Local1 == 0x1022)))
                            {
                                Local0 = 0x10
                                While ((Local0 < 0x30))
                                {
                                    Local4 = A075 (0x00, Local0)
                                    Local5 = 0x00
                                    If ((((Local4 & 0x09) == 0x00) && (Local4 != 0x00)))
                                    {
                                        If (((Local4 & 0x06) == 0x04))
                                        {
                                            Local0 += 0x04
                                            Local5 = A075 (0x00, Local0)
                                        }

                                        If ((Arg0 != 0x00))
                                        {
                                            A076 (0x23, (Local4 & 0xFFFFFFF0), 0x00)
                                            A076 (0x24, Local5, 0x00)
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x05, 0x00, (0x01 << 0x0A))
                                            A076 (0x25, 0x00, 0x00)
                                            Break
                                        }
                                        Else
                                        {
                                            A076 (0x26, 0x00, 0x00)
                                            A076 (0x07, 0x00, (0x01 << 0x0A))
                                            Break
                                        }
                                    }
                                    ElseIf (((Local4 && 0x06) == 0x04))
                                    {
                                        Local0 += 0x04
                                    }

                                    Local0 += 0x04
                                }
                            }
                        }
                    }
                }

                Method (A088, 2, NotSerialized)
                {
                    If ((A075 (Arg0, 0x00) == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }

                    Local0 = A075 (Arg0, 0x34)
                    While (0x01)
                    {
                        Local1 = A075 (Arg0, (Local0 & 0xFF))
                        If (((Local1 & 0xFF) == Arg1))
                        {
                            Return ((Local0 & 0xFF))
                        }

                        Local0 = ((Local1 >> 0x08) & 0xFF)
                        If ((Local0 == 0x00))
                        {
                            Return (Local0)
                        }
                    }
                }

                Name (AESP, Package (0x08)
                {
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00, 
                    0x00
                })
                Method (A069, 1, NotSerialized)
                {
                    Local0 = 0x00
                    If ((A075 (Local0, 0x00) != 0xFFFFFFFF))
                    {
                        Local1 = (A075 (Local0, 0x08) & 0x80)
                        If ((Local1 == 0x80))
                        {
                            Local7 = 0x07
                        }
                        Else
                        {
                            Local7 = 0x00
                        }

                        While ((Local0 <= Local7))
                        {
                            Local1 = A088 (Local0, 0x10)
                            If ((Local1 == 0x00))
                            {
                                Local0++
                                Continue
                            }

                            If ((Arg0 == 0x00))
                            {
                                Local2 = A075 (Local0, (Local1 + 0x10))
                                A086 (Local0, (Local1 + 0x10), (Local2 & ~0x03))
                                AESP [Local0] = Local2
                            }
                            Else
                            {
                                Local2 = DerefOf (AESP [Local0])
                                A086 (Local0, (Local1 + 0x10), Local2)
                            }

                            Local0++
                        }
                    }
                    Else
                    {
                    }
                }

                Method (A086, 3, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    ADRR = Arg2
                }

                Method (A075, 2, Serialized)
                {
                    Local0 = (AGRB + (A072 << 0x14))
                    Local0 += (Arg0 << 0x0C)
                    Local0 += Arg1
                    OperationRegion (ADRB, SystemMemory, Local0, 0x04)
                    Field (ADRB, DWordAcc, NoLock, Preserve)
                    {
                        ADRR,   32
                    }

                    Return (ADRR) /* \_SB_.AWR0.ABR9.A075.ADRR */
                }

                Method (A084, 1, NotSerialized)
                {
                    If ((AB0B != 0x01))
                    {
                        Return (0x00)
                    }

                    Return (A073 (Arg0))
                }

                Method (A085, 1, NotSerialized)
                {
                    Name (A070, 0x00)
                    Local2 = 0x00
                    A070 = A078 /* \_SB_.AWR0.ABR9.A078 */
                    Local1 = (AB0D | (AB0C << 0x03))
                    If ((Arg0 == 0x01))
                    {
                        A079 = 0x00
                        Local0 = 0x01
                    }
                    Else
                    {
                        A069 (0x00)
                        Local0 = A075 (0x00, 0x04)
                        If ((Local0 != 0xFFFFFFFF))
                        {
                            A086 (0x00, 0x04, (Local0 & ~0x04))
                            Local0 = A075 (0x01, 0x04)
                            If ((Local0 != 0xFFFFFFFF))
                            {
                                A086 (0x01, 0x04, (Local0 & ~0x04))
                            }
                        }

                        Local2 = 0x00
                        A079 = 0x01
                        Local0 = 0x05
                    }

                    A078 = 0x00
                    While ((Local0 != 0x08))
                    {
                        If ((Local0 == 0x01))
                        {
                            A087 (0x29, Local1, 0x00, 0x00, 0x00)
                            Local2 = 0x01
                            Local0 = 0x08
                        }

                        If ((Local0 == 0x05))
                        {
                            A075 (0x00, 0x00)
                            A087 (0x2A, Local1, 0x00, 0x00, 0x00)
                            AB05 = 0x00
                            AB04 = 0x00
                            AB10 = 0x00
                            Local2 = 0x00
                            Local0 = 0x08
                        }
                    }

                    A078 = A070 /* \_SB_.AWR0.ABR9.A085.A070 */
                    If ((A070 != 0x00))
                    {
                        A069 (0x01)
                    }

                    Return (Local2)
                }
            }
        }

        Method (A122, 1, Serialized)
        {
            If ((DerefOf (\_SB.ADAT [0x08]) == 0x01))
            {
                Local0 = 0x00
                While ((Local0 < 0x0A))
                {
                    A123 (Local0, Arg0)
                    Local0++
                }
            }
        }

        Method (A076, 3, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = Arg1
            A006 = Arg2
            A011 (Arg0, Local7)
        }

        Method (A123, 2, NotSerialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (\_SB.AWR0.ABR0.A074 (Arg1))
            }

            If ((Arg0 == 0x01))
            {
                Return (\_SB.AWR0.ABR1.A074 (Arg1))
            }

            If ((Arg0 == 0x02))
            {
                Return (\_SB.AWR0.ABR2.A074 (Arg1))
            }

            If ((Arg0 == 0x03))
            {
                Return (\_SB.AWR0.ABR3.A074 (Arg1))
            }

            If ((Arg0 == 0x04))
            {
                Return (\_SB.AWR0.ABR4.A074 (Arg1))
            }

            If ((Arg0 == 0x05))
            {
                Return (\_SB.AWR0.ABR5.A074 (Arg1))
            }

            If ((Arg0 == 0x06))
            {
                Return (\_SB.AWR0.ABR6.A074 (Arg1))
            }

            If ((Arg0 == 0x07))
            {
                Return (\_SB.AWR0.ABR7.A074 (Arg1))
            }

            If ((Arg0 == 0x08))
            {
                Return (\_SB.AWR0.ABR8.A074 (Arg1))
            }

            If ((Arg0 == 0x09))
            {
                Return (\_SB.AWR0.ABR9.A074 (Arg1))
            }
        }

        Method (A038, 1, Serialized)
        {
            Local0 = 0x00
            Local6 = DerefOf (Arg0 [Local0])
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            Local0 = 0x02
            Local1 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 = DerefOf (Arg0 [Local0])
            Local0++
            Local2 |= (DerefOf (Arg0 [Local0]) << 0x08)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((Local1 == 0x00))
            {
                A005 = Local2
                A122 (0x00)
            }

            If ((Local1 == 0x01))
            {
                A005 = Local2
                A122 (0x01)
            }

            If ((Local1 == 0x02))
            {
                A005 = Local2
                A011 (0x25, Local7)
            }

            If ((Local1 == 0x03))
            {
                A005 = Local2
                A011 (0x26, Local7)
            }
        }

        Name (A001, 0x01)
        Name (A002, 0x00)
        Method (APTS, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (AWAK, 1, NotSerialized)
        {
            If ((Arg0 == 0x03)) {}
        }

        Method (APPM, 1, NotSerialized)
        {
            Local0 = DerefOf (Arg0 [0x04])
            Local1 = DerefOf (Arg0 [0x02])
            A003 (Local0, Local1)
        }

        Method (A004, 0, NotSerialized)
        {
            Local7 = Buffer (0x18) {}
            CreateDWordField (Local7, 0x00, A005)
            CreateDWordField (Local7, 0x04, A006)
            CreateDWordField (Local7, 0x08, A007)
            CreateDWordField (Local7, 0x0C, A008)
            CreateDWordField (Local7, 0x10, A009)
            CreateDWordField (Local7, 0x14, A010)
            A005 = 0x00
            A006 = 0x00
            A007 = 0x00
            A008 = 0x00
            A009 = 0x00
            A010 = 0x00
            If ((AD00 == 0x00))
            {
                A011 (0x11, Local7)
            }
            Else
            {
                A011 (0x12, Local7)
            }
        }

        Method (A012, 2, NotSerialized)
        {
        }
    }
}



SSDT3
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.PLTF, DeviceObj)

    Scope (\_SB.PLTF)
    {
        Name (_LPI, Package (0x04)  // _LPI: Low Power Idle States
        {
            0x00, 
            0x00, 
            0x01, 
            Package (0x0A)
            {
                0x000F4240, 
                0xC350, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                ResourceTemplate ()
                {
                    Register (SystemMemory, 
                        0x00,               // Bit Width
                        0x00,               // Bit Offset
                        0x0000000000000000, // Address
                        ,)
                }, 

                "S0i3"
            }
        })
    }
}



SSDT4
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.LID_._LID, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.GP17.VGA_, DeviceObj)
    External (_SB_.PCI0.GP17.VGA_.FIRT, UnknownObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M012, MethodObj)    // 5 Arguments
    External (M013, MethodObj)    // 4 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M020, MethodObj)    // 5 Arguments
    External (M021, MethodObj)    // 4 Arguments
    External (M023, MethodObj)    // 3 Arguments
    External (M024, MethodObj)    // 3 Arguments
    External (M025, MethodObj)    // 3 Arguments
    External (M026, MethodObj)    // 3 Arguments
    External (M037, DeviceObj)
    External (M043, MethodObj)    // 3 Arguments
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M049, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M111, MethodObj)    // 2 Arguments
    External (M112, MethodObj)    // 2 Arguments
    External (M113, MethodObj)    // 1 Arguments
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M232, MethodObj)    // 3 Arguments
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M251, FieldUnitObj)
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)

    Scope (\_SB)
    {
        Name (MACO, 0x00)
    }

    Scope (\_SB.PCI0.GP17.VGA)
    {
        Name (M189, Buffer (0x0100) {})
        Name (M190, 0xFFFFFFFF)
        Name (M191, 0xFFFFFFFF)
        Method (ATPX, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (PX00 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (PX01 ())
            }

            If ((Arg0 == 0x02))
            {
                PX02 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x03))
            {
                PX03 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x04))
            {
                PX04 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x08))
            {
                Return (PX08 ())
            }

            If ((Arg0 == 0x09))
            {
                Return (PX09 ())
            }

            If ((Arg0 == 0x0A))
            {
                PX10 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            If ((Arg0 == 0x0B))
            {
                PX11 (DerefOf (Arg1 [0x02]))
                Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
            }

            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x00
            M158 = 0x00
            M160 = 0x00
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX00, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M158)
            CreateDWordField (M189, 0x04, M160)
            M157 = 0x08
            M158 = 0x01
            M160 = M098 /* External reference */
            If (M098)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local0 = M019 (M095, M094, M093, 0x2C)
                Local1 = M019 (M095, M094, (M093 + 0x01), 0x2C)
                If ((Local0 != Local5))
                {
                    M190 = Local0
                }

                If ((Local1 != Local5))
                {
                    M191 = Local1
                }
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX01, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateDWordField (M189, 0x02, M161)
            CreateDWordField (M189, 0x06, M162)
            M157 = 0x0A
            M161 = 0x0003FC80
            M162 = M099 /* External reference */
            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX02, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & 0x01)
            Local7 = Buffer (0x05) {}
            CreateWordField (Local7, 0x00, M197)
            CreateField (Local7, 0x10, 0x03, M200)
            CreateField (Local7, 0x13, 0x05, M199)
            CreateByteField (Local7, 0x03, M198)
            CreateByteField (Local7, 0x04, M201)
            M197 = 0x05
            M198 = 0x00
            M199 = M091 /* External reference */
            M200 = M090 /* External reference */
            Name (HPOK, 0x00)
            Local0 = M049 (M133, 0x11)
            Local6 = M113 (Local0)
            M023 (0x00, M091, M090)
            If ((M192 && Local6))
            {
                M000 (0x86)
                M112 (Local0, 0x00)
                M111 (Local0, 0x01)
                Sleep (0x20)
                M112 (Local0, 0x02)
                M112 (Local0, 0x01)
                M000 (0x87)
                HPOK = 0x00
                Sleep (0x14)
                M201 = 0x01
                Local6 = \_SB.ALIB (0x06, Local7)
                Local2 = 0x00
                While ((Local2 < 0x0F))
                {
                    M023 (0x00, M091, M090)
                    Local4 = 0x01
                    Local5 = 0xC8
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (0x00, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 >= 0x10) && (Local0 != 0x7F)))
                        {
                            Local4 = 0x00
                        }
                        Else
                        {
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    If (!Local4)
                    {
                        Local5 = M024 (0x00, M091, M090)
                        If (Local5)
                        {
                            M026 (0x00, M091, M090)
                            Sleep (0x05)
                            Local2++
                        }
                        Else
                        {
                            Local0 = 0x00
                            If ((M025 (0x00, M091, M090) == Ones))
                            {
                                Local0 = 0x01
                            }

                            If (Local0)
                            {
                                M111 (M049 (M133, 0x17), 0x01)
                                M111 (M049 (M133, 0x18), 0x01)
                                HPOK = 0x01
                                Local2 = 0x10
                            }
                            Else
                            {
                                HPOK = 0x00
                                Local2 = 0x10
                            }
                        }
                    }
                    Else
                    {
                        Local2 = 0x10
                    }
                }

                If (!HPOK)
                {
                    M000 (0x88)
                    Local1 = M019 (M095, M094, M093, 0x00)
                    Sleep (0x0A)
                    Local4 = 0x01
                    Local5 = 0x05
                    While ((Local4 && Local5))
                    {
                        Local0 = M021 (0x00, M091, M090, 0xA5)
                        Local0 &= 0x7F
                        If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                        {
                            Local4 = 0x00
                        }
                        Else
                        {
                            Local0 = M019 (M095, M094, M093, 0x00)
                            Sleep (0x05)
                            Local5--
                        }
                    }

                    M201 = 0x00
                    \_SB.ALIB (0x06, Local7)
                }

                If ((M097 != 0x00))
                {
                    Local0 = M019 (0x00, M091, M090, 0x54)
                    M020 (0x00, M091, M090, 0x54, (Local0 & 0xFFFF7FFC))
                    M232 (M097, 0x00, 0x10)
                    M020 (0x00, M091, M090, 0x54, (Local0 & 0xFFFF7FFF))
                }

                M000 (0x89)
            }
            Else
            {
                M000 (0x8A)
                M201 = 0x00
                \_SB.ALIB (0x06, Local7)
                M000 (0x8B)
                M111 (M049 (M133, 0x17), 0x00)
                M111 (M049 (M133, 0x18), 0x00)
                M112 (Local0, 0x00)
                Sleep (0x0A)
                M111 (Local0, 0x00)
                M023 (0x00, M091, M090)
                Local1 = M019 (M095, M094, M093, 0x00)
                Sleep (0x0A)
                Local4 = 0x01
                Local5 = 0x05
                While ((Local4 && Local5))
                {
                    Local0 = M021 (0x00, M091, M090, 0xA5)
                    Local0 &= 0x7F
                    If (((Local0 <= 0x04) || (Local0 == 0x1F)))
                    {
                        Local4 = 0x00
                    }
                    Else
                    {
                        Local1 = M019 (M095, M094, M093, 0x00)
                        Sleep (0x05)
                        Local5--
                    }
                }

                HPOK = 0x02
                M000 (0x8C)
            }

            If (HPOK)
            {
                Local5 = 0x7FFFFFFF
                Local5 |= 0x80000000
                Local1 = M019 (0x00, M091, M090, 0x54)
                M020 (0x00, M091, M090, 0x54, (Local1 & 0xFFFF7FFC))
                Local0 = M019 (M095, M094, M093, 0x00)
                If (((HPOK == 0x01) && (Local0 != Local5)))
                {
                    M020 (M095, M094, M093, 0x4C, M190)
                    Sleep (0x0A)
                    If ((M191 != Local5))
                    {
                        M020 (M095, M094, (M093 + 0x01), 0x4C, M191)
                    }

                    Sleep (0x0A)
                }

                M020 (0x00, M091, M090, 0x54, (Local1 & 0xFFFF7FFF))
            }
        }

        Method (PX03, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M195)
            M157 = 0x04
            M195 = (Arg0 & 0x01)
            If (M195)
            {
                M111 (M049 (M133, 0x17), 0x01)
            }
            Else
            {
                M111 (M049 (M133, 0x17), 0x00)
            }
        }

        Method (PX04, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateWordField (M189, 0x02, M196)
            M157 = 0x04
            M196 = (Arg0 & 0x01)
            If (M196)
            {
                M111 (M049 (M133, 0x18), 0x01)
            }
            Else
            {
                M111 (M049 (M133, 0x18), 0x00)
            }
        }

        Method (PX08, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x19)
            M193 = Local0
            M157 = 0x05
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX08.M157 */
            Local1 = 0x00
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x1A + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX09, 0, NotSerialized)
        {
            CreateWordField (M189, 0x00, M193)
            CreateWordField (M189, 0x02, M157)
            Local0 = M049 (M133, 0x7E)
            M193 = Local0
            M157 = 0x03
            Local0 *= M157 /* \_SB_.PCI0.GP17.VGA_.PX09.M157 */
            Local1 = 0x00
            While ((Local1 < Local0))
            {
                Local2 = M049 (M133, (0x7F + Local1))
                M189 [(0x04 + Local1)] = Local2
                Local1++
            }

            Return (M189) /* \_SB_.PCI0.GP17.VGA_.M189 */
        }

        Method (PX10, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M192)
            M157 = 0x03
            M192 = (Arg0 & 0x01)
            \_SB.MACO = (Arg0 & 0x01)
        }

        Method (PX11, 1, NotSerialized)
        {
            CreateWordField (M189, 0x00, M157)
            CreateByteField (M189, 0x02, M162)
            M157 = 0x03
            M162 = (Arg0 & 0x01)
            Local2 = M162 /* \_SB_.PCI0.GP17.VGA_.PX11.M162 */
            Local0 = M131 /* External reference */
            If (Local0)
            {
                Local0 = M049 (M131, 0x10)
                Local1 = M049 (M131, 0x11)
                Local1 = (M084 + ((Local0 * 0x0100) + Local1))
                M012 (Local1, 0x0E, 0x00, 0x08, Local2)
            }
        }

        Name (ATIB, Buffer (0x0100) {})
        Method (ATIF, 2, Serialized)
        {
            If ((Arg0 == 0x00))
            {
                Return (AF00 ())
            }

            If ((Arg0 == 0x01))
            {
                Return (AF01 ())
            }

            If ((Arg0 == 0x02))
            {
                Return (AF02 ())
            }

            If ((Arg0 == 0x03))
            {
                Return (AF03 (DerefOf (Arg1 [0x02]), DerefOf (Arg1 [0x04])))
            }

            If ((Arg0 == 0x04))
            {
                Return (AF04 ())
            }

            If ((Arg0 == 0x0F))
            {
                Return (AF15 ())
            }

            If ((Arg0 == 0x10))
            {
                Return (AF16 (DerefOf (Arg1 [0x02])))
            }
            Else
            {
                CreateWordField (ATIB, 0x00, M157)
                CreateWordField (ATIB, 0x02, M158)
                CreateDWordField (ATIB, 0x04, M159)
                CreateDWordField (ATIB, 0x08, M160)
                M157 = 0x00
                M158 = 0x00
                M159 = 0x00
                M160 = 0x00
                Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
            }
        }

        Method (AF00, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateWordField (ATIB, 0x02, M158)
            CreateDWordField (ATIB, 0x04, M159)
            CreateDWordField (ATIB, 0x08, M160)
            M157 = 0x0C
            M158 = 0x01
            M159 = M101 /* External reference */
            If (!CondRefOf (\_SB.LID._LID))
            {
                M102 &= 0xFFFFFFF7
            }

            M160 = M102 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF01, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateDWordField (ATIB, 0x02, M161)
            CreateDWordField (ATIB, 0x06, M162)
            CreateByteField (ATIB, 0x0A, M163)
            Local0 = (M103 & 0xFF000000)
            Local1 = (M103 & 0x03)
            If ((Local1 == 0x02))
            {
                M157 = 0x0B
                M161 = 0x03
                M162 = Local1
                M163 = Local0
            }
            Else
            {
                M157 = 0x0A
                M161 = 0x03
                M162 = M103 /* External reference */
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Name (M164, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                           // ....
        })
        Name (M210, 0x00)
        Name (M211, 0x00)
        Name (M212, 0x00)
        Name (M213, 0x00)
        Name (M214, 0x00)
        Name (M215, 0x00)
        Name (M303, 0x00)
        Name (M304, 0x00)
        Name (SSDM, 0x0A)
        Name (SCDY, 0x00)
        Method (AF02, 0, NotSerialized)
        {
            CreateBitField (M164, 0x00, M165)
            CreateBitField (M164, 0x01, M166)
            CreateBitField (M164, 0x02, M167)
            CreateBitField (M164, 0x03, M168)
            CreateBitField (M164, 0x04, M169)
            CreateBitField (M164, 0x05, M170)
            CreateBitField (M164, 0x06, M171)
            CreateBitField (M164, 0x07, M172)
            CreateBitField (M164, 0x08, M173)
            CreateBitField (M164, 0x0C, M300)
            CreateWordField (ATIB, 0x00, M157)
            CreateDWordField (ATIB, 0x02, M174)
            CreateByteField (ATIB, 0x06, M175)
            CreateByteField (ATIB, 0x07, M176)
            CreateByteField (ATIB, 0x08, M177)
            CreateByteField (ATIB, 0x09, M178)
            CreateByteField (ATIB, 0x0A, M179)
            CreateByteField (ATIB, 0x0B, M180)
            CreateByteField (ATIB, 0x0C, M181)
            CreateByteField (ATIB, 0x0D, M301)
            CreateDWordField (ATIB, 0x0E, M302)
            M157 = 0x0D
            M174 = M164 /* \_SB_.PCI0.GP17.VGA_.M164 */
            If (M165)
            {
                M165 = Zero
            }

            If (M166)
            {
                M175 = M210 /* \_SB_.PCI0.GP17.VGA_.M210 */
                M210 = Zero
                M166 = Zero
            }

            If (M167)
            {
                M176 = M211 /* \_SB_.PCI0.GP17.VGA_.M211 */
                M177 = M212 /* \_SB_.PCI0.GP17.VGA_.M212 */
                M211 = Zero
                M212 = Zero
                M167 = Zero
            }

            If (M168)
            {
                M178 = M213 /* \_SB_.PCI0.GP17.VGA_.M213 */
                M179 = M214 /* \_SB_.PCI0.GP17.VGA_.M214 */
                M213 = Zero
                M214 = Zero
                M168 = Zero
            }

            If (M169)
            {
                M180 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M169 = Zero
            }

            If (M171)
            {
                M171 = Zero
            }

            If (M172)
            {
                M172 = Zero
            }

            If (M173)
            {
                M173 = Zero
            }

            If (M300)
            {
                M301 = M303 /* \_SB_.PCI0.GP17.VGA_.M303 */
                M302 = M304 /* \_SB_.PCI0.GP17.VGA_.M304 */
                M303 = Zero
                M304 = Zero
                M300 = Zero
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF03, 2, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateWordField (ATIB, 0x02, M182)
            CreateWordField (ATIB, 0x04, M183)
            M182 = Arg0
            M183 = Arg1
            Name (M184, 0x06)
            Name (M185, 0x06)
            Name (M186, Buffer (0x14)
            {
                 0x00                                             // .
            })
            Name (M187, 0x00)
            M187 = M049 (M133, 0xBF)
            Local1 = 0x00
            While ((Local1 < M187))
            {
                Local2 = M049 (M133, (0xC0 + Local1))
                M186 [Local1] = Local2
                Local1++
            }

            Local1 = M182 /* \_SB_.PCI0.GP17.VGA_.AF03.M182 */
            Local1 &= 0x8B
            Local2 = M183 /* \_SB_.PCI0.GP17.VGA_.AF03.M183 */
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local2 &= 0xFFFFFFFE
                Local2 |= Local0
            }

            Local0 = Zero
            While ((Local0 < M187))
            {
                Local3 = DerefOf (M186 [Local0])
                If ((Local3 == Local1))
                {
                    M185 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
                Else
                {
                    Local0++
                }
            }

            Local0 = M185 /* \_SB_.PCI0.GP17.VGA_.AF03.M185 */
            While ((Local0 < M187))
            {
                Local0++
                If ((Local0 == M187))
                {
                    Local0 = 0x00
                }

                Local3 = DerefOf (M186 [Local0])
                If (((Local3 & Local2) == Local3))
                {
                    M184 = Local0
                    Local0 = M187 /* \_SB_.PCI0.GP17.VGA_.AF03.M187 */
                }
            }

            If ((M184 == M187))
            {
                M182 = Zero
            }
            Else
            {
                Local0 = M184 /* \_SB_.PCI0.GP17.VGA_.AF03.M184 */
                Local3 = DerefOf (M186 [Local0])
                M182 &= 0xFFFFFFF4
                M182 |= Local3
            }

            M157 = 0x04
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF04, 0, NotSerialized)
        {
            CreateWordField (ATIB, 0x00, M157)
            CreateByteField (ATIB, 0x02, M188)
            M157 = 0x03
            Local1 = 0x00
            If (CondRefOf (\_SB.LID._LID))
            {
                Local0 = \_SB.LID._LID ()
                Local1 = (Local0 ^ 0x01)
            }

            M188 = Local1
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF15, 0, NotSerialized)
        {
            ATIB = M104 /* External reference */
            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AF16, 1, NotSerialized)
        {
            Local0 = M013 (M133, 0xD4, 0x00, 0x10)
            If (Local0)
            {
                Local1 = 0x00
                While ((Local1 < Local0))
                {
                    Local2 = M049 (M133, (0xD4 + Local1))
                    ATIB [Local1] = Local2
                    Local1++
                }
            }
            Else
            {
                Local3 = M043 (0x00, Arg0, 0x00)
                If ((ObjectType (Local3) == 0x03))
                {
                    ATIB = Local3
                }
                Else
                {
                    ATIB [0x00] = 0x05
                    ATIB [0x01] = 0x00
                    ATIB [0x02] = 0x00
                    ATIB [0x03] = 0x00
                    ATIB [0x04] = 0x02
                }
            }

            Return (ATIB) /* \_SB_.PCI0.GP17.VGA_.ATIB */
        }

        Method (AFN0, 0, Serialized)
        {
            If ((M101 & 0x01))
            {
                CreateBitField (M164, 0x00, M165)
                M165 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN1, 1, Serialized)
        {
            If ((M101 & 0x02))
            {
                Local0 = Arg0
                M210 = Local0
                CreateBitField (M164, 0x01, M166)
                M166 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN2, 2, Serialized)
        {
            If ((M101 & 0x04))
            {
                Local0 = Arg0
                M212 = Local0
                Local0 = Arg1
                M211 = Local0 &= 0x03
                CreateBitField (M164, 0x02, M167)
                M167 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN3, 2, Serialized)
        {
            If ((M101 & 0x08))
            {
                Local0 = Arg0
                M214 = Local0
                Local0 = Arg1
                M213 = Local0 &= 0x03
                CreateBitField (M164, 0x03, M168)
                M168 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN4, 1, Serialized)
        {
            FIRT = 0x00
            If ((M101 & 0x10))
            {
                Local0 = Arg0
                Local1 = M215 /* \_SB_.PCI0.GP17.VGA_.M215 */
                M215 = Local0
                If ((Local0 == Local1)) {}
                Else
                {
                    CreateBitField (M164, 0x04, M169)
                    M169 = One
                    Notify (VGA, 0x81) // Information Change
                }
            }
        }

        Method (AFN5, 0, Serialized)
        {
            If ((M101 & 0x20))
            {
                CreateBitField (M164, 0x05, M170)
                M170 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN6, 0, Serialized)
        {
            If ((M101 & 0x40))
            {
                CreateBitField (M164, 0x06, M171)
                M171 = One
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN7, 1, Serialized)
        {
            If ((M101 & 0x80))
            {
                CreateBitField (M164, 0x07, M172)
                M172 = One
                CreateByteField (ATIB, 0x0C, M181)
                M181 = Arg0
                Notify (VGA, 0x81) // Information Change
            }
        }

        Method (AFN8, 0, Serialized)
        {
            If ((M101 & 0x0100))
            {
                CreateBitField (M164, 0x08, M173)
                M173 = One
            }
        }

        Method (AFNC, 2, Serialized)
        {
            If ((M101 & 0x1000))
            {
                Local0 = (Arg0 & 0x03)
                M303 = Local0
                Local0 = (Arg1 & 0xFFFFFFFF)
                M304 = Local0
                CreateBitField (M164, 0x0C, M300)
                M300 = One
                Notify (VGA, 0x81) // Information Change
            }
        }
    }
}



SSDT5
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "Tpm2Tabl", 0x00009999)
{
    External (FIRT, UnknownObj)

    Scope (\_SB)
    {
        Device (TPM)
        {
            Name (_HID, "MSFT0101" /* TPM 2.0 Security Device */)  // _HID: Hardware ID
            Name (_CID, "MSFT0101" /* TPM 2.0 Security Device */)  // _CID: Compatible ID
            Name (_STR, Unicode ("TPM 2.0 Device"))  // _STR: Description String
            OperationRegion (SMIP, SystemIO, 0xB0, 0x01)
            Field (SMIP, ByteAcc, NoLock, Preserve)
            {
                IOB0,   8
            }

            Name (PFPF, 0x00000001)
            OperationRegion (DBG1, SystemIO, 0x80, 0x02)
            Field (DBG1, WordAcc, NoLock, Preserve)
            {
                P80L,   16
            }

            OperationRegion (TNVS, SystemMemory, 0xCD61F000, 0x2A)
            Field (TNVS, AnyAcc, NoLock, Preserve)
            {
                PPIN,   8, 
                PPIP,   32, 
                PPRP,   32, 
                PPRQ,   32, 
                PPRM,   32, 
                LPPR,   32, 
                FRET,   32, 
                MCIN,   8, 
                MCIP,   32, 
                MORD,   32, 
                MRET,   32, 
                UCRQ,   32
            }

            OperationRegion (PFCA, SystemMemory, 0xFDE10510, 0xF0)
            Field (PFCA, DWordAcc, NoLock, Preserve)
            {
                HRTB,   32, 
                ERRR,   32, 
                CLFG,   32, 
                STA1,   32, 
                AccessAs (QWordAcc, 0x00), 
                PFIN,   64, 
                AccessAs (DWordAcc, 0x00), 
                CMSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                CMDB,   64, 
                AccessAs (DWordAcc, 0x00), 
                RPSZ,   32, 
                AccessAs (QWordAcc, 0x00), 
                RESP,   64
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                Memory32Fixed (ReadWrite,
                    0xCB769000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xCB76D000,         // Address Base
                    0x00004000,         // Address Length
                    )
            })
            Method (PTS, 1, Serialized)
            {
                If (((Arg0 < 0x06) && (Arg0 > 0x03)))
                {
                    If (!(MORD & 0x10))
                    {
                        MCIP = 0x02
                        IOB0 = MCIN /* \_SB_.TPM_.MCIN */
                    }
                }

                Return (0x00)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If ((PFPF == 0x01))
                {
                    Return (0x0F)
                }

                Return (0x00)
            }

            Method (HINF, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        P80L = 0x10
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        P80L = 0x11
                        Name (TPMV, Package (0x02)
                        {
                            0x01, 
                            Package (0x02)
                            {
                                0x01, 
                                0x20
                            }
                        })
                        If ((_STA () == 0x00))
                        {
                            Return (Package (0x01)
                            {
                                0x00
                            })
                        }

                        Return (TPMV) /* \_SB_.TPM_.HINF.TPMV */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }

            Name (TPM2, Package (0x02)
            {
                Zero, 
                Zero
            })
            Name (TPM3, Package (0x03)
            {
                Zero, 
                Zero, 
                Zero
            })
            Method (TPPI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        P80L = 0x20
                        Return (Buffer (0x02)
                        {
                             0xFF, 0x01                                       // ..
                        })
                    }
                    Case (0x01)
                    {
                        P80L = 0x21
                        Return ("1.3")
                    }
                    Case (0x02)
                    {
                        P80L = 0x22
                        PPRQ = DerefOf (Arg2 [0x00])
                        PPIP = 0x02
                        IOB0 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x03)
                    {
                        P80L = 0x23
                        TPM2 [0x01] = PPRQ /* \_SB_.TPM_.PPRQ */
                        Return (TPM2) /* \_SB_.TPM_.TPM2 */
                    }
                    Case (0x04)
                    {
                        P80L = 0x24
                        Return (0x02)
                    }
                    Case (0x05)
                    {
                        P80L = 0x25
                        PPIP = 0x05
                        IOB0 = PPIN /* \_SB_.TPM_.PPIN */
                        TPM3 [0x01] = LPPR /* \_SB_.TPM_.LPPR */
                        TPM3 [0x02] = PPRP /* \_SB_.TPM_.PPRP */
                        Return (TPM3) /* \_SB_.TPM_.TPM3 */
                    }
                    Case (0x06)
                    {
                        P80L = 0x26
                        Return (0x03)
                    }
                    Case (0x07)
                    {
                        P80L = 0x27
                        PPIP = 0x07
                        PPRQ = DerefOf (Arg2 [0x00])
                        PPRM = 0x00
                        If ((PPRQ == 0x17))
                        {
                            PPRM = DerefOf (Arg2 [0x01])
                        }

                        IOB0 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Case (0x08)
                    {
                        P80L = 0x28
                        PPIP = 0x08
                        PPRQ = DerefOf (Arg2 [0x00])
                        IOB0 = PPIN /* \_SB_.TPM_.PPIN */
                        Return (FRET) /* \_SB_.TPM_.FRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (0x01)
            }

            Method (TMCI, 3, Serialized)
            {
                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        P80L = 0x30
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        P80L = 0x31
                        MORD = DerefOf (Arg2 [0x00])
                        MCIP = 0x01
                        IOB0 = MCIN /* \_SB_.TPM_.MCIN */
                        Return (MRET) /* \_SB_.TPM_.MRET */
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (0x01)
            }

            Method (TPMS, 3, Serialized)
            {
                If ((FIRT == 0x01))
                {
                    Sleep (0xFA)
                    Sleep (0xFA)
                }

                Switch (ToInteger (Arg1))
                {
                    Case (0x00)
                    {
                        Return (Buffer (0x01)
                        {
                             0x03                                             // .
                        })
                    }
                    Case (0x01)
                    {
                        P80L = 0x42
                        Return (0x00)
                    }
                    Default
                    {
                        BreakPoint
                    }

                }

                Return (0x01)
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("cf8e16a5-c1e8-4e25-b712-4f54a96702c8") /* Unknown UUID */))
                {
                    P80L = 0x50
                    Return (HINF (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("3dddfaa6-361b-4eb4-a424-8d10089d1653") /* Physical Presence Interface */))
                {
                    P80L = 0x51
                    Return (TPPI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("376054ed-cc13-4675-901c-4756d7f2d45d") /* Unknown UUID */))
                {
                    P80L = 0x52
                    Return (TMCI (Arg1, Arg2, Arg3))
                }

                If ((Arg0 == ToUUID ("6bbf6cab-5463-4714-b7cd-f0203c0368d4") /* Unknown UUID */))
                {
                    P80L = 0x53
                    Return (TPMS (Arg1, Arg2, Arg3))
                }

                Return (Buffer (0x01)
                {
                     0x00                                             // .
                })
            }
        }
    }
}



SSDT6
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_SB_.PCI0.GP17.ACP_, DeviceObj)
    External (_SB_.PCI0.GP17.AZAL, DeviceObj)
    External (M000, MethodObj)    // 1 Arguments
    External (M017, MethodObj)    // 6 Arguments
    External (M019, MethodObj)    // 4 Arguments
    External (M037, DeviceObj)
    External (M046, DeviceObj)
    External (M047, DeviceObj)
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M082, FieldUnitObj)
    External (M083, FieldUnitObj)
    External (M084, FieldUnitObj)
    External (M085, FieldUnitObj)
    External (M086, FieldUnitObj)
    External (M087, FieldUnitObj)
    External (M088, FieldUnitObj)
    External (M089, FieldUnitObj)
    External (M090, FieldUnitObj)
    External (M091, FieldUnitObj)
    External (M092, FieldUnitObj)
    External (M093, FieldUnitObj)
    External (M094, FieldUnitObj)
    External (M095, FieldUnitObj)
    External (M096, FieldUnitObj)
    External (M097, FieldUnitObj)
    External (M098, FieldUnitObj)
    External (M099, FieldUnitObj)
    External (M100, FieldUnitObj)
    External (M101, FieldUnitObj)
    External (M102, FieldUnitObj)
    External (M103, FieldUnitObj)
    External (M104, FieldUnitObj)
    External (M105, FieldUnitObj)
    External (M106, FieldUnitObj)
    External (M107, FieldUnitObj)
    External (M108, FieldUnitObj)
    External (M109, FieldUnitObj)
    External (M110, FieldUnitObj)
    External (M115, BuffObj)
    External (M116, BuffFieldObj)
    External (M117, BuffFieldObj)
    External (M118, BuffFieldObj)
    External (M119, BuffFieldObj)
    External (M120, BuffFieldObj)
    External (M122, FieldUnitObj)
    External (M127, DeviceObj)
    External (M128, FieldUnitObj)
    External (M131, FieldUnitObj)
    External (M132, FieldUnitObj)
    External (M133, FieldUnitObj)
    External (M134, FieldUnitObj)
    External (M135, FieldUnitObj)
    External (M136, FieldUnitObj)
    External (M220, FieldUnitObj)
    External (M221, FieldUnitObj)
    External (M226, FieldUnitObj)
    External (M227, DeviceObj)
    External (M229, FieldUnitObj)
    External (M231, FieldUnitObj)
    External (M233, FieldUnitObj)
    External (M235, FieldUnitObj)
    External (M249, MethodObj)    // 4 Arguments
    External (M250, MethodObj)    // 5 Arguments
    External (M251, FieldUnitObj)
    External (M276, MethodObj)    // 0 Arguments
    External (M277, MethodObj)    // 0 Arguments
    External (M280, FieldUnitObj)
    External (M290, FieldUnitObj)
    External (M310, FieldUnitObj)
    External (M320, FieldUnitObj)
    External (M321, FieldUnitObj)
    External (M322, FieldUnitObj)
    External (M323, FieldUnitObj)
    External (M324, FieldUnitObj)
    External (M325, FieldUnitObj)
    External (M326, FieldUnitObj)
    External (M327, FieldUnitObj)
    External (M328, FieldUnitObj)
    External (M329, DeviceObj)
    External (M32A, DeviceObj)
    External (M32B, DeviceObj)
    External (M330, DeviceObj)
    External (M331, FieldUnitObj)
    External (M378, FieldUnitObj)
    External (M379, FieldUnitObj)
    External (M380, FieldUnitObj)
    External (M381, FieldUnitObj)
    External (M382, FieldUnitObj)
    External (M383, FieldUnitObj)
    External (M384, FieldUnitObj)
    External (M385, FieldUnitObj)
    External (M386, FieldUnitObj)
    External (M387, FieldUnitObj)
    External (M388, FieldUnitObj)
    External (M389, FieldUnitObj)
    External (M390, FieldUnitObj)
    External (M391, FieldUnitObj)
    External (M392, FieldUnitObj)
    External (M404, DeviceObj)
    External (M414, FieldUnitObj)

    Name (M278, 0x01)
    Name (M279, 0x01)
    Name (M27A, 0x01)
    Name (APGE, Zero)
    One
    Name (ACGE, 0x01)
    Method (M276, 0, NotSerialized)
    {
        If ((M27A == 0x00))
        {
            M278 = 0x00
        }

        If (((M278 == 0x01) || (M279 == 0x01)))
        {
            Local0 = M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08)
            Local1 = M019 (Local0, 0x00, 0x05, 0x00)
            If ((M27A == 0x00))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != 0x00) && (Local0 != 0xFF)))
            {
                If ((Local1 != 0xFFFFFFFF))
                {
                    M000 (0xB4)
                    If ((ACGE != 0x00))
                    {
                        M250 (0x00, 0x00, 0x00, 0x03B10564, 0x00)
                        M250 (0x00, 0x00, 0x00, 0x03B10998, 0xC8)
                        M250 (0x00, 0x00, 0x00, 0x03B10528, 0x59)
                        Local4 = M249 (0x00, 0x00, 0x00, 0x03B10564)
                        While ((Local4 == 0x00))
                        {
                            Local4 = M249 (0x00, 0x00, 0x00, 0x03B10564)
                            If ((Local4 != 0x00))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != 0x00))
                    {
                        M250 (0x00, 0x00, 0x00, 0x0900E784, 0x0103)
                        Local4 = 0x01
                        Local5 = 0x64
                        While (((Local4 != 0x00) && Local5))
                        {
                            Local4 = M249 (0x00, 0x00, 0x00, 0x0900E784)
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (0x00, 0x00, 0x00, 0x0900E784, Local4)
                            Local4 = M249 (0x00, 0x00, 0x00, 0x0900E78C)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (0x00, 0x00, 0x00, 0x0900E784, 0x00)
                        M000 (0xB5)
                    }
                }
            }
        }
    }

    Method (M277, 0, NotSerialized)
    {
        If ((M27A == 0x00))
        {
            M278 = 0x00
        }

        If (((M278 == 0x00) && (M279 == 0x00)))
        {
            Local0 = M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08)
            Local1 = M019 (Local0, 0x00, 0x05, 0x00)
            If ((M27A == 0x00))
            {
                Local1 = 0x15E21022
            }

            If (((Local0 != 0x00) && (Local0 != 0xFF)))
            {
                If ((Local1 != 0xFFFFFFFF))
                {
                    M000 (0xB6)
                    If ((ACGE != 0x00))
                    {
                        M250 (0x00, 0x00, 0x00, 0x03B10564, 0x00)
                        M250 (0x00, 0x00, 0x00, 0x03B10998, 0x00)
                        M250 (0x00, 0x00, 0x00, 0x03B10528, 0x59)
                        Local4 = M249 (0x00, 0x00, 0x00, 0x03B10564)
                        While ((Local4 == 0x00))
                        {
                            Local4 = M249 (0x00, 0x00, 0x00, 0x03B10564)
                            If ((Local4 != 0x00))
                            {
                                Break
                            }
                        }
                    }

                    If ((APGE != 0x00))
                    {
                        M250 (0x00, 0x00, 0x00, 0x0900E784, 0x0101)
                        Local4 = 0x01
                        Local5 = 0x64
                        While (((Local4 != 0x02) && Local5))
                        {
                            Local4 = M249 (0x00, 0x00, 0x00, 0x0900E784)
                            Local4 |= 0x06
                            Local4 &= 0xFFFFFF0F
                            M250 (0x00, 0x00, 0x00, 0x0900E784, Local4)
                            Local4 = M249 (0x00, 0x00, 0x00, 0x0900E78C)
                            Local4 &= 0x03
                            Local5--
                            Stall (0x63)
                        }

                        M250 (0x00, 0x00, 0x00, 0x0900E784, 0x00)
                        M000 (0xB7)
                    }
                }
            }
        }
    }

    Scope (\_SB.PCI0.GP17.ACP)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M278 = 0x01
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M278 = 0x00
            M277 ()
        }

        Method (MSG0, 3, Serialized)
        {
            M000 (0x5511)
            OperationRegion (VARM, SystemIO, 0x80, 0x04)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VARR,   32
            }

            If ((Arg2 != 0x09))
            {
                M000 (0x5518)
                M250 (0x00, 0x00, 0x00, 0x00058A74, Arg0)
                M250 (0x00, 0x00, 0x00, 0x00058A54, Arg1)
                M250 (0x00, 0x00, 0x00, 0x00058A14, Arg2)
                Local0 = M249 (0x00, 0x00, 0x00, 0x00058A74)
                While ((Local0 == 0x00))
                {
                    Local0 = M249 (0x00, 0x00, 0x00, 0x00058A74)
                    If ((Local0 != 0x00))
                    {
                        Break
                    }
                }

                M000 (0x5519)
                Local1 = M249 (0x00, 0x00, 0x00, 0x00058A54)
                Return (Local1)
            }

            Name (MBOX, Buffer (0x04) {})
            Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
            VARR = Local0
            MBOX = Local0
            CreateWordField (MBOX, 0x00, STAS)
            CreateByteField (MBOX, 0x02, CMDI)
            CreateField (MBOX, 0x18, 0x05, RESV)
            CreateBitField (MBOX, 0x1D, RSET)
            CreateBitField (MBOX, 0x1E, RCOV)
            CreateBitField (MBOX, 0x1F, REDY)
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While (((REDY != 0x01) || (CMDI != 0x00)))
            {
                Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
                MBOX = Local0
                M000 (0x5516)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            Local0 = 0x00
            MBOX = Local0
            REDY = 0x00
            CMDI = 0x33
            M000 (0x5514)
            Local0 = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            VARR = Local0
            M250 (0x00, 0x00, 0x00, 0x03810570, Local0)
            Sleep (0x01)
            M000 (0x5515)
            Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
            MBOX = Local0
            VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            While ((CMDI != 0x00))
            {
                Local0 = M249 (0x00, 0x00, 0x00, 0x03810570)
                MBOX = Local0
                M000 (0x5517)
                VARR = MBOX /* \_SB_.PCI0.GP17.ACP_.MSG0.MBOX */
            }

            If ((STAS != 0x00))
            {
                M000 (0x5513)
            }

            M000 (0x5512)
            Return (Local0)
        }
    }

    Scope (\_SB.PCI0.GP17.AZAL)
    {
        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            M279 = 0x01
            M276 ()
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            M279 = 0x00
            M277 ()
        }
    }
}



SSDT7
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "STD3", 0x00000001)
{
    External (_SB_.PCI0.GP18.SAT1, DeviceObj)
    External (_SB_.PCI0.GP18.SATA, DeviceObj)

    OperationRegion (SMIC, SystemMemory, 0xFED80000, 0x00800000)
    Field (SMIC, ByteAcc, NoLock, Preserve)
    {
        Offset (0x36A), 
        SMIB,   8
    }

    OperationRegion (SSMI, SystemIO, SMIB, 0x02)
    Field (SSMI, AnyAcc, NoLock, Preserve)
    {
        SMIW,   16
    }

    Scope (\_SB)
    {
        Name (D0S0, 0x01)
        Name (D3S0, 0x01)
        Name (D0S1, 0x01)
        Name (D3S1, 0x01)
        Name (STDS, Zero)
        Zero
        PowerResource (P0S0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0S0) /* \_SB_.D0S0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0S0 = 0x01
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0S0 = 0x00
            }
        }

        PowerResource (P3S0, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3S0) /* \_SB_.D3S0 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3S0 = 0x01
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3S0 = 0x00
            }
        }

        PowerResource (P0S1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D0S1) /* \_SB_.D0S1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D0S1 = 0x01
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D0S1 = 0x00
            }
        }

        PowerResource (P3S1, 0x00, 0x0000)
        {
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (D3S1) /* \_SB_.D3S1 */
            }

            Method (_ON, 0, NotSerialized)  // _ON_: Power On
            {
                D3S1 = 0x01
            }

            Method (_OFF, 0, NotSerialized)  // _OFF: Power Off
            {
                D3S1 = 0x00
            }
        }
    }

    Scope (\_SB.PCI0.GP18.SATA)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0S0
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3S0
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((STDS == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (0x00)
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((STDS == One))
            {
                SMIW = 0xD6
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((STDS == One))
            {
                SMIW = 0xD5
            }
        }
    }

    Scope (\_SB.PCI0.GP18.SAT1)
    {
        Name (_PR0, Package (0x01)  // _PR0: Power Resources for D0
        {
            P0S1
        })
        Name (_PR3, Package (0x01)  // _PR3: Power Resources for D3hot
        {
            P3S1
        })
        Method (_S0W, 0, NotSerialized)  // _S0W: S0 Device Wake State
        {
            If ((STDS == One))
            {
                Return (0x04)
            }
            Else
            {
                Return (0x00)
            }
        }

        Method (_PS0, 0, NotSerialized)  // _PS0: Power State 0
        {
            If ((STDS == One))
            {
                SMIW = 0x01D6
            }
        }

        Method (_PS3, 0, NotSerialized)  // _PS3: Power State 3
        {
            If ((STDS == One))
            {
                SMIW = 0x01D5
            }
        }
    }
}



SSDT8
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "UsbCTabl", 0x00000001)
{
    External (_SB_.PCI0.LPC0.EC0_, DeviceObj)
    External (_SB_.PCI0.LPC0.EC0_.ECAV, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.LFCM, UnknownObj)
    External (_SB_.PCI0.LPC0.EC0_.WECM, MethodObj)    // 2 Arguments

    Scope (\_SB.PCI0.LPC0.EC0)
    {
        Method (_Q4F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            \_SB.UBTC.NTFY ()
        }
    }

    Scope (\_SB)
    {
        Device (UBTC)
        {
            Name (_HID, EisaId ("USBC000"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0CA0"))  // _CID: Compatible ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (_DDN, "USB Type C")  // _DDN: DOS Device Name
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Method (_PS0, 0, Serialized)  // _PS0: Power State 0
            {
                Sleep (0x03E8)
                Sleep (0x01F4)
            }

            Method (_PS3, 0, Serialized)  // _PS3: Power State 3
            {
                Sleep (0x03E8)
                Sleep (0x64)
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Name (RBUF, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0xCD637000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Return (RBUF) /* \_SB_.UBTC._CRS.RBUF */
            }

            OperationRegion (ECMS, SystemIO, 0x72, 0x02)
            Field (ECMS, ByteAcc, Lock, Preserve)
            {
                INDX,   8, 
                DATA,   8
            }

            Method (RECM, 1, Serialized)
            {
                INDX = Arg0
                Return (DATA) /* \_SB_.UBTC.DATA */
            }

            Method (WECM, 2, Serialized)
            {
                INDX = Arg0
                DATA = Arg1
            }

            Device (CR01)
            {
                Name (_ADR, 0x01)  // _ADR: Address
                Name (_UPC, Package (0x04)  // _UPC: USB Port Capabilities
                {
                    0xFF, 
                    0x09, 
                    0x00, 
                    0x00
                })
                Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                {
                    ToPLD (
                        PLD_Revision           = 0x2,
                        PLD_IgnoreColor        = 0x1,
                        PLD_Red                = 0x0,
                        PLD_Green              = 0x0,
                        PLD_Blue               = 0x0,
                        PLD_Width              = 0x0,
                        PLD_Height             = 0x0,
                        PLD_UserVisible        = 0x1,
                        PLD_Dock               = 0x0,
                        PLD_Lid                = 0x0,
                        PLD_Panel              = "UNKNOWN",
                        PLD_VerticalPosition   = "UPPER",
                        PLD_HorizontalPosition = "LEFT",
                        PLD_Shape              = "UNKNOWN",
                        PLD_GroupOrientation   = 0x0,
                        PLD_GroupToken         = 0x0,
                        PLD_GroupPosition      = 0x1,
                        PLD_Bay                = 0x0,
                        PLD_Ejectable          = 0x0,
                        PLD_EjectRequired      = 0x0,
                        PLD_CabinetNumber      = 0x0,
                        PLD_CardCageNumber     = 0x0,
                        PLD_Reference          = 0x0,
                        PLD_Rotation           = 0x0,
                        PLD_Order              = 0x0)

                })
            }

            OperationRegion (USBC, SystemMemory, 0xCD637000, 0x30)
            Field (USBC, ByteAcc, Lock, Preserve)
            {
                VER1,   8, 
                VER2,   8, 
                RSV1,   8, 
                RSV2,   8, 
                CCI0,   8, 
                CCI1,   8, 
                CCI2,   8, 
                CCI3,   8, 
                CTL0,   8, 
                CTL1,   8, 
                CTL2,   8, 
                CTL3,   8, 
                CTL4,   8, 
                CTL5,   8, 
                CTL6,   8, 
                CTL7,   8, 
                MGI0,   8, 
                MGI1,   8, 
                MGI2,   8, 
                MGI3,   8, 
                MGI4,   8, 
                MGI5,   8, 
                MGI6,   8, 
                MGI7,   8, 
                MGI8,   8, 
                MGI9,   8, 
                MGIA,   8, 
                MGIB,   8, 
                MGIC,   8, 
                MGID,   8, 
                MGIE,   8, 
                MGIF,   8, 
                MGO0,   8, 
                MGO1,   8, 
                MGO2,   8, 
                MGO3,   8, 
                MGO4,   8, 
                MGO5,   8, 
                MGO6,   8, 
                MGO7,   8, 
                MGO8,   8, 
                MGO9,   8, 
                MGOA,   8, 
                MGOB,   8, 
                MGOC,   8, 
                MGOD,   8, 
                MGOE,   8, 
                MGOF,   8
            }

            OperationRegion (DBG0, SystemIO, 0x80, 0x01)
            Field (DBG0, ByteAcc, NoLock, Preserve)
            {
                IO80,   8
            }

            Method (NTFY, 0, Serialized)
            {
                IO80 = 0x4F
                ECRD ()
                Sleep (0x01)
                Notify (\_SB.UBTC, 0x80) // Status Change
            }

            OperationRegion (H5FA, SystemMemory, 0xFE00D989, 0x01)
            Field (H5FA, AnyAcc, Lock, Preserve)
            {
                HNTF,   8
            }

            OperationRegion (ECSM, SystemMemory, 0xFE00D460, 0x30)
            Field (ECSM, AnyAcc, Lock, Preserve)
            {
                HMPR,   8, 
                    ,   7, 
                HMDN,   1, 
                HADD,   8, 
                HCMD,   8, 
                HD00,   8, 
                HD01,   8, 
                HD02,   8, 
                HD03,   8, 
                HD04,   8, 
                HD05,   8, 
                HD06,   8, 
                HD07,   8, 
                HD08,   8, 
                HD09,   8, 
                HD0A,   8, 
                HD0B,   8, 
                HD0C,   8, 
                HD0D,   8, 
                HD0E,   8, 
                HD0F,   8, 
                Offset (0x24), 
                HCNT,   8
            }

            OperationRegion (ECSI, EmbeddedControl, 0x00, 0x0100)
            Field (ECSI, ByteAcc, NoLock, Preserve)
            {
                Offset (0x60), 
                EMPR,   8, 
                    ,   7, 
                EMDN,   1, 
                EADD,   8, 
                ECMD,   8, 
                ED00,   8, 
                ED01,   8, 
                ED02,   8, 
                ED03,   8, 
                ED04,   8, 
                ED05,   8, 
                ED06,   8, 
                ED07,   8, 
                ED08,   8, 
                ED09,   8, 
                ED0A,   8, 
                ED0B,   8, 
                ED0C,   8, 
                ED0D,   8, 
                ED0E,   8, 
                ED0F,   8, 
                Offset (0x84), 
                ECNT,   8
            }

            Method (CHKM, 0, NotSerialized)
            {
                Local0 = 0x03E8
                While (HMPR)
                {
                    Sleep (0x01)
                    Local0--
                    If (!Local0)
                    {
                        Return (0x8080)
                    }
                }

                If (HMDN)
                {
                    Return (Zero)
                }

                Return (0x8081)
            }

            Method (CHKS, 0, NotSerialized)
            {
                Local0 = 0x03E8
                While (EMPR)
                {
                    Sleep (0x01)
                    Local0--
                    If (!Local0)
                    {
                        Return (0x8080)
                    }
                }

                If (EMDN)
                {
                    Return (Zero)
                }

                Return (0x8081)
            }

            Name (RSTC, 0x00)
            Mutex (UBSY, 0x00)
            Method (ECWR, 0, Serialized)
            {
                If (\_SB.PCI0.LPC0.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == 0x00))
                    {
                        Acquire (UBSY, 0xFFFF)
                        WECM (0x56, 0xAA)
                        WECM (0x58, CTL0)
                        If ((CTL0 == 0x01))
                        {
                            WECM (0x57, 0xAA)
                            RSTC = 0x01
                            IO80 = 0xB8
                            CHKS ()
                            EADD = 0x02
                            Sleep (0x01)
                            ECMD = 0x06
                            Sleep (0x01)
                            ED00 = MGO0 /* \_SB_.UBTC.MGO0 */
                            Sleep (0x01)
                            ED01 = MGO1 /* \_SB_.UBTC.MGO1 */
                            Sleep (0x01)
                            ED02 = MGO2 /* \_SB_.UBTC.MGO2 */
                            Sleep (0x01)
                            ED03 = MGO3 /* \_SB_.UBTC.MGO3 */
                            Sleep (0x01)
                            ED04 = MGO4 /* \_SB_.UBTC.MGO4 */
                            Sleep (0x01)
                            ED05 = MGO5 /* \_SB_.UBTC.MGO5 */
                            Sleep (0x01)
                            ED06 = MGO6 /* \_SB_.UBTC.MGO6 */
                            Sleep (0x01)
                            ED07 = MGO7 /* \_SB_.UBTC.MGO7 */
                            Sleep (0x01)
                            ED08 = MGO8 /* \_SB_.UBTC.MGO8 */
                            Sleep (0x01)
                            ED09 = MGO9 /* \_SB_.UBTC.MGO9 */
                            Sleep (0x01)
                            ED0A = MGOA /* \_SB_.UBTC.MGOA */
                            Sleep (0x01)
                            ED0B = MGOB /* \_SB_.UBTC.MGOB */
                            Sleep (0x01)
                            ED0C = MGOC /* \_SB_.UBTC.MGOC */
                            Sleep (0x01)
                            ED0D = MGOD /* \_SB_.UBTC.MGOD */
                            Sleep (0x01)
                            ED0E = MGOE /* \_SB_.UBTC.MGOE */
                            Sleep (0x01)
                            ED0F = MGOF /* \_SB_.UBTC.MGOF */
                            Sleep (0x01)
                            ECNT = 0x10
                            Sleep (0x01)
                            EMPR = 0x0A
                            Sleep (0x01)
                            CHKS ()
                            EADD = 0x02
                            Sleep (0x01)
                            ECMD = 0x04
                            Sleep (0x01)
                            ED00 = CTL0 /* \_SB_.UBTC.CTL0 */
                            Sleep (0x01)
                            ED01 = CTL1 /* \_SB_.UBTC.CTL1 */
                            Sleep (0x01)
                            ED02 = CTL2 /* \_SB_.UBTC.CTL2 */
                            Sleep (0x01)
                            ED03 = CTL3 /* \_SB_.UBTC.CTL3 */
                            Sleep (0x01)
                            ED04 = CTL4 /* \_SB_.UBTC.CTL4 */
                            Sleep (0x01)
                            ED05 = CTL5 /* \_SB_.UBTC.CTL5 */
                            Sleep (0x01)
                            ED06 = CTL6 /* \_SB_.UBTC.CTL6 */
                            Sleep (0x01)
                            ED07 = CTL7 /* \_SB_.UBTC.CTL7 */
                            Sleep (0x01)
                            ECNT = 0x08
                            Sleep (0x01)
                            EMPR = 0x0A
                            Sleep (0x01)
                            CHKS ()
                            IO80 = 0xB9
                            Release (UBSY)
                            Release (\_SB.PCI0.LPC0.EC0.LFCM)
                            Return (Zero)
                        }

                        IO80 = 0xB6
                        \_SB.PCI0.LPC0.EC0.WECM (0x4F, CTL0)
                        CHKM ()
                        HADD = 0x02
                        Sleep (0x01)
                        HCMD = 0x06
                        Sleep (0x01)
                        HD00 = MGO0 /* \_SB_.UBTC.MGO0 */
                        Sleep (0x01)
                        HD01 = MGO1 /* \_SB_.UBTC.MGO1 */
                        Sleep (0x01)
                        HD02 = MGO2 /* \_SB_.UBTC.MGO2 */
                        Sleep (0x01)
                        HD03 = MGO3 /* \_SB_.UBTC.MGO3 */
                        Sleep (0x01)
                        HD04 = MGO4 /* \_SB_.UBTC.MGO4 */
                        Sleep (0x01)
                        HD05 = MGO5 /* \_SB_.UBTC.MGO5 */
                        Sleep (0x01)
                        HD06 = MGO6 /* \_SB_.UBTC.MGO6 */
                        Sleep (0x01)
                        HD07 = MGO7 /* \_SB_.UBTC.MGO7 */
                        Sleep (0x01)
                        HD08 = MGO8 /* \_SB_.UBTC.MGO8 */
                        Sleep (0x01)
                        HD09 = MGO9 /* \_SB_.UBTC.MGO9 */
                        Sleep (0x01)
                        HD0A = MGOA /* \_SB_.UBTC.MGOA */
                        Sleep (0x01)
                        HD0B = MGOB /* \_SB_.UBTC.MGOB */
                        Sleep (0x01)
                        HD0C = MGOC /* \_SB_.UBTC.MGOC */
                        Sleep (0x01)
                        HD0D = MGOD /* \_SB_.UBTC.MGOD */
                        Sleep (0x01)
                        HD0E = MGOE /* \_SB_.UBTC.MGOE */
                        Sleep (0x01)
                        HD0F = MGOF /* \_SB_.UBTC.MGOF */
                        IO80 = 0xA1
                        HCNT = 0x10
                        Sleep (0x01)
                        HMPR = 0x0A
                        Sleep (0x01)
                        HNTF = 0x08
                        Sleep (0x01)
                        CHKM ()
                        HADD = 0x02
                        Sleep (0x01)
                        HCMD = 0x04
                        Sleep (0x01)
                        HD00 = CTL0 /* \_SB_.UBTC.CTL0 */
                        Sleep (0x01)
                        HD01 = CTL1 /* \_SB_.UBTC.CTL1 */
                        Sleep (0x01)
                        HD02 = CTL2 /* \_SB_.UBTC.CTL2 */
                        Sleep (0x01)
                        HD03 = CTL3 /* \_SB_.UBTC.CTL3 */
                        Sleep (0x01)
                        HD04 = CTL4 /* \_SB_.UBTC.CTL4 */
                        Sleep (0x01)
                        HD05 = CTL5 /* \_SB_.UBTC.CTL5 */
                        Sleep (0x01)
                        HD06 = CTL6 /* \_SB_.UBTC.CTL6 */
                        Sleep (0x01)
                        HD07 = CTL7 /* \_SB_.UBTC.CTL7 */
                        Sleep (0x01)
                        HCNT = 0x08
                        Sleep (0x01)
                        HMPR = 0x0A
                        Sleep (0x01)
                        HNTF = 0x08
                        Sleep (0x01)
                        CHKM ()
                        Release (UBSY)
                        Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    }
                }
            }

            Method (ECRD, 0, Serialized)
            {
                If (\_SB.PCI0.LPC0.EC0.ECAV)
                {
                    If ((Acquire (\_SB.PCI0.LPC0.EC0.LFCM, 0xA000) == 0x00))
                    {
                        Acquire (UBSY, 0xFFFF)
                        If ((RSTC == 0x01))
                        {
                            RSTC = 0x00
                            IO80 = 0xBA
                            CHKS ()
                            EADD = 0x02
                            Sleep (0x01)
                            ECMD = 0x05
                            Sleep (0x01)
                            ECNT = 0x10
                            Sleep (0x01)
                            EMPR = 0x0B
                            Sleep (0x01)
                            CHKS ()
                            MGI0 = ED00 /* \_SB_.UBTC.ED00 */
                            Sleep (0x01)
                            MGI1 = ED01 /* \_SB_.UBTC.ED01 */
                            Sleep (0x01)
                            MGI2 = ED02 /* \_SB_.UBTC.ED02 */
                            Sleep (0x01)
                            MGI3 = ED03 /* \_SB_.UBTC.ED03 */
                            Sleep (0x01)
                            MGI4 = ED04 /* \_SB_.UBTC.ED04 */
                            Sleep (0x01)
                            MGI5 = ED05 /* \_SB_.UBTC.ED05 */
                            Sleep (0x01)
                            MGI6 = ED06 /* \_SB_.UBTC.ED06 */
                            Sleep (0x01)
                            MGI7 = ED07 /* \_SB_.UBTC.ED07 */
                            Sleep (0x01)
                            MGI8 = ED08 /* \_SB_.UBTC.ED08 */
                            Sleep (0x01)
                            MGI9 = ED09 /* \_SB_.UBTC.ED09 */
                            Sleep (0x01)
                            MGIA = ED0A /* \_SB_.UBTC.ED0A */
                            Sleep (0x01)
                            MGIB = ED0B /* \_SB_.UBTC.ED0B */
                            Sleep (0x01)
                            MGIC = ED0C /* \_SB_.UBTC.ED0C */
                            Sleep (0x01)
                            MGID = ED0D /* \_SB_.UBTC.ED0D */
                            Sleep (0x01)
                            MGIE = ED0E /* \_SB_.UBTC.ED0E */
                            Sleep (0x01)
                            MGIF = ED0F /* \_SB_.UBTC.ED0F */
                            CHKS ()
                            EADD = 0x02
                            Sleep (0x01)
                            ECMD = 0x03
                            Sleep (0x01)
                            ECNT = 0x04
                            Sleep (0x01)
                            EMPR = 0x0B
                            Sleep (0x01)
                            CHKS ()
                            CCI0 = ED00 /* \_SB_.UBTC.ED00 */
                            Sleep (0x01)
                            CCI1 = ED01 /* \_SB_.UBTC.ED01 */
                            Sleep (0x01)
                            CCI2 = ED02 /* \_SB_.UBTC.ED02 */
                            Sleep (0x01)
                            CCI3 = ED03 /* \_SB_.UBTC.ED03 */
                            IO80 = 0xBB
                            Release (UBSY)
                            Release (\_SB.PCI0.LPC0.EC0.LFCM)
                            Return (Zero)
                        }

                        CHKM ()
                        HADD = 0x02
                        Sleep (0x01)
                        HCMD = 0x05
                        Sleep (0x01)
                        HCNT = 0x10
                        Sleep (0x01)
                        HMPR = 0x0B
                        Sleep (0x01)
                        HNTF = 0x07
                        Sleep (0x01)
                        CHKM ()
                        MGI0 = HD00 /* \_SB_.UBTC.HD00 */
                        Sleep (0x01)
                        MGI1 = HD01 /* \_SB_.UBTC.HD01 */
                        Sleep (0x01)
                        MGI2 = HD02 /* \_SB_.UBTC.HD02 */
                        Sleep (0x01)
                        MGI3 = HD03 /* \_SB_.UBTC.HD03 */
                        Sleep (0x01)
                        MGI4 = HD04 /* \_SB_.UBTC.HD04 */
                        Sleep (0x01)
                        MGI5 = HD05 /* \_SB_.UBTC.HD05 */
                        Sleep (0x01)
                        MGI6 = HD06 /* \_SB_.UBTC.HD06 */
                        Sleep (0x01)
                        MGI7 = HD07 /* \_SB_.UBTC.HD07 */
                        Sleep (0x01)
                        MGI8 = HD08 /* \_SB_.UBTC.HD08 */
                        Sleep (0x01)
                        MGI9 = HD09 /* \_SB_.UBTC.HD09 */
                        Sleep (0x01)
                        MGIA = HD0A /* \_SB_.UBTC.HD0A */
                        Sleep (0x01)
                        MGIB = HD0B /* \_SB_.UBTC.HD0B */
                        Sleep (0x01)
                        MGIC = HD0C /* \_SB_.UBTC.HD0C */
                        Sleep (0x01)
                        MGID = HD0D /* \_SB_.UBTC.HD0D */
                        Sleep (0x01)
                        MGIE = HD0E /* \_SB_.UBTC.HD0E */
                        Sleep (0x01)
                        MGIF = HD0F /* \_SB_.UBTC.HD0F */
                        CHKM ()
                        HADD = 0x02
                        Sleep (0x01)
                        HCMD = 0x03
                        Sleep (0x01)
                        HCNT = 0x04
                        Sleep (0x01)
                        HMPR = 0x0B
                        Sleep (0x01)
                        HNTF = 0x07
                        Sleep (0x01)
                        CHKM ()
                        CCI0 = HD00 /* \_SB_.UBTC.HD00 */
                        Sleep (0x01)
                        CCI1 = HD01 /* \_SB_.UBTC.HD01 */
                        Sleep (0x01)
                        CCI2 = HD02 /* \_SB_.UBTC.HD02 */
                        Sleep (0x01)
                        CCI3 = HD03 /* \_SB_.UBTC.HD03 */
                        Release (UBSY)
                        Release (\_SB.PCI0.LPC0.EC0.LFCM)
                    }
                }
            }

            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
            {
                If ((Arg0 == ToUUID ("6f8398c2-7ca4-11e4-ad36-631042b5008f") /* Unknown UUID */))
                {
                    If ((ToInteger (Arg2) == 0x00))
                    {
                        Return (Buffer (0x01)
                        {
                             0x0F                                             // .
                        })
                    }
                    ElseIf ((ToInteger (Arg2) == 0x01))
                    {
                        WECM (0x56, 0xAA)
                        IO80 = 0xA8
                        ECWR ()
                        IO80 = 0xA9
                    }
                    ElseIf ((ToInteger (Arg2) == 0x02))
                    {
                        IO80 = 0xAA
                        ECRD ()
                        IO80 = 0xAB
                    }
                    Else
                    {
                        Return (0x00)
                    }
                }

                Return (0x00)
            }
        }
    }
}



SSDT9
-----
DefinitionBlock ("", "SSDT", 1, "LENOVO", "AmdTable", 0x00000001)
{
    External (_GPE, DeviceObj)
    External (_GPE.SP00, MethodObj)    // 0 Arguments
    External (_GPE.SP01, MethodObj)    // 0 Arguments
    External (_GPE.SP02, MethodObj)    // 0 Arguments
    External (_GPE.SP03, MethodObj)    // 0 Arguments
    External (_GPE.SP04, MethodObj)    // 0 Arguments
    External (_GPE.SP05, MethodObj)    // 0 Arguments
    External (_GPE.SP06, MethodObj)    // 0 Arguments
    External (_GPE.SP07, MethodObj)    // 0 Arguments
    External (_SB_.ALIB, MethodObj)    // 2 Arguments
    External (_SB_.GPIO, DeviceObj)
    External (_SB_.IPTS, MethodObj)    // 1 Arguments
    External (_SB_.IWAK, MethodObj)    // 1 Arguments
    External (_SB_.M263, MethodObj)    // 1 Arguments
    External (_SB_.M264, MethodObj)    // 1 Arguments
    External (_SB_.M284, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP18.SATA.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.GP18.SATA.TWAK, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SATA.TPTS, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.SATA.TWAK, MethodObj)    // 1 Arguments
    External (M038, MethodObj)    // 1 Arguments
    External (M039, MethodObj)    // 2 Arguments
    External (M050, DeviceObj)
    External (M051, DeviceObj)
    External (M052, DeviceObj)
    External (M053, DeviceObj)
    External (M054, DeviceObj)
    External (M055, DeviceObj)
    External (M056, DeviceObj)
    External (M057, DeviceObj)
    External (M058, DeviceObj)
    External (M059, DeviceObj)
    External (M062, DeviceObj)
    External (M068, DeviceObj)
    External (M069, DeviceObj)
    External (M070, DeviceObj)
    External (M071, DeviceObj)
    External (M072, DeviceObj)
    External (M074, DeviceObj)
    External (M075, DeviceObj)
    External (M076, DeviceObj)
    External (M077, DeviceObj)
    External (M078, DeviceObj)
    External (M079, DeviceObj)
    External (M080, DeviceObj)
    External (M081, DeviceObj)
    External (M127, DeviceObj)
    External (MOEM, MethodObj)    // 3 Arguments

    OperationRegion (CPNV, SystemMemory, 0xCD768018, 0x000100CF)
    Field (CPNV, AnyAcc, Lock, Preserve)
    {
        M082,   32, 
        M083,   32, 
        M084,   32, 
        M085,   8, 
        M221,   8, 
        M086,   16, 
        M229,   8, 
        M231,   16, 
        M235,   8, 
        M233,   32, 
            ,   1, 
            ,   2, 
            ,   1, 
            ,   1, 
            ,   1, 
            ,   1, 
        Offset (0x19), 
        M087,   1, 
            ,   1, 
        Offset (0x1C), 
        M088,   16, 
        M089,   16, 
        M090,   3, 
        M091,   5, 
        M092,   8, 
        M093,   3, 
        M094,   5, 
        M095,   8, 
        M096,   8, 
        M097,   8, 
        M098,   32, 
        M099,   32, 
        M100,   32, 
        M101,   32, 
        M102,   32, 
        M103,   32, 
        M104,   224, 
        M105,   32, 
        M106,   32768, 
        M378,   32768, 
        M379,   32768, 
        M380,   32768, 
        M381,   32768, 
        M382,   32768, 
        M383,   32768, 
        M384,   32768, 
        M385,   32768, 
        M386,   32768, 
        M387,   32768, 
        M388,   32768, 
        M389,   32768, 
        M390,   32768, 
        M391,   32768, 
        M392,   32768, 
        M107,   64, 
        M320,   32, 
        M321,   32, 
        M322,   32, 
        M323,   32, 
        M324,   32, 
        M325,   32, 
        M326,   32, 
        M327,   16, 
        M328,   8, 
        M128,   32, 
        M108,   32, 
        M109,   32, 
        M110,   32, 
        M122,   32, 
        M131,   32, 
        M132,   32, 
        M133,   32, 
        M134,   32, 
        M135,   32, 
        M136,   32, 
        M220,   32, 
        M226,   32, 
        M251,   32, 
        M310,   32, 
        M280,   32, 
        M290,   32, 
        M331,   32, 
        M414,   16
    }

    Method (M000, 1, Serialized)
    {
        Name (M285, Buffer (0x04)
        {
             0x01, 0x03, 0x80, 0x00                           // ....
        })
        CreateByteField (M285, 0x00, M286)
        CreateByteField (M285, 0x01, M287)
        CreateWordField (M285, 0x02, M288)
        If ((ToInteger (M286) == 0x01))
        {
            Local0 = (Arg0 + 0xB0000C00)
            Local1 = ToInteger (M288)
            If ((ToInteger (M287) == 0x03))
            {
                OperationRegion (VARM, SystemIO, Local1, 0x04)
                Field (VARM, DWordAcc, NoLock, Preserve)
                {
                    VARR,   32
                }

                VARR = Local0
            }
            ElseIf ((ToInteger (M287) == 0x02))
            {
                OperationRegion (VARN, SystemIO, Local1, 0x02)
                Field (VARN, WordAcc, NoLock, Preserve)
                {
                    VARS,   16
                }

                VARS = (Local0 & 0xFFFF)
            }
            ElseIf ((ToInteger (M287) == 0x01))
            {
                OperationRegion (VARO, SystemIO, Local1, 0x01)
                Field (VARO, ByteAcc, NoLock, Preserve)
                {
                    VART,   8
                }

                VART = (Local0 & 0xFF)
            }
        }
    }

    Method (M019, 4, Serialized)
    {
        Return (M017 (Arg0, Arg1, Arg2, Arg3, 0x00, 0x20))
    }

    Method (M020, 5, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, Arg3, 0x00, 0x20, Arg4)
    }

    Mutex (M421, 0x00)
    Method (M422, 4, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 == 0x00))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xE0
        Acquire (M421, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M422.VAR1 */
        Local2 = VAR2 /* \M422.VAR2 */
        VAR1 = Local1
        Release (M421)
        Return (Local2)
    }

    Method (M423, 5, Serialized)
    {
        Local0 = M049 (M128, 0x81)
        If ((Local0 != 0x00))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xE0
            Acquire (M421, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M423.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M421)
        }
    }

    Mutex (M253, 0x00)
    Method (M249, 4, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == 0x00))
        {
            Local0 = 0x00
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 == 0xFFFFFFFF))
        {
            Return (0xFFFFFFFF)
        }

        Local0 = (M083 + (Local0 << 0x14))
        Local0 += 0xB8
        Acquire (M253, 0xFFFF)
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local1 = VAR1 /* \M249.VAR1 */
        Local2 = VAR2 /* \M249.VAR2 */
        VAR1 = Local1
        Release (M253)
        Return (Local2)
    }

    Method (M250, 5, Serialized)
    {
        If ((((Arg0 + Arg1) + Arg2) == 0x00))
        {
            Local0 = 0x00
        }
        Else
        {
            Local0 = M252 (Arg0, Arg1, Arg2)
        }

        If ((Local0 != 0xFFFFFFFF))
        {
            Local0 = (M083 + (Local0 << 0x14))
            Local0 += 0xB8
            Acquire (M253, 0xFFFF)
            OperationRegion (VARM, SystemMemory, Local0, 0x08)
            Field (VARM, DWordAcc, NoLock, Preserve)
            {
                VAR1,   32
            }

            BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
            {
                Offset (0x04), 
                VAR2,   32
            }

            Local1 = VAR1 /* \M250.VAR1 */
            VAR2 = Arg4
            VAR1 = Local1
            Release (M253)
        }
    }

    Method (M021, 4, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M021.VAR2 */
        Return (Local0)
    }

    Method (M022, 5, Serialized)
    {
        Local0 = (M083 + (Arg0 << 0x14))
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Local0 += 0xE0
        OperationRegion (VARM, SystemMemory, Local0, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg3, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg4
    }

    Method (M023, 3, Serialized)
    {
        M018 (Arg0, Arg1, Arg2, 0x70, 0x03, 0x01, 0x00)
        M018 (Arg0, Arg1, Arg2, 0x70, 0x13, 0x01, 0x01)
    }

    Method (M024, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x0128)
        If ((Local0 & 0x00020000))
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M026, 3, Serialized)
    {
        Local0 = M021 (Arg0, Arg1, Arg2, 0xA2)
        Local0 &= 0xFFFFFFF8
        Local1 = (Local0 >> 0x04)
        Local1 &= 0x07
        Local0 |= Local1
        Local0 |= 0x0100
        M022 (Arg0, Arg1, Arg2, 0xA2, Local0)
    }

    Method (M025, 3, Serialized)
    {
        Local0 = M019 (Arg0, Arg1, Arg2, 0x68)
        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local0 |= 0x20
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        Local1 = 0x64
        Local2 = 0x01
        While ((Local1 && Local2))
        {
            Sleep (0x01)
            Local3 = M019 (Arg0, Arg1, Arg2, 0x68)
            If ((Local3 & 0x08000000))
            {
                Local1--
            }
            Else
            {
                Local2 = 0x00
            }
        }

        Local0 &= 0xFFFFFFDF
        M020 (Arg0, Arg1, Arg2, 0x68, Local0)
        If (!Local2)
        {
            Return (Ones)
        }
        Else
        {
            Return (Zero)
        }
    }

    Method (M412, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= 0x01
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, 0x00)
        Local3 >>= Local2
        Local3 &= 0x01
        Return (Local3)
    }

    Method (M413, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x07)
        Local0 &= 0x01
        Local1 = (Arg0 >> 0x04)
        Local1 &= 0x07
        Local1 += \_GPE.M411
        Local2 = (Arg0 & 0x0F)
        Local3 = M409 (Local0, Local1, 0x01)
        Local3 &= (0xFFFFFFFF ^ (0x01 << Local2))
        Local3 |= (Arg1 << Local2)
        M410 (Local0, Local1, 0x01, Local3)
    }

    Method (M009, 1, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        Local2 = 0x00
        If (((Local0 == 0x00) || (Local0 == 0x01)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == 0x00))
                {
                    If ((Local0 == 0x00))
                    {
                        Local2 = M011 ((M084 + 0x1502), (Local1 * 0x04), 0x00, 
                            0x01)
                    }
                    Else
                    {
                        Local2 = M011 ((M084 + 0x1202), (Local1 * 0x04), 0x00, 
                            0x01)
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= 0x01
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == 0x00))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 >>= 0x10
                    Local2 &= 0x01
                }
            }
            Else
            {
                Local2 = M011 ((M084 + 0x0100), Local1, 0x07, 0x01)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= 0x01
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 >>= 0x10
            Local2 &= 0x01
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == 0x01))
            {
                Local2 = M038 ((Local1 + 0x08))
            }
            Else
            {
                Local2 = 0xFF
            }
        }
        ElseIf ((Local0 == 0x06))
        {
            Local2 = M412 (Local1)
        }

        Return (Local2)
    }

    Method (M010, 2, Serialized)
    {
        Local0 = (Arg0 >> 0x08)
        Local0 &= 0x07
        Local1 = (Arg0 & 0xFF)
        If (((Local0 == 0x00) || (Local0 == 0x01)))
        {
            If ((M085 >= 0x02))
            {
                Local2 = (Arg0 & 0xF800)
                If ((Local2 == 0x00))
                {
                    If ((Local0 == 0x00))
                    {
                        M012 ((M084 + 0x1502), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                    Else
                    {
                        M012 ((M084 + 0x1202), (Local1 * 0x04), 0x06, 0x02, (
                            0x02 | Arg1))
                    }
                }
                Else
                {
                    Local3 = (Arg0 >> 0x0F)
                    Local3 &= 0x01
                    Local4 = (Arg0 >> 0x0D)
                    Local4 &= 0x03
                    Local5 = (Arg0 >> 0x0B)
                    Local5 &= 0x03
                    If ((Local0 == 0x00))
                    {
                        Local6 = (0x02D02500 + (Local1 * 0x04))
                    }
                    Else
                    {
                        Local6 = (0x02D02200 + (Local1 * 0x04))
                    }

                    Local2 = M249 (Local3, Local4, Local5, Local6)
                    Local2 &= 0xCF3FFFFF
                    Local2 |= 0x00800000
                    Local2 |= (Arg1 << 0x16)
                    M250 (Local3, Local4, Local5, Local6, Local2)
                }
            }
            Else
            {
                M012 ((M084 + 0x0100), Local1, 0x06, 0x01, Arg1)
                M012 ((M084 + 0x0100), Local1, 0x05, 0x01, 0x00)
            }
        }
        ElseIf (((Local0 == 0x04) || (Local0 == 0x05)))
        {
            Local3 = (Arg0 >> 0x0F)
            Local3 &= 0x01
            Local4 = (Arg0 >> 0x0D)
            Local4 &= 0x03
            Local5 = (Arg0 >> 0x0B)
            Local5 &= 0x03
            If ((Local0 == 0x04))
            {
                Local6 = (0x02D02500 + (Local1 * 0x04))
            }
            Else
            {
                Local6 = (0x02D02200 + (Local1 * 0x04))
            }

            Local2 = M422 (Local3, Local4, Local5, Local6)
            Local2 &= 0xCF3FFFFF
            Local2 |= 0x00800000
            Local2 |= (Arg1 << 0x16)
            M423 (Local3, Local4, Local5, Local6, Local2)
        }
        ElseIf ((Local0 == 0x02))
        {
            If ((M049 (M128, 0x77) == 0x01))
            {
                M039 ((Local1 + 0x08), Arg1)
            }
        }
        ElseIf ((Local0 == 0x06))
        {
            M413 (Local1, Arg1)
        }
    }

    Name (M037, Buffer (0x17)
    {
        /* 0000 */  0x7E, 0x81, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // ~.......
        /* 0008 */  0x02, 0x20, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // . ......
        /* 0010 */  0x17, 0x19, 0x0B, 0x01, 0x0F, 0x0D, 0x09         // .......
    })
    Name (M227, Buffer (0x18)
    {
        /* 0000 */  0x41, 0x42, 0x03, 0x16, 0x04, 0x15, 0x0E, 0x05,  // AB......
        /* 0008 */  0x02, 0x44, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .D......
        /* 0010 */  0x17, 0x45, 0x0B, 0x01, 0x0F, 0x0D, 0x09, 0x08   // .E......
    })
    Name (M329, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x12, 0x18,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32A, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M330, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x07, 0x10, 0x11, 0x12, 0x18,  // .V......
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Name (M32B, Buffer (0x18)
    {
        /* 0000 */  0x59, 0x5A, 0x03, 0x16, 0x04, 0x15, 0x5B, 0x05,  // YZ....[.
        /* 0008 */  0x02, 0x56, 0x06, 0x4C, 0x10, 0x11, 0x1D, 0x1E,  // .V.L....
        /* 0010 */  0x17, 0x81, 0x54, 0x01, 0x28, 0x00, 0x09, 0x08   // ..T.(...
    })
    Method (M029, 1, Serialized)
    {
        If ((M085 == 0x02))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M037 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((M085 >= 0x0B))
            {
                If ((M085 >= 0x0D))
                {
                    Return (M011 ((M084 + 0x1502), (DerefOf (M32B [Arg0]) * 
                        0x04), 0x00, 0x01))
                }
                Else
                {
                    Return (M011 ((M084 + 0x1502), (DerefOf (M32A [Arg0]) * 
                        0x04), 0x00, 0x01))
                }
            }
            Else
            {
                Return (M011 ((M084 + 0x1502), (DerefOf (M330 [Arg0]) * 
                    0x04), 0x00, 0x01))
            }
        }
        ElseIf ((M085 == 0x08))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M329 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        ElseIf ((M085 >= 0x03))
        {
            Return (M011 ((M084 + 0x1502), (DerefOf (M227 [Arg0]) * 
                0x04), 0x00, 0x01))
        }
        Else
        {
            Return (M011 ((M084 + 0x0160), Arg0, 0x07, 0x01))
        }
    }

    Method (M031, 1, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, 0x00, 0x05)
        Return (M011 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 
            0x07), 0x01))
    }

    Method (M032, 2, Serialized)
    {
        Local0 = M011 ((M084 + 0x0240), Arg0, 0x00, 0x05)
        M012 ((M084 + 0x0208), (Local0 / 0x08), (Local0 & 0x07
            ), 0x01, Arg1)
    }

    Method (M013, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M013.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = ((Local1 >> Arg2) & (Local5 >> (0x20 - Arg3)
            ))
        Return (Local2)
    }

    Method (M014, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x04)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VARR,   32
        }

        Local1 = VARR /* \M014.VARR */
        Local5 = 0x7FFFFFFF
        Local5 |= 0x80000000
        Local2 = (Arg2 + Arg3)
        Local2 = (0x20 - Local2)
        Local2 = (((Local5 << Local2) & Local5) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (Local5 ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M011, 4, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x01)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M011.VARR */
        Local2 = ((Local1 >> Arg2) & (0xFF >> (0x08 - Arg3)
            ))
        Return (Local2)
    }

    Method (M012, 5, Serialized)
    {
        Local0 = (Arg0 + Arg1)
        OperationRegion (VARM, SystemMemory, Local0, 0x01)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VARR,   8
        }

        Local1 = VARR /* \M012.VARR */
        Local2 = (Arg2 + Arg3)
        Local2 = (0x08 - Local2)
        Local2 = (((0xFF << Local2) & 0xFF) >> Local2)
        Local2 = ((Local2 >> Arg2) << Arg2)
        Local3 = (Arg4 << Arg2)
        Local4 = ((Local1 & (0xFF ^ Local2)) | Local3)
        VARR = Local4
    }

    Method (M017, 6, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) >= Local2))
        {
            Local3 = 0x7FFFFFFF
            Local3 |= 0x80000000
            Local4 = ((Local3 >> Arg4) & (Local3 >> (0x20 - Arg5)
                ))
            Return (Local4)
        }

        Local0 += (Arg0 << 0x14)
        Local0 += (Arg1 << 0x0F)
        Local0 += (Arg2 << 0x0C)
        Return (M013 (Local0, Arg3, Arg4, Arg5))
    }

    Method (M018, 7, Serialized)
    {
        Local0 = M083 /* \M083 */
        Local1 = (M083 >> 0x14)
        Local2 = (Local1 & 0x0F00)
        Local2 += 0x0100
        If (((Local1 + Arg0) < Local2))
        {
            Local0 += (Arg0 << 0x14)
            Local0 += (Arg1 << 0x0F)
            Local0 += (Arg2 << 0x0C)
            If ((M013 (Local0, 0x00, 0x00, 0x20) != 0xFFFFFFFF))
            {
                M014 (Local0, Arg3, Arg4, Arg5, Arg6)
            }
        }
    }

    Method (M265, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local3 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x12, 0x01)
                Local4 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x08, 0x01)
                If (((Local3 == 0x01) && (Local4 == 0x01)))
                {
                    Local0 = 0x01
                }

                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M033, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x0C), 0x0A, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M027, 3, Serialized)
    {
        Local0 = 0x00
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While ((Local1 != 0x00))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                Local0 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x00, 0x02)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M028, 4, Serialized)
    {
        Local1 = M017 (Arg0, Arg1, Arg2, 0x34, 0x00, 0x08)
        While (((Local1 != 0x00) && (Local1 < 0xFF)))
        {
            Local2 = M017 (Arg0, Arg1, Arg2, Local1, 0x00, 0x08)
            If (((Local2 == 0x00) || (Local2 == 0xFF)))
            {
                Break
            }

            If ((Local2 == 0x10))
            {
                M018 (Arg0, Arg1, Arg2, (Local1 + 0x10), 0x00, 0x02, Arg3)
                Break
            }

            Local1 = M017 (Arg0, Arg1, Arg2, (Local1 + 0x01), 0x00, 0x08)
        }
    }

    Method (M034, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0700), Arg0, 0x00, 0x08))
    }

    Method (M015, 1, Serialized)
    {
        Return (M011 ((M084 + 0x0400), Arg0, 0x00, 0x08))
    }

    Method (M016, 2, Serialized)
    {
        M012 ((M084 + 0x0400), Arg0, 0x00, 0x08, Arg1)
    }

    Method (M035, 1, Serialized)
    {
        Return (M011 (M084, Arg0, 0x00, 0x08))
    }

    Method (M036, 2, Serialized)
    {
        M012 (M084, Arg0, 0x00, 0x08, Arg1)
    }

    Method (M001, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 == 0x15))
        {
            Local0 = 0x01
        }

        Return (Local0)
    }

    Method (M003, 3, Serialized)
    {
        Local0 = (Arg0 << 0x05)
        Local1 = (Local0 + Arg1)
        Local2 = (Local1 << 0x18)
        Local3 = (Local2 + Arg2)
        Return (Local3)
    }

    Method (M004, 1, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        Local0 = VAR2 /* \M004.VAR2 */
        Return (Local0)
    }

    Method (M005, 2, Serialized)
    {
        OperationRegion (VARM, SystemIO, 0x0CD8, 0x08)
        Field (VARM, DWordAcc, NoLock, Preserve)
        {
            VAR1,   32
        }

        BankField (VARM, VAR1, Arg0, DWordAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            VAR2,   32
        }

        VAR2 = Arg1
    }

    Method (M006, 3, Serialized)
    {
        Local0 = (M004 (Arg0) & Arg1)
        Local1 = (Local0 | Arg2)
        M005 (Arg0, Local1)
    }

    Method (M002, 2, Serialized)
    {
        If ((Arg0 == 0x00))
        {
            If ((Arg1 == 0x00))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x00)
            }

            If ((Arg1 == 0x01))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x00)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x00)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x00)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x00)
            }

            Sleep (0x01)
        }

        If ((Arg0 == 0x01))
        {
            If ((Arg1 == 0x00))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFEFFF, 0x1000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFEFE, 0x0101)
            }

            If ((Arg1 == 0x01))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFDFFF, 0x2000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFDFD, 0x0202)
            }

            If ((Arg1 == 0x02))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFFBFFF, 0x4000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFFBFB, 0x0404)
            }

            If ((Arg1 == 0x03))
            {
                M006 (M003 (0x06, 0x00, 0xC0), 0xFFFF7FFF, 0x8000)
                M006 (M003 (0x01, 0x00, 0x65), 0xFFFFF7F7, 0x0808)
            }

            Sleep (0x01)
        }

        If ((Arg0 == 0x00))
        {
            M008 (Arg1)
            Local0 = M004 (M003 (0x03, Arg1, 0xA5))
            Local0 &= 0xFF
            Local1 = 0x01F4
            While (((Local1 > 0x00) && (Local0 != 0x10)))
            {
                Local0 = M004 (M003 (0x03, Arg1, 0xA5))
                Local0 &= 0xFF
                Local1--
                Sleep (0x01)
            }

            If ((Local0 != 0x10))
            {
                M007 (Arg1)
            }
        }
    }

    Method (M008, 1, Serialized)
    {
        Local0 = M019 (0x00, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x02)
        M020 (0x00, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, 0x01)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        M006 (M003 (0x03, Arg0, 0xC0), 0xFFFF7FFF, 0x8000)
        M006 (M003 (0x03, Arg0, 0xA4), 0xDFFFFFFF, 0x20000000)
        Sleep (0x01)
    }

    Method (M007, 1, Serialized)
    {
        Local0 = M019 (0x00, 0x15, Arg0, 0x88)
        Local1 = ((Local0 & 0xFFFFFFF0) | 0x01)
        M020 (0x00, 0x15, Arg0, 0x88, Local1)
        M006 (M003 (0x03, Arg0, 0xA4), 0xFFFFFFFE, 0x00)
        M006 (M003 (0x03, Arg0, 0xA2), 0xFFFFDFFF, 0x2000)
        Sleep (0x01)
    }

    Method (M111, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        Local3 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                        If ((Local3 != 0x00))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                            If ((Local4 == 0x00))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == 0x01))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                While ((M009 (Local5) != Local6)) {}
                            }

                            If ((Local4 == 0x02))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                                Sleep (((Local5 + 0x03E7) / 0x03E8))
                            }
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                }
            }
        }
    }

    Method (M228, 1, Serialized)
    {
        If ((Arg0 > 0x03))
        {
            Local0 = M110 /* \M110 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local3 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                    If ((Local3 == Arg0))
                    {
                        Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                        If ((Local4 == 0x00))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            M010 (Local5, Local6)
                        }

                        If ((Local4 == 0x01))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            While ((M009 (Local5) != Local6)) {}
                        }

                        If ((Local4 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                }
            }
        }
    }

    Method (M219, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M221 /* \M221 */
            If ((Local0 & 0x02))
            {
                Local0 = M220 /* \M220 */
                If (Local0)
                {
                    Local0 += 0x10
                    Local1 = 0x00
                    Local2 = 0x01
                    While ((Local2 != 0xFF))
                    {
                        Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                        Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                        Local4 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                        Local5 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                        Local7 = M013 ((Local0 + Local1), 0x08, 0x00, 0x20)
                        If ((Local4 == Arg0))
                        {
                            If (((Local2 < 0x0A) && (Local5 & 0x80)))
                            {
                                If ((Arg1 == 0x00))
                                {
                                    If ((M085 >= 0x04))
                                    {
                                        If (((Local7 >> 0x10) > 0x00))
                                        {
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                            }
                                            Else
                                            {
                                                Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                    Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                            }

                                            Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << 0x01)))
                                            If (((Local7 >> 0x1C) == 0x02))
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                            }
                                            Else
                                            {
                                                M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                    ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                            }
                                        }
                                        ElseIf ((Local2 >= 0x04))
                                        {
                                            M012 ((M084 + 0x0E00), 0x01, ((Local2 - 0x04) * 0x02
                                                ), 0x02, 0x00)
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, 0x00)
                                        }
                                    }
                                    Else
                                    {
                                        M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                            0x01) * 0x04), 0x04, 0x00)
                                    }
                                }
                                ElseIf ((Local5 & 0x04))
                                {
                                    If ((Arg1 == 0x01))
                                    {
                                        If ((M085 >= 0x04))
                                        {
                                            If (((Local7 >> 0x10) > 0x00))
                                            {
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                }
                                                Else
                                                {
                                                    Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                        Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                }

                                                Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << 0x01)))
                                                Local6 |= (0x03 << (Local2 << 0x01))
                                                If (((Local7 >> 0x1C) == 0x02))
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                }
                                                Else
                                                {
                                                    M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                        ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                }
                                            }
                                            ElseIf ((Local2 >= 0x04))
                                            {
                                                M012 ((M084 + 0x0E00), 0x01, ((Local2 - 0x04) * 0x02
                                                    ), 0x02, 0x03)
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, 0x03)
                                            }
                                        }
                                        Else
                                        {
                                            M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                0x01) * 0x04), 0x04, 0x0F)
                                        }
                                    }

                                    If ((Arg1 == 0x02))
                                    {
                                        Local6 = M017 (0x00, M013 ((Local0 + Local1), 0x05, 0x00, 0x08), 
                                            M013 ((Local0 + Local1), 0x06, 0x00, 0x08), 0x19, 0x00, 0x08)
                                        If ((M265 (Local6, 0x00, 0x00) == 0x01))
                                        {
                                            If ((M085 >= 0x04))
                                            {
                                                If (((Local7 >> 0x10) > 0x00))
                                                {
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300)
                                                    }
                                                    Else
                                                    {
                                                        Local6 = M249 (((Local7 >> 0x18) & 0x0F), ((
                                                            Local7 >> 0x14) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00)
                                                    }

                                                    Local6 &= (0xFFFFFFFF ^ (0x03 << (Local2 << 0x01)))
                                                    Local6 |= (Local3 << (Local2 << 0x01))
                                                    If (((Local7 >> 0x1C) == 0x02))
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D02300, Local6)
                                                    }
                                                    Else
                                                    {
                                                        M250 (((Local7 >> 0x18) & 0x0F), ((Local7 >> 0x14
                                                            ) & 0x0F), ((Local7 >> 0x10) & 0x0F), 0x02D01E00, Local6)
                                                    }
                                                }
                                                ElseIf ((Local2 >= 0x04))
                                                {
                                                    M012 ((M084 + 0x0E00), 0x01, ((Local2 - 0x04) * 0x02
                                                        ), 0x02, Local3)
                                                }
                                                Else
                                                {
                                                    M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, Local3)
                                                }
                                            }
                                            Else
                                            {
                                                M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                                    0x01) * 0x04), 0x04, Local3)
                                            }
                                        }
                                    }
                                }
                                ElseIf ((M085 >= 0x04))
                                {
                                    M012 ((M084 + 0x0E00), 0x00, (Local2 * 0x02), 0x02, 0x03)
                                }
                                Else
                                {
                                    M012 ((M084 + 0x0E00), (Local2 / 0x02), ((Local2 & 
                                        0x01) * 0x04), 0x04, Local3)
                                }

                                Local2 = 0xFF
                            }
                        }

                        Local1 += 0x0C
                    }
                }
            }
        }
    }

    Method (M112, 2, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local4 = M013 ((Local0 + Local1), 0x02, 0x00, 0x08)
                            If ((Local4 == 0x00))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                            }

                            If ((Local4 == 0x01))
                            {
                                Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                                Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                                M010 (Local5, Local6)
                                Local7 = M009 (Local5)
                                Local4 = 0x03F2
                                While (((Local4 > 0x00) && (Local7 != Local6)))
                                {
                                    Local4 = (Local4 - 0x01)
                                    Stall (0x63)
                                    Local7 = M009 (Local5)
                                }
                            }
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x20)
                            Sleep (((Local5 + 0x03E7) / 0x03E8))
                        }
                    }

                    Local1 += 0x08
                }
            }
        }
    }

    Method (M275, 2, Serialized)
    {
        Local7 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M109 /* \M109 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local3 < 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x03, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x03, 0x10, 0x08)
                            If ((M009 (Local5) == Local6))
                            {
                                Local7 = 0x01
                            }
                        }
                    }

                    Local1 += 0x08
                }
            }
        }

        Return (Local7)
    }

    Method (M113, 1, Serialized)
    {
        If ((Arg0 != 0x00))
        {
            Local0 = M108 /* \M108 */
            Local7 = 0x01
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x01
                While (((Local2 != 0xFF) && (Local2 != 0x00)))
                {
                    Local2 = M013 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    If ((Local2 == Arg0))
                    {
                        Local2 = 0xFF
                        Local3 = M013 ((Local0 + Local1), 0x01, 0x00, 0x08)
                        If ((Local3 == 0x00))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x01))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x02))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, 0x00, 0x08)
                            Local7 &= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x03))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }

                        If ((Local3 == 0x04))
                        {
                            Local5 = M013 ((Local0 + Local1), 0x02, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x04, 0x00, 0x08)
                            Local7 = (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x05, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x07, 0x00, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                            Local5 = M013 ((Local0 + Local1), 0x08, 0x00, 0x10)
                            Local6 = M013 ((Local0 + Local1), 0x0A, 0x00, 0x08)
                            Local7 |= (M009 (Local5) == Local6)
                        }
                    }
                    Else
                    {
                        Local1 += 0x0B
                    }
                }
            }
        }
        Else
        {
            Local7 = 0x00
        }

        If (Local7)
        {
            Local7 = 0x01
        }

        Return (Local7)
    }

    Method (M114, 4, Serialized)
    {
        Local7 = 0x00
        If (!M001 (Arg0, Arg1))
        {
            Name (M115, Buffer (0x05) {})
            CreateWordField (M115, 0x00, M116)
            CreateField (M115, 0x10, 0x03, M117)
            CreateField (M115, 0x13, 0x05, M118)
            CreateByteField (M115, 0x03, M119)
            CreateByteField (M115, 0x04, M120)
            M116 = 0x05
            M119 = 0x00
            M118 = Arg0
            M117 = Arg1
            If ((Arg2 == 0x00))
            {
                If ((Arg3 != 0x01))
                {
                    M120 = 0x00
                    \_SB.ALIB (0x06, M115)
                }
            }
            Else
            {
                If ((Arg3 != 0x01))
                {
                    M120 = 0x01
                    \_SB.ALIB (0x06, M115)
                }

                Local0 = M017 (0x00, Arg0, Arg1, 0x19, 0x00, 0x08)
                If (((Local0 != 0x00) && (Local0 != 0xFF)))
                {
                    Local1 = M019 (Local0, 0x00, 0x00, 0x00)
                    Local2 = 0x7FFFFFFF
                    Local2 |= 0x80000000
                    If (((Local1 != 0x00) && (Local1 != Local2)))
                    {
                        Local7 = 0x01
                    }
                }
            }
        }
        ElseIf ((Arg2 == 0x00))
        {
            M002 (0x01, Arg1)
        }
        Else
        {
            M002 (0x00, Arg1)
            Local0 = M017 (0x00, Arg0, Arg1, 0x19, 0x00, 0x08)
            If (((Local0 != 0x00) && (Local0 != 0xFF)))
            {
                Local1 = M019 (Local0, 0x00, 0x00, 0x00)
                Local2 = 0x7FFFFFFF
                Local2 |= 0x80000000
                If (((Local1 != 0x00) && (Local1 != Local2)))
                {
                    Local7 = 0x01
                }
            }
        }

        Return (Local7)
    }

    Method (M252, 3, Serialized)
    {
        If ((M085 >= 0x08))
        {
            Local0 = M251 /* \M251 */
            If (Local0)
            {
                Local0 += 0x10
                Local1 = 0x00
                Local2 = 0x00
                While ((Local2 != 0xFF))
                {
                    Local2 = M011 ((Local0 + Local1), 0x00, 0x00, 0x08)
                    Local3 = M011 ((Local0 + Local1), 0x01, 0x00, 0x08)
                    Local4 = M011 ((Local0 + Local1), 0x02, 0x00, 0x08)
                    Local5 = M011 ((Local0 + Local1), 0x03, 0x00, 0x08)
                    If (((Local2 == Arg0) && (Local3 == Arg1)))
                    {
                        If ((Local4 == Arg2))
                        {
                            Return (Local5)
                        }
                    }

                    Local1 += 0x04
                }
            }
        }

        Return (0xFFFFFFFF)
    }

    Name (M046, Zero)
    Name (M047, Ones)
    Method (M045, 0, Serialized)
    {
        Local0 = 0x00
        If ((M047 == Ones))
        {
            M047 = 0x00
            M046 = 0x00
            If (CondRefOf (\_OSI))
            {
                If (\_OSI ("Windows 2012"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2013"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2015"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2016"))
                {
                    M046 = 0x01
                }

                If (\_OSI ("Windows 2017"))
                {
                    M046 = 0x01
                }
            }
        }

        If ((M046 == 0x01))
        {
            Local0 = 0x01
        }

        Return (Local0)
    }

    Method (M049, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M011 (Arg0, Arg1, 0x00, 0x08)
        }

        Return (Local0)
    }

    Method (M04A, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M011 (Arg0, Arg1, 0x00, 0x08)
            Local1 = M011 (Arg0, (Arg1 + 0x01), 0x00, 0x08)
            Local0 |= (Local1 << 0x08)
        }

        Return (Local0)
    }

    Method (M04B, 2, Serialized)
    {
        Local0 = 0x00
        If ((Arg0 != 0x00))
        {
            Local0 = M011 (Arg0, Arg1, 0x00, 0x08)
            Local1 = M011 (Arg0, (Arg1 + 0x01), 0x00, 0x08)
            Local2 = M011 (Arg0, (Arg1 + 0x02), 0x00, 0x08)
            Local3 = M011 (Arg0, (Arg1 + 0x03), 0x00, 0x08)
            Local0 |= (Local1 << 0x08)
            Local0 |= (Local2 << 0x10)
            Local0 |= (Local3 << 0x18)
        }

        Return (Local0)
    }

    Mutex (M230, 0x00)
    Method (M232, 3, Serialized)
    {
        Local0 = Arg0
        Local1 = Arg1
        Local2 = Arg2
        Acquire (M230, 0xFFFF)
        Local0 = Arg0
        OperationRegion (VARM, SystemIO, M231, 0x02)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            VAR1,   8, 
            VAR2,   8
        }

        VAR2 = Local1
        VAR1 = Local0
        Sleep (Local2)
        Release (M230)
    }

    Method (M043, 3, Serialized)
    {
        If (CondRefOf (MOEM))
        {
            Return (MOEM (Arg0, Arg1, Arg2))
        }
        Else
        {
            Return (0x00)
        }
    }

    Method (MLIB, 2, Serialized)
    {
        Switch (ToInteger (Arg0))
        {
            Case (0x00)
            {
                Local0 = DerefOf (Arg1 [0x02])
                Switch (ToInteger (Local0))
                {
                    Case (0x03)
                    {
                        M228 (0x04)
                        M228 (0x05)
                    }
                    Case (0x04)
                    {
                        M228 (0x04)
                        M228 (0x06)
                    }
                    Case (0x05)
                    {
                        M228 (0x04)
                        M228 (0x07)
                    }

                }
            }

        }
    }

    Method (M248, 1, Serialized)
    {
        If ((M085 == 0x08))
        {
            If ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x07, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08))
            }
        }
        ElseIf ((M085 >= 0x0B))
        {
            If ((M085 >= 0x0D))
            {
                Return (M017 (0x00, 0x08, (Arg0 + 0x01), 0x19, 0x00, 0x08))
            }
            ElseIf ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x07, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, Arg0, 0x19, 0x00, 0x08))
            }
        }
        ElseIf ((M085 >= 0x09))
        {
            If ((Arg0 == 0x00))
            {
                Return (M017 (0x00, 0x08, 0x01, 0x19, 0x00, 0x08))
            }
            Else
            {
                Return (M017 (0x00, 0x08, 0x02, 0x19, 0x00, 0x08))
            }
        }
        Else
        {
            Return (0x00)
        }
    }

    Method (M401, 2, NotSerialized)
    {
        Local0 = (Arg0 & 0x1F)
        Local0 = ((Local0 << 0x03) | (Arg1 & 0x07))
        Local1 = 0x00
        If (((M085 >= 0x09) && (M085 <= 0x0A)))
        {
            Local2 = 0x07
        }
        Else
        {
            Local2 = 0x0A
        }

        Local3 = 0x14301000
        Local4 = M249 (0x00, 0x00, 0x00, ((Local1 * 0x04) + Local3
            ))
        While (((Local1 < Local2) && (Local4 != Local0)))
        {
            Local1++
            Local4 = M249 (0x00, 0x00, 0x00, ((Local1 * 0x04) + Local3
                ))
        }

        If ((Local1 <= Local2))
        {
            Return (Local1)
        }
        Else
        {
            Return (0xFF)
        }
    }

    Method (M402, 2, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                Local0 = M249 (0x00, 0x00, 0x00, 0x11180188)
                Local0 &= 0xFFFFDFFF
                M250 (0x00, 0x00, 0x00, 0x11180188, (Local0 | 0x2000))
            }

            Local1 = (M019 (0x00, 0x00, 0x00, 0x84) & 0xFF00FCFF)
            Local2 = ((Arg0 << 0x13) | (Arg1 << 0x10))
            Local1 |= Local2
            M020 (0x00, 0x00, 0x00, 0x84, (Local1 | 0x0100))
            M020 (0x00, 0x00, 0x00, 0x84, (Local1 | 0x0300))
            If ((M085 >= 0x0C))
            {
                Local3 = M019 (0x00, 0x00, 0x00, 0x84)
                Local5 = 0x4EEA
                While (((Local5 > 0x00) && ((Local3 & 0x0400) != 0x0400)))
                {
                    Local5 = (Local5 - 0x01)
                    Stall (0x63)
                    Local3 = M019 (0x00, 0x00, 0x00, 0x84)
                }
            }

            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240294 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140294 + (Local4 << 0x0C))
            }

            Local3 = M249 (0x00, 0x00, 0x00, Local2)
            Local5 = 0x4EEA
            While (((Local5 > 0x00) && ((Local3 & 0x3F) != 0x1F)))
            {
                Local5 = (Local5 - 0x01)
                Stall (0x63)
                Local3 = M249 (0x00, 0x00, 0x00, Local2)
            }

            M020 (0x00, 0x00, 0x00, 0x84, (Local1 | 0x0100))
            If (((M085 >= 0x08) && (M085 <= 0x0B)))
            {
                M250 (0x00, 0x00, 0x00, 0x11180188, Local0)
            }
        }
    }

    Method (M403, 3, NotSerialized)
    {
        Local4 = M401 (Arg0, Arg1)
        If ((Local4 != 0xFF))
        {
            If (((M085 == 0x0D) && (Local4 >= 0x03)))
            {
                Local2 = (0x11240280 + ((Local4 - 0x03) << 0x0C))
            }
            Else
            {
                Local2 = (0x11140280 + (Local4 << 0x0C))
            }

            Local0 = M249 (0x00, 0x00, 0x00, Local2)
            Local0 &= 0xFFBFFFFF
            Local1 = Arg2
            Local0 |= (Local1 << 0x16)
            M250 (0x00, 0x00, 0x00, Local2, Local0)
        }
    }

    Name (M404, Buffer (0x07)
    {
         0x00, 0x02, 0x06, 0x08, 0x04, 0x0A, 0x0C         // .......
    })
    Method (M405, 5, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > 0x00) || (Arg1 > 0x00)) || ((Arg2 > 
                0x00) || (Arg3 > 0x00))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 <<= (Local1 * 0x02)
                Local0 &= 0x03
            }
            ElseIf ((Local1 >= 0x04))
            {
                Local0 = M011 ((M084 + 0x0E00), 0x01, ((Local1 - 0x04
                    ) * 0x02), 0x02)
            }
            Else
            {
                Local0 = M011 ((M084 + 0x0E00), 0x00, (Local1 * 0x02), 
                    0x02)
            }
        }
        Else
        {
            Local0 = M011 ((M084 + 0x0E00), (Arg4 / 0x02), (
                (Arg4 & 0x01) * 0x04), 0x04)
        }

        Return (Local0)
    }

    Method (M406, 6, Serialized)
    {
        If ((M085 >= 0x04))
        {
            Local1 = DerefOf (M404 [Arg4])
            If ((((Arg0 > 0x00) || (Arg1 > 0x00)) || ((Arg2 > 
                0x00) || (Arg3 > 0x00))))
            {
                If ((Arg3 == 0x02))
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D02300)
                }
                Else
                {
                    Local0 = M249 (Arg0, Arg1, Arg2, 0x02D01E00)
                }

                Local0 &= (0xFFFFFFFF ^ (0x03 << (Local1 << 0x01)))
                Local0 |= (Arg5 << (Local1 << 0x01))
                If ((Arg3 == 0x02))
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D02300, Local0)
                }
                Else
                {
                    M250 (Arg0, Arg1, Arg2, 0x02D01E00, Local0)
                }
            }
            ElseIf ((Local1 >= 0x04))
            {
                M012 ((M084 + 0x0E00), 0x01, ((Local1 - 0x04) * 0x02
                    ), 0x02, Arg5)
            }
            Else
            {
                M012 ((M084 + 0x0E00), 0x00, (Local1 * 0x02), 0x02, Arg5)
            }
        }
        Else
        {
            M012 ((M084 + 0x0E00), (Arg4 / 0x02), ((Arg4 & 
                0x01) * 0x04), 0x04, Arg5)
        }
    }

    Mutex (M408, 0x00)
    Method (M409, 3, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, 0x00, 0x08)
        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, (Local5 | 0x01))
        Local1 = 0x00
        Local2 = 0x64
        While (((Local2 > 0x00) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - 0x01)
            Stall (0x05)
            Local1 = SMB8 /* \M409.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == 0x00))
            {
                SMB2 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB1 /* \M409.SMB1 */
            }

            If ((Local2 == 0x00))
            {
                SMB1 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            SMB0 = 0x1F
            SMB4 = ((Arg1 << 0x01) | 0x01)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M409.SMB2 */
            SMB2 = 0x48
            Local1 = 0x01
            Local2 = 0x03E8
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M409.SMB0 */
            }

            If ((Local2 == 0x00))
            {
                SMB2 = 0x02
                M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
                Release (M408)
                Return (0x00)
            }

            Local1 = SMB0 /* \M409.SMB0 */
            If (((Local1 & 0x04) != 0x00))
            {
                Local3 = 0x00
                Local4 = 0x00
            }
            ElseIf (((Local1 & 0x08) != 0x00))
            {
                SMB0 = 0x08
                Local3 = (Local3 - 0x01)
                Local4 = 0x00
            }
            Else
            {
                Local3 = 0x00
                Local4 = SMB5 /* \M409.SMB5 */
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (M410, 4, Serialized)
    {
        Acquire (M408, 0xFFFF)
        Local0 = (M414 + (Arg0 << 0x05))
        OperationRegion (VARM, SystemIO, Local0, 0x09)
        Field (VARM, ByteAcc, NoLock, Preserve)
        {
            SMB0,   8, 
            SMB1,   8, 
            SMB2,   8, 
            SMB3,   8, 
            SMB4,   8, 
            SMB5,   8, 
            SMB6,   8, 
            SMB7,   8, 
            SMB8,   8
        }

        Local5 = M011 ((M084 + 0x0300), 0x02, 0x00, 0x08)
        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, (Local5 | 0x01))
        Local1 = 0x00
        Local2 = 0x64
        While (((Local2 > 0x00) && ((Local1 & 0x10) != 0x10)))
        {
            SMB8 |= 0x10
            Local2 = (Local2 - 0x01)
            Stall (0x05)
            Local1 = SMB8 /* \M410.SMB8 */
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB0 = 0x1F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == 0x00))
            {
                SMB2 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            Local1 = 0x01
            Local2 = 0x64
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                SMB1 = 0x3F
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB1 /* \M410.SMB1 */
            }

            If ((Local2 == 0x00))
            {
                SMB1 = 0x02
                Local3 = (Local3 - 0x01)
            }
            Else
            {
                Local3 = 0x00
            }
        }

        If (((Local2 == 0x00) && (Local3 == 0x00)))
        {
            M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
            Release (M408)
            Return (0x00)
        }

        Local3 = 0x03
        While ((Local3 > 0x00))
        {
            SMB0 = 0x1F
            SMB4 = (Arg1 << 0x01)
            SMB3 = Arg2
            SMB2 = 0x08
            Local1 = SMB2 /* \M410.SMB2 */
            SMB5 = Arg3
            SMB2 = 0x48
            Local1 = 0x01
            Local2 = 0x03E8
            While (((Local2 > 0x00) && ((Local1 & 0x01) != 0x00)))
            {
                Local2 = (Local2 - 0x01)
                Stall (0x05)
                Local1 = SMB0 /* \M410.SMB0 */
            }

            If ((Local2 == 0x00))
            {
                SMB2 = 0x02
                M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
                Release (M408)
                Return (0x00)
            }

            Local1 = SMB0 /* \M410.SMB0 */
            If (((Local1 & 0x04) != 0x00))
            {
                Local3 = 0x00
                Local4 = 0x00
            }
            ElseIf (((Local1 & 0x08) != 0x00))
            {
                SMB0 = 0x08
                Local3 = (Local3 - 0x01)
                Local4 = 0x00
            }
            Else
            {
                Local3 = 0x00
                Local4 = 0x00
            }
        }

        SMB0 = 0x1F
        SMB8 |= 0x20
        M012 ((M084 + 0x0300), 0x02, 0x00, 0x08, Local5)
        Release (M408)
        Return (Local4)
    }

    Method (MPTS, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCI0.GP18.SATA.TPTS))
                {
                    \_SB.PCI0.GP18.SATA.TPTS (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCI0.SATA.TPTS))
            {
                \_SB.PCI0.SATA.TPTS (Arg0)
            }
        }

        If ((M226 != 0x00))
        {
            If (CondRefOf (\_SB.M263))
            {
                \_SB.M263 (Arg0)
            }
        }

        If ((M331 != 0x00))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != 0x00) && (Local1 != 0x00)))
            {
                If (CondRefOf (\_SB.IPTS))
                {
                    \_SB.IPTS (Arg0)
                }
            }
        }
    }

    Method (MWAK, 1, NotSerialized)
    {
        Local0 = M049 (M128, 0x67)
        If (((Local0 & 0x03) == 0x03))
        {
            If ((M085 >= 0x08))
            {
                If (CondRefOf (\_SB.PCI0.GP18.SATA.TWAK))
                {
                    \_SB.PCI0.GP18.SATA.TWAK (Arg0)
                }
            }
            ElseIf (CondRefOf (\_SB.PCI0.SATA.TWAK))
            {
                \_SB.PCI0.SATA.TWAK (Arg0)
            }
        }

        If ((M226 != 0x00))
        {
            If (CondRefOf (\_SB.M264))
            {
                \_SB.M264 (Arg0)
            }
        }

        If ((M280 != 0x00))
        {
            If (CondRefOf (\_SB.M284))
            {
                \_SB.M284 (Arg0)
            }
        }

        If ((M331 != 0x00))
        {
            Local0 = M049 (M331, 0x10)
            Local1 = M049 (M331, 0x1D)
            If (((Local0 != 0x00) && (Local1 != 0x00)))
            {
                If (CondRefOf (\_SB.IWAK))
                {
                    \_SB.IWAK (Arg0)
                }
            }
        }
    }

    Scope (\_SB.GPIO)
    {
        Method (XINI, 0, NotSerialized)
        {
            If ((\_GPE.M420 != 0xFF))
            {
                Local0 = (\_GPE.M415 & 0x01)
                Local1 = (\_GPE.M416 & 0x07)
                Local1 += \_GPE.M411
                \_GPE.M419 = M409 (Local0, Local1, 0x00)
            }
        }
    }

    Scope (\_GPE)
    {
        Name (M411, 0x20)
        Name (M415, 0x01)
        Name (M416, 0x04)
        Name (M417, 0x40)
        Name (M418, 0x40)
        Name (M419, 0xFF)
        Name (M420, 0xFF)
        Method (XL0A, 0, NotSerialized)
        {
            Local0 = (\_GPE.M415 & 0x01)
            Local1 = (\_GPE.M416 & 0x07)
            Local1 += \_GPE.M411
            Local2 = \_GPE.M419
            Local3 = M409 (Local0, Local1, 0x00)
            \_GPE.M419 = Local3
            Local3 ^= Local2
            Local3 |= \_GPE.M418
            Local3 &= \_GPE.M417
            If (((Local3 & 0x01) == 0x01))
            {
                If (CondRefOf (\_GPE.SP00))
                {
                    \_GPE.SP00 ()
                }
            }

            If (((Local3 & 0x02) == 0x02))
            {
                If (CondRefOf (\_GPE.SP01))
                {
                    \_GPE.SP01 ()
                }
            }

            If (((Local3 & 0x04) == 0x04))
            {
                If (CondRefOf (\_GPE.SP02))
                {
                    \_GPE.SP02 ()
                }
            }

            If (((Local3 & 0x08) == 0x08))
            {
                If (CondRefOf (\_GPE.SP03))
                {
                    \_GPE.SP03 ()
                }
            }

            If (((Local3 & 0x10) == 0x10))
            {
                If (CondRefOf (\_GPE.SP04))
                {
                    \_GPE.SP04 ()
                }
            }

            If (((Local3 & 0x20) == 0x20))
            {
                If (CondRefOf (\_GPE.SP05))
                {
                    \_GPE.SP05 ()
                }
            }

            If (((Local3 & 0x40) == 0x40))
            {
                If (CondRefOf (\_GPE.SP06))
                {
                    \_GPE.SP06 ()
                }
            }

            If (((Local3 & 0x80) == 0x80))
            {
                If (CondRefOf (\_GPE.SP07))
                {
                    \_GPE.SP07 ()
                }
            }
        }
    }
}



TPM2
----
[000h 0000   4]                    Signature : "TPM2"    [Trusted Platform Module hardware interface Table]
[004h 0004   4]                 Table Length : 00000038
[008h 0008   1]                     Revision : 04
[009h 0009   1]                     Checksum : 36
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000002
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036   2]               Platform Class : 0000
[026h 0038   2]                     Reserved : 0000
[028h 0040   8]              Control Address : 00000000FDE10510
[030h 0048   4]                 Start Method : 02 [ACPI Start Method]

/**** ACPI subtable terminates early - may be older version (dump table) */

Raw Table Data: Length 56 (0x38)

    0000: 54 50 4D 32 38 00 00 00 04 36 4C 45 4E 4F 56 4F  // TPM28....6LENOVO
    0010: 43 42 2D 30 31 20 20 20 02 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 00 00 00 00 10 05 E1 FD 00 00 00 00  // ................
    0030: 02 00 00 00 00 00 00 00                          // ........


UEFI
----
[000h 0000   4]                    Signature : "UEFI"    [UEFI Boot Optimization Table]
[004h 0004   4]                 Table Length : 000000EE
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : 48
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002

[024h 0036  16]              UUID Identifier : 0D9FB197-CEFC-4E91-ACB1-2535D9E5A844
[034h 0052   2]                  Data Offset : 0036

Raw Table Data: Length 238 (0xEE)

    0000: 55 45 46 49 EE 00 00 00 01 48 4C 45 4E 4F 56 4F  // UEFI.....HLENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 97 B1 9F 0D FC CE 91 4E AC B1 25 35  // ...........N..%5
    0030: D9 E5 A8 44 36 00 09 00 00 00 10 00 00 00 D1 00  // ...D6...........
    0040: 00 00 11 00 00 00 8E 00 00 00 81 00 00 00 82 00  // ................
    0050: 00 00 20 00 00 00 12 00 00 00 E9 00 00 00 03 25  // .. ............%
    0060: 05 FF F9 1A EB 4A 83 C4 C2 D4 CE B1 0C A3 16 29  // .....J.........)
    0070: EA 81 A0 F9 15 41 83 85 1A 86 4E 2F 30 9C E5 C3  // .....A....N/0...
    0080: 71 51 DD C7 15 44 AF FB AA EC D7 65 FE 15 B7 2B  // qQ...D.....e...+
    0090: 10 7A 91 1E E9 46 BB BA B7 1F 75 BA 5E 57 3D BE  // .z...F....u.^W=.
    00A0: 20 33 92 49 CD 4F B8 6C 60 E5 E9 15 69 1E 01 61  //  3.I.O.l`...i..a
    00B0: 38 67 4A 86 3A 47 B4 29 9A F3 2F 3C CC 06 66 73  // 8gJ.:G.)../<..fs
    00C0: 5E 52 29 84 65 4B B1 77 3B 79 04 DD BF 85 AA 9B  // ^R).eK.w;y......
    00D0: DF 6C 34 F9 C2 43 A8 5F 28 63 86 A9 76 C4 58 DC  // .l4..C._(c..v.X.
    00E0: AF D8 22 6E F8 42 99 66 36 FF 78 8C 9C AF        // .."n.B.f6.x...


VFCT
----
[000h 0000   4]                    Signature : "VFCT"    
[004h 0004   4]                 Table Length : 0000D484
[008h 0008   1]                     Revision : 01
[009h 0009   1]                     Checksum : F3
[00Ah 0010   6]                       Oem ID : "LENOVO"
[010h 0016   8]                 Oem Table ID : "CB-01   "
[018h 0024   4]                 Oem Revision : 00000001
[01Ch 0028   4]              Asl Compiler ID : "PTEC"
[020h 0032   4]        Asl Compiler Revision : 00000002


**** Unknown ACPI table signature [VFCT]


Raw Table Data: Length 54404 (0xD484)

    0000: 56 46 43 54 84 D4 00 00 01 F3 4C 45 4E 4F 56 4F  // VFCT......LENOVO
    0010: 43 42 2D 30 31 20 20 20 01 00 00 00 50 54 45 43  // CB-01   ....PTEC
    0020: 02 00 00 00 32 9B A3 5D BD C6 CF 49 95 A6 E8 E4  // ....2..]...I....
    0030: 2E CD 79 A7 4C 00 00 00 00 00 00 00 00 00 00 00  // ..y.L...........
    0040: 00 00 00 00 00 00 00 00 00 00 00 00 03 00 00 00  // ................
    0050: 00 00 00 00 00 00 00 00 02 10 36 16 00 00 00 00  // ..........6.....
    0060: 01 00 00 00 00 D4 00 00 55 AA 6A E9 FF 01 00 00  // ........U.j.....
    0070: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0080: B0 01 00 00 00 00 49 42 4D 91 86 90 00 00 00 00  // ......IBM.......
    0090: 00 00 00 00 00 00 00 04 20 37 36 31 32 39 35 35  // ........ 7612955
    00A0: 32 30 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // 20..............
    00B0: 86 01 00 00 00 00 00 00 30 31 2F 32 31 2F 32 30  // ........01/21/20
    00C0: 2C 31 39 3A 30 32 3A 31 33 00 00 00 E9 2F 03 00  // ,19:02:13..../..
    00D0: E9 39 03 00 00 00 70 00 31 31 33 2D 52 45 4E 4F  // .9....p.113-RENO
    00E0: 49 52 2D 30 32 35 00 52 45 4E 4F 49 52 00 50 43  // IR-025.RENOIR.PC
    00F0: 49 5F 45 58 50 52 45 53 53 00 30 00 0D 0A 52 65  // I_EXPRESS.0...Re
    0100: 6E 6F 69 72 20 47 65 6E 65 72 69 63 20 56 42 49  // noir Generic VBI
    0110: 4F 53 20 20 20 20 20 20 20 20 20 20 20 20 20 20  // OS              
    0120: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0130: 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20 20  //                 
    0140: 20 20 20 20 20 20 20 20 20 20 0D 0A 00 0D 0A 20  //           ..... 
    0150: 0D 0A 00 28 43 29 20 31 39 38 38 2D 32 30 31 38  // ...(C) 1988-2018
    0160: 2C 20 41 64 76 61 6E 63 65 64 20 4D 69 63 72 6F  // , Advanced Micro
    0170: 20 44 65 76 69 63 65 73 2C 20 49 6E 63 2E 00 41  //  Devices, Inc..A
    0180: 54 4F 4D 42 49 4F 53 42 4B 2D 41 4D 44 20 56 45  // TOMBIOSBK-AMD VE
    0190: 52 30 31 37 2E 30 31 30 2E 30 30 30 2E 30 31 34  // R017.010.000.014
    01A0: 2E 30 30 30 30 30 30 00 52 65 6E 6F 69 72 47 65  // .000000.RenoirGe
    01B0: 6E 65 72 69 00 32 30 36 31 31 38 32 32 00 34 39  // neri.20611822.49
    01C0: 39 33 34 34 20 20 00 20 20 20 20 20 20 20 20 00  // 9344  .        .
    01D0: 41 4D 44 5F 52 65 6E 6F 69 72 5F 47 65 6E 65 72  // AMD_Renoir_Gener
    01E0: 69 63 5C 63 6F 6E 66 69 67 2E 68 00 00 00 28 00  // ic\config.h...(.
    01F0: 02 02 41 54 4F 4D 00 C0 02 03 40 01 D5 01 94 00  // ..ATOM....@.....
    0200: 74 03 00 00 00 00 02 10 02 10 B0 01 D2 93 78 94  // t.............x.
    0210: 00 00 00 00 00 00 00 00 50 43 49 52 02 10 36 16  // ........PCIR..6.
    0220: 00 00 18 00 00 00 00 03 6A 00 0A 11 00 80 00 00  // ........j.......
    0230: 41 4D 44 20 41 54 4F 4D 42 49 4F 53 00 54 69 76  // AMD ATOMBIOS.Tiv
    0240: 19 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0250: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    0260: 00 00 00 00 00 00 00 00 00 00 00 00 00 1E 06 66  // ...............f
    0270: 50 66 51 66 52 66 53 66 55 66 56 66 57 0E 1F A3  // PfQfRfSfUfVfW...
    0280: 14 00 8C 0E 08 00 B2 20 E8 83 2F 0B C0 75 14 A2  // ....... ../..u..
    0290: 02 00 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // ..f_f^f]f[fZfYfX
    02A0: 07 1F CB E8 9D 30 E8 F3 00 E8 6C 2E 32 D2 8D 3E  // .....0....l.2..>
    02B0: 86 01 89 55 16 E8 82 11 E8 45 11 E8 9C 12 E8 EC  // ...U.....E......
    02C0: 02 E8 C7 28 0B C0 74 0C E8 39 00 E8 74 56 E8 41  // ...(..t..9..tV.A
    02D0: 11 E8 C3 56 E8 A9 00 B4 80 E8 66 2E 8A C7 66 C1  // ...V......f...f.
    02E0: E0 10 8A E3 B0 20 66 A3 86 90 E8 EB 02 E8 54 11  // ..... f.......T.
    02F0: E8 93 30 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66  // ..0f_f^f]f[fZfYf
    0300: 58 07 1F CB 2E 8B 1E 08 00 83 3E 14 03 00 75 04  // X.........>...u.
    0310: 89 1E 12 03 1E 2E 8E 1E 0A 03 9C FA 66 C7 06 08  // ............f...
    0320: 01 65 F0 00 F0 C7 06 40 00 74 03 89 1E 42 00 C7  // .e.....@.t...B..
    0330: 06 B4 01 74 03 89 1E B6 01 C7 06 7C 00 68 5E 89  // ...t.......|.h^.
    0340: 1E 7E 00 C7 06 0C 01 7B 62 89 1E 0E 01 C7 06 A8  // .~.....{b.......
    0350: 04 A0 58 89 1E AA 04 2E 8E 1E 12 03 8B C3 A3 A2  // ..X.............
    0360: 58 A3 B2 58 A3 C4 58 9D 1F C3 50 4D 49 44 74 03  // X..X..X...PMIDt.
    0370: D2 48 00 00 00 A0 00 B0 00 B8 00 C0 00 00 00 00  // .H..............
    0380: BB 00 00 E8 A7 10 66 C1 E8 10 A3 B6 01 BB 0B 00  // ......f.........
    0390: E8 9A 10 8D 3E 86 01 66 89 45 18 C3 66 50 66 52  // ....>..f.E..fPfR
    03A0: 51 56 66 B8 52 54 53 5F BA 80 00 66 EF B0 56 EE  // QVf.RTS_...f..V.
    03B0: B0 42 EE B0 49 EE B0 4F EE B0 53 EE B0 20 EE BE  // .B..I..O..S.. ..
    03C0: 26 01 B9 19 00 AC E6 80 E2 FB 66 B8 44 4E 45 5F  // &.........f.DNE_
    03D0: BA 80 00 66 EF 5E 59 66 5A 66 58 C3 E8 82 2F 80  // ...f.^YfZfX.../.
    03E0: FC A0 75 05 E8 3D 00 EB 11 80 FC 4F 75 05 E8 6F  // ..u..=.....Ou..o
    03F0: 44 EB 07 E8 C4 49 EB 02 B4 01 E8 89 2F CF E8 60  // D....I....../..`
    0400: 2F E8 20 00 EB 02 B4 01 E8 7B 2F CB E8 52 2F 80  // /. ......{/..R/.
    0410: FC 4F 75 05 E8 49 44 EB 07 E8 9E 49 EB 02 B4 01  // .Ou..ID....I....
    0420: E8 63 2F CB 1E 06 66 50 66 51 66 52 66 53 66 55  // .c/...fPfQfRfSfU
    0430: 66 56 66 57 0E 1F 3C 04 75 29 2E A1 1A 00 66 C1  // fVfW..<.u)....f.
    0440: E0 10 2E A1 18 00 8D 36 95 00 8A 3C 80 EF 30 B3  // .......6...<..0.
    0450: 02 8B EC 89 5E 0C 89 46 04 66 C1 E8 10 89 46 00  // ....^..F.f....F.
    0460: E9 28 01 3C 05 75 18 E8 D8 2C E8 AB 2C 2E A1 08  // .(.<.u...,..,...
    0470: 00 8B EC 89 56 10 89 46 00 89 5E 04 E9 0C 01 3C  // ....V..F..^....<
    0480: 06 75 32 E8 8F 0F 66 D1 E0 8B EC 89 46 14 BB 02  // .u2...f.....F...
    0490: 00 E8 99 0F 88 46 18 E8 83 0F 66 89 46 0C BB 09  // .....F....f.F...
    04A0: 00 E8 89 0F 33 C0 66 89 46 00 2E 8B 16 B6 01 89  // ....3.f.F.......
    04B0: 56 10 E9 D6 00 3C 0B 75 24 0A DB 75 11 B9 80 00  // V....<.u$..u....
    04C0: BB 02 00 8B EC 89 5E 0C 89 4E 14 E9 BD 00 8A C7  // ......^..N......
    04D0: E8 D0 00 E8 34 01 0F 84 A9 00 E9 AE 00 3C 17 75  // ....4........<.u
    04E0: 1D E8 38 12 74 06 E8 95 0D E8 20 17 E8 EE 09 E8  // ..8.t..... .....
    04F0: 01 0F 33 C9 8B C8 8B EC 89 4E 14 E9 8D 00 3C 18  // ..3......N....<.
    0500: 75 45 0A FF 75 10 E8 BF 11 8B EC 89 46 0C E8 3B  // uE..u.......F..;
    0510: 0A 89 4E 10 EB 75 E8 03 12 75 68 BB 00 1C E8 DE  // ..N..u...uh.....
    0520: 2D 66 0B C0 74 5D 23 C9 74 59 E8 D7 11 BE 00 1C  // -f..t]#.tY......
    0530: E8 27 0F 74 4E BE 00 1C B0 40 E8 76 0F E8 88 11  // .'.tN....@.v....
    0540: 8B EC 89 46 0C EB 44 3C 82 75 1A 80 FB 05 75 15  // ...F..D<.u....u.
    0550: 0A FF 75 0A E8 CC 10 8B EC 89 46 14 EB 2D E8 99  // ..u.......F..-..
    0560: 10 74 18 EB 26 3C 8E 75 12 80 FF 01 74 08 80 FF  // .t..&<.u....t...
    0570: 02 75 08 80 C1 02 E8 F2 10 EB 10 8B EC C6 46 19  // .u............F.
    0580: 02 EB 0F 8B EC C6 46 19 01 EB 07 32 E4 8B EC 88  // ......F....2....
    0590: 66 19 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // f.f_f^f]f[fZfYfX
    05A0: 07 1F C3 51 8A C8 B8 01 00 D3 E0 59 C3 E8 FC 2D  // ...Q.......Y...-
    05B0: C3 0C 01 C3 50 51 B0 B6 E6 43 B0 33 E6 42 B0 05  // ....PQ...C.3.B..
    05C0: E6 42 E4 61 8A E0 0C 03 E6 61 8A C4 B9 C8 00 E8  // .B.a.....a......
    05D0: 0B 29 E6 61 59 58 C3 00 1E 56 0E 1F 80 3E 02 00  // .).aYX...V...>..
    05E0: 80 76 05 C6 06 02 00 80 8A 0E 02 00 C1 E1 09 FC  // .v..............
    05F0: C6 06 21 00 00 33 F6 32 E4 AC 02 E0 E2 FB F6 D4  // ..!..3.2........
    0600: FE C4 88 26 21 00 5E 1F C3 00 57 0B C0 75 0F E8  // ...&!.^...W..u..
    0610: 34 0C 74 25 E8 24 00 F6 C3 04 74 F3 EB 11 8B C8  // 4.t%.$....t.....
    0620: E8 68 25 23 C1 74 12 E8 11 00 F6 C3 04 74 0A 5F  // .h%#.t.......t._
    0630: 8D 5C 28 E8 4C 06 0B F6 C3 5F C3 50 E8 E9 0B E8  // .\(.L...._.P....
    0640: BA 24 E8 C8 24 0A C9 74 69 0A ED 74 10 8A CD B5  // .$..$..ti..t....
    0650: 02 E8 0C 28 B1 02 8D 9C 48 01 E8 46 2C E8 76 02  // ...(....H..F,.v.
    0660: F6 C3 04 74 08 E8 FC 0C E8 2B 23 74 45 8D 5C 28  // ...t.....+#tE.\(
    0670: E8 69 00 56 83 C6 08 E8 F7 22 5E 80 FD 02 75 11  // .i.V....."^...u.
    0680: 51 E8 18 18 59 80 FB 00 75 4D 51 B5 08 E8 E8 05  // Q...Y...uMQ.....
    0690: 59 8A DD 33 C9 E8 09 17 0A C0 75 3B E8 37 02 8A  // Y..3......u;.7..
    06A0: EB 8D 5C 28 80 CD 02 E8 3B 00 74 03 80 CD 04 E8  // ..\(....;.t.....
    06B0: C6 05 8D 9C A6 00 E8 46 2C 0A C0 74 1A 56 83 C6  // .......F,..t.V..
    06C0: 08 E8 AD 22 5E 8A DD B9 80 00 E8 D4 16 E8 D8 04  // ..."^...........
    06D0: 74 05 33 C9 E8 A1 05 E8 FC 01 58 C3 51 B9 49 00  // t.3.......X.Q.I.
    06E0: E8 A9 27 59 C3 51 E8 1A 00 75 14 E8 B9 01 3C 01  // ..'Y.Q...u....<.
    06F0: 75 0D B9 20 00 E8 27 00 75 05 80 C9 01 EB 02 33  // u.. ..'.u......3
    0700: C9 59 C3 53 E8 F8 2B 66 3D 00 FF FF FF 75 0E 83  // .Y.S..+f=....u..
    0710: C3 04 E8 EA 2B 66 3D FF FF FF 00 75 00 5B C3 50  // ....+f=....u.[.P
    0720: 52 32 D2 E8 D9 2B 02 D0 02 D4 66 C1 E8 10 02 D0  // R2...+....f.....
    0730: 02 D4 83 C3 04 E2 EC 0A D2 5A 58 C3 E8 E9 0A 8D  // .........ZX.....
    0740: 9C 4C 01 E8 39 01 E8 8D 01 B5 13 F6 C3 08 75 0C  // .L..9.........u.
    0750: E8 11 0C 8A EA 80 FD 13 75 02 B5 03 66 50 8D 9C  // ........u...fP..
    0760: B8 02 66 33 C0 8A C5 E8 F5 2A 66 58 A9 C8 0E 74  // ..f3.....*fX...t
    0770: 55 E8 62 01 F6 C3 08 74 0F E8 0F 05 8D 5C 28 E8  // U.b....t.....\(.
    0780: 04 01 75 04 E8 72 00 C3 B5 02 E8 23 01 E8 46 01  // ..u..r.....#..F.
    0790: F6 C3 04 74 21 8D 5C 28 E8 49 01 E8 94 03 74 05  // ...t!.\(.I....t.
    07A0: B5 03 E8 0B 01 E8 68 04 E8 21 01 80 FD 00 75 48  // ......h..!....uH
    07B0: B5 02 E8 0D 01 C3 8D 9C 68 01 B8 00 55 E8 65 11  // ........h...U.e.
    07C0: B5 02 E8 FD 00 C3 A9 02 00 74 2D B5 04 E8 E0 00  // .........t-.....
    07D0: E8 03 01 F6 C3 08 74 03 E8 B0 04 8D 9C 68 01 56  // ......t......h.V
    07E0: E8 E3 28 8B F7 E8 68 04 5E E8 80 28 E8 D3 00 8D  // ..(...h.^..(....
    07F0: 5C 28 E8 A0 28 E8 18 04 C3 B5 01 E8 B2 00 B5 02  // \(..(...........
    0800: E8 BF 00 E8 D0 00 F6 C3 04 75 10 8D 9C 68 01 B8  // .........u...h..
    0810: 00 55 E8 10 11 B5 02 E8 17 00 C3 E8 C6 00 B5 02  // .U..............
    0820: 8D 5C 28 E8 6E 00 75 02 B5 01 E8 04 00 E8 E0 03  // .\(.n.u.........
    0830: C3 8D 9C B4 02 B1 02 E8 69 2A B5 02 E8 83 00 C3  // ........i*......
    0840: 8D 9C 4C 01 E8 38 00 E8 8C 00 F6 C3 04 74 23 8D  // ..L..8.......t#.
    0850: 5C 28 E8 8F 00 E8 6E 28 8D 9C 68 01 06 0E 07 B9  // \(....n(..h.....
    0860: 07 00 E8 61 26 07 E8 63 00 E8 F8 0A 8D 5C 28 E8  // ...a&..c.....\(.
    0870: 5F 28 8D 5C 28 E8 FD 27 B8 02 00 E8 BE FE C3 B9  // _(.\(..'........
    0880: 61 00 E8 07 26 C3 53 81 C3 05 01 E8 71 2A 24 06  // a...&.S.....q*$.
    0890: 3C 02 5B C3 E8 10 00 3D 01 04 75 0A 53 83 C3 18  // <.[....=..u.S...
    08A0: E8 5C 2A 5B A8 01 C3 53 83 C3 12 E8 51 2A 5B C3  // .\*[...S....Q*[.
    08B0: 8D 9C B4 02 32 C9 E8 EA 29 C3 8D 9C B4 02 E8 3E  // ....2...)......>
    08C0: 2A C3 8D 9C B4 02 B1 01 E8 D8 29 C3 8D 9C B4 02  // *.........).....
    08D0: B1 01 E8 E6 29 C3 66 50 8D 9C 48 01 E8 20 2A 8A  // ....).fP..H.. *.
    08E0: D8 66 58 C3 55 57 51 B9 08 00 BD 00 00 BB 08 00  // .fX.UWQ.........
    08F0: 2B D9 D1 E3 8D 58 4E E8 05 2A E8 E3 01 E2 EE 8D  // +....XN..*......
    0900: 5C 4B E8 FA 29 B9 03 00 8B D0 BF 5C 09 85 55 06  // \K..)......\..U.
    0910: 74 17 66 8B 05 8D 9A F4 01 E8 43 29 8B 45 04 8D  // t.f.......C).E..
    0920: 9A F8 01 E8 51 29 83 C5 08 83 C7 08 E2 DF 8D 7C  // ....Q).........|
    0930: 5E B9 04 00 33 ED 8B DF E8 C4 29 0B C0 74 09 E8  // ^...3.....)..t..
    0940: 5D 01 E8 97 00 83 C5 1C 83 C7 12 E2 E9 55 32 ED  // ]............U2.
    0950: E8 6F FF 8D 5C 28 E8 4E FF 3D 01 04 75 10 83 C3  // .o..\(.N.=..u...
    0960: 14 E8 9B 29 24 70 C0 E8 04 8A E8 E8 54 FF 5D 8D  // ...)$p......T.].
    0970: 9C A6 00 E8 89 29 0A C0 74 46 8D 9C A8 00 E8 7E  // .....)..tF.....~
    0980: 29 3C 02 75 3B 66 C1 E8 10 3C 04 72 33 8D 9C A8  // )<.u;f...<.r3...
    0990: 00 32 E4 03 D8 8B FB B9 04 00 8B DF E8 60 29 0B  // .2...........`).
    09A0: C0 74 15 E8 F9 00 A9 80 00 75 0D E8 2E 00 83 C5  // .t.......u......
    09B0: 1C 55 58 83 F8 70 73 08 83 C7 12 49 0B C9 75 DA  // .UX..ps....I..u.
    09C0: 59 5F 5D C3 20 03 58 02 3C 00 01 00 00 04 00 03  // Y_]. .X.<.......
    09D0: 3C 00 00 08 80 02 E0 01 3C 00 20 00 51 8D 1D E8  // <.......<. .Q...
    09E0: 1D 29 8D 9A 68 01 E8 8E 28 8D 5D 02 E8 10 29 8D  // .)..h...(.]...).
    09F0: 9A 6A 01 E8 89 00 8D 5D 05 E8 03 29 8D 9A 6E 01  // .j.....]...)..n.
    0A00: E8 7C 00 8D 5D 08 E8 F6 28 8B C8 8A DC 66 C1 C8  // .|..]...(....f..
    0A10: 10 8A D0 80 E2 0F 8A F0 C0 EE 04 8A EC C0 ED 06  // ................
    0A20: 8A FC C0 EF 04 80 E7 03 80 E4 0F C0 E4 04 0A D4  // ................
    0A30: 80 E2 3F 80 E4 C0 C0 EC 02 0A F4 8B C3 8D 9A 74  // ..?............t
    0A40: 01 E8 33 28 8D 9A 72 01 8B C1 E8 2A 28 8D 9A 76  // ..3(..r....*(..v
    0A50: 01 33 C0 8A C6 E8 1F 28 8D 9A 78 01 33 C0 8A C2  // .3.....(..x.3...
    0A60: E8 14 28 8D 5D 0C E8 96 28 8D 9A 7A 01 E8 0F 00  // ..(.]...(..z....
    0A70: 8D 5D 0F E8 89 28 8D 9A 7E 01 E8 FA 27 59 C3 8B  // .]...(..~...'Y..
    0A80: C8 8A D4 66 C1 C8 10 8A F0 80 E6 0F 8A E8 C0 ED  // ...f............
    0A90: 04 8B C1 E8 E1 27 83 C3 02 8B C2 E8 D9 27 C3 8D  // .....'.......'..
    0AA0: 5D 11 E8 5A 28 8A E0 BA 06 00 C0 E8 07 74 03 80  // ]..Z(........t..
    0AB0: CA 80 8A C4 C0 E8 03 24 03 3C 02 75 03 80 CA 40  // .......$.<.u...@
    0AC0: 3C 03 75 12 8A C4 D0 E8 A8 01 74 03 80 E2 FD A8  // <.u.......t.....
    0AD0: 02 74 03 80 E2 FB 8B C2 8D 9A 80 01 E8 98 27 C3  // .t............'.
    0AE0: 3C 01 74 3D 8B D0 0F B6 C6 24 3F 04 3C 8D 9A F8  // <.t=.....$?.<...
    0AF0: 01 E8 83 27 0F B6 C2 83 C0 1F C1 E0 03 8D 9A F4  // ...'............
    0B00: 01 E8 73 27 0F B6 DE C1 EB 06 C1 E3 02 2E F7 A7  // ..s'............
    0B10: BC 0A 2E F7 B7 BA 0A 8D 9A F6 01 E8 59 27 83 C5  // ............Y'..
    0B20: 08 C3 10 00 0A 00 04 00 03 00 05 00 04 00 10 00  // ................
    0B30: 09 00 8D 9C A6 00 E8 C6 27 0A C0 74 1F 8D 9C A8  // ........'..t....
    0B40: 00 51 B1 03 E8 18 00 59 0B DB 74 10 E8 B0 27 32  // .Q.....Y..t...'2
    0B50: C0 66 3D 00 03 0C 00 75 03 0B DB C3 33 DB C3 66  // .f=....u....3..f
    0B60: 50 52 E8 9A 27 3C 02 75 39 80 FC 03 72 34 66 C1  // PR..'<.u9...r4f.
    0B70: E8 10 32 E4 3C 04 76 2A 03 C3 8B D0 83 C3 04 3B  // ..2.<.v*.......;
    0B80: DA 73 1F E8 79 27 8A E0 80 E4 E0 C0 EC 05 24 1F  // .s..y'........$.
    0B90: 38 CC 74 08 32 E4 FE C0 03 D8 EB E3 0B DB 5A 66  // 8.t.2.........Zf
    0BA0: 58 C3 33 DB 5A 66 58 C3 51 8D 9C A6 00 E8 4F 27  // X.3.ZfX.Q.....O'
    0BB0: 0A C0 74 1B 8D 9C A8 00 B1 12 E8 18 00 74 10 E8  // ..t..........t..
    0BC0: 3D 27 66 C1 E8 10 80 E4 07 75 04 B0 01 EB 02 32  // ='f......u.....2
    0BD0: C0 0A C0 59 C3 66 50 52 E8 24 27 3C 70 75 2B 66  // ...Y.fPR.$'<pu+f
    0BE0: C1 E8 10 32 E4 83 C3 05 03 C3 8B D0 3B DA 73 1A  // ...2........;.s.
    0BF0: E8 0C 27 38 C8 74 0D 66 C1 E8 10 32 E4 83 C0 03  // ..'8.t.f...2....
    0C00: 03 D8 EB E8 0B DB 5A 66 58 C3 33 DB 5A 66 58 C3  // ......ZfX.3.ZfX.
    0C10: 57 66 51 8D 9C 68 01 8B FB 8B DF E8 3D 00 0B C9  // WfQ..h......=...
    0C20: 74 0B 66 8B D1 E8 AB 0F 83 C7 1C EB EC 66 59 5F  // t.f..........fY_
    0C30: C3 50 53 51 B9 07 00 53 8B DA E8 C2 26 83 F8 00  // .PSQ...S....&...
    0C40: 5B 74 09 66 C1 E3 10 8B DA E8 55 22 59 5B 58 C3  // [t.f......U"Y[X.
    0C50: 51 53 B9 07 00 E8 62 22 5B 59 C3 66 50 53 83 C3  // QS....b"[Y.fPS..
    0C60: 06 E8 9B 26 5B 8B C8 66 C1 E1 10 53 83 C3 02 E8  // ...&[..f...S....
    0C70: 8D 26 8B C8 5B 66 58 C3 8D 9C 48 01 32 C9 E8 22  // .&..[fX...H.2.."
    0C80: 26 C3 57 B9 20 00 E8 3D 22 5F C3 E8 83 01 66 8B  // &.W. ..="_....f.
    0C90: CA 66 52 E8 CE 06 E8 FD 1C 66 5A 74 10 E8 44 06  // .fR......fZt..D.
    0CA0: B3 00 E8 AA 19 66 3B CA 73 03 66 8B D1 8D 9C D0  // .....f;.s.f.....
    0CB0: 03 E8 4B 26 0B C0 75 44 8D 9C 54 02 66 B8 48 3F  // ..K&..uD..T.f.H?
    0CC0: 00 00 E8 9A 25 B5 01 66 81 FA 78 69 00 00 72 25  // ....%..f..xi..r%
    0CD0: 83 C3 04 66 B8 78 69 00 00 E8 83 25 B5 02 66 81  // ...f.xi....%..f.
    0CE0: FA F0 D2 00 00 72 0E 83 C3 04 66 B8 F0 D2 00 00  // .....r....f.....
    0CF0: E8 6C 25 B5 03 B1 03 E8 CF 01 EB 45 66 B9 08 00  // .l%........Ef...
    0D00: 00 00 66 33 D2 53 8D 9C 54 02 8B D3 5B E8 EF 25  // ..f3.S..T...[..%
    0D10: 0B C0 74 22 66 25 FF FF 00 00 66 D1 E0 53 8B DA  // ..t"f%....f..S..
    0D20: E8 3C 25 5B 66 C1 CA 10 FE C2 66 C1 CA 10 83 C2  // .<%[f.....f.....
    0D30: 04 83 C3 02 E2 D7 66 C1 CA 10 8A EA B1 03 E8 88  // ......f.........
    0D40: 01 E8 42 06 A8 01 74 3F 8D 9C AE 03 E8 B0 25 3C  // ..B...t?......%<
    0D50: 00 74 34 E8 D9 05 8A EB E8 5C 01 32 ED E8 63 01  // .t4......\.2..c.
    0D60: E8 AC 05 8D 9C BB 02 E8 95 25 33 C9 8A C8 E8 28  // .........%3....(
    0D70: 01 66 3B C2 74 0E 51 E8 43 01 FE C5 E8 44 01 59  // .f;.t.Q.C....D.Y
    0D80: E2 EC EB 03 B3 00 C3 8D 9C BB 02 E8 71 25 FE C8  // ............q%..
    0D90: 8A E8 E8 2E 01 8D 9C 40 03 B9 00 00 E8 04 25 E8  // .......@......%.
    0DA0: CC 02 E8 D2 00 E8 0F 01 66 52 E8 B7 05 E8 E6 1B  // ........fR......
    0DB0: 66 5A 75 04 B3 00 EB 58 E8 F6 00 80 FD 01 77 07  // fZu....X......w.
    0DC0: E8 FA 00 0A ED 74 47 E8 28 03 E8 3C 11 80 FB 00  // .....tG.(..<....
    0DD0: 75 1D E8 B1 05 A8 01 74 07 B1 0D E8 53 19 EB 30  // u......t....S..0
    0DE0: B5 01 E8 A8 05 E8 39 0F B5 00 E8 A0 05 EB 21 E8  // ......9.......!.
    0DF0: BF 00 80 FD 01 76 07 D0 ED E8 BB 00 EB BA E8 76  // .....v.........v
    0E00: 00 E8 B3 00 E8 B6 00 FE CD E8 B7 00 EB AA B3 08  // ................
    0E10: C3 8D 9C 29 01 E8 E7 24 66 33 D2 8A D0 66 B8 8C  // ...)...$f3...f..
    0E20: 0A 00 00 66 F7 E2 E8 3B 05 E8 6A 1B 75 3D 66 50  // ...f...;..j.u=fP
    0E30: 8D 9C 28 01 E8 C8 24 3C 14 66 58 72 2E 66 50 8D  // ..(...$<.fXr.fP.
    0E40: 9C D0 03 E8 B9 24 0B C0 66 58 74 1F B9 07 00 8D  // .....$..fXt.....
    0E50: 9C D0 03 8B C1 D1 E0 03 D8 E8 A3 24 0B C0 75 02  // ...........$..u.
    0E60: E2 ED 66 25 FF FF 00 00 66 D1 E0 66 0B C0 75 03  // ..f%....f..f..u.
    0E70: B8 48 3F 66 8B D0 C3 8D 9C 2A 01 E8 81 24 24 0F  // .H?f.....*...$$.
    0E80: 8A E8 0A ED 75 02 B5 01 C3 B5 00 8D 9C 31 01 E8  // ....u........1..
    0E90: 6D 24 A8 01 74 02 B5 01 C3 53 51 E8 1F 00 32 E4  // m$..t....SQ...2.
    0EA0: 8A C5 C1 E0 02 59 8D 9C 54 02 03 D8 E8 50 24 5B  // .....Y..T....P$[
    0EB0: C3 B1 02 E8 1D 00 C3 B1 02 E8 0D 00 C3 B1 01 E8  // ................
    0EC0: 11 00 C3 B1 01 E8 01 00 C3 53 8D 9C B8 02 E8 D2  // .........S......
    0ED0: 23 5B C3 53 8D 9C B8 02 E8 E0 23 5B C3 33 C9 E8  // #[.S......#[.3..
    0EE0: 74 20 75 3C 66 BA 37 F1 FF FF 66 33 C0 E8 EA 04  // t u<f.7...f3....
    0EF0: 33 C0 E8 51 03 74 1C A9 C8 0E 74 F6 E8 3C F7 F6  // 3..Q.t....t..<..
    0F00: C3 04 75 05 F6 C3 18 74 E9 E8 30 00 50 E8 2C F8  // ..u....t..0.P.,.
    0F10: 58 EB DF E8 1C 00 75 08 E8 31 00 8B C1 E8 1C F8  // X.....u..1......
    0F20: C3 8D 5D 28 66 C1 E3 10 8D 5C 28 B9 49 00 E8 70  // ..](f....\(.I..p
    0F30: 1F C3 66 50 E8 BC 04 8B C8 66 58 C3 66 52 66 BA  // ..fP.....fX.fRf.
    0F40: FF FF FF FF 33 D0 E8 91 04 66 5A C3 50 53 52 E8  // ....3....fZ.PSR.
    0F50: E0 FF 75 13 B9 08 00 E8 31 1C 23 C8 75 19 33 C0  // ..u.....1.#.u.3.
    0F60: E8 E3 02 8B C8 EB 10 83 F9 02 74 0B E8 2C 08 80  // ..........t..,..
    0F70: FB 01 75 03 83 E1 FD 5A 5B 58 C3 56 66 33 C0 66  // ..u....Z[X.Vf3.f
    0F80: BA 00 F0 FF FF E8 4F 07 66 C1 E6 10 E8 C4 02 0B  // ......O.f.......
    0F90: C0 74 03 E8 1C 00 E8 2F 07 5E C3 66 52 66 8B D0  // .t...../.^.fRf..
    0FA0: E8 DC 15 8D 9C 1C 03 E8 55 23 8A C2 E8 B0 22 66  // ........U#...."f
    0FB0: 5A C3 50 51 E8 71 02 50 32 C0 E8 FD 03 E8 CC 01  // Z.PQ.q.P2.......
    0FC0: E8 98 00 8D 9C 40 03 E8 35 23 38 E8 74 0A 8A C5  // .....@..5#8.t...
    0FD0: E8 8C 22 B0 02 E8 E2 03 58 E8 CA 00 E8 A8 00 E8  // ..".....X.......
    0FE0: 8C 00 8D 9C 4C 01 E8 16 23 8B C8 8B D3 8D 9C 00  // ....L...#.......
    0FF0: 03 E8 0B 23 3B C1 74 05 B0 02 E8 BD 03 E8 31 FC  // ...#;.t.......1.
    1000: 8D 9C 00 03 E8 55 15 8D 9C D8 02 E8 51 22 E8 8A  // .....U......Q"..
    1010: FF 66 C1 CE 10 8B FE 66 C1 CE 10 E8 95 00 E8 D1  // .f.....f........
    1020: 00 E8 24 03 8A E9 8D 9C DC 02 32 C9 E8 74 22 E8  // ..$.......2..t".
    1030: 0D 03 66 25 FF 0F 00 00 59 58 66 BA FF FF FF FF  // ..f%....YXf.....
    1040: 33 D0 E8 92 06 33 D2 C3 53 66 50 8D 9C D4 02 E8  // 3....3..SfP.....
    1050: AD 22 8A C4 E8 08 22 66 58 5B C3 53 66 50 8D 9C  // ."...."fX[.SfP..
    1060: D4 02 E8 9A 22 8A E0 E8 F5 21 66 58 5B C3 E8 73  // ...."....!fX[..s
    1070: 02 E8 2E 02 8A DD E8 9D 16 8A E9 8D 9C 3C 03 32  // .............<.2
    1080: C9 E8 1F 22 0B DB C3 83 EC 08 8B EC E8 55 02 E8  // ...".........U..
    1090: 10 02 E8 23 16 8D 9C 4C 03 E8 63 22 8A 46 00 E8  // ...#...L..c".F..
    10A0: BD 21 83 C4 08 C3 8D 9C D4 02 E8 52 22 32 C0 E8  // .!.........R"2..
    10B0: AD 21 C3 E8 0A 00 8D 9C D0 02 32 C9 E8 E4 21 C3  // .!........2...!.
    10C0: B5 00 8D 1D E8 38 22 66 8B D0 8D 9C 02 03 E8 2E  // .....8"f........
    10D0: 22 0B C0 74 1C 51 8B C8 8D 9C 06 03 E8 20 22 66  // "..t.Q....... "f
    10E0: C1 E0 10 8B C1 59 66 3B C2 75 04 B5 00 EB 02 B5  // .....Yf;.u......
    10F0: 02 C3 E8 2B 02 8D 9C 40 03 B1 03 E8 A5 21 E8 CB  // ...+...@.....!..
    1100: F7 8D 9C 40 03 B1 02 E8 99 21 E8 95 01 80 FD 00  // ...@.....!......
    1110: 75 14 E8 9C FD E8 8B 02 E8 7E FD 66 8B D0 E8 77  // u........~.f...w
    1120: 02 E8 8B 02 EB 21 E8 4A 02 E8 6C 02 E8 73 01 80  // .....!.J..l..s..
    1130: FD 02 B5 04 75 0B 81 FA 74 40 76 05 B5 08 66 D1  // ....u...t@v...f.
    1140: EA E8 6B 02 E8 5C 02 E8 2B 00 C3 66 52 52 32 ED  // ..k..\..+..fRR2.
    1150: 83 C1 02 B8 06 00 F7 E1 66 33 C9 8B C8 5A 51 66  // ........f3...ZQf
    1160: 8B C2 8A CF 66 F7 E1 66 C1 E0 03 59 66 F7 F1 66  // ....f..f...Yf..f
    1170: 8B C8 66 5A C3 B5 00 E8 EA 01 E8 15 18 75 03 E8  // ..fZ.........u..
    1180: 07 FD 8D 9C 48 03 32 C9 E8 18 21 C3 53 E8 5F 01  // ....H.2...!.S._.
    1190: 66 C1 E2 10 E8 4D 01 8D 9C B8 02 E8 61 21 8A E8  // f....M......a!..
    11A0: 8D 9C B4 02 E8 58 21 8A C8 E8 C4 14 8A EB 5B C3  // .....X!.......[.
    11B0: 57 53 53 E8 D6 FF E8 2B 01 5B E8 29 15 74 66 80  // WSS....+.[.).tf.
    11C0: FD 00 75 29 53 E8 D1 FC 66 8B D0 E8 FE F6 8A CD  // ..u)S...f.......
    11D0: 51 E8 DD FC 8A FD 59 E8 71 FF 5B E8 21 21 66 25  // Q.....Y.q.[.!!f%
    11E0: FF FF 00 00 66 3B C8 73 39 32 DB EB 38 80 FD 02  // ....f;.s92..8...
    11F0: 75 16 E8 6F 01 E8 AB 17 74 28 8D 1F E8 00 21 3D  // u..o....t(....!=
    1200: 74 40 76 1E 32 DB EB 1D 80 FD 03 75 15 53 E8 D3  // t@v.2......u.S..
    1210: 00 B3 03 E8 39 14 5B E8 E5 20 3B C2 76 04 32 DB  // ....9.[.. ;.v.2.
    1220: EB 03 80 CB 01 5B 5F C3 53 8B F0 E8 5D 19 23 F0  // .....[_.S...].#.
    1230: 74 09 8B C6 E8 FC 17 8B F3 0B DB 5B C3 51 E8 0B  // t..........[.Q..
    1240: FD E8 0F 00 59 C3 51 50 E8 40 19 8B C8 58 E8 02  // ....Y.QP.@...X..
    1250: 00 59 C3 57 53 E8 0A 1B 0B C0 74 09 8B 1D 83 C7  // .Y.WS.....t.....
    1260: 02 3B C3 75 F7 8B 1D 83 FB FF 74 0B 83 C7 02 85  // .;.u......t.....
    1270: D9 74 F2 8B C3 EB 02 33 C0 0B C0 5B 5F C3 33 C0  // .t.....3...[_.3.
    1280: E8 C3 FF 74 13 E8 A0 FF 8B DE B9 FB 00 E8 FC 1B  // ...t............
    1290: 83 C6 08 E8 A5 18 EB E8 BB F0 16 B8 5A A5 E8 D6  // ............Z...
    12A0: 1F C3 53 66 50 8D 9C 40 03 E8 53 20 8A E8 66 58  // ..SfP..@..S ..fX
    12B0: 5B C3 8D 9C 69 03 E8 46 20 C3 8D 9C 64 03 E8 3E  // [...i..F ...d..>
    12C0: 20 0B C0 C3 53 66 50 8D 9C D4 02 E8 31 20 8A C8  //  ...SfP.....1 ..
    12D0: 66 58 5B C3 53 66 50 8D 9C D5 02 E8 21 20 8A C8  // fX[.SfP.....! ..
    12E0: 66 58 5B C3 53 8D 5C 14 E8 14 20 8B D0 5B C3 53  // fX[.S.\... ..[.S
    12F0: 66 50 8D 5C 16 E8 07 20 8B D0 66 58 5B C3 53 66  // fP.\... ..fX[.Sf
    1300: 50 8D 9C 50 03 E8 F7 1F 66 8B D0 66 58 5B C3 53  // P..P....f..fX[.S
    1310: 66 50 8D 9C 54 03 E8 E6 1F 66 8B D0 66 58 5B C3  // fP..T....f..fX[.
    1320: 53 66 50 8D 5C 10 E8 D6 1F 8B C8 66 58 5B C3 66  // SfP.\......fX[.f
    1330: 50 53 8D 9C 41 03 E8 C6 1F 5B 8A D8 66 58 C3 53  // PS..A....[..fX.S
    1340: 8D 5C 08 E8 B9 1F 5B C3 53 50 8D 9C 4C 03 E8 AE  // .\....[.SP..L...
    1350: 1F 8A C8 58 5B C3 53 50 8D 9C 4D 03 E8 A0 1F 8A  // ...X[.SP..M.....
    1360: C8 58 5B C3 53 66 50 8D 5C 0C E8 92 1F 8B D0 66  // .X[.SfP.\......f
    1370: 58 5B C3 53 66 50 8D 9C 00 03 E8 82 1F 66 33 D2  // X[.SfP.......f3.
    1380: 8B D0 66 58 5B C3 8D 5C 04 E8 73 1F C3 51 8D 5C  // ..fX[..\..s..Q.\
    1390: 04 32 C9 E8 0D 1F 59 C3 8D 9C 50 03 66 8B C2 E8  // .2....Y...P.f...
    13A0: BD 1E C3 53 8D 9C 40 03 B1 01 E8 F6 1E 5B C3 8D  // ...S..@......[..
    13B0: 9C 54 03 66 8B C2 E8 A6 1E C3 53 51 8A E8 E8 C5  // .T.f......SQ....
    13C0: FF 24 FD 0A E8 E8 C5 FF 59 5B C3 66 50 8D 9C D8  // .$......Y[.fP...
    13D0: 02 E8 2B 1F 66 8B D0 66 58 C3 53 66 50 51 66 8B  // ..+.f..fX.SfPQf.
    13E0: C8 BB 00 00 E8 2D 16 23 C2 0B C1 E8 2F 16 59 66  // .....-.#..../.Yf
    13F0: 58 5B C3 BB 00 00 E8 1B 16 66 25 CA 0E 00 00 C3  // X[.......f%.....
    1400: E8 47 1A E8 D6 19 E8 B4 19 75 06 E8 8F 17 E8 B8  // .G.......u......
    1410: 19 C3 B0 01 C3 55 B3 01 E8 D7 1C 5D C3 66 53 66  // .....U.....].fSf
    1420: BB 04 00 00 00 E8 05 00 33 C0 66 5B C3 55 66 C1  // ........3.f[.Uf.
    1430: E3 10 BB 00 00 E8 BA 1C 5D C3 E8 06 1B BB 0A 00  // ........].......
    1440: E8 DA 15 C3 BB 0A 00 E8 CA 15 66 8B C8 E8 F3 1A  // ..........f.....
    1450: BB 0A 00 66 2B C1 E8 C4 15 C3 E8 29 00 0B C9 74  // ...f+......)...t
    1460: 22 E8 17 FB E8 31 07 66 51 66 8B C8 BB 07 00 E8  // "....1.fQf......
    1470: A2 15 66 25 00 FE 00 00 66 0B C1 E8 9F 15 66 59  // ..f%....f.....fY
    1480: 0C 01 C3 32 C0 C3 E8 6B 02 0B C9 75 06 E8 BC FA  // ...2...k...u....
    1490: E8 71 02 51 E8 B5 FA 66 C1 E6 10 33 C0 E8 9D FD  // .q.Q...f...3....
    14A0: 74 09 E8 16 03 75 F6 33 C8 EB F2 58 23 C8 66 C1  // t....u.3...X#.f.
    14B0: EE 10 C3 A8 10 75 63 E8 F0 06 66 C1 E6 10 33 C0  // .....uc...f...3.
    14C0: E8 83 FD 74 35 E8 60 FD 50 51 8B C8 E8 F9 01 85  // ...t5.`.PQ......
    14D0: C1 59 58 74 0D 50 E8 AD FE 24 03 3C 03 58 75 E0  // .YXt.P...$.<.Xu.
    14E0: EB 0C 50 E8 A0 FE A8 01 58 74 D5 E8 6D FB 50 E8  // ..P.....Xt..m.P.
    14F0: DA 07 58 B5 00 E8 95 FE EB C6 E8 CB 01 E8 28 FD  // ..X...........(.
    1500: E8 34 01 B1 00 E8 4E 07 66 C1 EE 10 E8 94 06 A8  // .4....N.f.......
    1510: 20 75 42 A8 40 75 03 E8 1C 0E E8 7B 06 0A C0 75  //  uB.@u.....{...u
    1520: 07 32 C9 B5 01 E8 BF 0E E8 9D 01 E8 FA FC E8 33  // .2.............3
    1530: FE E8 62 14 75 14 E8 62 02 0A DB 74 0D E8 1B FB  // ..b.u..b...t....
    1540: E8 89 07 B5 00 E8 45 FE EB 08 E8 66 07 B5 01 E8  // ......E....f....
    1550: 3B FE E8 E6 00 C3 E8 32 16 C3 E8 21 FD E8 AC 06  // ;......2...!....
    1560: 33 C9 E8 9F 01 66 33 D2 66 33 C0 E8 6C FE E8 52  // 3....f3.f3..l..R
    1570: 00 B1 FF E8 84 00 33 C0 E8 CB FC 74 0A E8 A8 FC  // ......3....t....
    1580: 50 E8 D2 07 58 EB F1 32 C9 E8 C4 01 E8 FC 15 0B  // P...X..2........
    1590: C0 C3 E8 E9 FC E8 74 06 66 33 C0 66 BA 00 F0 FF  // ......t.f3.f....
    15A0: FF E8 33 01 51 B1 01 E8 8C 01 59 33 C0 E8 96 FC  // ..3.Q.....Y3....
    15B0: 74 0A E8 73 FC 50 E8 68 07 58 EB F1 E8 B4 0D E8  // t..s.P.h.X......
    15C0: 6D 18 C3 B8 02 00 E8 5F FC 74 2E B1 07 E8 02 12  // m......_.t......
    15D0: B8 02 00 E8 65 F0 F6 C3 04 75 12 E8 E8 1A 83 3D  // ....e....u.....=
    15E0: 00 75 0A E8 A5 15 83 E0 FD E8 A8 15 C3 66 B8 02  // .u...........f..
    15F0: 00 00 00 E8 E4 FD E8 47 F2 C3 E8 29 14 74 23 38  // .......G...).t#8
    1600: E1 76 04 8A CC EB 06 38 C1 73 02 8A C8 BB 02 00  // .v.....8.s......
    1610: E8 01 14 8A E1 E8 05 14 B1 04 E8 B5 11 0C 01 C3  // ................
    1620: 0C 01 C3 51 E8 FF 13 74 0C 8A CC BB 02 00 E8 E3  // ...Q...t........
    1630: 13 8A C4 8A E1 59 C3 E8 FE 05 C3 E8 09 06 C3 E8  // .....Y..........
    1640: 14 19 75 18 E8 81 00 E8 DE FB 80 F9 01 75 0E 51  // ..u..........u.Q
    1650: E8 60 06 B5 01 E8 35 FD 59 E8 DF FF C3 E8 D7 FF  // .`....5.Y.......
    1660: 51 E8 BD 06 B5 00 E8 24 FD 59 C3 B8 02 00 E8 B7  // Q......$.Y......
    1670: FB 74 03 E8 5C 11 C3 E8 BD 04 3B C1 7C 3A 8B C1  // .t..\.....;.|:..
    1680: E8 FD 04 E8 C7 0E 8B C8 51 E8 2D 05 E8 F1 04 59  // ........Q.-....Y
    1690: E8 BA 0E 3B C8 72 02 8B C1 8D 5C 04 E8 D8 1B 32  // ...;.r....\....2
    16A0: C9 B5 0F E8 05 0D E8 DA 17 FE C1 38 C1 72 F2 8D  // ...........8.r..
    16B0: 5C 04 E8 4A 1C 0B C0 C3 33 C0 C3 BB 00 18 33 C0  // \..J....3.....3.
    16C0: 8A C2 C1 E0 02 03 D8 C3 53 BB 03 00 E8 45 13 66  // ........S....E.f
    16D0: 25 FF 0F 00 00 5B C3 53 66 50 66 51 66 8B C8 BB  // %....[.SfPfQf...
    16E0: 03 00 E8 2F 13 66 23 C2 66 0B C1 E8 2F 13 66 59  // .../.f#.f.../.fY
    16F0: 66 58 5B C3 66 50 BB 05 00 E8 18 13 25 FF 0F 8B  // fX[.fP......%...
    1700: C8 66 58 C3 E8 84 14 23 C8 66 50 BB 05 00 E8 03  // .fX....#.fP.....
    1710: 13 25 00 F0 0B C1 E8 04 13 66 58 C3 66 50 53 BB  // .%.......fX.fPS.
    1720: 06 00 E8 EF 12 A8 10 75 09 BB F0 16 E8 D0 1B 3D  // .......u.......=
    1730: 5A A5 5B 66 58 C3 66 50 53 BB 06 00 E8 D5 12 80  // Z.[fX.fPS.......
    1740: F1 01 C0 E1 04 24 EF 0A C1 E8 D1 12 5B 66 58 C3  // .....$......[fX.
    1750: 53 66 50 BB F8 16 E8 A6 1B 8A C1 E8 01 1B 66 58  // SfP...........fX
    1760: 5B C3 53 BB F8 16 E8 96 1B 83 E0 01 5B C3 53 66  // [.S.........[.Sf
    1770: 50 BB 07 00 E8 9D 12 F6 C4 01 66 58 B0 06 74 02  // P.........fX..t.
    1780: B0 08 5B C3 53 BB 07 00 E8 89 12 80 E4 FE 80 FD  // ..[.S...........
    1790: 06 74 03 80 CC 01 E8 84 12 5B C3 66 50 BB 06 00  // .t.......[.fP...
    17A0: E8 71 12 24 40 C0 E8 06 8A D8 66 58 C3 B3 81 E8  // .q.$@.....fX....
    17B0: 35 19 75 04 83 C8 01 C3 33 C0 C3 50 66 51 E8 67  // 5.u.....3..PfQ.g
    17C0: FA 83 EC 04 8B EC 66 33 C0 66 89 46 00 33 D2 8D  // ......f3.f.F.3..
    17D0: BC 68 01 8D 1D E8 27 1B 0B C0 74 22 8B DF B0 00  // .h....'...t"....
    17E0: E8 12 01 74 14 8B DF E8 71 F4 66 8B 46 00 66 3B  // ...t....q.f.F.f;
    17F0: C8 72 06 8B D7 66 89 4E 00 83 C7 1C EB D5 0B D2  // .r...f.N........
    1800: 74 0A 8D 9C 4C 01 E8 28 F4 E9 88 00 66 33 C0 66  // t...L..(....f3.f
    1810: 89 46 00 8D BC F4 01 33 D2 8D 1D E8 E1 1A 0B C0  // .F.....3........
    1820: 74 58 66 50 E8 93 F0 3C 01 66 58 74 05 3D 40 06  // tXfP...<.fXt.=@.
    1830: 73 43 66 52 66 8B D0 8D 5D 04 E8 C2 1A E8 5D 00  // sCfRf...].....].
    1840: 8B CA 66 5A 74 2F 56 8D 9C 4C 01 8B F1 E8 00 F4  // ..fZt/V..L......
    1850: 5E B0 00 E8 9F 00 74 1D 8D 1D E8 A2 1A 8B D9 8B  // ^.....t.........
    1860: 47 06 66 C1 E0 10 8B 47 02 66 3B 46 00 72 06 8B  // G.f....G.f;F.r..
    1870: D1 66 89 46 00 83 C7 08 EB 9F 0B D2 74 16 56 8D  // .f.F........t.V.
    1880: 9C 4C 01 8B F2 E8 C8 F3 5E 53 8D 9C 62 01 33 C0  // .L......^S..b.3.
    1890: E8 E4 19 5B 83 C4 04 0B D2 66 59 58 C3 57 53 51  // ...[.....fYX.WSQ
    18A0: E8 E6 14 3B 55 02 75 18 66 C1 CA 10 8B DA 66 C1  // ...;U.u.f.....f.
    18B0: CA 10 3B 5D 06 75 09 0A C0 74 0E 3A 45 1B 74 09  // ..;].u...t.:E.t.
    18C0: 83 C7 1C E2 DE 33 D2 EB 02 8B D7 0B D2 59 5B 5F  // .....3.......Y[_
    18D0: C3 51 66 52 E8 B2 14 3A 65 1A 75 09 0A C0 74 0E  // .QfR...:e.u...t.
    18E0: 3A 45 1B 74 09 83 C7 1C E2 ED 33 FF EB 00 0B FF  // :E.t......3.....
    18F0: 66 5A 59 C3 C3 66 51 66 52 53 53 66 C1 CE 10 8B  // fZY..fQfRSSf....
    1900: DE 66 C1 CE 10 E8 F7 19 5B 66 8B D0 E8 4C F3 3B  // .f......[f...L.;
    1910: CA 72 0A 66 3B CA 72 05 E8 95 F8 75 02 32 C0 5B  // .r.f;.r....u.2.[
    1920: 66 5A 66 59 C3 56 57 E8 A7 FF 8B F7 E8 21 F3 5F  // fZfY.VW......!._
    1930: 5E C3 66 50 53 66 51 52 57 56 51 8B DE B9 08 00  // ^.fPSfQRWVQ.....
    1940: E8 49 15 59 8D 5C 08 8B C1 66 C1 E0 10 8A C2 E8  // .I.Y.\...f......
    1950: 0D 19 F6 C2 03 75 24 8B C1 24 7F BF 15 1A 80 3D  // .....u$..$.....=
    1960: FF 0F 84 0F 01 3A 05 75 0D 66 8B 45 01 66 B9 00  // .....:.u.f.E.f..
    1970: 05 02 00 E9 96 00 83 C7 05 EB E3 F6 C2 01 74 25  // ..............t%
    1980: 8B C1 E8 70 01 0F 84 EB 00 33 C9 8A CC 8A D0 0A  // ...p.....3......
    1990: C0 75 12 8D 5C 08 66 25 FF FF 00 00 66 C1 E0 08  // .u..\.f%....f...
    19A0: E8 BC 18 EB B2 8A E1 8A CA 80 E1 0C C0 E9 02 80  // ................
    19B0: E2 F0 C0 EA 04 8A EA 80 FC 70 72 2A 80 FC 75 73  // .........pr*..us
    19C0: 25 80 EC 70 8A C4 32 E4 50 E8 30 02 8B D8 58 38  // %..p..2.P.0...X8
    19D0: D8 72 05 33 C0 E9 9C 00 E8 28 02 E8 21 19 0B C0  // .r.3.....(..!...
    19E0: 0F 84 90 00 EB 1B 32 C0 E8 E6 FE 0F 84 85 00 8D  // ......2.........
    19F0: 5C 16 8B 05 E8 80 18 8B 45 06 66 C1 E0 10 8B 45  // \.......E.f....E
    1A00: 02 50 E8 48 0B 66 C1 E1 10 8B C8 58 8D 1C E8 4E  // .P.H.f.....X...N
    1A10: 18 66 50 8D 5C 04 66 8B C1 E8 43 18 66 58 66 C1  // .fP.\.f...C.fXf.
    1A20: E8 10 66 81 E1 FF FF 00 00 66 F7 E1 66 50 8D 5C  // ..f......f..fP.\
    1A30: 06 E8 CB 18 8B C8 66 58 66 D3 E0 66 C1 E8 10 40  // ......fXf..f...@
    1A40: 8D 5C 14 E8 31 18 BF 75 1A 83 F9 01 74 11 BF 7D  // .\..1..u....t..}
    1A50: 1A 81 F9 01 01 74 08 BF 85 1A 83 F9 02 75 15 8D  // .....t.......u..
    1A60: 5C 0C 66 8B 05 E8 F7 17 8D 5C 10 66 8B 45 04 E8  // \.f......\.f.E..
    1A70: ED 17 0B DB 5E 5F 5A 66 59 5B 66 58 C3 00 40 01  // ....^_ZfY[fX..@.
    1A80: 90 01 01 40 01 90 01 02 80 02 90 01 03 80 02 90  // ...@............
    1A90: 01 04 40 01 90 01 05 40 01 90 01 06 80 02 90 01  // ..@....@........
    1AA0: 07 D0 02 5E 01 0D 40 01 90 01 0E 80 02 90 01 0F  // ...^..@.........
    1AB0: 80 02 5E 01 10 80 02 5E 01 11 80 02 E0 01 12 80  // ..^....^........
    1AC0: 02 E0 01 13 80 02 90 01 23 20 04 90 01 32 20 04  // ........# ...2 .
    1AD0: B0 02 33 20 04 C0 02 62 80 02 E0 01 FF 05 0A 05  // ..3 ...b........
    1AE0: 05 05 00 00 00 05 0B 06 05 05 00 00 00 08 10 08  // ................
    1AF0: 08 08 00 00 00 56 E8 64 15 80 E4 01 3B 04 74 09  // .....V.d....;.t.
    1B00: 83 C6 04 E2 F7 33 C0 EB 05 8B 44 02 0B C0 5E C3  // .....3....D...^.
    1B10: 57 53 50 E8 47 15 83 E9 0A E8 E0 00 83 F8 05 76  // WSP.G..........v
    1B20: 03 B8 05 00 D1 E0 03 C8 FB A5 83 C6 02 E2 FA B8  // ................
    1B30: FF FF AB 58 5B 5F C3 66 53 51 66 52 E8 41 00 E8  // ...X[_.fSQfR.A..
    1B40: 77 00 66 C1 E8 10 66 0F B7 D8 66 B8 00 00 00 03  // w.f...f...f.....
    1B50: 66 D3 E8 66 33 D2 66 F7 F3 E8 F1 09 66 5A 59 66  // f..f3.f.....fZYf
    1B60: 5B C3 53 66 50 BB 07 00 E8 A9 0E 0A C0 66 58 5B  // [.SfP........fX[
    1B70: C3 53 66 50 BB 07 00 E8 9A 0E A8 01 66 58 5B C3  // .SfP........fX[.
    1B80: 53 66 50 8D 5C 06 E8 76 17 8A C8 66 58 5B C3 51  // SfP.\..v...fX[.Q
    1B90: B9 08 00 E8 0B 13 59 C3 53 8D 5C 08 E8 60 17 24  // ......Y.S.\..`.$
    1BA0: 03 5B C3 8D 5C 09 E8 56 17 C3 51 53 B1 01 8A E8  // .[..\..V..QS....
    1BB0: 8D 5C 08 E8 ED 16 5B 59 C3 53 8D 1C E8 40 17 5B  // .\....[Y.S...@.[
    1BC0: C3 53 8D 5C 04 E8 37 17 5B C3 53 8D 5C 16 E8 2E  // .S.\..7.[.S.\...
    1BD0: 17 5B C3 53 66 52 33 C0 E8 C2 FC 66 5A 75 1B E8  // .[.SfR3....fZu..
    1BE0: 34 00 74 16 E8 15 00 40 83 F8 05 73 0D E8 6F 16  // 4.t....@...s..o.
    1BF0: 48 E8 0F 00 66 8B C2 E8 65 16 5B C3 BB 00 1E E8  // H...f...e.[.....
    1C00: FD 16 C3 BB 08 1E C1 E0 03 03 D8 C3 BB 00 1E B9  // ................
    1C10: 32 00 E8 77 12 C3 51 E8 E2 FF 0B C0 74 12 8B C8  // 2..w..Q.....t...
    1C20: BB 08 1E E8 D9 16 66 3B C2 74 07 83 C3 08 E2 F3  // ......f;.t......
    1C30: 0B DB 59 C3 C3 00 C3 00 BB 20 DF E8 81 36 E8 83  // ..Y...... ...6..
    1C40: F6 B5 01 E8 E5 07 C3 BB 00 DF E8 72 36 E8 74 F6  // ...........r6.t.
    1C50: B5 00 E8 D6 07 C3 80 F9 00 75 0A E8 2B 12 8A C8  // .........u..+...
    1C60: B5 02 E8 1D 09 0B F6 74 2E E8 58 F6 B5 01 51 E8  // .......t..X...Q.
    1C70: C0 07 59 E8 C3 07 56 33 F6 B5 00 E8 2D 07 5E B5  // ..Y...V3....-.^.
    1C80: 01 E8 C4 F6 E8 FB 08 E8 C4 09 E8 37 F6 8D 9C 00  // ...........7....
    1C90: 03 E8 AC 07 E8 F5 07 66 C1 CE 10 B5 01 E8 0B 07  // .......f........
    1CA0: E8 00 FF A8 40 75 07 32 C0 B5 01 E8 7E 08 66 C1  // ....@u.2....~.f.
    1CB0: CE 10 C3 E8 0E F6 B5 01 E8 4B 07 B5 00 E8 79 07  // .........K....y.
    1CC0: E8 DC 07 B1 0F E8 69 0A E8 26 00 C3 E8 52 00 E8  // ......i..&...R..
    1CD0: 02 F6 B5 00 E8 2F 07 B5 00 E8 5D 07 E8 77 F6 E8  // ...../....]..w..
    1CE0: A7 11 38 C1 74 0A 80 F9 0B 74 05 B5 03 E8 92 08  // ..8.t....t......
    1CF0: C3 B1 10 E8 3B 0A E8 A9 F5 80 FD 00 74 06 B1 01  // ....;.......t...
    1D00: E8 CF 0A C3 E8 A6 05 80 FD 01 75 07 B5 02 E8 D5  // ..........u.....
    1D10: 05 EB 03 E8 F3 01 B1 0D E8 16 0A B1 03 E8 54 00  // ..............T.
    1D20: C3 E8 CB F5 0B D2 74 05 B1 00 E8 42 0A B1 02 E8  // ......t....B....
    1D30: 42 00 E8 51 F6 A8 01 74 12 E8 66 F5 80 FD 00 75  // B..Q...t..f....u
    1D40: 0A B1 0C E8 EB 09 B0 02 E8 91 04 B1 00 E8 82 0A  // ................
    1D50: B1 0D E8 1F 00 C3 B1 07 E8 77 0A E8 91 F5 0B D2  // .........w......
    1D60: 75 0C E8 FF F5 E8 2A 0C 75 09 E8 1D 0B C3 B1 07  // u.....*.u.......
    1D70: E8 FC 09 C3 E8 ED F5 E8 18 0C 75 24 51 E8 52 0A  // ..........u$Q.R.
    1D80: 59 80 F9 0C 75 1A 33 D2 56 83 C6 08 E8 41 0C 5E  // Y...u.3.V....A.^
    1D90: 0A C0 75 0C B9 0A 00 E8 43 11 42 83 FA 1E 75 E8  // ..u.....C.B...u.
    1DA0: C3 80 FB 01 0F 84 C5 00 E8 A5 05 66 C1 E1 10 8D  // ...........f....
    1DB0: 9C 35 01 E8 49 15 A8 01 74 05 51 E8 2B 04 59 E8  // .5..I...t.Q.+.Y.
    1DC0: 5E F5 B0 04 E8 9C 05 66 BA 50 01 40 50 E8 76 05  // ^......f.P.@P.v.
    1DD0: E8 F7 0A 75 7E 66 BA 50 01 50 4F 8D 9C 2D 01 E8  // ...u~f.P.PO..-..
    1DE0: 1D 15 24 06 3C 02 75 02 B6 02 B0 05 E8 74 05 E8  // ..$.<.u......t..
    1DF0: 54 05 8D 5C 28 03 D8 E8 D0 0A 75 57 0A FF 75 09  // T..\(.....uW..u.
    1E00: B0 0A E8 5E 05 32 DB EB 4A 51 33 C9 8A CF E8 35  // ...^.2..JQ3....5
    1E10: 05 03 C8 E8 3A 05 59 B0 07 E8 47 05 66 BA 50 01  // ....:.Y...G.f.P.
    1E20: 10 30 33 DB E8 A3 0A 74 0F 51 8A EB 8D 9C 44 01  // .03....t.Q....D.
    1E30: B1 02 E8 6E 14 59 EB 61 E8 0B 05 66 C1 C9 10 2B  // ...n.Y.a...f...+
    1E40: C1 66 C1 C1 10 3D 80 00 0F 82 76 FF B0 08 E8 12  // .f...=....v.....
    1E50: 05 EB 43 51 8A EB 8D 9C 44 01 B1 02 E8 44 14 59  // ..CQ....D....D.Y
    1E60: 66 BA 50 01 10 30 33 DB E8 5F 0A EB 2C 8D 5C 28  // f.P..03.._..,.\(
    1E70: 03 D9 53 8A E9 B1 32 51 5F E8 A4 F4 8A E9 B1 A0  // ..S...2Q_.......
    1E80: BA 00 80 E8 19 0A 80 FF 01 5B 74 0A B1 A2 E8 0E  // .........[t.....
    1E90: 0A 80 FF 01 75 03 B0 00 C3 B0 01 C3 51 B1 0C E8  // ....u.......Q...
    1EA0: D2 FE 59 B0 01 E8 BB 04 56 83 C6 08 E8 21 0B 5E  // ..Y.....V....!.^
    1EB0: 0A C0 75 04 B3 10 EB 3F B0 02 E8 A6 04 E8 38 00  // ..u....?......8.
    1EC0: 74 11 B0 03 E8 9C 04 B0 01 E8 10 03 75 29 E8 27  // t...........u).'
    1ED0: 00 75 24 66 BA 0C 00 90 43 8D 9C 30 01 E8 EA 09  // .u$f....C..0....
    1EE0: 66 BA 20 00 90 41 8D 9C 34 01 E8 DD 09 E8 BD 03  // f. ..A..4.......
    1EF0: B0 09 E8 6E 04 33 DB C3 E8 25 F4 66 BA 00 00 90  // ...n.3...%.f....
    1F00: 47 8D 9C 28 01 E8 C2 09 C3 B1 0C E8 66 FE B1 00  // G..(........f...
    1F10: E8 BF 08 B1 01 E8 BA 08 8D 9C AC 03 66 B8 00 00  // ............f...
    1F20: 00 00 E8 3A 13 B0 01 E8 B2 02 74 0A B5 04 E8 CB  // ...:......t.....
    1F30: 03 B3 08 E9 3F 01 B1 08 E8 F6 07 E8 D2 02 B1 09  // ....?...........
    1F40: E8 EE 07 E8 C5 01 8D 9C B8 03 66 33 C0 E8 0F 13  // ..........f3....
    1F50: E8 60 01 B9 90 01 E8 79 0F B0 01 E8 63 02 B5 02  // .`.....y....c...
    1F60: E8 8D 03 E8 74 01 E8 9F 03 E8 E0 01 B5 03 E8 7F  // ....t...........
    1F70: 03 33 C9 E8 00 01 F6 C5 01 75 34 B5 02 E8 70 03  // .3.......u4...p.
    1F80: E8 20 01 F6 C5 04 74 08 B5 01 E8 6F 03 E9 CC 00  // . ....t....o....
    1F90: 8A FD 80 E7 03 E8 E8 00 80 E3 03 38 FB 75 0D E8  // ...........8.u..
    1FA0: 4C 01 75 08 B5 02 E8 53 03 E9 B0 00 E8 67 01 FE  // L.u....S.....g..
    1FB0: C1 E8 7B F3 38 D9 75 BB 8D 9C AC 03 E8 40 13 3C  // ..{.8.u......@.<
    1FC0: 03 74 05 E8 ED 00 EB 9B 8D 9C B0 03 66 33 C0 E8  // .t..........f3..
    1FD0: 8D 12 8D 9C 2A 01 E8 26 13 A8 40 74 0C B1 13 E8  // ....*..&..@t....
    1FE0: 4F 07 B0 03 E8 DA 01 EB 0A B1 0A E8 43 07 B0 02  // O...........C...
    1FF0: E8 CE 01 B5 04 E8 F8 02 E8 DF 00 E8 0A 03 E8 4B  // ...............K
    2000: 01 B5 05 E8 EA 02 33 C9 E8 6B 00 80 FD 07 75 05  // ......3..k....u.
    2010: E8 86 00 75 2E 51 B5 04 E8 D5 02 59 F6 C5 01 75  // ...u.Q.....Y...u
    2020: 07 B5 03 E8 D6 02 EB 34 E8 78 00 8A D5 E8 E6 00  // .......4.x......
    2030: E8 70 00 38 EA 75 0C E8 B4 00 75 07 B5 02 E8 BB  // .p.8.u....u.....
    2040: 02 EB 19 FE C1 E8 E7 F2 38 D9 75 BC 8D 9C AC 03  // ........8.u.....
    2050: E8 AC 12 3C 04 75 05 E8 59 00 EB 9C B0 00 E8 60  // ...<.u..Y......`
    2060: 01 B1 0B E8 CB 06 8D 9C AD 03 E8 92 12 B3 00 0A  // ................
    2070: C0 74 02 B3 08 C3 8D 9C C0 03 E8 0F 00 8A E8 C3  // .t..............
    2080: 53 8D 9C C4 03 E8 04 00 5B 8A D8 C3 51 E8 6F 12  // S.......[...Q.o.
    2090: C0 E1 02 D3 E8 24 0F 59 C3 8D 9C C2 03 E8 5F 12  // .....$.Y......_.
    20A0: A8 01 C3 8D 9C B8 03 E8 11 12 C3 8D 9C B8 03 E8  // ................
    20B0: F1 11 C3 33 C9 33 D2 E8 E9 FF 38 D5 76 02 8A D5  // ...3.3....8.v...
    20C0: FE C1 E8 6A F2 38 D9 72 EE 33 C9 8A EA 8D 9C 5C  // ...j.8.r.3.....\
    20D0: 03 E8 CF 11 B1 0B E8 F9 06 C3 E8 43 F2 8D 9C B8  // ...........C....
    20E0: 03 E8 1B 12 66 BA 03 01 80 83 E8 DD 07 C3 51 53  // ....f.........QS
    20F0: 8D 9C B0 03 E8 C4 11 FE C5 E8 A7 11 80 FD 06 72  // ...............r
    2100: 07 B5 02 E8 F6 01 33 C9 5B 59 C3 66 33 C0 8D 9C  // ......3.[Y.f3...
    2110: B0 03 E8 4A 11 C3 32 ED E8 65 FF 80 E3 0C C0 EB  // ...J..2..e......
    2120: 02 B7 03 2A FB C0 E3 03 8A EB 80 FB 18 72 03 80  // ...*.........r..
    2130: CD 20 E8 4B FF 80 E3 03 38 FB 72 02 8A DF 80 FB  // . .K....8.r.....
    2140: 03 75 03 80 CD 04 0A EB E8 60 FF C3 E8 D1 F1 8D  // .u.......`......
    2150: 9C C0 03 66 BA 02 02 90 45 E8 6E 07 C3 E8 C0 F1  // ...f....E.n.....
    2160: 66 BA 00 01 90 42 8D 9C B4 03 E8 5D 07 E8 B0 F1  // f....B.....]....
    2170: 66 BA 03 01 90 45 8D 9C B8 03 E8 4D 07 E8 E4 F1  // f....E.....M....
    2180: E8 13 08 75 3B E8 98 F1 66 BA 0A 01 90 40 8D 9C  // ...u;...f....@..
    2190: BF 03 E8 35 07 8D 9C 28 01 E8 63 11 3C 14 72 20  // ...5...(..c.<.r 
    21A0: E8 7D F1 66 BA 10 00 90 4F 8D 9C D0 03 E8 1A 07  // .}.f....O.......
    21B0: E8 6D F1 66 BA 15 01 90 40 8D 9C CC 03 E8 0A 07  // .m.f....@.......
    21C0: C3 E8 5C F1 66 BA 02 01 80 50 E8 FD 06 C3 E8 3E  // ..\.f....P.....>
    21D0: F1 8B C2 66 33 D2 B9 8C 0A F7 F1 C3 E8 41 F1 66  // ...f3........A.f
    21E0: BA 00 06 80 50 E8 E2 06 C3 E8 34 F1 66 BA 11 01  // ....P.....4.f...
    21F0: 80 50 B0 04 E8 D3 06 C3 E8 25 F1 66 BA 00 06 90  // .P.......%.f....
    2200: 40 8D 9C C8 03 E8 C2 06 8D 9C C8 03 E8 F0 10 C3  // @...............
    2210: E8 BB FF 3C 06 74 0E 3C 0A 74 0A 3C 14 74 06 3C  // ...<.t.<.t.<.t.<
    2220: 1E 74 02 33 C0 E8 07 F1 8A E3 80 CC 80 50 E8 EF  // .t.3.........P..
    2230: F0 58 66 BA 00 01 80 61 E8 8F 06 33 C9 E8 7A F0  // .Xf....a...3..z.
    2240: 0B C0 74 02 B5 10 8D 9C BC 03 E8 56 10 8A C5 E8  // ..t........V....
    2250: CE F0 66 BA 07 01 80 50 E8 6F 06 E8 06 F1 E8 35  // ..f....P.o.....5
    2260: 07 75 49 8D 9C 48 03 E8 95 10 0A C0 74 0E E8 AF  // .uI..H......t...
    2270: F0 66 BA 0A 01 80 50 B0 01 E8 4E 06 8D 9C 28 01  // .f....P...N...(.
    2280: E8 7C 10 3C 14 72 25 8D 9C D0 03 E8 71 10 0B C0  // .|.<.r%.....q...
    2290: 74 1A E8 28 EC 32 C9 8D 9C CC 03 E8 05 10 8A C5  // t..(.2..........
    22A0: E8 7D F0 66 BA 15 01 80 50 E8 1E 06 C3 8D 9C B4  // .}.f....P.......
    22B0: 03 B9 0E 00 E8 D5 0B E8 A3 FE E8 8F FE E8 38 FF  // ..............8.
    22C0: 3C 01 75 1C E8 D2 FD 74 17 33 C9 E8 A8 FD 80 FD  // <.u....t.3......
    22D0: 07 75 0D FE C1 E8 57 F0 38 D9 75 EF B5 01 EB 02  // .u....W.8.u.....
    22E0: B5 00 E8 01 00 C3 8D 9C AC 03 B1 02 E8 B4 0F C3  // ................
    22F0: 51 8D 9C AC 03 32 C9 E8 A9 0F 59 C3 51 8D 9C AC  // Q....2....Y.Q...
    2300: 03 B1 01 E8 9D 0F 59 C3 8D 9C 32 01 E8 F0 0F 24  // ......Y...2....$
    2310: 07 75 15 B9 64 00 8D 9C AC 03 E8 E2 0F 3C 02 74  // .u..d........<.t
    2320: 03 B9 90 01 E8 AB 0B C3 32 E4 B1 04 33 D2 F6 E1  // ........2...3...
    2330: 8B C8 E8 A8 0B C3 51 8D 5C 14 E8 C2 0F 66 C1 E0  // ......Q.\....f..
    2340: 10 E8 A4 01 59 C3 53 8D 9C 44 01 E8 B1 0F 5B C3  // ....Y.S..D....[.
    2350: 53 66 50 8D 9C 44 01 E8 A5 0F 8B C1 E8 00 0F 66  // SfP..D.........f
    2360: 58 5B C3 53 51 8D 9C 44 01 8A E8 B1 03 E8 33 0F  // X[.SQ..D......3.
    2370: 59 5B C3 33 C9 E8 0E 0B 38 C1 73 05 B5 00 E8 8C  // Y[.3....8.s.....
    2380: 00 B5 00 E8 80 00 FE C1 E8 FB 0A 38 C1 72 E6 B1  // ...........8.r..
    2390: 14 8A E9 E8 F3 0A 38 C1 74 05 B5 03 E8 E3 01 FE  // ......8.t.......
    23A0: C1 E8 DC 0A 04 14 38 C1 76 E7 C3 83 EC 0C 8B EC  // ......8.v.......
    23B0: 0B F6 74 1E E8 02 F8 66 C1 C8 10 66 89 46 00 8D  // ..t....f...f.F..
    23C0: 5C 04 E8 3A 0F 66 89 46 04 8D 5C 08 E8 30 0F 88  // \..:.f.F..\..0..
    23D0: 46 0A 89 4E 08 8C D0 66 C1 E0 10 8B C4 BB 2B 00  // F..N...f......+.
    23E0: E8 B9 09 83 C4 0C C3 83 EC 04 8B EC B0 02 88 46  // ...............F
    23F0: 01 88 4E 00 8C D0 66 C1 E0 10 8B C4 BB 25 00 E8  // ..N...f......%..
    2400: 9A 09 83 C4 04 C3 BB 23 00 E8 08 00 C3 BB 17 00  // .......#........
    2410: E8 01 00 C3 83 EC 04 8B EC 89 4E 00 8C D0 66 C1  // ..........N...f.
    2420: E0 10 8B C4 E8 75 09 83 C4 04 C3 BB 22 00 E8 E3  // .....u......"...
    2430: FF C3 BB 27 00 E8 DC FF C3 BB 2C 00 E8 D5 FF C3  // ...'......,.....
    2440: E8 BC 0E 66 A9 00 00 FF FF 74 40 83 EC 18 8B EC  // ...f.....t@.....
    2450: 55 51 B9 04 00 83 C3 02 E8 A4 0E 66 89 46 00 83  // UQ.........f.F..
    2460: C5 04 83 C3 04 E2 F1 83 C3 04 E8 92 0E 66 C1 C8  // .............f..
    2470: 10 66 89 46 00 59 5D 88 4E 14 8C D0 66 C1 E0 10  // .f.F.Y].N...f...
    2480: 8B C4 BB 31 00 E8 14 09 83 C4 18 C3 E8 35 EE 8D  // ...1.........5..
    2490: 9C D0 02 E8 69 0E 8A E8 BB 21 00 E8 76 FF C3 8D  // ....i....!..v...
    24A0: 9C 3C 03 E8 59 0E 8A F8 E8 F7 ED 8A DD 53 8D 9C  // .<..Y........S..
    24B0: 42 03 E8 4A 0E 8A E8 5B E8 09 EE E8 A6 EE E8 D5  // B..J...[........
    24C0: 04 75 02 B3 01 83 EC 04 8B EC 88 4E 00 88 7E 01  // .u.........N..~.
    24D0: 88 5E 02 88 6E 03 8C D0 66 C1 E0 10 8B C4 BB 2A  // .^..n...f......*
    24E0: 00 E8 B8 08 83 C4 04 C3 83 EC 10 8B EC 66 3D F0  // .............f=.
    24F0: FF FF 03 76 06 66 B8 F0 FF FF 03 66 8B C8 66 33  // ...v.f.....f..f3
    2500: C0 66 89 46 04 66 89 46 00 66 89 46 08 66 B8 00  // .f.F.f.F.f.F.f..
    2510: 00 00 D0 66 0B C1 66 89 46 0C 8C D0 66 C1 E0 10  // ...f..f.F...f...
    2520: 8B C4 BB 35 00 E8 74 08 83 C4 10 C3 83 EC 08 8B  // ...5..t.........
    2530: EC 89 4E 00 66 89 56 02 89 5E 06 8C D0 66 C1 E0  // ..N.f.V..^...f..
    2540: 10 8B C4 BB 2D 00 E8 53 08 83 C4 08 C3 3D C0 7F  // ....-..S.....=..
    2550: 76 04 B8 C0 7F C3 83 C0 3F 24 C0 C3 51 E8 9F 0D  // v.......?$..Q...
    2560: 66 33 D2 B9 0A 00 F7 F1 8B C8 E8 92 0D 03 C1 66  // f3.............f
    2570: 25 FF FF 00 00 59 3D 10 27 73 03 B8 10 27 C3 32  // %....Y=.'s...'.2
    2580: D2 C3 80 FD 02 75 25 E8 41 EE 66 BB 00 08 00 00  // .....u%.A.f.....
    2590: E8 9A 00 E8 35 EE 66 BB 03 08 00 00 E8 8E 00 66  // ....5.f........f
    25A0: 33 D2 66 BB 01 08 00 00 E8 82 00 C3 80 FD 03 75  // 3.f............u
    25B0: 10 66 33 C0 8A C1 66 33 D2 66 BB FF 00 00 00 EB  // .f3...f3.f......
    25C0: 36 51 33 D2 E8 DB EC 8A D5 66 C1 E2 10 E8 14 ED  // 6Q3......f......
    25D0: 8A F2 8A D1 66 8B C2 66 0D 00 00 00 80 E8 4F ED  // ....f..f......O.
    25E0: 80 FB 04 76 06 66 0D 00 00 00 08 E8 85 ED E8 D3  // ...v.f..........
    25F0: EC 66 33 DB 8A D9 59 83 EC 10 8B EC 66 89 46 04  // .f3...Y.....f.F.
    2600: 66 89 5E 08 66 8B C2 66 33 D2 66 BB 64 00 00 00  // f.^.f..f3.f.d...
    2610: 66 F7 E3 66 89 46 00 BB 0C 00 8C D0 66 C1 E0 10  // f..f.F......f...
    2620: 8B C4 E8 77 07 8B EC B3 01 83 C4 10 C3 83 EC 10  // ...w............
    2630: 8B EC 66 89 56 00 66 89 5E 04 BB 2E 00 8C D0 66  // ..f.V.f.^......f
    2640: C1 E0 10 8B C4 E8 54 07 B3 01 83 C4 10 C3 C3 53  // ......T........S
    2650: 51 66 50 B9 68 74 80 FB 03 74 0B B9 A0 8C 80 FB  // QfP.ht...t......
    2660: 00 75 03 B9 78 69 66 33 D2 8B D1 66 58 59 5B C3  // .u..xif3...fXY[.
    2670: 66 52 B3 00 66 F7 C2 00 00 FF FF 75 1A 80 FD 13  // fR..f......u....
    2680: 74 15 80 FD 14 74 10 B3 01 80 FD 0E 74 09 B3 03  // t....t......t...
    2690: 80 F9 03 74 02 B3 02 66 5A C3 B5 11 80 FA 23 74  // ...t...fZ.....#t
    26A0: 07 80 FA 22 74 02 B5 00 C3 B5 02 80 FA 23 74 07  // ..."t........#t.
    26B0: 80 FA 22 74 02 B3 01 C3 32 C9 80 FD 00 75 08 C7  // .."t....2....u..
    26C0: 46 00 0B 01 B1 01 C3 50 33 C0 E8 9E 01 04 14 89  // F......P3.......
    26D0: 46 00 58 B1 01 C3 C3 8B DA B7 22 80 FE 21 74 02  // F.X......."..!t.
    26E0: B7 21 C3 0C 01 C3 E8 16 0C 66 C1 E8 10 0B C0 74  // .!.......f.....t
    26F0: 1C 53 83 C3 06 E8 07 0C 5B 3D E0 01 72 0F 53 83  // .S......[=..r.S.
    2700: C3 18 E8 FA 0B 5B A8 80 75 03 0C 01 C3 32 C0 C3  // .....[..u....2..
    2710: B5 0C C3 B5 02 C3 50 E8 51 01 B1 03 0A C0 74 04  // ......P.Q.....t.
    2720: B1 08 02 C8 58 C3 80 FA 22 75 05 C7 46 00 78 69  // ....X..."u..F.xi
    2730: C3 E8 1A 01 80 FD FF 74 35 83 EC 0C 8B EC 88 4E  // .......t5......N
    2740: 01 88 6E 00 80 F9 0F 75 05 E8 4F 00 EB 0F 80 F9  // ..n....u..O.....
    2750: 10 75 0A 8D 9C 48 03 E8 A5 0B 88 46 02 8C D0 66  // .u...H.....F...f
    2760: C1 E0 10 8B C4 BB 04 00 E8 31 06 83 C4 0C C3 83  // .........1......
    2770: EC 10 8B EC 88 4E 01 E8 75 EB 81 E2 00 07 FE CE  // .....N..u.......
    2780: C0 E6 04 88 76 00 E8 12 00 8C D0 66 C1 E0 10 8B  // ....v......f....
    2790: C4 BB 32 00 E8 05 06 83 C4 10 C3 66 53 E8 6F EB  // ..2........fS.o.
    27A0: 66 8B C2 66 33 D2 66 BB 8C 0A 00 00 66 F7 F3 66  // f..f3.f.....f..f
    27B0: 5B 8A E8 88 6E 09 8D 9C 40 03 E8 42 0B 88 46 02  // [...n...@..B..F.
    27C0: 88 66 03 66 C1 E8 10 88 46 08 E8 31 EB 66 89 56  // .f.f....F..1.f.V
    27D0: 04 C3 83 EC 20 8B EC 80 F9 04 75 0A 88 4E 01 32  // .... .....u..N.2
    27E0: C0 88 46 00 EB 56 E8 FB EA E8 7F 00 88 46 00 88  // ..F..V.......F..
    27F0: 4E 01 E8 6F EB 88 56 0A 80 F9 01 74 18 80 F9 0B  // N..o..V....t....
    2800: 75 3A 8D 9C 5C 03 E8 F6 0A 88 46 02 E8 EF EA 66  // u:..\.....F....f
    2810: 89 56 04 EB 27 E8 08 EB 88 6E 08 E8 E0 EA 66 89  // .V..'....n....f.
    2820: 56 04 E8 0A EB 88 5E 03 E8 77 EA 88 6E 02 51 E8  // V.....^..w..n.Q.
    2830: 1C 00 8A CD B0 01 D2 E0 59 88 46 09 8C D0 66 C1  // ........Y.F...f.
    2840: E0 10 8B C4 BB 4C 00 E8 52 05 83 C4 20 C3 8D 9C  // .....L..R... ...
    2850: 3C 03 E8 AA 0A 32 ED 3C 03 74 0C 3C 09 72 09 3C  // <....2.<.t.<.r.<
    2860: 0E 77 05 2C 08 8A E8 C3 B5 FF C3 52 32 C0 80 EE  // .w.,.......R2...
    2870: 21 80 FA 1E 74 10 B0 02 80 FA 20 74 09 B0 04 80  // !...t..... t....
    2880: FA 21 74 02 B0 06 02 C6 5A C3 83 EC 08 8C D0 66  // .!t.....Z......f
    2890: C1 E0 10 8B C4 BB 4B 00 E8 01 05 83 C4 08 C3 83  // ......K.........
    28A0: EC 08 8B EC 89 7E 00 89 5E 02 89 56 04 89 4E 06  // .....~..^..V..N.
    28B0: 8C D0 66 C1 E0 10 8B C4 BB 36 00 E8 DE 04 8B EC  // ..f......6......
    28C0: 8B 5E 02 8A 7E 01 83 C4 08 C3 56 33 F6 66 F7 C2  // .^..~.....V3.f..
    28D0: 00 00 80 00 75 0A 50 33 C0 8A C6 8B F0 32 F6 58  // ....u.P3.....2.X
    28E0: 53 BB 04 1F E8 78 09 66 8B C2 BB 00 1F E8 6F 09  // S....x.f......o.
    28F0: 5B 66 F7 C2 00 00 10 00 75 02 33 DB 8B D3 66 C1  // [f......u.3...f.
    2900: E2 10 BA 00 1F 83 EC 08 8B EC 66 89 56 00 88 4E  // ..........f.V..N
    2910: 04 8A C5 FE C8 88 46 07 C6 46 05 00 C6 46 06 00  // ......F..F...F..
    2920: 8C D0 66 C1 E0 10 8B C4 BB 4E 00 E8 6E 04 8B EC  // ..f......N..n...
    2930: 8A 5E 05 8A 7E 06 83 C4 08 0A DB 74 32 51 B9 90  // .^..~......t2Q..
    2940: 01 80 FB 20 74 05 80 FB 80 75 13 B9 0A 00 8B C6  // ... t....u......
    2950: 0A C0 74 0A B9 90 01 3C 01 74 03 B9 E8 03 E8 71  // ..t....<.t.....q
    2960: 05 59 8B C6 FE C4 8B F0 80 FC 06 76 98 0A DB 5E  // .Y.........v...^
    2970: C3 8D 5C 04 E8 88 09 8B D0 B5 02 E8 14 00 74 11  // ..\...........t.
    2980: B5 01 80 FA 13 75 0A E8 61 00 80 FA 13 75 02 B5  // .....u..a....u..
    2990: 02 C3 80 FA 14 C3 E8 F9 FF 74 03 80 FA 0E C3 80  // .........t......
    29A0: FA 05 C3 80 FA 02 74 03 80 FA 04 C3 80 FA 01 74  // ......t........t
    29B0: 03 80 FA 02 C3 80 FA 02 75 03 B2 01 C3 80 FA 04  // ........u.......
    29C0: 75 03 B2 03 C3 C3 B5 08 E8 D8 FF 74 02 B5 04 C3  // u..........t....
    29D0: 8D 5C 09 E8 29 09 8A C8 0A C9 75 03 32 C0 C3 B5  // .\..).....u.2...
    29E0: 02 E8 7C 04 8A C5 24 02 D0 E8 C3 8D 5C 08 E8 0E  // ..|...$.....\...
    29F0: 09 8A D0 B6 01 83 EC 10 8B EC 89 56 02 8C D0 66  // ...........V...f
    2A00: C1 E0 10 8B C4 BB 4F 00 E8 91 03 8B EC 8A 56 04  // ......O.......V.
    2A10: 83 C4 10 C3 53 83 C3 4C E8 B2 08 5B C3 53 83 C3  // ....S..L...[.S..
    2A20: 4C E8 04 08 5B C3 56 E8 2F 03 8B 44 38 83 7D 20  // L...[.V./..D8.} 
    2A30: 00 5E C3 52 50 0F BC D8 32 FF 80 FB 01 75 05 BB  // .^.RP...2....u..
    2A40: 00 24 EB 0C FE CB B8 00 04 F7 E3 05 00 20 8B D8  // .$........... ..
    2A50: 58 5A C3 57 E8 56 00 74 0A 8B 5D 02 E8 08 00 0B  // XZ.W.V.t..].....
    2A60: DB 5F C3 33 DB 5F C3 52 51 0B DB 74 1B 56 E8 CF  // ._.3._.RQ..t.V..
    2A70: 02 03 DE 5E 33 C9 8A 4F 01 80 3F FF 74 08 3A 07  // ...^3..O..?.t.:.
    2A80: 74 06 03 D9 EB F0 33 DB 0B DB 59 5A C3 56 51 E8  // t.....3...YZ.VQ.
    2A90: AE 02 32 C9 8D 7C 08 3B 5D 04 74 0C 83 C7 10 FE  // ..2..|.;].t.....
    2AA0: C1 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 56 51 E8  // .:L.r.3...Y^.VQ.
    2AB0: 8E 02 32 C9 8D 7C 08 3B 1D 74 0C 83 C7 10 FE C1  // ..2..|.;.t......
    2AC0: 3A 4C 06 72 F2 33 FF 0B FF 59 5E C3 56 51 E8 6F  // :L.r.3...Y^.VQ.o
    2AD0: 02 32 C9 8D 7C 08 3B 45 0C 74 0C 83 C7 10 FE C1  // .2..|.;E.t......
    2AE0: 3A 4C 06 72 F1 33 FF 0B FF 59 5E C3 57 50 E8 DB  // :L.r.3...Y^.WP..
    2AF0: FF 8A C3 8B 5D 02 E8 6E FF 58 5F C3 53 32 C9 B3  // ....]..n.X_.S2..
    2B00: 01 E8 E8 FF 74 03 8A 4F 02 0A C9 5B C3 53 32 ED  // ....t..O...[.S2.
    2B10: B3 02 E8 D7 FF 74 03 8A 6F 02 0A ED 5B C3 50 57  // .....t..o...[.PW
    2B20: 8B DA E8 68 FF 75 04 33 DB EB 0D B0 14 8B 5D 08  // ...h.u.3......].
    2B30: E8 34 FF 74 F2 8B 5F 02 5F 58 C3 66 50 53 51 57  // .4.t.._._X.fPSQW
    2B40: 8D 1C 66 25 FF FF 00 00 E8 14 07 8B D8 E8 3B 00  // ..f%..........;.
    2B50: 23 C3 74 31 E8 75 FF 0B FF 74 2A 66 50 66 8B 45  // #.t1.u...t*fPf.E
    2B60: 04 8D 5C 0C E8 F8 06 66 33 C0 8B 05 8D 5C 04 E8  // ..\....f3....\..
    2B70: ED 06 66 58 E8 85 FF E8 93 FF 8D 5C 08 66 33 C0  // ..fX.......\.f3.
    2B80: 8B C1 E8 DA 06 5F 59 5B 66 58 C3 56 E8 B1 01 8B  // ....._Y[fX.V....
    2B90: 44 04 5E C3 56 E8 A8 01 89 44 04 5E C3 E8 CE 01  // D.^.V....D.^....
    2BA0: 8B F7 83 C6 38 BB 00 2C B9 23 00 E8 0C 03 E8 01  // ....8..,.#......
    2BB0: 00 C3 51 66 57 56 E8 87 01 66 33 FF 8D 7C 08 33  // ..QfWV...f3..|.3
    2BC0: C0 E8 D0 FF 32 C9 8B 15 B8 00 70 23 C2 3D 00 30  // ....2.....p#.=.0
    2BD0: 75 54 80 FA 15 74 0B E8 B1 FF 0B 45 0C E8 B4 FF  // uT...t.....E....
    2BE0: EB 44 E8 5E 00 89 45 0C 0B C0 75 04 89 05 EB 36  // .D.^..E...u....6
    2BF0: E8 98 FF 0B 45 0C E8 9B FF 83 7D 06 00 74 16 E8  // ....E.....}..t..
    2C00: 4A 00 89 45 06 0B C0 74 0C 83 7D 06 00 74 06 8B  // J..E...t..}..t..
    2C10: 5C 0A E8 BB 00 E8 40 00 89 05 8B 5D 02 E8 B0 00  // \.....@....]....
    2C20: 8B 5D 08 E8 CB 00 83 C7 10 FE C1 3A 4C 06 72 96  // .].........:L.r.
    2C30: 5E 66 5F 59 C3 08 00 80 00 00 02 00 04 00 08 40  // ^f_Y...........@
    2C40: 00 00 00 53 E8 58 00 E8 B5 06 5B C3 53 E8 4F 00  // ...S.X....[.S.O.
    2C50: 83 C3 08 E8 A9 06 5B C3 53 57 52 E8 41 00 83 C3  // ......[.SWR.A...
    2C60: 04 E8 9B 06 8B D0 E8 3A FD 75 16 8B 5D 04 8B D3  // .......:.u..]...
    2C70: E8 64 FA 57 E8 16 FE 5F 75 07 8B D0 E8 36 FD 8B  // .d.W..._u....6..
    2C80: C2 5A 5F 5B C3 E8 D0 FF 66 C1 E8 10 B4 11 E8 25  // .Z_[....f......%
    2C90: 00 C3 E8 C3 FF 66 C1 E8 18 B4 10 E8 18 00 C3 51  // .....f.........Q
    2CA0: 52 33 C9 8A CE 80 E1 07 49 B8 10 00 F7 E1 BB 14  // R3......I.......
    2CB0: 2C 03 D8 5A 59 C3 57 53 51 33 C9 8A C8 8A C4 BB  // ,..ZY.WSQ3......
    2CC0: 03 71 E8 8E FD 83 C3 02 03 D9 8A 07 59 5B 5F C3  // .q..........Y[_.
    2CD0: 50 53 B0 01 E8 90 FD 74 15 E8 A9 FF 88 47 02 5B  // PS.....t.....G.[
    2CE0: 53 B0 02 E8 81 FD 74 06 E8 A7 FF 88 47 02 5B 58  // S.....t.....G.[X
    2CF0: C3 51 50 B0 14 E8 6F FD 74 3A 53 E8 A1 FF 83 C3  // .QP...o.t:S.....
    2D00: 0C E8 FB 05 8B C8 5B F6 C1 01 74 05 66 83 67 02  // ......[...t.f.g.
    2D10: FD F6 C1 80 74 05 66 83 67 02 F7 F7 C1 00 01 74  // ....t.f.g......t
    2D20: 08 66 81 4F 02 00 01 00 00 F7 C1 00 02 74 05 66  // .f.O.........t.f
    2D30: 83 67 02 FB 58 59 C3 BF A6 01 8B 3D 8B 7D 0C C3  // .g..XY.....=.}..
    2D40: BE A6 01 8B 34 8B 74 30 C3 1E 0E 1F BF A6 01 8B  // ....4.t0........
    2D50: 3D 8B 7D 0E 83 C7 04 1F C3 BE A6 01 8B 34 8B 74  // =.}..........4.t
    2D60: 10 C3 BF A6 01 8B 3D 8B 7D 26 83 C7 04 C3 BF A6  // ......=.}&......
    2D70: 01 8B 3D 8B 7D 40 C3 BE A6 01 8B 34 8B 74 1A C3  // ..=.}@.....4.t..
    2D80: BE A6 01 8B 34 8B 74 3A C3 BF A6 01 8B 3D 8B 7D  // ....4.t:.....=.}
    2D90: 0A 83 C7 04 B9 07 00 C3 E8 01 00 CB 83 EC 06 8B  // ................
    2DA0: EC 89 46 00 66 33 C0 C6 46 04 00 89 46 02 06 52  // ..F.f3..F...F..R
    2DB0: 8A D3 8B C5 E8 8A 17 5A 07 83 C4 06 C3 E8 77 FF  // .......Z......w.
    2DC0: 66 F7 45 10 01 00 00 00 C3 50 E8 6A FF B8 01 00  // f.E......P.j....
    2DD0: 09 45 10 58 C3 E8 5F FF 88 45 10 C3 66 53 83 EC  // .E.X.._..E..fS..
    2DE0: 48 8B EC 66 89 5E 00 66 89 4E 04 8C D0 66 C1 E0  // H..f.^.f.N...f..
    2DF0: 10 8B C4 BB 00 00 E8 A3 FF 83 C4 48 66 5B E8 6A  // ...........Hf[.j
    2E00: 01 E8 A4 01 83 EC 1C 8B EC C6 46 01 07 8C D0 66  // ..........F....f
    2E10: C1 E0 10 8B C4 BB 0D 00 E8 81 FF 83 C4 1C E8 0E  // ................
    2E20: 00 BB 04 00 E8 ED FB 66 C1 E8 10 E8 A7 FF C3 83  // .......f........
    2E30: EC 1C 8B EC C6 46 01 08 8C D0 66 C1 E0 10 8B C4  // .....F....f.....
    2E40: BB 0D 00 E8 56 FF 83 C4 1C C3 E8 EA FE 66 8B 5D  // ....V........f.]
    2E50: 08 66 8B 4D 0C C3 56 E8 26 FF 66 8B 44 08 5E C3  // .f.M..V.&.f.D.^.
    2E60: 83 EC 04 8B EC 89 4E 00 8C D0 66 C1 E0 10 8B C4  // ......N...f.....
    2E70: BB 38 00 E8 26 FF 8B EC 8A 6E 02 83 C4 04 C3 C3  // .8..&....n......
    2E80: B0 05 C3 B0 01 C3 B0 04 C3 B0 08 C3 53 66 50 66  // ............SfPf
    2E90: 33 C0 E8 CA 03 83 C3 04 E2 F8 66 58 5B C3 32 C0  // 3.........fX[.2.
    2EA0: C3 FC E8 5A 04 66 C1 CB 10 E8 B3 03 66 C1 CB 10  // ...Z.f......f...
    2EB0: 66 81 C3 04 00 04 00 E2 E9 C3 FC 66 AD E8 9F 03  // f..........f....
    2EC0: 83 C3 04 E2 F6 C3 FC E8 35 04 66 AB 83 C3 04 E2  // ........5.f.....
    2ED0: F6 C3 66 50 B8 30 00 E8 10 00 66 58 C3 66 50 B8  // ..fP.0....fX.fP.
    2EE0: C0 5D D1 E1 E8 03 00 66 58 C3 52 F7 E1 8B CA E8  // .].....fX.R.....
    2EF0: 26 02 66 53 8B D9 66 C1 E3 10 8B D8 66 B8 04 B1  // &.fS..f.....f...
    2F00: 03 00 B2 00 66 EF B2 04 66 33 C0 66 EF 66 B8 08  // ....f...f3.f.f..
    2F10: B1 03 00 B2 00 66 EF B2 04 66 ED 33 C9 66 03 D8  // .....f...f.3.f..
    2F20: 73 0A 66 ED 66 A9 00 00 00 80 75 F6 66 ED 66 3B  // s.f.f.....u.f.f;
    2F30: C3 73 0C 66 C1 E8 10 3B C1 72 04 8B C8 EB ED 66  // .s.f...;.r.....f
    2F40: 5B 5A C3 BB 42 EC E8 84 03 66 33 D2 66 BB 30 00  // [Z..B....f3.f.0.
    2F50: 00 00 66 F7 F3 C3 66 50 53 BB 07 00 E8 B5 FA 25  // ..f...fPS......%
    2F60: 00 02 35 00 02 0B C0 5B 66 58 C3 66 51 B3 01 E8  // ..5....[fX.fQ...
    2F70: 80 01 E8 02 FE 66 33 C9 8B 4C 08 66 C1 E0 0A 0B  // .....f3..L.f....
    2F80: C9 75 03 B9 20 00 66 2B C1 E8 EB FD 66 89 44 04  // .u.. .f+....f.D.
    2F90: 89 4C 08 66 59 C3 56 1E 0E 1F E8 DA FD 66 8B 44  // .L.fY.V......f.D
    2FA0: 04 66 C1 E0 0A 1F 5E C3 E8 C0 FF 06 E8 BF FD 0E  // .f....^.........
    2FB0: 07 BB 00 78 E8 48 03 66 3B 05 75 07 B9 00 01 FC  // ...x.H.f;.u.....
    2FC0: E8 03 FF E8 A8 FD BE A6 01 8B 34 8B 74 14 8B 45  // ..........4.t..E
    2FD0: 14 89 44 0C E8 82 FD 0B F6 74 4F 8B 45 28 89 44  // ..D......tO.E(.D
    2FE0: 20 8A 45 33 88 44 38 F6 45 26 08 74 17 8A 45 26  //  .E3.D8.E&.t..E&
    2FF0: C0 E8 04 88 44 24 80 64 24 FD F6 45 26 01 74 04  // ....D$.d$..E&.t.
    3000: 80 4C 24 02 57 83 C7 38 8A 85 87 00 88 44 3B 5F  // .L$.W..8.....D;_
    3010: 66 8B 45 18 89 44 28 B9 07 00 8D 5D 2C 8A 07 0A  // f.E..D(....],...
    3020: C0 74 03 88 44 2C 43 46 E2 F3 E8 53 FD 8B 45 20  // .t..D,CF...S..E 
    3030: 89 44 10 8B 45 22 89 44 12 8B 45 1C 89 44 14 8B  // .D..E".D..E..D..
    3040: 45 1E 89 44 16 BB 04 71 B0 09 E8 06 FA 74 0C 57  // E..D...q.....t.W
    3050: 83 C7 38 8A 85 85 00 88 47 04 5F 07 C3 BE A6 01  // ..8.....G._.....
    3060: 8B 34 8B 74 1E 83 C6 04 B9 1C 00 C3 56 E8 E9 FC  // .4.t........V...
    3070: 8A 6C 33 5E C3 56 E8 E0 FC 53 81 C3 09 01 E8 7E  // .l3^.V...S.....~
    3080: 02 8A E8 5B 53 81 C3 00 01 E8 73 02 5B 8A C5 66  // ...[S.....s.[..f
    3090: 89 44 34 5E C3 56 E8 C0 FC 66 8B 44 34 53 81 C3  // .D4^.V...f.D4S..
    30A0: 08 01 B1 01 8A E8 E8 FA 01 5B 53 81 C3 00 01 B1  // .........[S.....
    30B0: 01 8A EC E8 ED 01 5B 53 81 C3 02 01 66 C1 E8 10  // ......[S....f...
    30C0: E8 B4 01 5B 5E C3 56 E8 8F FC 8B FE 83 C7 04 5E  // ...[^.V........^
    30D0: C3 56 E8 84 FC 8A 44 24 80 FD 00 74 05 88 6C 33  // .V....D$...t..l3
    30E0: 0C 02 88 44 24 5E C3 32 C0 C3 E8 81 FC 66 8B 45  // ...D$^.2.....f.E
    30F0: 08 C3 66 53 83 EC 04 8B EC 8C D0 66 C1 E0 10 8B  // ..fS.......f....
    3100: C4 66 89 5E 00 BB 06 00 E8 91 FC 8B EC 66 8B 46  // .f.^.........f.F
    3110: 00 83 C4 04 66 5B C3 00 66 50 8C C8 3D 00 C0 75  // ....f[..fP..=..u
    3120: 0C BA C3 03 EC 8A F0 0A F6 74 02 EB 0E 53 2E 8B  // .........t...S..
    3130: 1E 14 00 B2 20 E8 D6 00 8A F4 5B 32 D2 66 ED 66  // .... .....[2.f.f
    3140: 58 C3 2E 8B 1E 14 00 C3 0B C9 75 1A 4B 74 16 43  // X.........u.Kt.C
    3150: 3B DA 77 09 8B C8 8B C2 2B D2 F7 F3 91 F7 F3 8B  // ;.w.....+.......
    3160: DA 8B D1 2B C9 C3 3B CA 72 1A 75 10 3B D8 77 0C  // ...+..;.r.u.;.w.
    3170: 2B C3 8B D8 2B C9 2B D2 B8 01 00 C3 2B C9 2B DB  // +...+.+.....+.+.
    3180: 93 87 CA C3 55 56 2B F6 8B EE 03 DB 13 C9 72 11  // ....UV+.......r.
    3190: 45 3B CA 72 F5 77 04 3B D8 76 EF F8 13 F6 4D 78  // E;.r.w.;.v....Mx
    31A0: 20 D1 D9 D1 DB 2B C3 1B D1 F5 72 F0 03 F6 4D 78  //  ....+....r...Mx
    31B0: 0C D1 E9 D1 DB 03 C3 13 D1 73 F1 EB DF 03 C3 13  // .........s......
    31C0: D1 8B D8 8B CA 8B C6 33 D2 5E 5D C3 93 50 92 0B  // .......3.^]..P..
    31D0: C0 74 02 F7 E2 91 0B C0 74 04 F7 E3 03 C8 58 F7  // .t......t.....X.
    31E0: E3 03 D1 C3 52 66 50 B4 80 8A C7 66 C1 E0 10 8A  // ....RfP....f....
    31F0: E3 8A C2 24 FC BA F8 0C 66 EF 66 58 5A C3 52 BA  // ...$....f.fXZ.R.
    3200: FC 0C 66 ED 5A C3 52 BA FC 0C 66 EF 5A C3 E8 31  // ..f.Z.R...f.Z..1
    3210: FF 9C FA E8 CE FF E8 E5 FF 9D C3 E8 24 FF 9C FA  // ............$...
    3220: E8 C1 FF E8 E0 FF 9D C3 52 66 53 66 50 E8 06 00  // ........RfSfP...
    3230: 66 58 66 5B 5A C3 66 C1 E3 10 66 C1 EB 0E E8 D7  // fXf[Z.f...f.....
    3240: FE E8 93 01 C3 66 50 66 C1 E3 10 66 C1 EB 10 E8  // .....fPf...f....
    3250: 44 FD 66 03 D8 66 81 CB 00 00 00 80 66 58 C3 52  // D.f..f......fX.R
    3260: 66 53 E8 04 00 66 5B 5A C3 66 50 E8 AA FE E8 D4  // fS...f[Z.fP.....
    3270: FF E8 63 01 66 58 C3 52 51 66 53 66 50 8A CB 80  // ..c.fX.RQfSfP...
    3280: E3 FC 80 E1 03 C0 E1 03 E8 8D FE E8 B7 FF E8 2D  // ...............-
    3290: 01 66 D3 C8 58 50 66 D3 C0 E8 3B 01 66 58 66 5B  // .f..XPf...;.fXf[
    32A0: 59 5A C3 66 50 51 C0 E1 03 E8 53 00 66 D3 C8 8A  // YZ.fPQ....S.f...
    32B0: C5 66 D3 C0 E8 A8 FF 59 66 58 C3 66 50 51 C0 E1  // .f.....YfX.fPQ..
    32C0: 03 E8 3B 00 66 D3 C8 59 8A E8 66 58 C3 E8 5F 00  // ..;.f..Y..fX.._.
    32D0: C3 E8 44 FE 66 C1 E3 10 66 C1 EB 0E E8 DF 00 C3  // ..D.f...f.......
    32E0: E8 35 FE 66 C1 E3 02 E8 D4 00 C3 52 66 53 E8 04  // .5.f.......RfS..
    32F0: 00 66 5B 5A C3 E8 20 FE E8 4A FF E8 C0 00 C3 51  // .f[Z.. ..J.....Q
    3300: 66 52 8A EB 8A CB 80 E1 03 C0 E1 03 80 E3 FC E8  // fR..............
    3310: D9 FF 80 F9 00 74 14 66 8B D0 83 C3 04 E8 CB FF  // .....t.f........
    3320: 83 EB 04 66 92 66 0F AD D0 8A DD 66 5A 59 C3 52  // ...f.f.....fZY.R
    3330: 66 53 E8 9C FF 66 5B 5A C3 52 66 53 E8 A1 FF 66  // fS...f[Z.RfS...f
    3340: 5B 5A C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56  // [Z.fPURfP...V..V
    3350: 08 E8 C4 FD B2 00 66 ED 66 89 46 0A 66 58 5A 5D  // ......f.f.F.fXZ]
    3360: C3 66 50 55 52 66 50 8B EC 8B 56 0C 89 56 08 E8  // .fPURfP...V..V..
    3370: A6 FD 2E A1 F5 01 B2 18 EF B2 00 66 ED 66 89 46  // ...........f.f.F
    3380: 0A 66 58 5A 5D C3 66 50 55 52 8B EC E8 89 FD B2  // .fXZ].fPUR......
    3390: 00 66 8B 46 0A 66 EF 8B 56 08 89 56 0C 66 8B 46  // .f.F.f..V..V.f.F
    33A0: 04 66 89 46 08 5A 5D 66 58 66 58 C3 66 50 52 E8  // .f.F.Z]fXfX.fPR.
    33B0: 66 FD B2 18 66 ED 2E A3 F5 01 5A 66 58 C3 66 81  // f...f.....ZfX.f.
    33C0: FB FF 00 00 00 77 04 8A D3 EB 09 66 8B C3 B2 00  // .....w.....f....
    33D0: 66 EF B2 04 66 ED C3 66 81 FB FF 00 00 00 77 04  // f...f..f......w.
    33E0: 8A D3 EB 0A 66 93 B2 00 66 EF 66 93 B2 04 66 EF  // ....f...f.f...f.
    33F0: C3 C3 C3 55 8B EC 53 51 8B F0 26 8B 5C 14 26 8B  // ...U..SQ..&.\.&.
    3400: 4C 16 E8 28 00 8D 66 FC 59 5B 5D C3 53 51 8B F0  // L..(..f.Y[].SQ..
    3410: 26 8B 5C 24 33 C9 E8 14 00 59 5B C3 55 8B EC 53  // &.\$3....Y[.U..S
    3420: 51 8B F0 26 8B 5C 08 26 8B 4C 0A EB D5 52 56 57  // Q..&.\.&.L...RVW
    3430: C8 06 00 00 8B F0 89 4E FE 8C D0 8E C0 26 8B 7C  // .......N.....&.|
    3440: 26 8A 45 01 32 E4 B9 20 00 2B C8 B8 FF FF 8B D0  // &.E.2.. .+......
    3450: E3 06 D1 EA D1 D8 E2 FA 8A 4D 03 32 ED 8B FA E3  // .........M.2....
    3460: 06 D1 E0 D1 D7 E2 FA F7 D0 F7 D7 26 21 44 1C 26  // ...........&!D.&
    3470: 21 7C 1E 8C D0 8E C0 26 8B 7C 26 8A 4D 01 32 ED  // !|.....&.|&.M.2.
    3480: B8 20 00 2B C1 8B C8 66 C7 46 FA FF FF FF FF E3  // . .+...f.F......
    3490: 08 D1 6E FC D1 5E FA E2 F8 8A 4D 02 32 ED 8B C3  // ..n..^....M.2...
    34A0: 8B 56 FE E3 06 D1 EA D1 D8 E2 FA 23 46 FA 23 56  // .V.........#F.#V
    34B0: FC 8A 4D 03 32 ED E3 06 D1 E0 D1 D2 E2 FA 26 09  // ..M.2.........&.
    34C0: 44 1C 26 09 54 1E C9 5F 5E 5A C3 55 8B EC 53 51  // D.&.T.._^Z.U..SQ
    34D0: 52 57 50 8B D8 26 8B 7F 26 8A 45 01 32 E4 B9 20  // RWP..&..&.E.2.. 
    34E0: 00 2B C8 B8 FF FF 8B D0 E3 06 D1 EA D1 D8 E2 FA  // .+..............
    34F0: 8A 4D 02 88 4E F6 C6 46 F7 00 8B FA 8B 4E F6 E3  // .M..N..F.....N..
    3500: 06 D1 E0 D1 D7 E2 FA 26 09 47 1C 26 09 7F 1E 8D  // .......&.G.&....
    3510: 66 F8 5F 5A E9 F1 FE 53 51 52 57 8B D8 8C D0 8E  // f._Z...SQRW.....
    3520: C0 26 8B 77 26 8A 4C 01 32 ED B8 20 00 2B C1 8B  // .&.w&.L.2.. .+..
    3530: C8 BE FF FF 8B D6 E3 06 D1 EA D1 DE E2 FA 26 8B  // ..............&.
    3540: 7F 26 8A 4D 02 32 ED 8B C6 E3 06 D1 E0 D1 D2 E2  // .&.M.2..........
    3550: FA F7 D0 F7 D2 26 21 47 1C 26 21 57 1E 5F E9 CC  // .....&!G.&!W._..
    3560: 05 53 56 8B D8 8C D2 8E C2 26 8B 77 26 80 3C 00  // .SV......&.w&.<.
    3570: 74 73 80 3C 01 75 58 8A 44 01 32 E4 26 83 7F 1E  // ts.<.uX.D.2.&...
    3580: 00 75 4C 26 3B 47 1C 75 46 8A 04 6B F0 03 8A 84  // .uL&;G.uF..k....
    3590: BA 91 26 01 47 26 8C D0 8E C0 26 8B 77 26 80 3C  // ..&.G&....&.w&.<
    35A0: 09 74 17 8A 04 32 E4 6B F0 03 8B C3 FF 94 B8 91  // .t...2.k........
    35B0: 26 8B 77 26 8A 04 32 E4 EB D1 8B 44 01 26 29 47  // &.w&..2....D.&)G
    35C0: 26 26 FF 47 26 26 8B 47 1C 26 8B 77 1E EB 1A 26  // &&.G&&.G.&.w...&
    35D0: 8B 77 26 8A 04 32 E4 6B F0 03 8A 84 BA 91 26 01  // .w&..2.k......&.
    35E0: 47 26 E9 80 FF 33 C0 33 F6 8B D6 5E 5B C3 53 51  // G&...3.3...^[.SQ
    35F0: 52 56 8B D8 8D 77 35 26 8B 54 02 26 89 57 14 26  // RV...w5&.T.&.W.&
    3600: C7 47 16 00 00 8B F0 26 8B 47 20 33 D2 26 01 47  // .G.....&.G 3.&.G
    3610: 14 26 11 54 16 8C D1 8E C1 26 F6 47 2F 06 0F 85  // .&.T.....&.G/...
    3620: 0A 05 26 80 7F 34 00 75 22 26 8B 77 16 26 0B 77  // ..&..4.u"&.w.&.w
    3630: 14 75 10 26 D1 67 08 26 D1 57 0A 26 D1 67 08 26  // .u.&.g.&.W.&.g.&
    3640: D1 57 0A 8B C3 E8 79 11 E9 E1 04 26 8A 47 34 32  // .W....y....&.G42
    3650: E4 05 80 00 99 26 89 47 1C 26 89 57 1E 8B C3 E8  // .....&.G.&.W....
    3660: FF FE E9 C7 04 53 56 8B D8 8D 77 35 26 8A 44 02  // .....SV...w5&.D.
    3670: 32 E4 C1 E0 02 26 8B 37 26 8B 34 03 F0 26 8B 47  // 2....&.7&.4..&.G
    3680: 08 26 8B 5F 0A 26 89 04 26 89 5C 02 5E 5B C3 53  // .&._.&..&.\.^[.S
    3690: 52 56 8B D8 8C D0 8D 77 35 8E C0 26 8A 54 02 80  // RV.....w5..&.T..
    36A0: FA 40 73 21 26 8B 77 02 32 F6 C1 E2 02 26 8B 74  // .@s!&.w.2....&.t
    36B0: 04 03 F2 26 8B 57 08 26 8B 47 0A 26 89 14 26 89  // ...&.W.&.G.&..&.
    36C0: 44 02 E9 7F 00 80 FA 41 75 12 26 8B 47 08 26 8B  // D......Au.&.G.&.
    36D0: 57 0A 26 89 47 10 26 89 57 12 EB 68 80 FA 40 75  // W.&.G.&.W..h..@u
    36E0: 12 26 8B 47 08 26 8B 57 0A 26 89 47 0C 26 89 57  // .&.G.&.W.&.G.&.W
    36F0: 0E EB 51 80 FA 42 75 0A 26 8B 47 08 26 89 47 22  // ..Q..Bu.&.G.&.G"
    3700: EB 42 80 FA 43 75 0A 26 8A 47 08 26 88 47 33 EB  // .B..Cu.&.G.&.G3.
    3710: 33 80 FA 46 75 12 26 8B 57 08 26 8B 47 0A 26 89  // 3..Fu.&.W.&.G.&.
    3720: 57 18 26 89 47 1A EB 1C 80 FA 47 75 0A 26 8B 47  // W.&.G.....Gu.&.G
    3730: 08 26 89 47 24 EB 0D 80 FA 48 75 08 26 8B 47 08  // .&.G$....Hu.&.G.
    3740: 26 89 47 20 5E 5A 5B C3 53 56 8B D8 8D 77 35 26  // &.G ^Z[.SV...w5&
    3750: 8A 44 02 32 E4 26 89 47 14 26 C7 47 16 00 00 5E  // .D.2.&.G.&.G...^
    3760: 5B C3 53 56 8B D8 26 8B 77 02 26 8B 74 02 8A 04  // [.SV..&.w.&.t...
    3770: 32 E4 26 89 47 14 26 C7 47 16 00 00 26 8B 5F 02  // 2.&.G.&.G...&._.
    3780: 26 FF 47 02 5E 5B C3 53 56 8B D8 26 8B 77 02 26  // &.G.^[.SV..&.w.&
    3790: 8B 74 02 8B 34 26 89 77 14 26 C7 47 16 00 00 26  // .t..4&.w.&.G...&
    37A0: 8B 5F 02 26 83 47 02 02 5E 5B C3 53 56 8B D8 26  // ._.&.G..^[.SV..&
    37B0: 8B 77 02 26 8B 74 02 8B 04 8B 74 02 26 89 47 14  // .w.&.t....t.&.G.
    37C0: 26 89 77 16 26 8B 5F 02 26 83 47 02 04 5E 5B C3  // &.w.&._.&.G..^[.
    37D0: 53 52 56 8B D8 E8 70 FF 8B F3 26 8B 47 18 26 8B  // SRV...p...&.G.&.
    37E0: 57 1A D1 EA D1 D8 D1 EA D1 D8 26 01 47 14 26 11  // W.........&.G.&.
    37F0: 54 16 8B C3 E8 2B 10 E9 4A FF 53 8B D8 26 8B 5F  // T....+..J.S..&._
    3800: 02 26 FF 47 02 5B C3 53 8B D8 26 8B 5F 02 26 83  // .&.G.[.S..&._.&.
    3810: 47 02 02 5B C3 53 56 8B D8 E8 6B FF 8B F3 26 8B  // G..[.SV...k...&.
    3820: 57 20 33 C0 26 01 57 14 26 11 44 16 8C D2 8E C2  // W 3.&.W.&.D.....
    3830: 26 8B 47 2E 32 C0 80 E4 06 3D 00 02 75 07 32 E4  // &.G.2....=..u.2.
    3840: 33 D2 5E 5B C3 26 8B 47 2E 32 C0 80 E4 06 3D 00  // 3.^[.&.G.2....=.
    3850: 04 74 EB 26 80 7F 34 00 75 08 8B C3 E8 2F 0F 5E  // .t.&..4.u..../.^
    3860: 5B C3 26 8A 47 34 32 E4 26 89 47 1C 26 C7 47 1E  // [.&.G42.&.G.&.G.
    3870: 00 00 8B C3 E8 EA FC 5E 5B C3 53 8B D8 E8 E2 FE  // .......^[.S.....
    3880: 26 8B 47 14 C1 E0 02 26 8B 1F 26 8B 1F 03 D8 26  // &.G....&..&....&
    3890: 8B 07 26 8B 57 02 5B C3 9E 38 93 38 A9 38 F8 38  // ..&.W.[..8.8.8.8
    38A0: AF 38 C7 38 E1 38 EC 38 F2 38 53 51 56 8B D8 E8  // .8.8.8.8.8SQV...
    38B0: B0 FE 8C D2 8E C2 26 83 7F 16 00 75 22 26 83 7F  // ......&....u"&..
    38C0: 14 40 73 1B 26 8B 77 02 26 8B 5F 14 C1 E3 02 26  // .@s.&.w.&._....&
    38D0: 8B 44 04 03 D8 26 8B 07 26 8B 57 02 E9 7B 05 26  // .D...&..&.W..{.&
    38E0: 8B 77 14 26 8B 47 16 83 C6 C0 83 D0 FF 75 71 83  // .w.&.G.......uq.
    38F0: FE 08 77 6C 03 F6 2E FF A4 30 38 26 8B 47 10 26  // ..wl.....08&.G.&
    3900: 8B 57 12 E9 54 05 26 8B 47 0C 26 8B 57 0E E9 49  // .W..T.&.G.&.W..I
    3910: 05 26 8B 47 22 EB 4B 26 8A 4F 33 32 ED BB 01 00  // .&.G".K&.O32....
    3920: 33 D2 E3 06 D1 E3 D1 D2 E2 FA 8B C3 E9 2B 05 26  // 3............+.&
    3930: 8A 4F 33 32 ED B8 01 00 33 D2 E3 06 D1 E0 D1 D2  // .O32....3.......
    3940: E2 FA F7 D0 F7 D2 E9 11 05 26 8B 47 18 26 8B 57  // .........&.G.&.W
    3950: 1A E9 06 05 26 8B 47 24 EB 08 26 8B 47 20 EB 02  // ....&.G$..&.G ..
    3960: 33 C0 33 D2 E9 F3 04 53 56 8B D8 E8 F4 FD 8B F3  // 3.3....SV.......
    3970: 26 8B 47 18 26 8B 57 1A D1 EA D1 D8 D1 EA D1 D8  // &.G.&.W.........
    3980: 26 01 47 14 26 11 54 16 8B C3 E8 16 0E 5E 5B C3  // &.G.&.T......^[.
    3990: 33 C0 33 D2 C3 53 56 8B D8 E8 EB FD 26 8B 77 14  // 3.3..SV.....&.w.
    39A0: 26 03 77 22 8B 04 8B 54 02 5E 5B C3 53 8B D8 26  // &.w"...T.^[.S..&
    39B0: C6 47 2B 04 E8 AB FD 26 8B 47 14 26 8B 57 16 5B  // .G+....&.G.&.W.[
    39C0: C3 53 8B D8 26 C6 47 2B 01 E8 BB FD EB E9 53 8B  // .S..&.G+......S.
    39D0: D8 26 C6 47 2B 00 E8 D2 FD EB DC 53 8B D8 83 C3  // .&.G+......S....
    39E0: 35 26 8A 5F 01 C0 EB 03 80 E3 07 32 FF 03 DB FF  // 5&._.......2....
    39F0: 97 48 91 5B C3 53 52 56 8B D8 26 8A 47 2C 32 E4  // .H.[.SRV..&.G,2.
    3A00: 8B F0 03 F0 8B C3 FF 94 64 91 26 89 47 08 26 89  // ........d.&.G.&.
    3A10: 57 0A 26 8A 47 2D 32 E4 8B F0 03 F0 8B C3 FF 94  // W.&.G-2.........
    3A20: 7C 91 26 89 47 04 26 89 57 06 E9 17 FD 53 51 56  // |.&.G.&.W....SQV
    3A30: 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C AC 91 E3 0A  // ..&.O+2.........
    3A40: 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A 4F 2B 32 ED  // &.o.&._...&.O+2.
    3A50: 8B F1 C1 E6 02 8B 8C 8C 91 8B B4 8E 91 26 21 4F  // .............&!O
    3A60: 04 26 21 77 06 26 8A 4F 2A 32 ED 8B F1 8A 8C B4  // .&!w.&.O*2......
    3A70: 91 E3 0A 26 D1 67 04 26 D1 57 06 E2 F6 26 8B 4F  // ...&.g.&.W...&.O
    3A80: 08 26 8B 77 0A 26 89 4F 14 26 89 77 16 E9 CA 03  // .&.w.&.O.&.w....
    3A90: 53 51 52 56 57 8B D8 8C D0 8E C0 26 8A 47 2B 32  // SQRVW......&.G+2
    3AA0: E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D B4 91  // ......&.G*......
    3AB0: 32 ED 8B 84 8C 91 8B 94 8E 91 E3 06 D1 E0 D1 D2  // 2...............
    3AC0: E2 FA F7 D0 F7 D2 26 21 47 14 26 21 57 16 26 8A  // ......&!G.&!W.&.
    3AD0: 47 2A 32 E4 8B F0 8A 8C B4 91 32 ED E3 0A 26 D1  // G*2.......2...&.
    3AE0: 6F 0A 26 D1 5F 08 E2 F6 26 8A 47 2B 8B F0 C1 E6  // o.&._...&.G+....
    3AF0: 02 8B 84 8C 91 8B 94 8E 91 26 21 47 08 26 21 57  // .........&!G.&!W
    3B00: 0A 26 8A 47 2A 32 E4 8B F0 8A 8C B4 91 32 ED E3  // .&.G*2.......2..
    3B10: 0A 26 D1 67 08 26 D1 57 0A E2 F6 26 8B 47 14 26  // .&.g.&.W...&.G.&
    3B20: 8B 57 16 26 09 47 08 26 09 57 0A 5F 5E 5A 59 5B  // .W.&.G.&.W._^ZY[
    3B30: C3 53 51 56 8B D8 26 8A 4F 2B 32 ED 8B F1 8A 8C  // .SQV..&.O+2.....
    3B40: AC 91 E3 0A 26 D1 6F 06 26 D1 5F 04 E2 F6 26 8A  // ....&.o.&._...&.
    3B50: 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 8C 91 8B B4 8E  // O+2.............
    3B60: 91 26 21 4F 04 26 21 77 06 26 8A 4F 2A 32 ED 8B  // .&!O.&!w.&.O*2..
    3B70: F1 8A 8C B4 91 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2  // .......&.o.&._..
    3B80: F6 26 8A 4F 2B 32 ED 8B F1 C1 E6 02 8B 8C 8C 91  // .&.O+2..........
    3B90: 8B B4 8E 91 26 21 4F 08 26 21 77 0A E9 BB 02 51  // ....&!O.&!w....Q
    3BA0: 52 57 8B D8 8C D0 8E C0 26 80 7F 2B 00 74 1A 26  // RW......&..+.t.&
    3BB0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 64 91 26  // .G,2.........d.&
    3BC0: 89 47 08 26 89 57 0A EB 10 26 8A 47 2C 32 E4 8B  // .G.&.W...&.G,2..
    3BD0: F0 03 F0 8B C3 FF 94 70 91 26 8A 47 2D 32 E4 8B  // .......p.&.G-2..
    3BE0: F0 03 F0 8B C3 FF 94 7C 91 26 89 47 04 26 89 57  // .......|.&.G.&.W
    3BF0: 06 8C D2 8E C2 26 80 7F 2B 00 74 4A 26 8A 47 2B  // .....&..+.tJ&.G+
    3C00: 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8 8A 8D B4  // 2......&.G*.....
    3C10: 91 32 ED 8B 84 8C 91 8B 94 8E 91 E3 06 D1 E0 D1  // .2..............
    3C20: D2 E2 FA F7 D0 F7 D2 26 21 47 08 26 21 57 0A 8B  // .......&!G.&!W..
    3C30: C3 E8 F9 FD 26 8B 47 04 26 8B 57 06 26 09 47 08  // ....&.G.&.W.&.G.
    3C40: 26 09 57 0A EB 10 26 8B 57 04 26 8B 47 06 26 89  // &.W...&.W.&.G.&.
    3C50: 57 08 26 89 47 0A 26 8A 47 2C 32 E4 8B F0 03 F0  // W.&.G.&.G,2.....
    3C60: 8B C3 FF 94 58 91 5F 5A 59 C3 53 51 52 56 57 8B  // ....X._ZY.SQRVW.
    3C70: D8 26 8A 47 2A 32 E4 8B F0 8A 8C B4 91 32 ED E3  // .&.G*2.......2..
    3C80: 0A 26 D1 67 04 26 D1 57 06 E2 F6 8C D0 8E C0 26  // .&.g.&.W.......&
    3C90: 8A 47 2B 32 E4 8B F0 C1 E6 02 26 8A 47 2A 8B F8  // .G+2......&.G*..
    3CA0: 8A 8D B4 91 32 ED 8B 84 8C 91 8B 94 8E 91 E3 06  // ....2...........
    3CB0: D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 09 47 04 26 09  // ..........&.G.&.
    3CC0: 57 06 26 8B 47 04 26 8B 57 06 26 21 47 08 26 21  // W.&.G.&.W.&!G.&!
    3CD0: 57 0A E9 56 FE 55 8B EC 51 52 50 8B D8 26 8A 47  // W..V.U..QRP..&.G
    3CE0: 2C 32 E4 8B F0 03 F0 8B C3 FF 94 64 91 26 89 47  // ,2.........d.&.G
    3CF0: 08 26 89 57 0A 26 8A 47 2B 88 46 FA 8B C3 E8 DA  // .&.W.&.G+.F.....
    3D00: FC 26 89 47 04 26 89 57 06 26 8A 4F 2D 32 ED 8B  // .&.G.&.W.&.O-2..
    3D10: F1 03 F1 8B C3 FF 94 7C 91 26 89 47 14 26 89 57  // .......|.&.G.&.W
    3D20: 16 8B C3 E8 44 FF 8A 46 FA 32 E4 8B F0 8A 8C AC  // ....D..F.2......
    3D30: 91 E3 0A 26 D1 6F 16 26 D1 5F 14 E2 F6 26 8A 57  // ...&.o.&._...&.W
    3D40: 2B 32 F6 8B F2 C1 E6 02 8B 84 8C 91 8B 94 8E 91  // +2..............
    3D50: 26 21 47 14 26 21 57 16 26 8A 47 2A 32 E4 8B F0  // &!G.&!W.&.G*2...
    3D60: 8A 8C B4 91 32 ED E3 0A 26 D1 67 14 26 D1 57 16  // ....2...&.g.&.W.
    3D70: E2 F6 26 8B 47 14 26 8B 57 16 26 09 47 08 26 09  // ..&.G.&.W.&.G.&.
    3D80: 57 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94  // W.&.G,2.........
    3D90: 58 91 8D 66 FC 5A 59 5D C3 51 8B D8 E8 56 FC 26  // X..f.ZY].Q...V.&
    3DA0: 8A 4F 2B 32 ED 8B F1 8A 8C AC 91 E3 0A 26 D1 6F  // .O+2.........&.o
    3DB0: 06 26 D1 5F 04 E2 F6 8B C3 E8 AE FE 26 8A 4F 2C  // .&._........&.O,
    3DC0: 32 ED 8B F1 03 F1 8B C3 FF 94 58 91 59 C3 8B D8  // 2.........X.Y...
    3DD0: E8 22 FC 8B C3 E8 55 FC 26 8B 47 04 26 8B 77 06  // ."....U.&.G.&.w.
    3DE0: 26 09 47 08 26 09 77 0A 26 8A 47 2C 32 E4 8B F0  // &.G.&.w.&.G,2...
    3DF0: 03 F0 8B C3 FF 94 58 91 C3 53 56 8B D8 E8 F5 FB  // ......X..SV.....
    3E00: 8B C3 E8 28 FC 26 8B 47 04 26 8B 77 06 26 31 47  // ...(.&.G.&.w.&1G
    3E10: 08 26 31 77 0A 26 8A 47 2C 32 E4 8B F0 03 F0 8B  // .&1w.&.G,2......
    3E20: C3 FF 94 58 91 5E 5B C3 53 51 56 8B D8 E8 C5 FB  // ...X.^[.SQV.....
    3E30: 8B C3 E8 F8 FB 26 8B 4F 04 E3 0A 26 D1 67 08 26  // .....&.O...&.g.&
    3E40: D1 57 0A E2 F6 8B C3 E8 46 FC 26 8A 4F 2C 32 ED  // .W......F.&.O,2.
    3E50: 8B F1 03 F1 8B C3 FF 94 58 91 5E 59 5B C3 53 51  // ........X.^Y[.SQ
    3E60: 56 8B D8 E8 8F FB 8B C3 E8 C2 FB 26 8B 4F 04 E3  // V..........&.O..
    3E70: 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6 EB C8 52 8B D8  // .&.o.&._.....R..
    3E80: E8 72 FB 8B C3 E8 A5 FB 8B F3 26 8B 47 04 26 8B  // .r........&.G.&.
    3E90: 57 06 26 01 47 08 26 11 54 0A 8B C3 E8 F1 FB 26  // W.&.G.&.T......&
    3EA0: 8A 47 2C 32 E4 8B F0 03 F0 8B C3 FF 94 58 91 5A  // .G,2.........X.Z
    3EB0: C3 52 8B D8 E8 3E FB 8B C3 E8 71 FB 8B F3 26 8B  // .R...>....q...&.
    3EC0: 47 04 26 8B 57 06 26 29 47 08 26 19 54 0A EB CA  // G.&.W.&)G.&.T...
    3ED0: 51 52 8B F0 E8 1E FB 8B C6 E8 55 FC 26 8B 44 08  // QR........U.&.D.
    3EE0: 26 8B 54 0A 26 8B 5C 04 26 8B 4C 06 E8 DD F2 26  // &.T.&.\.&.L....&
    3EF0: 89 44 0C 26 89 54 0E 5A 59 C3 52 8B D0 E8 F5 FA  // .D.&.T.ZY.R.....
    3F00: 8B C2 E8 2C FC 8B C2 E8 5C 08 5A C3 51 52 57 8B  // ...,....\.Z.QRW.
    3F10: F0 E8 E1 FA 8B C6 E8 18 FC 26 8B 44 08 26 8B 54  // .........&.D.&.T
    3F20: 0A 26 8B 5C 04 26 8B 4C 06 E8 1C F2 26 89 44 0C  // .&.\.&.L....&.D.
    3F30: 26 89 54 0E 8C D7 8E C7 26 8B 44 08 26 8B 54 0A  // &.T.....&.D.&.T.
    3F40: 26 8B 5C 04 26 8B 4C 06 E8 FD F1 26 89 5C 10 26  // &.\.&.L....&.\.&
    3F50: 89 4C 12 E9 10 FD 52 8B D0 E8 99 FA 8B C2 E8 D0  // .L....R.........
    3F60: FB 8B C2 E8 D3 07 5A C3 51 52 8B D8 E8 86 FA 8B  // ......Z.QR......
    3F70: C3 E8 BD FB 8C D1 8E C1 26 8B 47 08 26 8B 57 0A  // ........&.G.&.W.
    3F80: 26 3B 57 06 75 0E 26 3B 47 04 75 08 26 C6 47 30  // &;W.u.&;G.u.&.G0
    3F90: 01 5A 59 C3 8B D0 26 8B 47 0A 26 3B 47 06 72 08  // .ZY...&.G.&;G.r.
    3FA0: 75 0A 26 3B 57 04 73 04 33 C0 EB 03 B8 02 00 26  // u.&;W.s.3......&
    3FB0: 88 47 30 5A 59 C3 51 52 57 8B D8 26 8A 47 2C 32  // .G0ZY.QRW..&.G,2
    3FC0: E4 8B F0 03 F0 8B C3 FF 94 64 91 26 89 47 08 26  // .........d.&.G.&
    3FD0: 89 57 0A 8C D0 8E C0 26 8A 47 2B 32 E4 8B F0 C1  // .W.....&.G+2....
    3FE0: E6 02 8B F8 8A 8D AC 91 32 ED 8B 84 8C 91 8B 94  // ........2.......
    3FF0: 8E 91 E3 06 D1 E0 D1 D2 E2 FA F7 D0 F7 D2 26 21  // ..............&!
    4000: 47 08 26 21 57 0A E9 4D FC 55 8B EC 51 52 57 83  // G.&!W..M.U..QRW.
    4010: EC 06 8B D8 26 8A 47 2B 32 E4 8B F0 C1 E6 02 8B  // ....&.G+2.......
    4020: F8 8A 8D AC 91 32 ED 8B 84 8C 91 89 46 F4 8B 84  // .....2......F...
    4030: 8E 91 89 46 F6 E3 08 D1 66 F4 D1 56 F6 E2 F8 8B  // ...F....f..V....
    4040: 7E F4 8B 46 F6 89 46 F8 26 8A 47 2C 32 E4 8B F0  // ~..F..F.&.G,2...
    4050: 03 F0 8B C3 FF 94 64 91 26 89 47 08 26 89 57 0A  // ......d.&.G.&.W.
    4060: 8B C3 E8 47 F9 26 89 47 04 26 89 57 06 8B C7 F7  // ...G.&.G.&.W....
    4070: D0 8B 56 F6 F7 D2 26 23 47 08 26 23 57 0A 26 89  // ..V...&#G.&#W.&.
    4080: 47 14 26 89 57 16 26 21 7F 08 8B 46 F6 26 21 47  // G.&.W.&!...F.&!G
    4090: 0A 8C D1 8D 77 35 8E C1 26 80 3C 19 73 12 26 8B  // ....w5..&.<.s.&.
    40A0: 4F 04 E3 0A 26 D1 67 08 26 D1 57 0A E2 F6 EB 10  // O...&.g.&.W.....
    40B0: 26 8B 4F 04 E3 0A 26 D1 6F 0A 26 D1 5F 08 E2 F6  // &.O...&.o.&._...
    40C0: 26 21 7F 08 8B 46 F8 26 21 47 0A 26 8B 57 14 26  // &!...F.&!G.&.W.&
    40D0: 8B 47 16 26 09 57 08 26 09 47 0A 26 8A 47 2C 32  // .G.&.W.&.G.&.G,2
    40E0: E4 8B F0 03 F0 8B C3 FF 94 58 91 8D 66 FA 5F E9  // .........X..f._.
    40F0: A3 FC 52 8B D8 E8 FD F8 8B C3 E8 34 FA 26 8B 47  // ..R........4.&.G
    4100: 08 26 8B 57 0A 26 85 57 06 75 06 26 85 47 04 74  // .&.W.&.W.u.&.G.t
    4110: 05 B8 03 00 EB 03 B8 01 00 26 88 47 30 5A C3 53  // .........&.G0Z.S
    4120: 51 52 56 8B D8 26 8A 4F 2D 32 ED 8B F1 03 F1 FF  // QRV..&.O-2......
    4130: 94 7C 91 26 89 47 04 26 89 57 06 26 8A 47 2B 32  // .|.&.G.&.W.&.G+2
    4140: E4 8B F0 8A 8C AC 91 E3 0A 26 D1 6F 06 26 D1 5F  // .........&.o.&._
    4150: 04 E2 F6 26 8A 47 2B 8B F0 C1 E6 02 8B 84 8C 91  // ...&.G+.........
    4160: 8B 94 8E 91 26 21 47 04 26 21 57 06 E9 BD F9 52  // ....&!G.&!W....R
    4170: 8B D8 E8 AA FF 26 8B 47 04 26 8B 57 06 26 89 47  // .....&.G.&.W.&.G
    4180: 18 26 89 57 1A 5A C3 51 52 8B D8 E8 91 FF 8C D0  // .&.W.Z.QR.......
    4190: 8E C0 26 8B 77 02 26 8B 74 02 81 3C 5A 5A 74 5B  // ..&.w.&.t..<ZZt[
    41A0: 26 8B 77 02 26 8B 74 02 80 3C 63 75 E1 26 8B 77  // &.w.&.t..<cu.&.w
    41B0: 02 26 FF 44 02 8B C3 E8 21 F8 26 89 47 08 26 89  // .&.D....!.&.G.&.
    41C0: 57 0A 8B C3 E8 FA F7 26 89 47 14 26 89 57 16 8C  // W......&.G.&.W..
    41D0: D1 8E C1 26 8B 57 04 26 8B 47 06 26 3B 47 0A 75  // ...&.W.&.G.&;G.u
    41E0: AD 26 3B 57 08 75 A7 26 8B 77 02 26 8B 04 26 03  // .&;W.u.&.w.&..&.
    41F0: 47 14 8B DE 26 89 47 02 5A 59 C3 26 8B 5F 02 26  // G...&.G.ZY.&._.&
    4200: 83 47 02 02 5A 59 C3 52 57 8B D8 8C D0 8E C0 26  // .G..ZY.RW......&
    4210: 8B 77 02 26 8B 74 02 8A 54 01 84 D2 75 08 26 C7  // .w.&.t..T...u.&.
    4220: 47 22 00 00 EB 2F 80 FA FF 75 14 26 8B 77 02 26  // G".../...u.&.w.&
    4230: 8B 3F 26 8B 34 26 2B 75 02 26 89 77 22 EB 16 26  // .?&.4&+u.&.w"..&
    4240: 8B 07 E8 E3 02 8B F0 8A C2 32 E4 03 C0 03 F0 8B  // .........2......
    4250: 04 26 89 47 22 26 8B 5F 02 26 83 47 02 02 5F 5A  // .&.G"&._.&.G.._Z
    4260: C3 8B D8 26 80 67 2F F9 26 8B 77 02 26 8B 74 02  // ...&.g/.&.w.&.t.
    4270: 8A 44 01 26 88 47 34 26 8B 5F 02 26 83 47 02 03  // .D.&.G4&._.&.G..
    4280: C3 8B D8 26 8B 77 02 26 8B 74 02 8B 74 01 26 89  // ...&.w.&.t..t.&.
    4290: 77 20 EB E3 53 8B D8 26 8A 47 2C 32 E4 24 03 26  // w ..S..&.G,2.$.&
    42A0: 80 67 2F F9 C1 E0 09 26 09 47 2E E9 4F F5 8B D8  // .g/....&.G..O...
    42B0: 26 8B 77 02 26 8B 74 02 8A 44 01 32 E4 26 89 47  // &.w.&.t..D.2.&.G
    42C0: 04 26 C7 47 06 00 00 8B C3 E8 40 04 26 8B 5F 02  // .&.G......@.&._.
    42D0: 26 83 47 02 02 C3 8B D8 26 8B 77 02 26 8B 74 02  // &.G.....&.w.&.t.
    42E0: 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00 00 8B  // .D.2.&.G.&.G....
    42F0: C3 E8 08 04 EB D6 53 56 8B D8 26 8B 77 02 26 8B  // ......SV..&.w.&.
    4300: 74 02 8A 44 01 32 E4 26 89 47 04 26 C7 47 06 00  // t..D.2.&.G.&.G..
    4310: 00 8B C3 E8 06 04 E9 86 F4 53 56 8B D8 26 8B 77  // .........SV..&.w
    4320: 02 26 8B 74 02 8A 44 01 32 E4 26 89 47 04 26 C7  // .&.t..D.2.&.G.&.
    4330: 47 06 00 00 8B C3 E8 F0 03 E9 63 F4 53 56 8B D8  // G.........c.SV..
    4340: 26 8B 77 02 8B DE 26 8B 5F 02 8B 5F 01 83 C3 03  // &.w...&._.._....
    4350: 26 01 5C 02 5E 5B C3 51 52 8B D8 26 8B 77 02 26  // &.\.^[.QR..&.w.&
    4360: 83 44 02 02 26 8B 07 E8 A0 01 8B C8 26 8B 77 28  // .D..&.......&.w(
    4370: 8A 44 01 32 E4 03 C0 8B F1 03 F0 83 3C 00 74 4F  // .D.2........<.tO
    4380: 26 8B 77 28 8A 54 01 32 F6 8B C3 E8 B0 01 26 88  // &.w(.T.2......&.
    4390: 47 31 26 8B 77 02 26 8B 34 8B 44 04 C1 E8 08 32  // G1&.w.&.4.D....2
    43A0: E4 24 7F C1 E8 02 32 E4 24 1F 26 80 67 2F 07 C1  // .$....2.$.&.g/..
    43B0: E0 0B 26 09 47 2E 26 8B 37 26 8B 47 2E C1 E8 0B  // ..&.G.&.7&.G....
    43C0: C1 E0 02 26 01 04 26 C6 47 32 01 26 89 4F 28 5A  // ...&..&.G2.&.O(Z
    43D0: 59 C3 53 8B D8 26 C6 47 32 82 5B C3 57 8B D8 8C  // Y.S..&.G2.[.W...
    43E0: D6 8E C6 26 80 7F 2C 05 74 0A 26 8A 47 2C 26 3A  // ...&..,.t.&.G,&:
    43F0: 47 30 75 1E 26 8B 77 02 26 8B 74 02 26 8B 7F 02  // G0u.&.w.&.t.&...
    4400: 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26 89 77 02  // &.=.t...&._.&.w.
    4410: 5F C3 26 8B 5F 02 26 83 47 02 03 5F C3 53 56 57  // _.&._.&.G.._.SVW
    4420: 8B D8 8C D6 8E C6 26 80 7F 30 01 74 0A 26 8A 47  // ......&..0.t.&.G
    4430: 30 26 3A 47 2C 75 20 26 8B 77 02 26 8B 74 02 26  // 0&:G,u &.w.&.t.&
    4440: 8B 7F 02 26 8B 3D 8B 74 01 03 F7 26 8B 5F 02 26  // ...&.=.t...&._.&
    4450: 89 77 02 5F 5E 5B C3 26 8B 5F 02 26 83 47 02 03  // .w._^[.&._.&.G..
    4460: EB F1 53 56 57 8B D8 8C D0 8E C0 26 80 7F 30 01  // ..SVW......&..0.
    4470: 74 E5 EB C3 55 8B EC 53 51 52 57 8B D8 26 8B 77  // t...U..SQRW..&.w
    4480: 02 26 8B 74 02 8A 04 26 C6 47 3D 00 8C D1 8E C1  // .&.t...&.G=.....
    4490: 26 80 7F 3D 08 73 20 26 8B 77 02 26 8A 57 3D 32  // &..=.s &.w.&.W=2
    44A0: F6 26 8B 7C 02 03 FA 8B F3 03 F2 8A 15 26 88 54  // .&.|.........&.T
    44B0: 35 26 FE 47 3D EB D5 26 8B 7F 02 8A D0 32 F6 8B  // 5&.G=..&.....2..
    44C0: F2 C1 E6 02 8A 94 D9 91 26 01 55 02 26 8B 7F 28  // ........&.U.&..(
    44D0: 8A 55 01 80 E2 07 26 88 57 2D 26 8B 7F 28 8A 55  // .U....&.W-&..(.U
    44E0: 01 C0 EA 03 80 E2 07 26 88 57 2B 26 8B 7F 28 8A  // .......&.W+&..(.
    44F0: 55 01 C0 EA 06 26 88 57 2A 8A 94 D8 91 26 88 57  // U....&.W*....&.W
    4500: 2C 8D 66 F8 5F 5A 59 5B 5D C3 53 56 8B D8 26 8B  // ,.f._ZY[].SV..&.
    4510: 77 02 8B C6 8B 74 48 03 F0 8B D8 8B 74 1E 8B C6  // w....tH.....t...
    4520: 03 C3 83 C0 04 5E 5B C3 53 56 8B D8 26 8B 77 02  // .....^[.SV..&.w.
    4530: 8B C6 8B 74 48 03 F0 8B D8 8B 74 20 EB E0 8A C2  // ...tH.....t ....
    4540: C3 16 07 55 8B EC 53 51 56 57 83 EC 40 8B F8 89  // ...U..SQVW..@...
    4550: 46 B8 E8 D3 FF 8B D8 89 46 E0 26 8B 45 02 8B 5F  // F.......F.&.E.._
    4560: 2E 03 D8 89 5E DE 83 46 DE 04 8B C7 E8 9B FF 89  // ....^..F........
    4570: 46 E0 32 F6 8D 46 B8 E8 C4 FF 8A D0 32 F6 03 D2  // F.2..F......2...
    4580: 8B 5E E0 03 DA 83 3F 00 0F 84 65 01 88 46 E9 80  // .^....?...e..F..
    4590: 66 E7 F9 C6 46 EC 00 C7 46 D8 00 00 66 C7 46 D0  // f...F...F...f.F.
    45A0: 00 00 00 00 C7 46 F6 00 00 C6 46 EA 01 EB 06 3C  // .....F....F....<
    45B0: 01 0F 85 8C 00 8A 56 E9 8A C2 32 E4 03 C0 8B 5E  // ......V...2....^
    45C0: E0 03 D8 83 3F 00 74 75 26 8B 45 02 8B 1F 03 D8  // ....?.tu&.E.....
    45D0: 8B 47 04 32 E4 8B C8 83 C1 09 32 ED 80 E1 FE 83  // .G.2......2.....
    45E0: F9 00 74 07 D1 E9 33 C0 50 E2 FD 8B C4 8B D8 89  // ..t...3.P.......
    45F0: 46 BA 85 C0 74 41 83 C0 08 26 89 47 04 8A C2 32  // F...tA...&.G...2
    4600: E4 03 C0 8B 5E E0 03 D8 26 8B 45 02 03 07 8B 5E  // ....^...&.E....^
    4610: BA 26 89 07 8B 5E BA 26 8B 07 83 C0 06 26 89 47  // .&...^.&.....&.G
    4620: 02 8B 5E BA 8B 76 F6 26 89 77 06 8B 5E BA 89 5E  // ..^..v.&.w..^..^
    4630: F6 C6 46 EA 00 EB 0A C6 46 EA 87 EB 04 C6 46 EA  // ..F.....F.....F.
    4640: 83 8A 46 EA 32 E4 83 F8 10 0F 8F 99 00 88 66 EA  // ..F.2.........f.
    4650: 8A 46 EA 32 E4 85 C0 0F 8F 83 00 8C D0 8B 5E BA  // .F.2..........^.
    4660: 8E C0 26 8B 5F 02 89 5E E0 8B 5E BA 26 8B 5F 02  // ..&._..^..^.&._.
    4670: 80 3F 5B 75 4A C6 46 EA 10 8B 5E BA 26 8B 5F 06  // .?[uJ.F...^.&._.
    4680: 89 5E F6 8B 5E BA 26 8B 1F 8B 47 04 32 E4 8B C8  // .^..^.&...G.2...
    4690: 83 C1 09 32 ED 80 E1 FE 03 E1 8B 5E F6 89 5E BA  // ...2.......^..^.
    46A0: 85 DB 74 AC 26 8B 1F 8B 47 04 C1 E8 08 32 E4 24  // ..t.&...G....2.$
    46B0: 7F C1 E8 02 C1 E0 02 8B 5E B8 26 29 07 EB 91 8D  // ........^.&)....
    46C0: 46 B8 E8 AF FD 8A D0 8D 46 B8 E8 2E 00 8A DA 32  // F.......F......2
    46D0: FF C1 E3 02 8D 46 B8 FF 97 D6 91 E9 72 FF 83 7E  // .....F......r..~
    46E0: F6 00 0F 85 C9 FE 80 7E EA 10 74 05 8A 46 EA EB  // .......~..t..F..
    46F0: 02 32 C0 8D 66 F8 5F 5E E9 0B FE C3 53 51 8B D8  // .2..f._^....SQ..
    4700: 26 8A 4F 04 32 ED E8 C9 E7 59 5B C3 53 51 8B D8  // &.O.2....Y[.SQ..
    4710: 26 8A 4F 04 32 ED E8 C4 E7 59 5B C3 53 8B D8 26  // &.O.2....Y[.S..&
    4720: 8A 47 04 32 E4 E6 80 5B C3 53 51 8B D8 26 8A 4F  // .G.2...[.SQ..&.O
    4730: 04 32 ED E8 00 D5 59 5B C3 53 8B D8 66 50 66 52  // .2....Y[.S..fPfR
    4740: 66 51 66 26 8B 47 08 66 26 8B 57 10 66 26 8B 4F  // fQf&.G.f&.W.f&.O
    4750: 04 66 F7 F1 66 26 89 47 0C 66 26 89 57 10 66 59  // .f..f&.G.f&.W.fY
    4760: 66 5A 66 58 5B C3 53 8B D8 66 50 66 52 66 51 66  // fZfX[.S..fPfRfQf
    4770: 26 8B 47 08 66 26 8B 4F 04 66 F7 E1 66 26 89 47  // &.G.f&.O.f..f&.G
    4780: 0C 66 26 89 57 10 66 59 66 5A 66 58 5B C3 53 57  // .f&.W.fYfZfX[.SW
    4790: 8B D8 26 8B 5F 14 E8 38 EB 8B D0 66 C1 E8 10 92  // ..&._..8...f....
    47A0: 5F 5B C3 53 57 8B D8 26 8B 47 14 26 8B 57 16 8B  // _[.SW..&.G.&.W..
    47B0: D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 E8 36 EB EB  // ...f.........6..
    47C0: D8 53 52 57 8B D8 26 8B 47 08 26 8B 57 0A 92 66  // .SRW..&.G.&.W..f
    47D0: C1 E0 10 8B C2 26 8B 5F 14 E8 5A EA 5F 5A 5B C3  // .....&._..Z._Z[.
    47E0: 53 52 8B D8 26 8B 47 1C 26 8B 57 1E 92 66 C1 E0  // SR..&.G.&.W..f..
    47F0: 10 8B C2 26 8B 5F 26 8B 5F 01 E8 39 EA 5A 5B C3  // ...&._&._..9.Z[.
    4800: 53 52 56 8B F0 26 8B 5C 26 8B 5F 01 E8 C2 EA 8B  // SRV..&.\&._.....
    4810: D0 66 C1 E8 10 92 26 89 44 1C 26 89 54 1E 5E 5A  // .f....&.D.&.T.^Z
    4820: 5B C3 53 51 52 57 8B D8 26 8B 47 08 26 8B 57 0A  // [.SQRW..&.G.&.W.
    4830: 92 66 C1 E0 10 8B C2 8B C8 26 8B 47 14 26 8B 57  // .f.......&.G.&.W
    4840: 16 8B D8 87 D3 66 C1 E3 10 8B DA C1 E3 02 8B C1  // .....f..........
    4850: E8 16 EA 5F 5A 59 5B C3 8B D0 66 C1 E8 10 92 C3  // ..._ZY[...f.....
    4860: 1E 06 66 50 66 51 66 52 66 53 66 55 66 56 66 57  // ..fPfQfRfSfUfVfW
    4870: 0E 1F 0A C0 75 06 E8 07 01 E9 A8 00 3C 01 75 06  // ....u.......<.u.
    4880: E8 37 01 E9 9E 00 3C 02 75 06 E8 5F 02 E9 94 00  // .7....<.u.._....
    4890: 3C 03 75 0B E8 91 03 8B EC 89 5E 0C E9 85 00 3C  // <.u.......^....<
    48A0: 04 75 02 EB 7D 3C 05 75 0A E8 0E 04 8B EC 89 56  // .u..}<.u.......V
    48B0: 10 EB 71 3C 06 75 10 E8 8C 03 8B EC 89 5E 0C 89  // ..q<.u.......^..
    48C0: 4E 14 89 56 10 EB 5D 3C 07 75 02 EB 55 3C 08 75  // N..V..]<.u..U<.u
    48D0: 0A E8 D0 03 8B EC 88 7E 0D EB 49 3C 09 75 02 EB  // .......~..I<.u..
    48E0: 41 3C 0A 75 10 E8 65 04 8B EC 89 4E 14 89 7E 00  // A<.u..e....N..~.
    48F0: 8C 46 1C EB 2F 3C 0B 75 02 EB 27 3C 10 75 0A E8  // .F../<.u..'<.u..
    4900: 5A 04 8B EC 89 5E 0C EB 1B 3C 11 75 02 EB 13 3C  // Z....^...<.u...<
    4910: 15 75 0F E8 80 04 8B EC 89 5E 0C EB 07 B8 4F 01  // .u.......^....O.
    4920: EB 02 32 C0 8B EC 89 46 18 66 5F 66 5E 66 5D 66  // ..2....F.f_f^f]f
    4930: 5B 66 5A 66 59 66 58 07 1F C3 50 1E 2E 8E 1E 12  // [fZfYfX...P.....
    4940: 03 8C D8 A3 A2 58 A3 B2 58 A3 C4 58 2E 8E 1E 0A  // .....X..X..X....
    4950: 03 A3 AA 04 1F 58 CB 00 30 31 2E 30 30 00 56 45  // .....X..01.00.VE
    4960: 53 41 00 03 C8 01 00 00 01 00 00 00 00 00 00 00  // SA..............
    4970: 00 03 0A 11 EB 00 00 00 7F 00 00 00 F0 48 00 00  // .............H..
    4980: B9 3F 00 8B DF 83 C7 04 FC 66 33 C0 F3 66 AB 8B  // .?.......f3..f..
    4990: FB BE F6 48 B9 22 00 F3 A4 06 1F 8C 4F 08 8C 47  // ...H."......O..G
    49A0: 10 8C 4F 18 8C 4F 1C 8C 4F 20 83 C7 22 89 7F 0E  // ..O..O..O .."...
    49B0: 0E 1F E8 5B D1 B0 4F 32 E4 C3 56 51 57 B9 10 00  // ...[..O2..VQW...
    49C0: 66 33 C0 F3 66 AB 5F 59 8C DB 06 1F C7 05 BB 00  // f3..f._Y........
    49D0: C6 45 02 07 C7 45 04 40 00 C7 45 06 40 00 C6 45  // .E...E.@..E.@..E
    49E0: 1B 06 C6 45 18 01 C6 45 1A 01 C6 45 1E 01 66 C7  // ...E...E...E..f.
    49F0: 45 3E 00 84 D7 17 8E DB E8 22 CA 66 0B C0 0F 84  // E>.......".f....
    4A00: E1 00 06 1F 66 89 45 28 8C C8 66 C1 E0 10 B8 AF  // ....f.E(..f.....
    4A10: 4C 66 89 45 0C 81 F9 FF 81 0F 84 C2 00 80 E5 03  // Lf.E............
    4A20: B2 01 53 8E DB BE 80 1C E8 07 CF 5B 06 1F 0F 84  // ..S........[....
    4A30: B1 00 53 E8 83 D1 66 89 45 12 C7 45 16 08 10 8D  // ..S...f.E..E....
    4A40: 5C 0C E8 BA E8 66 89 45 1F 66 89 45 36 8D 5C 10  // \....f.E.f.E6.\.
    4A50: E8 AC E8 66 89 45 23 66 89 45 3A 8D 5C 08 E8 9E  // ...f.E#f.E:.\...
    4A60: E8 0A C0 75 03 5B EB 7B E8 4E D1 66 C1 E8 10 3D  // ...u.[.{.N.f...=
    4A70: 58 02 74 0D 3D 5E 01 74 08 77 0A C6 45 17 08 EB  // X.t.=^.t.w..E...
    4A80: 04 C6 45 17 0E 2E A1 0C 03 89 45 08 8D 5C 04 E8  // ..E.......E..\..
    4A90: 6D E8 66 8B C8 66 C1 E9 10 D3 E0 89 45 10 89 45  // m.f..f......E..E
    4AA0: 32 B0 08 D2 E0 88 45 19 8D 5C 14 E8 51 E8 5B 3D  // 2.....E..\..Q.[=
    4AB0: 00 03 77 2F 53 8B D8 B8 00 03 33 D2 F7 F3 5B FE  // ..w/S.....3...[.
    4AC0: C8 88 45 1D 88 45 35 88 45 34 8E DB 57 53 BE 80  // ..E..E5.E4..WS..
    4AD0: 1C E8 B2 C9 5B 5F 0B C9 75 05 06 1F 83 25 FE 32  // ....[_..u....%.2
    4AE0: E4 EB 02 B4 03 B0 4F 8E DB 5E C3 00 81 FB FF 81  // ......O..^......
    4AF0: 74 68 0A FF 75 04 8B C3 EB 21 F6 C7 08 75 61 8B  // th..u....!...ua.
    4B00: CB B2 01 BE 20 1C E8 29 CE 74 55 E8 8A D0 0A C0  // .... ..).tU.....
    4B10: 75 0E 66 C1 E8 10 80 E7 80 0A C7 E8 D5 02 EB 3A  // u.f............:
    4B20: E8 F9 CB 74 06 E8 6A CA E8 B2 C3 BE 20 1C E8 29  // ...t..j..... ..)
    4B30: C9 74 2D E8 A5 00 E8 2C 00 66 BB 20 1C 00 1C E8  // .t-....,.f. ....
    4B40: 4D D0 BE 00 1C E8 50 D0 66 C1 E8 10 8B D8 32 C0  // M.....P.f.....2.
    4B50: F6 C7 80 74 02 B0 40 E8 59 C9 B0 4F 32 E4 EB 04  // ...t..@.Y..O2...
    4B60: B0 4F B4 03 C3 56 06 33 C0 8E C0 BE 20 1C E8 48  // .O...V.3.... ..H
    4B70: D0 8B C8 66 C1 E8 10 8B D0 C1 E9 03 26 89 0E 4A  // ...f........&..J
    4B80: 04 C1 EA 04 FE CA 26 88 16 84 04 26 C6 06 51 04  // ......&....&..Q.
    4B90: 00 26 C6 06 50 04 00 26 C6 06 49 04 62 26 C7 06  // .&..P..&..I.b&..
    4BA0: 4C 04 00 A0 26 C6 06 85 04 10 26 C7 06 0C 01 7B  // L...&.....&....{
    4BB0: 62 8C C8 26 A3 0E 01 07 5E C3 01 0F 00 0A 00 00  // b..&....^.......
    4BC0: 00 00 00 40 05 0F FF 00 01 02 03 04 05 06 07 08  // ...@............
    4BD0: 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 FC BA C4 03 B8  // ................
    4BE0: 00 01 EF B9 04 00 B4 01 BE 52 4B AC 86 E0 EF 8A  // .........RK.....
    4BF0: E0 FE C4 E2 F6 B8 00 03 EF B9 09 00 BA CE 03 32  // ...............2
    4C00: E4 BE 56 4B 8A C4 EE AC 42 EE 4A FE C4 E2 F5 BA  // ..VK....B.J.....
    4C10: DA 03 EC B9 14 00 BA C0 03 32 E4 BE 5F 4B 8A C4  // .........2.._K..
    4C20: EE AC EE FE C4 E2 F7 C3 BE 00 1C E8 6A CF 66 C1  // ............j.f.
    4C30: E8 10 8B D8 E8 3A CF 75 05 E8 26 CF 75 04 B8 4F  // .....:.u..&.u..O
    4C40: 00 C3 B8 4F 03 C3 E8 28 CF 74 53 BE 00 1C 80 FB  // ...O...(.tS.....
    4C50: 00 74 18 80 FB 01 75 05 E8 66 CF EB 1D 80 FB 02  // .t....u..f......
    4C60: 75 10 8B C1 E8 19 CF D3 E8 8B C8 E8 09 CA 74 2E  // u.............t.
    4C70: EB 08 80 FB 03 75 24 E8 BD CE E8 03 CF 8B D8 D3  // .....u$.........
    4C80: E3 50 33 C0 BA 00 03 3B DA 77 05 BA FF FF EB 04  // .P3....;.w......
    4C90: F7 F3 8B D0 58 8B C8 B8 4F 00 C3 32 C0 C3 B0 4F  // ....X...O..2...O
    4CA0: B4 03 C3 00 0A DB 75 07 8A EF E8 D7 CA EB 05 E8  // ......u.........
    4CB0: BC CA 8A F8 B0 4F 32 E4 C3 00 E8 B4 CE 74 2C BE  // .....O2......t,.
    4CC0: 00 1C E8 D3 CE 66 C1 E8 10 F6 C4 40 75 1D 0A FF  // .....f.....@u...
    4CD0: 75 05 E8 1E 00 EB 0F 80 FF 01 75 14 BB 13 00 E8  // u.........u.....
    4CE0: EB E5 D1 E8 8B D0 B0 4F 32 E4 C3 B0 4F B4 03 C3  // .......O2...O...
    4CF0: 32 C0 C3 52 53 66 50 81 E2 FF 02 D1 E2 8B C2 40  // 2..RSfP........@
    4D00: 66 C1 E0 10 8B C2 BB 13 00 E8 1C E5 BB 12 00 E8  // f...............
    4D10: 16 E5 66 58 5B 5A C3 9C 1E 06 66 50 66 51 66 52  // ..fX[Z....fPfQfR
    4D20: 66 53 66 55 66 56 66 57 0E 1F E8 34 E6 E8 8A FF  // fSfUfVfW...4....
    4D30: E8 53 E6 8B EC 89 56 10 89 46 18 66 5F 66 5E 66  // .S....V..F.f_f^f
    4D40: 5D 66 5B 66 5A 66 59 66 58 07 1F 9D CB 0E 07 BF  // ]f[fZfYfX.......
    4D50: 7E 90 2E 8B 0E 7C 90 B8 4F 00 C3 00 0A DB 75 06  // ~....|..O.....u.
    4D60: B7 04 B3 10 EB 26 80 FB 01 75 14 E8 AE C9 75 21  // .....&...u....u!
    4D70: 53 B1 01 0A FF 74 02 B1 00 E8 C3 C8 5B EB 0D 80  // S....t......[...
    4D80: FB 02 75 0D E8 DB C9 8A F8 C0 E7 02 B0 4F 32 E4  // ..u..........O2.
    4D90: C3 B8 4F 03 C3 00 80 E3 01 0A DB 75 05 BB 02 01  // ..O........u....
    4DA0: EB 0E E8 77 C9 75 0E 33 C0 53 E8 5D B8 5B 74 05  // ...w.u.3.S.].[t.
    4DB0: B0 4F 32 E4 C3 B0 4F B4 03 C3 80 FC 1D 72 03 CD  // .O2...O......r..
    4DC0: 42 C3 1E 06 66 50 66 51 66 52 66 53 66 55 66 56  // B...fPfQfRfSfUfV
    4DD0: 66 57 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF 94  // fW..P.......X...
    4DE0: 9C 4D 66 5F 66 5E 66 5D 66 5B 66 5A 66 59 66 58  // .Mf_f^f]f[fZfYfX
    4DF0: 07 1F C3 0E 1F 50 0F B6 C4 D1 E0 8B F0 58 2E FF  // .....P.......X..
    4E00: 94 9C 4D C3 D6 4D E6 86 FF 86 1C 87 C9 4E 1F 7E  // ..M..M.......N.~
    4E10: 51 7E C4 7E 47 7F D5 80 D9 80 E2 83 B3 84 36 85  // Q~.~G.........6.
    4E20: 9D 85 38 87 9A 87 43 8A E2 50 8A 8E 8A 4D 8A 4D  // ..8...C..P...M.M
    4E30: 8A 4D 8A 4D 8A 4D 8A 4D 5A 8F 5D 73 B1 74 2E 8E  // .M.M.M.MZ.]s.t..
    4E40: 1E 0A 03 80 26 87 04 F3 50 8A E0 80 E4 7F E8 C4  // ....&...P.......
    4E50: 01 3B D3 75 02 58 C3 BA CC 03 EC B2 B4 B1 30 26  // .;.u.X........0&
    4E60: F6 47 09 01 74 0C B2 D4 B1 20 A8 01 75 49 B5 09  // .G..t.... ..uI..
    4E70: EB 06 A8 01 74 41 B5 0B 53 E8 6A 41 0A FF 5B 75  // ....tA..S.jA..[u
    4E80: 0B 80 26 88 04 F0 08 2E 88 04 EB 2B 58 80 0E 87  // ..&........+X...
    4E90: 04 08 80 26 10 04 CF 08 0E 10 04 89 16 63 04 C7  // ...&.........c..
    4EA0: 06 85 04 08 00 C6 06 84 04 18 C7 06 0C 01 68 5A  // ..............hZ
    4EB0: 8C 0E 0E 01 CD 42 C3 80 26 10 04 CF 08 0E 10 04  // .....B..&.......
    4EC0: 58 53 50 0E 1F 33 C9 8A C8 E8 50 C8 74 06 E8 C1  // XSP..3....P.t...
    4ED0: C6 E8 09 C0 B2 08 BE 40 1C E8 56 CA BE 40 1C E8  // .......@..V..@..
    4EE0: 78 C5 58 5B 0F 84 6E FF 2E 8E 1E 0A 03 0E 07 E8  // x.X[..n.........
    4EF0: 13 29 0E 1F 53 66 BB 40 1C 00 1C E8 91 CC BE 00  // .)..Sf.@........
    4F00: 1C B0 20 E8 AD C5 5B 2E 8E 1E 0A 03 0E 07 E8 1C  // .. ...[.........
    4F10: 2E E8 24 00 E8 28 3D E8 D1 01 E8 8E 01 E8 AE 3E  // ..$..(=........>
    4F20: 0E 1F BE 00 1C B0 10 E8 89 C5 E8 F7 2D E8 EF 2D  // ............-..-
    4F30: C3 8B EC C6 46 1B 00 C3 E8 2F 00 E8 0A 00 E8 BD  // ....F..../......
    4F40: 00 E8 52 00 E8 5C 0A C3 53 83 C3 0A 8B 16 63 04  // ..R..\..S.....c.
    4F50: B9 19 00 B8 11 30 EF 32 C0 26 8A 27 EF 43 FE C0  // .....0.2.&.'.C..
    4F60: E2 F7 5B 80 C2 06 32 C0 EE C3 53 BA C4 03 83 C3  // ..[...2...S.....
    4F70: 05 B9 04 00 B0 01 26 8A 27 3C 01 75 03 80 CC 20  // ......&.'<.u... 
    4F80: EF 43 FE C0 E2 F0 5B 26 8A 47 09 BA C2 03 EE B2  // .C....[&.G......
    4F90: C4 B8 00 03 EF C3 8B F3 83 C6 23 BA DA 03 26 F6  // ..........#...&.
    4FA0: 47 09 01 75 02 B2 BA F6 06 89 04 08 74 1D 83 C6  // G..u........t...
    4FB0: 10 EC B9 04 00 B4 10 B2 C0 80 FC 11 74 07 8A C4  // ............t...
    4FC0: EE 26 8A 04 EE 46 FE C4 E2 EF C3 53 EC 8B DE B9  // .&...F.....S....
    4FD0: 14 00 32 E4 B2 C0 8A C4 EE FE C4 26 8A 07 EE 43  // ..2........&...C
    4FE0: E2 F4 8A C4 EE 32 C0 EE 1E 06 E8 49 2D 0B ED 74  // .....2.....I-..t
    4FF0: 09 1F 1E B9 10 00 F3 A4 46 A4 07 1F 5B C3 53 83  // ........F...[.S.
    5000: C3 37 B9 09 00 32 C0 BA CE 03 26 8A 27 EF 43 FE  // .7...2....&.'.C.
    5010: C0 E2 F7 5B C3 BB A0 52 0E 07 8B D3 0A E4 7D 01  // ...[...R......}.
    5020: C3 E8 01 00 C3 33 F6 80 FC 03 7F 3C 4A F6 06 89  // .....3.....<J...
    5030: 04 10 75 20 A0 88 04 24 0F 3C 02 7E 24 3C 08 74  // ..u ...$.<.~$<.t
    5040: 20 3C 06 74 1C 3C 07 74 18 B0 40 F6 E4 03 D8 81  //  <.t.<.t..@.....
    5050: C3 00 04 C3 B0 40 D0 EC F6 E4 03 D8 81 C3 80 04  // .....@..........
    5060: C3 B0 40 F6 E4 03 D8 C3 80 FC 07 75 11 F6 06 89  // ..@........u....
    5070: 04 10 75 05 81 C3 00 01 C3 81 C3 00 05 C3 BF 22  // ..u............"
    5080: 50 BE 43 50 33 C9 E8 4E 00 C3 04 80 00 05 80 00  // P.CP3..N........
    5090: 06 C0 00 0D 80 02 0E C0 02 0F 80 03 10 C0 03 11  // ................
    50A0: 40 05 12 80 05 13 C0 05 62 40 01 53 8A 1E 49 04  // @.......b@.S..I.
    50B0: 80 FB 07 7F 10 32 FF D1 E3 2E 8B 87 5F 50 A2 65  // .....2......_P.e
    50C0: 04 88 26 66 04 5B C3 2C 30 28 30 2D 30 29 30 2A  // ..&f.[.,0(0-0)0*
    50D0: 30 2E 30 1E 3F 29 30 2E 38 25 75 07 2E 03 5D 01  // 0.0.?)0.8%u...].
    50E0: 33 F6 C3 83 C7 03 3B FE 75 ED C3 1E 06 2E 8E 1E  // 3.....;.u.......
    50F0: 0A 03 F6 06 87 04 80 75 49 83 3E 4C 04 00 74 42  // .......uI.>L..tB
    5100: A0 49 04 B9 00 20 2E 8B 3E 10 03 26 F6 47 33 01  // .I... ..>..&.G3.
    5110: 75 0E 26 F6 47 09 01 75 1B 2E 8B 3E 0E 03 EB 14  // u.&.G..u...>....
    5120: 3C 06 7E 0B 2E 8B 3E 0C 03 26 8A 67 37 B5 40 66  // <.~...>..&.g7.@f
    5130: 33 C0 EB 06 66 B8 20 07 20 07 8E C7 66 33 FF F3  // 3...f. . ...f3..
    5140: 66 AB 80 26 87 04 7F 07 1F C3 2E 8E 1E 0A 03 80  // f..&............
    5150: FB 10 75 03 E9 7A 01 80 FB 20 75 03 E9 9B 01 80  // ..u..z... u.....
    5160: FB 32 75 1F BA CC 03 0A C0 75 09 EC 0C 02 B2 C2  // .2u......u......
    5170: EE E9 F3 00 FE C8 0F 85 F3 00 EC 24 FD B2 C2 EE  // ...........$....
    5180: E9 E4 00 80 FB 35 75 28 3C 80 75 08 80 0E 89 04  // .....5u(<.u.....
    5190: 40 E9 D3 00 F6 06 89 04 40 0F 84 D0 00 0A C0 0F  // @.......@.......
    51A0: 84 CA 00 FE C8 75 06 E8 98 07 E9 BA 00 E9 BD 00  // .....u..........
    51B0: 80 FB 30 74 03 E9 96 00 50 E8 2A 3E 8A EF BA CC  // ..0t....P.*>....
    51C0: 03 EC 8A C8 58 0A C0 75 30 B7 08 F6 C1 01 75 12  // ....X..u0.....u.
    51D0: 0A ED 75 0B A0 10 04 24 30 3C 30 75 10 B7 02 E9  // ..u....$0<0u....
    51E0: 8B 00 A0 10 04 24 30 3C 30 75 02 B7 02 80 26 89  // .....$0<0u....&.
    51F0: 04 6F 80 0E 89 04 80 EB 36 3C 01 75 41 80 26 89  // .o......6<.uA.&.
    5200: 04 6F B7 09 F6 C1 01 75 15 B7 0B A0 10 04 24 30  // .o.....u......$0
    5210: 3C 30 74 1B B7 09 0A ED 74 15 B7 05 EB 11 A0 10  // <0t.....t.......
    5220: 04 24 30 3C 30 75 08 B7 0B 0A ED 74 02 B7 03 8A  // .$0<0u.....t....
    5230: 1E 88 04 80 E3 F0 0A DF 88 1E 88 04 EB 29 3C 02  // .............)<.
    5240: 75 2B 80 26 89 04 6F 80 0E 89 04 10 EB B4 80 FB  // u+.&..o.........
    5250: 31 75 1B 0A C0 74 0B 3C 01 75 0C 80 0E 89 04 08  // 1u...t.<.u......
    5260: EB 05 80 26 89 04 F7 8B EC C6 46 1A 12 C3 80 FB  // ...&......F.....
    5270: 33 75 16 3C 00 74 0B 3C 01 75 EC 80 26 89 04 FD  // 3u.<.t.<.u..&...
    5280: EB E5 80 0E 89 04 02 EB DE 80 FB 34 75 17 3C 00  // ...........4u.<.
    5290: 75 07 80 26 87 04 FE EB CE 3C 01 75 07 80 0E 87  // u..&.....<.u....
    52A0: 04 01 EB C3 C3 80 FB 36 75 26 BB 20 FF 3C 01 74  // .......6u&. .<.t
    52B0: 09 BB 00 DF 3C 00 74 02 EB AD E8 02 00 EB A8 9C  // ....<.t.........
    52C0: FA BA C4 03 B0 01 EE 42 EC 22 C7 0A C3 EE 9D C3  // .......B."......
    52D0: C3 B3 03 B7 00 BA CC 03 EC A8 01 75 02 B7 01 A0  // ...........u....
    52E0: 88 04 8A E0 B1 04 D2 EC 25 0F 0F 8B C8 8B EC 89  // ........%.......
    52F0: 5E 0E 89 4E 16 C6 46 1A 12 C3 9C FA C7 06 14 00  // ^..N..F.........
    5300: 4A 78 8C 0E 16 00 9D C3 28 18 08 00 08 09 03 00  // Jx......(.......
    5310: 02 63 2D 27 28 90 2B A0 BF 1F 00 C7 06 07 00 00  // .c-'(.+.........
    5320: 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04  // ................
    5330: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    5340: 00 00 00 00 10 0E 00 FF 50 18 08 00 10 01 03 00  // ........P.......
    5350: 02 63 5F 4F 50 82 55 81 BF 1F 00 C7 06 07 00 00  // .c_OP.U.........
    5360: 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04  // .....(..........
    5370: 05 06 07 10 11 12 13 14 15 16 17 08 00 0F 00 00  // ................
    5380: 00 00 00 00 10 0E 00 FF 28 18 08 00 40 09 03 00  // ........(...@...
    5390: 02 63 2D 27 28 90 2B 80 BF 1F 00 C1 00 00 00 00  // .c-'(.+.........
    53A0: 00 00 9C 8E 8F 14 00 96 B9 A2 FF 00 13 15 17 02  // ................
    53B0: 04 06 07 10 11 12 13 14 15 16 17 01 00 03 00 00  // ................
    53C0: 00 00 00 00 30 0F 00 FF 50 18 08 00 40 01 01 00  // ....0...P...@...
    53D0: 06 63 5F 4F 50 82 54 80 BF 1F 00 C1 00 00 00 00  // .c_OP.T.........
    53E0: 00 00 9C 8E 8F 28 00 96 B9 C2 FF 00 17 17 17 17  // .....(..........
    53F0: 17 17 17 17 17 17 17 17 17 17 17 01 00 01 00 00  // ................
    5400: 00 00 00 00 00 0D 00 FF 50 18 0E 00 10 00 03 00  // ........P.......
    5410: 03 A6 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00  // .._OP.U....M....
    5420: 00 00 83 85 5D 28 0D 63 BA A3 FF 00 08 08 08 08  // ....](.c........
    5430: 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00  // ................
    5440: 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    5450: 0A E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    5460: 00 00 EA 8C DF 50 00 E7 04 E3 FF 00 01 02 03 04  // .....P..........
    5470: 05 06 07 08 09 0A 0B 0C 0D 0E 0F 01 00 0F 00 10  // ................
    5480: 00 00 00 00 40 05 0F FF 00 05 11 1C 08 0B 14 28  // ....@..........(
    5490: 0E 18 2D 32 20 24 38 3F 00 05 08 0B 0E 11 14 18  // ..-2 $8?........
    54A0: 1C 20 24 28 2D 32 38 3F 07 0C 10 15 1A 18 16 15  // . $(-28?........
    54B0: 13 1C 25 2F 38 33 2E 2A 25 27 29 2A 2C 23 19 10  // ..%/83.*%')*,#..
    54C0: 23 25 27 2A 2C 2B 2A 29 29 2D 32 37 3B 39 37 34  // #%'*,+*))-27;974
    54D0: 32 33 34 35 35 31 2C 27 2F 30 32 33 34 34 33 33  // 234551,'/0234433
    54E0: 32 35 38 3A 3D 3C 3A 39 38 38 39 39 3A 37 34 31  // 258:=<:98899:741
    54F0: 03 05 07 09 0B 0B 0A 09 08 0D 11 15 19 17 15 13  // ................
    5500: 11 11 12 13 14 0F 0B 07 10 10 12 13 14 13 13 13  // ................
    5510: 12 14 16 18 1A 19 18 17 16 17 17 17 18 15 14 11  // ................
    5520: 15 15 16 17 17 17 17 17 16 18 19 1A 1B 1B 1A 19  // ................
    5530: 19 19 19 19 1A 18 17 16 02 03 04 05 07 06 06 05  // ................
    5540: 05 07 0A 0C 0E 0D 0C 0B 09 0A 0A 0B 0B 09 06 04  // ................
    5550: 09 09 0A 0B 0B 0B 0B 0B 0A 0C 0D 0E 0F 0F 0E 0D  // ................
    5560: 0D 0D 0D 0D 0E 0C 0B 0A 0C 0C 0C 0D 0D 0D 0D 0D  // ................
    5570: 0C 0D 0E 0F 0F 0F 0F 0E 0E 0E 0E 0E 0E 0E 0D 0C  // ................
    5580: 00 00 00 00 00 00 00 00 28 18 08 00 20 09 0F 00  // ........(... ...
    5590: 06 63 2D 27 28 90 2B 80 BF 1F 00 C0 00 00 00 00  // .c-'(.+.........
    55A0: 00 00 9C 8E 8F 14 00 96 B9 E3 FF 00 01 02 03 04  // ................
    55B0: 05 06 07 10 11 12 13 14 15 16 17 01 00 0F 00 00  // ................
    55C0: 00 00 00 00 00 05 0F FF 50 18 08 00 40 01 0F 00  // ........P...@...
    55D0: 06 63 5F 4F 50 82 54 80 BF 1F 00 C0 00 00 00 00  // .c_OP.T.........
    55E0: 00 00 9C 8E 8F 28 00 96 B9 E3 FF 00 01 02 03 04  // .....(..........
    55F0: 05 06 07 10 11 12 13 14 15 16 17 01 00 0F 00 00  // ................
    5600: 00 00 00 00 00 05 0F FF 00 05 11 1C 08 0B 25 28  // ..............%(
    5610: 02 07 1B 20 0F 14 28 2C 0C 11 25 2A 14 1E 32 36  // ... ..(,..%*..26
    5620: 0F 13 27 2C 1B 20 34 39 06 0B 1F 24 13 18 2C 30  // ..',. 49...$..,0
    5630: 09 0D 21 26 15 1A 2E 33 13 17 2B 30 1F 24 38 3D  // ..!&...3..+0.$8=
    5640: 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18  // ..-2 $8?........
    5650: 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F  // ..........-2 $8?
    5660: 0E 18 2D 32 20 24 38 3F 00 05 11 1C 08 0B 14 18  // ..-2 $8?........
    5670: 00 05 11 1C 08 0B 14 18 0E 18 2D 32 20 24 38 3F  // ..........-2 $8?
    5680: 0E 18 2D 32 20 24 38 3F 50 18 0E 00 80 01 0F 00  // ..-2 $8?P.......
    5690: 06 A2 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00  // .._OP.T....@....
    56A0: 00 00 83 85 5D 28 0F 63 BA E3 FF 00 08 00 00 18  // ....](.c........
    56B0: 18 00 00 00 08 00 00 00 18 00 00 0B 00 05 00 00  // ................
    56C0: 00 00 00 00 00 05 05 FF 50 18 0E 00 80 01 0F 00  // ........P.......
    56D0: 06 A3 5F 4F 50 82 54 80 BF 1F 00 40 00 00 00 00  // .._OP.T....@....
    56E0: 00 00 83 85 5D 28 0F 63 BA E3 FF 00 01 02 03 04  // ....](.c........
    56F0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00  // ...89:;<=>?.....
    5700: 00 00 00 00 00 05 0F FF 28 18 0E 00 08 09 03 00  // ........(.......
    5710: 02 A3 2D 27 28 90 2B A0 BF 1F 00 4D 0B 0C 00 00  // ..-'(.+....M....
    5720: 00 00 83 85 5D 14 1F 63 BA A3 FF 00 01 02 03 04  // ....]..c........
    5730: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    5740: 00 00 00 00 10 0E 00 FF 50 18 0E 00 10 01 03 00  // ........P.......
    5750: 02 A3 5F 4F 50 82 55 81 BF 1F 00 4D 0B 0C 00 00  // .._OP.U....M....
    5760: 00 00 83 85 5D 28 1F 63 BA A3 FF 00 01 02 03 04  // ....](.c........
    5770: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 08 00 0F 00 00  // ...89:;<=>?.....
    5780: 00 00 00 00 10 0E 00 FF 28 18 10 00 08 08 03 00  // ........(.......
    5790: 02 67 2D 27 28 90 2B A0 BF 1F 00 4F 0D 0E 00 00  // .g-'(.+....O....
    57A0: 00 00 9C 8E 8F 14 1F 96 B9 A3 FF 00 01 02 03 04  // ................
    57B0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00  // ...89:;<=>?.....
    57C0: 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00  // ........P.......
    57D0: 02 67 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00  // .g_OP.U....O....
    57E0: 00 00 9C 8E 8F 28 1F 96 B9 A3 FF 00 01 02 03 04  // .....(..........
    57F0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 0C 00 0F 08 00  // ...89:;<=>?.....
    5800: 00 00 00 00 10 0E 00 FF 50 18 10 00 10 00 03 00  // ........P.......
    5810: 02 66 5F 4F 50 82 55 81 BF 1F 00 4F 0D 0E 00 00  // .f_OP.U....O....
    5820: 00 00 9C 8E 8F 28 0F 96 B9 A3 FF 00 08 08 08 08  // .....(..........
    5830: 08 08 08 10 18 18 18 18 18 18 18 0E 00 0F 08 00  // ................
    5840: 00 00 00 00 10 0A 00 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    5850: 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    5860: 00 00 EA 8C DF 28 00 E7 04 C3 FF 00 3F 3F 3F 3F  // .....(......????
    5870: 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 3F 01 00 0F 00 00  // ???????????.....
    5880: 00 00 00 00 00 05 01 FF 50 1D 10 00 A0 01 0F 00  // ........P.......
    5890: 06 E3 5F 4F 50 82 54 80 0B 3E 00 40 00 00 00 00  // .._OP.T..>.@....
    58A0: 00 00 EA 8C DF 28 00 E7 04 E3 FF 00 01 02 03 04  // .....(..........
    58B0: 05 14 07 38 39 3A 3B 3C 3D 3E 3F 01 00 0F 00 00  // ...89:;<=>?.....
    58C0: 00 00 00 00 00 05 0F FF 28 18 08 00 20 01 0F 00  // ........(... ...
    58D0: 0E 63 5F 4F 50 82 54 80 BF 1F 00 41 00 00 00 00  // .c_OP.T....A....
    58E0: 00 00 9C 8E 8F 28 40 96 B9 A3 FF 00 01 02 03 04  // .....(@.........
    58F0: 05 06 07 08 09 0A 0B 0C 0D 0E 0F 41 00 0F 00 00  // ...........A....
    5900: 00 00 00 00 40 05 0F FF A0 52 00 C0 00 00 00 00  // ....@....R......
    5910: 00 00 00 00 00 00 00 00 C0 58 00 C0 00 00 00 00  // .........X......
    5920: 00 00 00 00 00 00 00 00 1A 00 58 90 00 C0 00 00  // ..........X.....
    5930: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    5940: 00 00 1E E8 10 00 2E 8E 1E 0A 03 E8 F8 36 E8 CF  // .............6..
    5950: 36 E8 70 1A 1F C3 2E 8E 1E 0A 03 C7 06 87 04 60  // 6.p............`
    5960: F9 C6 06 8A 04 0B A0 89 04 0C 11 24 17 A2 89 04  // ...........$....
    5970: B4 01 E8 6D 1E A0 89 04 80 26 10 04 CF 80 0E 10  // ...m.....&......
    5980: 04 20 C7 06 63 04 D4 03 0E 1F E8 BF B5 F7 C1 02  // . ..c...........
    5990: 00 75 03 E8 47 B5 C3 1E 2E 8E 1E 0A 03 0E 07 EB  // .u..G...........
    59A0: 00 1F C3 F6 06 89 04 08 74 01 C3 53 BA C8 03 EC  // ........t..S....
    59B0: B0 FF B2 C6 EE B2 C8 80 3E 63 04 B4 75 2F BE 1C  // ........>c..u/..
    59C0: 5A B9 40 00 33 DB 9C FA 8A C3 EE 8B FB C1 EF 03  // Z.@.3...........
    59D0: 83 E7 03 03 FE 2E 8A 05 42 EE 2E 8A 45 04 EE 2E  // ........B...E...
    59E0: 8A 45 08 EE FE C3 4A E2 DF 9D E9 85 00 26 8A 47  // .E....J......&.G
    59F0: 2B F6 06 89 04 06 74 31 B9 F8 00 BF 20 54 3C 08  // +.....t1.... T<.
    5A00: 74 11 B9 40 00 BF A0 55 3C 38 74 07 3C 3F 74 03  // t..@...U<8t.<?t.
    5A10: BF E0 55 33 DB 9C FA 8A C3 EE 2E 8A 01 42 EE EE  // ..U3.........B..
    5A20: EE FE C3 4A E2 F1 9D EB 49 3C 08 74 25 3C 38 74  // ...J....I<.t%<8t
    5A30: 2E 3C 3F 74 2A B9 08 00 33 DB 51 E8 0B D3 B9 08  // .<?t*...3.Q.....
    5A40: 00 F7 C3 10 00 74 03 83 C7 18 E8 67 00 59 E2 EA  // .....t.....g.Y..
    5A50: EB 20 E8 F4 D2 B9 00 01 33 DB E8 57 00 EB 13 B9  // . ......3..W....
    5A60: 40 00 33 DB 51 E8 28 00 8A C3 E8 B7 2F FE C3 59  // @.3.Q.(...../..Y
    5A70: E2 F2 5B C3 00 2A 00 2A 00 2A 00 2A 15 3F 15 3F  // ..[..*.*.*.*.?.?
    5A80: 15 3F 15 3F 00 2A 00 3F 00 2A 00 3F 00 2A 00 3F  // .?.?.*.?.*.?.*.?
    5A90: 8B FB C1 EF 02 83 E7 0F 2E 8A B5 0C 5A 8B FB D1  // ............Z...
    5AA0: EF 83 E7 0F 2E 8A AD 0C 5A 8B FB 83 E7 0F 2E 8A  // ........Z.......
    5AB0: 8D 0C 5A C3 9C 8A C3 FA EE 2E 8A 05 42 EE 47 2E  // ..Z.........B.G.
    5AC0: 8A 05 EE 47 2E 8A 05 EE 47 FE C3 4A E2 E7 9D C3  // ...G....G..J....
    5AD0: 00 00 00 00 00 00 00 00 7E 81 A5 81 BD 99 81 7E  // ........~......~
    5AE0: 7C FE D6 BA C6 FE 7C 00 C6 EE FE FE 7C 38 10 00  // |.....|.....|8..
    5AF0: 10 38 7C FE 7C 38 10 00 10 38 10 EE EE 10 38 00  // .8|.|8...8....8.
    5B00: 38 7C FE FE 6C 10 38 00 00 18 3C 7E 3C 18 00 00  // 8|..l.8...<~<...
    5B10: FF E7 C3 81 C3 E7 FF FF 00 18 3C 66 66 3C 18 00  // ..........<ff<..
    5B20: FF E7 C3 99 99 C3 E7 FF 1E 0E 1E 36 78 CC CC 78  // ...........6x..x
    5B30: 7E C3 C3 7E 18 7E 18 18 1E 1A 1E 18 18 70 F0 60  // ~..~.~.......p.`
    5B40: 3E 3E 36 36 F6 66 1E 0C DB 3C 66 E7 66 3C DB 00  // >>66.f...<f.f<..
    5B50: 80 C0 F0 F8 F0 C0 80 00 02 06 1E 3E 1E 06 02 00  // ...........>....
    5B60: 18 3C 7E 18 7E 3C 18 00 66 66 66 66 66 00 66 00  // .<~.~<..fffff.f.
    5B70: 7F DB 7B 3B 1B 1B 1B 00 3C 66 38 6C 6C 38 CC 78  // ..{;....<f8ll8.x
    5B80: 00 00 00 00 FE FE FE 00 18 3C 7E 18 7E 3C 18 7E  // .........<~.~<.~
    5B90: 18 3C 7E 18 18 18 18 00 18 18 18 18 7E 3C 18 00  // .<~.........~<..
    5BA0: 00 18 1C FE 1C 18 00 00 00 30 70 FE 70 30 00 00  // .........0p.p0..
    5BB0: 00 00 C0 C0 C0 FE 00 00 00 24 66 FF 66 24 00 00  // .........$f.f$..
    5BC0: 00 10 38 7C 7C FE 00 00 00 FE 7C 7C 38 10 00 00  // ..8||.....||8...
    5BD0: 00 00 00 00 00 00 00 00 18 3C 3C 18 18 00 18 00  // .........<<.....
    5BE0: 6C 6C 6C 00 00 00 00 00 6C 6C FE 6C FE 6C 6C 00  // lll.....ll.l.ll.
    5BF0: 18 7E C0 7C 06 FC 18 00 00 C6 0C 18 30 60 C6 00  // .~.|........0`..
    5C00: 38 6C 38 76 CC CC 76 00 18 18 30 00 00 00 00 00  // 8l8v..v...0.....
    5C10: 18 30 60 60 60 30 18 00 60 30 18 18 18 30 60 00  // .0```0..`0...0`.
    5C20: 00 EE 7C FE 7C EE 00 00 00 18 18 7E 18 18 00 00  // ..|.|......~....
    5C30: 00 00 00 00 18 18 30 00 00 00 00 FE 00 00 00 00  // ......0.........
    5C40: 00 00 00 00 00 38 38 00 06 0C 18 30 60 C0 80 00  // .....88....0`...
    5C50: 7C C6 CE DE F6 E6 7C 00 18 78 18 18 18 18 7E 00  // |.....|..x....~.
    5C60: 7C C6 0C 18 30 66 FE 00 7C C6 06 3C 06 C6 7C 00  // |...0f..|..<..|.
    5C70: 0C 1C 3C 6C FE 0C 0C 00 FE C0 FC 06 06 C6 7C 00  // ..<l..........|.
    5C80: 7C C6 C0 FC C6 C6 7C 00 FE C6 06 0C 18 18 18 00  // |.....|.........
    5C90: 7C C6 C6 7C C6 C6 7C 00 7C C6 C6 7E 06 C6 7C 00  // |..|..|.|..~..|.
    5CA0: 00 1C 1C 00 00 1C 1C 00 00 18 18 00 00 18 18 30  // ...............0
    5CB0: 0C 18 30 60 30 18 0C 00 00 00 FE 00 00 FE 00 00  // ..0`0...........
    5CC0: 60 30 18 0C 18 30 60 00 7C C6 06 0C 18 00 18 00  // `0...0`.|.......
    5CD0: 7C C6 C6 DE DC C0 7E 00 38 6C C6 C6 FE C6 C6 00  // |.....~.8l......
    5CE0: FC 66 66 7C 66 66 FC 00 3C 66 C0 C0 C0 66 3C 00  // .ff|ff..<f...f<.
    5CF0: F8 6C 66 66 66 6C F8 00 FE C2 C0 F8 C0 C2 FE 00  // .lfffl..........
    5D00: FE 62 60 7C 60 60 F0 00 7C C6 C0 C0 DE C6 7C 00  // .b`|``..|.....|.
    5D10: C6 C6 C6 FE C6 C6 C6 00 3C 18 18 18 18 18 3C 00  // ........<.....<.
    5D20: 3C 18 18 18 D8 D8 70 00 C6 CC D8 F0 D8 CC C6 00  // <.....p.........
    5D30: F0 60 60 60 60 62 FE 00 C6 EE FE D6 D6 C6 C6 00  // .````b..........
    5D40: C6 E6 E6 F6 DE CE C6 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    5D50: FC 66 66 7C 60 60 F0 00 7C C6 C6 C6 C6 D6 7C 06  // .ff|``..|.....|.
    5D60: FC C6 C6 FC D8 CC C6 00 7C C6 C0 7C 06 C6 7C 00  // ........|..|..|.
    5D70: 7E 5A 18 18 18 18 3C 00 C6 C6 C6 C6 C6 C6 7C 00  // ~Z....<.......|.
    5D80: C6 C6 C6 C6 6C 38 10 00 C6 C6 D6 D6 FE EE C6 00  // ....l8..........
    5D90: C6 6C 38 38 38 6C C6 00 66 66 66 3C 18 18 3C 00  // .l888l..fff<..<.
    5DA0: FE 86 0C 18 30 62 FE 00 7C 60 60 60 60 60 7C 00  // ....0b..|`````|.
    5DB0: C0 60 30 18 0C 06 02 00 7C 0C 0C 0C 0C 0C 7C 00  // .`0.....|.....|.
    5DC0: 10 38 6C C6 00 00 00 00 00 00 00 00 00 00 00 FF  // .8l.............
    5DD0: 30 30 18 00 00 00 00 00 00 00 78 0C 7C CC 7E 00  // 00........x.|.~.
    5DE0: E0 60 7C 66 66 66 FC 00 00 00 7C C6 C0 C6 7C 00  // .`|fff....|...|.
    5DF0: 1C 0C 7C CC CC CC 7E 00 00 00 7C C6 FE C0 7C 00  // ..|...~...|...|.
    5E00: 1C 36 30 FC 30 30 78 00 00 00 76 CE C6 7E 06 7C  // .60.00x...v..~.|
    5E10: E0 60 7C 66 66 66 E6 00 18 00 38 18 18 18 3C 00  // .`|fff....8...<.
    5E20: 0C 00 1C 0C 0C 0C CC 78 E0 60 66 6C 78 6C E6 00  // .......x.`flxl..
    5E30: 18 18 18 18 18 18 1C 00 00 00 6C FE D6 D6 C6 00  // ..........l.....
    5E40: 00 00 DC 66 66 66 66 00 00 00 7C C6 C6 C6 7C 00  // ...ffff...|...|.
    5E50: 00 00 DC 66 66 7C 60 F0 00 00 76 CC CC 7C 0C 1E  // ...ff|`...v..|..
    5E60: 00 00 DC 66 60 60 F0 00 00 00 7C C0 7C 06 7C 00  // ...f``....|.|.|.
    5E70: 30 30 FC 30 30 36 1C 00 00 00 CC CC CC CC 76 00  // 00.006........v.
    5E80: 00 00 C6 C6 6C 38 10 00 00 00 C6 C6 D6 FE 6C 00  // ....l8........l.
    5E90: 00 00 C6 6C 38 6C C6 00 00 00 C6 C6 CE 76 06 7C  // ...l8l.......v.|
    5EA0: 00 00 FC 98 30 64 FC 00 0E 18 18 70 18 18 0E 00  // ....0d.....p....
    5EB0: 18 18 18 00 18 18 18 00 70 18 18 0E 18 18 70 00  // ........p.....p.
    5EC0: 76 DC 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00  // v.........88ll..
    5ED0: 3C 66 C0 66 3C 18 CC 78 00 C6 00 C6 C6 CE 76 00  // <f.f<..x......v.
    5EE0: 0E 00 7C C6 FE C0 7C 00 7C C6 78 0C 7C CC 7E 00  // ..|...|.|.x.|.~.
    5EF0: C6 00 78 0C 7C CC 7E 00 E0 00 78 0C 7C CC 7E 00  // ..x.|.~...x.|.~.
    5F00: 38 38 78 0C 7C CC 7E 00 00 00 7C C0 7C 18 6C 38  // 88x.|.~...|.|.l8
    5F10: 7C C6 7C C6 FE C0 7C 00 C6 00 7C C6 FE C0 7C 00  // |.|...|...|...|.
    5F20: E0 00 7C C6 FE C0 7C 00 66 00 38 18 18 18 3C 00  // ..|...|.f.8...<.
    5F30: 7C C6 38 18 18 18 3C 00 00 00 38 18 18 18 3C 00  // |.8...<...8...<.
    5F40: C6 38 6C C6 FE C6 C6 00 38 38 00 7C C6 FE C6 00  // .8l.....88.|....
    5F50: 0E 00 FE C0 F8 C0 FE 00 00 00 6C 9A 7E D8 6E 00  // ..........l.~.n.
    5F60: 7E D8 D8 FE D8 D8 DE 00 7C C6 00 7C C6 C6 7C 00  // ~.......|..|..|.
    5F70: 00 C6 00 7C C6 C6 7C 00 00 E0 00 7C C6 C6 7C 00  // ...|..|....|..|.
    5F80: 7C C6 00 C6 C6 CE 76 00 00 E0 00 C6 C6 CE 76 00  // |.....v.......v.
    5F90: 18 00 3C 18 18 18 3C 00 C6 38 6C C6 C6 6C 38 00  // ..<...<..8l..l8.
    5FA0: C6 00 C6 C6 C6 C6 7C 00 00 18 7E D8 D8 7E 18 00  // ......|...~..~..
    5FB0: 38 6C 60 F0 66 F6 6C 00 C3 66 3C 7E 18 3C 18 00  // 8l`.f.l..f<~.<..
    5FC0: 3E 63 38 0E 63 3E 00 1C 00 3E 61 3C 86 7C 00 1C  // >c8.c>...>a<.|..
    5FD0: 0E 00 78 0C 7C CC 7E 00 1C 00 38 18 18 18 3C 00  // ..x.|.~...8...<.
    5FE0: 00 0E 00 7C C6 C6 7C 00 00 0E 00 CC CC DC 76 00  // ...|..|.......v.
    5FF0: 00 FC 00 BC 66 66 E6 00 FE 00 C6 E6 F6 CE C6 00  // ....ff..........
    6000: 3E 00 3E 60 67 63 3D 00 3E 00 76 CE C6 7E 06 7C  // >.>`gc=.>.v..~.|
    6010: 18 00 18 30 60 66 3C 00 00 00 00 7C 60 60 00 00  // ...0`f<....|``..
    6020: 00 00 00 7C 0C 0C 00 00 C0 CC D8 30 7C 36 0C 3E  // ...|.......0|6.>
    6030: C0 CC D8 30 6C 3C 7E 0C 18 00 18 18 3C 3C 18 00  // ...0l<~.....<<..
    6040: 00 36 6C D8 6C 36 00 00 00 D8 6C 36 6C D8 00 00  // .6l.l6....l6l...
    6050: 22 88 22 88 22 88 22 88 55 AA 55 AA 55 AA 55 AA  // ".".".".U.U.U.U.
    6060: DD 77 DD 77 DD 77 DD 77 18 18 18 18 18 18 18 18  // .w.w.w.w........
    6070: 18 18 18 18 F8 18 18 18 18 18 F8 18 F8 18 18 18  // ................
    6080: 36 36 36 36 F6 36 36 36 00 00 00 00 FE 36 36 36  // 6666.666.....666
    6090: 00 00 F8 18 F8 18 18 18 36 36 F6 06 F6 36 36 36  // ........66...666
    60A0: 36 36 36 36 36 36 36 36 00 00 FE 06 F6 36 36 36  // 66666666.....666
    60B0: 36 36 F6 06 FE 00 00 00 36 36 36 36 FE 00 00 00  // 66......6666....
    60C0: 18 18 F8 18 F8 00 00 00 00 00 00 00 F8 18 18 18  // ................
    60D0: 18 18 18 18 1F 00 00 00 18 18 18 18 FF 00 00 00  // ................
    60E0: 00 00 00 00 FF 18 18 18 18 18 18 18 1F 18 18 18  // ................
    60F0: 00 00 00 00 FF 00 00 00 18 18 18 18 FF 18 18 18  // ................
    6100: 18 18 1F 18 1F 18 18 18 36 36 36 36 37 36 36 36  // ........66667666
    6110: 36 36 37 30 3F 00 00 00 00 00 3F 30 37 36 36 36  // 6670?.....?07666
    6120: 36 36 F7 00 FF 00 00 00 00 00 FF 00 F7 36 36 36  // 66...........666
    6130: 36 36 37 30 37 36 36 36 00 00 FF 00 FF 00 00 00  // 66707666........
    6140: 36 36 F7 00 F7 36 36 36 18 18 FF 00 FF 00 00 00  // 66...666........
    6150: 36 36 36 36 FF 00 00 00 00 00 FF 00 FF 18 18 18  // 6666............
    6160: 00 00 00 00 FF 36 36 36 36 36 36 36 3F 00 00 00  // .....6666666?...
    6170: 18 18 1F 18 1F 00 00 00 00 00 1F 18 1F 18 18 18  // ................
    6180: 00 00 00 00 3F 36 36 36 36 36 36 36 FF 36 36 36  // ....?6666666.666
    6190: 18 18 FF 18 FF 18 18 18 18 18 18 18 F8 00 00 00  // ................
    61A0: 00 00 00 00 1F 18 18 18 FF FF FF FF FF FF FF FF  // ................
    61B0: 00 00 00 00 FF FF FF FF F0 F0 F0 F0 F0 F0 F0 F0  // ................
    61C0: 0F 0F 0F 0F 0F 0F 0F 0F FF FF FF FF 00 00 00 00  // ................
    61D0: 00 00 66 DC D8 DC 66 00 00 78 CC F8 CC C6 CC 00  // ..f...f..x......
    61E0: 00 FE 62 60 60 60 E0 00 00 FE 6C 6C 6C 6C 6C 00  // ..b```....lllll.
    61F0: FE C6 60 30 60 C6 FE 00 00 7E D8 CC CC D8 70 00  // ..`0`....~....p.
    6200: 00 66 66 66 66 7C C0 00 00 76 DC 18 18 18 38 00  // .ffff|...v....8.
    6210: FE 38 6C C6 6C 38 FE 00 38 6C C6 FE C6 6C 38 00  // .8l.l8..8l...l8.
    6220: 38 6C C6 C6 6C 6C EE 00 3E 60 38 66 C6 CC 78 00  // 8l..ll..>`8f..x.
    6230: 00 00 7E DB DB 7E 00 00 06 7C DE F6 E6 7C C0 00  // ..~..~...|...|..
    6240: 38 60 C0 F8 C0 60 38 00 7C C6 C6 C6 C6 C6 C6 00  // 8`...`8.|.......
    6250: 00 FE 00 FE 00 FE 00 00 18 18 7E 18 18 00 7E 00  // ..........~...~.
    6260: 30 18 0C 18 30 00 7E 00 0C 18 30 18 0C 00 7E 00  // 0...0.~...0...~.
    6270: 0C 1E 18 18 18 18 18 18 18 18 18 18 18 78 30 00  // .............x0.
    6280: 00 00 18 00 7E 00 18 00 00 76 DC 00 76 DC 00 00  // ....~....v..v...
    6290: 7C C6 C6 7C 00 00 00 00 00 00 00 18 18 00 00 00  // |..|............
    62A0: 00 00 00 00 18 00 00 00 1F 18 18 18 F8 38 18 00  // .............8..
    62B0: D8 6C 6C 6C 00 00 00 00 70 D8 30 F8 00 00 00 00  // .lll....p.0.....
    62C0: 00 00 7C 7C 7C 7C 00 00 00 00 00 00 00 00 00 00  // ..||||..........
    62D0: 1D 00 00 00 00 24 66 FF 66 24 00 00 00 00 00 00  // .....$f.f$......
    62E0: 00 10 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    62F0: 00 00 00 00 00 7E 81 A5 81 81 BD 99 81 81 7E 00  // .....~........~.
    6300: 00 00 00 00 00 7C FE FE D6 FE FE BA C6 FE 7C 00  // .....|........|.
    6310: 00 00 00 00 00 00 6C EE FE FE FE FE 7C 38 10 00  // ......l.....|8..
    6320: 00 00 00 00 00 00 10 38 7C FE 7C 38 10 00 00 00  // .......8|.|8....
    6330: 00 00 00 00 00 00 10 38 38 10 6C EE 6C 10 38 00  // .......88.l.l.8.
    6340: 00 00 00 00 00 10 38 7C 7C FE FE FE 6C 10 38 00  // ......8||...l.8.
    6350: 00 00 00 00 00 00 00 00 18 3C 3C 3C 18 00 00 00  // .........<<<....
    6360: 00 00 00 FF FF FF FF FF E7 C3 C3 C3 E7 FF FF FF  // ................
    6370: FF FF FF 00 00 00 00 18 3C 66 66 66 3C 18 00 00  // ........<fff<...
    6380: 00 00 00 FF FF FF FF E7 C3 99 99 99 C3 E7 FF FF  // ................
    6390: FF FF FF 00 00 1E 0E 1E 36 78 CC CC CC CC 78 00  // ........6x....x.
    63A0: 00 00 00 00 00 3C 66 66 66 3C 18 7E 18 18 18 00  // .....<fff<.~....
    63B0: 00 00 00 00 00 1E 1A 1E 18 18 18 18 78 F8 70 00  // ............x.p.
    63C0: 00 00 00 00 00 3E 36 3E 36 36 76 F6 66 0E 1E 0C  // .....>6>66v.f...
    63D0: 00 00 00 00 00 18 DB 7E 3C 66 66 3C 7E DB 18 00  // .......~<ff<~...
    63E0: 00 00 00 00 00 00 80 E0 F0 FC FE FC F0 E0 80 00  // ................
    63F0: 00 00 00 00 00 00 02 0E 3E 7E FE 7E 3E 0E 02 00  // ........>~.~>...
    6400: 00 00 00 00 00 18 3C 7E 18 18 18 18 7E 3C 18 00  // ......<~....~<..
    6410: 00 00 00 00 00 66 66 66 66 66 66 66 00 66 66 00  // .....fffffff.ff.
    6420: 00 00 00 00 00 7F DB DB DB DB 7B 1B 1B 1B 1B 00  // ..........{.....
    6430: 00 00 00 00 00 7C C6 C6 60 7C F6 DE 7C 0C C6 C6  // .....|..`|..|...
    6440: 7C 00 00 00 00 00 00 00 00 00 00 FE FE FE FE 00  // |...............
    6450: 00 00 00 00 00 18 3C 7E 18 18 18 7E 3C 18 7E 00  // ......<~...~<.~.
    6460: 00 00 00 00 00 18 3C 7E 18 18 18 18 18 18 18 00  // ......<~........
    6470: 00 00 00 00 00 18 18 18 18 18 18 18 7E 3C 18 00  // ............~<..
    6480: 00 00 00 00 00 00 00 00 0C 0E FF 0E 0C 00 00 00  // ................
    6490: 00 00 00 00 00 00 00 00 30 70 FE 70 30 00 00 00  // ........0p.p0...
    64A0: 00 00 00 00 00 00 00 00 00 C0 C0 C0 FE 00 00 00  // ................
    64B0: 00 00 00 00 00 00 00 00 24 66 FF 66 24 00 00 00  // ........$f.f$...
    64C0: 00 00 00 00 00 00 10 38 38 38 7C 7C FE FE 00 00  // .......888||....
    64D0: 00 00 00 00 00 00 FE FE 7C 7C 7C 38 38 10 00 00  // ........|||88...
    64E0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    64F0: 00 00 00 00 00 18 3C 3C 3C 3C 18 18 00 18 18 00  // ......<<<<......
    6500: 00 00 00 00 36 36 36 36 14 00 00 00 00 00 00 00  // ....6666........
    6510: 00 00 00 00 00 6C 6C 6C FE 6C 6C FE 6C 6C 6C 00  // .....lll.ll.lll.
    6520: 00 00 00 00 00 18 18 7C C6 C0 78 3C 06 C6 7C 18  // .......|..x<..|.
    6530: 18 00 00 00 00 00 00 00 62 66 0C 18 30 66 C6 00  // ........bf..0f..
    6540: 00 00 00 00 00 38 6C 38 30 76 7E CC CC CC 76 00  // .....8l80v~...v.
    6550: 00 00 00 00 0C 0C 0C 18 00 00 00 00 00 00 00 00  // ................
    6560: 00 00 00 00 00 0C 18 30 30 30 30 30 30 18 0C 00  // .......000000...
    6570: 00 00 00 00 00 30 18 0C 0C 0C 0C 0C 0C 18 30 00  // .....0........0.
    6580: 00 00 00 00 00 00 00 00 6C 38 FE 38 6C 00 00 00  // ........l8.8l...
    6590: 00 00 00 00 00 00 00 00 18 18 7E 18 18 00 00 00  // ..........~.....
    65A0: 00 00 00 00 00 00 00 00 00 00 00 00 0C 0C 0C 18  // ................
    65B0: 00 00 00 00 00 00 00 00 00 00 FE 00 00 00 00 00  // ................
    65C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 18 18 00  // ................
    65D0: 00 00 00 00 00 00 00 02 06 0C 18 30 60 C0 80 00  // ...........0`...
    65E0: 00 00 00 00 00 7C C6 C6 CE DE F6 E6 C6 C6 7C 00  // .....|........|.
    65F0: 00 00 00 00 00 18 78 18 18 18 18 18 18 18 7E 00  // ......x.......~.
    6600: 00 00 00 00 00 7C C6 C6 06 0C 18 30 60 C6 FE 00  // .....|.....0`...
    6610: 00 00 00 00 00 7C C6 06 06 3C 06 06 06 C6 7C 00  // .....|...<....|.
    6620: 00 00 00 00 00 0C 1C 3C 6C CC CC FE 0C 0C 1E 00  // .......<l.......
    6630: 00 00 00 00 00 FE C0 C0 C0 FC 06 06 06 C6 7C 00  // ..............|.
    6640: 00 00 00 00 00 7C C6 C0 C0 FC C6 C6 C6 C6 7C 00  // .....|........|.
    6650: 00 00 00 00 00 FE C6 06 0C 18 30 30 30 30 30 00  // ..........00000.
    6660: 00 00 00 00 00 7C C6 C6 C6 7C C6 C6 C6 C6 7C 00  // .....|...|....|.
    6670: 00 00 00 00 00 7C C6 C6 C6 C6 7E 06 06 C6 7C 00  // .....|....~...|.
    6680: 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C 00 00  // ................
    6690: 00 00 00 00 00 00 00 00 0C 0C 00 00 0C 0C 0C 18  // ................
    66A0: 00 00 00 00 00 00 0C 18 30 60 C0 60 30 18 0C 00  // ........0`.`0...
    66B0: 00 00 00 00 00 00 00 00 00 FE 00 FE 00 00 00 00  // ................
    66C0: 00 00 00 00 00 00 60 30 18 0C 06 0C 18 30 60 00  // ......`0.....0`.
    66D0: 00 00 00 00 00 7C C6 C6 0C 18 18 18 00 18 18 00  // .....|..........
    66E0: 00 00 00 00 00 7C C6 C6 C6 DE DE DE DC C0 7E 00  // .....|........~.
    66F0: 00 00 00 00 00 38 6C C6 C6 C6 FE C6 C6 C6 C6 00  // .....8l.........
    6700: 00 00 00 00 00 FC 66 66 66 7C 66 66 66 66 FC 00  // ......fff|ffff..
    6710: 00 00 00 00 00 3C 66 C2 C0 C0 C0 C0 C2 66 3C 00  // .....<f......f<.
    6720: 00 00 00 00 00 F8 6C 66 66 66 66 66 66 6C F8 00  // ......lffffffl..
    6730: 00 00 00 00 00 FE 66 60 64 7C 64 60 60 66 FE 00  // ......f`d|d``f..
    6740: 00 00 00 00 00 FE 66 60 64 7C 64 60 60 60 F0 00  // ......f`d|d```..
    6750: 00 00 00 00 00 7C C6 C6 C0 C0 C0 CE C6 C6 7C 00  // .....|........|.
    6760: 00 00 00 00 00 C6 C6 C6 C6 FE C6 C6 C6 C6 C6 00  // ................
    6770: 00 00 00 00 00 3C 18 18 18 18 18 18 18 18 3C 00  // .....<........<.
    6780: 00 00 00 00 00 3C 18 18 18 18 18 18 D8 D8 70 00  // .....<........p.
    6790: 00 00 00 00 00 C6 C6 CC D8 F0 F0 D8 CC C6 C6 00  // ................
    67A0: 00 00 00 00 00 F0 60 60 60 60 60 60 62 66 FE 00  // ......``````bf..
    67B0: 00 00 00 00 00 C6 C6 EE EE FE D6 D6 D6 C6 C6 00  // ................
    67C0: 00 00 00 00 00 C6 C6 E6 E6 F6 DE CE CE C6 C6 00  // ................
    67D0: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // .....|........|.
    67E0: 00 00 00 00 00 FC 66 66 66 66 7C 60 60 60 F0 00  // ......ffff|```..
    67F0: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 D6 D6 7C 06  // .....|........|.
    6800: 00 00 00 00 00 FC 66 66 66 7C 78 6C 66 66 E6 00  // ......fff|xlff..
    6810: 00 00 00 00 00 7C C6 C0 C0 70 1C 06 06 C6 7C 00  // .....|...p....|.
    6820: 00 00 00 00 00 7E 5A 18 18 18 18 18 18 18 3C 00  // .....~Z.......<.
    6830: 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // ..............|.
    6840: 00 00 00 00 00 C6 C6 C6 C6 C6 C6 C6 6C 38 10 00  // ............l8..
    6850: 00 00 00 00 00 C6 C6 C6 D6 D6 D6 FE EE C6 C6 00  // ................
    6860: 00 00 00 00 00 C6 C6 C6 6C 38 38 6C C6 C6 C6 00  // ........l88l....
    6870: 00 00 00 00 00 66 66 66 66 66 3C 18 18 18 3C 00  // .....fffff<...<.
    6880: 00 00 00 00 00 FE C6 86 0C 18 30 60 C2 C6 FE 00  // ..........0`....
    6890: 00 00 00 00 00 7C 60 60 60 60 60 60 60 60 7C 00  // .....|````````|.
    68A0: 00 00 00 00 00 00 00 80 C0 60 30 18 0C 06 02 00  // .........`0.....
    68B0: 00 00 00 00 00 7C 0C 0C 0C 0C 0C 0C 0C 0C 7C 00  // .....|........|.
    68C0: 00 00 00 00 10 38 6C C6 00 00 00 00 00 00 00 00  // .....8l.........
    68D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    68E0: FF 00 00 00 18 18 18 0C 00 00 00 00 00 00 00 00  // ................
    68F0: 00 00 00 00 00 00 00 00 78 0C 7C CC CC DC 76 00  // ........x.|...v.
    6900: 00 00 00 00 00 E0 60 60 7C 66 66 66 66 66 FC 00  // ......``|fffff..
    6910: 00 00 00 00 00 00 00 00 7C C6 C0 C0 C0 C6 7C 00  // ........|.....|.
    6920: 00 00 00 00 00 1C 0C 0C 7C CC CC CC CC CC 7E 00  // ........|.....~.
    6930: 00 00 00 00 00 00 00 00 7C C6 C6 FE C0 C6 7C 00  // ........|.....|.
    6940: 00 00 00 00 00 1C 36 30 30 FC 30 30 30 30 78 00  // ......600.0000x.
    6950: 00 00 00 00 00 00 00 00 76 CE C6 C6 CE 76 06 C6  // ........v....v..
    6960: 7C 00 00 00 00 E0 60 60 7C 66 66 66 66 66 E6 00  // |.....``|fffff..
    6970: 00 00 00 00 00 18 18 00 38 18 18 18 18 18 3C 00  // ........8.....<.
    6980: 00 00 00 00 00 0C 0C 00 1C 0C 0C 0C 0C 0C CC CC  // ................
    6990: 78 00 00 00 00 E0 60 60 66 66 6C 78 6C 66 E6 00  // x.....``fflxlf..
    69A0: 00 00 00 00 00 18 18 18 18 18 18 18 18 18 1C 00  // ................
    69B0: 00 00 00 00 00 00 00 00 6C FE D6 D6 C6 C6 C6 00  // ........l.......
    69C0: 00 00 00 00 00 00 00 00 DC 66 66 66 66 66 66 00  // .........ffffff.
    69D0: 00 00 00 00 00 00 00 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    69E0: 00 00 00 00 00 00 00 00 DC 66 66 66 66 7C 60 60  // .........ffff|``
    69F0: F0 00 00 00 00 00 00 00 76 CC CC CC CC 7C 0C 0C  // ........v....|..
    6A00: 1E 00 00 00 00 00 00 00 DC 66 60 60 60 60 F0 00  // .........f````..
    6A10: 00 00 00 00 00 00 00 00 7C C6 C0 7C 06 C6 7C 00  // ........|..|..|.
    6A20: 00 00 00 00 00 30 30 30 FC 30 30 30 30 36 1C 00  // .....000.00006..
    6A30: 00 00 00 00 00 00 00 00 CC CC CC CC CC CC 76 00  // ..............v.
    6A40: 00 00 00 00 00 00 00 00 C6 C6 C6 C6 6C 38 10 00  // ............l8..
    6A50: 00 00 00 00 00 00 00 00 C6 C6 D6 D6 D6 FE 6C 00  // ..............l.
    6A60: 00 00 00 00 00 00 00 00 C6 C6 6C 38 6C C6 C6 00  // ..........l8l...
    6A70: 00 00 00 00 00 00 00 00 C6 C6 C6 C6 CE 76 06 C6  // .............v..
    6A80: 7C 00 00 00 00 00 00 00 FE 86 0C 18 30 62 FE 00  // |...........0b..
    6A90: 00 00 00 00 00 0E 18 18 18 70 18 18 18 18 0E 00  // .........p......
    6AA0: 00 00 00 00 00 18 18 18 18 00 18 18 18 18 18 00  // ................
    6AB0: 00 00 00 00 00 70 18 18 18 0E 18 18 18 18 70 00  // .....p........p.
    6AC0: 00 00 00 00 00 76 DC 00 00 00 00 00 00 00 00 00  // .....v..........
    6AD0: 00 00 00 00 00 00 00 00 10 38 38 6C 6C FE 00 00  // .........88ll...
    6AE0: 00 00 00 00 00 3C 66 C0 C0 C0 C6 66 3C 18 0C CC  // .....<f....f<...
    6AF0: 38 00 00 00 00 C6 00 00 C6 C6 C6 C6 C6 CE 76 00  // 8.............v.
    6B00: 00 00 00 00 0C 18 30 00 7C C6 C6 FE C0 C6 7C 00  // ......0.|.....|.
    6B10: 00 00 00 00 30 78 CC 00 78 0C 7C CC CC DC 76 00  // ....0x..x.|...v.
    6B20: 00 00 00 00 00 CC 00 00 78 0C 7C CC CC DC 76 00  // ........x.|...v.
    6B30: 00 00 00 00 60 30 18 00 78 0C 7C CC CC DC 76 00  // ....`0..x.|...v.
    6B40: 00 00 00 00 38 6C 38 00 78 0C 7C CC CC DC 76 00  // ....8l8.x.|...v.
    6B50: 00 00 00 00 00 00 00 7C C6 C0 C0 C6 7C 18 0C 6C  // .......|....|..l
    6B60: 38 00 00 00 30 78 CC 00 7C C6 C6 FE C0 C6 7C 00  // 8...0x..|.....|.
    6B70: 00 00 00 00 00 CC 00 00 7C C6 C6 FE C0 C6 7C 00  // ........|.....|.
    6B80: 00 00 00 00 30 18 0C 00 7C C6 C6 FE C0 C6 7C 00  // ....0...|.....|.
    6B90: 00 00 00 00 00 66 00 00 38 18 18 18 18 18 3C 00  // .....f..8.....<.
    6BA0: 00 00 00 00 18 3C 66 00 38 18 18 18 18 18 3C 00  // .....<f.8.....<.
    6BB0: 00 00 00 00 00 00 00 00 38 18 18 18 18 18 3C 00  // ........8.....<.
    6BC0: 00 00 00 00 C6 00 38 6C C6 C6 C6 FE C6 C6 C6 00  // ......8l........
    6BD0: 00 00 00 38 6C 38 00 38 6C C6 C6 FE C6 C6 C6 00  // ...8l8.8l.......
    6BE0: 00 00 00 0C 18 30 00 FE 60 60 7C 60 60 60 FE 00  // .....0..``|```..
    6BF0: 00 00 00 00 00 00 00 66 DB 1B 7F D8 D8 DF 76 00  // .......f......v.
    6C00: 00 00 00 00 00 7E D8 D8 D8 D8 FE D8 D8 D8 DE 00  // .....~..........
    6C10: 00 00 00 00 30 78 CC 00 7C C6 C6 C6 C6 C6 7C 00  // ....0x..|.....|.
    6C20: 00 00 00 00 00 C6 00 00 7C C6 C6 C6 C6 C6 7C 00  // ........|.....|.
    6C30: 00 00 00 00 30 18 0C 00 7C C6 C6 C6 C6 C6 7C 00  // ....0...|.....|.
    6C40: 00 00 00 00 30 78 CC 00 C6 C6 C6 C6 C6 CE 76 00  // ....0x........v.
    6C50: 00 00 00 00 60 30 18 00 C6 C6 C6 C6 C6 CE 76 00  // ....`0........v.
    6C60: 00 00 00 00 18 00 3C 18 18 18 18 18 18 18 3C 00  // ......<.......<.
    6C70: 00 00 00 00 C6 00 7C C6 C6 C6 C6 C6 C6 C6 7C 00  // ......|.......|.
    6C80: 00 00 00 00 C6 00 C6 C6 C6 C6 C6 C6 C6 C6 7C 00  // ..............|.
    6C90: 00 00 00 00 00 18 18 7C C6 C0 C0 C6 7C 18 18 00  // .......|....|...
    6CA0: 00 00 00 00 38 6C 60 60 F0 60 60 60 66 F6 6C 00  // ....8l``.```f.l.
    6CB0: 00 00 00 00 66 66 66 66 3C 18 7E 18 3C 18 18 00  // ....ffff<.~.<...
    6CC0: 00 00 00 00 00 3E 63 63 30 1C 06 63 63 3E 00 1C  // .....>cc0..cc>..
    6CD0: 00 00 00 00 00 00 00 00 3E 63 38 0E 63 3E 00 1C  // ........>c8.c>..
    6CE0: 00 00 00 00 0C 18 30 00 78 0C 7C CC CC DC 76 00  // ......0.x.|...v.
    6CF0: 00 00 00 00 0C 18 30 00 38 18 18 18 18 18 3C 00  // ......0.8.....<.
    6D00: 00 00 00 00 0C 18 30 00 7C C6 C6 C6 C6 C6 7C 00  // ......0.|.....|.
    6D10: 00 00 00 00 18 30 60 00 CC CC CC CC CC DC 76 00  // .....0`.......v.
    6D20: 00 00 00 00 00 76 DC 00 BC 66 66 66 66 66 E6 00  // .....v...fffff..
    6D30: 00 00 00 00 76 DC 00 C6 C6 E6 F6 DE CE C6 C6 00  // ....v...........
    6D40: 00 00 00 00 21 1E 00 1E 33 60 60 67 63 33 1D 00  // ....!...3``gc3..
    6D50: 00 00 00 00 42 3C 00 3B 66 66 66 3E 06 66 3C 00  // ....B<.;fff>.f<.
    6D60: 00 00 00 00 00 30 30 00 30 30 30 60 C6 C6 7C 00  // .....00.000`..|.
    6D70: 00 00 00 00 00 00 00 00 00 00 7E 60 60 60 00 00  // ..........~```..
    6D80: 00 00 00 00 00 00 00 00 00 00 7E 06 06 06 00 00  // ..........~.....
    6D90: 00 00 00 00 60 60 62 66 6C 18 30 60 DC 36 0C 18  // ....``bfl.0`.6..
    6DA0: 3E 00 00 00 60 60 62 66 6C 18 36 6E DE 36 7E 06  // >...``bfl.6n.6~.
    6DB0: 06 00 00 00 00 18 18 00 18 18 3C 3C 3C 3C 18 00  // ..........<<<<..
    6DC0: 00 00 00 00 00 00 00 00 36 6C D8 6C 36 00 00 00  // ........6l.l6...
    6DD0: 00 00 00 00 00 00 00 00 D8 6C 36 6C D8 00 00 00  // .........l6l....
    6DE0: 00 00 00 11 44 11 44 11 44 11 44 11 44 11 44 11  // ....D.D.D.D.D.D.
    6DF0: 44 11 44 AA 55 AA 55 AA 55 AA 55 AA 55 AA 55 AA  // D.D.U.U.U.U.U.U.
    6E00: 55 AA 55 DD 77 DD 77 DD 77 DD 77 DD 77 DD 77 DD  // U.U.w.w.w.w.w.w.
    6E10: 77 DD 77 18 18 18 18 18 18 18 18 18 18 18 18 18  // w.w.............
    6E20: 18 18 18 18 18 18 18 18 18 18 F8 18 18 18 18 18  // ................
    6E30: 18 18 18 18 18 18 18 18 F8 18 F8 18 18 18 18 18  // ................
    6E40: 18 18 18 36 36 36 36 36 36 36 F6 36 36 36 36 36  // ...6666666.66666
    6E50: 36 36 36 00 00 00 00 00 00 00 FE 36 36 36 36 36  // 666........66666
    6E60: 36 36 36 00 00 00 00 00 F8 18 F8 18 18 18 18 18  // 666.............
    6E70: 18 18 18 36 36 36 36 36 F6 06 F6 36 36 36 36 36  // ...66666...66666
    6E80: 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36 36  // 6666666666666666
    6E90: 36 36 36 00 00 00 00 00 FE 06 F6 36 36 36 36 36  // 666........66666
    6EA0: 36 36 36 36 36 36 36 36 F6 06 FE 00 00 00 00 00  // 66666666........
    6EB0: 00 00 00 36 36 36 36 36 36 36 FE 00 00 00 00 00  // ...6666666......
    6EC0: 00 00 00 18 18 18 18 18 F8 18 F8 00 00 00 00 00  // ................
    6ED0: 00 00 00 00 00 00 00 00 00 00 F8 18 18 18 18 18  // ................
    6EE0: 18 18 18 18 18 18 18 18 18 18 1F 00 00 00 00 00  // ................
    6EF0: 00 00 00 18 18 18 18 18 18 18 FF 00 00 00 00 00  // ................
    6F00: 00 00 00 00 00 00 00 00 00 00 FF 18 18 18 18 18  // ................
    6F10: 18 18 18 18 18 18 18 18 18 18 1F 18 18 18 18 18  // ................
    6F20: 18 18 18 00 00 00 00 00 00 00 FF 00 00 00 00 00  // ................
    6F30: 00 00 00 18 18 18 18 18 18 18 FF 18 18 18 18 18  // ................
    6F40: 18 18 18 18 18 18 18 18 1F 18 1F 18 18 18 18 18  // ................
    6F50: 18 18 18 36 36 36 36 36 36 36 37 36 36 36 36 36  // ...6666666766666
    6F60: 36 36 36 36 36 36 36 36 37 30 3F 00 00 00 00 00  // 6666666670?.....
    6F70: 00 00 00 00 00 00 00 00 3F 30 37 36 36 36 36 36  // ........?0766666
    6F80: 36 36 36 36 36 36 36 36 F7 00 FF 00 00 00 00 00  // 66666666........
    6F90: 00 00 00 00 00 00 00 00 FF 00 F7 36 36 36 36 36  // ...........66666
    6FA0: 36 36 36 36 36 36 36 36 37 30 37 36 36 36 36 36  // 6666666670766666
    6FB0: 36 36 36 00 00 00 00 00 FF 00 FF 00 00 00 00 00  // 666.............
    6FC0: 00 00 00 36 36 36 36 36 F7 00 F7 36 36 36 36 36  // ...66666...66666
    6FD0: 36 36 36 18 18 18 18 18 FF 00 FF 00 00 00 00 00  // 666.............
    6FE0: 00 00 00 36 36 36 36 36 36 36 FF 00 00 00 00 00  // ...6666666......
    6FF0: 00 00 00 00 00 00 00 00 FF 00 FF 18 18 18 18 18  // ................
    7000: 18 18 18 00 00 00 00 00 00 00 FF 36 36 36 36 36  // ...........66666
    7010: 36 36 36 36 36 36 36 36 36 36 3F 00 00 00 00 00  // 6666666666?.....
    7020: 00 00 00 18 18 18 18 18 1F 18 1F 00 00 00 00 00  // ................
    7030: 00 00 00 00 00 00 00 00 1F 18 1F 18 18 18 18 18  // ................
    7040: 18 18 18 00 00 00 00 00 00 00 3F 36 36 36 36 36  // ..........?66666
    7050: 36 36 36 36 36 36 36 36 36 36 FF 36 36 36 36 36  // 6666666666.66666
    7060: 36 36 36 18 18 18 18 18 FF 18 FF 18 18 18 18 18  // 666.............
    7070: 18 18 18 18 18 18 18 18 18 18 F8 00 00 00 00 00  // ................
    7080: 00 00 00 00 00 00 00 00 00 00 1F 18 18 18 18 18  // ................
    7090: 18 18 18 FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    70A0: FF FF FF 00 00 00 00 00 00 00 00 FF FF FF FF FF  // ................
    70B0: FF FF FF F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0 F0  // ................
    70C0: F0 F0 F0 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F 0F  // ................
    70D0: 0F 0F 0F FF FF FF FF FF FF FF FF 00 00 00 00 00  // ................
    70E0: 00 00 00 00 00 00 00 76 DC D8 D8 D8 D8 DC 76 00  // .......v......v.
    70F0: 00 00 00 00 00 78 CC CC D8 FC C6 C6 C6 C6 CC 00  // .....x..........
    7100: 00 00 00 00 00 FE 66 62 60 60 60 60 60 60 60 00  // ......fb```````.
    7110: 00 00 00 00 00 00 00 00 FE 6C 6C 6C 6C 6C 6C 00  // .........llllll.
    7120: 00 00 00 00 00 FE C6 62 30 18 18 30 62 C6 FE 00  // .......b0..0b...
    7130: 00 00 00 00 00 00 00 00 7E D8 CC CC CC D8 70 00  // ........~.....p.
    7140: 00 00 00 00 00 00 00 66 66 66 66 66 7C 60 C0 80  // .......fffff|`..
    7150: 00 00 00 00 00 00 00 00 76 DC 18 18 18 18 18 00  // ........v.......
    7160: 00 00 00 00 00 FE 38 38 6C C6 C6 6C 38 38 FE 00  // ......88l..l88..
    7170: 00 00 00 00 00 00 38 6C C6 C6 FE C6 C6 6C 38 00  // ......8l.....l8.
    7180: 00 00 00 00 00 38 6C C6 C6 C6 C6 6C 6C 6C EE 00  // .....8l....lll..
    7190: 00 00 00 00 00 3E 60 60 3C 66 C6 C6 C6 CC 78 00  // .....>``<f....x.
    71A0: 00 00 00 00 00 00 00 00 7E DB DB DB 7E 00 00 00  // ........~...~...
    71B0: 00 00 00 00 00 02 06 7C CE DE F6 F6 7C 60 C0 00  // .......|....|`..
    71C0: 00 00 00 00 00 00 1C 30 60 60 7C 60 60 30 1C 00  // .......0``|``0..
    71D0: 00 00 00 00 00 7C C6 C6 C6 C6 C6 C6 C6 C6 C6 00  // .....|..........
    71E0: 00 00 00 00 00 00 00 FE 00 00 FE 00 00 FE 00 00  // ................
    71F0: 00 00 00 00 00 00 00 18 18 7E 18 18 00 00 7E 00  // .........~....~.
    7200: 00 00 00 00 00 30 18 0C 06 0C 18 30 00 00 7E 00  // .....0.....0..~.
    7210: 00 00 00 00 00 0C 18 30 60 30 18 0C 00 00 7E 00  // .......0`0....~.
    7220: 00 00 00 00 00 00 00 0C 1E 1A 18 18 18 18 18 18  // ................
    7230: 18 18 18 18 18 18 18 18 18 18 18 18 18 58 78 30  // .............Xx0
    7240: 00 00 00 00 00 00 00 18 18 00 7E 00 18 18 00 00  // ..........~.....
    7250: 00 00 00 00 00 00 00 00 00 76 DC 00 76 DC 00 00  // .........v..v...
    7260: 00 00 00 00 00 78 CC CC 78 00 00 00 00 00 00 00  // .....x..x.......
    7270: 00 00 00 00 00 00 00 00 00 00 18 18 00 00 00 00  // ................
    7280: 00 00 00 00 00 00 00 00 00 00 00 18 00 00 00 00  // ................
    7290: 00 00 00 00 00 1F 18 18 18 18 18 D8 D8 78 38 18  // .............x8.
    72A0: 00 00 00 00 00 D8 6C 6C 6C 6C 6C 00 00 00 00 00  // ......lllll.....
    72B0: 00 00 00 00 00 70 D8 18 30 60 F8 00 00 00 00 00  // .....p..0`......
    72C0: 00 00 00 00 00 00 00 00 7E 7E 7E 7E 7E 7E 00 00  // ........~~~~~~..
    72D0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    72E0: 00 00 00 1D 00 00 00 00 00 24 66 FF 66 24 00 00  // .........$f.f$..
    72F0: 00 00 00 00 2F 00 00 00 01 03 06 0C 18 30 60 C0  // ..../........0`.
    7300: 80 00 00 00 00 30 00 00 7E C3 C3 C3 DB DB C3 C3  // .....0..~.......
    7310: C3 7E 00 00 00 00 4D 00 00 C3 C3 E7 FF FF DB DB  // .~....M.........
    7320: C3 C3 C3 00 00 00 00 54 00 00 FF 99 18 18 18 18  // .......T........
    7330: 18 18 18 3C 00 00 00 00 56 00 00 C3 C3 C3 C3 C3  // ...<....V.......
    7340: C3 C3 66 3C 18 00 00 00 00 57 00 00 C3 C3 C3 C3  // ..f<.....W......
    7350: DB DB DB DB FF 66 00 00 00 00 58 00 00 C3 C3 C3  // .....f....X.....
    7360: 66 3C 3C 66 C3 C3 C3 00 00 00 00 59 00 00 C3 C3  // f<<f.......Y....
    7370: C3 C3 66 3C 18 18 18 3C 00 00 00 00 5C 00 00 00  // ..f<...<....\...
    7380: 80 C0 60 30 18 0C 06 03 01 00 00 00 00 6D 00 00  // ..`0.........m..
    7390: 00 00 00 66 FF DB DB DB C3 C3 00 00 00 00 76 00  // ...f..........v.
    73A0: 00 00 00 00 C3 C3 C3 C3 66 3C 18 00 00 00 00 77  // ........f<.....w
    73B0: 00 00 00 00 00 C3 C3 DB DB DB FF 66 00 00 00 00  // ...........f....
    73C0: 00 00 7B 62 C3 0B DB 74 03 E9 46 01 57 32 C0 B9  // ..{b...t..F.W2..
    73D0: 40 00 F3 AA 5F BB 48 90 26 89 1D 26 8C 4D 02 2E  // @..._.H.&..&.M..
    73E0: 8E 1E 0A 03 57 BE 49 04 B9 1E 00 83 C7 04 FC 8A  // ....W.I.........
    73F0: 04 26 88 05 46 47 E2 F7 5F A0 84 04 FE C0 26 88  // .&..FG.._.....&.
    7400: 45 22 A1 85 04 26 89 45 23 57 E8 D9 1B 5F 26 88  // E"...&.E#W..._&.
    7410: 5D 25 26 88 7D 26 8A 1E 49 04 E8 FC 05 74 05 80  // ]%&.}&..I....t..
    7420: FB 13 7F 1D 32 FF D1 E3 2E 8A 87 20 90 32 E4 0A  // ....2...... .2..
    7430: C0 74 01 40 26 89 45 27 2E 8A 87 21 90 26 88 45  // .t.@&.E'...!.&.E
    7440: 29 A1 85 04 8A 16 84 04 FE C2 F6 E2 B2 00 3D C8  // ).............=.
    7450: 00 7E 15 B2 01 3D 5E 01 7E 0E B2 02 3D 90 01 7E  // .~...=^.~...=..~
    7460: 07 B2 03 3D E0 01 7E 00 26 88 55 2A 8A 26 87 04  // ...=..~.&.U*.&..
    7470: 8A C4 24 01 C0 E0 04 80 E4 02 D0 E4 0A E0 80 F4  // ..$.............
    7480: 10 A0 89 04 24 0A 0A E0 E8 94 08 B2 C0 B0 30 EE  // ....$.........0.
    7490: 42 EC 24 08 C0 E0 02 0A C4 0C 01 26 88 45 2D B0  // B.$........&.E-.
    74A0: 03 26 88 45 31 E8 77 08 1E 06 32 D2 C4 1E A8 04  // .&.E1.w...2.....
    74B0: 8C C1 8C CE 3B CE 74 34 26 C5 77 04 8C D9 0B F1  // ....;.t4&.w.....
    74C0: 74 03 80 CA 10 26 C5 77 0C 8C D9 0B F1 74 03 80  // t....&.w.....t..
    74D0: CA 08 26 C5 77 08 8C D9 0B F1 74 03 80 CA 04 26  // ..&.w.....t....&
    74E0: C5 77 10 8C D9 0B F1 74 03 80 CA 01 07 1F 26 88  // .w.....t......&.
    74F0: 55 32 B0 03 BA C4 03 E8 E4 04 8A E0 C0 EC 02 8A  // U2..............
    7500: D4 8A F2 D0 EE 81 E2 04 04 25 03 03 0B C2 26 89  // .........%....&.
    7510: 45 2B 8B EC C6 46 1A 1B C3 0A C0 74 0F FE C8 74  // E+...F.....t...t
    7520: 36 FE C8 74 56 8B EC C6 46 1A 00 C3 B8 20 00 F6  // 6..tV...F.... ..
    7530: C1 01 74 03 83 C0 60 F6 C1 02 74 03 83 C0 3A F6  // ..t...`...t...:.
    7540: C1 04 74 03 05 03 03 83 C0 3F C1 E8 06 8B EC 89  // ..t......?......
    7550: 46 0E C6 46 1A 1C C3 8B FB 83 C7 20 F6 C1 01 74  // F..F....... ...t
    7560: 03 E8 85 00 F6 C1 02 74 03 E8 EF 00 F6 C1 04 74  // .......t.......t
    7570: 03 E8 F8 01 8B EC C6 46 1A 1C C3 F6 C1 01 74 06  // .......F......t.
    7580: E8 16 15 E8 25 01 F6 C1 02 74 03 E8 85 01 F6 C1  // ....%....t......
    7590: 04 74 03 E8 12 02 EB DC 8A C4 EE 42 EC AA FE C4  // .t.........B....
    75A0: 4A E2 F5 C3 E8 6B 04 BD C0 03 B9 15 00 32 E4 EC  // J....k.......2..
    75B0: 87 EA 8A C4 EE 42 EC AA FE C4 4A 87 EA E2 F0 EC  // .....B....J.....
    75C0: 87 EA B0 20 EE C3 26 8A 05 88 04 47 46 E2 F7 C3  // ... ..&....GF...
    75D0: 26 8A 25 EF 47 FE C0 E2 F7 C3 B2 C0 8A C4 EE 26  // &.%.G..........&
    75E0: 8A 05 47 FE C4 EE E2 F4 C3 9C FA 51 57 8B C7 2B  // ..G........QW..+
    75F0: C3 26 89 07 8B F7 E8 0A 04 EC 26 88 44 01 26 89  // .&........&.D.&.
    7600: 54 41 B2 CE EC 26 88 44 02 B2 CC EC 26 88 44 09  // TA...&.D....&.D.
    7610: B2 CA EC 26 88 44 04 B2 C4 EC 26 88 04 83 C7 05  // ...&.D....&.....
    7620: B9 04 00 B4 01 E8 70 FF 26 8A 04 EE 8B FE 83 C7  // ......p.&.......
    7630: 0A 26 8B 54 41 32 E4 B9 19 00 E8 5B FF 26 8A 44  // .&.TA2.....[.&.D
    7640: 01 EE E8 5F FF B2 CE 32 E4 B9 09 00 E8 49 FF 26  // ..._...2.....I.&
    7650: 8A 44 02 EE 5F 59 83 C7 60 9D C3 9C FA 8B C7 2B  // .D.._Y..`......+
    7660: C3 26 89 47 02 51 57 2E 8E 1E 0A 03 A0 10 04 24  // .&.G.QW........$
    7670: 30 AA BE 49 04 B9 1E 00 F3 A4 BE 84 04 B1 07 F3  // 0..I............
    7680: A4 BE A8 04 B1 04 F3 A4 BE 14 00 B1 04 F3 A4 BE  // ................
    7690: 74 00 B1 04 F3 A4 BE 7C 00 B1 04 F3 A4 BE 0C 01  // t......|........
    76A0: B1 04 F3 A4 5F 59 83 C7 3A 9D C3 9C FA 26 8B 3F  // ...._Y..:....&.?
    76B0: 03 FB 8B F7 51 8B FE 83 C7 05 BA C4 03 B8 00 01  // ....Q...........
    76C0: EF B0 01 B9 04 00 E8 07 FF 47 B2 C2 26 8A 44 09  // .........G..&.D.
    76D0: EE B2 C4 B8 00 03 EF 26 8A 04 EE 26 8B 54 41 B8  // .......&...&.TA.
    76E0: 11 00 EF B1 19 32 C0 E8 E6 FE 26 8A 44 01 EE 80  // .....2....&.D...
    76F0: C2 06 26 8A 44 04 EE EC B1 15 32 E4 E8 DB FE B0  // ..&.D.....2.....
    7700: 20 EE B1 09 32 C0 B2 CE E8 C5 FE 26 8A 44 02 EE  //  ...2......&.D..
    7710: 59 9D C3 9C FA 26 8B 7F 02 03 FB 06 51 2E 8E 1E  // Y....&......Q...
    7720: 0A 03 26 8A 05 80 26 10 04 CF 08 06 10 04 47 BE  // ..&...&.......G.
    7730: 49 04 B9 1E 00 E8 8E FE BE 84 04 B1 07 E8 86 FE  // I...............
    7740: BE A8 04 B1 04 E8 7E FE BE 14 00 B1 04 E8 76 FE  // ......~.......v.
    7750: BE 74 00 B1 04 E8 6E FE BE 7C 00 B1 04 E8 66 FE  // .t....n..|....f.
    7760: BE 0C 01 B1 04 E8 5E FE 59 07 9D C3 9C FA 8B C7  // ......^.Y.......
    7770: 2B C3 26 89 47 04 E8 A6 05 B2 C0 B0 34 EE 42 EC  // +.&.G.......4.B.
    7780: 26 88 05 BA C8 03 EC 26 88 45 01 50 4A 4A EC 26  // &......&.E.PJJ.&
    7790: 88 45 02 83 C7 03 B9 00 03 42 32 C0 EE 42 42 EC  // .E.......B2..BB.
    77A0: AA E2 FC 58 4A EE 9D C3 9C FA 26 8B 77 04 03 F3  // ...XJ.....&.w...
    77B0: E8 6C 05 B2 C0 B0 34 EE 26 8A 04 EE BA C6 03 26  // .l....4.&......&
    77C0: 8A 44 02 EE 56 42 42 83 C6 03 32 C0 EE 42 B9 00  // .D..VBB...2..B..
    77D0: 03 26 8A 04 EE 46 E2 F9 5E FE CA 26 8A 44 01 EE  // .&...F..^..&.D..
    77E0: 9D C3 BA CC 03 EC 24 FE 0A C4 B2 C2 EE C3 E8 A8  // ......$.........
    77F0: 12 B2 C0 86 C4 EE EB 00 EB 00 86 C4 EE EB 00 EB  // ................
    7800: 00 B0 20 EE C3 50 8A E0 80 E4 80 80 26 87 04 7F  // .. ..P......&...
    7810: 08 26 87 04 24 7F 8A E0 3C 07 7E 1E 26 F6 47 33  // .&..$...<.~.&.G3
    7820: 01 75 17 3C 23 74 13 3C 32 74 0F 3C 33 74 0B B4  // .u.<#t.<2t.<3t..
    7830: 03 26 F6 47 09 01 75 02 B4 07 88 26 49 04 BA B4  // .&.G..u....&I...
    7840: 03 80 0E 87 04 02 26 F6 47 09 01 74 07 B2 D4 80  // ......&.G..t....
    7850: 26 87 04 FD 89 16 63 04 C7 06 4E 04 00 00 C6 06  // &.....c...N.....
    7860: 62 04 00 B9 08 00 BF 50 04 FC 06 1E 07 33 C0 F3  // b......P.....3..
    7870: AB 07 26 8A 07 32 E4 A3 4A 04 26 8A 47 01 A2 84  // ..&..2..J.&.G...
    7880: 04 26 8A 47 02 A3 85 04 26 8B 47 03 A3 4C 04 26  // .&.G....&.G..L.&
    7890: 8B 47 14 86 C4 A3 60 04 58 C3 52 32 E4 33 D2 B0  // .G....`.X.R2.3..
    78A0: 0D CD 17 F6 C4 29 75 08 32 E4 33 D2 B0 0A CD 17  // .....)u.2.3.....
    78B0: 5A C3 06 1E 60 2E 8E 1E 0A 03 2E 83 0E 14 03 00  // Z...`...........
    78C0: 75 6E 80 3E 00 05 01 74 67 C6 06 00 05 01 8A 1E  // un.>...tg.......
    78D0: 62 04 32 FF D1 E3 8B FB 8B 85 50 04 8A 3E 62 04  // b.2.......P..>b.
    78E0: 50 32 F6 8A 0E 84 04 32 ED 41 51 8B 0E 4A 04 32  // P2.....2.AQ..J.2
    78F0: D2 E8 A6 FF F6 C4 29 75 3D 51 52 89 95 50 04 B4  // ......)u=QR..P..
    7900: 08 E8 B6 D4 0A C0 75 02 B0 20 33 D2 32 E4 CD 17  // ......u.. 3.2...
    7910: F6 C4 29 75 1F 5A FE C2 59 E2 DE FE C6 59 E2 CA  // ..)u.Z..Y....Y..
    7920: E8 77 FF 32 C0 A2 00 05 58 89 85 50 04 E8 AF 03  // .w.2....X..P....
    7930: 61 1F 07 CF 5A 59 59 B0 FF EB EA 52 2A F5 38 C6  // a...ZYY....R*.8.
    7940: 7D 02 32 C0 2E 8E 06 0C 03 5A C3 A0 85 04 F6 E3  // }.2......Z......
    7950: 8A F7 8B D8 8B CA BA C4 03 B8 02 0F EF B4 02 E8  // ................
    7960: 6D 00 8B D1 32 ED 8A E6 8A C6 F3 AA 03 FD 8A CA  // m...2...........
    7970: 4B 75 F7 32 E4 E8 57 00 C3 53 8A 1E 62 04 0B C0  // Ku.2..W..S..b...
    7980: 75 04 0A DB 74 03 E8 35 03 5B 8B F8 2B D1 81 C2  // u...t..5.[..+...
    7990: 01 01 8A C3 32 E4 C3 8A C6 32 F6 2B EA 0A DB 74  // ....2....2.+...t
    79A0: 2A 2A C3 F6 26 85 04 8B C8 52 B4 01 E8 20 00 B2  // **..&....R... ..
    79B0: C4 B8 02 0F EF 5A 1E 06 1F 8B C1 8B CA F3 A4 03  // .....Z..........
    79C0: F5 03 FD 48 75 F5 1F E8 81 FF C3 8A D8 EB F8 BA  // ...Hu...........
    79D0: CE 03 B0 05 EE 42 EC 24 FC 0A C4 EE 4A C3 9C FA  // .....B.$....J...
    79E0: EE 42 EB 00 EC 4A 9D C3 1E 2E 8E 1E 0A 03 8B 16  // .B...J..........
    79F0: 63 04 80 C2 06 1F C3 1E 2E 8E 1E 0A 03 8B 16 63  // c..............c
    7A00: 04 1F C3 50 BA CC 03 EC B2 D4 A8 01 75 02 B2 B4  // ...P........u...
    7A10: 58 C3 E8 EE FF 80 C2 06 C3 1E 2E 8E 1E 0A 03 80  // X...............
    7A20: 3E 49 04 03 74 13 80 3E 49 04 02 74 0C 80 3E 49  // >I..t..>I..t..>I
    7A30: 04 01 74 05 80 3E 49 04 00 1F C3 50 2E 8E 06 0E  // ..t..>I....P....
    7A40: 03 A0 10 04 24 30 3C 30 74 05 2E 8E 06 10 03 58  // ....$0<0t......X
    7A50: 0B C0 74 03 E8 E1 01 03 06 4E 04 81 C2 01 01 2B  // ..t......N.....+
    7A60: D1 32 ED 8B 2E 4A 04 8B F8 8B F0 8B C5 F6 E3 D1  // .2...J..........
    7A70: E0 D1 E5 0A DB 75 02 8A DE 38 F3 7E 02 8A DE C3  // .....u...8.~....
    7A80: FC 8A D8 8B C1 E8 B3 FF 03 F0 3A 16 4A 04 74 06  // ..........:.J.t.
    7A90: 06 1F E8 1B 00 C3 06 1F E8 40 00 C3 FC 8A D8 8A  // .........@......
    7AA0: C1 8A E6 E8 95 FF F7 DD 2B F0 06 1F E8 01 00 C3  // ........+.......
    7AB0: 53 8A CE 2A CB 32 ED 32 F6 2B EA 2B EA E3 0E 8A  // S..*.2.2.+.+....
    7AC0: E1 8B CA F3 A5 03 F5 03 FD FE CC 75 F4 58 B0 20  // ...........u.X. 
    7AD0: 8A CA F3 AB 03 FD FE CB 75 F6 C3 53 8A C6 2A C3  // ........u..S..*.
    7AE0: 74 06 F6 E2 8B C8 F3 A5 58 8B C8 F6 E2 91 B0 20  // t.......X...... 
    7AF0: F3 AB C3 8B D8 E8 2E 00 2E 8E 1E 10 03 8A C3 22  // ..............."
    7B00: DF D3 E3 A8 80 74 03 30 1C C3 F6 D7 8A 34 22 F7  // .....t.0.....4".
    7B10: 0A DE 88 1C C3 8A FC E8 0C 00 2E 8E 1E 10 03 8A  // ................
    7B20: 04 D2 E8 22 C7 C3 B0 28 F6 E2 F6 C2 01 74 03 05  // ..."...(.....t..
    7B30: D8 1F 8B F1 C1 EE 02 80 FF 05 7F 0C 03 F0 F6 D1  // ................
    7B40: 80 E1 03 D0 E1 B7 03 C3 D1 EE 03 F0 F6 D1 80 E1  // ................
    7B50: 07 B7 01 C3 FC 8A D8 2E 8E 06 10 03 8B C1 E8 86  // ................
    7B60: 00 75 02 8A DE 03 F0 E8 24 00 C3 FC 8A D8 2E 8E  // .u......$.......
    7B70: 06 10 03 8A C1 8A E6 E8 6D 00 75 02 8A DE F7 DD  // ........m.u.....
    7B80: 81 C6 F0 00 81 C7 F0 00 2B F0 E8 01 00 C3 8A CE  // ........+.......
    7B90: 2A CB E3 2C 51 8A CA 56 57 D1 E9 F3 A5 13 C9 F3  // *..,Q..VW.......
    7BA0: A4 8A CA 2B F1 2B F9 81 C6 00 20 81 C7 00 20 D1  // ...+.+.... ... .
    7BB0: E9 F3 A5 13 C9 F3 A4 5F 5E 03 F5 03 FD 59 E2 D4  // ......._^....Y..
    7BC0: 8A C7 8A E7 8A CA 57 D1 E9 F3 AB 13 C9 F3 AA 8A  // ......W.........
    7BD0: CA 2B F9 81 C7 00 20 D1 E9 F3 AB 13 C9 F3 AA 5F  // .+.... ........_
    7BE0: 03 FD FE CB 75 DE C3 E8 B0 00 81 C2 01 01 2B D1  // ....u.........+.
    7BF0: 38 F3 76 02 32 DB 51 B1 02 D2 E6 D2 E3 59 32 ED  // 8.v.2.Q......Y2.
    7C00: BD 50 00 80 3E 49 04 06 74 04 D0 E2 D1 E0 06 1F  // .P..>I..t.......
    7C10: 8B F8 8B F0 B0 50 F6 E3 0A DB C3 52 53 8A DF 32  // .....P.....RS..2
    7C20: FF D1 E3 8B 87 50 04 E8 0E 00 50 D1 EB A1 4C 04  // .....P....P...L.
    7C30: F7 E3 5B 03 C3 5B 5A C3 52 8B D0 A0 4A 04 F6 E4  // ..[..[Z.R...J...
    7C40: 32 F6 03 C2 D1 E0 5A C3 8B E8 83 E5 0F 2E 8A A6  // 2.....Z.........
    7C50: F8 7B 8B E8 C1 ED 04 83 E5 0F 2E 8A 86 F8 7B C3  // .{............{.
    7C60: 00 03 0C 0F 30 33 3C 3F C0 C3 CC CF F0 F3 FC FF  // ....03<?........
    7C70: 26 8B 04 86 E0 BA 00 80 F6 C4 C0 74 02 0A D6 D0  // &..........t....
    7C80: EE C1 E0 02 75 F2 88 56 00 45 C3 8B 16 63 04 8A  // ....u..V.E...c..
    7C90: C5 86 E0 EF 8A E1 FE C0 EF C3 52 8B D0 8A C4 F6  // ..........R.....
    7CA0: 26 4A 04 C1 E0 02 32 F6 03 C2 5A C3 53 8A DF 32  // &J....2...Z.S..2
    7CB0: FF D1 E3 8B 87 50 04 D1 EB E8 02 00 5B C3 52 8B  // .....P......[.R.
    7CC0: D0 32 F6 52 8A C4 F6 26 85 04 F7 26 4A 04 5A 03  // .2.R...&...&J.Z.
    7CD0: C2 0A DB 74 08 03 06 4C 04 FE CB 75 F8 5A C3 52  // ...t...L...u.Z.R
    7CE0: 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 D1 E0 03 06 4E  // ...J...2.......N
    7CF0: 04 D1 F8 8B C8 B4 0E E8 91 FF 5A C3 8B C2 F7 26  // ..........Z....&
    7D00: 4A 04 8B F9 C1 EF 03 03 F8 0A FF 74 0A 8A C7 32  // J..........t...2
    7D10: E4 F7 26 4C 04 03 F8 80 E1 07 B4 80 D2 EC C3 E8  // ..&L............
    7D20: F0 FC EC C3 E8 F8 FF B2 C0 B0 20 EE C3 E8 EF FF  // .......... .....
    7D30: B2 C0 32 C0 EE C3 C4 3E A8 04 26 C4 7D 04 8C C5  // ..2....>..&.}...
    7D40: 0B EF C3 53 B0 0E E8 95 FC 8A E0 B0 0F E8 8E FC  // ...S............
    7D50: 8B D8 B8 0E AA EF B8 0F 55 EF B0 0E E8 7F FC 3C  // ........U......<
    7D60: AA 74 0D B0 0F E8 76 FC 3C 55 74 04 32 C0 5B C3  // .t....v.<Ut.2.[.
    7D70: B0 0E 8A E7 EF FE C0 8A E3 EF B0 01 0A C0 5B C3  // ..............[.
    7D80: 8A EE 8A 36 85 04 06 1F 0A DB 74 25 8A C5 2A C3  // ...6......t%..*.
    7D90: F6 E6 8B C8 52 32 F6 C1 E2 02 8B C2 D1 E2 2B D5  // ....R2........+.
    7DA0: 51 8B C8 F3 A5 2B FA 2B F2 59 E2 F4 5A E8 05 00  // Q....+.+.Y..Z...
    7DB0: C3 8A DD EB F8 8A C6 F6 E3 8B C8 8A C7 8A E0 32  // ...............2
    7DC0: F6 C1 E2 02 8B DA D1 E2 8B F1 2B D5 8B CB F3 AB  // ..........+.....
    7DD0: 2B FA 4E 75 F7 C3 2E 8E 1E 0A 03 89 0E 60 04 8A  // +.Nu.........`..
    7DE0: C5 24 60 A8 20 74 06 B9 00 1E E9 94 00 F6 06 87  // .$`. t..........
    7DF0: 04 01 0F 85 8B 00 80 3E 49 04 07 74 06 E8 19 FC  // .......>I..t....
    7E00: 74 01 C3 F6 06 87 04 08 74 03 CD 42 C3 8A 36 85  // t.......t..B..6.
    7E10: 04 8A D6 FE CA 38 CD 7E 1F 0A C9 74 64 8A E9 8A  // .....8.~...td...
    7E20: CE FE C9 EB 5C 38 D1 74 58 8A CE 80 FD 03 7C 04  // ....\8.tX.....|.
    7E30: 8A E9 D0 ED FE C9 EB 49 80 F9 03 7E 44 8A E1 2A  // .......I...~D..*
    7E40: E5 0A E4 75 0A 38 CA 74 38 FE CA 38 CA 74 32 8A  // ...u.8.t8..8.t2.
    7E50: C5 0A C1 38 F0 7E 0A 80 FC 02 7E 12 80 FD 02 7F  // ...8.~....~.....
    7E60: C8 80 FC 03 7D BF 8A D6 FE CA 38 D1 74 13 8A CE  // ....}.....8.t...
    7E70: FE C9 FE C9 8A E9 2A EC 80 FE 08 7F 04 FE C1 FE  // ......*.........
    7E80: C5 B4 0A E8 05 FE C3 2E 8E 1E 0A 03 A2 62 04 32  // .............b.2
    7E90: E4 8B F0 F7 26 4C 04 A3 4E 04 8B C8 E8 7A FB 74  // ....&L..N....z.t
    7EA0: 07 80 3E 49 04 07 77 02 D1 F9 B4 0C E8 DC FD D1  // ..>I..w.........
    7EB0: E6 8B 84 50 04 E8 27 FE C3 2E 8E 1E 0A 03 8A 26  // ...P..'........&
    7EC0: 49 04 E8 9D 9C 74 07 C7 06 50 04 00 00 C3 E8 48  // I....t...P.....H
    7ED0: FB 74 0B 80 FC 07 74 06 77 08 E8 77 FC C3 E8 9F  // .t....t.w..w....
    7EE0: FB C3 80 FC 13 7C 03 74 1F C3 E8 4E FA 8A D8 8B  // .....|.t...N....
    7EF0: C1 E8 85 FA 8B 2E 4A 04 52 F6 26 85 04 F7 E5 8B  // ......J.R.&.....
    7F00: F7 03 F0 5A E8 90 FA C3 E8 30 FA 8A D8 8B C1 E8  // ...Z.....0......
    7F10: 67 FA C1 E7 03 52 8B 2E 4A 04 C1 E5 03 F7 26 85  // g....R..J.....&.
    7F20: 04 F7 E5 8B F7 03 F0 5A E8 55 FE C3 2E 8E 1E 0A  // .......Z.U......
    7F30: 03 8A 26 49 04 E8 E1 FA 74 0C 80 FC 07 74 07 77  // ..&I....t....t.w
    7F40: 40 80 FC 03 7F 04 E8 53 FB C3 E8 1E FC C3 E8 EA  // @......S........
    7F50: F9 8A D8 8A C1 8A E6 FE C4 E8 1D FA 2B 3E 4A 04  // ............+>J.
    7F60: C1 E7 03 52 F7 26 85 04 F7 26 4A 04 C1 E0 03 8B  // ...R.&...&J.....
    7F70: F7 2B F0 5A 8B 2E 4A 04 C1 E5 03 F7 DD E8 00 FE  // .+.Z..J.........
    7F80: C3 80 FC 13 7C 03 74 C6 C3 E8 AF F9 8A D8 8A C1  // ....|.t.........
    7F90: 8A E6 FE C4 E8 E2 F9 52 8B 2E 4A 04 F7 26 85 04  // .......R..J..&..
    7FA0: F7 E5 2B FD 8B F7 2B F0 5A F7 DD E8 E9 F9 C3 2E  // ..+...+.Z.......
    7FB0: 8E 1E 0A 03 2E 8E 06 10 03 E8 5D FA 74 11 80 3E  // ..........].t..>
    7FC0: 49 04 07 7C 18 2E 8E 06 0E 03 74 03 E9 B1 00 E8  // I..|......t.....
    7FD0: 49 FC 8B D8 26 8B 07 8B EC 89 46 1A C3 A1 50 04  // I...&.....F...P.
    7FE0: E8 B7 FC 8B F0 BB 08 00 2B E3 8B EC 80 3E 49 04  // ........+....>I.
    7FF0: 06 75 1F B9 04 00 26 8A 04 88 46 00 45 26 8A 84  // .u....&...F.E&..
    8000: 00 20 88 46 00 45 83 C6 50 E2 EB B8 00 02 B2 80  // . .F.E..P.......
    8010: EB 17 D1 E6 B9 04 00 E8 56 FC 81 C6 00 20 E8 4F  // ........V.... .O
    8020: FC 81 EE B0 1F E2 F0 EB E2 2B EB C4 3E 0C 01 32  // .........+..>..2
    8030: F6 80 FB 0E 75 09 26 83 7D FE 10 75 02 B6 80 16  // ....u.&.}..u....
    8040: 1F 8B F5 8B CB F6 C6 80 74 01 47 56 57 F3 A6 5F  // ........t.GVW.._
    8050: 5E 74 23 FE C0 03 FB F6 C6 80 74 01 47 FE CA 75  // ^t#.......t.G..u
    8060: E2 FE CC 74 0F 2E 8E 1E 0A 03 C4 3E 7C 00 B0 80  // ...t.......>|...
    8070: B2 80 EB CB 32 C0 8B E5 03 E3 8B EC 89 46 1A C3  // ....2........F..
    8080: 80 3E 49 04 13 7C 05 75 02 EB 5A C3 2E 8E 06 0C  // .>I..|.u..Z.....
    8090: 03 E8 18 FC 8B F0 8B 1E 85 04 2B E3 8B EC B8 05  // ..........+.....
    80A0: 08 B9 05 00 BA CE 03 80 3E 49 04 0F 72 1A F6 06  // ........>I..r...
    80B0: 87 04 60 75 13 B4 0A F7 C6 01 00 75 02 B4 05 B0  // ..`u.......u....
    80C0: 07 EF B8 05 18 B9 05 01 EF 51 8B CB 26 8A 04 F6  // .........Q..&...
    80D0: D0 88 46 00 45 03 36 4A 04 E2 F1 58 EF B8 00 01  // ..F.E.6J...X....
    80E0: 32 D2 E9 44 FF 2E 8E 06 0C 03 A1 50 04 8B D0 32  // 2..D.......P...2
    80F0: F6 52 8A C4 32 E4 F7 26 4A 04 F7 26 85 04 5A 03  // .R..2..&J..&..Z.
    8100: C2 8B F0 8B 1E 85 04 2B E3 8B EC 53 8B 3E 4A 04  // .......+...S.>J.
    8110: 4F C1 E7 03 C1 E6 03 B9 08 00 32 E4 26 8A 04 D0  // O.........2.&...
    8120: E4 0A C0 74 03 80 CC 01 46 E2 F1 88 66 00 45 03  // ...t....F...f.E.
    8130: F7 4B 75 E3 5B B8 00 01 32 D2 E9 EC FE 33 ED EB  // .Ku.[...2....3..
    8140: 03 BD 01 00 2E 8E 1E 0A 03 2E 8E 06 10 03 8A 26  // ...............&
    8150: 49 04 E8 C4 F8 74 0F 2E 8E 06 0E 03 80 FC 07 74  // I....t.........t
    8160: 05 7C 3D E9 0B 02 8A E3 8B F0 8A DF 32 FF D1 E3  // .|=.........2...
    8170: 8B 87 50 04 8B D0 A0 4A 04 F6 E4 32 F6 03 C2 8B  // ..P....J...2....
    8180: F8 D1 E7 0A DB 74 0B D0 EB A1 4C 04 03 F8 FE CB  // .....t....L.....
    8190: 75 FA 8B C6 0B ED 75 03 F3 AB C3 AA 47 E2 FC C3  // u.....u.....G...
    81A0: 50 2E 8E 06 10 03 A1 50 04 E8 EE FA 8B F8 A0 50  // P......P.......P
    81B0: 04 8A 26 4A 04 8B E8 58 A8 80 74 08 24 7F C5 36  // ..&J...X..t.$..6
    81C0: 7C 00 EB 04 C5 36 0C 01 8A FC 32 E4 C1 E0 03 03  // |....6....2.....
    81D0: F0 80 FF 06 74 69 D1 E7 8A F3 B0 55 80 E3 03 F6  // ....ti.....U....
    81E0: E3 8A D8 8A F8 8B C5 50 B2 04 F6 C6 80 75 27 AC  // .......P.....u'.
    81F0: E8 55 FA 23 C3 AB AC E8 4E FA 23 C3 26 89 85 FE  // .U.#....N.#.&...
    8200: 1F 83 C7 4E FE CA 75 E7 83 EE 08 81 EF 3E 01 58  // ...N..u......>.X
    8210: E8 72 00 E2 D2 C3 AC E8 2E FA 23 C3 26 31 05 AC  // .r........#.&1..
    8220: E8 25 FA 23 C3 26 31 85 00 20 83 C7 50 FE CA 75  // .%.#.&1.. ..P..u
    8230: E5 83 EE 08 81 EF 3E 01 58 E8 49 00 E2 A9 C3 8B  // ......>.X.I.....
    8240: C5 50 B2 04 F6 C3 80 74 1F AC 26 30 05 AC 26 30  // .P.....t..&0..&0
    8250: 85 00 20 83 C7 50 FE CA 7F EF 83 EE 08 81 EF 3F  // .. ..P.........?
    8260: 01 58 E8 20 00 E2 DA C3 AC AA AC 26 88 85 FF 1F  // .X. .......&....
    8270: 83 C7 4F FE CA 7F F1 83 EE 08 81 EF 3F 01 58 E8  // ..O.........?.X.
    8280: 03 00 E2 BD C3 FE C0 38 E0 72 06 32 C0 81 C7 F0  // .......8.r.2....
    8290: 00 C3 8A 16 85 04 F6 E2 8B F0 32 F6 8B EA 66 0F  // ..........2...f.
    82A0: B6 06 51 04 F6 E2 66 0F B7 16 4A 04 83 FA 64 75  // ..Q...f...J...du
    82B0: 03 BA 68 00 83 FA 5A 75 03 BA 60 00 81 FA AF 00  // ..h...Zu..`.....
    82C0: 75 03 BA B0 00 52 F7 E2 66 0F B7 F8 66 0F B6 06  // u....R..f...f...
    82D0: 50 04 66 03 F8 66 C1 CF 10 03 FA 66 C1 C7 03 81  // P.f..f.....f....
    82E0: CF 00 FF 66 C1 C7 10 5A 8A E2 4A C1 E2 03 A0 50  // ...f...Z..J....P
    82F0: 04 50 C5 06 0C 01 03 F0 2E 8E 06 0C 03 58 57 51  // .P...........XWQ
    8300: 50 9C FC 8B CD E8 3B 00 B5 08 AC 8A E0 8A C7 D0  // P.....;.........
    8310: E4 73 02 8A C3 26 88 05 66 47 FE CD 75 EF 66 03  // .s...&..fG..u.f.
    8320: FA E2 E2 9D 58 59 5F 83 C7 08 FE C0 38 E0 72 0E  // ....XY_.....8.r.
    8330: 51 32 C0 8B CD 49 03 FA 83 C7 08 E2 F9 59 2B F5  // Q2...I.......Y+.
    8340: E2 BC C3 06 52 33 C0 8E C0 66 C1 C7 10 8B C7 66  // ....R3...f.....f
    8350: C1 C7 10 E8 0C 98 74 16 38 E0 74 12 0F B6 D0 E8  // ......t.8.t.....
    8360: 91 C9 8A E0 66 C1 C7 10 8B F8 66 C1 C7 10 5A 07  // ....f.....f...Z.
    8370: C3 80 FC 13 7C 0B 0F 84 18 FF 80 FC 62 0F 84 11  // ....|.......b...
    8380: FF E8 01 00 C3 80 FC 11 75 06 80 E3 80 80 CB 0F  // ........u.......
    8390: 50 53 8A DF 32 FF D1 E3 8B 97 50 04 5B 2E 8E 06  // PS..2.....P.[...
    83A0: 0C 03 E8 07 F9 8B F8 8B 2E 85 04 58 32 F6 52 8B  // ...........X2.R.
    83B0: 36 4A 04 56 8A 26 85 04 C5 36 0C 01 80 FC 0E 75  // 6J.V.&...6.....u
    83C0: 09 83 7C FE 10 75 03 B4 10 46 F6 E4 03 F0 B6 03  // ..|..u...F......
    83D0: F6 C3 80 75 6D B2 C4 B8 02 0F EF 5A 58 50 52 4A  // ...um......ZXPRJ
    83E0: 8A E0 57 51 51 57 8B CD 32 C0 AA 03 FA E2 FB 5F  // ..WQQW..2......_
    83F0: 47 FE C4 38 D4 76 0A 32 E4 8B CD 49 03 FA 47 E2  // G..8.v.2...I..G.
    8400: FB 59 E2 E0 59 5F BA C4 03 B0 02 8A E3 EF 5B 4B  // .Y..Y_........[K
    8410: 5A 51 57 8B CD AC 26 8A 25 AA 03 FB E2 F7 5F 47  // ZQW...&.%....._G
    8420: 2B F5 42 3B D3 76 0A 33 D2 8B CD 49 03 FB 47 E2  // +.B;.v.3...I..G.
    8430: FB 59 E2 DD BA CE 03 B8 03 00 EF B2 C4 B8 02 0F  // .Y..............
    8440: EF C3 B2 CE B8 03 18 EF EB BC 2E 8E 1E 0A 03 80  // ................
    8450: 3E 63 04 B4 74 0B BA CC 03 EC A8 01 75 04 CD 42  // >c..t.......u..B
    8460: C3 C3 E8 D1 F8 0A FF 75 1C 8A E3 80 E4 1F 80 26  // .......u.......&
    8470: 66 04 E0 08 26 66 04 E8 2D 00 8A 1E 66 04 80 E3  // f...&f..-...f...
    8480: 20 B1 05 D2 EB E8 91 F5 74 19 A0 66 04 24 DF 80  //  .......t..f.$..
    8490: E3 01 74 02 0C 20 A2 66 04 24 10 0C 02 0A D8 E8  // ..t.. .f.$......
    84A0: 53 00 C3 E8 7E F8 C3 53 50 80 E3 0F 8A FB D0 E3  // S...~..SP.......
    84B0: 81 E3 10 07 0A DF E8 60 F5 74 0E B4 00 8A C3 E8  // .......`.t......
    84C0: 2C F3 0B ED 74 03 26 88 1D 8A C3 E8 0B 00 0B ED  // ,...t.&.........
    84D0: 74 04 26 88 5D 10 58 5B C3 8A E0 1E 2E 8E 1E 0A  // t.&.].X[........
    84E0: 03 80 3E 49 04 33 1F 7F 08 8A C4 B4 11 E8 FE F2  // ..>I.3..........
    84F0: C3 E8 30 F8 C3 9C FA E8 9F 05 B2 C0 B9 03 00 B4  // ..0.............
    8500: 01 8A C4 EE 8A C3 EE 0B ED 74 04 47 26 88 1D FE  // .........t.G&...
    8510: C4 80 C3 02 E2 EB B0 20 EE 9D C3 2E 8E 1E 0A 03  // ....... ........
    8520: 8A 26 49 04 E8 F2 F4 74 0A 80 FC 07 77 06 74 03  // .&I....t....w.t.
    8530: E8 C0 F5 C3 80 FC 13 7C 03 74 4C C3 8A D8 E8 BB  // .......|.tL.....
    8540: F7 BA CE 03 B0 08 EF 2E 8E 1E 0C 03 F6 C3 80 75  // ...............u
    8550: 1C B2 C4 B8 02 FF EF 8A 25 C6 05 00 8A E3 EF 8A  // ........%.......
    8560: 25 B4 FF 88 25 EF B2 CE B8 08 FF EF C3 B8 03 18  // %...%...........
    8570: EF B2 C4 B0 02 8A E3 EF 8A 25 B4 FF 88 25 EF B2  // .........%...%..
    8580: CE B8 03 00 EF EB E1 50 2E 8E 06 0C 03 A1 4A 04  // .......P......J.
    8590: C1 E0 03 F7 E2 03 C1 8B F8 58 26 88 05 C3 2E 8E  // .........X&.....
    85A0: 1E 0A 03 8A 26 49 04 E8 6F F4 74 0F 80 FC 07 77  // ....&I..o.t....w
    85B0: 0B 74 08 E8 5F F5 8B EC 89 46 1A C3 80 FC 13 7C  // .t.._....F.....|
    85C0: 03 74 29 C3 E8 35 F7 8A CC 2E 8E 1E 0C 03 BA CE  // .t)..5..........
    85D0: 03 32 FF B8 04 03 EF D0 E7 8A 1D 22 D9 74 03 80  // .2.........".t..
    85E0: CF 01 FE CC 7D F0 8B EC 88 7E 1A C3 A1 4A 04 C1  // ....}....~...J..
    85F0: E0 03 F7 E2 03 C1 8B F8 2E 8E 1E 0C 03 8A 05 8B  // ................
    8600: EC 88 46 1A C3 2E 8E 1E 0A 03 8A 3E 62 04 8A CF  // ..F........>b...
    8610: D0 E1 32 ED BE 50 04 03 F1 8B 14 8A 0E 49 04 3C  // ..2..P.......I.<
    8620: 0D 76 4A 2E 8E 06 10 03 E8 EE F3 75 33 8A 1E 4A  // .vJ........u3..J
    8630: 04 8A F8 8A C6 F6 E3 8A CA 03 C8 D1 E1 03 0E 4E  // ...............N
    8640: 04 8B F9 8A C7 AA D1 E9 41 FE C2 38 DA 73 59 89  // ........A..8.sY.
    8650: 14 8B 16 63 04 B0 0E 8A E5 EF 8A E1 FE C0 EF C3  // ...c............
    8660: 2E 8E 06 0E 03 80 F9 07 74 C3 E9 83 00 75 04 32  // ........t....u.2
    8670: D2 EB 0F 3C 0A 75 1D 3A 36 84 04 75 03 E9 93 00  // ...<.u.:6..u....
    8680: FE C6 89 14 E8 92 F3 75 05 80 F9 07 7F 05 8B C2  // .......u........
    8690: E8 4C F6 C3 3C 07 75 04 E8 19 7F C3 3C 08 75 83  // .L..<.u.....<.u.
    86A0: 0A D2 74 DE FE CA EB DA 32 FF 32 D2 2B CB 3A 36  // ..t.....2.2.+.:6
    86B0: 84 04 74 06 FE C6 03 CB EB 95 89 14 8B 16 63 04  // ..t...........c.
    86C0: B0 0E 8A E5 EF 8A E1 FE C0 EF 2B FB 2B FB 26 8A  // ..........+.+.&.
    86D0: 65 02 50 8B 3E 4E 04 8B F3 D1 E6 03 F7 A0 84 04  // e.P.>N..........
    86E0: F6 E3 8B C8 06 1F F3 A5 8B CB 58 B0 20 F3 AB C3  // ..........X. ...
    86F0: B9 01 00 B4 0A E8 C2 C6 FE C2 3A 16 4A 04 74 03  // ..........:.J.t.
    8700: 89 14 C3 32 FF 32 D2 89 14 3A 36 84 04 74 2E FE  // ...2.2...:6..t..
    8710: C6 EB ED 89 14 2E 8E 06 10 03 E8 FC F2 74 0E 2E  // .............t..
    8720: 8E 06 0E 03 80 F9 07 74 04 32 FF EB 10 8B C2 E8  // .......t.2......
    8730: AD F5 8B F9 D1 E7 4F 8B 1E 4A 04 EB 91 33 C9 8A  // ......O..J...3..
    8740: 36 84 04 8A 16 4A 04 FE CA B0 01 E9 70 F7 2E 8E  // 6....J......p...
    8750: 1E 0A 03 F6 06 87 04 08 74 03 CD 42 C3 E8 76 F6  // ........t..B..v.
    8760: 8B EC C6 46 1B 00 C3 2E 8E 1E 0A 03 8A DF 32 FF  // ...F..........2.
    8770: D1 E3 89 97 50 04 D0 EB 38 1E 62 04 75 05 8B C2  // ....P...8.b.u...
    8780: E8 5C F5 C3 2E 8E 1E 0A 03 8A DF 32 FF D1 E3 8B  // .\.........2....
    8790: 97 50 04 8B 0E 60 04 8B EC 89 4E 16 89 56 12 C3  // .P...`....N..V..
    87A0: 2E 8E 1E 0A 03 A0 87 04 24 80 0A 06 49 04 8A 26  // ........$...I..&
    87B0: 4A 04 F6 06 87 04 08 75 2D E8 5D F2 74 07 80 3E  // J......u-.].t..>
    87C0: 49 04 07 7F 21 51 8A CC 8A 2E 84 04 BE 91 87 81  // I...!Q..........
    87D0: FE 9A 87 74 10 2E 3B 0C 74 05 83 C6 03 EB F0 24  // ...t..;.t......$
    87E0: 80 2E 0A 44 02 59 8A 3E 62 04 8B EC 89 46 1A 89  // ...D.Y.>b....F..
    87F0: 5E 0E 89 4E 16 89 56 12 C3 84 18 23 84 2B 33 84  // ^..N..V....#.+3.
    8800: 2A 32 2E 8E 1E 0A 03 3C 04 7F 1B 50 52 BA CC 03  // *2.....<...PR...
    8810: EC A8 01 5A 58 74 08 80 3E 63 04 D4 74 08 C3 80  // ...ZXt..>c..t...
    8820: 3E 63 04 B4 75 F8 3C 1C 73 F4 32 E4 8B E8 D1 E5  // >c..u.<.s.2.....
    8830: 2E FF A6 CD 87 05 88 25 88 37 88 6C 88 B6 87 B6  // .......%.7.l....
    8840: 87 B6 87 91 88 A9 88 AD 88 B6 87 B6 87 B6 87 B6  // ................
    8850: 87 B6 87 B6 87 DB 88 B6 87 DF 88 FA 88 B6 87 39  // ...............9
    8860: 89 B6 87 47 89 62 89 69 89 75 89 99 89 80 3E 49  // ...G.b.i.u....>I
    8870: 04 13 74 15 E8 BF F4 8B C3 86 E0 E8 70 EF 0B ED  // ..t.........p...
    8880: 74 07 8A C7 32 FF 26 88 01 E8 93 F4 C3 E8 A6 F4  // t...2.&.........
    8890: 8A C7 E8 44 FC 0B ED 74 F0 26 88 7D 11 EB EA 80  // ...D...t.&.}....
    88A0: 3E 49 04 13 74 E3 06 E8 8C F4 1F 0B ED 74 07 8B  // >I..t........t..
    88B0: F2 B9 11 00 F3 A4 8B F2 E8 DE 01 32 E4 B9 10 00  // ...........2....
    88C0: B2 C0 9C FA 8A C4 EE AC EE 9D FE C4 E2 F4 AC E8  // ................
    88D0: 07 FC EB B5 80 FB 01 77 B0 E8 43 F4 B2 C0 B0 30  // .......w..C....0
    88E0: E8 FB F0 24 F7 80 26 65 04 DF 80 FB 00 74 07 0C  // ...$..&e.....t..
    88F0: 08 80 0E 65 04 20 EE EB 90 E8 9D 01 8A C3 B2 C0  // ...e. ..........
    8900: E8 DB F0 8B C8 EE B0 20 EE 8B EC 88 4E 0F E9 78  // ....... ....N..x
    8910: FF B3 11 EB E4 8B FA E8 05 F4 B9 10 00 32 E4 B2  // .............2..
    8920: C0 8A C4 9C FA EE 42 EC 26 88 05 FE C4 4A EE 9D  // ......B.&....J..
    8930: 47 E2 EE 9C FA B0 11 EE 42 EC 9D 26 88 05 E8 E3  // G.......B..&....
    8940: F3 EB 5A E8 CE 00 C3 8B FA 51 8B C3 26 8A 35 26  // ..Z......Q..&.5&
    8950: 8A 6D 01 26 8A 4D 02 E8 CA 00 83 C7 03 43 59 E2  // .m.&.M.......CY.
    8960: E8 C3 0A DB 75 1A E8 B6 F3 B2 C0 B0 30 E8 6E F0  // ....u.......0.n.
    8970: 24 7F F6 C7 01 74 02 0C 80 B4 30 E8 70 EE EB 1D  // $....t....0.p...
    8980: FE CB 75 1C E8 98 F3 B2 C0 B0 30 E8 50 F0 EE A8  // ..u.......0.P...
    8990: 80 75 03 C0 E7 02 B4 34 8A C7 E8 51 EE E8 7F F3  // .u.....4...Q....
    89A0: C3 8A C3 E8 D1 00 8B EC 89 4E 16 88 76 13 C3 8B  // .........N..v...
    89B0: FA 51 8B C3 E8 C3 00 26 88 35 26 88 6D 01 26 88  // .Q.....&.5&.m.&.
    89C0: 4D 02 83 C7 03 43 59 E2 E8 C3 BA C6 03 8A C3 EE  // M....CY.........
    89D0: C3 BA C6 03 EC 32 E4 8B EC 89 46 0E C3 E8 3F F3  // .....2....F...?.
    89E0: B2 C0 B0 34 E8 F7 EF 8A F8 EE B0 30 E8 EF EF B3  // ...4.......0....
    89F0: 01 A8 80 75 05 B3 00 C0 EF 02 8B EC 89 5E 0E EB  // ...u.........^..
    8A00: 9C 51 8B C3 E8 73 00 E8 2A 00 8A C3 E8 52 00 43  // .Q...s..*....R.C
    8A10: 59 E2 EE C3 F6 06 89 04 02 74 03 E8 16 00 8A C3  // Y........t......
    8A20: E8 39 00 C3 F6 06 89 04 02 74 03 E8 06 00 8A C3  // .9.......t......
    8A30: E8 2E 00 C3 50 B0 1E F6 E6 50 B0 3B F6 E5 50 B0  // ....P....P.;..P.
    8A40: 0B F6 E1 59 03 C1 59 03 C1 B1 64 F6 F1 80 FC 32  // ...Y..Y...d....2
    8A50: 7C 02 FE C0 8A F0 8A E8 8A C8 58 C3 52 E8 39 00  // |.........X.R.9.
    8A60: 5A 53 8B DA BA C8 03 9C FA EE 42 8A C7 EE 8A C5  // ZS........B.....
    8A70: EE 8A C1 EE 9D 5B C3 E8 1F 00 53 9C FA BA C7 03  // .....[....S.....
    8A80: EE 42 42 EC 8A F8 EB 00 EB 00 EC 8A E8 EB 00 EB  // .BB.............
    8A90: 00 EC 8A C8 8A F7 9D 5B C3 50 51 E8 81 F2 B9 FF  // .......[.PQ.....
    8AA0: 7F EC A8 08 75 02 E2 F9 59 58 C3 2E 8E 1E 0A 03  // ....u...YX......
    8AB0: 8B F8 24 0F 81 E7 F0 00 C1 EF 03 83 FF 06 7F 18  // ..$.............
    8AC0: 2E FF A5 5D 8A 65 8A 7A 8A 18 8B 74 8B 3C 03 74  // ...].e.z...t.<.t
    8AD0: 08 3C 04 7F 03 E8 CF 01 C3 BA C4 03 B0 03 8A E3  // .<..............
    8AE0: EF C3 3C 04 77 F2 50 53 50 52 8B 16 63 04 B0 07  // ..<.w.PSPR..c...
    8AF0: E8 EB EE 8A E0 D0 EC 80 E4 01 A8 40 74 03 80 CC  // ...........@t...
    8B00: 02 B0 12 E8 D8 EE 40 A3 85 04 B0 09 E8 CF EE A8  // ......@.........
    8B10: 80 74 04 D1 2E 85 04 A1 85 04 8B D0 3D F4 01 73  // .t..........=..s
    8B20: 1B BA E0 01 3D C2 01 73 13 BA 90 01 3D 7C 01 73  // ....=..s....=|.s
    8B30: 0B BA 5E 01 3D 4A 01 73 03 BA C8 00 89 16 85 04  // ..^.=J.s........
    8B40: 5A 58 C6 06 84 04 FF E8 5D 01 5B 58 8A DF 32 FF  // ZX......].[X..2.
    8B50: 0A C0 74 0E B3 0E 3C 01 74 08 B3 08 3C 02 74 02  // ..t...<.t...<.t.
    8B60: B3 10 8A CB 8A E9 81 E9 01 02 80 F9 08 7E 04 81  // .............~..
    8B70: E9 01 01 87 1E 85 04 53 E8 5B F2 5B E8 85 02 C3  // .......S.[.[....
    8B80: 0A C0 74 11 FE C8 74 1A FE C8 74 38 FE C8 74 3C  // ..t...t...t8..t<
    8B90: FE C8 74 40 C3 89 2E 7C 00 8C 06 7E 00 C3 8C C8  // ..t@...|...~....
    8BA0: 8E C0 FE CA 0A DB 74 07 32 FF 2E 8A 97 58 8B 89  // ......t.2....X..
    8BB0: 0E 85 04 88 16 84 04 89 2E 0C 01 8C 06 0E 01 C3  // ................
    8BC0: 00 0D 18 2A E8 09 03 B9 0E 00 EB D6 BD 68 5A B9  // ...*.........hZ.
    8BD0: 08 00 EB CA BD 7B 62 B9 10 00 EB C2 0A C0 75 BD  // .....{b.......u.
    8BE0: 8B 0E 85 04 8A 16 84 04 80 FF 07 77 35 80 FF 01  // ...........w5...
    8BF0: 77 10 0A FF 75 06 C4 2E 7C 00 EB 26 C4 2E 0C 01  // w...u...|..&....
    8C00: EB 20 80 FF 02 75 0B 8C CD 8E C5 2E 8B 2E 5A 73  // . ...u........Zs
    8C10: EB 10 0E 07 8A DF 32 FF 80 EB 02 D1 E3 2E 8B AF  // ......2.........
    8C20: CB 8B 8B C5 8B EC 89 4E 16 89 56 12 89 46 0A 8C  // .......N..V..F..
    8C30: 46 1E C3 7B 62 68 5A 68 5E 68 62 7B 62 7B 72 53  // F..{bhZh^hb{b{rS
    8C40: 06 8A 26 49 04 E8 CD C3 26 8A 47 02 26 8A 67 33  // ..&I....&.G.&.g3
    8C50: F6 C4 01 74 22 BD 7B 62 3C 10 7D 0E E8 71 02 8C  // ...t".{b<.}..q..
    8C60: 06 0E 01 3C 0E 7D 07 BD 68 5A 8C 0E 0E 01 89 2E  // ...<.}..hZ......
    8C70: 0C 01 E8 10 01 EB 2D B4 84 3C 10 7D 13 B4 81 3C  // ......-..<.}...<
    8C80: 0E 74 0D 7F 15 B4 02 3C 08 74 05 80 CC 80 EB 0A  // .t.....<.t......
    8C90: 26 F6 47 05 01 74 03 80 E4 7F 86 C4 32 DB E8 06  // &.G..t......2...
    8CA0: 00 E8 C9 01 07 5B C3 8B F8 8B F2 BA CE 03 EC B8  // .....[..........
    8CB0: 05 00 EF B8 06 04 EF B2 C4 EC B8 02 04 EF B8 04  // ................
    8CC0: 07 EF 8B D6 8B C7 50 24 7F 0A C0 74 22 0E 07 33  // ......P$...t"..3
    8CD0: D2 B9 00 01 3C 04 75 07 B7 10 BD 7B 62 EB 10 FE  // ....<.u....{b...
    8CE0: C8 75 07 B7 0E E8 E8 01 EB 05 B7 08 BD 68 5A E8  // .u...........hZ.
    8CF0: 2D 00 58 A8 80 74 00 BA C4 03 B8 02 03 EF B8 04  // -.X..t..........
    8D00: 02 EF B2 CC EC A8 01 B8 06 0E 75 02 B4 0A B2 CE  // ..........u.....
    8D10: 50 EC 58 EF B0 04 EE 32 C0 EE B8 05 10 EF C3 FC  // P.X....2........
    8D20: 0B C9 75 01 C3 80 FF 0E 75 0A 26 83 7E FE 10 75  // ..u.....u.&.~..u
    8D30: 03 80 CD 80 1E 06 1F 2E 8E 06 0C 03 8B FA C1 E7  // ................
    8D40: 05 B0 40 53 80 E3 03 F6 E3 5B F6 C3 04 74 02 04  // ..@S.....[...t..
    8D50: 20 86 E0 8B D0 03 FA 8B F5 E3 28 32 C0 86 FB 32  //  .........(2...2
    8D60: FF 51 F6 C5 80 74 01 46 8B CB F3 A4 83 FB 20 74  // .Q...t.F...... t
    8D70: 07 B9 20 00 2B CB F3 AA 59 F6 C5 80 74 01 46 FE  // .. .+...Y...t.F.
    8D80: C9 75 DE 1F C3 8A 26 49 04 50 06 57 C4 3E A8 04  // .u....&I.P.W.>..
    8D90: 26 C4 7D 0C 8C C5 0B EF 74 30 8B EF 83 C7 07 26  // &.}.....t0.....&
    8DA0: 8A 05 3C FF 74 24 38 E0 74 03 47 EB F2 8B FD 26  // ..<.t$8.t.G....&
    8DB0: 8A 05 FE C8 A2 84 04 26 8B 45 01 A3 85 04 26 C4  // .......&.E....&.
    8DC0: 7D 03 89 3E 0C 01 8C 06 0E 01 5F 07 58 C3 26 F6  // }..>......_.X.&.
    8DD0: 47 33 01 74 01 C3 C4 1E A8 04 26 C4 5F 08 8C C0  // G3.t......&._...
    8DE0: 0B C3 74 1F BF 0B 00 26 8A 01 3C FF 74 15 47 38  // ..t....&..<.t.G8
    8DF0: 06 49 04 75 F2 26 8A 07 32 E4 87 06 85 04 8B D8  // .I.u.&..2.......
    8E00: E8 01 00 C3 8B 16 63 04 8A 26 85 04 FE CC 80 E4  // ......c..&......
    8E10: 1F 9C FA 80 FA D4 74 0B B0 14 EE 42 EC 24 E0 0A  // ......t....B.$..
    8E20: C4 EE 4A B0 09 EE 42 EC 24 E0 0A C4 EE 9D 8A C8  // ..J...B.$.......
    8E30: 8B C3 8A 16 85 04 F6 F2 80 3E 84 04 FF 75 07 A2  // .........>...u..
    8E40: 84 04 FE 0E 84 04 F6 E2 F6 C1 80 74 02 D1 E0 48  // ...........t...H
    8E50: 8A E0 B0 12 8B 16 63 04 EF A0 4A 04 8A 26 84 04  // ......c...J..&..
    8E60: FE C4 F6 E4 D1 E0 05 00 01 A3 4C 04 C3 8A 26 49  // ..........L...&I
    8E70: 04 50 06 57 C4 3E A8 04 26 C4 7D 08 8C C5 0B EF  // .P.W.>..&.}.....
    8E80: 74 4A 8B EF 83 C7 0B 26 8A 05 3C FF 74 3E 38 E0  // tJ.....&..<.t>8.
    8E90: 74 03 47 EB F2 8B FD 26 8A 3D 26 8A 5D 01 26 8B  // t.G....&.=&.].&.
    8EA0: 4D 02 26 8B 55 04 26 8A 45 0A 3C FF 74 02 FE C8  // M.&.U.&.E.<.t...
    8EB0: 50 A0 84 04 FE C0 F6 26 85 04 A3 85 04 58 A2 84  // P......&.....X..
    8EC0: 04 26 C4 7D 06 8B EF 32 C0 E8 DB FD 5F 07 58 C3  // .&.}...2...._.X.
    8ED0: 50 53 51 52 2E A1 14 03 0B C0 74 09 2E 8B 2E 5A  // PSQR......t....Z
    8EE0: 73 0E 07 EB 08 B8 30 11 B7 02 E8 CD BE 5A 59 5B  // s.....0......ZY[
    8EF0: 58 C3 3C 04 7C 01 C3 E3 FD 53 2E 8E 1E 0A 03 86  // X.<.|....S......
    8F00: FB 32 FF D1 E3 8B FB 81 C7 50 04 8B 35 5B 89 15  // .2.......P..5[..
    8F10: 56 8B F0 51 53 26 8A 46 00 45 3C 0D 7F 1F 75 04  // V..QS&.F.E<...u.
    8F20: 32 D2 EB 40 3C 0A 74 32 3C 07 75 05 E8 85 76 EB  // 2..@<.t2<.u...v.
    8F30: 62 3C 08 75 08 0A D2 74 5A FE CA EB 27 F7 C6 02  // b<.u...tZ...'...
    8F40: 00 74 05 26 8A 5E 00 45 B9 01 00 B4 09 E8 6A BE  // .t.&.^.E......j.
    8F50: FE C2 3A 16 4A 04 72 0C 32 D2 89 15 3A 36 84 04  // ..:.J.r.2...:6..
    8F60: 73 06 FE C6 89 15 EB 2B 50 E8 AD EA 75 08 B8 00  // s......+P...u...
    8F70: 08 E8 46 BE EB 09 80 3E 49 04 07 74 F1 32 E4 86  // ..F....>I..t.2..
    8F80: 3E 62 04 53 8A FC 55 E8 25 00 5D 5B 86 3E 62 04  // >b.S..U.%.][.>b.
    8F90: 58 8B 15 5B 59 E2 15 5A F7 C6 01 00 75 02 89 15  // X..[Y..Z....u...
    8FA0: 8B 05 3A 3E 62 04 75 03 E8 34 ED C3 E9 64 FF 33  // ..:>b.u..4...d.3
    8FB0: C9 8A 36 84 04 8A 16 4A 04 FE CA B8 01 06 E8 F9  // ..6....J........
    8FC0: BD C3 2E 8E 1E 0A 03 0A C0 75 0D E8 18 00 8B EC  // .........u......
    8FD0: 89 5E 0E C6 46 1A 1A C3 3C 01 75 09 E8 41 00 8B  // .^..F...<.u..A..
    8FE0: EC C6 46 1A 1A C3 A0 8A 04 BF 58 90 2E 3A 05 72  // ..F.......X..:.r
    8FF0: 04 BB FF FF C3 32 E4 D1 E0 03 F8 2E 8B 5D 04 0A  // .....2.......]..
    9000: DB 74 05 0A FF 75 04 C3 86 FB C3 A0 10 04 24 30  // .t...u........$0
    9010: 3C 30 74 06 F6 C3 01 75 EF C3 F6 C3 01 74 E9 C3  // <0t....u.....t..
    9020: BF 58 90 2E 8A 0D 32 C0 83 C7 04 2E 3B 1D 74 12  // .X....2.....;.t.
    9030: 86 FB 2E 3B 1D 74 0B 83 C7 02 FE C0 38 C8 7E EB  // ...;.t......8.~.
    9040: B0 FF A2 8A 04 C3 BB 08 00 F6 06 89 04 02 74 0E  // ..............t.
    9050: BB 07 00 BA CC 03 EC A8 01 74 18 BB 08 00 BA B4  // .........t......
    9060: 03 E8 DF EC 74 21 B7 01 E8 8C E9 80 FA D4 74 17  // ....t!........t.
    9070: 86 FB C3 BA D4 03 E8 CA EC 74 0C B7 02 E8 77 E9  // .........t....w.
    9080: 80 FA B4 74 02 86 FB C3 0F 08 0F 08 0F 08 0F 08  // ...t............
    9090: 03 01 03 01 01 01 00 08 01 01 01 01 01 01 01 01  // ................
    90A0: 0F 01 0F 08 0F 04 00 02 0F 02 01 01 0F 01 FF 01  // ................
    90B0: FF E0 0F 00 00 00 00 07 02 08 FF 0E 00 00 3F 00  // ..............?.
    90C0: 10 01 08 00 00 00 00 01 00 02 02 01 00 04 04 01  // ................
    90D0: 00 05 02 05 00 06 01 06 05 06 00 08 01 08 00 07  // ................
    90E0: 02 07 06 07 CA 00 34 00 90 00 96 00 00 00 00 00  // ......4.........
    90F0: 00 00 5F 57 C3 90 50 66 52 E8 F4 FF FF FF 81 EF  // .._W..PfR.......
    9100: 10 00 00 00 2E 8B 07 66 BA F8 0C EF 66 BA FC 0C  // .......f....f...
    9110: ED 32 C0 66 8B F8 66 5A 58 C3 66 B8 4F 03 66 52  // .2.f..fZX.f.O.fR
    9120: 66 56 53 57 50 0A FF 75 44 E8 C8 FF FF FF 66 33  // fVSWP..uD.....f3
    9130: F6 66 BB 53 00 E8 48 00 00 00 C1 E8 10 F6 C4 40  // .f.S..H........@
    9140: 75 2B 66 81 E2 FF 02 66 D1 E2 66 8B C2 66 40 C1  // u+f....f..f..f@.
    9150: E0 10 66 8B C2 66 BB 13 00 E8 30 00 00 00 66 BB  // ..f..f....0...f.
    9160: 12 00 E8 27 00 00 00 66 58 32 E4 66 50 58 5F 5B  // ...'...fX2.fPX_[
    9170: 66 5E 66 5A C3 90 66 B8 4F 03 C3 90 66 B8 4F 03  // f^fZ..f.O...f.O.
    9180: C3 90 66 52 E8 11 00 00 00 ED 66 5A C3 90 66 52  // ..fR......fZ..fR
    9190: E8 05 00 00 00 EF 66 5A C3 90 66 8B D7 50 33 C0  // ......fZ..f..P3.
    91A0: 66 8B C3 66 03 C6 C1 E0 02 EF 66 83 C2 04 58 C3  // f..f......f...X.
    91B0: 66 39 59 39 59 39 59 39 44 39 44 39 44 39 44 39  // f9Y9Y9Y9D9D9D9D9
    91C0: 86 35 FD 35 27 36 68 37 67 37 67 37 AD 37 12 38  // .5.5'6h7g7g7.7.8
    91D0: 42 38 FF 38 28 39 28 39 9F 37 92 37 92 37 92 37  // B8.8(9(9.7.7.7.7
    91E0: 92 37 92 37 AD 37 12 38 42 38 FF 38 2D 39 73 39  // .7.7.7.8B8.8-9s9
    91F0: 28 39 28 39 FF FF FF FF FF FF 00 00 FF FF 00 00  // (9(9............
    9200: FF FF 00 00 FF 00 00 00 FF 00 00 00 FF 00 00 00  // ................
    9210: FF 00 00 00 00 00 08 10 00 08 10 18 00 08 10 18  // ................
    9220: 8A 33 01 8A 33 02 98 47 03 78 47 03 AF 34 03 63  // .3..3..G.xG..4.c
    9230: 34 03 8B 33 04 A4 33 04 B4 33 04 8A 33 03 00 00  // 4..3..3..3..3...
    9240: 00 00 37 3B 00 02 37 3B 01 02 37 3B 02 02 37 3B  // ..7;..7;..7;..7;
    9250: 03 02 37 3B 04 02 37 3B 05 02 31 3D 00 02 31 3D  // ..7;..7;..1=..1=
    9260: 01 02 31 3D 02 02 31 3D 03 02 31 3D 04 02 31 3D  // ..1=..1=..1=..1=
    9270: 05 02 66 3D 00 02 66 3D 01 02 66 3D 02 02 66 3D  // ..f=..f=..f=..f=
    9280: 03 02 66 3D 04 02 66 3D 05 02 A1 3F 00 02 A1 3F  // ..f=..f=...?...?
    9290: 01 02 A1 3F 02 02 A1 3F 03 02 A1 3F 04 02 A1 3F  // ...?...?...?...?
    92A0: 05 02 A1 3F 00 02 A1 3F 01 02 A1 3F 02 02 A1 3F  // ...?...?...?...?
    92B0: 03 02 A1 3F 04 02 A1 3F 05 02 68 3E 00 02 68 3E  // ...?...?..h>..h>
    92C0: 01 02 68 3E 02 02 68 3E 03 02 68 3E 04 02 68 3E  // ..h>..h>..h>..h>
    92D0: 05 02 A4 3E 00 02 A4 3E 01 02 A4 3E 02 02 A4 3E  // ...>...>...>...>
    92E0: 03 02 A4 3E 04 02 A4 3E 05 02 15 3E 00 02 15 3E  // ...>...>...>...>
    92F0: 01 02 15 3E 02 02 15 3E 03 02 15 3E 04 02 15 3E  // ...>...>...>...>
    9300: 05 02 49 3E 00 02 49 3E 01 02 49 3E 02 02 49 3E  // ..I>..I>..I>..I>
    9310: 03 02 49 3E 04 02 49 3E 05 02 F9 41 00 00 2C 42  // ..I>..I>...A..,B
    9320: 01 00 2C 42 02 00 19 42 00 00 07 41 00 02 00 3F  // ..,B...B...A...?
    9330: 00 02 00 3F 01 02 00 3F 02 02 00 3F 03 02 00 3F  // ...?...?...?...?
    9340: 04 02 00 3F 05 02 1F 41 00 02 74 43 05 00 74 43  // ...?...A..tC..tC
    9350: 01 00 74 43 00 00 74 43 02 00 B5 43 00 00 B5 43  // ..tC..tC...C...C
    9360: 02 00 FA 43 00 00 8A 40 00 02 8A 40 01 02 8A 40  // ...C...@...@...@
    9370: 02 02 8A 40 03 02 8A 40 04 02 8A 40 05 02 46 42  // ...@...@...@..FB
    9380: 00 00 6E 42 00 00 EF 42 00 00 6A 43 00 00 4E 3F  // ..nB...B..jC..N?
    9390: 00 02 4E 3F 01 02 4E 3F 02 02 4E 3F 03 02 4E 3F  // ..N?..N?..N?..N?
    93A0: 04 02 4E 3F 05 02 69 43 00 01 69 43 00 01 6D 3C  // ..N?..iC..iC..m<
    93B0: 00 02 6D 3C 01 02 6D 3C 02 02 6D 3C 03 02 6D 3C  // ..m<..m<..m<..m<
    93C0: 04 02 6D 3C 05 02 8E 42 00 00 6A 43 00 00 6A 43  // ..m<...B..jC..jC
    93D0: 00 00 6A 43 00 00 9F 41 00 00 91 3D 00 02 91 3D  // ..jC...A...=...=
    93E0: 01 02 91 3D 02 02 91 3D 03 02 91 3D 04 02 91 3D  // ...=...=...=...=
    93F0: 05 02 C0 3D 00 02 C0 3D 01 02 C0 3D 02 02 C0 3D  // ...=...=...=...=
    9400: 03 02 C0 3D 04 02 C0 3D 05 02 F6 3D 00 02 F6 3D  // ...=...=...=...=
    9410: 01 02 F6 3D 02 02 F6 3D 03 02 F6 3D 04 02 F6 3D  // ...=...=...=...=
    9420: 05 02 B1 42 00 00 D4 42 00 00 92 3E 01 02 92 3E  // ...B...B...>...>
    9430: 02 02 EE 3E 01 02 EE 3E 02 02 A6 00 02 01 C2 94  // ...>...>........
    9440: 00 00 00 00 00 00 DE AD 00 00 8E 96 00 00 00 00  // ................
    9450: FC 97 00 00 00 00 C6 98 9C 9C 00 00 00 00 00 00  // ................
    9460: 00 00 00 00 DA 96 68 A1 2E 97 00 00 80 97 00 00  // ......h.........
    9470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    9480: 14 A2 86 A2 FA A2 00 00 3E A3 00 00 8C A6 00 00  // ........>.......
    9490: 0E A4 CC A5 58 A7 B6 A8 F8 A8 FE C3 00 00 00 00  // ....X...........
    94A0: 0C A9 D2 AA F4 C1 00 00 56 C3 DC AA 00 00 A8 AC  // ........V.......
    94B0: 00 00 00 00 00 00 EE AC D6 AD 00 00 00 00 00 00  // ................
    94C0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    94D0: 00 00 00 00 86 C5 F2 B0 FE B1 7E BF 9A C1 00 00  // ..........~.....
    94E0: 4A 00 02 01 00 00 00 00 00 00 98 C5 60 C6 A8 C6  // J...........`...
    94F0: AC C9 00 D0 E6 D1 00 00 00 00 08 CA 14 CE 68 CE  // ..............h.
    9500: 02 D2 DC CE 00 00 E0 CE 00 00 00 00 00 00 00 00  // ................
    9510: F4 CE C2 CF 00 00 00 00 00 00 C8 CF 00 00 00 00  // ................
    9520: 14 CA 00 00 00 00 00 00 00 00 CC 01 02 01 00 08  // ................
    9530: 37 00 00 02 00 00 E3 0D 01 05 80 29 00 F4 00 00  // 7..........)....
    9540: 01 05 53 39 00 F4 00 00 01 05 00 00 2C A8 01 00  // ..S9........,...
    9550: 01 05 01 00 00 F4 00 00 1A 05 00 04 2C 05 00 FF  // ............,...
    9560: F3 00 00 01 01 81 29 00 01 01 54 39 00 01 05 00  // ......)...T9....
    9570: 00 2D A8 01 00 01 01 01 00 00 01 05 85 29 00 00  // .-...........)..
    9580: 3D 00 01 05 F7 3A 00 00 3D 00 01 05 00 00 31 A8  // =....:..=.....1.
    9590: 01 00 01 05 01 00 00 00 3D 00 14 05 00 06 0E 0D  // ........=.......
    95A0: 00 3F 00 2C 05 00 01 00 00 00 01 01 86 29 00 01  // .?.,.........)..
    95B0: 01 F8 3A 00 01 05 00 00 32 A8 01 00 01 01 01 00  // ..:.....2.......
    95C0: 00 01 05 50 28 EB 0F E4 60 01 05 00 00 90 A6 01  // ...P(...`.......
    95D0: 00 01 05 01 00 EB 0F E4 60 01 05 6E 29 00 00 00  // ........`..n)...
    95E0: 00 01 05 00 00 1A A8 01 00 01 05 01 00 00 00 00  // ................
    95F0: 00 01 05 72 29 FF FF 0F 00 01 05 00 00 1E A8 01  // ...r)...........
    9600: 00 01 05 01 00 FF FF 0F 00 01 05 00 00 10 A8 01  // ................
    9610: 00 01 00 64 29 01 00 01 05 00 00 11 A8 01 00 01  // ...d)...........
    9620: 00 65 29 01 00 01 05 00 00 12 A8 01 00 01 00 66  // .e)............f
    9630: 29 01 00 01 05 00 00 13 A8 01 00 01 00 67 29 01  // )............g).
    9640: 00 01 05 00 00 14 A8 01 00 01 00 68 29 01 00 01  // ...........h)...
    9650: 05 00 00 15 A8 01 00 01 00 69 29 01 00 01 05 00  // .........i).....
    9660: 00 16 A8 01 00 01 00 6A 29 01 00 01 05 00 00 17  // .......j).......
    9670: A8 01 00 01 00 6B 29 01 00 01 00 55 39 01 00 03  // .....k)....U9...
    9680: 00 40 01 00 01 02 74 29 40 01 02 59 39 40 01 05  // .@....t)@..Y9@..
    9690: 00 00 20 A8 01 00 01 02 01 00 40 03 00 41 81 29  // .. .......@..A.)
    96A0: 33 00 41 80 29 2D 02 40 41 01 02 75 29 40 01 02  // 3.A.)-.@A..u)@..
    96B0: 5A 39 40 01 05 00 00 21 A8 01 00 01 02 01 00 40  // Z9@....!.......@
    96C0: 01 05 00 00 1F A8 01 00 01 00 73 29 01 00 03 00  // ..........s)....
    96D0: 41 E3 0D 33 05 41 01 00 00 00 1B 05 41 0B 01 02  // A..3.A......A...
    96E0: 06 00 41 0D 25 1F 0E 03 0D 25 22 0C 02 0D 05 53  // ..A.%....%"....S
    96F0: 00 00 02 00 00 5B 4B 00 01 01 00 00 37 00 00 42  // .....[K.....7..B
    9700: 21 00 63 00 1F 00 63 01 39 00 63 03 3F 00 63 02  // !.c...c.9.c.?.c.
    9710: 45 00 5A 5A 5B 03 05 40 00 00 05 04 2D 19 40 00  // E.ZZ[..@....-.@.
    9720: 15 05 40 02 01 02 0C 00 40 02 00 00 0D 00 5B 02  // ..@.....@.....[.
    9730: 00 00 E3 0D 5B 02 00 00 E7 0D 5B 02 00 00 E8 0D  // ....[.....[.....
    9740: 5B 00 54 00 01 02 00 00 37 00 00 01 05 00 00 9B  // [.T.....7.......
    9750: 62 01 00 54 00 01 00 01 05 00 00 93 62 01 00 01  // b..T........b...
    9760: 01 01 00 01 56 00 41 03 09 41 00 01 05 00 00 83  // ....V.A..A......
    9770: 62 01 00 01 02 01 00 41 01 05 00 00 9B 62 01 00  // b......A.....b..
    9780: 3C 25 01 00 00 44 36 00 01 05 00 00 93 62 01 00  // <%...D6......b..
    9790: 02 00 01 01 00 5B 52 00 02 01 08 08 37 00 00 3D  // .....[R.....7..=
    97A0: 25 00 00 44 14 00 55 38 00 5B 01 05 00 00 61 60  // %..D..U8.[....a`
    97B0: 01 00 3C E5 01 00 FF 44 10 00 4A E5 01 00 80 44  // ..<....D..J....D
    97C0: 24 00 01 05 00 00 62 60 01 00 01 01 01 00 01 56  // $.....b`.......V
    97D0: 00 40 03 A9 40 00 01 05 00 00 61 60 01 00 01 02  // .@..@.....a`....
    97E0: 01 00 40 02 E5 00 01 5B 7B 00 02 01 00 00 37 00  // ..@....[{.....7.
    97F0: 00 3D 65 00 01 44 7A 00 56 00 40 03 21 40 00 21  // .=e..Dz.V.@.!@.!
    9800: 25 40 DC 03 0A 48 40 01 05 B6 3A 00 01 00 00 5C  // %@...H@...:....\
    9810: 05 2D 3B CF FF CF FF 20 00 10 00 5C 05 40 3B CF  // .-;.... ...\.@;.
    9820: FF FF FF 20 00 00 00 01 05 B7 3A 00 00 00 04 56  // ... ......:....V
    9830: 00 40 03 21 40 00 21 25 40 80 03 0A 48 40 5C 05  // .@.!@.!%@...H@\.
    9840: 01 50 FF FC FF FF 00 03 00 00 56 00 40 03 21 40  // .P........V.@.!@
    9850: 00 15 05 40 19 5C 02 50 50 FF FF FF F1 40 3A 00  // ...@.\.PP....@:.
    9860: 00 5B 5B 00 CA 00 02 01 04 04 37 00 00 66 0C 03  // .[[.......7..f..
    9870: 0C 41 00 00 2D 0A 41 42 2D 0D 42 04 00 3D 24 00  // .A..-.AB-.B..=$.
    9880: 06 00 44 31 00 2D 0D 42 08 00 3E 0A 42 41 45 19  // ..D1.-.B..>.BAE.
    9890: 00 55 20 00 5B 56 00 43 03 24 43 05 00 03 04 46  // .U .[V.C.$C....F
    98A0: 00 00 33 05 46 01 00 00 00 01 02 00 00 46 03 00  // ..3.F........F..
    98B0: 00 01 00 0D 02 01 00 44 2D 05 46 02 00 00 00 01  // .......D-.F.....
    98C0: 02 00 00 46 03 24 43 04 00 4B E5 00 01 49 AA 00  // ...F.$C..K...I..
    98D0: 07 02 01 00 45 2D 05 46 01 00 00 00 01 02 00 00  // ....E-.F........
    98E0: 46 4A 02 01 00 44 44 90 00 03 29 43 00 0E A2 00  // FJ...DD...)C....
    98F0: 44 43 98 00 03 29 43 00 08 A2 00 45 33 05 46 03  // DC...)C....E3.F.
    9900: 00 00 00 01 02 00 00 46 01 02 01 00 00 5B 0D 02  // .......F.....[..
    9910: 01 00 44 01 04 00 00 00 00 3D A5 00 01 44 C4 00  // ..D......=...D..
    9920: 07 02 01 00 45 43 C9 00 0D 02 01 00 44 5B D6 03  // ....EC......D[..
    9930: 01 07 10 08 37 00 00 4A 25 48 00 01 44 12 00 5B  // ....7..J%H..D..[
    9940: 3D 25 01 FF 44 B8 03 3D 25 01 18 46 B4 03 3D 25  // =%..D..=%..F..=%
    9950: 01 02 47 B4 03 3D 25 01 14 45 B8 03 3D 05 00 00  // ..G..=%..E..=...
    9960: 00 00 00 44 06 02 66 1B 56 00 02 3D A5 01 02 49  // ...D..f.V..=...I
    9970: 4A 00 56 08 40 43 5C 00 3D A5 01 03 49 57 00 56  // J.V.@C\.=...IW.V
    9980: 08 40 43 5C 00 03 0C 40 18 00 3E 0D 40 00 00 44  // .@C\...@..>.@..D
    9990: 6B 00 03 0A 02 40 43 6F 00 0E E5 01 80 4B E5 01  // k....@Co.....K..
    99A0: 02 49 7D 00 02 A9 02 02 55 28 02 03 01 00 00 03  // .I}.....U(......
    99B0: 05 46 C0 5D 00 00 3D A5 01 00 44 96 00 03 05 46  // .F.]..=...D....F
    99C0: 80 BB 00 00 5C A5 0F 5E F3 08 55 28 01 3E 05 00  // ....\..^..U(.>..
    99D0: 40 4B 4C 00 47 B0 00 1B 05 00 01 43 C5 00 2C 65  // @KL.G......C..,e
    99E0: 01 01 3E 05 00 A0 25 26 00 48 C5 00 15 05 00 01  // ..>...%&.H......
    99F0: 43 B0 00 14 2D 01 04 4B E5 01 80 49 F4 00 21 05  // C...-..K...I..!.
    9A00: 02 80 00 00 00 7C 02 40 00 7E 02 40 46 7C 05 40  // .....|.@.~.@F|.@
    9A10: 10 00 00 00 7E 05 40 35 0C 00 00 03 02 02 40 43  // ....~.@5......@C
    9A20: F7 00 56 00 02 27 02 00 46 21 05 41 00 00 01 00  // ..V..'..F!.A....
    9A30: 27 02 40 46 03 0A 42 40 3E 05 41 00 00 00 00 49  // '.@F..B@>.A....I
    9A40: 1F 01 03 0D 40 01 00 56 08 01 43 49 01 03 02 40  // ....@..V..CI...@
    9A50: 46 03 02 01 41 03 02 03 41 27 02 40 41 03 02 40  // F...A...A'.@A..@
    9A60: 03 3E 05 41 00 00 00 00 49 27 01 27 02 01 03 03  // .>.A....I'.'....
    9A70: 0A 01 40 27 02 46 03 03 0A 03 01 03 0A 01 40 03  // ..@'.F........@.
    9A80: 8A 01 42 27 02 00 46 33 05 40 10 00 00 00 15 05  // ..B'..F3.@......
    9A90: 40 05 03 8A 03 40 66 FF 2D 0D 42 C2 03 56 00 40  // @....@f.-.B..V.@
    9AA0: 03 21 40 01 33 25 40 14 15 25 40 01 2D 0A 42 40  // .!@.3%@..%@.-.B@
    9AB0: 03 0C 48 00 00 4A 25 06 5E 04 44 2C 02 56 00 40  // ..H..J%.^.D,.V.@
    9AC0: 4B E5 01 30 44 A4 01 4A 25 F1 5D 01 44 E5 01 43  // K..0D..J%.].D..C
    9AD0: AC 01 4A 25 F1 5D 01 49 E5 01 03 00 40 0B 5E 09  // ..J%.].I....@.^.
    9AE0: 0D 40 F0 FF 3E 1A 40 03 49 E5 01 3C 02 07 5E 01  // .@..>.@.I..<..^.
    9AF0: 49 E5 01 3C 0A 0A 5E 03 49 E5 01 03 00 40 0C 5E  // I..<..^.I....@.^
    9B00: 09 25 40 70 3E 29 40 01 49 E5 01 3C 02 08 5E 02  // .%@p>)@.I..<..^.
    9B10: 44 E9 01 0E E5 01 01 3A 00 00 4B E5 01 01 44 8C  // D......:..K...D.
    9B20: 03 4B E5 01 02 49 06 02 3D 25 02 03 46 06 02 55  // .K...I..=%..F..U
    9B30: 28 02 52 23 3A 00 00 02 01 03 02 02 05 02 00 00  // (.R#:...........
    9B40: 03 04 02 21 02 01 32 25 02 14 52 4D 02 01 02 03  // ...!..2%..RM....
    9B50: 3D 05 00 00 00 00 00 44 B4 03 3D A5 01 00 44 57  // =......D..=...DW
    9B60: 02 02 01 03 02 02 05 02 00 0F 03 00 02 21 02 01  // .............!..
    9B70: 32 25 02 14 4B E5 01 30 44 51 02 0E E5 02 01 52  // 2%..K..0DQ.....R
    9B80: 4D 02 01 02 03 66 FF 2D 0D 42 C2 03 56 00 40 03  // M....f.-.B..V.@.
    9B90: 21 40 01 33 25 40 14 15 25 40 01 2D 0A 42 40 03  // !@.3%@..%@.-.B@.
    9BA0: 0C 48 00 00 03 05 40 00 00 38 00 3E 05 00 C0 C6  // .H....@..8.>....
    9BB0: 2D 00 47 A9 02 5E A5 40 CF 20 3E 05 00 E0 67 35  // -.G..^.@. >...g5
    9BC0: 00 47 A9 02 5E A5 40 CF 10 3E 05 00 00 09 3D 00  // .G..^.@..>....=.
    9BD0: 47 A9 02 09 A5 40 CF 5C B2 0F 5E C3 40 03 05 40  // G....@.\..^.@..@
    9BE0: 00 00 0C 12 3D A5 01 00 49 D2 02 03 05 40 10 00  // ....=...I....@..
    9BF0: 1C 24 3D 25 01 17 45 D2 02 03 05 40 00 00 1C 24  // .$=%..E....@...$
    9C00: 5C 9A 10 5E 03 00 40 5C 1A 0B 5E 0F 00 03 5C A2  // \..^..@\..^...\.
    9C10: 0B 5E 8F 40 56 00 40 03 29 40 01 0F 25 40 01 4B  // .^.@V.@.)@..%@.K
    9C20: E5 01 80 49 FC 02 0F 65 40 01 5C 0A 0C 5E 8B FE  // ...I...e@.\..^..
    9C30: 40 07 8D 0D 5E 0F E0 3E 8D 01 00 00 49 21 03 3E  // @...^..>....I!.>
    9C40: 0D 03 00 00 49 21 03 07 E5 0E 5E FE 43 26 03 0D  // ....I!....^.C&..
    9C50: E5 0E 5E 01 4A E5 0E 5E 01 49 3E 03 4A 65 0C 5E  // ..^.J..^.I>.Je.^
    9C60: 01 49 3E 03 07 E5 0E 5E EF 43 43 03 0D E5 0E 5E  // .I>....^.CC....^
    9C70: 10 01 02 07 5E 01 01 02 08 5E 02 7C 05 02 00 EC  // ....^....^.|....
    9C80: 04 00 7E 02 40 46 27 05 40 0A 00 00 00 01 02 09  // ..~.@F'.@.......
    9C90: 5E 40 01 0A 0A 5E 03 3A 00 00 3D A5 01 00 44 B4  // ^@...^.:..=...D.
    9CA0: 03 03 01 00 02 02 05 02 00 01 03 04 02 21 02 01  // .............!..
    9CB0: 32 25 02 14 52 4D 02 02 02 00 3A 00 00 3D 25 02  // 2%..RM....:..=%.
    9CC0: 03 46 B4 03 02 25 03 02 02 E1 03 02 02 61 03 01  // .F...%.......a..
    9CD0: 02 B9 03 01 08 A5 03 04 0E B1 03 02 02 01 02 00  // ................
    9CE0: 52 2E 3A 00 00 5B 02 25 01 0B 43 8C 03 7A 14 00  // R.:..[.%..C..z..
    9CF0: 00 00 D8 00 B0 01 88 02 60 03 00 00 00 01 00 02  // ........`.......
    9D00: 00 03 00 04 CC 04 02 01 04 04 37 00 00 42 29 00  // ..........7..B).
    9D10: 63 07 1D 00 63 08 17 00 5A 5A 5B 0D 25 C8 39 02  // c...c...ZZ[.%.9.
    9D20: 5B 01 05 1F 35 FF FF FF FF 01 05 20 35 3F 00 00  // [...5...... 5?..
    9D30: 00 01 05 3B 01 30 02 12 00 01 05 30 01 80 BB 10  // ...;.0.....0....
    9D40: 00 01 05 31 01 3C 00 01 08 01 05 34 01 00 00 00  // ...1.<.....4....
    9D50: 00 01 05 3C 01 00 00 00 00 01 8D 83 38 30 00 01  // ...<........80..
    9D60: 25 82 38 01 01 25 32 01 00 01 05 42 35 00 00 00  // %.8..%2....B5...
    9D70: 00 01 05 40 35 00 00 00 00 01 05 46 35 00 00 00  // ...@5......F5...
    9D80: 00 01 05 44 35 00 00 00 00 01 05 4A 35 00 00 00  // ...D5......J5...
    9D90: 00 01 05 48 35 00 00 00 00 01 05 4E 35 00 00 00  // ...H5......N5...
    9DA0: 00 01 05 4C 35 00 00 00 00 01 05 61 35 00 00 00  // ...L5......a5...
    9DB0: 00 01 05 63 35 00 00 00 00 01 05 65 35 00 00 00  // ...c5......e5...
    9DC0: 00 01 05 72 35 01 00 00 00 01 05 DF 39 01 10 00  // ...r5.......9...
    9DD0: 00 01 05 F4 39 01 00 02 00 07 05 F0 39 FF FF FF  // ....9.......9...
    9DE0: 7F 07 05 EF 39 9F FF FF FF 54 20 6D 91 01 05 B3  // ....9....T m....
    9DF0: 3A 00 00 00 00 01 05 8F 3B 10 00 00 00 01 05 6B  // :.......;......k
    9E00: 3C 20 00 00 00 01 05 47 3D 30 00 00 00 55 00 01  // < .....G=0...U..
    9E10: 20 0D 01 DC 00 03 0A 48 40 01 05 B1 3A 00 1B 5D  //  ......H@...:..]
    9E20: 05 01 05 06 3B 35 00 13 00 01 05 07 3B 36 11 00  // ....;5......;6..
    9E30: 00 01 05 08 3B 41 E6 01 00 01 05 09 3B 00 00 00  // ....;A......;...
    9E40: 00 01 05 0A 3B 00 00 08 2C 01 05 0C 3B 02 04 00  // ....;...,...;...
    9E50: 00 01 05 1F 3B 5E 4E 01 00 01 05 0A 3B 00 00 08  // ....;^N.....;...
    9E60: 2C 01 05 0D 3B A4 01 00 00 01 05 0F 3B A4 01 00  // ,...;.......;...
    9E70: 00 01 05 14 3B 00 02 00 00 01 05 15 3B 49 D2 00  // ....;.......;I..
    9E80: 00 01 05 18 3B 20 00 00 00 01 05 19 3B 24 0D 00  // ....; ......;$..
    9E90: 00 01 05 1C 3B 00 00 00 00 01 05 1D 3B 00 00 00  // ....;.......;...
    9EA0: 00 01 05 ED 3A 00 00 92 06 01 05 EE 3A AA 08 00  // ....:.......:...
    9EB0: E0 2C 05 01 01 00 00 00 3D 0D 01 04 00 45 0C 01  // .,......=....E..
    9EC0: 56 08 48 01 05 C9 39 FE 01 00 00 01 05 CB 39 BA  // V.H...9.......9.
    9ED0: 04 00 00 01 05 CC 39 24 04 00 00 01 05 CD 39 A2  // ......9$......9.
    9EE0: 08 00 00 01 05 CE 39 FE 01 00 00 01 05 D0 39 BA  // ......9.......9.
    9EF0: 04 00 00 01 05 D1 39 24 04 00 00 01 05 D2 39 A2  // ......9$......9.
    9F00: 08 00 00 01 05 D3 39 FE 01 00 00 01 05 D5 39 BA  // ......9.......9.
    9F10: 04 00 00 01 05 D6 39 24 04 00 00 01 05 D7 39 A2  // ......9$......9.
    9F20: 08 00 00 01 05 D8 39 FE 01 00 00 01 05 DA 39 BA  // ......9.......9.
    9F30: 04 00 00 01 05 DB 39 24 04 00 00 01 05 DC 39 A2  // ......9$......9.
    9F40: 08 00 00 0D 25 C8 39 02 55 00 01 66 FF 2D 0D 42  // ....%.9.U..f.-.B
    9F50: C4 04 03 0C 48 00 00 0D 25 DA 41 01 20 0D 01 1B  // ....H...%.A. ...
    9F60: 00 03 0A 48 40 01 21 33 47 01 01 21 31 47 01 01  // ...H@.!3G..!1G..
    9F70: 21 32 47 01 20 0D 01 04 00 03 0A 48 40 01 21 45  // !2G. ......H@.!E
    9F80: 48 01 20 0D 01 10 00 03 0A 48 40 03 0D 40 00 F0  // H. ......H@..@..
    9F90: 0F 61 40 01 01 6A 8B 4F 40 2C 0D 01 01 00 2D 0D  // .a@..j.O@,....-.
    9FA0: 42 02 00 3D 25 01 04 45 4E 02 56 08 48 55 00 01  // B..=%..EN.V.HU..
    9FB0: 52 17 2C 25 01 01 3D 25 01 04 45 AC 02 02 05 01  // R.,%..=%..E.....
    9FC0: 01 02 00 00 52 29 56 00 46 66 08 03 0C 46 0C 00  // ....R)V.Ff...F..
    9FD0: 26 05 01 40 0D 03 00 21 02 40 46 32 02 01 40 01  // &..@...!.@F2..@.
    9FE0: 01 42 01 01 01 01 46 01 01 01 01 4A 01 01 01 01  // .B....F....J....
    9FF0: 4E 01 01 55 00 01 52 4E 5C 05 63 53 FF FF FF 00  // N..U..RN\.cS....
    A000: 00 00 00 30 5C 05 65 53 FF FF FF 00 00 00 00 30  // ...0\.eS.......0
    A010: 5C 05 67 53 FF FF FF 00 00 00 00 30 5C 05 69 53  // \.gS.......0\.iS
    A020: FF FF FF 00 00 00 00 30 5C 05 6B 53 FF FF FF 00  // .......0\.kS....
    A030: 00 00 00 30 01 05 DD 5D AA F2 01 00 01 05 31 55  // ...0...]......1U
    A040: 11 00 01 00 01 05 31 56 11 00 01 00 01 05 31 57  // ......1V......1W
    A050: 11 00 01 00 01 05 31 58 11 00 01 00 01 05 31 59  // ......1X......1Y
    A060: 11 00 01 00 01 05 9A 55 01 00 00 00 01 05 9A 56  // .......U.......V
    A070: 01 00 00 00 01 05 9A 57 01 00 00 00 01 05 9A 58  // .......W.......X
    A080: 01 00 00 00 01 05 9A 59 01 00 00 00 02 25 01 07  // .......Y.....%..
    A090: 52 33 02 05 01 00 07 00 00 55 00 02 52 4D 2C 25  // R3.......U..RM,%
    A0A0: 01 01 3D 25 01 05 45 98 03 66 16 03 A4 00 06 00  // ..=%..E..f......
    A0B0: 2D 0D 42 08 00 03 0A 00 42 3E A5 00 00 44 2B 04  // -.B.....B>...D+.
    A0C0: 03 0A 42 00 03 0C 40 04 00 3E 0D 40 20 22 44 D5  // ..B...@..>.@ "D.
    A0D0: 03 3E 0D 40 21 21 49 1F 04 03 0C 40 08 00 66 16  // .>.@!!I....@..f.
    A0E0: 2D 0A 42 40 03 24 40 00 00 3E 25 40 FF 44 1F 04  // -.B@.$@..>%@.D..
    A0F0: 3E 25 40 14 49 17 04 03 04 40 02 00 4C 05 40 00  // >%@.I....@..L.@.
    A100: 01 00 00 44 1F 04 4A 25 48 00 01 49 2B 04 01 A5  // ...D..J%H..I+...
    A110: 7F 60 01 01 A5 57 61 01 43 2B 04 2D 0C 42 01 00  // .`...Wa.C+.-.B..
    A120: 43 E0 03 2D 0D 00 10 00 33 A5 00 01 43 B5 03 66  // C..-....3...C..f
    A130: 16 03 0C 41 04 00 4C 0D 41 02 00 44 3F 04 0D A5  // ...A..L.A..D?...
    A140: 4C 00 02 01 05 00 00 2C A8 01 00 01 00 53 39 01  // L......,.....S9.
    A150: 00 01 05 00 00 2D A8 01 00 01 00 54 39 01 00 01  // .....-.....T9...
    A160: 05 00 00 17 A8 01 00 01 00 55 39 01 00 01 05 00  // .........U9.....
    A170: 00 31 A8 01 00 01 00 F7 3A 01 00 01 05 00 00 32  // .1......:......2
    A180: A8 01 00 01 00 F8 3A 01 00 01 05 00 00 20 A8 01  // ......:...... ..
    A190: 00 01 00 59 39 01 00 01 05 00 00 21 A8 01 00 01  // ...Y9......!....
    A1A0: 00 5A 39 01 00 02 00 01 53 39 03 01 41 01 15 05  // .Z9.....S9..A...
    A1B0: 41 18 01 02 C4 00 41 03 01 41 01 1B 05 41 08 01  // A.....A..A...A..
    A1C0: 02 C9 00 41 5B 7A 08 00 00 00 6B 01 D6 02 41 04  // ...A[z....k...A.
    A1D0: AC 00 02 01 00 04 66 FF 56 08 47 2D 0D 42 74 00  // ......f.V.G-.Bt.
    A1E0: 03 21 47 00 09 25 47 F0 42 22 47 63 00 5B 00 63  // .!G..%G.B"Gc.[.c
    A1F0: 60 56 00 63 20 36 00 63 90 4E 00 63 A0 3E 00 63  // `V.c 6.c.N.c.>.c
    A200: B0 46 00 5A 5A 5B 2D 0D 42 26 00 43 5B 00 2D 0D  // .F.ZZ[-.B&.C[.-.
    A210: 42 1E 00 43 5B 00 2D 0D 42 30 00 43 5B 00 2D 0D  // B..C[.-.B0.C[.-.
    A220: 42 16 00 43 5B 00 2D 0D 42 0C 00 03 21 47 00 09  // B..C[.-.B...!G..
    A230: 25 47 07 2D 0A 42 47 2D 0A 42 47 03 0C 48 00 00  // %G.-.BG-.BG..H..
    A240: 5B 7A AC 00 00 00 80 00 00 01 80 01 00 02 80 02  // [z..............
    A250: 00 00 00 01 00 02 00 03 00 04 00 00 DC 00 B8 01  // ................
    A260: 94 02 00 00 6B 01 D6 02 41 04 00 00 D8 00 B0 01  // ....k...A.......
    A270: 88 02 60 03 00 00 5A 00 B4 00 0E 01 72 00 01 01  // ..`...Z.....r...
    A280: 00 00 37 00 00 56 00 40 03 21 40 00 21 0D 40 6B  // ..7..V.@.!@.!.@k
    A290: 01 03 02 48 40 01 25 AC 41 01 3D 65 00 02 49 4C  // ...H@.%.A.=e..IL
    A2A0: 00 01 0D BD 41 01 00 54 00 BB 41 0D 25 AE 41 01  // ....A..T..A.%.A.
    A2B0: 01 05 AD 41 11 00 00 00 07 A5 AC 41 FE 01 05 AF  // ...A.......A....
    A2C0: 41 11 01 11 01 43 6E 00 01 05 B1 41 00 00 00 01  // A....Cn....A....
    A2D0: 01 05 B5 41 00 00 00 01 01 05 AF 41 11 01 11 01  // ...A.......A....
    A2E0: 54 00 AD 41 01 0D BD 41 00 01 3A 00 00 5B 73 00  // T..A...A..:..[s.
    A2F0: 01 01 00 00 37 00 00 52 14 03 00 41 C0 41 33 1A  // ....7..R...A.A3.
    A300: 41 41 03 8A 40 41 03 00 41 C1 41 33 1A 41 41 03  // AA..@A..A.A3.AA.
    A310: 0A 40 41 3E 05 40 00 00 00 00 49 36 00 03 05 40  // .@A>.@....I6...@
    A320: 70 08 00 0F 0E 25 00 B0 52 14 3D 65 00 00 44 6D  // p....%..R.=e..Dm
    A330: 00 01 02 16 4D 40 01 05 17 4D 00 00 00 00 01 05  // ....M@...M......
    A340: 18 4D 00 00 00 00 01 05 19 4D 00 00 00 00 5C 05  // .M.......M....\.
    A350: 14 4D 8F FF 0F FF 31 00 00 00 5B 07 25 14 4D FE  // .M....1...[.%.M.
    A360: 5B 00 43 00 01 01 00 00 37 00 00 52 14 3D 65 00  // [.C.....7..R.=e.
    A370: 01 44 3A 00 0D 65 01 50 03 54 20 01 50 4A A5 01  // .D:..e.P.T .PJ..
    A380: 50 01 49 1B 00 54 20 0F 50 56 00 40 20 25 00 01  // P.I..T .PV.@ %..
    A390: 03 0A 48 40 07 E5 E8 39 7F 43 3F 00 0D 25 01 50  // ..H@...9.C?..%.P
    A3A0: 01 3A 00 00 5B 00 CF 00 02 01 00 00 37 00 00 42  // .:..[.......7..B
    A3B0: 29 00 63 00 1B 00 63 01 1B 00 63 02 AA 00 5A 5A  // ).c...c...c...ZZ
    A3C0: 5B 66 FF 56 08 40 2D 0D 42 C3 00 03 21 40 00 15  // [f.V.@-.B...!@..
    A3D0: 25 40 01 2D 0A 42 40 03 0C 48 00 00 3D 65 00 00  // %@.-.B@..H..=e..
    A3E0: 44 72 00 0D 25 CC 00 01 3A 00 00 01 8D C0 00 00  // Dr..%...:.......
    A3F0: 02 51 02 01 05 C6 00 00 00 10 00 01 05 C8 00 00  // .Q..............
    A400: 00 50 00 01 0D C3 00 02 00 54 20 CA 00 01 05 C2  // .P.......T .....
    A410: 00 00 01 00 00 43 1A 00 07 25 CC 00 FE 3A 00 00  // .....C...%...:..
    A420: 0D 25 CA 00 01 01 25 C2 00 01 07 A5 C1 00 FE 0D  // .%....%.........
    A430: 25 D5 00 01 0D 65 D5 00 01 4A 65 D5 00 01 44 93  // %....e...Je...D.
    A440: 00 54 08 D5 00 54 00 C6 00 54 00 C8 00 43 1A 00  // .T...T...T...C..
    A450: 5C 65 D4 00 FC 02 01 A1 C0 00 00 2B A5 C0 00 01  // \e.........+....
    A460: 0D A5 C1 00 01 5B 7A 0C 00 00 00 02 00 2C 00 2D  // .....[z......,.-
    A470: 00 2E 00 2F 00 00 BD 01 03 01 04 00 37 00 00 66  // .../........7..f
    A480: 08 03 05 46 C0 12 00 00 3D A5 00 02 49 1E 00 02  // ...F....=...I...
    A490: 02 00 46 5B 03 05 40 0C 00 00 00 21 21 40 00 66  // ..F[..@....!!@.f
    A4A0: FF 2D 0D 42 81 01 2D 0A 42 40 03 04 40 00 00 03  // .-.B..-.B@..@...
    A4B0: 04 41 04 00 03 04 00 08 00 01 02 00 00 40 03 88  // .A...........@..
    A4C0: 40 01 00 03 18 40 01 00 09 8D 40 FF 01 3E 8D 40  // @....@....@..>.@
    A4D0: 00 00 49 99 00 01 02 00 00 41 03 00 40 01 00 09  // ..I......A..@...
    A4E0: 05 40 FF 01 00 00 3E 0D 40 00 00 49 82 00 03 05  // .@....>.@..I....
    A4F0: 46 00 71 02 00 43 BC 00 21 02 40 46 03 00 41 01  // F.q..C..!.@F..A.
    A500: 00 09 05 41 00 1E 00 00 1B 05 41 09 43 B4 00 7C  // ...A......A.C..|
    A510: 02 40 46 7E 05 40 00 00 01 00 03 00 41 01 00 09  // .@F~.@......A...
    A520: 05 41 00 F0 00 00 1B 05 41 0C 75 02 40 41 03 02  // .A......A.u.@A..
    A530: 46 40 3D A5 00 01 49 C8 00 02 02 00 46 5B 3D E5  // F@=...I.....F[=.
    A540: 00 00 49 0B 01 56 00 40 03 29 40 00 21 0D 40 0A  // ..I..V.@.)@.!.@.
    A550: 00 03 02 41 00 2D 02 40 41 01 02 00 00 40 03 00  // ...A.-.@A....@..
    A560: 41 01 00 09 05 41 00 00 F0 07 1B 05 41 14 02 E2  // A....A......A...
    A570: 00 41 3D E5 00 00 49 0B 01 02 05 00 00 46 C3 23  // .A=...I......F.#
    A580: 5B 56 00 40 03 39 40 00 55 38 00 66 FF 2D 0D 42  // [V.@.9@.U8.f.-.B
    A590: 59 01 3E 0C 40 02 00 47 2C 01 2D 0D 42 08 00 43  // Y.>.@..G,.-.B..C
    A5A0: 1C 01 33 0C 40 04 00 21 0C 40 06 00 2D 0C 40 00  // ..3.@..!.@..-.@.
    A5B0: 00 03 09 42 00 55 00 00 02 0A 00 40 7C 05 46 40  // ...B.U.....@|.F@
    A5C0: 42 0F 00 7E 01 40 00 02 02 00 40 5B 7A 64 00 FF  // B..~.@....@[zd..
    A5D0: FF 07 00 00 00 00 00 C8 00 3F 00 08 00 19 00 40  // .........?.....@
    A5E0: 06 5F 00 40 00 32 00 80 0C 7E 00 60 00 64 00 00  // ._.@.2...~.`.d..
    A5F0: 32 7F 00 7F 00 64 00 16 6C 01 00 00 6C 01 00 51  // 2....d..l...l..Q
    A600: 6C 01 00 0F 6E 01 00 00 6E 01 00 4A 6E 01 00 0C  // l...n...n..Jn...
    A610: 7E 01 00 00 7E 01 00 47 7E 01 00 0C 70 01 00 00  // ~...~..G~...p...
    A620: 70 01 00 47 70 01 00 0C 72 01 00 00 72 01 00 47  // p..Gp...r...r..G
    A630: 72 01 00 00 BF 00 02 03 04 00 37 00 00 56 00 46  // r.........7..V.F
    A640: 56 00 00 03 21 00 00 55 20 00 3D 65 00 03 44 2C  // V...!..U .=e..D,
    A650: 00 3D 65 00 0B 46 B4 00 02 29 00 00 32 25 00 08  // .=e..F...)..2%..
    A660: 0E 25 00 60 52 14 5C 22 28 55 F8 00 02 22 00 00  // .%.`R.\"(U..."..
    A670: 03 0D 41 01 00 66 FF 2D 0D 42 BB 00 2D 0A 42 41  // ..A..f.-.B..-.BA
    A680: 03 24 00 00 00 3D E2 00 00 48 A0 00 3E 25 00 04  // .$...=...H..>%..
    A690: 44 6F 00 03 22 46 00 33 25 46 01 15 25 46 04 0F  // Do.."F.3%F..%F..
    A6A0: 25 46 01 33 39 00 00 3E 25 00 01 44 8C 00 3E 25  // %F.39..>%..D..>%
    A6B0: 00 02 44 85 00 03 25 46 21 03 65 00 2F 43 90 00  // ..D...%F!.e./C..
    A6C0: 03 65 00 13 03 79 46 00 33 65 46 01 15 2D 46 03  // .e...yF.3eF..-F.
    A6D0: 0F 65 46 01 52 14 01 02 01 4D 46 01 52 00 4D 00  // .eF.R....MF.R.M.
    A6E0: 54 00 05 4D 54 00 FF 4C 3A 00 00 5B 7A 04 00 03  // T..MT..L:..[z...
    A6F0: 02 01 04 00 CB 00 01 01 00 00 37 00 00 3D 65 00  // ..........7..=e.
    A700: 01 44 61 00 56 00 40 20 25 00 10 03 0A 48 40 07  // .Da.V.@ %....H@.
    A710: 25 8F 4F FD 4A 25 8F 4F 04 49 20 00 52 14 07 25  // %.O.J%.O.I .R..%
    A720: 46 50 FE 4A 65 46 50 01 49 2F 00 03 21 40 00 21  // FP.JeFP.I/..!@.!
    A730: 0D 40 DC 00 03 0A 48 40 07 25 B4 3A FE 56 00 40  // .@....H@.%.:.V.@
    A740: 03 21 40 00 21 0D 40 6B 01 03 0A 48 40 07 25 85  // .!@.!.@k...H@.%.
    A750: 41 EF 43 C7 00 56 00 40 20 25 00 10 03 0A 48 40  // A.C..V.@ %....H@
    A760: 0D 25 8F 4F 02 4A 25 8F 4F 04 44 71 00 52 14 0D  // .%.O.J%.O.Dq.R..
    A770: 25 46 50 01 4A 65 46 50 01 44 80 00 56 00 40 03  // %FP.JeFP.D..V.@.
    A780: 21 40 00 21 0D 40 DC 00 03 0A 48 40 0D 25 B4 3A  // !@.!.@....H@.%.:
    A790: 01 56 00 40 03 21 40 00 21 0D 40 6B 01 03 0A 48  // .V.@.!@.!.@k...H
    A7A0: 40 0D 25 85 41 10 56 00 40 03 21 40 00 21 0D 40  // @.%.A.V.@.!@.!.@
    A7B0: 5A 00 03 0A 48 40 0D 25 4C 4D 01 3A 00 00 5B 00  // Z...H@.%LM.:..[.
    A7C0: 5E 01 01 04 04 08 37 00 00 3D 65 02 01 49 27 01  // ^.....7..=e..I'.
    A7D0: 4B A5 02 03 49 2A 00 52 25 02 05 00 00 00 00 00  // K...I*.R%.......
    A7E0: 02 05 01 00 05 02 00 43 2F 00 55 28 02 52 25 03  // .......C/.U(.R%.
    A7F0: 38 00 C4 00 03 48 00 C9 00 0E 25 02 90 52 14 08  // 8....H....%..R..
    A800: 25 02 07 0D 05 B4 3A 11 11 01 00 5C 25 B3 3A 0B  // %.....:....\%.:.
    A810: 01 03 21 41 02 15 25 41 04 0D 22 B3 3A 41 0D 65  // ..!A..%A..".:A.e
    A820: B6 3A 01 5C 25 DB 3A FD 01 03 02 41 00 1B 05 41  // .:.\%.:....A...A
    A830: 08 01 0A CB 3A 41 01 0A CF 3A 41 15 05 00 18 01  // ....:A...:A.....
    A840: 02 CA 3A 00 01 02 CE 3A 00 4B A5 02 03 49 A0 00  // ..:....:.K...I..
    A850: 2B 05 CA 3A 00 00 10 00 2B 05 CE 3A 00 00 50 00  // +..:....+..:..P.
    A860: 01 0D A7 3A 80 00 01 0D B1 3A 00 03 01 0D 0C 3B  // ...:.....:.....;
    A870: 01 03 01 05 0A 3B 00 00 08 28 01 05 0B 3B 00 00  // .....;...(...;..
    A880: 08 00 01 E5 EF 3A 08 01 E5 EE 3A E0 54 00 A9 3A  // .....:....:.T..:
    A890: 01 19 AA 3A 00 01 89 AA 3A 00 01 19 AE 3A 00 01  // ...:....:....:..
    A8A0: 89 AE 3A 00 07 0D A5 3A FF F8 66 FF 2D 0D 42 4F  // ..:....:..f.-.BO
    A8B0: 01 03 0C 40 00 00 3E 0D 40 FF FF 44 0E 01 3D 8C  // ...@..>.@..D..=.
    A8C0: 01 00 00 44 0E 01 2D 0D 42 03 00 43 F1 00 01 24  // ...D..-.B..C...$
    A8D0: A5 3A 02 00 01 09 C7 3A 01 07 25 B3 3A FE 07 25  // .:.....:..%.:..%
    A8E0: DB 3A FE 3A 00 00 5B 0E 25 02 90 52 14 3D 65 02  // .:.:..[.%..R.=e.
    A8F0: 00 49 3C 01 0D 25 B3 3A 01 43 48 01 3D 65 02 10  // .I<..%.:.CH.=e..
    A900: 44 48 01 01 09 C7 3A 01 3A 00 00 5B 7A 0F 00 01  // DH....:.:..[z...
    A910: 00 01 01 01 03 01 05 02 02 00 08 FF FF 08 42 00  // ..............B.
    A920: 01 01 00 00 37 00 00 52 14 3D 65 00 01 44 21 00  // ....7..R.=e..D!.
    A930: 54 20 4B 50 4A 65 4B 50 01 49 16 00 43 3E 00 5C  // T KPJeKP.I..C>.\
    A940: 4D 1B 50 FE FF 00 01 4A A5 01 50 01 44 3E 00 0D  // M.P....J..P.D>..
    A950: 25 4B 50 01 4A 65 4B 50 01 44 36 00 3A 00 00 5B  // %KP.JeKP.D6.:..[
    A960: 13 00 01 03 00 00 37 00 00 0E 25 00 A0 52 14 3A  // ......7...%..R.:
    A970: 00 00 5B 00 C6 01 01 01 00 18 56 00 40 03 21 40  // ..[.......V.@.!@
    A980: 05 21 0D 40 80 00 03 0A 48 40 37 00 00 01 0D 47  // .!.@....H@7....G
    A990: 50 0D 00 3D 8D 01 0D 00 46 2C 00 01 19 47 50 01  // P..=....F,...GP.
    A9A0: 01 8D 48 50 40 01 01 0D 49 50 2C 01 03 09 41 00  // ..HP@...IP,...A.
    A9B0: 2D 19 41 00 03 8A 41 41 2D 8D 41 01 00 1B 1D 41  // -.A...AA-.A....A
    A9C0: 02 01 1A 48 50 41 33 0D 41 01 00 01 0A EA 4F 41  // ...HPA3.A.....OA
    A9D0: 54 08 EC 4F 01 99 EC 4F 02 03 19 41 00 33 09 41  // T..O...O...A.3.A
    A9E0: 02 56 18 41 03 B1 41 04 33 1A 41 41 01 8A EB 4F  // .V.A..A.3.AA...O
    A9F0: 41 03 19 41 00 33 09 41 02 2D 1A 41 41 2D 09 41  // A..A.3.A.-.AA-.A
    AA00: 00 4B 25 04 10 44 98 00 2D 09 41 00 01 0A EB 4F  // .K%..D..-.A....O
    AA10: 41 03 21 41 04 09 25 41 02 1B 25 41 01 01 22 ED  // A.!A..%A..%A..".
    AA20: 4F 41 03 09 41 01 2D 19 41 01 33 0D 41 01 00 01  // OA..A.-.A.3.A...
    AA30: 0A EF 4F 41 54 08 F7 4F 01 99 F7 4F 03 03 19 41  // ..OAT..O...O...A
    AA40: 01 33 09 41 03 56 18 41 03 B9 41 04 33 1A 41 41  // .3.A.V.A..A.3.AA
    AA50: 01 8A F6 4F 41 03 19 41 01 33 09 41 03 2D 1A 41  // ...OA..A.3.A.-.A
    AA60: 41 2D 09 41 01 4B 25 04 20 44 FC 00 2D 09 41 01  // A-.A.K%. D..-.A.
    AA70: 01 0A F6 4F 41 03 21 41 04 09 25 41 04 1B 25 41  // ...OA.!A..%A..%A
    AA80: 02 01 22 F8 4F 41 3D 65 05 00 44 21 01 07 65 01  // ..".OA=e..D!..e.
    AA90: 50 EF 43 26 01 0D 65 01 50 10 03 00 46 EB 4F 02  // P.C&..e.P...F.O.
    AAA0: 00 02 F6 4F 56 00 40 03 21 40 05 21 0D 40 01 00  // ...OV.@.!@.!.@..
    AAB0: 03 0A 48 40 56 00 40 03 09 40 02 3D 65 05 00 49  // ..H@V.@..@.=e..I
    AAC0: 53 01 33 0D 40 02 00 15 05 40 10 56 00 41 3D 8D  // S.3.@....@.V.A=.
    AAD0: 02 0D 00 48 6B 01 03 0D 41 0D 00 33 19 41 02 0F  // ...Hk...A..3.A..
    AAE0: 02 40 41 0F E5 40 80 01 02 E8 39 40 56 00 40 03  // .@A..@....9@V.@.
    AAF0: 21 40 05 21 0D 40 6B 01 03 0A 48 40 01 09 C3 41  // !@.!.@k...H@...A
    AB00: 00 01 89 C3 41 01 01 09 C4 41 00 01 89 C4 41 01  // ....A....A....A.
    AB10: 01 02 C0 41 46 01 01 C1 41 02 54 00 BE 41 01 31  // ...AF...A.T..A.1
    AB20: BE 41 04 01 B1 BE 41 04 54 00 BF 41 01 39 BF 41  // .A....A.T..A.9.A
    AB30: 04 01 B9 BF 41 04 3A 00 00 5B 0A 00 02 03 08 00  // ....A.:..[......
    AB40: 37 00 00 5B CC 01 01 01 00 00 37 00 00 56 00 41  // 7..[......7..V.A
    AB50: 03 39 41 01 09 25 41 0F 56 00 40 03 62 40 41 01  // .9A..%A.V.@.b@A.
    AB60: 02 58 53 40 03 0A 46 42 66 FF 2D 0D 42 B8 01 15  // .XS@..FBf.-.B...
    AB70: 25 41 02 2D 0A 42 41 03 0C 48 00 00 07 05 90 5D  // %A.-.BA..H.....]
    AB80: 00 00 01 00 03 0C 48 02 00 03 05 40 C0 5D 00 00  // ......H....@.]..
    AB90: 56 00 41 03 21 41 00 27 02 40 41 15 05 40 10 03  // V.A.!A.'.@A..@..
    ABA0: 25 40 02 01 02 62 53 40 01 05 63 53 40 00 00 30  // %@...bS@..cS@..0
    ABB0: 03 0A 42 46 56 08 48 0D 25 5A 53 01 54 00 59 53  // ..BFV.H.%ZS.T.YS
    ABC0: 56 00 41 03 71 41 01 0F E5 41 80 01 02 72 53 41  // V.A.qA...A...rSA
    ABD0: 03 69 41 00 03 A5 41 01 01 02 72 53 41 4B 25 01  // .iA...A...rSAK%.
    ABE0: 01 44 CD 00 03 71 41 00 03 A5 41 02 01 02 72 53  // .D...qA...A...rS
    ABF0: 41 03 79 41 00 03 A5 41 03 01 02 72 53 41 03 05  // A.yA...A...rSA..
    AC00: 40 00 31 01 00 2D A9 40 01 01 02 6E 53 40 43 00  // @.1..-.@...nS@C.
    AC10: 01 03 71 41 01 0F 65 41 01 03 A5 41 02 01 02 72  // ..qA..eA...A...r
    AC20: 53 41 03 05 40 00 11 01 00 01 02 6E 53 40 03 05  // SA..@......nS@..
    AC30: 40 01 30 00 00 03 A9 40 01 01 02 6F 53 40 5C A5  // @.0....@...oS@\.
    AC40: 58 53 CF 10 0D 25 58 53 01 02 65 00 02 56 00 40  // XS...%XS..e..V.@
    AC50: 03 29 40 01 2D 25 40 04 21 05 40 C8 00 00 00 56  // .)@.-%@.!.@....V
    AC60: 00 41 03 21 41 00 27 02 40 41 03 0A 41 40 33 0D  // .A.!A.'.@A..A@3.
    AC70: 41 01 00 3E 0D 41 00 00 44 A4 01 51 64 4A 25 5B  // A..>.A..D..QdJ%[
    AC80: 53 04 44 2A 01 4A 65 5B 53 31 49 A4 01 02 65 00  // S.D*.Je[S1I...e.
    AC90: 01 4B 25 01 01 49 A4 01 01 05 72 53 01 00 03 80  // .K%..I....rS....
    ACA0: 3D 65 01 01 49 6B 01 02 A8 00 72 53 43 A4 01 56  // =e..Ik....rSC..V
    ACB0: 00 41 03 19 41 00 56 00 40 03 0A 40 41 3B 02 40  // .A..A.V.@..@A;.@
    ACC0: 03 28 40 72 53 03 68 40 72 53 03 A8 40 72 53 03  // .(@rS.h@rS..@rS.
    ACD0: E8 40 72 53 04 02 00 40 2D A5 41 04 2D 0D 41 04  // .@rS...@-.A.-.A.
    ACE0: 00 3E A9 41 01 45 72 01 0D 25 5A 53 02 01 25 58  // .>.A.Er..%ZS..%X
    ACF0: 53 02 51 01 54 00 58 53 5B 7A 14 00 00 00 00 00  // S.Q.T.XS[z......
    AD00: 04 00 02 00 08 00 04 00 0C 00 06 00 10 00 08 00  // ................
    AD10: 46 00 02 02 00 04 37 00 00 55 30 00 32 25 00 01  // F.....7..U0.2%..
    AD20: 20 25 00 08 56 08 48 03 22 48 40 0D A5 D5 53 01  //  %..V.H."H@...S.
    AD30: 02 A0 00 D4 53 08 A5 00 03 4A 25 D4 53 02 44 3C  // ....S....J%.S.D<
    AD40: 00 5C 0D D5 53 FF FE 01 00 43 42 00 0D 0D D5 53  // .\..S....CB....S
    AD50: 01 01 3A 00 00 5B E7 00 01 08 08 00 03 01 00 00  // ..:..[..........
    AD60: 02 05 00 01 00 01 00 52 29 20 05 00 64 00 00 00  // .......R) ..d...
    AD70: 03 02 46 40 02 02 00 00 03 01 00 00 55 38 00 03  // ..F@........U8..
    AD80: 05 40 00 32 00 00 3D 05 00 00 00 00 00 44 64 00  // .@.2..=......Dd.
    AD90: 03 02 40 46 27 01 40 00 3E 05 40 9C 18 00 00 47  // ..@F'.@.>.@....G
    ADA0: 53 00 03 05 40 00 32 00 00 3E 05 40 C8 00 00 00  // S...@.2..>.@....
    ADB0: 46 64 00 03 05 40 C8 00 00 00 66 FF 2D 0D 42 C7  // Fd...@....f.-.B.
    ADC0: 00 3E 0C 40 02 00 47 7B 00 2D 0D 42 08 00 43 6B  // .>.@..G{.-.B..Ck
    ADD0: 00 33 0C 40 00 00 03 0C 01 06 00 3E 0D 01 19 00  // .3.@.......>....
    ADE0: 49 9A 00 27 0D 40 32 00 21 0D 40 02 00 43 9F 00  // I..'.@2.!.@..C..
    ADF0: 27 0C 40 06 00 2D 0C 40 04 00 02 E2 00 40 33 0C  // '.@..-.@.....@3.
    AE00: 40 04 00 21 0C 40 06 00 2D 0C 40 00 00 27 02 46  // @..!.@..-.@..'.F
    AE10: 40 02 0A 00 40 02 B2 00 40 5B 7A 20 00 C8 00 40  // @...@...@[z ...@
    AE20: 06 08 00 19 00 40 06 80 0C 40 00 32 00 80 0C 38  // .....@...@.2...8
    AE30: 18 60 00 64 00 00 32 00 32 7F 00 64 00 00 07 00  // .`.d..2.2..d....
    AE40: 02 01 00 00 5B 00 14 03 01 05 00 00 37 00 00 0E  // ....[.......7...
    AE50: 25 00 60 52 14 08 25 00 0F 42 29 00 63 0F 53 00  // %.`R..%..B).c.S.
    AE60: 63 11 09 02 63 12 66 02 63 01 CC 02 63 00 F5 02  // c...c.f.c...c...
    AE70: 63 08 D8 01 63 09 B9 01 63 0A C0 01 63 13 C8 01  // c...c...c...c...
    AE80: 63 14 D0 01 63 0B E0 01 63 0C BC 02 63 0D E8 01  // c...c...c...c...
    AE90: 63 10 01 02 5A 5A 43 B5 01 54 00 9A 55 01 0D 2B  // c...ZZC..T..U..+
    AEA0: 55 1F 00 3D A5 00 00 44 72 00 3D A5 00 02 44 A2  // U..=...Dr.=...D.
    AEB0: 01 3D A5 00 05 49 A2 01 54 00 C9 55 3D 25 02 00  // .=...I..T..U=%..
    AEC0: 49 81 00 02 25 02 02 32 25 02 01 01 E1 C9 55 02  // I...%..2%.....U.
    AED0: 4A 25 CC 55 01 49 B5 01 7B 05 01 00 80 00 00 7E  // J%.U.I..{......~
    AEE0: 05 40 8C 0A 00 00 56 00 46 03 29 46 02 27 02 40  // .@....V.F.)F.'.@
    AEF0: 46 07 65 D0 55 FE 01 05 D1 55 00 80 00 00 01 02  // F.e.U....U......
    AF00: D2 55 40 0D E5 D3 55 10 0D 65 28 55 04 51 01 07  // .U@...U..e(U.Q..
    AF10: 65 28 55 FB 51 01 03 21 40 02 15 25 40 05 01 E2  // e(U.Q..!@..%@...
    AF20: CA 55 40 54 20 CE 55 02 A0 02 28 55 03 0A 46 48  // .U@T .U...(U..FH
    AF30: 08 A5 02 07 56 00 40 03 31 40 02 21 0D 40 80 00  // ....V.@.1@.!.@..
    AF40: 03 8A 46 40 03 0A 48 40 03 88 40 EA 4F 03 08 40  // ..F@..H@..@.O..@
    AF50: EF 4F 2D 05 40 01 00 01 00 03 98 41 EB 4F 03 18  // .O-.@......A.O..
    AF60: 41 F6 4F 03 0A 48 46 01 02 0C 56 40 01 02 0D 56  // A.O..HF...V@...V
    AF70: 41 03 1A 48 46 03 00 40 EB 4F 33 1A 40 40 33 08  // A..HF..@.O3.@@3.
    AF80: 40 BE 41 33 08 40 BE 41 03 00 41 F6 4F 33 1A 41  // @.A3.@.A..A.O3.A
    AF90: 41 33 08 41 BF 41 33 08 41 BF 41 03 0A 48 46 01  // A3.A.A3.A.A..HF.
    AFA0: 0A 0F 56 41 01 8A 0F 56 40 03 1A 48 46 03 00 40  // ..VA...V@..HF..@
    AFB0: EC 4F 33 8A 40 40 03 00 41 F7 4F 33 8A 41 41 4A  // .O3.@@..A.O3.AAJ
    AFC0: 25 ED 4F 01 44 85 01 0F E5 40 80 4A 25 F8 4F 01  // %.O.D....@.J%.O.
    AFD0: 44 91 01 0F E5 41 80 03 0A 48 46 01 1A 0E 56 41  // D....A...HF...VA
    AFE0: 01 9A 0E 56 40 43 B5 01 07 E5 28 55 2F 0D 65 28  // ...V@C....(U/.e(
    AFF0: 55 04 51 01 07 65 28 55 FB 51 01 3A 00 00 5B 54  // U.Q..e(U.Q.:..[T
    B000: 20 D8 55 43 B5 01 01 25 D8 55 01 43 B5 01 01 25  //  .UC...%.U.C...%
    B010: D8 55 02 43 B5 01 01 25 D8 55 03 43 B5 01 07 25  // .U.C...%.U.C...%
    B020: C8 55 EF 43 B5 01 0D 25 C8 55 10 43 B5 01 0D 65  // .U.C...%.U.C...e
    B030: D0 55 01 51 0A 07 25 CD 55 FE 51 0A 01 0D CC 55  // .U.Q..%.U.Q....U
    B040: 01 02 51 C8 43 B5 01 0D 25 DE 55 10 43 B5 01 01  // ..Q.C...%.U.C...
    B050: 69 6F 55 02 3D A5 00 03 49 25 02 4A 25 35 55 10  // ioU.=...I%.J%5U.
    B060: 49 25 02 01 A5 6F 55 02 43 2A 02 01 B1 6F 55 00  // I%...oU.C*...oU.
    B070: 3D 25 02 00 44 3F 02 32 25 02 01 14 25 02 04 5C  // =%..D?.2%...%..\
    B080: E1 6F 55 8F 02 3D A5 00 05 44 4D 02 3D A5 00 00  // .oU..=...DM.=...
    B090: 49 5E 02 02 A5 00 00 03 39 40 00 33 25 40 01 01  // I^......9@.3%@..
    B0A0: 22 CB 55 40 02 E0 02 70 55 43 B5 01 02 E0 02 70  // ".U@...pUC.....p
    B0B0: 55 4B E5 02 01 44 B5 01 02 B0 00 6F 55 3D A5 00  // UK...D.....oU=..
    B0C0: 00 44 8C 02 3D A5 00 05 44 8C 02 02 E5 00 04 43  // .D..=...D......C
    B0D0: 95 02 02 E0 00 CB 55 2C E5 00 01 3D A5 00 02 44  // ......U,...=...D
    B0E0: A3 02 3D A5 00 03 49 AC 02 54 00 70 55 50 02 43  // ..=...I..T.pUP.C
    B0F0: B5 01 02 A5 00 00 03 31 43 00 4A 62 6F 55 44 44  // .......1C.JboUDD
    B100: B5 01 54 08 CC 55 51 C8 0D 25 CD 55 01 51 32 43  // ..T..UQ..%.U.Q2C
    B110: B5 01 0D 25 70 55 01 3D A5 00 00 44 E1 02 01 0D  // ...%pU.=...D....
    B120: A1 55 0F 01 43 B5 01 03 39 43 00 03 02 40 44 33  // .U..C...9C...@D3
    B130: 25 40 01 01 0A A1 55 40 43 B5 01 54 00 A1 55 07  // %@....U@C..T..U.
    B140: 25 70 55 FE 07 0D 6F 55 FF 80 07 25 35 55 EF 54  // %pU...oU...%5U.T
    B150: 20 C8 55 54 20 D8 55 43 B5 01 0C 01 01 06 04 00  //  .UT .UC........
    B160: 37 00 00 42 29 00 63 07 EA 00 63 01 25 00 63 00  // 7..B).c...c.%.c.
    B170: C0 00 63 0B ED 00 63 04 F2 00 5A 5A 43 05 01 02  // ..c...c...ZZC...
    B180: 65 00 10 52 4D 3D 65 00 00 44 E6 00 02 65 00 11  // e..RM=e..D...e..
    B190: 52 04 4B E5 02 01 49 E6 00 3D A5 00 00 49 57 00  // R.K...I..=...IW.
    B1A0: 03 01 00 00 02 65 00 0F 55 38 00 52 4D 02 02 00  // .....e..U8.RM...
    B1B0: 00 02 65 00 0A 55 08 02 52 4D 3D A5 00 00 49 70  // ..e..U..RM=...Ip
    B1C0: 00 02 65 00 0B 52 4D 43 79 00 02 65 00 0E 52 4D  // ..e..RMCy..e..RM
    B1D0: 43 AD 00 20 05 01 64 00 00 00 02 05 01 14 1E 00  // C.. ..d.........
    B1E0: 02 2C 21 01 00 03 01 00 00 02 02 00 40 52 0C 26  // .,!.........@R.&
    B1F0: 05 00 64 00 00 00 02 02 01 40 02 02 00 00 02 65  // ..d......@.....e
    B200: 00 01 55 08 02 52 4D 51 05 02 65 00 01 52 04 51  // ..U..RMQ..e..R.Q
    B210: 0A 02 65 00 09 52 4D 43 E6 00 02 65 00 12 52 04  // ..e..RMC...e..R.
    B220: 4B E5 02 01 44 E6 00 02 65 00 08 52 4D 02 65 00  // K...D...e..RM.e.
    B230: 00 52 04 3D A5 00 00 49 E6 00 02 65 00 00 52 4D  // .R.=...I...e..RM
    B240: 3A 00 00 5B 43 E6 00 52 4D 43 E6 00 66 06 02 29  // :..[C..RMC..f..)
    B250: 00 00 02 68 00 4E 00 02 8C 00 20 00 52 33 5B 02  // ...h.N.... .R3[.
    B260: 29 00 00 52 33 5B 7F 0D 02 02 08 00 37 00 00 4A  // )..R3[......7..J
    B270: 25 48 00 01 44 12 00 5B 66 FF 2D 0D 42 75 0D 56  // %H..D..[f.-.Bu.V
    B280: 00 40 03 21 40 00 15 25 40 01 2D 0A 42 40 03 0C  // .@.!@..%@.-.B@..
    B290: 48 00 00 3D 65 00 10 49 76 00 02 65 00 01 3D 25  // H..=e..Iv..e..=%
    B2A0: 00 03 45 6E 0D 4A A5 F7 5D 01 44 6E 0D 02 65 00  // ..En.J..].Dn..e.
    B2B0: 00 4A A5 15 5E 02 49 6E 0D 0D 25 16 5E 01 07 05  // .J..^.In..%.^...
    B2C0: 15 5E FF FF FB FF 3D E5 00 04 45 6F 00 4A A5 15  // .^....=...Eo.J..
    B2D0: 5E 01 44 6E 0D 02 65 00 01 43 6E 0D 3D 25 00 03  // ^.Dn..e..Cn.=%..
    B2E0: 48 87 00 03 05 00 01 01 01 01 43 C7 00 4A A5 F7  // H.........C..J..
    B2F0: 5D 01 44 7D 00 4A A5 15 5E 02 49 6E 0D 0D 25 16  // ].D}.J..^.In..%.
    B300: 5E 01 07 05 15 5E FF FF FB FF 03 05 00 01 00 00  // ^....^..........
    B310: 00 3D E5 00 01 44 C7 00 03 05 00 01 01 00 00 3D  // .=...D.........=
    B320: E5 00 02 44 C7 00 03 05 00 01 01 01 01 42 29 00  // ...D.........B).
    B330: 63 07 F1 00 63 0A D8 05 63 01 41 06 63 00 CE 07  // c...c...c.A.c...
    B340: 63 09 70 09 63 08 E0 0A 63 0B 25 0C 63 0E 41 0B  // c.p.c...c.%.c.A.
    B350: 63 0F 10 01 5A 5A 5B 01 05 FD 5D 00 00 00 00 01  // c...ZZ[...].....
    B360: 05 EE 5D 00 40 00 00 5C 05 F0 5D FF FF 0F FE 00  // ..].@..\..].....
    B370: 00 D0 00 43 6E 0D 4A A5 F7 5D 01 49 6E 0D 4A 25  // ...Cn.J..].In.J%
    B380: 00 5E 01 49 44 01 3C 25 F7 5D 00 49 44 01 3C 71  // .^.ID.<%.].ID.<q
    B390: F7 5D 00 49 44 01 08 E5 00 01 03 00 40 F1 5D 09  // .].ID.......@.].
    B3A0: 25 40 01 3E 39 40 00 44 6E 0D 54 20 F7 5D 07 4D  // %@.>9@.Dn.T .].M
    B3B0: F1 5D DF FE 4A 65 F1 5D 40 49 4E 01 0D 05 03 5E  // .]..Je.]@IN....^
    B3C0: 01 01 01 01 0D 25 00 5E 01 0D A5 00 5E 20 0D 25  // .....%.^....^ .%
    B3D0: 00 5E 01 0D 05 03 5E 01 01 01 01 03 39 40 00 09  // .^....^.....9@..
    B3E0: 25 40 01 5C 22 F1 5D FE 40 5C 65 00 5E C1 02 0D  // %@.\".].@\e.^...
    B3F0: 25 02 5E 08 3D 65 00 07 49 9D 01 07 E5 00 5E 5F  // %.^.=e..I.....^_
    B400: 43 A2 01 0D E5 00 5E A0 5C 05 06 5E BB BB FF FF  // C.....^.\..^....
    B410: 33 33 00 00 5C 05 03 5E F7 F7 F7 F7 02 02 02 02  // 33..\..^........
    B420: 66 07 2D 0C 42 0A 00 56 00 40 20 25 00 0C 2D 0A  // f.-.B..V.@ %..-.
    B430: 42 40 03 24 40 09 00 03 62 40 40 03 8A 40 40 5C  // B@.$@...b@@..@@\
    B440: 02 04 5E F8 F8 F8 F8 40 03 21 43 00 03 A2 46 44  // ..^....@.!C...FD
    B450: 3D A5 00 00 44 7D 02 03 05 40 04 00 00 00 66 1E  // =...D}...@....f.
    B460: 2D 0D 42 C4 00 3D A5 00 02 44 2C 02 2D 0D 42 0C  // -.B..=...D,.-.B.
    B470: 00 3D 05 01 30 75 00 00 47 2C 02 3D 05 01 40 9C  // .=..0u..G,.=..@.
    B480: 00 00 46 27 02 2D 0D 42 28 02 43 2C 02 2D 0D 42  // ..F'.-.B(.C,.-.B
    B490: 0C 00 4C A4 46 05 00 44 4F 02 03 04 40 00 00 3E  // ..L.F..DO...@..>
    B4A0: 05 40 00 00 00 00 44 4F 02 03 24 40 0A 00 09 25  // .@....DO..$@...%
    B4B0: 40 1C 43 3E 03 66 07 2D 0C 42 04 00 03 04 41 00  // @.C>.f.-.B....A.
    B4C0: 00 3E 05 41 00 00 00 00 44 3E 03 4C A4 46 06 00  // .>.A....D>.L.F..
    B4D0: 49 75 02 2D 0D 42 0C 00 43 56 02 03 24 40 07 00  // Iu.-.B..CV..$@..
    B4E0: 43 3E 03 03 05 40 05 00 00 00 66 1E 2D 0D 42 C0  // C>...@....f.-.B.
    B4F0: 02 03 0C 46 02 00 4C A4 46 00 00 49 DF 02 66 1E  // ...F..L.F..I..f.
    B500: 2D 0D 42 E8 00 3D 05 01 48 3F 00 00 47 D2 02 66  // -.B..=..H?..G..f
    B510: 1E 2D 0D 42 50 02 3D 05 01 78 69 00 00 47 D2 02  // .-.BP.=..xi..G..
    B520: 66 1E 2D 0D 42 88 02 3D 05 01 F0 D2 00 00 47 D2  // f.-.B..=......G.
    B530: 02 66 1E 2D 0D 42 20 01 03 0C 46 02 00 4C A4 46  // .f.-.B ...F..L.F
    B540: 00 00 44 0E 03 2D 0D 42 06 00 56 20 41 3D A4 00  // ..D..-.B..V A=..
    B550: 00 00 44 02 03 2D 25 41 01 3E 25 41 0A 44 0E 03  // ..D..-%A.>%A.D..
    B560: 2D 0D 42 05 00 43 E7 02 03 24 40 04 00 09 25 40  // -.B..C...$@...%@
    B570: 1C 43 3E 03 66 07 2D 0C 42 08 00 03 04 41 00 00  // .C>.f.-.B....A..
    B580: 3E 05 41 00 00 00 00 44 3E 03 4C A4 46 04 00 49  // >.A....D>.L.F..I
    B590: 34 03 2D 0D 42 44 00 43 15 03 2D 0D 42 08 00 03  // 4.-.BD.C..-.B...
    B5A0: 24 40 05 00 15 05 40 1A 5C 02 12 5E FF FF FF E3  // $@....@.\..^....
    B5B0: 40 07 65 00 5E FE 3D A5 00 00 49 F6 03 5C 05 0B  // @.e.^.=...I..\..
    B5C0: 5E FF FF 8F FF 00 00 10 00 0D 05 0C 5E 01 01 00  // ^...........^...
    B5D0: 00 5C 05 0B 5E 0F 00 FF FF 40 17 00 00 0D 05 0E  // .\..^....@......
    B5E0: 5E 00 00 00 01 01 05 07 5E 01 00 00 80 01 05 0A  // ^.......^.......
    B5F0: 5E 00 00 00 00 01 05 09 5E 87 39 01 00 01 05 08  // ^.......^.9.....
    B600: 5E 48 E9 00 00 01 05 0D 5E 00 00 00 00 5C 05 0B  // ^H......^....\..
    B610: 5E FF FF F8 FF 00 00 00 00 5C 05 0C 5E 8F FF FF  // ^........\..^...
    B620: FF 20 00 00 00 0D 05 0E 5E 00 00 00 10 07 05 0C  // . ......^.......
    B630: 5E FB FF FF FF 01 05 0F 5E 3E 00 08 B0 01 05 10  // ^.......^>......
    B640: 5E 3E 00 18 26 01 05 11 5E 3E 00 80 3F 5C 05 12  // ^>..&...^>..?\..
    B650: 5E 00 00 00 1C 3E 00 44 00 43 8A 04 5C 05 0B 5E  // ^....>.D.C..\..^
    B660: FF FF 8F FF 00 00 00 00 0D 05 0C 5E 01 01 00 00  // ...........^....
    B670: 5C 05 0B 5E 0F 00 FF FF 00 0B 00 00 0D 05 0E 5E  // \..^...........^
    B680: 00 00 00 01 01 05 07 5E 03 00 AA 22 54 00 0A 5E  // .......^..."T..^
    B690: 01 05 09 5E C1 0A 00 00 01 05 08 5E 00 10 00 00  // ...^.......^....
    B6A0: 01 05 0D 5E 00 00 00 00 5C 05 0B 5E FF FF F8 FF  // ...^....\..^....
    B6B0: 00 00 04 00 07 05 0C 5E 8F FF FF FF 0D 05 0E 5E  // .......^.......^
    B6C0: 00 00 00 10 0D 05 0C 5E 04 00 00 00 01 05 0F 5E  // .......^.......^
    B6D0: 3E 00 08 B0 01 05 10 5E 3E 00 1C 12 01 05 11 5E  // >......^>......^
    B6E0: 3E 00 80 3F 5C 05 12 5E 00 00 00 1C 3E 00 44 00  // >..?\..^....>.D.
    B6F0: 0D A5 06 5E 08 0D 25 F3 5D 01 0D 65 F1 5D 20 4A  // ...^..%.]..e.] J
    B700: 65 F1 5D 40 49 99 04 0D A5 F1 5D 01 07 25 00 5E  // e.]@I.....]..%.^
    B710: FE 07 05 03 5E FE FE FE FE 4A E5 00 5E 10 44 B3  // ....^....J..^.D.
    B720: 04 66 07 2D 0C 42 0C 00 03 04 40 00 00 3E 05 40  // .f.-.B....@..>.@
    B730: FF FF FF FF 44 E5 04 01 04 F4 5D 00 00 01 04 F5  // ....D.....].....
    B740: 5D 04 00 2D 0D 42 08 00 43 C2 04 01 05 F4 5D 38  // ]..-.B..C.....]8
    B750: 20 00 00 01 05 F5 5D 0C 00 00 00 56 00 01 4A 05  //  .....]....V..J.
    B760: 03 5E 20 20 20 20 44 1E 05 51 02 2D 05 01 01 00  // .^    D..Q.-....
    B770: 00 00 3E 05 01 A0 86 01 00 49 F8 04 01 25 F7 5D  // ..>......I...%.]
    B780: 03 43 6E 0D 03 00 40 04 5E 09 05 40 07 00 00 00  // .Cn...@.^..@....
    B790: 21 05 40 03 00 00 00 03 05 41 21 20 00 00 2D 02  // !.@......A! ..-.
    B7A0: 41 40 01 02 F4 5D 41 03 00 41 F5 5D 01 05 F4 5D  // A@...]A..A.]...]
    B7B0: 84 00 00 00 01 02 F5 5D 41 03 05 41 22 20 00 00  // .......]A..A" ..
    B7C0: 2D 02 41 40 01 02 F4 5D 41 03 00 41 F5 5D 01 05  // -.A@...]A..A.]..
    B7D0: F4 5D 85 00 00 00 01 02 F5 5D 41 3D 25 00 03 45  // .].......]A=%..E
    B7E0: B2 05 03 00 40 12 5E 09 05 40 00 00 00 1C 1B 05  // ....@.^..@......
    B7F0: 40 16 01 05 F4 5D 22 00 00 00 03 00 41 F5 5D 09  // @....]".....A.].
    B800: 25 41 0F 0F 22 41 40 0F 25 41 80 01 05 F4 5D 22  // %A.."A@.%A....]"
    B810: 00 00 00 01 02 F5 5D 41 56 00 41 3D A5 00 00 49  // ......]AV.A=...I
    B820: CA 05 5C A5 0B 5E F8 00 07 65 00 5E FE 43 6E 0D  // ..\..^...e.^.Cn.
    B830: 5C A5 0B 5E F8 01 0D 65 00 5E 01 43 6E 0D 03 0A  // \..^...e.^.Cn...
    B840: 46 48 66 07 2D 0C 42 0A 00 56 00 40 20 25 00 0C  // FHf.-.B..V.@ %..
    B850: 2D 0A 42 40 20 25 00 02 03 0A 48 40 01 04 2E 5D  // -.B@ %....H@...]
    B860: 00 00 07 E5 2D 5D FC 03 0A 48 46 03 05 40 01 01  // ....-]...HF..@..
    B870: 01 01 4A A5 F7 5D 01 44 23 06 4A A5 06 5E 01 49  // ..J..].D#.J..^.I
    B880: 23 06 09 05 40 FF FF FE FE 0D 02 03 5E 40 51 05  // #...@.......^@Q.
    B890: 03 02 40 00 69 05 40 FF FF FF FF 07 02 03 5E 40  // ..@.i.@.......^@
    B8A0: 51 C8 51 C8 43 6E 0D 4A 25 FC 5D 01 49 6E 0D 3C  // Q.Q.Cn.J%.].In.<
    B8B0: 25 F7 5D 00 49 6E 0D 4C 25 00 01 44 60 06 0D 05  // %.].In.L%..D`...
    B8C0: 06 5E 04 00 00 00 4C 65 00 01 44 6F 06 0D 05 06  // .^....Le..Do....
    B8D0: 5E 40 00 00 00 4C A5 00 01 44 7E 06 0D 05 06 5E  // ^@...L...D~....^
    B8E0: 00 04 00 00 4C E5 00 01 44 8D 06 0D 05 06 5E 00  // ....L...D.....^.
    B8F0: 40 00 00 03 02 40 00 15 05 40 04 0D 02 03 5E 40  // @....@...@....^@
    B900: 56 00 01 4A 25 FC 5D 01 49 6E 0D 03 02 40 00 15  // V..J%.].In...@..
    B910: 05 40 05 03 00 41 03 5E 09 02 41 40 09 05 40 20  // .@...A.^..A@..@ 
    B920: 20 20 20 3E 02 41 40 44 DF 06 51 02 2D 05 01 01  //    >.A@D..Q.-...
    B930: 00 00 00 3E 05 01 A0 86 01 00 49 9D 06 01 25 F7  // ...>......I...%.
    B940: 5D 04 43 6E 0D 03 02 40 00 15 05 40 04 69 05 40  // ].Cn...@...@.i.@
    B950: FF FF FF FF 07 02 03 5E 40 56 00 01 4A 25 FC 5D  // .......^@V..J%.]
    B960: 01 49 6E 0D 03 02 40 00 15 05 40 05 03 00 41 03  // .In...@...@...A.
    B970: 5E 09 02 41 40 3E 05 41 00 00 00 00 44 34 07 51  // ^..A@>.A....D4.Q
    B980: 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00 49  // .-......>......I
    B990: F6 06 01 25 F7 5D 05 43 6E 0D 56 00 01 4A 25 FC  // ...%.].Cn.V..J%.
    B9A0: 5D 01 49 6E 0D 4A 25 0C 5E 80 49 62 07 51 02 2D  // ].In.J%.^.Ib.Q.-
    B9B0: 05 01 01 00 00 00 3E 05 01 A0 86 01 00 49 37 07  // ......>......I7.
    B9C0: 01 25 F7 5D 06 43 6E 0D 03 0A 41 48 56 00 40 03  // .%.].Cn...AHV.@.
    B9D0: 21 40 00 03 0A 48 40 0D 25 60 01 01 51 0A 03 0A  // !@...H@.%`..Q...
    B9E0: 48 41 0D 25 E8 5D 03 4A 25 E8 5D 04 44 81 07 0D  // HA.%.].J%.].D...
    B9F0: 65 F1 5D 12 4A 65 F1 5D 04 44 8E 07 4C 25 00 01  // e.].Je.].D..L%..
    BA00: 44 A2 07 0D 65 F0 5D 10 4C 65 00 01 44 AE 07 0D  // D...e.].Le..D...
    BA10: 65 F0 5D 20 4C A5 00 01 44 BA 07 0D 65 F0 5D 40  // e.] L...D...e.]@
    BA20: 4C E5 00 01 44 C6 07 0D 65 F0 5D 80 01 71 F7 5D  // L...D...e.]..q.]
    BA30: 00 43 6E 0D 4A 05 06 5E 44 44 00 00 44 6E 0D 07  // .Cn.J..^DD..Dn..
    BA40: 65 F1 5D FD 07 25 E8 5D FD 03 0A 41 48 56 00 40  // e.]..%.]...AHV.@
    BA50: 03 21 40 00 03 0A 48 40 07 25 60 01 FE 03 0A 48  // .!@...H@.%`....H
    BA60: 41 4C 25 00 01 44 0A 08 07 05 06 5E FB FF FF FF  // AL%..D.....^....
    BA70: 4C 65 00 01 44 19 08 07 05 06 5E BF FF FF FF 4C  // Le..D.....^....L
    BA80: A5 00 01 44 28 08 07 05 06 5E FF FB FF FF 4C E5  // ...D(....^....L.
    BA90: 00 01 44 37 08 07 05 06 5E FF BF FF FF 07 65 0C  // ..D7....^.....e.
    BAA0: 5E FE 54 00 08 5E 54 00 09 5E 03 00 40 06 5E 4C  // ^.T..^T..^..@.^L
    BAB0: 25 00 01 44 5B 08 5E 05 40 FC FF FF FF 03 00 00  // %..D[.^.@.......
    BAC0: 00 4C 65 00 01 44 6D 08 5E 05 40 CF FF FF FF 30  // .Le..Dm.^.@....0
    BAD0: 00 00 00 4C A5 00 01 44 7F 08 5E 05 40 FF FC FF  // ...L...D..^.@...
    BAE0: FF 00 03 00 00 4C E5 00 01 44 91 08 5E 05 40 FF  // .....L...D..^.@.
    BAF0: CF FF FF 00 30 00 00 3C 02 06 5E 40 44 45 09 01  // ....0..<..^@DE..
    BB00: 02 06 5E 40 03 02 40 00 15 05 40 04 0D 02 03 5E  // ..^@..@...@....^
    BB10: 40 56 00 01 4A 25 FC 5D 01 49 F0 08 03 02 40 00  // @V..J%.].I....@.
    BB20: 15 05 40 05 03 00 41 03 5E 09 02 41 40 09 05 40  // ..@...A.^..A@..@
    BB30: 20 20 20 20 3E 02 41 40 44 F0 08 51 02 2D 05 01  //     >.A@D..Q.-..
    BB40: 01 00 00 00 3E 05 01 A0 86 01 00 49 AE 08 01 25  // ....>......I...%
    BB50: F7 5D 07 43 6E 0D 03 02 40 00 15 05 40 04 69 05  // .].Cn...@...@.i.
    BB60: 40 FF FF FF FF 07 02 03 5E 40 56 00 01 4A 25 FC  // @.......^@V..J%.
    BB70: 5D 01 49 45 09 03 02 40 00 15 05 40 05 03 00 41  // ].IE...@...@...A
    BB80: 03 5E 09 02 41 40 3E 05 41 00 00 00 00 44 45 09  // .^..A@>.A....DE.
    BB90: 51 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00  // Q.-......>......
    BBA0: 49 07 09 01 25 F7 5D 08 43 6E 0D 03 02 40 00 15  // I...%.].Cn...@..
    BBB0: 05 40 02 69 05 40 FF FF FF FF 07 02 03 5E 40 03  // .@.i.@.......^@.
    BBC0: 02 40 00 15 05 40 01 09 05 40 02 02 02 02 0D 02  // .@...@...@......
    BBD0: 03 5E 40 43 6E 0D 4A 25 FC 5D 01 49 6E 0D 56 00  // .^@Cn.J%.].In.V.
    BBE0: 40 20 25 00 02 03 0A 41 48 03 02 48 40 0D E5 2E  // @ %....AH..H@...
    BBF0: 5D 10 03 0A 48 41 3D A5 00 00 44 9C 09 0D 65 F0  // ]...HA=...D...e.
    BC00: 5D F0 0D A5 F0 5D 01 0D A5 E9 5D 01 3D A5 00 00  // ]....]....].=...
    BC10: 44 B8 09 4A 05 06 5E 33 33 00 00 44 C9 0A 03 02  // D..J..^33..D....
    BC20: 40 00 15 05 40 01 69 05 40 FF FF FF FF 07 02 03  // @...@.i.@.......
    BC30: 5E 40 03 02 40 00 15 05 40 02 09 05 40 04 04 04  // ^@..@...@...@...
    BC40: 04 0D 02 03 5E 40 03 00 40 06 5E 4C 25 00 01 44  // ....^@..@.^L%..D
    BC50: F3 09 09 05 40 FC FF FF FF 4C 65 00 01 44 01 0A  // ....@....Le..D..
    BC60: 09 05 40 CF FF FF FF 4C A5 00 01 44 0F 0A 09 05  // ..@....L...D....
    BC70: 40 FF FC FF FF 4C E5 00 01 44 1D 0A 09 05 40 FF  // @....L...D....@.
    BC80: CF FF FF 01 02 06 5E 40 03 02 40 00 15 05 40 04  // ......^@..@...@.
    BC90: 0D 02 03 5E 40 56 00 01 4A 25 FC 5D 01 49 6E 0D  // ...^@V..J%.].In.
    BCA0: 03 02 40 00 15 05 40 05 03 00 41 03 5E 09 02 41  // ..@...@...A.^..A
    BCB0: 40 09 05 40 20 20 20 20 3E 02 41 40 44 74 0A 51  // @..@    >.A@Dt.Q
    BCC0: 02 2D 05 01 01 00 00 00 3E 05 01 A0 86 01 00 49  // .-......>......I
    BCD0: 32 0A 01 25 F7 5D 09 43 6E 0D 03 02 40 00 15 05  // 2..%.].Cn...@...
    BCE0: 40 04 69 05 40 FF FF FF FF 07 02 03 5E 40 56 00  // @.i.@.......^@V.
    BCF0: 01 4A 25 FC 5D 01 49 6E 0D 03 02 40 00 15 05 40  // .J%.].In...@...@
    BD00: 05 03 00 41 03 5E 09 02 41 40 3E 05 41 00 00 00  // ...A.^..A@>.A...
    BD10: 00 44 C9 0A 51 02 2D 05 01 01 00 00 00 3E 05 01  // .D..Q.-......>..
    BD20: A0 86 01 00 49 8B 0A 01 25 F7 5D 0A 43 6E 0D 03  // ....I...%.].Cn..
    BD30: 02 40 00 15 05 40 03 09 05 40 08 08 08 08 0D 02  // .@...@...@......
    BD40: 03 5E 40 43 6E 0D 03 02 40 00 15 05 40 03 69 05  // .^@Cn...@...@.i.
    BD50: 40 FF FF FF FF 07 02 03 5E 40 07 A5 F0 5D FE 4C  // @.......^@...].L
    BD60: 25 00 01 44 05 0B 07 65 F0 5D EF 4C 65 00 01 44  // %..D...e.].Le..D
    BD70: 11 0B 07 65 F0 5D DF 4C A5 00 01 44 1D 0B 07 65  // ...e.].L...D...e
    BD80: F0 5D BF 4C E5 00 01 44 29 0B 07 65 F0 5D 7F 07  // .].L...D)..e.]..
    BD90: A5 E9 5D FE 56 00 40 20 25 00 02 03 0A 48 40 07  // ..].V.@ %....H@.
    BDA0: E5 2E 5D EF 43 6E 0D 66 1E 2D 0D 42 C4 00 3D A5  // ..].Cn.f.-.B..=.
    BDB0: 00 02 44 7C 0B 2D 0D 42 0C 00 3D A5 00 03 49 6E  // ..D|.-.B..=...In
    BDC0: 0D 3D 05 01 30 75 00 00 47 7C 0B 3D 05 01 40 9C  // .=..0u..G|.=..@.
    BDD0: 00 00 46 77 0B 2D 0D 42 28 02 43 7C 0B 2D 0D 42  // ..Fw.-.B(.C|.-.B
    BDE0: 0C 00 03 21 43 00 03 A2 46 44 4C A4 46 05 00 44  // ...!C...FDL.F..D
    BDF0: D3 0B 03 04 40 00 00 3E 05 40 00 00 00 00 44 D3  // ....@..>.@....D.
    BE00: 0B 56 00 41 56 00 40 03 24 40 06 00 09 25 40 3F  // .V.AV.@.$@...%@?
    BE10: 03 22 41 40 03 24 40 07 00 09 25 40 3F 15 0D 40  // ."A@.$@...%@?..@
    BE20: 06 0F 0A 41 40 03 64 40 08 00 09 65 40 3F 15 15  // ...A@.d@...e@?..
    BE30: 40 04 0F 52 41 40 43 4A 0D 03 21 43 00 03 A2 46  // @..RA@CJ..!C...F
    BE40: 44 66 07 2D 0C 42 04 00 3D A5 00 03 44 F7 0B 66  // Df.-.B..=...D..f
    BE50: 07 2D 0C 42 06 00 3D A5 00 02 49 6E 0D 03 04 41  // .-.B..=...In...A
    BE60: 00 00 3E 05 41 00 00 00 00 44 6E 0D 3D 02 01 41  // ..>.A....Dn.=..A
    BE70: 46 15 0C 4C A4 46 06 00 49 1D 0C 2D 0D 42 0C 00  // F..L.F..I..-.B..
    BE80: 43 F7 0B 03 04 41 08 00 43 4A 0D 08 A5 00 1B 66  // C....A..CJ.....f
    BE90: 1E 2D 0D 42 C0 02 03 21 43 00 03 A2 46 44 03 0C  // .-.B...!C...FD..
    BEA0: 46 02 00 4C A4 46 00 00 49 94 0C 66 1E 2D 0D 42  // F..L.F..I..f.-.B
    BEB0: E8 00 3D 05 01 48 3F 00 00 47 7F 0C 66 1E 2D 0D  // ..=..H?..G..f.-.
    BEC0: 42 50 02 3D 05 01 78 69 00 00 47 7F 0C 66 1E 2D  // BP.=..xi..G..f.-
    BED0: 0D 42 88 02 3D 05 01 F0 D2 00 00 47 7F 0C 66 1E  // .B..=......G..f.
    BEE0: 2D 0D 42 20 01 03 21 43 00 03 A2 46 44 03 0C 46  // -.B ..!C...FD..F
    BEF0: 02 00 4C A4 46 00 00 44 EF 0C 2D 0D 42 06 00 56  // ..L.F..D..-.B..V
    BF00: 20 41 3D A4 00 00 00 44 B7 0C 2D 25 41 01 3E 25  //  A=....D..-%A.>%
    BF10: 41 0A 44 EF 0C 2D 0D 42 05 00 43 9C 0C 56 00 41  // A.D..-.B..C..V.A
    BF20: 56 00 40 03 24 40 01 00 09 25 40 3F 03 22 41 40  // V.@.$@...%@?."A@
    BF30: 03 24 40 02 00 09 25 40 3F 15 0D 40 06 0F 0A 41  // .$@...%@?..@...A
    BF40: 40 03 64 40 03 00 09 65 40 3F 15 15 40 04 0F 52  // @.d@...e@?..@..R
    BF50: 41 40 43 4A 0D 66 07 2D 0C 42 08 00 03 21 43 00  // A@CJ.f.-.B...!C.
    BF60: 03 A2 46 44 03 04 41 00 00 3E 05 41 00 00 00 00  // ..FD..A..>.A....
    BF70: 44 6E 0D 3D 02 01 41 46 1C 0D 4C A4 46 04 00 49  // Dn.=..AF..L.F..I
    BF80: 24 0D 2D 0D 42 44 00 43 FE 0C 2D 0D 42 08 00 3D  // $.-.BD.C..-.B..=
    BF90: A4 00 00 00 44 45 0D 03 24 41 00 00 3E 25 41 18  // ....DE..$A..>%A.
    BFA0: 44 45 0D 2D 0D 42 06 00 43 29 0D 03 04 41 01 00  // DE.-.B..C)...A..
    BFB0: 5C 02 0F 5E 00 00 FC FF 41 5C 02 10 5E 00 00 FC  // \..^....A\..^...
    BFC0: FF 41 5C 02 11 5E 00 00 FC FF 41 5C 02 12 5E 00  // .A\..^....A\..^.
    BFD0: 00 FC FF 41 3A 00 00 5B 7A 0A 00 00 00 D8 00 B0  // ...A:..[z.......
    BFE0: 01 88 02 60 03 00 1B 02 01 02 00 00 37 00 00 3D  // ...`........7..=
    BFF0: 0D 00 00 00 44 CE 01 56 00 41 03 21 41 01 09 25  // ....D..V.A.!A..%
    C000: 41 0F 15 0D 41 02 03 0A 40 42 66 FF 2D 0D 42 07  // A...A...@Bf.-.B.
    C010: 02 2D 0A 42 41 03 0C 48 02 00 0D A5 90 5D 01 54  // .-.BA..H.....].T
    C020: 08 90 5D 03 0C 48 00 00 03 F9 41 01 15 3D 41 04  // ..]..H....A..=A.
    C030: 5C BA 10 54 8F 41 03 0A 42 40 4A 25 10 54 01 49  // \..T.A..B@J%.T.I
    C040: 81 00 0D 0D 10 54 01 01 0D 25 10 54 10 4A 25 10  // .....T...%.T.J%.
    C050: 54 20 44 67 00 07 25 10 54 EF 4A 25 10 54 20 49  // T Dg..%.T.J%.T I
    C060: 74 00 0D 25 13 54 40 56 00 41 03 09 41 00 3B 02  // t..%.T@V.A..A.;.
    C070: 41 03 3B 41 00 1B 25 41 04 01 A2 11 54 41 03 69  // A.;A..%A....TA.i
    C080: 41 01 15 2D 41 04 01 2A 11 54 41 56 00 40 0F E5  // A..-A..*.TAV.@..
    C090: 40 80 03 73 40 00 01 02 16 54 40 56 00 40 03 6B  // @..s@....T@V.@.k
    C0A0: 40 00 01 02 16 54 40 03 63 40 00 01 02 16 54 40  // @....T@.c@....T@
    C0B0: 03 7B 40 00 09 65 40 0F 01 02 16 54 40 3E 25 41  // .{@..e@....T@>%A
    C0C0: 04 47 10 01 33 25 41 04 2D 05 46 04 00 00 00 03  // .G..3%A.-.F.....
    C0D0: 63 40 00 01 02 16 54 40 03 6B 40 00 01 02 16 54  // c@....T@.k@....T
    C0E0: 40 03 73 40 00 01 02 16 54 40 03 7B 40 00 01 02  // @.s@....T@.{@...
    C0F0: 16 54 40 43 D7 00 0D 25 13 54 02 0D 25 11 54 01  // .T@C...%.T..%.T.
    C100: 03 29 40 01 21 25 40 0A 2D 25 40 96 4A 25 14 54  // .)@.!%@.-%@.J%.T
    C110: 01 49 42 01 51 14 33 25 40 01 3E 25 40 00 49 26  // .IB.Q.3%@.>%@.I&
    C120: 01 02 65 01 01 43 CA 01 4A 05 14 54 F0 8F FF 00  // ..e..C..J..T....
    C130: 44 54 01 02 65 01 02 43 CA 01 01 05 16 54 01 00  // DT..e..C.....T..
    C140: 00 80 03 00 40 16 54 02 6A 01 40 02 B8 01 14 54  // ....@.T.j.@....T
    C150: 08 A5 01 1F 3D A5 01 00 46 7C 01 02 65 01 03 43  // ....=...F|..e..C
    C160: CA 01 32 A5 01 01 3D 8D 00 00 00 44 CA 01 3D A5  // ..2...=....D..=.
    C170: 01 00 44 CA 01 03 31 41 01 03 19 40 00 56 18 40  // ..D...1A...@.V.@
    C180: 3B 02 40 03 28 40 16 54 03 68 40 16 54 03 A8 40  // ;.@.(@.T.h@.T..@
    C190: 16 54 03 E8 40 16 54 04 02 00 40 3E 25 41 04 47  // .T..@.T...@>%A.G
    C1A0: CA 01 33 25 41 04 2D 05 46 04 00 00 00 43 9D 01  // ..3%A.-.F....C..
    C1B0: 3A 00 00 5B 66 FF 2D 0D 42 07 02 03 0C 48 00 00  // :..[f.-.B....H..
    C1C0: 01 8D 18 54 18 00 01 05 19 54 7A 1C 02 00 01 05  // ...T.....Tz.....
    C1D0: 1A 54 10 11 3D 10 2D 0D 42 04 00 2C 25 00 01 3D  // .T..=.-.B..,%..=
    C1E0: 25 00 05 49 D5 01 56 08 48 5B 7A 14 00 00 00 00  // %..I..V.H[z.....
    C1F0: 00 1C 00 04 00 38 00 08 00 54 00 0C 00 70 00 10  // .....8...T...p..
    C200: 00 00 5A 00 01 02 00 04 02 25 01 04 03 31 41 00  // ..Z......%...1A.
    C210: 09 0D 41 0F 00 15 0D 41 01 66 FF 2D 0D 42 50 00  // ..A....A.f.-.BP.
    C220: 2D 0A 42 41 03 0C 48 00 00 07 A5 90 5D FE 01 0D  // -.BA..H.....]...
    C230: 90 5D 11 11 50 02 4A 0D 93 5D 01 00 49 41 00 02  // .]..P.J..]..IA..
    C240: 25 01 13 54 08 90 5D 54 00 92 5D 3A 00 00 5B 7A  // %..T..]T..]:..[z
    C250: 0A 00 00 00 04 00 08 00 0C 00 10 00 62 01 02 01  // ............b...
    C260: 04 04 37 00 00 42 21 00 63 07 29 00 63 03 4E 00  // ..7..B!.c.).c.N.
    C270: 63 02 60 00 63 04 84 00 63 0C 19 01 63 0D 22 01  // c.`.c...c...c.".
    C280: 5A 5A 43 61 01 01 0D 45 5D 9F 0F 66 06 01 24 47  // ZZCa...E]..f..$G
    C290: 5D 30 00 01 4C 47 5D 31 00 03 24 46 3B 00 3E 25  // ]0..LG]1..$F;.>%
    C2A0: 46 00 44 61 01 54 20 47 5D 5B 0D E5 47 5D 01 5C  // F.Da.T G][..G].\
    C2B0: 05 43 5D FF FF FF FD 11 00 03 00 5B 0D E5 47 5D  // .C]........[..G]
    C2C0: 01 4A 25 44 5D 02 44 72 00 0D A5 43 5D 01 0D A5  // .J%D].Dr...C]...
    C2D0: 43 5D 02 5C 05 43 5D EF FF FF FD 01 00 00 00 5B  // C].\.C]........[
    C2E0: 4A 05 53 00 00 02 00 00 44 94 00 0D 25 4B 5D 01  // J.S.....D...%K].
    C2F0: 3D 8D 00 00 00 44 18 01 03 05 46 00 36 6E 01 56  // =....D....F.6n.V
    C300: 00 41 03 19 41 00 21 05 41 FF 0F 00 00 27 02 46  // .A..A.!.A....'.F
    C310: 40 3E 05 41 00 00 00 00 44 C4 00 2D 0D 40 01 00  // @>.A....D..-.@..
    C320: 01 8A 45 5D 40 56 00 41 03 19 41 00 21 02 40 41  // ..E]@V.A..A.!.@A
    C330: 27 02 46 40 01 A5 4A 5D 0C 01 0A 4A 5D 40 15 05  // '.F@..J]...J]@..
    C340: 40 04 56 00 41 03 29 41 00 3E 25 41 FF 49 F9 00  // @.V.A.)A.>%A.I..
    C350: 2D 0D 41 01 00 21 02 40 41 1B 05 40 08 01 0A 48  // -.A..!.@A..@...H
    C360: 5D 40 0D E5 48 5D C0 07 25 4B 5D FE 4A 65 4B 5D  // ]@..H]..%K].JeK]
    C370: 01 49 10 01 5B 01 05 43 5D 00 00 03 00 5B 0D E5  // .I..[..C]....[..
    C380: 47 5D 01 4A 05 43 5D 01 00 00 00 44 48 01 4A 05  // G].J.C]....DH.J.
    C390: 43 5D 10 00 00 00 49 55 01 4A 05 44 5D 01 00 00  // C]....IU.J.D]...
    C3A0: 00 49 3D 01 5C 05 43 5D FF FF FE FF 00 00 02 00  // .I=.\.C]........
    C3B0: 5B 5C 05 43 5D EF FF FD FD 01 00 00 00 5B A7 00  // [\.C]........[..
    C3C0: 03 02 00 10 37 00 00 4A 25 48 00 01 44 12 00 5B  // ....7..J%H..D..[
    C3D0: 01 05 00 00 2C A8 01 00 03 00 46 01 00 1B 05 46  // ....,.....F....F
    C3E0: 08 3D 65 02 00 49 2E 00 2C 22 02 46 3D E5 02 00  // .=e..I..,".F=...
    C3F0: 49 39 00 2C A2 02 46 3D 65 02 02 49 40 00 03 01  // I9.,..F=e..I@...
    C400: 40 03 09 05 40 00 00 00 FC 3E 05 40 00 00 00 D0  // @...@....>.@....
    C410: 49 66 00 01 05 63 C0 00 00 00 40 55 00 00 55 20  // If...c....@U..U 
    C420: 02 43 6A 00 54 00 63 C0 01 01 64 C0 00 56 00 40  // .Cj.T.c...d..V.@
    C430: 03 21 40 02 01 02 65 C0 40 01 01 66 C0 01 03 31  // .!@...e.@..f...1
    C440: 40 02 01 02 67 C0 40 01 01 E8 C0 03 3D 65 02 01  // @...g.@.....=e..
    C450: 44 9E 00 3D E5 02 01 44 9E 00 51 02 4A E5 A0 21  // D..=...D..Q.J..!
    C460: 80 49 9E 00 5B 00 88 01 02 02 00 00 37 00 00 3D  // .I..[.......7..=
    C470: 25 01 01 44 77 00 3D 25 01 02 44 78 00 3D 25 01  // %..Dw.=%..Dx.=%.
    C480: 03 44 33 00 3D 25 01 00 49 71 01 3D 05 00 00 00  // .D3.=%..Iq.=....
    C490: 00 00 49 53 00 3A 00 00 5B 26 05 00 64 00 00 00  // ..IS.:..[&..d...
    C4A0: 02 02 01 40 02 05 00 07 00 00 00 52 13 20 05 01  // ...@.......R. ..
    C4B0: 64 00 00 00 02 02 00 40 5B 54 20 A4 53 26 05 00  // d......@[T .S&..
    C4C0: 64 00 00 00 02 02 01 40 02 05 00 04 00 00 00 52  // d......@.......R
    C4D0: 13 20 05 01 64 00 00 00 02 02 00 40 5B 5B 66 FF  // . ..d......@[[f.
    C4E0: 2D 0D 42 78 01 56 00 41 03 39 41 01 15 25 41 02  // -.Bx.V.A.9A..%A.
    C4F0: 2D 0A 42 41 3D 65 01 0B 49 EB 00 20 05 00 64 00  // -.BA=e..I.. ..d.
    C500: 00 00 03 0C 48 02 00 03 00 41 40 01 0F 25 41 10  // ....H....A@..%A.
    C510: 09 0D 41 DF FF 03 0C 48 00 00 4A 05 01 50 01 00  // ..A....H..J..P..
    C520: 00 00 44 D4 00 03 0C 48 02 00 3C 02 41 01 40 49  // ..D....H..<.A.@I
    C530: D4 00 3C 02 40 01 41 44 71 01 03 0C 48 02 00 07  // ..<.@.ADq...H...
    C540: 25 40 01 EF 01 02 41 01 40 01 0A 40 01 41 43 71  // %@....A.@..@.ACq
    C550: 01 56 00 40 03 8D 40 0C 00 3D 65 01 18 44 02 01  // .V.@..@..=e..D..
    C560: 03 A9 40 01 33 A5 40 14 03 31 40 01 09 25 40 03  // ..@.3.@..1@..%@.
    C570: 15 25 40 04 0F 0D 40 01 01 56 00 41 03 29 41 01  // .%@...@..V.A.)A.
    C580: 33 25 41 14 03 0C 48 00 00 4A 05 01 50 01 00 00  // 3%A...H..J..P...
    C590: 00 44 4F 01 03 0C 48 02 00 4A 25 40 01 10 49 4F  // .DO...H..J%@..IO
    C5A0: 01 3C 22 43 01 41 49 4F 01 03 1A 48 40 3C 0A 00  // .<"C.AIO...H@<..
    C5B0: 01 40 44 71 01 03 1A 48 40 07 25 00 01 FE 03 0C  // .@Dq...H@.%.....
    C5C0: 48 02 00 01 22 43 01 41 07 0D 40 01 EF FF 03 1A  // H..."C.A..@.....
    C5D0: 48 40 01 0A 00 01 40 3A 00 00 5B 7A 10 00 00 00  // H@....@:..[z....
    C5E0: 00 00 80 00 04 00 00 01 08 00 80 01 0C 00 12 00  // ................
    C5F0: 01 01 04 00 37 00 00 4A A5 4C 00 04 44 11 00 5B  // ....7..J.L..D..[
    C600: C8 00 02 01 D6 09 80 02 A0 00 E0 01 2D 00 10 00  // ............-...
    C610: 60 00 0A 00 02 00 00 00 00 00 08 08 06 00 12 3C  // `..............<
    C620: A0 0F 20 03 00 01 58 02 1C 00 28 00 80 00 01 00  // .. ...X...(.....
    C630: 04 00 00 00 00 00 00 00 00 00 6A 3C 64 19 00 04  // ..........j<d...
    C640: 40 01 00 03 26 00 18 00 88 00 03 00 06 00 00 00  // @...&...........
    C650: 00 00 00 00 06 00 55 3C 30 2A 00 05 08 02 C0 03  // ......U<0*......
    C660: 28 00 60 00 70 00 01 00 03 00 00 00 00 00 00 00  // (.`.p...........
    C670: 00 00 E9 3C 30 2A 00 05 98 01 00 04 2A 00 30 00  // ...<0*......*.0.
    C680: 70 00 01 00 03 00 00 00 00 00 00 00 00 00 EA 3C  // p..............<
    C690: 8F 2F 78 05 D0 01 1A 04 27 00 58 00 90 00 03 00  // ./x.....'.X.....
    C6A0: 04 00 00 00 00 00 00 00 02 00 EB 3C 48 3F 40 06  // ...........<H?@.
    C6B0: 30 02 B0 04 32 00 40 00 C0 00 01 00 03 00 00 00  // 0...2.@.........
    C6C0: 00 00 00 00 00 00 EC 3C 48 00 03 02 0E 00 0A 11  // .......<H.......
    C6D0: 20 4E 00 00 20 4E 00 00 01 00 00 00 30 2D 00 00  //  N.. N......0-..
    C6E0: 4C 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // L...............
    C6F0: F4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C700: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    C710: 04 03 02 01 00 00 00 00 00 2A 00 2A 00 00 2A 2A  // .........*.*..**
    C720: 2A 00 00 2A 00 2A 2A 15 00 2A 2A 2A 15 15 15 15  // *..*.**..***....
    C730: 15 3F 15 3F 15 15 3F 3F 3F 15 15 3F 15 3F 3F 3F  // .?.?..???..?.???
    C740: 15 3F 3F 3F 00 00 00 05 05 05 08 08 08 0B 0B 0B  // .???............
    C750: 0E 0E 0E 11 11 11 14 14 14 18 18 18 1C 1C 1C 20  // ............... 
    C760: 20 20 24 24 24 28 28 28 2D 2D 2D 32 32 32 38 38  //   $$$(((---22288
    C770: 38 3F 3F 3F 00 00 3F 10 00 3F 1F 00 3F 2F 00 3F  // 8???..?..?..?/.?
    C780: 3F 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 00 00 3F  // ?.??./?..?..?..?
    C790: 10 00 3F 1F 00 3F 2F 00 3F 3F 00 2F 3F 00 1F 3F  // ..?..?/.??./?..?
    C7A0: 00 10 3F 00 00 3F 00 00 3F 10 00 3F 1F 00 3F 2F  // ..?..?..?..?..?/
    C7B0: 00 3F 3F 00 2F 3F 00 1F 3F 00 10 3F 1F 1F 3F 27  // .??./?..?..?..?'
    C7C0: 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 3F 3F 1F 37 3F 1F  // .?/.?7.??.??.7?.
    C7D0: 2F 3F 1F 27 3F 1F 1F 3F 27 1F 3F 2F 1F 3F 37 1F  // /?.'?..?'.?/.?7.
    C7E0: 3F 3F 1F 37 3F 1F 2F 3F 1F 27 3F 1F 1F 3F 1F 1F  // ??.7?./?.'?..?..
    C7F0: 3F 27 1F 3F 2F 1F 3F 37 1F 3F 3F 1F 37 3F 1F 2F  // ?'.?/.?7.??.7?./
    C800: 3F 1F 27 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A 2D 3F  // ?.'?--?1-?6-?:-?
    C810: 3F 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 2D 2D 3F  // ?-??-:?-6?-1?--?
    C820: 31 2D 3F 36 2D 3F 3A 2D 3F 3F 2D 3A 3F 2D 36 3F  // 1-?6-?:-??-:?-6?
    C830: 2D 31 3F 2D 2D 3F 2D 2D 3F 31 2D 3F 36 2D 3F 3A  // -1?--?--?1-?6-?:
    C840: 2D 3F 3F 2D 3A 3F 2D 36 3F 2D 31 3F 00 00 1C 07  // -??-:?-6?-1?....
    C850: 00 1C 0E 00 1C 15 00 1C 1C 00 1C 1C 00 15 1C 00  // ................
    C860: 0E 1C 00 07 1C 00 00 1C 07 00 1C 0E 00 1C 15 00  // ................
    C870: 1C 1C 00 15 1C 00 0E 1C 00 07 1C 00 00 1C 00 00  // ................
    C880: 1C 07 00 1C 0E 00 1C 15 00 1C 1C 00 15 1C 00 0E  // ................
    C890: 1C 00 07 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18 0E 1C  // ................
    C8A0: 1C 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 0E 0E 1C  // ................
    C8B0: 11 0E 1C 15 0E 1C 18 0E 1C 1C 0E 18 1C 0E 15 1C  // ................
    C8C0: 0E 11 1C 0E 0E 1C 0E 0E 1C 11 0E 1C 15 0E 1C 18  // ................
    C8D0: 0E 1C 1C 0E 18 1C 0E 15 1C 0E 11 1C 14 14 1C 16  // ................
    C8E0: 14 1C 18 14 1C 1A 14 1C 1C 14 1C 1C 14 1A 1C 14  // ................
    C8F0: 18 1C 14 16 1C 14 14 1C 16 14 1C 18 14 1C 1A 14  // ................
    C900: 1C 1C 14 1A 1C 14 18 1C 14 16 1C 14 14 1C 14 14  // ................
    C910: 1C 16 14 1C 18 14 1C 1A 14 1C 1C 14 1A 1C 14 18  // ................
    C920: 1C 14 16 1C 00 00 10 04 00 10 08 00 10 0C 00 10  // ................
    C930: 10 00 10 10 00 0C 10 00 08 10 00 04 10 00 00 10  // ................
    C940: 04 00 10 08 00 10 0C 00 10 10 00 0C 10 00 08 10  // ................
    C950: 00 04 10 00 00 10 00 00 10 04 00 10 08 00 10 0C  // ................
    C960: 00 10 10 00 0C 10 00 08 10 00 04 10 08 08 10 0A  // ................
    C970: 08 10 0C 08 10 0E 08 10 10 08 10 10 08 0E 10 08  // ................
    C980: 0C 10 08 0A 10 08 08 10 0A 08 10 0C 08 10 0E 08  // ................
    C990: 10 10 08 0E 10 08 0C 10 08 0A 10 08 08 10 08 08  // ................
    C9A0: 10 0A 08 10 0C 08 10 0E 08 10 10 08 0E 10 08 0C  // ................
    C9B0: 10 08 0A 10 0B 0B 10 0C 0B 10 0D 0B 10 0F 0B 10  // ................
    C9C0: 10 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 0B 0B 10  // ................
    C9D0: 0C 0B 10 0D 0B 10 0F 0B 10 10 0B 0F 10 0B 0D 10  // ................
    C9E0: 0B 0C 10 0B 0B 10 0B 0B 10 0C 0B 10 0D 0B 10 0F  // ................
    C9F0: 0B 10 10 0B 0F 10 0B 0D 10 0B 0C 10 00 00 00 00  // ................
    CA00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CA10: 00 00 00 00 5C 00 02 01 99 3B 80 07 10 01 38 04  // ....\....;....8.
    CA20: 50 00 30 00 20 00 03 00 06 00 58 01 C2 00 00 00  // P.0. .....X.....
    CA30: 04 00 00 3C 84 03 00 00 02 00 34 21 00 00 B8 0B  // ...<......4!....
    CA40: 00 00 00 00 7D 00 00 02 0B 0A 82 41 00 FF FF 00  // ....}......A....
    CA50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CA60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CA70: 0C 00 02 01 00 00 00 00 00 00 00 00 00 04 01 0C  // ................
    CA80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CA90: 77 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // w...............
    CAA0: 00 00 00 00 84 03 1A 02 00 00 00 00 00 00 00 00  // ................
    CAB0: 00 00 00 00 8C 00 01 01 00 00 00 00 00 00 00 00  // ................
    CAC0: 00 00 00 00 00 00 00 00 02 00 10 01 14 31 00 00  // .............1..
    CAD0: 00 00 E4 00 00 00 00 00 80 00 20 02 0C 32 01 01  // .......... ..2..
    CAE0: 00 00 E4 00 00 02 00 00 00 00 00 00 00 00 00 00  // ................
    CAF0: 00 00 00 00 00 00 00 00 08 00 10 02 13 31 02 02  // .............1..
    CB00: 00 00 E4 00 00 01 00 00 00 00 00 00 00 00 00 00  // ................
    CB10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CB60: 00 00 00 00 00 00 00 00 00 00 FF FF FF FF FF FF  // ................
    CB70: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CB80: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CB90: FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    CBA0: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CBB0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CBC0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CBD0: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CBE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CBF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC70: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CC90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CCA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CCB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CCC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CCD0: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CCE0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CCF0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CD00: FF FF FF FF 00 00 00 00 00 00 FF FF FF FF FF FF  // ................
    CD10: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CD20: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CD30: FF FF FF FF FF FF FF FF FF FF FF FF 00 00 00 00  // ................
    CD40: 00 00 FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CD50: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CD60: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    CD70: FF FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CD80: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CD90: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDA0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDB0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDC0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDD0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDE0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CDF0: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE00: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE10: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE20: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE30: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE40: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE50: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE60: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    CE70: 00 00 00 00 00 00 00 00 00 00 00 00 54 00 02 01  // ............T...
    CE80: B5 5D 00 00 00 00 01 00 B5 5D 00 00 08 08 02 00  // .].......]......
    CE90: B5 5D 00 00 10 10 03 00 B5 5D 00 00 18 14 04 00  // .].......]......
    CEA0: B5 5D 00 00 1A 18 05 00 91 5D 00 00 08 08 90 00  // .].......]......
    CEB0: 95 5D 00 00 08 08 91 00 99 5D 00 00 08 08 92 00  // .].......]......
    CEC0: 9D 5D 00 00 08 08 93 00 A1 5D 00 00 08 08 94 00  // .].......]......
    CED0: 74 00 01 01 10 01 06 12 11 01 16 12 13 01 06 6A  // t..............j
    CEE0: 14 01 16 6A 16 01 06 55 17 01 16 55 19 01 06 EA  // ...j...U...U....
    CEF0: 1A 01 16 EA 65 01 16 E9 66 01 0A E9 21 01 0A 12  // ....e...f...!...
    CF00: 22 01 0A 6A 23 01 0A 55 24 01 0A EA 45 01 16 EB  // "..j#..U$...E...
    CF10: 46 01 0A EB 75 01 16 EC 76 01 0A EC D2 01 16 70  // F...u...v......p
    CF20: D4 01 0A 70 D8 01 16 71 D9 01 0A 71 E2 01 16 72  // ...p...q...q...r
    CF30: E4 01 0A 72 E8 01 16 73 E9 01 0A 73 F5 01 16 74  // ...r...s...s...t
    CF40: F6 01 0A 74 00 04 09 01 14 00 02 01 02 00 08 00  // ...t............
    CF50: 80 00 00 02 00 04 00 08 40 00 FF FF CD 00 01 04  // ........@.......
    CF60: 8A 00 06 00 14 31 68 00 1E 21 00 00 95 00 00 00  // .....1h..!......
    CF70: 02 00 00 00 0C 32 71 00 1E 22 00 00 9C 00 00 00  // .....2q.."......
    CF80: 80 00 00 00 00 00 7A 00 20 21 00 00 A3 00 00 00  // ......z. !......
    CF90: 00 00 00 00 13 31 83 00 20 22 00 00 AA 00 00 00  // .....1.. "......
    CFA0: 08 00 00 00 00 00 8C 00 21 21 00 00 B1 00 00 00  // ........!!......
    CFB0: 00 00 00 00 03 71 B8 00 00 00 00 00 00 00 00 00  // .....q..........
    CFC0: 00 00 00 00 01 04 90 00 02 04 01 00 FF 01 04 91  // ................
    CFD0: 00 02 04 02 00 FF 01 04 90 00 02 04 00 00 FF 01  // ................
    CFE0: 04 92 00 02 04 03 00 FF 01 04 90 00 02 04 00 00  // ................
    CFF0: FF 14 06 0F 00 00 00 FF 14 06 0B 00 00 00 FF 14  // ................
    D000: 06 0F 00 00 00 FF 14 06 0F 01 00 00 FF 14 06 0F  // ................
    D010: 01 00 00 FF 10 0A 01 02 03 04 05 00 00 00 11 0A  // ................
    D020: 90 91 92 93 94 00 00 00 FF 00 05 00 01 01 00 00  // ................
    D030: 38 00 04 03 04 00 00 00 24 F4 00 00 C0 12 60 09  // 8.......$.....`.
    D040: 00 00 00 00 00 00 00 00 7C 01 4E 0C 01 01 00 00  // ........|.N.....
    D050: 55 00 00 00 C0 12 00 00 01 02 04 01 00 05 05 00  // U...............
    D060: 00 00 00 00 00 00 00 00 E6 01 05 03 0E 00 36 00  // ..............6.
    D070: 46 00 5A 01 96 01 30 75 00 00 0C 00 3F 05 3A 40  // F.Z...0u....?.:@
    D080: 00 00 40 9C 00 00 0C 00 3F 05 3E 00 00 00 FF FF  // ..@.....?.>.....
    D090: FF 00 0C 00 3F 05 77 21 00 00 00 00 00 00 FF FF  // ....?.w!........
    D0A0: FF 00 0C 00 3F 05 34 A0 00 00 00 00 00 00 48 3F  // ....?.4.......H?
    D0B0: 00 00 3F 00 44 00 00 16 00 00 00 05 01 1F 00 00  // ..?.D...........
    D0C0: 00 05 02 2C 00 00 00 05 03 3E 00 00 00 05 08 1B  // ...,.....>......
    D0D0: 50 00 00 05 09 25 60 00 00 05 0A 35 90 00 00 05  // P....%`....5....
    D0E0: 10 21 B0 00 00 05 11 2F F0 00 00 05 18 2A 40 01  // .!...../.....*@.
    D0F0: 00 05 78 69 00 00 3F 00 44 00 00 16 00 00 00 05  // ..xi..?.D.......
    D100: 01 1F 00 00 00 05 02 2C 00 00 00 05 03 3E 00 00  // .......,.....>..
    D110: 00 05 08 1B 50 00 00 05 09 25 60 00 00 05 0A 35  // ....P....%`....5
    D120: 90 00 00 05 10 21 B0 00 00 05 11 2F F0 00 00 05  // .....!...../....
    D130: 18 2A 40 01 00 05 F0 D2 00 00 3F 00 44 00 00 1E  // .*@.......?.D...
    D140: 00 00 00 05 01 26 00 00 00 05 02 30 00 00 00 05  // .....&.....0....
    D150: 03 3E 00 00 00 05 08 22 40 00 00 05 09 2C 60 00  // .>....."@....,`.
    D160: 00 05 0A 37 70 00 00 05 10 27 90 00 00 05 11 32  // ...7p....'.....2
    D170: C0 00 00 05 18 2E 00 01 00 05 68 3C 01 00 3F 00  // ..........h<..?.
    D180: 44 00 00 1E 00 00 00 05 01 26 00 00 00 05 02 30  // D........&.....0
    D190: 00 00 00 05 03 3E 00 00 00 05 08 22 40 00 00 05  // .....>....."@...
    D1A0: 09 2C 60 00 00 05 0A 37 70 00 00 05 10 27 90 00  // .,`....7p....'..
    D1B0: 00 05 11 32 C0 00 00 05 18 2E 00 01 00 05 00 00  // ...2............
    D1C0: 00 00 02 03 00 01 00 01 02 03 00 07 03 00 02 03  // ................
    D1D0: 00 01 00 01 02 03 00 07 03 00 02 03 00 01 00 01  // ................
    D1E0: 02 03 00 07 03 00 00 01 02 03 00 01 02 03 00 07  // ................
    D1F0: 03 00 00 01 02 03 00 01 02 03 00 07 03 00 08 30  // ...............0
    D200: 00 00 8D 00 00 00 07 30 00 00 4A 25 00 00 08 31  // .......0..J%...1
    D210: 00 00 8D 00 00 00 07 31 00 00 4A 25 00 00 08 32  // .......1..J%...2
    D220: 00 00 8D 00 00 00 07 32 00 00 4A 25 00 00 08 33  // .......2..J%...3
    D230: 00 00 8D 00 00 00 07 33 00 00 4A 25 00 00 56 00  // .......3..J%..V.
    D240: 00 00 05 00 00 00 FF FF FF FF 00 00 00 00 1C 00  // ................
    D250: 03 01 00 0C 00 00 00 00 00 00 77 01 35 0C C0 12  // ..........w.5...
    D260: 00 00 FF 00 FF 00 FF 00 00 00 34 00 02 03 00 09  // ..........4.....
    D270: 01 02 08 01 02 02 64 C0 00 00 65 C0 00 00 66 C0  // ......d...e...f.
    D280: 00 00 67 C0 00 00 E8 C0 00 00 A0 21 00 00 42 EC  // ..g........!..B.
    D290: 00 00 C0 12 00 00 08 02 00 00 25 00 00 00 FF FF  // ..........%.....
    D2A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D2B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D2C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D2D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D2E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D2F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D300: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D310: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D320: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D330: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D340: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D350: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D360: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D370: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D380: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D390: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3A0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3B0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3C0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3D0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3E0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D3F0: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D400: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D410: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D420: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D430: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D440: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D450: FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF FF  // ................
    D460: FF FF FF FF FF FF FF FF 00 00 00 00 00 00 00 00  // ................
    D470: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  // ................
    D480: 00 00 00 00                                      // ....


